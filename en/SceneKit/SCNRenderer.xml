<Type Name="SCNRenderer" FullName="SceneKit.SCNRenderer">
  <TypeSignature Language="C#" Value="public class SCNRenderer : Foundation.NSObject, IDisposable, SceneKit.ISCNSceneRenderer, SceneKit.ISCNTechniqueSupport" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SCNRenderer extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class SceneKit.ISCNSceneRenderer, class SceneKit.ISCNTechniqueSupport, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:SceneKit.SCNRenderer" />
  <TypeSignature Language="F#" Value="type SCNRenderer = class&#xA;    inherit NSObject&#xA;    interface ISCNSceneRenderer&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface ISCNTechniqueSupport" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>SceneKit.ISCNSceneRenderer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>SceneKit.ISCNTechniqueSupport</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("SCNRenderer", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Renders an SCNScene into an OpenGL context.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/SceneKit/Reference/SCNRenderer_Class/index.html">Apple documentation for <c>SCNRenderer</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SCNRenderer (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new SceneKit.SCNRenderer : Foundation.NSObjectFlag -&gt; SceneKit.SCNRenderer" Usage="new SceneKit.SCNRenderer t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal SCNRenderer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new SceneKit.SCNRenderer : nativeint -&gt; SceneKit.SCNRenderer" Usage="new SceneKit.SCNRenderer handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioEngine">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVAudioEngine AudioEngine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AVFoundation.AVAudioEngine AudioEngine" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.AudioEngine" />
      <MemberSignature Language="F#" Value="member this.AudioEngine : AVFoundation.AVAudioEngine" Usage="SceneKit.SCNRenderer.AudioEngine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("audioEngine")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVAudioEngine</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the audio engine for rendering sound.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioEnvironmentNode">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVAudioEnvironmentNode AudioEnvironmentNode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AVFoundation.AVAudioEnvironmentNode AudioEnvironmentNode" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.AudioEnvironmentNode" />
      <MemberSignature Language="F#" Value="member this.AudioEnvironmentNode : AVFoundation.AVAudioEnvironmentNode" Usage="SceneKit.SCNRenderer.AudioEnvironmentNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("audioEnvironmentNode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVAudioEnvironmentNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the audio environment node.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioListener">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNNode AudioListener { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SceneKit.SCNNode AudioListener" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.AudioListener" />
      <MemberSignature Language="F#" Value="member this.AudioListener : SceneKit.SCNNode with get, set" Usage="SceneKit.SCNRenderer.AudioListener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("audioListener", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAudioListener:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the listener's position node.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoenablesDefaultLighting">
      <MemberSignature Language="C#" Value="public virtual bool AutoenablesDefaultLighting { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoenablesDefaultLighting" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.AutoenablesDefaultLighting" />
      <MemberSignature Language="F#" Value="member this.AutoenablesDefaultLighting : bool with get, set" Usage="SceneKit.SCNRenderer.AutoenablesDefaultLighting" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.AutoenablesDefaultLighting</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("autoenablesDefaultLighting")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAutoenablesDefaultLighting:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether a default light is added to scenes.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="SceneKit.SCNRenderer.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColorPixelFormat">
      <MemberSignature Language="C#" Value="public virtual Metal.MTLPixelFormat ColorPixelFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Metal.MTLPixelFormat ColorPixelFormat" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.ColorPixelFormat" />
      <MemberSignature Language="F#" Value="member this.ColorPixelFormat : Metal.MTLPixelFormat" Usage="SceneKit.SCNRenderer.ColorPixelFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("colorPixelFormat")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.MTLPixelFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the format for color pixels.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommandQueue">
      <MemberSignature Language="C#" Value="public virtual Metal.IMTLCommandQueue CommandQueue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLCommandQueue CommandQueue" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.CommandQueue" />
      <MemberSignature Language="F#" Value="member this.CommandQueue : Metal.IMTLCommandQueue" Usage="SceneKit.SCNRenderer.CommandQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("commandQueue")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLCommandQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the command queue.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Context">
      <MemberSignature Language="C#" Value="public virtual IntPtr Context { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Context" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.Context" />
      <MemberSignature Language="F#" Value="member this.Context : nativeint" Usage="SceneKit.SCNRenderer.Context" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.Context</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("context")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the OpenGL context that is used for rendering the scene.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentRenderCommandEncoder">
      <MemberSignature Language="C#" Value="public virtual Metal.IMTLRenderCommandEncoder CurrentRenderCommandEncoder { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLRenderCommandEncoder CurrentRenderCommandEncoder" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.CurrentRenderCommandEncoder" />
      <MemberSignature Language="F#" Value="member this.CurrentRenderCommandEncoder : Metal.IMTLRenderCommandEncoder" Usage="SceneKit.SCNRenderer.CurrentRenderCommandEncoder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("currentRenderCommandEncoder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLRenderCommandEncoder</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current command encoder.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DebugOptions">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNDebugOptions DebugOptions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SceneKit.SCNDebugOptions DebugOptions" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.DebugOptions" />
      <MemberSignature Language="F#" Value="member this.DebugOptions : SceneKit.SCNDebugOptions with get, set" Usage="SceneKit.SCNRenderer.DebugOptions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("debugOptions", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDebugOptions:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNDebugOptions</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the options that specify which debug overlays to display.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthPixelFormat">
      <MemberSignature Language="C#" Value="public virtual Metal.MTLPixelFormat DepthPixelFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Metal.MTLPixelFormat DepthPixelFormat" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.DepthPixelFormat" />
      <MemberSignature Language="F#" Value="member this.DepthPixelFormat : Metal.MTLPixelFormat" Usage="SceneKit.SCNRenderer.DepthPixelFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("depthPixelFormat")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.MTLPixelFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the format for depth pixels.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public virtual Metal.IMTLDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Metal.IMTLDevice Device" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.Device" />
      <MemberSignature Language="F#" Value="member this.Device : Metal.IMTLDevice" Usage="SceneKit.SCNRenderer.Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("device")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.IMTLDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the Metal device that is used for rendering.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="sCNRenderer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the SCNRenderer object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the SCNRenderer class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the SCNRenderer ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNRenderer FromContext (OpenGLES.EAGLContext context, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNRenderer FromContext(class OpenGLES.EAGLContext context, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.FromContext(OpenGLES.EAGLContext,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="static member FromContext : OpenGLES.EAGLContext * Foundation.NSDictionary -&gt; SceneKit.SCNRenderer" Usage="SceneKit.SCNRenderer.FromContext (context, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNRenderer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="OpenGLES.EAGLContext" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="context">The context in which to draw.</param>
        <param name="options">A dictionary for future possible extensions.</param>
        <summary>Creates a new renderer from the specified graphics context and options.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNRenderer FromContext (IntPtr context, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNRenderer FromContext(native int context, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.FromContext(System.IntPtr,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="static member FromContext : nativeint * Foundation.NSDictionary -&gt; SceneKit.SCNRenderer" Usage="SceneKit.SCNRenderer.FromContext (context, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("rendererWithContext:options:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNRenderer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.IntPtr" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="context">The context in which to draw.</param>
        <param name="options">
          <para>A dictionary for future possible extensions.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new renderer from the specified graphics context and options.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromDevice">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNRenderer FromDevice (Metal.IMTLDevice device, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNRenderer FromDevice(class Metal.IMTLDevice device, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.FromDevice(Metal.IMTLDevice,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="static member FromDevice : Metal.IMTLDevice * Foundation.NSDictionary -&gt; SceneKit.SCNRenderer" Usage="SceneKit.SCNRenderer.FromDevice (device, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("rendererWithDevice:options:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNRenderer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="device" Type="Metal.IMTLDevice" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="device">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="options">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates and returns a new SceneKit renderer from the provided Metal device.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNodesInsideFrustum">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNNode[] GetNodesInsideFrustum (SceneKit.SCNNode pointOfView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SceneKit.SCNNode[] GetNodesInsideFrustum(class SceneKit.SCNNode pointOfView) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.GetNodesInsideFrustum(SceneKit.SCNNode)" />
      <MemberSignature Language="F#" Value="abstract member GetNodesInsideFrustum : SceneKit.SCNNode -&gt; SceneKit.SCNNode[]&#xA;override this.GetNodesInsideFrustum : SceneKit.SCNNode -&gt; SceneKit.SCNNode[]" Usage="sCNRenderer.GetNodesInsideFrustum pointOfView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("nodesInsideFrustumWithPointOfView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNNode[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointOfView" Type="SceneKit.SCNNode" />
      </Parameters>
      <Docs>
        <param name="pointOfView">To be added.</param>
        <summary>Returns the SceneKit nodes that are within the frustrum of a point of view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSnapshot">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage GetSnapshot (double time, CoreGraphics.CGSize size, SceneKit.SCNAntialiasingMode antialiasingMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage GetSnapshot(float64 time, valuetype CoreGraphics.CGSize size, valuetype SceneKit.SCNAntialiasingMode antialiasingMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.GetSnapshot(System.Double,CoreGraphics.CGSize,SceneKit.SCNAntialiasingMode)" />
      <MemberSignature Language="F#" Value="abstract member GetSnapshot : double * CoreGraphics.CGSize * SceneKit.SCNAntialiasingMode -&gt; UIKit.UIImage&#xA;override this.GetSnapshot : double * CoreGraphics.CGSize * SceneKit.SCNAntialiasingMode -&gt; UIKit.UIImage" Usage="sCNRenderer.GetSnapshot (time, size, antialiasingMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("snapshotAtTime:withSize:antialiasingMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Double" />
        <Parameter Name="size" Type="CoreGraphics.CGSize" />
        <Parameter Name="antialiasingMode" Type="SceneKit.SCNAntialiasingMode" />
      </Parameters>
      <Docs>
        <param name="time">To be added.</param>
        <param name="size">To be added.</param>
        <param name="antialiasingMode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNHitTestResult[] HitTest (CoreGraphics.CGPoint thePoint, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SceneKit.SCNHitTestResult[] HitTest(valuetype CoreGraphics.CGPoint thePoint, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.HitTest(CoreGraphics.CGPoint,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member HitTest : CoreGraphics.CGPoint * Foundation.NSDictionary -&gt; SceneKit.SCNHitTestResult[]&#xA;override this.HitTest : CoreGraphics.CGPoint * Foundation.NSDictionary -&gt; SceneKit.SCNHitTestResult[]" Usage="sCNRenderer.HitTest (thePoint, options)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:SceneKit.ISCNSceneRenderer.HitTest(CoreGraphics.CGPoint,Foundation.NSDictionary)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("hitTest:options:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNHitTestResult[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thePoint" Type="CoreGraphics.CGPoint" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="thePoint">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public SceneKit.SCNHitTestResult[] HitTest (CoreGraphics.CGPoint thePoint, SceneKit.SCNHitTestOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class SceneKit.SCNHitTestResult[] HitTest(valuetype CoreGraphics.CGPoint thePoint, class SceneKit.SCNHitTestOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.HitTest(CoreGraphics.CGPoint,SceneKit.SCNHitTestOptions)" />
      <MemberSignature Language="F#" Value="member this.HitTest : CoreGraphics.CGPoint * SceneKit.SCNHitTestOptions -&gt; SceneKit.SCNHitTestResult[]" Usage="sCNRenderer.HitTest (thePoint, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNHitTestResult[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thePoint" Type="CoreGraphics.CGPoint" />
        <Parameter Name="options" Type="SceneKit.SCNHitTestOptions" />
      </Parameters>
      <Docs>
        <param name="thePoint">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNodeInsideFrustum">
      <MemberSignature Language="C#" Value="public virtual bool IsNodeInsideFrustum (SceneKit.SCNNode node, SceneKit.SCNNode pointOfView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsNodeInsideFrustum(class SceneKit.SCNNode node, class SceneKit.SCNNode pointOfView) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.IsNodeInsideFrustum(SceneKit.SCNNode,SceneKit.SCNNode)" />
      <MemberSignature Language="F#" Value="abstract member IsNodeInsideFrustum : SceneKit.SCNNode * SceneKit.SCNNode -&gt; bool&#xA;override this.IsNodeInsideFrustum : SceneKit.SCNNode * SceneKit.SCNNode -&gt; bool" Usage="sCNRenderer.IsNodeInsideFrustum (node, pointOfView)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:SceneKit.ISCNSceneRenderer.IsNodeInsideFrustum(SceneKit.SCNNode,SceneKit.SCNNode)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("isNodeInsideFrustum:withPointOfView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="SceneKit.SCNNode" />
        <Parameter Name="pointOfView" Type="SceneKit.SCNNode" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="pointOfView">To be added.</param>
        <summary>Returns <see langword="true" /> if <paramref name="node" /> can be seen from the specified point of view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JitteringEnabled">
      <MemberSignature Language="C#" Value="public virtual bool JitteringEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool JitteringEnabled" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.JitteringEnabled" />
      <MemberSignature Language="F#" Value="member this.JitteringEnabled : bool with get, set" Usage="SceneKit.SCNRenderer.JitteringEnabled" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.JitteringEnabled</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isJitteringEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setJitteringEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether images are sampled from multiple nearby perspectives to reduce aliasing.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Loops">
      <MemberSignature Language="C#" Value="public virtual bool Loops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Loops" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.Loops" />
      <MemberSignature Language="F#" Value="member this.Loops : bool with get, set" Usage="SceneKit.SCNRenderer.Loops" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.Loops</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("loops")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setLoops:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether the scene restarts after all animations are finished running.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NextFrameTimeInSeconds">
      <MemberSignature Language="C#" Value="public virtual double NextFrameTimeInSeconds { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 NextFrameTimeInSeconds" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.NextFrameTimeInSeconds" />
      <MemberSignature Language="F#" Value="member this.NextFrameTimeInSeconds : double" Usage="SceneKit.SCNRenderer.NextFrameTimeInSeconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("nextFrameTime")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time at which the next frame will be rendered.</summary>
        <value>To be added.</value>
        <remarks>This value is infinite if ther scene is running no actions or animations.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverlayScene">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKScene OverlayScene { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SpriteKit.SKScene OverlayScene" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.OverlayScene" />
      <MemberSignature Language="F#" Value="member this.OverlayScene : SpriteKit.SKScene with get, set" Usage="SceneKit.SCNRenderer.OverlayScene" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.OverlayScene</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("overlaySKScene", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setOverlaySKScene:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKScene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the 2-dimensional content, such as a player scoreboard, that is displayed in front of the scene.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Playing">
      <MemberSignature Language="C#" Value="public virtual bool Playing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Playing" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.Playing" />
      <MemberSignature Language="F#" Value="member this.Playing : bool with get, set" Usage="SceneKit.SCNRenderer.Playing" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.Playing</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isPlaying")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPlaying:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether the scene is currently playing.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PointOfView">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNNode PointOfView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SceneKit.SCNNode PointOfView" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.PointOfView" />
      <MemberSignature Language="F#" Value="member this.PointOfView : SceneKit.SCNNode with get, set" Usage="SceneKit.SCNRenderer.PointOfView" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.PointOfView</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("pointOfView", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPointOfView:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the node from which the scene is viewed..</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public virtual bool Prepare (Foundation.NSObject obj, Func&lt;bool&gt; abortHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Prepare(class Foundation.NSObject obj, class System.Func`1&lt;bool&gt; abortHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.Prepare(Foundation.NSObject,System.Func{System.Boolean})" />
      <MemberSignature Language="F#" Value="abstract member Prepare : Foundation.NSObject * Func&lt;bool&gt; -&gt; bool&#xA;override this.Prepare : Foundation.NSObject * Func&lt;bool&gt; -&gt; bool" Usage="sCNRenderer.Prepare (obj, abortHandler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:SceneKit.ISCNSceneRenderer.Prepare(Foundation.NSObject,System.Func{System.Boolean})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("prepareObject:shouldAbortBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Foundation.NSObject" />
        <Parameter Name="abortHandler" Type="System.Func&lt;System.Boolean&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDFuncArity1V1))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <param name="abortHandler">To be added.</param>
        <summary>Supplies a parameterless handler that is used to halt preparation of a scene  by returning <see langword="true" />, or allowing preparation to continue by returning <see langword="false" />. Returns <see langword="true" /> if preparation was successful.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prepare">
      <MemberSignature Language="C#" Value="public virtual void Prepare (Foundation.NSObject[] objects, Action&lt;bool&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Prepare(class Foundation.NSObject[] objects, class System.Action`1&lt;bool&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.Prepare(Foundation.NSObject[],System.Action{System.Boolean})" />
      <MemberSignature Language="F#" Value="abstract member Prepare : Foundation.NSObject[] * Action&lt;bool&gt; -&gt; unit&#xA;override this.Prepare : Foundation.NSObject[] * Action&lt;bool&gt; -&gt; unit" Usage="sCNRenderer.Prepare (objects, completionHandler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:SceneKit.ISCNSceneRenderer.Prepare(Foundation.NSObject[],System.Action{System.Boolean})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("prepareObjects:withCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objects" Type="Foundation.NSObject[]" />
        <Parameter Name="completionHandler" Type="System.Action&lt;System.Boolean&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V2))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="objects">The objects to prepare.</param>
        <param name="completionHandler">A handler that receives <see langword="true" /> if preparation of all scene resources succeeded, or <see langword="false" /> if not.</param>
        <summary>Prepares content for smoothly rendering a new animated scene.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; PrepareAsync (Foundation.NSObject[] objects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; PrepareAsync(class Foundation.NSObject[] objects) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.PrepareAsync(Foundation.NSObject[])" />
      <MemberSignature Language="F#" Value="abstract member PrepareAsync : Foundation.NSObject[] -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.PrepareAsync : Foundation.NSObject[] -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="sCNRenderer.PrepareAsync objects" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objects" Type="Foundation.NSObject[]" />
      </Parameters>
      <Docs>
        <param name="objects">The objects to prepare.</param>
        <summary>Asynchronously prepares content for smoothly rendering a new animated scene, returning a task that indicates whether scene preparation succeeded.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentScene">
      <MemberSignature Language="C#" Value="public virtual void PresentScene (SceneKit.SCNScene scene, SpriteKit.SKTransition transition, SceneKit.SCNNode pointOfView, Action completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentScene(class SceneKit.SCNScene scene, class SpriteKit.SKTransition transition, class SceneKit.SCNNode pointOfView, class System.Action completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.PresentScene(SceneKit.SCNScene,SpriteKit.SKTransition,SceneKit.SCNNode,System.Action)" />
      <MemberSignature Language="F#" Value="abstract member PresentScene : SceneKit.SCNScene * SpriteKit.SKTransition * SceneKit.SCNNode * Action -&gt; unit&#xA;override this.PresentScene : SceneKit.SCNScene * SpriteKit.SKTransition * SceneKit.SCNNode * Action -&gt; unit" Usage="sCNRenderer.PresentScene (scene, transition, pointOfView, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("presentScene:withTransition:incomingPointOfView:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scene" Type="SceneKit.SCNScene" />
        <Parameter Name="transition" Type="SpriteKit.SKTransition" />
        <Parameter Name="pointOfView" Type="SceneKit.SCNNode" />
        <Parameter Name="completionHandler" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="scene">The scene to present.</param>
        <param name="transition">The transistion to use to present the scene.</param>
        <param name="pointOfView">The point of view to which to present the scene.</param>
        <param name="completionHandler">A handler to run after the scene is presented.</param>
        <summary>Presents the scene.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentSceneAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task PresentSceneAsync (SceneKit.SCNScene scene, SpriteKit.SKTransition transition, SceneKit.SCNNode pointOfView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task PresentSceneAsync(class SceneKit.SCNScene scene, class SpriteKit.SKTransition transition, class SceneKit.SCNNode pointOfView) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.PresentSceneAsync(SceneKit.SCNScene,SpriteKit.SKTransition,SceneKit.SCNNode)" />
      <MemberSignature Language="F#" Value="abstract member PresentSceneAsync : SceneKit.SCNScene * SpriteKit.SKTransition * SceneKit.SCNNode -&gt; System.Threading.Tasks.Task&#xA;override this.PresentSceneAsync : SceneKit.SCNScene * SpriteKit.SKTransition * SceneKit.SCNNode -&gt; System.Threading.Tasks.Task" Usage="sCNRenderer.PresentSceneAsync (scene, transition, pointOfView)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scene" Type="SceneKit.SCNScene" />
        <Parameter Name="transition" Type="SpriteKit.SKTransition" />
        <Parameter Name="pointOfView" Type="SceneKit.SCNNode" />
      </Parameters>
      <Docs>
        <param name="scene">The scene to present.</param>
        <param name="transition">The transistion to use to present the scene.</param>
        <param name="pointOfView">The point of view to which to present the scene.</param>
        <summary>Asynchronously presents the scene, returning a task that represents the operation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProjectPoint">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNVector3 ProjectPoint (SceneKit.SCNVector3 point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype SceneKit.SCNVector3 ProjectPoint(valuetype SceneKit.SCNVector3 point) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.ProjectPoint(SceneKit.SCNVector3)" />
      <MemberSignature Language="F#" Value="abstract member ProjectPoint : SceneKit.SCNVector3 -&gt; SceneKit.SCNVector3&#xA;override this.ProjectPoint : SceneKit.SCNVector3 -&gt; SceneKit.SCNVector3" Usage="sCNRenderer.ProjectPoint point" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:SceneKit.ISCNSceneRenderer.ProjectPoint(SceneKit.SCNVector3)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("projectPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNVector3</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="SceneKit.SCNVector3" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>Projects the specified 3D point onto the 2D viewport.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public virtual void Render ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render() cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.Render" />
      <MemberSignature Language="F#" Value="abstract member Render : unit -&gt; unit&#xA;override this.Render : unit -&gt; unit" Usage="sCNRenderer.Render " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("render")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Developers should not use this deprecated method. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public virtual void Render (double timeInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render(float64 timeInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.Render(System.Double)" />
      <MemberSignature Language="F#" Value="abstract member Render : double -&gt; unit&#xA;override this.Render : double -&gt; unit" Usage="sCNRenderer.Render timeInSeconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("renderAtTime:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="timeInSeconds">To be added.</param>
        <summary>Renders the scene at the specified time.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public virtual void Render (CoreGraphics.CGRect viewport, Metal.IMTLCommandBuffer commandBuffer, Metal.MTLRenderPassDescriptor renderPassDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render(valuetype CoreGraphics.CGRect viewport, class Metal.IMTLCommandBuffer commandBuffer, class Metal.MTLRenderPassDescriptor renderPassDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.Render(CoreGraphics.CGRect,Metal.IMTLCommandBuffer,Metal.MTLRenderPassDescriptor)" />
      <MemberSignature Language="F#" Value="abstract member Render : CoreGraphics.CGRect * Metal.IMTLCommandBuffer * Metal.MTLRenderPassDescriptor -&gt; unit&#xA;override this.Render : CoreGraphics.CGRect * Metal.IMTLCommandBuffer * Metal.MTLRenderPassDescriptor -&gt; unit" Usage="sCNRenderer.Render (viewport, commandBuffer, renderPassDescriptor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("renderWithViewport:commandBuffer:passDescriptor:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewport" Type="CoreGraphics.CGRect" />
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
        <Parameter Name="renderPassDescriptor" Type="Metal.MTLRenderPassDescriptor" />
      </Parameters>
      <Docs>
        <param name="viewport">To be added.</param>
        <param name="commandBuffer">To be added.</param>
        <param name="renderPassDescriptor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public virtual void Render (double timeInSeconds, CoreGraphics.CGRect viewport, Metal.IMTLCommandBuffer commandBuffer, Metal.MTLRenderPassDescriptor renderPassDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render(float64 timeInSeconds, valuetype CoreGraphics.CGRect viewport, class Metal.IMTLCommandBuffer commandBuffer, class Metal.MTLRenderPassDescriptor renderPassDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.Render(System.Double,CoreGraphics.CGRect,Metal.IMTLCommandBuffer,Metal.MTLRenderPassDescriptor)" />
      <MemberSignature Language="F#" Value="abstract member Render : double * CoreGraphics.CGRect * Metal.IMTLCommandBuffer * Metal.MTLRenderPassDescriptor -&gt; unit&#xA;override this.Render : double * CoreGraphics.CGRect * Metal.IMTLCommandBuffer * Metal.MTLRenderPassDescriptor -&gt; unit" Usage="sCNRenderer.Render (timeInSeconds, viewport, commandBuffer, renderPassDescriptor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("renderAtTime:viewport:commandBuffer:passDescriptor:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeInSeconds" Type="System.Double" />
        <Parameter Name="viewport" Type="CoreGraphics.CGRect" />
        <Parameter Name="commandBuffer" Type="Metal.IMTLCommandBuffer" />
        <Parameter Name="renderPassDescriptor" Type="Metal.MTLRenderPassDescriptor" />
      </Parameters>
      <Docs>
        <param name="timeInSeconds">To be added.</param>
        <param name="viewport">To be added.</param>
        <param name="commandBuffer">To be added.</param>
        <param name="renderPassDescriptor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderingApi">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNRenderingApi RenderingApi { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SceneKit.SCNRenderingApi RenderingApi" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.RenderingApi" />
      <MemberSignature Language="F#" Value="member this.RenderingApi : SceneKit.SCNRenderingApi" Usage="SceneKit.SCNRenderer.RenderingApi" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("renderingAPI")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNRenderingApi</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the rendering API.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scene">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNScene Scene { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SceneKit.SCNScene Scene" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.Scene" />
      <MemberSignature Language="F#" Value="member this.Scene : SceneKit.SCNScene with get, set" Usage="SceneKit.SCNRenderer.Scene" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.Scene</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("scene", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setScene:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNScene</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the scene being rendered.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SceneRendererDelegate">
      <MemberSignature Language="C#" Value="public SceneKit.ISCNSceneRendererDelegate SceneRendererDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SceneKit.ISCNSceneRendererDelegate SceneRendererDelegate" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.SceneRendererDelegate" />
      <MemberSignature Language="F#" Value="member this.SceneRendererDelegate : SceneKit.ISCNSceneRendererDelegate with get, set" Usage="SceneKit.SCNRenderer.SceneRendererDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.ISCNSceneRendererDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the scene renderer delegate.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SceneTimeInSeconds">
      <MemberSignature Language="C#" Value="public virtual double SceneTimeInSeconds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 SceneTimeInSeconds" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.SceneTimeInSeconds" />
      <MemberSignature Language="F#" Value="member this.SceneTimeInSeconds : double with get, set" Usage="SceneKit.SCNRenderer.SceneTimeInSeconds" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.SceneTimeInSeconds</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("sceneTime")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSceneTime:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the scene time.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsStatistics">
      <MemberSignature Language="C#" Value="public virtual bool ShowsStatistics { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsStatistics" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.ShowsStatistics" />
      <MemberSignature Language="F#" Value="member this.ShowsStatistics : bool with get, set" Usage="SceneKit.SCNRenderer.ShowsStatistics" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.ShowsStatistics</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsStatistics")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsStatistics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether rendering performance statistics are overlayed on the scene.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StencilPixelFormat">
      <MemberSignature Language="C#" Value="public virtual Metal.MTLPixelFormat StencilPixelFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Metal.MTLPixelFormat StencilPixelFormat" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.StencilPixelFormat" />
      <MemberSignature Language="F#" Value="member this.StencilPixelFormat : Metal.MTLPixelFormat" Usage="SceneKit.SCNRenderer.StencilPixelFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("stencilPixelFormat")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Metal.MTLPixelFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the format for stencil pixels.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Technique">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNTechnique Technique { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SceneKit.SCNTechnique Technique" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.Technique" />
      <MemberSignature Language="F#" Value="member this.Technique : SceneKit.SCNTechnique with get, set" Usage="SceneKit.SCNRenderer.Technique" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNTechniqueSupport.Technique</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("technique", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTechnique:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNTechnique</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the multipass rendering technique.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnprojectPoint">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNVector3 UnprojectPoint (SceneKit.SCNVector3 point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype SceneKit.SCNVector3 UnprojectPoint(valuetype SceneKit.SCNVector3 point) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.UnprojectPoint(SceneKit.SCNVector3)" />
      <MemberSignature Language="F#" Value="abstract member UnprojectPoint : SceneKit.SCNVector3 -&gt; SceneKit.SCNVector3&#xA;override this.UnprojectPoint : SceneKit.SCNVector3 -&gt; SceneKit.SCNVector3" Usage="sCNRenderer.UnprojectPoint point" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:SceneKit.ISCNSceneRenderer.UnprojectPoint(SceneKit.SCNVector3)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("unprojectPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNVector3</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="SceneKit.SCNVector3" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>Unprojects the specified point into the 3D scene by treating the first two coordinates as a 2D point, and the third coordinate as a fraction of the distance between the near and far clipping planes.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual void Update (double time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(float64 time) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.Update(System.Double)" />
      <MemberSignature Language="F#" Value="abstract member Update : double -&gt; unit&#xA;override this.Update : double -&gt; unit" Usage="sCNRenderer.Update time" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("updateAtTime:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="time">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Update">
      <MemberSignature Language="C#" Value="public virtual void Update (SceneKit.SCNNode[] lightProbes, double time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Update(class SceneKit.SCNNode[] lightProbes, float64 time) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNRenderer.Update(SceneKit.SCNNode[],System.Double)" />
      <MemberSignature Language="F#" Value="abstract member Update : SceneKit.SCNNode[] * double -&gt; unit&#xA;override this.Update : SceneKit.SCNNode[] * double -&gt; unit" Usage="sCNRenderer.Update (lightProbes, time)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("updateProbes:atTime:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lightProbes" Type="SceneKit.SCNNode[]" />
        <Parameter Name="time" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="lightProbes">To be added.</param>
        <param name="time">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakSceneRendererDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakSceneRendererDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakSceneRendererDelegate" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNRenderer.WeakSceneRendererDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakSceneRendererDelegate : Foundation.NSObject with get, set" Usage="SceneKit.SCNRenderer.WeakSceneRendererDelegate" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:SceneKit.ISCNSceneRenderer.WeakSceneRendererDelegate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a weak reference to the scene renderer delegate..</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
