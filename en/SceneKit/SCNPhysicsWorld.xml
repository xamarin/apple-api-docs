<Type Name="SCNPhysicsWorld" FullName="SceneKit.SCNPhysicsWorld">
  <TypeSignature Language="C#" Value="public class SCNPhysicsWorld : Foundation.NSObject, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SCNPhysicsWorld extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:SceneKit.SCNPhysicsWorld" />
  <TypeSignature Language="F#" Value="type SCNPhysicsWorld = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("SCNPhysicsWorld", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A physics simulation that models collisions and other physics-related properties in an SCNScene.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/SceneKit/Reference/SCNPhysicsWorld_Class/index.html">Apple documentation for <c>SCNPhysicsWorld</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SCNPhysicsWorld (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new SceneKit.SCNPhysicsWorld : Foundation.NSCoder -&gt; SceneKit.SCNPhysicsWorld" Usage="new SceneKit.SCNPhysicsWorld coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SCNPhysicsWorld (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new SceneKit.SCNPhysicsWorld : Foundation.NSObjectFlag -&gt; SceneKit.SCNPhysicsWorld" Usage="new SceneKit.SCNPhysicsWorld t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal SCNPhysicsWorld (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new SceneKit.SCNPhysicsWorld : nativeint -&gt; SceneKit.SCNPhysicsWorld" Usage="new SceneKit.SCNPhysicsWorld handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBehavior">
      <MemberSignature Language="C#" Value="public virtual void AddBehavior (SceneKit.SCNPhysicsBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBehavior(class SceneKit.SCNPhysicsBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.AddBehavior(SceneKit.SCNPhysicsBehavior)" />
      <MemberSignature Language="F#" Value="abstract member AddBehavior : SceneKit.SCNPhysicsBehavior -&gt; unit&#xA;override this.AddBehavior : SceneKit.SCNPhysicsBehavior -&gt; unit" Usage="sCNPhysicsWorld.AddBehavior behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addBehavior:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="SceneKit.SCNPhysicsBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllBehaviors">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNPhysicsBehavior[] AllBehaviors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SceneKit.SCNPhysicsBehavior[] AllBehaviors" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNPhysicsWorld.AllBehaviors" />
      <MemberSignature Language="F#" Value="member this.AllBehaviors : SceneKit.SCNPhysicsBehavior[]" Usage="SceneKit.SCNPhysicsWorld.AllBehaviors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allBehaviors")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNPhysicsBehavior[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNPhysicsWorld.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="SceneKit.SCNPhysicsWorld.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContactDelegate">
      <MemberSignature Language="C#" Value="public SceneKit.ISCNPhysicsContactDelegate ContactDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SceneKit.ISCNPhysicsContactDelegate ContactDelegate" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNPhysicsWorld.ContactDelegate" />
      <MemberSignature Language="F#" Value="member this.ContactDelegate : SceneKit.ISCNPhysicsContactDelegate with get, set" Usage="SceneKit.SCNPhysicsWorld.ContactDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.ISCNPhysicsContactDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContactTest">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNPhysicsContact[] ContactTest (SceneKit.SCNPhysicsBody body, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SceneKit.SCNPhysicsContact[] ContactTest(class SceneKit.SCNPhysicsBody body, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.ContactTest(SceneKit.SCNPhysicsBody,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member ContactTest : SceneKit.SCNPhysicsBody * Foundation.NSDictionary -&gt; SceneKit.SCNPhysicsContact[]&#xA;override this.ContactTest : SceneKit.SCNPhysicsBody * Foundation.NSDictionary -&gt; SceneKit.SCNPhysicsContact[]" Usage="sCNPhysicsWorld.ContactTest (body, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("contactTestWithBody:options:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNPhysicsContact[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="SceneKit.SCNPhysicsBody" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="body">To be added.</param>
        <param name="options">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContactTest">
      <MemberSignature Language="C#" Value="public SceneKit.SCNPhysicsContact[] ContactTest (SceneKit.SCNPhysicsBody body, SceneKit.SCNPhysicsTest options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class SceneKit.SCNPhysicsContact[] ContactTest(class SceneKit.SCNPhysicsBody body, class SceneKit.SCNPhysicsTest options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.ContactTest(SceneKit.SCNPhysicsBody,SceneKit.SCNPhysicsTest)" />
      <MemberSignature Language="F#" Value="member this.ContactTest : SceneKit.SCNPhysicsBody * SceneKit.SCNPhysicsTest -&gt; SceneKit.SCNPhysicsContact[]" Usage="sCNPhysicsWorld.ContactTest (body, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNPhysicsContact[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="body" Type="SceneKit.SCNPhysicsBody" />
        <Parameter Name="options" Type="SceneKit.SCNPhysicsTest" />
      </Parameters>
      <Docs>
        <param name="body">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContactTest">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNPhysicsContact[] ContactTest (SceneKit.SCNPhysicsBody bodyA, SceneKit.SCNPhysicsBody bodyB, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SceneKit.SCNPhysicsContact[] ContactTest(class SceneKit.SCNPhysicsBody bodyA, class SceneKit.SCNPhysicsBody bodyB, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.ContactTest(SceneKit.SCNPhysicsBody,SceneKit.SCNPhysicsBody,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member ContactTest : SceneKit.SCNPhysicsBody * SceneKit.SCNPhysicsBody * Foundation.NSDictionary -&gt; SceneKit.SCNPhysicsContact[]&#xA;override this.ContactTest : SceneKit.SCNPhysicsBody * SceneKit.SCNPhysicsBody * Foundation.NSDictionary -&gt; SceneKit.SCNPhysicsContact[]" Usage="sCNPhysicsWorld.ContactTest (bodyA, bodyB, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("contactTestBetweenBody:andBody:options:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNPhysicsContact[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bodyA" Type="SceneKit.SCNPhysicsBody" />
        <Parameter Name="bodyB" Type="SceneKit.SCNPhysicsBody" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="bodyA">To be added.</param>
        <param name="bodyB">To be added.</param>
        <param name="options">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContactTest">
      <MemberSignature Language="C#" Value="public SceneKit.SCNPhysicsContact[] ContactTest (SceneKit.SCNPhysicsBody bodyA, SceneKit.SCNPhysicsBody bodyB, SceneKit.SCNPhysicsTest options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class SceneKit.SCNPhysicsContact[] ContactTest(class SceneKit.SCNPhysicsBody bodyA, class SceneKit.SCNPhysicsBody bodyB, class SceneKit.SCNPhysicsTest options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.ContactTest(SceneKit.SCNPhysicsBody,SceneKit.SCNPhysicsBody,SceneKit.SCNPhysicsTest)" />
      <MemberSignature Language="F#" Value="member this.ContactTest : SceneKit.SCNPhysicsBody * SceneKit.SCNPhysicsBody * SceneKit.SCNPhysicsTest -&gt; SceneKit.SCNPhysicsContact[]" Usage="sCNPhysicsWorld.ContactTest (bodyA, bodyB, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNPhysicsContact[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bodyA" Type="SceneKit.SCNPhysicsBody" />
        <Parameter Name="bodyB" Type="SceneKit.SCNPhysicsBody" />
        <Parameter Name="options" Type="SceneKit.SCNPhysicsTest" />
      </Parameters>
      <Docs>
        <param name="bodyA">To be added.</param>
        <param name="bodyB">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvexSweepTest">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNPhysicsContact[] ConvexSweepTest (SceneKit.SCNPhysicsShape shape, SceneKit.SCNMatrix4 from, SceneKit.SCNMatrix4 to, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SceneKit.SCNPhysicsContact[] ConvexSweepTest(class SceneKit.SCNPhysicsShape shape, valuetype SceneKit.SCNMatrix4 from, valuetype SceneKit.SCNMatrix4 to, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.ConvexSweepTest(SceneKit.SCNPhysicsShape,SceneKit.SCNMatrix4,SceneKit.SCNMatrix4,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member ConvexSweepTest : SceneKit.SCNPhysicsShape * SceneKit.SCNMatrix4 * SceneKit.SCNMatrix4 * Foundation.NSDictionary -&gt; SceneKit.SCNPhysicsContact[]&#xA;override this.ConvexSweepTest : SceneKit.SCNPhysicsShape * SceneKit.SCNMatrix4 * SceneKit.SCNMatrix4 * Foundation.NSDictionary -&gt; SceneKit.SCNPhysicsContact[]" Usage="sCNPhysicsWorld.ConvexSweepTest (shape, from, to, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("convexSweepTestWithShape:fromTransform:toTransform:options:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNPhysicsContact[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="SceneKit.SCNPhysicsShape" />
        <Parameter Name="from" Type="SceneKit.SCNMatrix4" />
        <Parameter Name="to" Type="SceneKit.SCNMatrix4" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="shape">To be added.</param>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <param name="options">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvexSweepTest">
      <MemberSignature Language="C#" Value="public SceneKit.SCNPhysicsContact[] ConvexSweepTest (SceneKit.SCNPhysicsShape shape, SceneKit.SCNMatrix4 from, SceneKit.SCNMatrix4 to, SceneKit.SCNPhysicsTest options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class SceneKit.SCNPhysicsContact[] ConvexSweepTest(class SceneKit.SCNPhysicsShape shape, valuetype SceneKit.SCNMatrix4 from, valuetype SceneKit.SCNMatrix4 to, class SceneKit.SCNPhysicsTest options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.ConvexSweepTest(SceneKit.SCNPhysicsShape,SceneKit.SCNMatrix4,SceneKit.SCNMatrix4,SceneKit.SCNPhysicsTest)" />
      <MemberSignature Language="F#" Value="member this.ConvexSweepTest : SceneKit.SCNPhysicsShape * SceneKit.SCNMatrix4 * SceneKit.SCNMatrix4 * SceneKit.SCNPhysicsTest -&gt; SceneKit.SCNPhysicsContact[]" Usage="sCNPhysicsWorld.ConvexSweepTest (shape, from, to, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNPhysicsContact[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shape" Type="SceneKit.SCNPhysicsShape" />
        <Parameter Name="from" Type="SceneKit.SCNMatrix4" />
        <Parameter Name="to" Type="SceneKit.SCNMatrix4" />
        <Parameter Name="options" Type="SceneKit.SCNPhysicsTest" />
      </Parameters>
      <Docs>
        <param name="shape">To be added.</param>
        <param name="from">To be added.</param>
        <param name="to">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidBeginContact">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt; DidBeginContact;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SceneKit.SCNPhysicsContactEventArgs&gt; DidBeginContact" />
      <MemberSignature Language="DocId" Value="E:SceneKit.SCNPhysicsWorld.DidBeginContact" />
      <MemberSignature Language="F#" Value="member this.DidBeginContact : EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt; " Usage="member this.DidBeginContact : System.EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakContactDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidEndContact">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt; DidEndContact;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SceneKit.SCNPhysicsContactEventArgs&gt; DidEndContact" />
      <MemberSignature Language="DocId" Value="E:SceneKit.SCNPhysicsWorld.DidEndContact" />
      <MemberSignature Language="F#" Value="member this.DidEndContact : EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt; " Usage="member this.DidEndContact : System.EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakContactDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateContact">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt; DidUpdateContact;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class SceneKit.SCNPhysicsContactEventArgs&gt; DidUpdateContact" />
      <MemberSignature Language="DocId" Value="E:SceneKit.SCNPhysicsWorld.DidUpdateContact" />
      <MemberSignature Language="F#" Value="member this.DidUpdateContact : EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt; " Usage="member this.DidUpdateContact : System.EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;SceneKit.SCNPhysicsContactEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakContactDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="sCNPhysicsWorld.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the SCNPhysicsWorld object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the SCNPhysicsWorld class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the SCNPhysicsWorld ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="sCNPhysicsWorld.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gravity">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNVector3 Gravity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SceneKit.SCNVector3 Gravity" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNPhysicsWorld.Gravity" />
      <MemberSignature Language="F#" Value="member this.Gravity : SceneKit.SCNVector3 with get, set" Usage="SceneKit.SCNPhysicsWorld.Gravity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("gravity")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setGravity:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNVector3</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RayTestWithSegmentFromPoint">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNHitTestResult[] RayTestWithSegmentFromPoint (SceneKit.SCNVector3 origin, SceneKit.SCNVector3 dest, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SceneKit.SCNHitTestResult[] RayTestWithSegmentFromPoint(valuetype SceneKit.SCNVector3 origin, valuetype SceneKit.SCNVector3 dest, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.RayTestWithSegmentFromPoint(SceneKit.SCNVector3,SceneKit.SCNVector3,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member RayTestWithSegmentFromPoint : SceneKit.SCNVector3 * SceneKit.SCNVector3 * Foundation.NSDictionary -&gt; SceneKit.SCNHitTestResult[]&#xA;override this.RayTestWithSegmentFromPoint : SceneKit.SCNVector3 * SceneKit.SCNVector3 * Foundation.NSDictionary -&gt; SceneKit.SCNHitTestResult[]" Usage="sCNPhysicsWorld.RayTestWithSegmentFromPoint (origin, dest, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rayTestWithSegmentFromPoint:toPoint:options:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNHitTestResult[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="origin" Type="SceneKit.SCNVector3" />
        <Parameter Name="dest" Type="SceneKit.SCNVector3" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="origin">To be added.</param>
        <param name="dest">To be added.</param>
        <param name="options">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RayTestWithSegmentFromPoint">
      <MemberSignature Language="C#" Value="public SceneKit.SCNHitTestResult[] RayTestWithSegmentFromPoint (SceneKit.SCNVector3 origin, SceneKit.SCNVector3 dest, SceneKit.SCNPhysicsTest options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class SceneKit.SCNHitTestResult[] RayTestWithSegmentFromPoint(valuetype SceneKit.SCNVector3 origin, valuetype SceneKit.SCNVector3 dest, class SceneKit.SCNPhysicsTest options) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.RayTestWithSegmentFromPoint(SceneKit.SCNVector3,SceneKit.SCNVector3,SceneKit.SCNPhysicsTest)" />
      <MemberSignature Language="F#" Value="member this.RayTestWithSegmentFromPoint : SceneKit.SCNVector3 * SceneKit.SCNVector3 * SceneKit.SCNPhysicsTest -&gt; SceneKit.SCNHitTestResult[]" Usage="sCNPhysicsWorld.RayTestWithSegmentFromPoint (origin, dest, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNHitTestResult[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="origin" Type="SceneKit.SCNVector3" />
        <Parameter Name="dest" Type="SceneKit.SCNVector3" />
        <Parameter Name="options" Type="SceneKit.SCNPhysicsTest" />
      </Parameters>
      <Docs>
        <param name="origin">To be added.</param>
        <param name="dest">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllBehaviors">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllBehaviors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllBehaviors() cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.RemoveAllBehaviors" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllBehaviors : unit -&gt; unit&#xA;override this.RemoveAllBehaviors : unit -&gt; unit" Usage="sCNPhysicsWorld.RemoveAllBehaviors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeAllBehaviors")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveBehavior">
      <MemberSignature Language="C#" Value="public virtual void RemoveBehavior (SceneKit.SCNPhysicsBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveBehavior(class SceneKit.SCNPhysicsBehavior behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.RemoveBehavior(SceneKit.SCNPhysicsBehavior)" />
      <MemberSignature Language="F#" Value="abstract member RemoveBehavior : SceneKit.SCNPhysicsBehavior -&gt; unit&#xA;override this.RemoveBehavior : SceneKit.SCNPhysicsBehavior -&gt; unit" Usage="sCNPhysicsWorld.RemoveBehavior behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeBehavior:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="SceneKit.SCNPhysicsBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Speed">
      <MemberSignature Language="C#" Value="public virtual nfloat Speed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Speed" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNPhysicsWorld.Speed" />
      <MemberSignature Language="F#" Value="member this.Speed : nfloat with get, set" Usage="SceneKit.SCNPhysicsWorld.Speed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("speed")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSpeed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeStep">
      <MemberSignature Language="C#" Value="public virtual double TimeStep { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TimeStep" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNPhysicsWorld.TimeStep" />
      <MemberSignature Language="F#" Value="member this.TimeStep : double with get, set" Usage="SceneKit.SCNPhysicsWorld.TimeStep" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("timeStep")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setTimeStep:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCollisionPairs">
      <MemberSignature Language="C#" Value="public virtual void UpdateCollisionPairs ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateCollisionPairs() cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNPhysicsWorld.UpdateCollisionPairs" />
      <MemberSignature Language="F#" Value="abstract member UpdateCollisionPairs : unit -&gt; unit&#xA;override this.UpdateCollisionPairs : unit -&gt; unit" Usage="sCNPhysicsWorld.UpdateCollisionPairs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("updateCollisionPairs")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakContactDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakContactDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakContactDelegate" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNPhysicsWorld.WeakContactDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakContactDelegate : Foundation.NSObject with get, set" Usage="SceneKit.SCNPhysicsWorld.WeakContactDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("contactDelegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setContactDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("contactDelegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setContactDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
