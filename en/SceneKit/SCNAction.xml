<Type Name="SCNAction" FullName="SceneKit.SCNAction">
  <TypeSignature Language="C#" Value="public class SCNAction : Foundation.NSObject, Foundation.INSCopying, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SCNAction extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:SceneKit.SCNAction" />
  <TypeSignature Language="F#" Value="type SCNAction = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSCopying&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("SCNAction", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Performs actions on a <see cref="T:SceneKit.SCNNode" />, including changes to appearance, geometry, animations, or arbitrary functions.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/SceneKit/Reference/SCNAction_Class/index.html">Apple documentation for <c>SCNAction</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SCNAction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SCNAction (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new SceneKit.SCNAction : Foundation.NSCoder -&gt; SceneKit.SCNAction" Usage="new SceneKit.SCNAction coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SCNAction (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new SceneKit.SCNAction : Foundation.NSObjectFlag -&gt; SceneKit.SCNAction" Usage="new SceneKit.SCNAction t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal SCNAction (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new SceneKit.SCNAction : nativeint -&gt; SceneKit.SCNAction" Usage="new SceneKit.SCNAction handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNAction.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="SceneKit.SCNAction.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="sCNAction.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomAction">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction CustomAction (double seconds, SceneKit.SCNActionNodeWithElapsedTimeHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction CustomAction(float64 seconds, class SceneKit.SCNActionNodeWithElapsedTimeHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.CustomAction(System.Double,SceneKit.SCNActionNodeWithElapsedTimeHandler)" />
      <MemberSignature Language="F#" Value="static member CustomAction : double * SceneKit.SCNActionNodeWithElapsedTimeHandler -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.CustomAction (seconds, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("customActionWithDuration:actionBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="handler" Type="SceneKit.SCNActionNodeWithElapsedTimeHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDSCNActionNodeWithElapsedTimeHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="seconds">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>A custom action that repeats for some amount of time.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DurationInSeconds">
      <MemberSignature Language="C#" Value="public virtual double DurationInSeconds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 DurationInSeconds" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNAction.DurationInSeconds" />
      <MemberSignature Language="F#" Value="member this.DurationInSeconds : double with get, set" Usage="SceneKit.SCNAction.DurationInSeconds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("duration")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the expected duration of the animation action when its speed is set to 1.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="sCNAction.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FadeIn">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction FadeIn (double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction FadeIn(float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.FadeIn(System.Double)" />
      <MemberSignature Language="F#" Value="static member FadeIn : double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.FadeIn durationInSeconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fadeInWithDuration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="durationInSeconds">To be added.</param>
        <summary>Creates an action that increases the alpha channel on the colors of the geometry to 1, over <paramref name="durationInSeconds" /> seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FadeOpacityBy">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction FadeOpacityBy (nfloat factor, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction FadeOpacityBy(valuetype System.nfloat factor, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.FadeOpacityBy(System.nfloat,System.Double)" />
      <MemberSignature Language="F#" Value="static member FadeOpacityBy : nfloat * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.FadeOpacityBy (factor, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fadeOpacityBy:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="factor" Type="System.nfloat" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="factor">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FadeOpacityTo">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction FadeOpacityTo (nfloat opacity, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction FadeOpacityTo(valuetype System.nfloat opacity, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.FadeOpacityTo(System.nfloat,System.Double)" />
      <MemberSignature Language="F#" Value="static member FadeOpacityTo : nfloat * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.FadeOpacityTo (opacity, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fadeOpacityTo:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="opacity" Type="System.nfloat" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="opacity">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FadeOut">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction FadeOut (double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction FadeOut(float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.FadeOut(System.Double)" />
      <MemberSignature Language="F#" Value="static member FadeOut : double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.FadeOut durationInSeconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fadeOutWithDuration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="durationInSeconds">To be added.</param>
        <summary>Creates an action that changes the alpha channel on the colors of the geometry to 0, over <paramref name="durationInSeconds" /> seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromJavascript">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction FromJavascript (string script, double seconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction FromJavascript(string script, float64 seconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.FromJavascript(System.String,System.Double)" />
      <MemberSignature Language="F#" Value="static member FromJavascript : string * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.FromJavascript (script, seconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("javaScriptActionWithScript:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="script" Type="System.String" />
        <Parameter Name="seconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="script">To be added.</param>
        <param name="seconds">To be added.</param>
        <summary>Creates an action from the JavaScript snippet, that takes <paramref name="seconds" /> to complete.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Group">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction Group (SceneKit.SCNAction[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction Group(class SceneKit.SCNAction[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.Group(SceneKit.SCNAction[])" />
      <MemberSignature Language="F#" Value="static member Group : SceneKit.SCNAction[] -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.Group actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("group:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="SceneKit.SCNAction[]" />
      </Parameters>
      <Docs>
        <param name="actions">To be added.</param>
        <summary>Creates an action that starts a list of actions at the same time.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hide">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction Hide ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction Hide() cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.Hide" />
      <MemberSignature Language="F#" Value="static member Hide : unit -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.Hide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("hide")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a <see cref="T:SceneKit.SCNAction" /> that hides a node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveBy">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction MoveBy (SceneKit.SCNVector3 delta, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction MoveBy(valuetype SceneKit.SCNVector3 delta, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.MoveBy(SceneKit.SCNVector3,System.Double)" />
      <MemberSignature Language="F#" Value="static member MoveBy : SceneKit.SCNVector3 * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.MoveBy (delta, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("moveBy:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delta" Type="SceneKit.SCNVector3" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="delta">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>Creates an action that moves the <see cref="T:SceneKit.SCNGeometry" /> in the magnitude and direction of <paramref name="delta" />, over <paramref name="durationInSeconds" /> seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveBy">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction MoveBy (nfloat deltaX, nfloat deltaY, nfloat deltaZ, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction MoveBy(valuetype System.nfloat deltaX, valuetype System.nfloat deltaY, valuetype System.nfloat deltaZ, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.MoveBy(System.nfloat,System.nfloat,System.nfloat,System.Double)" />
      <MemberSignature Language="F#" Value="static member MoveBy : nfloat * nfloat * nfloat * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.MoveBy (deltaX, deltaY, deltaZ, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("moveByX:y:z:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="deltaX" Type="System.nfloat" />
        <Parameter Name="deltaY" Type="System.nfloat" />
        <Parameter Name="deltaZ" Type="System.nfloat" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="deltaX">To be added.</param>
        <param name="deltaY">To be added.</param>
        <param name="deltaZ">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction MoveTo (SceneKit.SCNVector3 location, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction MoveTo(valuetype SceneKit.SCNVector3 location, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.MoveTo(SceneKit.SCNVector3,System.Double)" />
      <MemberSignature Language="F#" Value="static member MoveTo : SceneKit.SCNVector3 * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.MoveTo (location, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("moveTo:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="SceneKit.SCNVector3" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>Creates an action that moves the geometry to the specified location, over <paramref name="durationInSeconds" /> seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlayAudioSource">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction PlayAudioSource (SceneKit.SCNAudioSource source, bool wait);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction PlayAudioSource(class SceneKit.SCNAudioSource source, bool wait) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.PlayAudioSource(SceneKit.SCNAudioSource,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member PlayAudioSource : SceneKit.SCNAudioSource * bool -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.PlayAudioSource (source, wait)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("playAudioSource:waitForCompletion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="SceneKit.SCNAudioSource" />
        <Parameter Name="wait" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="wait">To be added.</param>
        <summary>Creates and returns an action that plays an audio source.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromParentNode">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction RemoveFromParentNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction RemoveFromParentNode() cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.RemoveFromParentNode" />
      <MemberSignature Language="F#" Value="static member RemoveFromParentNode : unit -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.RemoveFromParentNode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeFromParentNode")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates an action that removes the geometry from its parent.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatAction">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction RepeatAction (SceneKit.SCNAction action, nuint count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction RepeatAction(class SceneKit.SCNAction action, valuetype System.nuint count) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.RepeatAction(SceneKit.SCNAction,System.nuint)" />
      <MemberSignature Language="F#" Value="static member RepeatAction : SceneKit.SCNAction * nuint -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.RepeatAction (action, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("repeatAction:count:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="SceneKit.SCNAction" />
        <Parameter Name="count" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <param name="count">To be added.</param>
        <summary>Creates an action that repeats <paramref name="action" /> for <paramref name="count" /> number of times.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatActionForever">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction RepeatActionForever (SceneKit.SCNAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction RepeatActionForever(class SceneKit.SCNAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.RepeatActionForever(SceneKit.SCNAction)" />
      <MemberSignature Language="F#" Value="static member RepeatActionForever : SceneKit.SCNAction -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.RepeatActionForever action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("repeatActionForever:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="SceneKit.SCNAction" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>Creates an action that repeats <paramref name="action" /> forever.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReversedAction">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNAction ReversedAction ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SceneKit.SCNAction ReversedAction() cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.ReversedAction" />
      <MemberSignature Language="F#" Value="abstract member ReversedAction : unit -&gt; SceneKit.SCNAction&#xA;override this.ReversedAction : unit -&gt; SceneKit.SCNAction" Usage="sCNAction.ReversedAction " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("reversedAction")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets a reversed action for the action on which it is run. (For actions that cannot be reversed, the returned action will be the identical action.)</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateBy">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction RotateBy (nfloat angle, SceneKit.SCNVector3 axis, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction RotateBy(valuetype System.nfloat angle, valuetype SceneKit.SCNVector3 axis, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.RotateBy(System.nfloat,SceneKit.SCNVector3,System.Double)" />
      <MemberSignature Language="F#" Value="static member RotateBy : nfloat * SceneKit.SCNVector3 * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.RotateBy (angle, axis, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rotateByAngle:aroundAxis:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.nfloat" />
        <Parameter Name="axis" Type="SceneKit.SCNVector3" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="angle">To be added.</param>
        <param name="axis">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateBy">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction RotateBy (nfloat xAngle, nfloat yAngle, nfloat zAngle, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction RotateBy(valuetype System.nfloat xAngle, valuetype System.nfloat yAngle, valuetype System.nfloat zAngle, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.RotateBy(System.nfloat,System.nfloat,System.nfloat,System.Double)" />
      <MemberSignature Language="F#" Value="static member RotateBy : nfloat * nfloat * nfloat * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.RotateBy (xAngle, yAngle, zAngle, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rotateByX:y:z:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xAngle" Type="System.nfloat" />
        <Parameter Name="yAngle" Type="System.nfloat" />
        <Parameter Name="zAngle" Type="System.nfloat" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="xAngle">To be added.</param>
        <param name="yAngle">To be added.</param>
        <param name="zAngle">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTo">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction RotateTo (SceneKit.SCNVector4 axisAngle, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction RotateTo(valuetype SceneKit.SCNVector4 axisAngle, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.RotateTo(SceneKit.SCNVector4,System.Double)" />
      <MemberSignature Language="F#" Value="static member RotateTo : SceneKit.SCNVector4 * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.RotateTo (axisAngle, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rotateToAxisAngle:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="axisAngle" Type="SceneKit.SCNVector4" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="axisAngle">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>Creates an action that rotates the geometry to the specified angle about an axis, taking <paramref name="durationInSeconds" /> seconds. (The fourth component of <paramref name="axisAngle" /> specifies the rotation.)</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTo">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction RotateTo (nfloat xAngle, nfloat yAngle, nfloat zAngle, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction RotateTo(valuetype System.nfloat xAngle, valuetype System.nfloat yAngle, valuetype System.nfloat zAngle, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.RotateTo(System.nfloat,System.nfloat,System.nfloat,System.Double)" />
      <MemberSignature Language="F#" Value="static member RotateTo : nfloat * nfloat * nfloat * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.RotateTo (xAngle, yAngle, zAngle, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rotateToX:y:z:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xAngle" Type="System.nfloat" />
        <Parameter Name="yAngle" Type="System.nfloat" />
        <Parameter Name="zAngle" Type="System.nfloat" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="xAngle">To be added.</param>
        <param name="yAngle">To be added.</param>
        <param name="zAngle">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTo">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction RotateTo (nfloat xAngle, nfloat yAngle, nfloat zAngle, double durationInSeconds, bool shortestUnitArc);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction RotateTo(valuetype System.nfloat xAngle, valuetype System.nfloat yAngle, valuetype System.nfloat zAngle, float64 durationInSeconds, bool shortestUnitArc) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.RotateTo(System.nfloat,System.nfloat,System.nfloat,System.Double,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member RotateTo : nfloat * nfloat * nfloat * double * bool -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.RotateTo (xAngle, yAngle, zAngle, durationInSeconds, shortestUnitArc)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rotateToX:y:z:duration:shortestUnitArc:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xAngle" Type="System.nfloat" />
        <Parameter Name="yAngle" Type="System.nfloat" />
        <Parameter Name="zAngle" Type="System.nfloat" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
        <Parameter Name="shortestUnitArc" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="xAngle">To be added.</param>
        <param name="yAngle">To be added.</param>
        <param name="zAngle">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <param name="shortestUnitArc">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction Run (Action&lt;SceneKit.SCNNode&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction Run(class System.Action`1&lt;class SceneKit.SCNNode&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.Run(System.Action{SceneKit.SCNNode})" />
      <MemberSignature Language="F#" Value="static member Run : Action&lt;SceneKit.SCNNode&gt; -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.Run handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("runBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;SceneKit.SCNNode&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V29))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <summary>Creates an action that runs another action.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction Run (Action&lt;SceneKit.SCNNode&gt; handler, CoreFoundation.DispatchQueue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction Run(class System.Action`1&lt;class SceneKit.SCNNode&gt; handler, class CoreFoundation.DispatchQueue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.Run(System.Action{SceneKit.SCNNode},CoreFoundation.DispatchQueue)" />
      <MemberSignature Language="F#" Value="static member Run : Action&lt;SceneKit.SCNNode&gt; * CoreFoundation.DispatchQueue -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.Run (handler, queue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("runBlock:queue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;SceneKit.SCNNode&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V29))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <param name="queue">To be added.</param>
        <summary>Creates an action that runs another action on a dispatch queue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleBy">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction ScaleBy (nfloat scale, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction ScaleBy(valuetype System.nfloat scale, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.ScaleBy(System.nfloat,System.Double)" />
      <MemberSignature Language="F#" Value="static member ScaleBy : nfloat * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.ScaleBy (scale, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scaleBy:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scale" Type="System.nfloat" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scale">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTo">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction ScaleTo (nfloat scale, double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction ScaleTo(valuetype System.nfloat scale, float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.ScaleTo(System.nfloat,System.Double)" />
      <MemberSignature Language="F#" Value="static member ScaleTo : nfloat * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.ScaleTo (scale, durationInSeconds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scaleTo:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scale" Type="System.nfloat" />
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="scale">To be added.</param>
        <param name="durationInSeconds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sequence">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction Sequence (SceneKit.SCNAction[] actions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction Sequence(class SceneKit.SCNAction[] actions) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.Sequence(SceneKit.SCNAction[])" />
      <MemberSignature Language="F#" Value="static member Sequence : SceneKit.SCNAction[] -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.Sequence actions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("sequence:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actions" Type="SceneKit.SCNAction[]" />
      </Parameters>
      <Docs>
        <param name="actions">To be added.</param>
        <summary>Creates an action that sequentially runs the actions in the specified array.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTimingFunction">
      <MemberSignature Language="C#" Value="public virtual void SetTimingFunction (Action&lt;float&gt; timingFunction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTimingFunction(class System.Action`1&lt;float32&gt; timingFunction) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.SetTimingFunction(System.Action{System.Single})" />
      <MemberSignature Language="F#" Value="abstract member SetTimingFunction : Action&lt;single&gt; -&gt; unit&#xA;override this.SetTimingFunction : Action&lt;single&gt; -&gt; unit" Usage="sCNAction.SetTimingFunction timingFunction" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("Use 'TimingFunction' property.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timingFunction" Type="System.Action&lt;System.Single&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V30))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="timingFunction">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sets the function that transforms the times at which actions occur.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Speed">
      <MemberSignature Language="C#" Value="public virtual nfloat Speed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Speed" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNAction.Speed" />
      <MemberSignature Language="F#" Value="member this.Speed : nfloat with get, set" Usage="SceneKit.SCNAction.Speed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("speed")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSpeed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a multiplier for the action's speed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimingFunction">
      <MemberSignature Language="C#" Value="public virtual Action&lt;float&gt; TimingFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action`1&lt;float32&gt; TimingFunction" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNAction.TimingFunction" />
      <MemberSignature Language="F#" Value="member this.TimingFunction : Action&lt;single&gt; with get, set" Usage="SceneKit.SCNAction.TimingFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("timingFunction")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setTimingFunction:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("timingFunction", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setTimingFunction:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a block that Scene Kit calls for time information about the action.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimingMode">
      <MemberSignature Language="C#" Value="public virtual SceneKit.SCNActionTimingMode TimingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SceneKit.SCNActionTimingMode TimingMode" />
      <MemberSignature Language="DocId" Value="P:SceneKit.SCNAction.TimingMode" />
      <MemberSignature Language="F#" Value="member this.TimingMode : SceneKit.SCNActionTimingMode with get, set" Usage="SceneKit.SCNAction.TimingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("timingMode")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setTimingMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNActionTimingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the timing mode, which controls whether the animation time proceeds linearly, eases in, eases out, or eases in and out.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unhide">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction Unhide ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction Unhide() cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.Unhide" />
      <MemberSignature Language="F#" Value="static member Unhide : unit -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.Unhide " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("unhide")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a <see cref="T:SceneKit.SCNAction" /> that unhides a node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction Wait (double durationInSeconds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction Wait(float64 durationInSeconds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.Wait(System.Double)" />
      <MemberSignature Language="F#" Value="static member Wait : double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.Wait durationInSeconds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("waitForDuration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="durationInSeconds" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="durationInSeconds">To be added.</param>
        <summary>Creates an action that waits for <paramref name="durationInSeconds" /> seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public static SceneKit.SCNAction Wait (double durationInSeconds, double durationRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SceneKit.SCNAction Wait(float64 durationInSeconds, float64 durationRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:SceneKit.SCNAction.Wait(System.Double,System.Double)" />
      <MemberSignature Language="F#" Value="static member Wait : double * double -&gt; SceneKit.SCNAction" Usage="SceneKit.SCNAction.Wait (durationInSeconds, durationRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("waitForDuration:withRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SceneKit.SCNAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="durationInSeconds" Type="System.Double" />
        <Parameter Name="durationRange" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="durationInSeconds">To be added.</param>
        <param name="durationRange">To be added.</param>
        <summary>Creates an action that waits for a random amount of time in the range (<paramref name="durationInSeconds" /> - <paramref name="durationRange" />, <paramref name="durationInSeconds" /> + <paramref name="durationRange" />).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
