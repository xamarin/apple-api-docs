<Type Name="CNContact" FullName="Contacts.CNContact">
  <TypeSignature Language="C#" Value="public class CNContact : Foundation.NSObject, Foundation.INSItemProviderReading, Foundation.INSItemProviderWriting, Foundation.INSMutableCopying, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CNContact extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSItemProviderReading, class Foundation.INSItemProviderWriting, class Foundation.INSMutableCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Contacts.CNContact" />
  <TypeSignature Language="F#" Value="type CNContact = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSCopying&#xA;    interface INSItemProviderReading&#xA;    interface INSItemProviderWriting&#xA;    interface INSMutableCopying&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSItemProviderReading</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSItemProviderWriting</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSMutableCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("CNContact", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a contact such as a person or business and holds their data, such as name, phone numbers, etc.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Contacts/Reference/CNContact_Class/index.html">Apple documentation for <c>CNContact</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CNContact ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CNContact (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new Contacts.CNContact : Foundation.NSCoder -&gt; Contacts.CNContact" Usage="new Contacts.CNContact coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CNContact (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Contacts.CNContact : Foundation.NSObjectFlag -&gt; Contacts.CNContact" Usage="new Contacts.CNContact t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CNContact (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Contacts.CNContact : nativeint -&gt; Contacts.CNContact" Usage="new Contacts.CNContact handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreKeysAvailable">
      <MemberSignature Language="C#" Value="public bool AreKeysAvailable (Contacts.CNContactOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AreKeysAvailable(valuetype Contacts.CNContactOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.AreKeysAvailable(Contacts.CNContactOptions)" />
      <MemberSignature Language="F#" Value="member this.AreKeysAvailable : Contacts.CNContactOptions -&gt; bool" Usage="cNContact.AreKeysAvailable options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Contacts.CNContactOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>Whether the keys specified in <paramref name="options" /> are available.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreKeysAvailable">
      <MemberSignature Language="C#" Value="protected virtual bool AreKeysAvailable (Foundation.NSArray keyDescriptors);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AreKeysAvailable(class Foundation.NSArray keyDescriptors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.AreKeysAvailable(Foundation.NSArray)" />
      <MemberSignature Language="F#" Value="abstract member AreKeysAvailable : Foundation.NSArray -&gt; bool&#xA;override this.AreKeysAvailable : Foundation.NSArray -&gt; bool" Usage="cNContact.AreKeysAvailable keyDescriptors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("areKeysAvailable:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyDescriptors" Type="Foundation.NSArray" />
      </Parameters>
      <Docs>
        <param name="keyDescriptors">To be added.</param>
        <summary>Whether the keys described in <paramref name="keyDescriptors" /> are available.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreKeysAvailable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public bool AreKeysAvailable&lt;T&gt; (T[] keyDescriptors) where T : Foundation.INSObjectProtocol, Foundation.INSSecureCoding, Foundation.INSCopying;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AreKeysAvailable&lt;(class Foundation.INSObjectProtocol, class Foundation.INSSecureCoding, class Foundation.INSCopying) T&gt;(!!T[] keyDescriptors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.AreKeysAvailable``1(``0[])" />
      <MemberSignature Language="F#" Value="member this.AreKeysAvailable : 'T[] -&gt; bool (requires 'T :&gt; Foundation.INSObjectProtocol and 'T :&gt; Foundation.INSSecureCoding and 'T :&gt; Foundation.INSCopying)" Usage="cNContact.AreKeysAvailable keyDescriptors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Foundation.INSObjectProtocol</InterfaceName>
            <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
            <InterfaceName>Foundation.INSCopying</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="keyDescriptors" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="keyDescriptors">To be added.</param>
        <summary>Whether the keys described in <paramref name="keyDescriptors" /> are available.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Birthday">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDateComponents Birthday { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDateComponents Birthday" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.Birthday" />
      <MemberSignature Language="F#" Value="member this.Birthday : Foundation.NSDateComponents" Usage="Contacts.CNContact.Birthday" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("birthday")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("birthday", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDateComponents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The birthday of the Contact, in the Gregorian calendar.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Contacts.CNContact.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparatorForName">
      <MemberSignature Language="C#" Value="public static Func&lt;Foundation.NSObject,Foundation.NSObject,Foundation.NSComparisonResult&gt; ComparatorForName (Contacts.CNContactSortOrder sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`3&lt;class Foundation.NSObject, class Foundation.NSObject, valuetype Foundation.NSComparisonResult&gt; ComparatorForName(valuetype Contacts.CNContactSortOrder sortOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.ComparatorForName(Contacts.CNContactSortOrder)" />
      <MemberSignature Language="F#" Value="static member ComparatorForName : Contacts.CNContactSortOrder -&gt; Func&lt;Foundation.NSObject, Foundation.NSObject, Foundation.NSComparisonResult&gt;" Usage="Contacts.CNContact.ComparatorForName sortOrder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("comparatorForNameSortOrder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Func&lt;Foundation.NSObject,Foundation.NSObject,Foundation.NSComparisonResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortOrder" Type="Contacts.CNContactSortOrder" />
      </Parameters>
      <Docs>
        <param name="sortOrder">To be added.</param>
        <summary>The sorting function for the specified <paramref name="sortOrder" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContactRelations">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNLabeledValue&lt;Contacts.CNContactRelation&gt;[] ContactRelations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Contacts.CNLabeledValue`1&lt;class Contacts.CNContactRelation&gt;[] ContactRelations" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.ContactRelations" />
      <MemberSignature Language="F#" Value="member this.ContactRelations : Contacts.CNLabeledValue&lt;Contacts.CNContactRelation&gt;[]" Usage="Contacts.CNContact.ContactRelations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("contactRelations")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("contactRelations", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNLabeledValue&lt;Contacts.CNContactRelation&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:Contacts.CNLabeledValue`1" /> objects containing the name of the relation and a reference to the related <see cref="T:Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContactType">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNContactType ContactType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Contacts.CNContactType ContactType" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.ContactType" />
      <MemberSignature Language="F#" Value="member this.ContactType : Contacts.CNContactType" Usage="Contacts.CNContact.ContactType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("contactType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNContactType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether <c>this</c> is an organization or a person.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="cNContact.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dates">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNLabeledValue&lt;Foundation.NSDateComponents&gt;[] Dates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Contacts.CNLabeledValue`1&lt;class Foundation.NSDateComponents&gt;[] Dates" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.Dates" />
      <MemberSignature Language="F#" Value="member this.Dates : Contacts.CNLabeledValue&lt;Foundation.NSDateComponents&gt;[]" Usage="Contacts.CNContact.Dates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("dates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("dates", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNLabeledValue&lt;Foundation.NSDateComponents&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:Contacts.CNLabeledValue`1" /> objects containing the name of the date and their value, in the Gregorian calendar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DepartmentName">
      <MemberSignature Language="C#" Value="public virtual string DepartmentName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DepartmentName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.DepartmentName" />
      <MemberSignature Language="F#" Value="member this.DepartmentName : string" Usage="Contacts.CNContact.DepartmentName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("departmentName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The work department of the contact.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmailAddresses">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNLabeledValue&lt;Foundation.NSString&gt;[] EmailAddresses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Contacts.CNLabeledValue`1&lt;class Foundation.NSString&gt;[] EmailAddresses" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.EmailAddresses" />
      <MemberSignature Language="F#" Value="member this.EmailAddresses : Contacts.CNLabeledValue&lt;Foundation.NSString&gt;[]" Usage="Contacts.CNContact.EmailAddresses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("emailAddresses")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("emailAddresses", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNLabeledValue&lt;Foundation.NSString&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:Contacts.CNLabeledValue`1" /> objects containing the label of the email and a string value.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="cNContact.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorDomain">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ErrorDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ErrorDomain" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.ErrorDomain" />
      <MemberSignature Language="F#" Value="member this.ErrorDomain : Foundation.NSString" Usage="Contacts.CNContact.ErrorDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("CNErrorDomain", "Contacts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the constant name of the Contacts error domain.</summary>
        <value>Returns the constant "CNErrorDomain".</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FamilyName">
      <MemberSignature Language="C#" Value="public virtual string FamilyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FamilyName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.FamilyName" />
      <MemberSignature Language="F#" Value="member this.FamilyName : string" Usage="Contacts.CNContact.FamilyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("familyName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the contact's family name.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDescriptorForAllComparatorKeys">
      <MemberSignature Language="C#" Value="public static Contacts.ICNKeyDescriptor GetDescriptorForAllComparatorKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Contacts.ICNKeyDescriptor GetDescriptorForAllComparatorKeys() cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.GetDescriptorForAllComparatorKeys" />
      <MemberSignature Language="F#" Value="static member GetDescriptorForAllComparatorKeys : unit -&gt; Contacts.ICNKeyDescriptor" Usage="Contacts.CNContact.GetDescriptorForAllComparatorKeys " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("descriptorForAllComparatorKeys")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.ICNKeyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the aggregate key descriptor needed to perform sorting.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemProviderVisibilityForTypeIdentifier">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSItemProviderRepresentationVisibility GetItemProviderVisibilityForTypeIdentifier (string typeIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSItemProviderRepresentationVisibility GetItemProviderVisibilityForTypeIdentifier(string typeIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.GetItemProviderVisibilityForTypeIdentifier(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetItemProviderVisibilityForTypeIdentifier : string -&gt; Foundation.NSItemProviderRepresentationVisibility&#xA;override this.GetItemProviderVisibilityForTypeIdentifier : string -&gt; Foundation.NSItemProviderRepresentationVisibility" Usage="cNContact.GetItemProviderVisibilityForTypeIdentifier typeIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("itemProviderVisibilityForRepresentationWithTypeIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSItemProviderRepresentationVisibility</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeIdentifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static Foundation.INSItemProviderReading GetObject (Foundation.NSData data, string typeIdentifier, out Foundation.NSError outError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.INSItemProviderReading GetObject(class Foundation.NSData data, string typeIdentifier, [out] class Foundation.NSError&amp; outError) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.GetObject(Foundation.NSData,System.String,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member GetObject : Foundation.NSData * string *  -&gt; Foundation.INSItemProviderReading" Usage="Contacts.CNContact.GetObject (data, typeIdentifier, outError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("objectWithItemProviderData:typeIdentifier:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.INSItemProviderReading</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="typeIdentifier" Type="System.String" />
        <Parameter Name="outError" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="typeIdentifier">To be added.</param>
        <param name="outError">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForContacts">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForContacts (string matchingName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForContacts(string matchingName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.GetPredicateForContacts(System.String)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForContacts : string -&gt; Foundation.NSPredicate" Usage="Contacts.CNContact.GetPredicateForContacts matchingName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForContactsMatchingName:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="matchingName">To be added.</param>
        <summary>Retrieves a predicate that filters for <paramref name="matchingName" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForContacts">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForContacts (string[] identifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForContacts(string[] identifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.GetPredicateForContacts(System.String[])" />
      <MemberSignature Language="F#" Value="static member GetPredicateForContacts : string[] -&gt; Foundation.NSPredicate" Usage="Contacts.CNContact.GetPredicateForContacts identifiers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForContactsWithIdentifiers:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifiers" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="identifiers">To be added.</param>
        <summary>Retrieves a predicate that will match <paramref name="identifiers" /> with <see cref="P:Contacts.CNContact.Identifier" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForContactsInContainer">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForContactsInContainer (string containerIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForContactsInContainer(string containerIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.GetPredicateForContactsInContainer(System.String)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForContactsInContainer : string -&gt; Foundation.NSPredicate" Usage="Contacts.CNContact.GetPredicateForContactsInContainer containerIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForContactsInContainerWithIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="containerIdentifier">To be added.</param>
        <summary>A predicate that will match all contacts in <paramref name="containerIdentifier" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForContactsInGroup">
      <MemberSignature Language="C#" Value="public static Foundation.NSPredicate GetPredicateForContactsInGroup (string groupIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSPredicate GetPredicateForContactsInGroup(string groupIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.GetPredicateForContactsInGroup(System.String)" />
      <MemberSignature Language="F#" Value="static member GetPredicateForContactsInGroup : string -&gt; Foundation.NSPredicate" Usage="Contacts.CNContact.GetPredicateForContactsInGroup groupIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predicateForContactsInGroupWithIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupIdentifier">To be added.</param>
        <summary>A <see cref="T:Foundation.NSPredicate" /> that will match all contacts in the group identified by <paramref name="groupIdentifier" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GivenName">
      <MemberSignature Language="C#" Value="public virtual string GivenName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GivenName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.GivenName" />
      <MemberSignature Language="F#" Value="member this.GivenName : string" Usage="Contacts.CNContact.GivenName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("givenName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the given name of the contact.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public virtual string Identifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Identifier" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.Identifier" />
      <MemberSignature Language="F#" Value="member this.Identifier : string" Usage="Contacts.CNContact.Identifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("identifier")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A device-unique identifier for this contact. Persists over time on the device, but is not universally consistent.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageData">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData ImageData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSData ImageData" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.ImageData" />
      <MemberSignature Language="F#" Value="member this.ImageData : Foundation.NSData" Usage="Contacts.CNContact.ImageData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("imageData")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("imageData", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The profile picture for the contact.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>Generally, application developers should only retrieve this, and other potentially-large values, if they have a direct need for it.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageDataAvailable">
      <MemberSignature Language="C#" Value="public virtual bool ImageDataAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ImageDataAvailable" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.ImageDataAvailable" />
      <MemberSignature Language="F#" Value="member this.ImageDataAvailable : bool" Usage="Contacts.CNContact.ImageDataAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("imageDataAvailable")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether <see cref="P:Contacts.CNContact.ImageData" /> holds an image.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstantMessageAddresses">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNLabeledValue&lt;Contacts.CNInstantMessageAddress&gt;[] InstantMessageAddresses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Contacts.CNLabeledValue`1&lt;class Contacts.CNInstantMessageAddress&gt;[] InstantMessageAddresses" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.InstantMessageAddresses" />
      <MemberSignature Language="F#" Value="member this.InstantMessageAddresses : Contacts.CNLabeledValue&lt;Contacts.CNInstantMessageAddress&gt;[]" Usage="Contacts.CNContact.InstantMessageAddresses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("instantMessageAddresses")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("instantMessageAddresses", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNLabeledValue&lt;Contacts.CNInstantMessageAddress&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:Contacts.CNLabeledValue`1" /> objects containing the name of the IM service and a string containing the address.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyAvailable">
      <MemberSignature Language="C#" Value="public virtual bool IsKeyAvailable (Contacts.CNContactOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsKeyAvailable(valuetype Contacts.CNContactOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.IsKeyAvailable(Contacts.CNContactOptions)" />
      <MemberSignature Language="F#" Value="abstract member IsKeyAvailable : Contacts.CNContactOptions -&gt; bool&#xA;override this.IsKeyAvailable : Contacts.CNContactOptions -&gt; bool" Usage="cNContact.IsKeyAvailable options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Contacts.CNContactOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>Whether the key described in <paramref name="options" /> is available for this <see cref="T:Contacts.CNContact" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyAvailable">
      <MemberSignature Language="C#" Value="public virtual bool IsKeyAvailable (Foundation.NSString contactKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsKeyAvailable(class Foundation.NSString contactKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.IsKeyAvailable(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member IsKeyAvailable : Foundation.NSString -&gt; bool&#xA;override this.IsKeyAvailable : Foundation.NSString -&gt; bool" Usage="cNContact.IsKeyAvailable contactKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("isKeyAvailable:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contactKey" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="contactKey">To be added.</param>
        <summary>Whether the key <paramref name="contactKey" /> is available for this <see cref="T:Contacts.CNContact" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnifiedWithContact">
      <MemberSignature Language="C#" Value="public virtual bool IsUnifiedWithContact (string contactIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnifiedWithContact(string contactIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.IsUnifiedWithContact(System.String)" />
      <MemberSignature Language="F#" Value="abstract member IsUnifiedWithContact : string -&gt; bool&#xA;override this.IsUnifiedWithContact : string -&gt; bool" Usage="cNContact.IsUnifiedWithContact contactIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("isUnifiedWithContactWithIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contactIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contactIdentifier">To be added.</param>
        <summary>Whether this <see cref="T:Contacts.CNContact" /> is unified with the specified <see cref="T:Contacts.CNContact" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JobTitle">
      <MemberSignature Language="C#" Value="public virtual string JobTitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string JobTitle" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.JobTitle" />
      <MemberSignature Language="F#" Value="member this.JobTitle : string" Usage="Contacts.CNContact.JobTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("jobTitle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The title of the job held by the <see cref="T:Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadData">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSProgress LoadData (string typeIdentifier, Action&lt;Foundation.NSData,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSProgress LoadData(string typeIdentifier, class System.Action`2&lt;class Foundation.NSData, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.LoadData(System.String,System.Action{Foundation.NSData,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member LoadData : string * Action&lt;Foundation.NSData, Foundation.NSError&gt; -&gt; Foundation.NSProgress&#xA;override this.LoadData : string * Action&lt;Foundation.NSData, Foundation.NSError&gt; -&gt; Foundation.NSProgress" Usage="cNContact.LoadData (typeIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSItemProviderWriting.LoadData(System.String,System.Action{Foundation.NSData,Foundation.NSError})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("loadDataWithTypeIdentifier:forItemProviderCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSProgress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSData,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V4))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs tool="CopiedFromAncestor">
        <param name="typeIdentifier">A Universal Type Identifier (UTI) indicating the type of data to load.</param>
        <param name="completionHandler">The method called after the data is loaded.</param>
        <summary>Implement this method to customize the loading of data by an <see cref="T:Foundation.NSItemProvider" />.</summary>
        <returns>An <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:Monotouch.Foundation.NSProgress&amp;scope=Xamarin" title="T:Monotouch.Foundation.NSProgress">T:Monotouch.Foundation.NSProgress</a></format> object reflecting the data-loading operation.</returns>
        <remarks>
          <para>The <param name="typeIdentifier" /> must be in the set of values returned by <see cref="M:Foundation.NSItemProviderWriting_Extensions.GetWritableTypeIdentifiersForItemProvider(Foundation.INSItemProviderWriting)" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSData&gt; LoadDataAsync (string typeIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSData&gt; LoadDataAsync(string typeIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.LoadDataAsync(System.String)" />
      <MemberSignature Language="F#" Value="abstract member LoadDataAsync : string -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;&#xA;override this.LoadDataAsync : string -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;" Usage="cNContact.LoadDataAsync typeIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeIdentifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSData&gt; LoadDataAsync (string typeIdentifier, out Foundation.NSProgress result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSData&gt; LoadDataAsync(string typeIdentifier, [out] class Foundation.NSProgress&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.LoadDataAsync(System.String,Foundation.NSProgress@)" />
      <MemberSignature Language="F#" Value="abstract member LoadDataAsync : string *  -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;&#xA;override this.LoadDataAsync : string *  -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;" Usage="cNContact.LoadDataAsync (typeIdentifier, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
        <Parameter Name="result" Type="Foundation.NSProgress" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeIdentifier">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizeProperty">
      <MemberSignature Language="C#" Value="public static string LocalizeProperty (Contacts.CNContactOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LocalizeProperty(valuetype Contacts.CNContactOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.LocalizeProperty(Contacts.CNContactOptions)" />
      <MemberSignature Language="F#" Value="static member LocalizeProperty : Contacts.CNContactOptions -&gt; string" Usage="Contacts.CNContact.LocalizeProperty options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Contacts.CNContactOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>Gets the localized version of the key described in <paramref name="options" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizeProperty">
      <MemberSignature Language="C#" Value="public static string LocalizeProperty (Foundation.NSString contactKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LocalizeProperty(class Foundation.NSString contactKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.LocalizeProperty(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="static member LocalizeProperty : Foundation.NSString -&gt; string" Usage="Contacts.CNContact.LocalizeProperty contactKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("localizedStringForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contactKey" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="contactKey">To be added.</param>
        <summary>Gets the localized value of <paramref name="contactKey" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MiddleName">
      <MemberSignature Language="C#" Value="public virtual string MiddleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MiddleName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.MiddleName" />
      <MemberSignature Language="F#" Value="member this.MiddleName : string" Usage="Contacts.CNContact.MiddleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("middleName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The middle name of the <see cref="T:Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableCopy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject MutableCopy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject MutableCopy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContact.MutableCopy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.MutableCopy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="cNContact.MutableCopy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSMutableCopying.MutableCopy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mutableCopyWithZone:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamePrefix">
      <MemberSignature Language="C#" Value="public virtual string NamePrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamePrefix" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.NamePrefix" />
      <MemberSignature Language="F#" Value="member this.NamePrefix : string" Usage="Contacts.CNContact.NamePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("namePrefix")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name prefix of the <see cref="T:Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameSuffix">
      <MemberSignature Language="C#" Value="public virtual string NameSuffix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NameSuffix" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.NameSuffix" />
      <MemberSignature Language="F#" Value="member this.NameSuffix : string" Usage="Contacts.CNContact.NameSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("nameSuffix")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name suffix of the <see cref="T:Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Nickname">
      <MemberSignature Language="C#" Value="public virtual string Nickname { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Nickname" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.Nickname" />
      <MemberSignature Language="F#" Value="member this.Nickname : string" Usage="Contacts.CNContact.Nickname" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("nickname")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An affectionate name for the <see cref="T:Contacts.CNContact" />, like 'Code-master' or 'Mr. F#'.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonGregorianBirthday">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDateComponents NonGregorianBirthday { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDateComponents NonGregorianBirthday" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.NonGregorianBirthday" />
      <MemberSignature Language="F#" Value="member this.NonGregorianBirthday : Foundation.NSDateComponents" Usage="Contacts.CNContact.NonGregorianBirthday" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("nonGregorianBirthday")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("nonGregorianBirthday", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDateComponents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Birthday represented in a non-Gregorian calendar.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Note">
      <MemberSignature Language="C#" Value="public virtual string Note { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Note" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.Note" />
      <MemberSignature Language="F#" Value="member this.Note : string" Usage="Contacts.CNContact.Note" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("note")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Freeform text associated with the <see cref="T:Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrganizationName">
      <MemberSignature Language="C#" Value="public virtual string OrganizationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrganizationName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.OrganizationName" />
      <MemberSignature Language="F#" Value="member this.OrganizationName : string" Usage="Contacts.CNContact.OrganizationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("organizationName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the organization associated with the <see cref="T:Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneNumbers">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNLabeledValue&lt;Contacts.CNPhoneNumber&gt;[] PhoneNumbers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Contacts.CNLabeledValue`1&lt;class Contacts.CNPhoneNumber&gt;[] PhoneNumbers" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.PhoneNumbers" />
      <MemberSignature Language="F#" Value="member this.PhoneNumbers : Contacts.CNLabeledValue&lt;Contacts.CNPhoneNumber&gt;[]" Usage="Contacts.CNContact.PhoneNumbers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("phoneNumbers")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("phoneNumbers", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNLabeledValue&lt;Contacts.CNPhoneNumber&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:Contacts.CNLabeledValue`1" /> objects containing the name of the phone number and the value as a <see cref="T:Contacts.CNPhoneNumber" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticFamilyName">
      <MemberSignature Language="C#" Value="public virtual string PhoneticFamilyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhoneticFamilyName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.PhoneticFamilyName" />
      <MemberSignature Language="F#" Value="member this.PhoneticFamilyName : string" Usage="Contacts.CNContact.PhoneticFamilyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("phoneticFamilyName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The family name of the <see cref="T:Contacts.CNContact" />, represented as a phonetic string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticGivenName">
      <MemberSignature Language="C#" Value="public virtual string PhoneticGivenName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhoneticGivenName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.PhoneticGivenName" />
      <MemberSignature Language="F#" Value="member this.PhoneticGivenName : string" Usage="Contacts.CNContact.PhoneticGivenName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("phoneticGivenName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The given name of the <see cref="T:Contacts.CNContact" />, represented as a phonetic string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticMiddleName">
      <MemberSignature Language="C#" Value="public virtual string PhoneticMiddleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhoneticMiddleName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.PhoneticMiddleName" />
      <MemberSignature Language="F#" Value="member this.PhoneticMiddleName : string" Usage="Contacts.CNContact.PhoneticMiddleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("phoneticMiddleName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The middle name of the <see cref="T:Contacts.CNContact" />, represented as a phonetic string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticOrganizationName">
      <MemberSignature Language="C#" Value="public virtual string PhoneticOrganizationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhoneticOrganizationName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.PhoneticOrganizationName" />
      <MemberSignature Language="F#" Value="member this.PhoneticOrganizationName : string" Usage="Contacts.CNContact.PhoneticOrganizationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("phoneticOrganizationName")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The organization name of the <see cref="T:Contacts.CNContact" />, represented as a phonetic string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostalAddresses">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNLabeledValue&lt;Contacts.CNPostalAddress&gt;[] PostalAddresses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Contacts.CNLabeledValue`1&lt;class Contacts.CNPostalAddress&gt;[] PostalAddresses" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.PostalAddresses" />
      <MemberSignature Language="F#" Value="member this.PostalAddresses : Contacts.CNLabeledValue&lt;Contacts.CNPostalAddress&gt;[]" Usage="Contacts.CNContact.PostalAddresses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("postalAddresses")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("postalAddresses", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNLabeledValue&lt;Contacts.CNPostalAddress&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:Contacts.CNLabeledValue`1" /> objects containing the name of the address and the value as a <see cref="T:Contacts.CNPostalAddress" /> object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousFamilyName">
      <MemberSignature Language="C#" Value="public virtual string PreviousFamilyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreviousFamilyName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.PreviousFamilyName" />
      <MemberSignature Language="F#" Value="member this.PreviousFamilyName : string" Usage="Contacts.CNContact.PreviousFamilyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("previousFamilyName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The previous family name of the <see cref="T:Contacts.CNContact" /> (for instance, the maiden name).</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyNotFetchedExceptionName">
      <MemberSignature Language="C#" Value="public static Foundation.NSString PropertyNotFetchedExceptionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString PropertyNotFetchedExceptionName" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.PropertyNotFetchedExceptionName" />
      <MemberSignature Language="F#" Value="member this.PropertyNotFetchedExceptionName : Foundation.NSString" Usage="Contacts.CNContact.PropertyNotFetchedExceptionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("CNContactPropertyNotFetchedExceptionName", "Contacts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Used as the name of an exception thrown when attempting to read a property that has not been fetched.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadableTypeIdentifiers">
      <MemberSignature Language="C#" Value="public static string[] ReadableTypeIdentifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string[] ReadableTypeIdentifiers" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.ReadableTypeIdentifiers" />
      <MemberSignature Language="F#" Value="member this.ReadableTypeIdentifiers : string[]" Usage="Contacts.CNContact.ReadableTypeIdentifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("readableTypeIdentifiersForItemProvider")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("readableTypeIdentifiersForItemProvider", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SocialProfiles">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNLabeledValue&lt;Contacts.CNSocialProfile&gt;[] SocialProfiles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Contacts.CNLabeledValue`1&lt;class Contacts.CNSocialProfile&gt;[] SocialProfiles" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.SocialProfiles" />
      <MemberSignature Language="F#" Value="member this.SocialProfiles : Contacts.CNLabeledValue&lt;Contacts.CNSocialProfile&gt;[]" Usage="Contacts.CNContact.SocialProfiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("socialProfiles")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("socialProfiles", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNLabeledValue&lt;Contacts.CNSocialProfile&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:Contacts.CNLabeledValue`1" /> objects containing the name of the social service and the value as a <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Contacts%20CNSocial%20Service&amp;scope=Xamarin" title="T:Contacts.CNSocialService">T:Contacts.CNSocialService</a></format> object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThumbnailImageData">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData ThumbnailImageData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSData ThumbnailImageData" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.ThumbnailImageData" />
      <MemberSignature Language="F#" Value="member this.ThumbnailImageData : Foundation.NSData" Usage="Contacts.CNContact.ThumbnailImageData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("thumbnailImageData")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("thumbnailImageData", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Thumbnail version of the <see cref="T:Contacts.CNContact" />'s profile picture.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlAddresses">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNLabeledValue&lt;Foundation.NSString&gt;[] UrlAddresses { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Contacts.CNLabeledValue`1&lt;class Foundation.NSString&gt;[] UrlAddresses" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.UrlAddresses" />
      <MemberSignature Language="F#" Value="member this.UrlAddresses : Contacts.CNLabeledValue&lt;Foundation.NSString&gt;[]" Usage="Contacts.CNContact.UrlAddresses" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("urlAddresses")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("urlAddresses", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNLabeledValue&lt;Foundation.NSString&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:Contacts.CNLabeledValue`1" /> objects containing the name of the URL and a string value holding the URL address.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritableTypeIdentifiers">
      <MemberSignature Language="C#" Value="public static string[] WritableTypeIdentifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string[] WritableTypeIdentifiers" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.WritableTypeIdentifiers" />
      <MemberSignature Language="F#" Value="member this.WritableTypeIdentifiers : string[]" Usage="Contacts.CNContact.WritableTypeIdentifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritableTypeIdentifiersForItemProvider">
      <MemberSignature Language="C#" Value="public virtual string[] WritableTypeIdentifiersForItemProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] WritableTypeIdentifiersForItemProvider" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContact.WritableTypeIdentifiersForItemProvider" />
      <MemberSignature Language="F#" Value="member this.WritableTypeIdentifiersForItemProvider : string[]" Usage="Contacts.CNContact.WritableTypeIdentifiersForItemProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
