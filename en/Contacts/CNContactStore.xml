<Type Name="CNContactStore" FullName="Contacts.CNContactStore">
  <TypeSignature Language="C#" Value="public class CNContactStore : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CNContactStore extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:Contacts.CNContactStore" />
  <TypeSignature Language="F#" Value="type CNContactStore = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("CNContactStore", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The system's contact database.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Contacts/Reference/CNContactStore_Class/index.html">Apple documentation for <c>CNContactStore</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CNContactStore ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CNContactStore (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Contacts.CNContactStore : Foundation.NSObjectFlag -&gt; Contacts.CNContactStore" Usage="new Contacts.CNContactStore t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CNContactStore (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Contacts.CNContactStore : nativeint -&gt; Contacts.CNContactStore" Usage="new Contacts.CNContactStore handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContactStore.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Contacts.CNContactStore.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultContainerIdentifier">
      <MemberSignature Language="C#" Value="public virtual string DefaultContainerIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultContainerIdentifier" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContactStore.DefaultContainerIdentifier" />
      <MemberSignature Language="F#" Value="member this.DefaultContainerIdentifier : string" Usage="Contacts.CNContactStore.DefaultContainerIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("defaultContainerIdentifier")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The identifier of the default container.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateContacts">
      <MemberSignature Language="C#" Value="public virtual bool EnumerateContacts (Contacts.CNContactFetchRequest fetchRequest, out Foundation.NSError error, Contacts.CNContactStoreEnumerateContactsHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EnumerateContacts(class Contacts.CNContactFetchRequest fetchRequest, [out] class Foundation.NSError&amp; error, class Contacts.CNContactStoreEnumerateContactsHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.EnumerateContacts(Contacts.CNContactFetchRequest,Foundation.NSError@,Contacts.CNContactStoreEnumerateContactsHandler)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateContacts : Contacts.CNContactFetchRequest *  * Contacts.CNContactStoreEnumerateContactsHandler -&gt; bool&#xA;override this.EnumerateContacts : Contacts.CNContactFetchRequest *  * Contacts.CNContactStoreEnumerateContactsHandler -&gt; bool" Usage="cNContactStore.EnumerateContacts (fetchRequest, error, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateContactsWithFetchRequest:error:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("Use the overload that takes 'CNContactStoreListContactsHandler' instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fetchRequest" Type="Contacts.CNContactFetchRequest" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
        <Parameter Name="handler" Type="Contacts.CNContactStoreEnumerateContactsHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDCNContactStoreEnumerateContactsHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fetchRequest">To be added.</param>
        <param name="error">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Applies <paramref name="handler" /> to the contacts returned by <paramref name="fetchRequest" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateContacts">
      <MemberSignature Language="C#" Value="public bool EnumerateContacts (Contacts.CNContactFetchRequest fetchRequest, out Foundation.NSError error, Contacts.CNContactStoreListContactsHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool EnumerateContacts(class Contacts.CNContactFetchRequest fetchRequest, [out] class Foundation.NSError&amp; error, class Contacts.CNContactStoreListContactsHandler handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.EnumerateContacts(Contacts.CNContactFetchRequest,Foundation.NSError@,Contacts.CNContactStoreListContactsHandler)" />
      <MemberSignature Language="F#" Value="member this.EnumerateContacts : Contacts.CNContactFetchRequest *  * Contacts.CNContactStoreListContactsHandler -&gt; bool" Usage="cNContactStore.EnumerateContacts (fetchRequest, error, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fetchRequest" Type="Contacts.CNContactFetchRequest" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
        <Parameter Name="handler" Type="Contacts.CNContactStoreListContactsHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDCNContactStoreListContactsHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fetchRequest">To be added.</param>
        <param name="error">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Applies <paramref name="handler" /> to the contacts returned by <paramref name="fetchRequest" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteSaveRequest">
      <MemberSignature Language="C#" Value="public virtual bool ExecuteSaveRequest (Contacts.CNSaveRequest saveRequest, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ExecuteSaveRequest(class Contacts.CNSaveRequest saveRequest, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.ExecuteSaveRequest(Contacts.CNSaveRequest,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteSaveRequest : Contacts.CNSaveRequest *  -&gt; bool&#xA;override this.ExecuteSaveRequest : Contacts.CNSaveRequest *  -&gt; bool" Usage="cNContactStore.ExecuteSaveRequest (saveRequest, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("executeSaveRequest:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="saveRequest" Type="Contacts.CNSaveRequest" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="saveRequest">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Attempts to save the data specified in <paramref name="saveRequest" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationStatus">
      <MemberSignature Language="C#" Value="public static Contacts.CNAuthorizationStatus GetAuthorizationStatus (Contacts.CNEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype Contacts.CNAuthorizationStatus GetAuthorizationStatus(valuetype Contacts.CNEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.GetAuthorizationStatus(Contacts.CNEntityType)" />
      <MemberSignature Language="F#" Value="static member GetAuthorizationStatus : Contacts.CNEntityType -&gt; Contacts.CNAuthorizationStatus" Usage="Contacts.CNContactStore.GetAuthorizationStatus entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("authorizationStatusForEntityType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNAuthorizationStatus</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Contacts.CNEntityType" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>Retrieves the authorization status for accessing contacts.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContainers">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNContainer[] GetContainers (Foundation.NSPredicate predicate, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Contacts.CNContainer[] GetContainers(class Foundation.NSPredicate predicate, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.GetContainers(Foundation.NSPredicate,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetContainers : Foundation.NSPredicate *  -&gt; Contacts.CNContainer[]&#xA;override this.GetContainers : Foundation.NSPredicate *  -&gt; Contacts.CNContainer[]" Usage="cNContactStore.GetContainers (predicate, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("containersMatchingPredicate:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNContainer[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Foundation.NSPredicate" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="predicate">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="error">To be added.</param>
        <summary>Retrieves the <see cref="T:Contacts.CNContainer" /> objects that satisfy the <paramref name="predicate" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGroups">
      <MemberSignature Language="C#" Value="public virtual Contacts.CNGroup[] GetGroups (Foundation.NSPredicate predicate, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Contacts.CNGroup[] GetGroups(class Foundation.NSPredicate predicate, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.GetGroups(Foundation.NSPredicate,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetGroups : Foundation.NSPredicate *  -&gt; Contacts.CNGroup[]&#xA;override this.GetGroups : Foundation.NSPredicate *  -&gt; Contacts.CNGroup[]" Usage="cNContactStore.GetGroups (predicate, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("groupsMatchingPredicate:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNGroup[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Foundation.NSPredicate" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="predicate">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="error">To be added.</param>
        <summary>Retrieves the <see cref="T:Contacts.CNGroup" /> objects that satisfy the <paramref name="predicate" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnifiedContact">
      <MemberSignature Language="C#" Value="protected virtual Contacts.CNContact GetUnifiedContact (string identifier, Foundation.NSArray keys, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Contacts.CNContact GetUnifiedContact(string identifier, class Foundation.NSArray keys, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.GetUnifiedContact(System.String,Foundation.NSArray,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetUnifiedContact : string * Foundation.NSArray *  -&gt; Contacts.CNContact&#xA;override this.GetUnifiedContact : string * Foundation.NSArray *  -&gt; Contacts.CNContact" Usage="cNContactStore.GetUnifiedContact (identifier, keys, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("unifiedContactWithIdentifier:keysToFetch:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNContact</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="keys" Type="Foundation.NSArray" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="keys">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Retrieves the <see cref="T:Contacts.CNContact" /> with the specified <paramref name="identifier" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnifiedContact&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Contacts.CNContact GetUnifiedContact&lt;T&gt; (string identifier, T[] keys, out Foundation.NSError error) where T : Foundation.INSObjectProtocol, Foundation.INSSecureCoding, Foundation.INSCopying;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Contacts.CNContact GetUnifiedContact&lt;(class Foundation.INSObjectProtocol, class Foundation.INSSecureCoding, class Foundation.INSCopying) T&gt;(string identifier, !!T[] keys, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.GetUnifiedContact``1(System.String,``0[],Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="member this.GetUnifiedContact : string * 'T[] *  -&gt; Contacts.CNContact (requires 'T :&gt; Foundation.INSObjectProtocol and 'T :&gt; Foundation.INSSecureCoding and 'T :&gt; Foundation.INSCopying)" Usage="cNContactStore.GetUnifiedContact (identifier, keys, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Contacts.CNContact</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Foundation.INSObjectProtocol</InterfaceName>
            <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
            <InterfaceName>Foundation.INSCopying</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="keys" Type="T[]" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="identifier">To be added.</param>
        <param name="keys">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Retrieves the <see cref="T:Contacts.CNContact" /> with the specified <paramref name="identifier" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnifiedContacts">
      <MemberSignature Language="C#" Value="protected virtual Contacts.CNContact[] GetUnifiedContacts (Foundation.NSPredicate predicate, Foundation.NSArray keys, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class Contacts.CNContact[] GetUnifiedContacts(class Foundation.NSPredicate predicate, class Foundation.NSArray keys, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.GetUnifiedContacts(Foundation.NSPredicate,Foundation.NSArray,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetUnifiedContacts : Foundation.NSPredicate * Foundation.NSArray *  -&gt; Contacts.CNContact[]&#xA;override this.GetUnifiedContacts : Foundation.NSPredicate * Foundation.NSArray *  -&gt; Contacts.CNContact[]" Usage="cNContactStore.GetUnifiedContacts (predicate, keys, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("unifiedContactsMatchingPredicate:keysToFetch:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Contacts.CNContact[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Foundation.NSPredicate" />
        <Parameter Name="keys" Type="Foundation.NSArray" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <param name="keys">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Retrieves the unified <see cref="T:Contacts.CNContact" /> objects, populated with data for <paramref name="keys" />, for which the <paramref name="predicate" /> returns <see langword="true" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnifiedContacts&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Contacts.CNContact[] GetUnifiedContacts&lt;T&gt; (Foundation.NSPredicate predicate, T[] keys, out Foundation.NSError error) where T : Foundation.INSObjectProtocol, Foundation.INSSecureCoding, Foundation.INSCopying;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Contacts.CNContact[] GetUnifiedContacts&lt;(class Foundation.INSObjectProtocol, class Foundation.INSSecureCoding, class Foundation.INSCopying) T&gt;(class Foundation.NSPredicate predicate, !!T[] keys, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.GetUnifiedContacts``1(Foundation.NSPredicate,``0[],Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="member this.GetUnifiedContacts : Foundation.NSPredicate * 'T[] *  -&gt; Contacts.CNContact[] (requires 'T :&gt; Foundation.INSObjectProtocol and 'T :&gt; Foundation.INSSecureCoding and 'T :&gt; Foundation.INSCopying)" Usage="cNContactStore.GetUnifiedContacts (predicate, keys, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Contacts.CNContact[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>Foundation.INSObjectProtocol</InterfaceName>
            <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
            <InterfaceName>Foundation.INSCopying</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="predicate" Type="Foundation.NSPredicate" />
        <Parameter Name="keys" Type="T[]" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="predicate">To be added.</param>
        <param name="keys">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Retrieves the unified <see cref="T:Contacts.CNContact" /> objects, populated with data for <paramref name="keys" />, for which the <paramref name="predicate" /> returns <see langword="true" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotificationDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NotificationDidChange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NotificationDidChange" />
      <MemberSignature Language="DocId" Value="P:Contacts.CNContactStore.NotificationDidChange" />
      <MemberSignature Language="F#" Value="member this.NotificationDidChange : Foundation.NSString" Usage="Contacts.CNContactStore.NotificationDidChange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use CNContactStore.Notifications.ObserveNotificationDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("CNContactStoreDidChangeNotification", "Contacts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for Notificat</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        CNContactStore.NotificationDidChange, (notification) => {Console.WriteLine ("Received the notification CNContactStore", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification CNContactStore", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (CNContactStore.NotificationDidChange, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestAccess">
      <MemberSignature Language="C#" Value="public virtual void RequestAccess (Contacts.CNEntityType entityType, Contacts.CNContactStoreRequestAccessHandler completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestAccess(valuetype Contacts.CNEntityType entityType, class Contacts.CNContactStoreRequestAccessHandler completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.RequestAccess(Contacts.CNEntityType,Contacts.CNContactStoreRequestAccessHandler)" />
      <MemberSignature Language="F#" Value="abstract member RequestAccess : Contacts.CNEntityType * Contacts.CNContactStoreRequestAccessHandler -&gt; unit&#xA;override this.RequestAccess : Contacts.CNEntityType * Contacts.CNContactStoreRequestAccessHandler -&gt; unit" Usage="cNContactStore.RequestAccess (entityType, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("requestAccessForEntityType:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Contacts.CNEntityType" />
        <Parameter Name="completionHandler" Type="Contacts.CNContactStoreRequestAccessHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDCNContactStoreRequestAccessHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Requests access to the user's contacts.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestAccessAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; RequestAccessAsync (Contacts.CNEntityType entityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; RequestAccessAsync(valuetype Contacts.CNEntityType entityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:Contacts.CNContactStore.RequestAccessAsync(Contacts.CNEntityType)" />
      <MemberSignature Language="F#" Value="abstract member RequestAccessAsync : Contacts.CNEntityType -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.RequestAccessAsync : Contacts.CNEntityType -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="cNContactStore.RequestAccessAsync entityType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="entityType" Type="Contacts.CNEntityType" />
      </Parameters>
      <Docs>
        <param name="entityType">To be added.</param>
        <summary>Requests access to the user's contacts.</summary>
        <returns>
          <para>A task that represents the asynchronous RequestAccess operation.   The value of the TResult parameter is a Contacts.CNContactStoreRequestAccessHandler.</para>
        </returns>
        <remarks>
          <para copied="true">The RequestAccessAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
