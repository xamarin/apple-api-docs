<Type Name="MCSessionDelegate" FullName="MonoTouch.MultipeerConnectivity.MCSessionDelegate">
  <TypeSignature Language="C#" Value="public abstract class MCSessionDelegate : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.MultipeerConnectivity.IMCSessionDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MCSessionDelegate extends MonoTouch.Foundation.NSObject implements class MonoTouch.MultipeerConnectivity.IMCSessionDelegate, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.MultipeerConnectivity.IMCSessionDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("MCSessionDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A delegate object whose functions relate to events in the <see cref="T:MonoTouch.MultipeerConnectivity.MCSession" /> life-cycle, such as connection status changes and data reception.</summary>
    <remarks>
      <para>Callbacks to the <see cref="T:MonoTouch.MultipeerConnectivity.MCSessionDelegate" /> object are likely to be made on background threads. Application developers who wish to update the display must use, for instance, <see cref="T:MonoTouch.Foundation.NSObject.InvokeOnMainThread" />.</para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/MultipeerConnectivity/Reference/MCSessionDelegateRef/index.html">Apple documentation for <c>MCSessionDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MCSessionDelegate ();" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected MCSessionDelegate ();" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public MCSessionDelegate (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MCSessionDelegate (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected MCSessionDelegate (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MCSessionDelegate (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected MCSessionDelegate (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeState">
      <MemberSignature Language="C#" Value="public abstract void DidChangeState (MonoTouch.MultipeerConnectivity.MCSession session, MonoTouch.MultipeerConnectivity.MCPeerID peerID, MonoTouch.MultipeerConnectivity.MCSessionState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChangeState(class MonoTouch.MultipeerConnectivity.MCSession session, class MonoTouch.MultipeerConnectivity.MCPeerID peerID, valuetype MonoTouch.MultipeerConnectivity.MCSessionState state) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("session:peer:didChangeState:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MonoTouch.MultipeerConnectivity.MCSession" />
        <Parameter Name="peerID" Type="MonoTouch.MultipeerConnectivity.MCPeerID" />
        <Parameter Name="state" Type="MonoTouch.MultipeerConnectivity.MCSessionState" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="peerID">To be added.</param>
        <param name="state">To be added.</param>
        <summary>Indicates that the <paramref name="session" /> has transitioned to the new <paramref name="state" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFinishReceivingResource">
      <MemberSignature Language="C#" Value="public abstract void DidFinishReceivingResource (MonoTouch.MultipeerConnectivity.MCSession session, string resourceName, MonoTouch.MultipeerConnectivity.MCPeerID fromPeer, MonoTouch.Foundation.NSUrl localUrl, MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidFinishReceivingResource(class MonoTouch.MultipeerConnectivity.MCSession session, string resourceName, class MonoTouch.MultipeerConnectivity.MCPeerID fromPeer, class MonoTouch.Foundation.NSUrl localUrl, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("session:didFinishReceivingResourceWithName:fromPeer:atURL:withError:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MonoTouch.MultipeerConnectivity.MCSession" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="fromPeer" Type="MonoTouch.MultipeerConnectivity.MCPeerID" />
        <Parameter Name="localUrl" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="resourceName">To be added.</param>
        <param name="fromPeer">To be added.</param>
        <param name="localUrl">To be added.</param>
        <param name="error">The error (if any) that occurred during transfer.</param>
        <summary>Indicates that the transfer of <paramref name="resourceName" /> has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidReceiveCertificate">
      <MemberSignature Language="C#" Value="public virtual bool DidReceiveCertificate (MonoTouch.MultipeerConnectivity.MCSession session, MonoTouch.Security.SecCertificate[] certificate, MonoTouch.MultipeerConnectivity.MCPeerID peerID, Action&lt;bool&gt; certificateHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DidReceiveCertificate(class MonoTouch.MultipeerConnectivity.MCSession session, class MonoTouch.Security.SecCertificate[] certificate, class MonoTouch.MultipeerConnectivity.MCPeerID peerID, class System.Action`1&lt;bool&gt; certificateHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("session:didReceiveCertificate:fromPeer:certificateHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MonoTouch.MultipeerConnectivity.MCSession" />
        <Parameter Name="certificate" Type="MonoTouch.Security.SecCertificate[]" />
        <Parameter Name="peerID" Type="MonoTouch.MultipeerConnectivity.MCPeerID" />
        <Parameter Name="certificateHandler" Type="System.Action&lt;System.Boolean&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V12))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="certificate">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="peerID">To be added.</param>
        <param name="certificateHandler">To be added.</param>
        <summary>Indicates <paramref name="peerID" /> wishes to join the <paramref name="session" />. <paramref name="certificateHandler" /> must be called.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>When overriding this method, the application developer must invoke the <paramref name="certificateHandler" />, passing in <see langword="true" /> if the peer should be accepted to the <paramref name="session" />.</para>
          <para>The Multipeer Connectivity framework makes no attempt to validate passed certificates. It is the application developer's responsibility to ensure their validity.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidReceiveData">
      <MemberSignature Language="C#" Value="public abstract void DidReceiveData (MonoTouch.MultipeerConnectivity.MCSession session, MonoTouch.Foundation.NSData data, MonoTouch.MultipeerConnectivity.MCPeerID peerID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidReceiveData(class MonoTouch.MultipeerConnectivity.MCSession session, class MonoTouch.Foundation.NSData data, class MonoTouch.MultipeerConnectivity.MCPeerID peerID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("session:didReceiveData:fromPeer:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MonoTouch.MultipeerConnectivity.MCSession" />
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="peerID" Type="MonoTouch.MultipeerConnectivity.MCPeerID" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="data">To be added.</param>
        <param name="peerID">To be added.</param>
        <summary>Indicates the arrival of <paramref name="data" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidReceiveStream">
      <MemberSignature Language="C#" Value="public abstract void DidReceiveStream (MonoTouch.MultipeerConnectivity.MCSession session, MonoTouch.Foundation.NSInputStream stream, string streamName, MonoTouch.MultipeerConnectivity.MCPeerID peerID);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidReceiveStream(class MonoTouch.MultipeerConnectivity.MCSession session, class MonoTouch.Foundation.NSInputStream stream, string streamName, class MonoTouch.MultipeerConnectivity.MCPeerID peerID) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("session:didReceiveStream:withName:fromPeer:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MonoTouch.MultipeerConnectivity.MCSession" />
        <Parameter Name="stream" Type="MonoTouch.Foundation.NSInputStream" />
        <Parameter Name="streamName" Type="System.String" />
        <Parameter Name="peerID" Type="MonoTouch.MultipeerConnectivity.MCPeerID" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="stream">To be added.</param>
        <param name="streamName">To be added.</param>
        <param name="peerID">To be added.</param>
        <summary>Indicates the arrival of <paramref name="stream" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidStartReceivingResource">
      <MemberSignature Language="C#" Value="public abstract void DidStartReceivingResource (MonoTouch.MultipeerConnectivity.MCSession session, string resourceName, MonoTouch.MultipeerConnectivity.MCPeerID fromPeer, MonoTouch.Foundation.NSProgress progress);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidStartReceivingResource(class MonoTouch.MultipeerConnectivity.MCSession session, string resourceName, class MonoTouch.MultipeerConnectivity.MCPeerID fromPeer, class MonoTouch.Foundation.NSProgress progress) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("session:didStartReceivingResourceWithName:fromPeer:withProgress:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="MonoTouch.MultipeerConnectivity.MCSession" />
        <Parameter Name="resourceName" Type="System.String" />
        <Parameter Name="fromPeer" Type="MonoTouch.MultipeerConnectivity.MCPeerID" />
        <Parameter Name="progress" Type="MonoTouch.Foundation.NSProgress" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="resourceName">To be added.</param>
        <param name="fromPeer">To be added.</param>
        <param name="progress">To be added.</param>
        <summary>Indicates that <paramref name="resourceName" /> has begun to arrive.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
