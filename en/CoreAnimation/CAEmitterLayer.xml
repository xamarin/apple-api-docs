<Type Name="CAEmitterLayer" FullName="CoreAnimation.CAEmitterLayer">
  <TypeSignature Language="C#" Value="public class CAEmitterLayer : CoreAnimation.CALayer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CAEmitterLayer extends CoreAnimation.CALayer" />
  <TypeSignature Language="DocId" Value="T:CoreAnimation.CAEmitterLayer" />
  <TypeSignature Language="F#" Value="type CAEmitterLayer = class&#xA;    inherit CALayer" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreAnimation.CALayer</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("CAEmitterLayer", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A particle-system emitter. Particle types are defined by <see cref="T:CoreAnimation.CAEmitterCell" />.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAEmitterLayer_class/index.html">Apple documentation for <c>CAEmitterLayer</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CAEmitterLayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CAEmitterLayer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CAEmitterLayer (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CAEmitterLayer.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new CoreAnimation.CAEmitterLayer : Foundation.NSCoder -&gt; CoreAnimation.CAEmitterLayer" Usage="new CoreAnimation.CAEmitterLayer coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CAEmitterLayer (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CAEmitterLayer.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CoreAnimation.CAEmitterLayer : Foundation.NSObjectFlag -&gt; CoreAnimation.CAEmitterLayer" Usage="new CoreAnimation.CAEmitterLayer t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CAEmitterLayer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CAEmitterLayer.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreAnimation.CAEmitterLayer : nativeint -&gt; CoreAnimation.CAEmitterLayer" Usage="new CoreAnimation.CAEmitterLayer handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BirthRate">
      <MemberSignature Language="C#" Value="public virtual float BirthRate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 BirthRate" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.BirthRate" />
      <MemberSignature Language="F#" Value="member this.BirthRate : single with get, set" Usage="CoreAnimation.CAEmitterLayer.BirthRate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("birthRate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBirthRate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cells">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CAEmitterCell[] Cells { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreAnimation.CAEmitterCell[] Cells" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.Cells" />
      <MemberSignature Language="F#" Value="member this.Cells : CoreAnimation.CAEmitterCell[] with get, set" Usage="CoreAnimation.CAEmitterLayer.Cells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("emitterCells", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEmitterCells:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CAEmitterCell[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="CoreAnimation.CAEmitterLayer.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static CoreAnimation.CALayer Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreAnimation.CALayer Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CAEmitterLayer.Create" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; CoreAnimation.CALayer" Usage="CoreAnimation.CAEmitterLayer.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("layer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CALayer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public virtual nfloat Depth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Depth" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.Depth" />
      <MemberSignature Language="F#" Value="member this.Depth : nfloat with get, set" Usage="CoreAnimation.CAEmitterLayer.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("emitterDepth")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEmitterDepth:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LifeTime">
      <MemberSignature Language="C#" Value="public virtual float LifeTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 LifeTime" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.LifeTime" />
      <MemberSignature Language="F#" Value="member this.LifeTime : single with get, set" Usage="CoreAnimation.CAEmitterLayer.LifeTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("lifetime")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setLifetime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mode">
      <MemberSignature Language="C#" Value="public virtual string Mode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mode" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.Mode" />
      <MemberSignature Language="F#" Value="member this.Mode : string with get, set" Usage="CoreAnimation.CAEmitterLayer.Mode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("emitterMode", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEmitterMode:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModeOutline">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ModeOutline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ModeOutline" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ModeOutline" />
      <MemberSignature Language="F#" Value="member this.ModeOutline : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.ModeOutline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerOutline", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerOutline</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModePoints">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ModePoints { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ModePoints" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ModePoints" />
      <MemberSignature Language="F#" Value="member this.ModePoints : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.ModePoints" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerPoints", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerPoints</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModeSurface">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ModeSurface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ModeSurface" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ModeSurface" />
      <MemberSignature Language="F#" Value="member this.ModeSurface : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.ModeSurface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerSurface", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerSurface</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModeVolume">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ModeVolume { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ModeVolume" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ModeVolume" />
      <MemberSignature Language="F#" Value="member this.ModeVolume : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.ModeVolume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerVolume", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerVolume</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint Position" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.Position" />
      <MemberSignature Language="F#" Value="member this.Position : CoreGraphics.CGPoint with get, set" Usage="CoreAnimation.CAEmitterLayer.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("emitterPosition")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEmitterPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreservesDepth">
      <MemberSignature Language="C#" Value="public virtual bool PreservesDepth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PreservesDepth" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.PreservesDepth" />
      <MemberSignature Language="F#" Value="member this.PreservesDepth : bool with get, set" Usage="CoreAnimation.CAEmitterLayer.PreservesDepth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("preservesDepth")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPreservesDepth:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderAdditive">
      <MemberSignature Language="C#" Value="public static Foundation.NSString RenderAdditive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString RenderAdditive" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.RenderAdditive" />
      <MemberSignature Language="F#" Value="member this.RenderAdditive : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.RenderAdditive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerAdditive", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerAdditive</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderBackToFront">
      <MemberSignature Language="C#" Value="public static Foundation.NSString RenderBackToFront { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString RenderBackToFront" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.RenderBackToFront" />
      <MemberSignature Language="F#" Value="member this.RenderBackToFront : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.RenderBackToFront" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerBackToFront", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerBackToFront</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderMode">
      <MemberSignature Language="C#" Value="public virtual string RenderMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RenderMode" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.RenderMode" />
      <MemberSignature Language="F#" Value="member this.RenderMode : string with get, set" Usage="CoreAnimation.CAEmitterLayer.RenderMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("renderMode", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRenderMode:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderOldestFirst">
      <MemberSignature Language="C#" Value="public static Foundation.NSString RenderOldestFirst { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString RenderOldestFirst" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.RenderOldestFirst" />
      <MemberSignature Language="F#" Value="member this.RenderOldestFirst : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.RenderOldestFirst" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerOldestFirst", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerOldestFirst</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderOldestLast">
      <MemberSignature Language="C#" Value="public static Foundation.NSString RenderOldestLast { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString RenderOldestLast" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.RenderOldestLast" />
      <MemberSignature Language="F#" Value="member this.RenderOldestLast : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.RenderOldestLast" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerOldestLast", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerOldestLast</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderUnordered">
      <MemberSignature Language="C#" Value="public static Foundation.NSString RenderUnordered { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString RenderUnordered" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.RenderUnordered" />
      <MemberSignature Language="F#" Value="member this.RenderUnordered : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.RenderUnordered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerUnordered", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerUnordered</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public virtual float Scale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Scale" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.Scale" />
      <MemberSignature Language="F#" Value="member this.Scale : single with get, set" Usage="CoreAnimation.CAEmitterLayer.Scale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("scale")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setScale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seed">
      <MemberSignature Language="C#" Value="public virtual int Seed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Seed" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.Seed" />
      <MemberSignature Language="F#" Value="member this.Seed : int with get, set" Usage="CoreAnimation.CAEmitterLayer.Seed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("seed")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSeed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shape">
      <MemberSignature Language="C#" Value="public virtual string Shape { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Shape" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.Shape" />
      <MemberSignature Language="F#" Value="member this.Shape : string with get, set" Usage="CoreAnimation.CAEmitterLayer.Shape" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("emitterShape", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEmitterShape:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShapeCircle">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ShapeCircle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ShapeCircle" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ShapeCircle" />
      <MemberSignature Language="F#" Value="member this.ShapeCircle : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.ShapeCircle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerCircle", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerCircle</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShapeCuboid">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ShapeCuboid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ShapeCuboid" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ShapeCuboid" />
      <MemberSignature Language="F#" Value="member this.ShapeCuboid : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.ShapeCuboid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerCuboid", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerCuboid</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShapeLine">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ShapeLine { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ShapeLine" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ShapeLine" />
      <MemberSignature Language="F#" Value="member this.ShapeLine : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.ShapeLine" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerLine", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerLine</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShapePoint">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ShapePoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ShapePoint" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ShapePoint" />
      <MemberSignature Language="F#" Value="member this.ShapePoint : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.ShapePoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerPoint", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerPoint</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShapeRectangle">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ShapeRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ShapeRectangle" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ShapeRectangle" />
      <MemberSignature Language="F#" Value="member this.ShapeRectangle : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.ShapeRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerRectangle", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerRectangle</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShapeSphere">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ShapeSphere { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ShapeSphere" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ShapeSphere" />
      <MemberSignature Language="F#" Value="member this.ShapeSphere : Foundation.NSString" Usage="CoreAnimation.CAEmitterLayer.ShapeSphere" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAEmitterLayerSphere", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAEmitterLayerSphere</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize Size" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.Size" />
      <MemberSignature Language="F#" Value="member this.Size : CoreGraphics.CGSize with get, set" Usage="CoreAnimation.CAEmitterLayer.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("emitterSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEmitterSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Spin">
      <MemberSignature Language="C#" Value="public virtual float Spin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Spin" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.Spin" />
      <MemberSignature Language="F#" Value="member this.Spin : single with get, set" Usage="CoreAnimation.CAEmitterLayer.Spin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("spin")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSpin:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Velocity">
      <MemberSignature Language="C#" Value="public virtual float Velocity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Velocity" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.Velocity" />
      <MemberSignature Language="F#" Value="member this.Velocity : single with get, set" Usage="CoreAnimation.CAEmitterLayer.Velocity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("velocity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setVelocity:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZPosition">
      <MemberSignature Language="C#" Value="public virtual nfloat ZPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat ZPosition" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CAEmitterLayer.ZPosition" />
      <MemberSignature Language="F#" Value="member this.ZPosition : nfloat with get, set" Usage="CoreAnimation.CAEmitterLayer.ZPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("emitterZPosition")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEmitterZPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
