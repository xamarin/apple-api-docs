<Type Name="CABasicAnimation" FullName="CoreAnimation.CABasicAnimation">
  <TypeSignature Language="C#" Value="public class CABasicAnimation : CoreAnimation.CAPropertyAnimation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CABasicAnimation extends CoreAnimation.CAPropertyAnimation" />
  <TypeSignature Language="DocId" Value="T:CoreAnimation.CABasicAnimation" />
  <TypeSignature Language="F#" Value="type CABasicAnimation = class&#xA;    inherit CAPropertyAnimation" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreAnimation.CAPropertyAnimation</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("CABasicAnimation", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Single keyframe based animations.</summary>
    <remarks>
      <para>


	The animation is created by calling the <see cref="M:CoreAnimation.CABasicAnimation.FromKeyPath" />
	method and providing a keyPath that identifies the property on
	the target that will be animated.   The animation is performed by using the values on the From, To and By properties applied to the keyPath.
      </para>
      <para>The interpolation will depend on the values that you choose to set for From, To and By.  The following table shows the effects of setting one or more of those properites on the property referenced by the key path:</para>
      <list type="table">
        <listheader>
          <term>Settings</term>
          <description>Result</description>
        </listheader>
        <item>
          <term>No values are set</term>
          <description>Interpolates between old value and new value in the presentation layer.</description>
        </item>
        <item>
          <term>From is set</term>
          <description>Interpolation is done from the From value to the current value in the presentation layer.</description>
        </item>
        <item>
          <term>To is set</term>
          <description>Interpolation is done from the current value in the presentation layer to the To value.</description>
        </item>
        <item>
          <term>By is set</term>
          <description>Interpolation is done between the current value on the presentation layer to the current value plus the value in By.</description>
        </item>
        <item>
          <term>From and To are set</term>
          <description>Interpolation is done between the From and To values.</description>
        </item>
        <item>
          <term>From and By are set</term>
          <description>Interpolation is done between the value set in From to From plus By.</description>
        </item>
        <item>
          <term>To and By are set</term>
          <description>Interpolation is done between To minus By and By.</description>
        </item>
      </list>
      <para>

	The From, To and By properties all take NSObject parameters.
	If you need to specify other parameters, like a CGColor, you
	can use the methods that take INativeObject parameters
	(GetByAs, GetFromAs, GetToAs, SetBy, SetFrom, SetTo).

      </para>
      <para>

	For example, the following will animate the "radius" property
	for three seconds, from its current value, to the value 120
	and will repeat this ten times.   

      </para>
      <example>
        <code lang="C#"><![CDATA[
var radiusAnimation = CABasicAnimation.FromKeyPath ("radius");
radiusAnimation.Duration = 3;
radiusAnimation.To = NSNumber.FromDouble (120);
radiusAnimation.RepeatCount = 10;]]></code>
      </example>
      <para>The above works to set the “To” property to an NSObject, in this case the number 120.   If you want to set this for other kinds of objects, you can use the SetTo method, for example, the following sets the target color to a CGColor:</para>
      <example>
        <code lang="C#"><![CDATA[
var radiusAnimation = CABasicAnimation.FromKeyPath (“shadowColor");
radiusAnimation.Duration = 3;
radiusAnimation.SetTo (UIColor.Red.CGColor);
radiusAnimation.RepeatCount = 10;]]></code>
      </example>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CABasicAnimation_class/index.html">Apple documentation for <c>CABasicAnimation</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CABasicAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CABasicAnimation (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new CoreAnimation.CABasicAnimation : Foundation.NSCoder -&gt; CoreAnimation.CABasicAnimation" Usage="new CoreAnimation.CABasicAnimation coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CABasicAnimation (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CoreAnimation.CABasicAnimation : Foundation.NSObjectFlag -&gt; CoreAnimation.CABasicAnimation" Usage="new CoreAnimation.CABasicAnimation t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CABasicAnimation (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreAnimation.CABasicAnimation : nativeint -&gt; CoreAnimation.CABasicAnimation" Usage="new CoreAnimation.CABasicAnimation handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="By">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject By { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject By" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CABasicAnimation.By" />
      <MemberSignature Language="F#" Value="member this.By : Foundation.NSObject with get, set" Usage="CoreAnimation.CABasicAnimation.By" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("byValue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setByValue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("byValue", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setByValue:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Value to increment by.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CABasicAnimation.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="CoreAnimation.CABasicAnimation.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject From { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject From" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CABasicAnimation.From" />
      <MemberSignature Language="F#" Value="member this.From : Foundation.NSObject with get, set" Usage="CoreAnimation.CABasicAnimation.From" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("fromValue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setFromValue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("fromValue", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setFromValue:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Initial value for the property to animate.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromKeyPath">
      <MemberSignature Language="C#" Value="public static CoreAnimation.CABasicAnimation FromKeyPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreAnimation.CABasicAnimation FromKeyPath(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.FromKeyPath(System.String)" />
      <MemberSignature Language="F#" Value="static member FromKeyPath : string -&gt; CoreAnimation.CABasicAnimation" Usage="CoreAnimation.CABasicAnimation.FromKeyPath path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("animationWithKeyPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CABasicAnimation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <para>A string representing the keypath for the animation.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates an animation from the given key path.</summary>
        <returns>The new animation.</returns>
        <remarks>See the base class FromKeyPath for information on the values for the key path.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetByAs&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetByAs&lt;T&gt; () where T : class, ObjCRuntime.INativeObject;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetByAs&lt;class (class ObjCRuntime.INativeObject) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.GetByAs``1" />
      <MemberSignature Language="F#" Value="member this.GetByAs : unit -&gt; 'T (requires 'T : null and 'T :&gt; ObjCRuntime.INativeObject)" Usage="cABasicAnimation.GetByAs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Returns the value to increment by, returned as an object of the specified type.</summary>
        <returns>
          <para />
        </returns>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFromAs&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetFromAs&lt;T&gt; () where T : class, ObjCRuntime.INativeObject;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetFromAs&lt;class (class ObjCRuntime.INativeObject) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.GetFromAs``1" />
      <MemberSignature Language="F#" Value="member this.GetFromAs : unit -&gt; 'T (requires 'T : null and 'T :&gt; ObjCRuntime.INativeObject)" Usage="cABasicAnimation.GetFromAs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Returns the initial value for the property to animate, returned as an object of the specified type.</summary>
        <returns>
          <para>
          </para>
        </returns>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetToAs&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetToAs&lt;T&gt; () where T : class, ObjCRuntime.INativeObject;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetToAs&lt;class (class ObjCRuntime.INativeObject) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.GetToAs``1" />
      <MemberSignature Language="F#" Value="member this.GetToAs : unit -&gt; 'T (requires 'T : null and 'T :&gt; ObjCRuntime.INativeObject)" Usage="cABasicAnimation.GetToAs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>Returns the destination value for the property to animate, returned as an object of the specified type.</summary>
        <returns>
          <para>
          </para>
        </returns>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBy">
      <MemberSignature Language="C#" Value="public void SetBy (ObjCRuntime.INativeObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBy(class ObjCRuntime.INativeObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.SetBy(ObjCRuntime.INativeObject)" />
      <MemberSignature Language="F#" Value="member this.SetBy : ObjCRuntime.INativeObject -&gt; unit" Usage="cABasicAnimation.SetBy value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="ObjCRuntime.INativeObject" />
      </Parameters>
      <Docs>
        <param name="value">
          <para />
        </param>
        <summary>Sets the value to increment by, by using a non-NSObject type.</summary>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFrom">
      <MemberSignature Language="C#" Value="public void SetFrom (ObjCRuntime.INativeObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetFrom(class ObjCRuntime.INativeObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.SetFrom(ObjCRuntime.INativeObject)" />
      <MemberSignature Language="F#" Value="member this.SetFrom : ObjCRuntime.INativeObject -&gt; unit" Usage="cABasicAnimation.SetFrom value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="ObjCRuntime.INativeObject" />
      </Parameters>
      <Docs>
        <param name="value">
          <para>Initial value that the property will have.</para>
          <para>If you want to set the value to null, use the From property.</para>
          <para>
          </para>
        </param>
        <summary>Sets the value for the initial value of the property to animate, by using a non-NSObject type.</summary>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTo">
      <MemberSignature Language="C#" Value="public void SetTo (ObjCRuntime.INativeObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTo(class ObjCRuntime.INativeObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CABasicAnimation.SetTo(ObjCRuntime.INativeObject)" />
      <MemberSignature Language="F#" Value="member this.SetTo : ObjCRuntime.INativeObject -&gt; unit" Usage="cABasicAnimation.SetTo value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="ObjCRuntime.INativeObject" />
      </Parameters>
      <Docs>
        <param name="value">
          <para>Final value that the propery will have.</para>
          <para tool="nullallowed">If you want to set the value to null, use the property To.</para>
          <para>
          </para>
        </param>
        <summary>Destination value for the property to animate (using INativeObject).</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="To">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject To { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject To" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CABasicAnimation.To" />
      <MemberSignature Language="F#" Value="member this.To : Foundation.NSObject with get, set" Usage="CoreAnimation.CABasicAnimation.To" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("toValue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setToValue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("toValue", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setToValue:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Destination value for the property to animate.</summary>
        <value>
          <para>Final value that the propery will have.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
