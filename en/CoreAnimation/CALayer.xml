<Type Name="CALayer" FullName="CoreAnimation.CALayer">
  <TypeSignature Language="C#" Value="public class CALayer : Foundation.NSObject, CoreAnimation.ICAMediaTiming, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CALayer extends Foundation.NSObject implements class CoreAnimation.ICAMediaTiming, class Foundation.INSCoding, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:CoreAnimation.CALayer" />
  <TypeSignature Language="F#" Value="type CALayer = class&#xA;    inherit NSObject&#xA;    interface ICAMediaTiming&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSCoding&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>CoreAnimation.ICAMediaTiming</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("CALayer", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Layers hold the images that are rendered into the screen.</summary>
    <remarks>
      <para>
	CALayers hold the image content that is rendered into the
	screen.  They encapsulate position, styling, size and
	transformation components.  They also implement the
	CAMediaTiming methods which allows them to participate in
	animations.
      </para>
      <para>
	There are several subclasses of CALayer that developers can use:
	<see cref="T:CoreAnimation.CAEmitterLayer" />, 
	<see cref="T:CoreAnimation.CAGradientLayer" />, 
	<format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:CoreAnimation.CAEAGLLayer/CAOpenGLLayer&amp;scope=Xamarin" title="T:CoreAnimation.CAEAGLLayer/CAOpenGLLayer">T:CoreAnimation.CAEAGLLayer/CAOpenGLLayer</a></format>, 
	<see cref="T:CoreAnimation.CAReplicatorLayer" />, 
	<see cref="T:CoreAnimation.CAScrollLayer" />, 
	<see cref="T:CoreAnimation.CAShapeLayer" />, 
	<see cref="T:CoreAnimation.CATextLayer" />, 
	<see cref="T:CoreAnimation.CATiledLayer" />, 
	<see cref="T:CoreAnimation.CATransformLayer" /> and 
	<format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Core%20Animation%20QCComposition%20Layer&amp;scope=Xamarin" title="T:CoreAnimation.QCCompositionLayer">T:CoreAnimation.QCCompositionLayer</a></format>.

      </para>
      <format type="text/html">
        <h2>Layer Content</h2>
      </format>
      <para>
	There are three ways of providing content to a layer:
	subclassing the layer class and overriding the draw methods,
	using a layer delegate to implement the drawing or assigning a
	static image to the layer.  
      </para>
      <para>
	To set the contents of the layer with a static image or from one of the rendering approaches, app devs must
	assign a <see cref="T:CoreGraphics.CGImage" /> to the
	<see cref="P:CoreAnimation.CALayer.Contents" />
	property.   For static content, they can just assign this property and the changes will be reflected directly.
      </para>
      <format type="text/html">
        <h3>Contents by Subclassing CALayer</h3>
      </format>
      <para>
	If you choose to subclass the CALayer class, you can either
	subclass the <see cref="M:CoreAnimation.CALayer.Display" /> method
	which is then requires to set the <see cref="P:CoreAnimation.CALayer.Contents" /> property
	or you can override the <see cref="M:CoreAnimation.CALayer.DrawInContext(CoreGraphics.CGContext)" /> method which provides you with a graphics context that you
	can use to render into the display.

      </para>
      <example>
        <code lang="C#"><![CDATA[
// Overriding DrawInContext
public class DemoLayer : CALayer {
  public override void DrawInContext (CGContext context)
  {
     base.DrawInContext (context);
  
     // Fill in circle
     context.SetFillColor (Color);
     context.SetShadowWithColor (SizeF.Empty, 10.0f, glowColor);
     context.EOFillPath();
  }
}

// Overriding Display
public class DemoLayer2 : CALayer {
  CGImage image =  UIImage.FromBundle ("demo.png").CGImage;

  public override void Display ()
  {
     Contents = image;
  }
}
]></code>
      </example>
      <format type="text/html">
        <h3>Contents by Providing a CALayerDelegate</h3>
      </format>
      <para>

	This approach can be used if the developer does not want to change the
	class used for their CALayer rendering, and all they need to do is
	assign the <see cref="P:MonoTouch.CoreAnimation.CALayer.Delegate" /> property
	to an instance of a subclass of <see cref="T:MonoTouch.CoreAnimation.CALayerDelegate" /> where they
	either override the <see cref="M:MonoTouch.CoreAnimation.CALayerDelegate.DisplayLayer(MonoTouch.CoreAnimation.CALayer)" />
	method in which they must set the <see cref="P:MonoTouch.CoreAnimation.CALayer.Contents" /> property,
	or they override the <see cref="M:MonoTouch.CoreAnimation.CALayerDelegate.DrawLayer(MonoTouch.CoreAnimation.CALayer,CoreGraphics.CGContext)" />
	method and provide their own rendering code there.

      </para>
      <example>
        <code lang="C#"><![CDATA[
// Overriding DisplayLayer
public class DemoLayerDelegate : CALayerDelegate {
  CGImage image =  UIImage.FromBundle ("demo.png").CGImage;

  public override void DisplayLayer (CALayer layer)
  {
     layer.Contents = image;
  }
}

// Overriding DrawLayer
public class DemoLayerDelegate2 : CALayerDelegate {
  public override DrawLayer (CALayer layer, CGContext context)
  {
     // Fill in circle
     context.SetFillColor (Color);
     context.SetShadowWithColor (SizeF.Empty, 10.0f, glowColor);
     context.EOFillPath();
  }
}

// To use the code:

void SetupViews (UIView view, UIView view2)
{
    view.Layer.Delegate = new DemoLayerDelegate ();
    view2.Layer.Delegate = new DemoLayerDelegate2 ();
}
]]></code>
      </example>
      <format type="text/html">
        <h2>Using Custom Layers with your UIViews or NSViews.</h2>
      </format>
      <para>
	On iOS, every UIView automatically has a CALayer associated
	with it.  When you want to use one of the CALayer subclasses
	as your UIView's backing layer, you need to add the following
	code snippet to your class:
      </para>
      <example>
        <code lang="C#"><![CDATA[
class MyView : UIView {
    //
    // This instructs the runtime that whenever a MyView is created
    // that it should instantiate a CATiledLayer and assign that to the
    // UIView.Layer property
    //
    [Export ("layerClass")]
    public static Class LayerClass () {
        return new Class (typeof (CATiledLayer));
    }
}
  ]]></code>
      </example>
      <para>
	If you want to subclass the CALayer class, you must provide a
	constructor that takes a CALayer and is annotated with an
	[Export ("initWithLayer:")] attribute.  When you do this, you
	should also override the <see cref="M:CoreAnimation.CALayer.Clone(CoreAnimation.CALayer)" /> as these
	two are used to create copies of your layer state on demand in
	response to CoreAnimation creating a mirror of your object
	hierarchy if anyone accesses the <see cref="P:CoreAnimation.CALayer.PresentationLayer" />
	property.

      </para>
      <example>
        <code lang="C#"><![CDATA[
public class MyLayer : CALayer {
	UIColor FirstColor, SecondColor;

	//
	// Invoked by CoreAnimation if it needs to create a copy of your layer
	// with a specific state in response to the user fetching the PresentationLayer
	// property
	//
	[Export ("initWithLayer:")]
	public MyLayer (Mylayer other) : base (layer)
	{
		// Do nothing, since we override Clone, but we could
		// just clone the data here as well if we wanted to.
	}

	//
	// This is the constructor you would use to create your new CALayer
	public MyLayer (UIColor firstColor, UIColor secondColor)
	{
		FirstColor = firstColor;
		SecondColor = secondColor;
	}

	// We must copy our own state here from the original layer
	public override void Clone (CALayer _other)
	{
		MyLayer other = (MyLayer) _other;
		FirstColor = other.FirstColor;
		SecondColor = other.SecondColor;
	}
}
	]]></code>
      </example>
      <para>
	On OSX, CALayers are optional.  To enable them, you must set
	the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=App%20Kit%20NSView%20Wants%20Layer&amp;scope=Xamarin" title="P:AppKit.NSView.WantsLayer">P:AppKit.NSView.WantsLayer</a></format> property
	to true.  You can change the layer for an NSView by setting
	the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=App%20Kit%20NSView%20Layer&amp;scope=Xamarin" title="P:AppKit.NSView.Layer">P:AppKit.NSView.Layer</a></format> property.

      </para>
      <para>
	On OSX, to change the default layer class used for a given
	NSView, you can override the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=App%20Kit%20Make%20Backing%20Layer&amp;scope=Xamarin" title="M:AppKit.MakeBackingLayer*">M:AppKit.MakeBackingLayer*</a></format> method.

      </para>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/CoreAnimation/">Example_CoreAnimation</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Animation/CoreAnimation/Animate_a_UIView_using_UIKit">Animate a UIView using UIKit</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Animation/CoreAnimation/Animate_Using_Blocks">Animate Using Blocks</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Animation/CoreAnimation/Create_a_Keyframe_Animation">Create a Keyframe Animation</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Animation/CoreAnimation/Create_an_Animation_Block">Create an Animation Block</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Animation/CoreAnimation/Create_An_Explicit_Animation">Create An Explicit Animation</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Animation/CoreAnimation/Create_an_Implicit_Animation">Create an Implicit Animation</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CALayer_class/index.html">Apple documentation for <c>CALayer</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CALayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CALayer (CoreAnimation.CALayer other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CoreAnimation.CALayer other) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.#ctor(CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="new CoreAnimation.CALayer : CoreAnimation.CALayer -&gt; CoreAnimation.CALayer" Usage="new CoreAnimation.CALayer other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithLayer:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="other" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="other">Source layer to copy</param>
        <summary>This method must be implemented by derived classes to make a copy of the original layer.</summary>
        <remarks>
	  See the class summary for an example of how to use this constructor.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CALayer (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new CoreAnimation.CALayer : Foundation.NSCoder -&gt; CoreAnimation.CALayer" Usage="new CoreAnimation.CALayer coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CALayer (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CoreAnimation.CALayer : Foundation.NSObjectFlag -&gt; CoreAnimation.CALayer" Usage="new CoreAnimation.CALayer t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CALayer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreAnimation.CALayer : nativeint -&gt; CoreAnimation.CALayer" Usage="new CoreAnimation.CALayer handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionForKey">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject ActionForKey (string eventKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject ActionForKey(string eventKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.ActionForKey(System.String)" />
      <MemberSignature Language="F#" Value="abstract member ActionForKey : string -&gt; Foundation.NSObject&#xA;override this.ActionForKey : string -&gt; Foundation.NSObject" Usage="cALayer.ActionForKey eventKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("actionForKey:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventKey">Identifier of the action desired.</param>
        <summary>Returns the <see cref="P:CoreAnimation.CALayer.Actions" /> value associated with the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Actions">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary Actions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary Actions" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Actions" />
      <MemberSignature Language="F#" Value="member this.Actions : Foundation.NSDictionary with get, set" Usage="CoreAnimation.CALayer.Actions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("actions", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setActions:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:Foundation.NSDictionary" /> containing the layer's actions.</summary>
        <value>
          <para>The default value is <see langword="null" />.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnimation">
      <MemberSignature Language="C#" Value="public virtual void AddAnimation (CoreAnimation.CAAnimation animation, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAnimation(class CoreAnimation.CAAnimation animation, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.AddAnimation(CoreAnimation.CAAnimation,System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddAnimation : CoreAnimation.CAAnimation * string -&gt; unit&#xA;override this.AddAnimation : CoreAnimation.CAAnimation * string -&gt; unit" Usage="cALayer.AddAnimation (animation, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addAnimation:forKey:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animation" Type="CoreAnimation.CAAnimation" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="animation">To be added.</param>
        <param name="key">
          <para>
	    An identifier for the animation.  If the key already exists in the layer, the previous animation is removed.   
	  </para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Adds the <paramref name="animation" /> to the render tree for the layer and associates it in <see cref="P:CoreAnimation.CALayer.Actions" /> with the key <paramref name="key" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddSublayer">
      <MemberSignature Language="C#" Value="public virtual void AddSublayer (CoreAnimation.CALayer layer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddSublayer(class CoreAnimation.CALayer layer) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.AddSublayer(CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member AddSublayer : CoreAnimation.CALayer -&gt; unit&#xA;override this.AddSublayer : CoreAnimation.CALayer -&gt; unit" Usage="cALayer.AddSublayer layer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addSublayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="layer">The layer being added.</param>
        <summary>Appends the <paramref name="layer" /> to this layer's <see cref="P:CoreAnimation.CALayer.Sublayers" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AffineTransform">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGAffineTransform AffineTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGAffineTransform AffineTransform" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.AffineTransform" />
      <MemberSignature Language="F#" Value="member this.AffineTransform : CoreGraphics.CGAffineTransform with get, set" Usage="CoreAnimation.CALayer.AffineTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("affineTransform")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAffineTransform:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The affine version of the layer's <see cref="P:CoreAnimation.CALayer.Transform" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsEdgeAntialiasing">
      <MemberSignature Language="C#" Value="public virtual bool AllowsEdgeAntialiasing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsEdgeAntialiasing" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.AllowsEdgeAntialiasing" />
      <MemberSignature Language="F#" Value="member this.AllowsEdgeAntialiasing : bool with get, set" Usage="CoreAnimation.CALayer.AllowsEdgeAntialiasing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("allowsEdgeAntialiasing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAllowsEdgeAntialiasing:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether edge antialiasing is allowed.</summary>
        <value>
          <see langword="true" /> if edge antialisting is allowed. By default, antialiasing is allowed for all edges.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsGroupOpacity">
      <MemberSignature Language="C#" Value="public virtual bool AllowsGroupOpacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsGroupOpacity" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.AllowsGroupOpacity" />
      <MemberSignature Language="F#" Value="member this.AllowsGroupOpacity : bool with get, set" Usage="CoreAnimation.CALayer.AllowsGroupOpacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("allowsGroupOpacity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAllowsGroupOpacity:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether group opacity is allowed.</summary>
        <value>
          <see langword="true" /> if group opacity is allowed. By default, opacity is allowed for all groups.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPoint">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint AnchorPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint AnchorPoint" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.AnchorPoint" />
      <MemberSignature Language="F#" Value="member this.AnchorPoint : CoreGraphics.CGPoint with get, set" Usage="CoreAnimation.CALayer.AnchorPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("anchorPoint")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAnchorPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The anchor point for the <see cref="P:CoreAnimation.CALayer.Bounds" /> rectangle.</summary>
        <value>The developer specifies the value for this property using the unit coordinate space. The default value for this property is (0.5, 0.5), representing the center of the bounds rectangle for this layer.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPointZ">
      <MemberSignature Language="C#" Value="public virtual nfloat AnchorPointZ { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat AnchorPointZ" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.AnchorPointZ" />
      <MemberSignature Language="F#" Value="member this.AnchorPointZ : nfloat with get, set" Usage="CoreAnimation.CALayer.AnchorPointZ" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("anchorPointZ")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAnchorPointZ:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The anchor point for the <see cref="P:CoreAnimation.CALayer.Bounds" />, defined along the Z axis.</summary>
        <value>The default value is 0.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimationForKey">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CAAnimation AnimationForKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CoreAnimation.CAAnimation AnimationForKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.AnimationForKey(System.String)" />
      <MemberSignature Language="F#" Value="abstract member AnimationForKey : string -&gt; CoreAnimation.CAAnimation&#xA;override this.AnimationForKey : string -&gt; CoreAnimation.CAAnimation" Usage="cALayer.AnimationForKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("animationForKey:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CAAnimation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The animation's identifier.</param>
        <summary>Returns the animation associated with the <paramref name="key" />.</summary>
        <returns>The <see cref="T:CoreAnimation.CAAnimation" /> associated with <paramref name="key" /> or <see langword="null" /> if there is no such animation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimationKeys">
      <MemberSignature Language="C#" Value="public virtual string[] AnimationKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AnimationKeys" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.AnimationKeys" />
      <MemberSignature Language="F#" Value="member this.AnimationKeys : string[]" Usage="CoreAnimation.CALayer.AnimationKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("animationKeys")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifiers for the animations associated with this layer.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoReverses">
      <MemberSignature Language="C#" Value="public virtual bool AutoReverses { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoReverses" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.AutoReverses" />
      <MemberSignature Language="F#" Value="member this.AutoReverses : bool with get, set" Usage="CoreAnimation.CALayer.AutoReverses" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:CoreAnimation.ICAMediaTiming.AutoReverses</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("autoreverses")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAutoreverses:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.BackgroundColor" />
      <MemberSignature Language="F#" Value="member this.BackgroundColor : CoreGraphics.CGColor with get, set" Usage="CoreAnimation.CALayer.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("backgroundColor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBackgroundColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The background color of the layer.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundFilters">
      <MemberSignature Language="C#" Value="public virtual CoreImage.CIFilter[] BackgroundFilters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreImage.CIFilter[] BackgroundFilters" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.BackgroundFilters" />
      <MemberSignature Language="F#" Value="member this.BackgroundFilters : CoreImage.CIFilter[] with get, set" Usage="CoreAnimation.CALayer.BackgroundFilters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("backgroundFilters", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBackgroundFilters:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreImage.CIFilter[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of Core Image filters that are applied to the content behind this layer.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTime">
      <MemberSignature Language="C#" Value="public virtual double BeginTime { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 BeginTime" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.BeginTime" />
      <MemberSignature Language="F#" Value="member this.BeginTime : double with get, set" Usage="CoreAnimation.CALayer.BeginTime" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:CoreAnimation.ICAMediaTiming.BeginTime</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("beginTime")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBeginTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderColor">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGColor BorderColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGColor BorderColor" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.BorderColor" />
      <MemberSignature Language="F#" Value="member this.BorderColor : CoreGraphics.CGColor with get, set" Usage="CoreAnimation.CALayer.BorderColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("borderColor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBorderColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The color of the border of the layer.</summary>
        <value>The default value is black.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderWidth">
      <MemberSignature Language="C#" Value="public virtual nfloat BorderWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat BorderWidth" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.BorderWidth" />
      <MemberSignature Language="F#" Value="member this.BorderWidth : nfloat with get, set" Usage="CoreAnimation.CALayer.BorderWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("borderWidth")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBorderWidth:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The width of the border of the layer.</summary>
        <value>The default value is 0.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect Bounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect Bounds" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Bounds" />
      <MemberSignature Language="F#" Value="member this.Bounds : CoreGraphics.CGRect with get, set" Usage="CoreAnimation.CALayer.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("bounds")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBounds:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="CoreAnimation.CALayer.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public virtual void Clone (CoreAnimation.CALayer other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clone(class CoreAnimation.CALayer other) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.Clone(CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member Clone : CoreAnimation.CALayer -&gt; unit&#xA;override this.Clone : CoreAnimation.CALayer -&gt; unit" Usage="cALayer.Clone other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="other">The other layer to copy infromation from.</param>
        <summary>This method should be overwritten to provide cloning capabilities for the layer.</summary>
        <remarks>You can either override this method and clone the information that you need from the original layer, or perform the copy in your initWithLayer: constructor (see the class description for details and a sample). </remarks>
      </Docs>
    </Member>
    <Member MemberName="CompositingFilter">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject CompositingFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject CompositingFilter" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.CompositingFilter" />
      <MemberSignature Language="F#" Value="member this.CompositingFilter : Foundation.NSObject with get, set" Usage="CoreAnimation.CALayer.CompositingFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("compositingFilter", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setCompositingFilter:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A Core Image filter that is used for compositing the layer and the content behind it.</summary>
        <value>
          <para>The default value is <see langword="null" />, causing
	  the layer to use source-over compositing.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (CoreGraphics.CGPoint p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(valuetype CoreGraphics.CGPoint p) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.Contains(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member Contains : CoreGraphics.CGPoint -&gt; bool&#xA;override this.Contains : CoreGraphics.CGPoint -&gt; bool" Usage="cALayer.Contains p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("containsPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="p">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contents">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGImage Contents { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGImage Contents" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Contents" />
      <MemberSignature Language="F#" Value="member this.Contents : CoreGraphics.CGImage with get, set" Usage="CoreAnimation.CALayer.Contents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerBrowsable(System.Diagnostics.DebuggerBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("contents", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setContents:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The contents of this layer, as a <see cref="T:CoreGraphics.CGImage" />.</summary>
        <value>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentsAreFlipped">
      <MemberSignature Language="C#" Value="public virtual bool ContentsAreFlipped { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ContentsAreFlipped" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ContentsAreFlipped" />
      <MemberSignature Language="F#" Value="member this.ContentsAreFlipped : bool" Usage="CoreAnimation.CALayer.ContentsAreFlipped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("contentsAreFlipped")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the layer's contents are implicitly flipped when the layer is rendered.</summary>
        <value>The default value is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentsCenter">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ContentsCenter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect ContentsCenter" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ContentsCenter" />
      <MemberSignature Language="F#" Value="member this.ContentsCenter : CoreGraphics.CGRect with get, set" Usage="CoreAnimation.CALayer.ContentsCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("contentsCenter")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setContentsCenter:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentsFormat">
      <MemberSignature Language="C#" Value="public CoreAnimation.CAContentsFormat ContentsFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreAnimation.CAContentsFormat ContentsFormat" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ContentsFormat" />
      <MemberSignature Language="F#" Value="member this.ContentsFormat : CoreAnimation.CAContentsFormat with get, set" Usage="CoreAnimation.CALayer.ContentsFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Watch(3, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CAContentsFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the contents format for the layer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentsGravity">
      <MemberSignature Language="C#" Value="public virtual string ContentsGravity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentsGravity" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ContentsGravity" />
      <MemberSignature Language="F#" Value="member this.ContentsGravity : string with get, set" Usage="CoreAnimation.CALayer.ContentsGravity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("contentsGravity", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setContentsGravity:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentsRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ContentsRect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect ContentsRect" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ContentsRect" />
      <MemberSignature Language="F#" Value="member this.ContentsRect : CoreGraphics.CGRect with get, set" Usage="CoreAnimation.CALayer.ContentsRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("contentsRect")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setContentsRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentsScale">
      <MemberSignature Language="C#" Value="public virtual nfloat ContentsScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat ContentsScale" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ContentsScale" />
      <MemberSignature Language="F#" Value="member this.ContentsScale : nfloat with get, set" Usage="CoreAnimation.CALayer.ContentsScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("contentsScale")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setContentsScale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The scale factor applied to the layer.</summary>
        <value>The default value is 1.0.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertPointFromLayer">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint ConvertPointFromLayer (CoreGraphics.CGPoint point, CoreAnimation.CALayer layer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint ConvertPointFromLayer(valuetype CoreGraphics.CGPoint point, class CoreAnimation.CALayer layer) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.ConvertPointFromLayer(CoreGraphics.CGPoint,CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member ConvertPointFromLayer : CoreGraphics.CGPoint * CoreAnimation.CALayer -&gt; CoreGraphics.CGPoint&#xA;override this.ConvertPointFromLayer : CoreGraphics.CGPoint * CoreAnimation.CALayer -&gt; CoreGraphics.CGPoint" Usage="cALayer.ConvertPointFromLayer (point, layer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("convertPoint:fromLayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="layer">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertPointToLayer">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint ConvertPointToLayer (CoreGraphics.CGPoint point, CoreAnimation.CALayer layer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint ConvertPointToLayer(valuetype CoreGraphics.CGPoint point, class CoreAnimation.CALayer layer) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.ConvertPointToLayer(CoreGraphics.CGPoint,CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member ConvertPointToLayer : CoreGraphics.CGPoint * CoreAnimation.CALayer -&gt; CoreGraphics.CGPoint&#xA;override this.ConvertPointToLayer : CoreGraphics.CGPoint * CoreAnimation.CALayer -&gt; CoreGraphics.CGPoint" Usage="cALayer.ConvertPointToLayer (point, layer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("convertPoint:toLayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="layer">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertRectFromLayer">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ConvertRectFromLayer (CoreGraphics.CGRect rect, CoreAnimation.CALayer layer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect ConvertRectFromLayer(valuetype CoreGraphics.CGRect rect, class CoreAnimation.CALayer layer) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.ConvertRectFromLayer(CoreGraphics.CGRect,CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member ConvertRectFromLayer : CoreGraphics.CGRect * CoreAnimation.CALayer -&gt; CoreGraphics.CGRect&#xA;override this.ConvertRectFromLayer : CoreGraphics.CGRect * CoreAnimation.CALayer -&gt; CoreGraphics.CGRect" Usage="cALayer.ConvertRectFromLayer (rect, layer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("convertRect:fromLayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="layer">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertRectToLayer">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ConvertRectToLayer (CoreGraphics.CGRect rect, CoreAnimation.CALayer layer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect ConvertRectToLayer(valuetype CoreGraphics.CGRect rect, class CoreAnimation.CALayer layer) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.ConvertRectToLayer(CoreGraphics.CGRect,CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member ConvertRectToLayer : CoreGraphics.CGRect * CoreAnimation.CALayer -&gt; CoreGraphics.CGRect&#xA;override this.ConvertRectToLayer : CoreGraphics.CGRect * CoreAnimation.CALayer -&gt; CoreGraphics.CGRect" Usage="cALayer.ConvertRectToLayer (rect, layer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("convertRect:toLayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="layer">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeFromLayer">
      <MemberSignature Language="C#" Value="public virtual double ConvertTimeFromLayer (double timeInterval, CoreAnimation.CALayer layer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ConvertTimeFromLayer(float64 timeInterval, class CoreAnimation.CALayer layer) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.ConvertTimeFromLayer(System.Double,CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member ConvertTimeFromLayer : double * CoreAnimation.CALayer -&gt; double&#xA;override this.ConvertTimeFromLayer : double * CoreAnimation.CALayer -&gt; double" Usage="cALayer.ConvertTimeFromLayer (timeInterval, layer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("convertTime:fromLayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeInterval" Type="System.Double" />
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="timeInterval">To be added.</param>
        <param name="layer">
          <para>They layer that will be used to convert the time from.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertTimeToLayer">
      <MemberSignature Language="C#" Value="public virtual double ConvertTimeToLayer (double timeInterval, CoreAnimation.CALayer layer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 ConvertTimeToLayer(float64 timeInterval, class CoreAnimation.CALayer layer) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.ConvertTimeToLayer(System.Double,CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member ConvertTimeToLayer : double * CoreAnimation.CALayer -&gt; double&#xA;override this.ConvertTimeToLayer : double * CoreAnimation.CALayer -&gt; double" Usage="cALayer.ConvertTimeToLayer (timeInterval, layer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("convertTime:toLayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeInterval" Type="System.Double" />
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="timeInterval">To be added.</param>
        <param name="layer">
          <para>The layer that will be used to convert the time to.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CornerRadius">
      <MemberSignature Language="C#" Value="public virtual nfloat CornerRadius { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat CornerRadius" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.CornerRadius" />
      <MemberSignature Language="F#" Value="member this.CornerRadius : nfloat with get, set" Usage="CoreAnimation.CALayer.CornerRadius" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("cornerRadius")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setCornerRadius:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The radius used when drawing rounded corners.</summary>
        <value>The default value is 0.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static CoreAnimation.CALayer Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreAnimation.CALayer Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.Create" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; CoreAnimation.CALayer" Usage="CoreAnimation.CALayer.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("layer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CALayer</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Factory method to create a new <see cref="T:CoreAnimation.CALayer" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultActionForKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject DefaultActionForKey (string eventKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject DefaultActionForKey(string eventKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.DefaultActionForKey(System.String)" />
      <MemberSignature Language="F#" Value="static member DefaultActionForKey : string -&gt; Foundation.NSObject" Usage="CoreAnimation.CALayer.DefaultActionForKey eventKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("defaultActionForKey:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="eventKey">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultValue">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject DefaultValue (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject DefaultValue(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.DefaultValue(System.String)" />
      <MemberSignature Language="F#" Value="static member DefaultValue : string -&gt; Foundation.NSObject" Usage="CoreAnimation.CALayer.DefaultValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("defaultValueForKey:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public CoreAnimation.ICALayerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreAnimation.ICALayerDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : CoreAnimation.ICALayerDelegate with get, set" Usage="CoreAnimation.CALayer.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.ICALayerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the CoreAnimation.ICALayerDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the CoreAnimation.ICALayerDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Display">
      <MemberSignature Language="C#" Value="public virtual void Display ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Display() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.Display" />
      <MemberSignature Language="F#" Value="abstract member Display : unit -&gt; unit&#xA;override this.Display : unit -&gt; unit" Usage="cALayer.Display " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("display")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayIfNeeded">
      <MemberSignature Language="C#" Value="public virtual void DisplayIfNeeded ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisplayIfNeeded() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.DisplayIfNeeded" />
      <MemberSignature Language="F#" Value="abstract member DisplayIfNeeded : unit -&gt; unit&#xA;override this.DisplayIfNeeded : unit -&gt; unit" Usage="cALayer.DisplayIfNeeded " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("displayIfNeeded")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="cALayer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CALayer object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CALayer class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the CALayer ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleSided">
      <MemberSignature Language="C#" Value="public virtual bool DoubleSided { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DoubleSided" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.DoubleSided" />
      <MemberSignature Language="F#" Value="member this.DoubleSided : bool with get, set" Usage="CoreAnimation.CALayer.DoubleSided" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isDoubleSided")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDoubleSided:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the layer draws its content when facing away from the viewer.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawInContext">
      <MemberSignature Language="C#" Value="public virtual void DrawInContext (CoreGraphics.CGContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawInContext(class CoreGraphics.CGContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.DrawInContext(CoreGraphics.CGContext)" />
      <MemberSignature Language="F#" Value="abstract member DrawInContext : CoreGraphics.CGContext -&gt; unit&#xA;override this.DrawInContext : CoreGraphics.CGContext -&gt; unit" Usage="cALayer.DrawInContext ctx" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawInContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="CoreGraphics.CGContext" />
      </Parameters>
      <Docs>
        <param name="ctx">Prepared context to draw into.</param>
        <summary>Draws the layer on the specified context.</summary>
        <remarks>
          <para>
	    Developers override this method to provide custom
	    rendering of the contents of their instance of the
	    CALayer.  If this method is not overwritten, the CALayer
	    will invoke the <see cref="M:CoreAnimation.CALayerDelegate.DrawLayer(CoreAnimation.CALayer,CoreGraphics.CGContext)" />
	    method to render the contents.
	  </para>
          <para>
	    The provided context has been preconfigured for the target
	    surface as well as having a clipping region defined.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawsAsynchronously">
      <MemberSignature Language="C#" Value="public virtual bool DrawsAsynchronously { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DrawsAsynchronously" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.DrawsAsynchronously" />
      <MemberSignature Language="F#" Value="member this.DrawsAsynchronously : bool with get, set" Usage="CoreAnimation.CALayer.DrawsAsynchronously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("drawsAsynchronously")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDrawsAsynchronously:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether drawing commands are deferred and processed asynchronously on a background thread.</summary>
        <value>The default value is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public virtual double Duration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Duration" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Duration" />
      <MemberSignature Language="F#" Value="member this.Duration : double with get, set" Usage="CoreAnimation.CALayer.Duration" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:CoreAnimation.ICAMediaTiming.Duration</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("duration")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The animation duration of this layer, in seconds.</summary>
        <value>The default value is 0.25. If this value is 0 or negative, the duration is the value of <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Core%20Animation%20CATransation%20Animation%20Duration&amp;scope=Xamarin" title="P:CoreAnimation.CATransation.AnimationDuration">P:CoreAnimation.CATransation.AnimationDuration</a></format>.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EdgeAntialiasingMask">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CAEdgeAntialiasingMask EdgeAntialiasingMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreAnimation.CAEdgeAntialiasingMask EdgeAntialiasingMask" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.EdgeAntialiasingMask" />
      <MemberSignature Language="F#" Value="member this.EdgeAntialiasingMask : CoreAnimation.CAEdgeAntialiasingMask with get, set" Usage="CoreAnimation.CALayer.EdgeAntialiasingMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("edgeAntialiasingMask")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEdgeAntialiasingMask:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CAEdgeAntialiasingMask</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="cALayer.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FillMode">
      <MemberSignature Language="C#" Value="public virtual string FillMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FillMode" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.FillMode" />
      <MemberSignature Language="F#" Value="member this.FillMode : string with get, set" Usage="CoreAnimation.CALayer.FillMode" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:CoreAnimation.ICAMediaTiming.FillMode</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("fillMode", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setFillMode:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The fill mode for this layer, as defined by the values in <see cref="T:CoreAnimation.CAFillMode" />.</summary>
        <value>A constant defined in <see cref="T:CoreAnimation.CAFillMode" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterLinear">
      <MemberSignature Language="C#" Value="public static Foundation.NSString FilterLinear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString FilterLinear" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.FilterLinear" />
      <MemberSignature Language="F#" Value="member this.FilterLinear : Foundation.NSString" Usage="CoreAnimation.CALayer.FilterLinear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAFilterLinear", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAFilterLinear</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterNearest">
      <MemberSignature Language="C#" Value="public static Foundation.NSString FilterNearest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString FilterNearest" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.FilterNearest" />
      <MemberSignature Language="F#" Value="member this.FilterNearest : Foundation.NSString" Usage="CoreAnimation.CALayer.FilterNearest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAFilterNearest", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAFilterNearest</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filters">
      <MemberSignature Language="C#" Value="public virtual CoreImage.CIFilter[] Filters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreImage.CIFilter[] Filters" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Filters" />
      <MemberSignature Language="F#" Value="member this.Filters : CoreImage.CIFilter[] with get, set" Usage="CoreAnimation.CALayer.Filters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("filters", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setFilters:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreImage.CIFilter[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of Core Image filters applied to the content of this layer and its sublayers.</summary>
        <value>
          <para>The default value is <see langword="null" />.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterTrilinear">
      <MemberSignature Language="C#" Value="public static Foundation.NSString FilterTrilinear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString FilterTrilinear" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.FilterTrilinear" />
      <MemberSignature Language="F#" Value="member this.FilterTrilinear : Foundation.NSString" Usage="CoreAnimation.CALayer.FilterTrilinear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAFilterTrilinear", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAFilterTrilinear</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Frame">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect Frame { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect Frame" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Frame" />
      <MemberSignature Language="F#" Value="member this.Frame : CoreGraphics.CGRect with get, set" Usage="CoreAnimation.CALayer.Frame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("frame")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setFrame:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeometryFlipped">
      <MemberSignature Language="C#" Value="public virtual bool GeometryFlipped { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GeometryFlipped" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GeometryFlipped" />
      <MemberSignature Language="F#" Value="member this.GeometryFlipped : bool with get, set" Usage="CoreAnimation.CALayer.GeometryFlipped" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isGeometryFlipped")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setGeometryFlipped:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContentsAs&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetContentsAs&lt;T&gt; () where T : Foundation.NSObject;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetContentsAs&lt;(class Foundation.NSObject) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.GetContentsAs``1" />
      <MemberSignature Language="F#" Value="member this.GetContentsAs : unit -&gt; 'T (requires 'T :&gt; Foundation.NSObject)" Usage="cALayer.GetContentsAs " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Foundation.NSObject</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityBottom">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityBottom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityBottom" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityBottom" />
      <MemberSignature Language="F#" Value="member this.GravityBottom : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityBottom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityBottom", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityBottom</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityBottomLeft">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityBottomLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityBottomLeft" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityBottomLeft" />
      <MemberSignature Language="F#" Value="member this.GravityBottomLeft : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityBottomLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityBottomLeft", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityBottomLeft</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityBottomRight">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityBottomRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityBottomRight" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityBottomRight" />
      <MemberSignature Language="F#" Value="member this.GravityBottomRight : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityBottomRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityBottomRight", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityBottomRight</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityCenter">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityCenter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityCenter" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityCenter" />
      <MemberSignature Language="F#" Value="member this.GravityCenter : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityCenter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityCenter", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityCenter</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityLeft">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityLeft" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityLeft" />
      <MemberSignature Language="F#" Value="member this.GravityLeft : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityLeft", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityLeft</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityResize">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityResize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityResize" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityResize" />
      <MemberSignature Language="F#" Value="member this.GravityResize : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityResize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityResize", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityResize</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityResizeAspect">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityResizeAspect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityResizeAspect" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityResizeAspect" />
      <MemberSignature Language="F#" Value="member this.GravityResizeAspect : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityResizeAspect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityResizeAspect", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityResizeAspect</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityResizeAspectFill">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityResizeAspectFill { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityResizeAspectFill" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityResizeAspectFill" />
      <MemberSignature Language="F#" Value="member this.GravityResizeAspectFill : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityResizeAspectFill" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityResizeAspectFill", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityResizeAspectFill</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityRight">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityRight" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityRight" />
      <MemberSignature Language="F#" Value="member this.GravityRight : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityRight", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityRight</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityTop">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityTop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityTop" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityTop" />
      <MemberSignature Language="F#" Value="member this.GravityTop : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityTop", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityTop</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityTopLeft">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityTopLeft { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityTopLeft" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityTopLeft" />
      <MemberSignature Language="F#" Value="member this.GravityTopLeft : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityTopLeft" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityTopLeft", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityTopLeft</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityTopRight">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityTopRight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityTopRight" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.GravityTopRight" />
      <MemberSignature Language="F#" Value="member this.GravityTopRight : Foundation.NSString" Usage="CoreAnimation.CALayer.GravityTopRight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAGravityTopRight", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAGravityTopRight</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hidden">
      <MemberSignature Language="C#" Value="public virtual bool Hidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Hidden" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Hidden" />
      <MemberSignature Language="F#" Value="member this.Hidden : bool with get, set" Usage="CoreAnimation.CALayer.Hidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isHidden")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setHidden:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the layer is not displayed.</summary>
        <value>The default value is <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HitTest">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CALayer HitTest (CoreGraphics.CGPoint p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CoreAnimation.CALayer HitTest(valuetype CoreGraphics.CGPoint p) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.HitTest(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member HitTest : CoreGraphics.CGPoint -&gt; CoreAnimation.CALayer&#xA;override this.HitTest : CoreGraphics.CGPoint -&gt; CoreAnimation.CALayer" Usage="cALayer.HitTest p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("hitTest:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CALayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="p">A point, in the coordinate system of this layer's <see cref="P:CoreAnimation.CALayer.SuperLayer" />.</param>
        <summary>The furthest descendant in this layer's hierarchy that contains the point <paramref name="p" />.</summary>
        <returns>The layer (possible <c>this</c>) that contains the point <paramref name="p" /> or <see langword="null" /> if <paramref name="p" /> lies outside the <see cref="P:CoreAnimation.CALayer.Bounds" /> rectangle of <c>this</c>.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertSublayer">
      <MemberSignature Language="C#" Value="public virtual void InsertSublayer (CoreAnimation.CALayer layer, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertSublayer(class CoreAnimation.CALayer layer, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.InsertSublayer(CoreAnimation.CALayer,System.Int32)" />
      <MemberSignature Language="F#" Value="abstract member InsertSublayer : CoreAnimation.CALayer * int -&gt; unit&#xA;override this.InsertSublayer : CoreAnimation.CALayer * int -&gt; unit" Usage="cALayer.InsertSublayer (layer, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertSublayer:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="layer">The layer being inserted.</param>
        <param name="index">The index at which to insert the <paramref name="layer" />.</param>
        <summary>Inserts the specified layer into the <see cref="P:CoreAnimation.CALayer.Sublayers" /> array at the specified index.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertSublayerAbove">
      <MemberSignature Language="C#" Value="public virtual void InsertSublayerAbove (CoreAnimation.CALayer layer, CoreAnimation.CALayer sibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertSublayerAbove(class CoreAnimation.CALayer layer, class CoreAnimation.CALayer sibling) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.InsertSublayerAbove(CoreAnimation.CALayer,CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member InsertSublayerAbove : CoreAnimation.CALayer * CoreAnimation.CALayer -&gt; unit&#xA;override this.InsertSublayerAbove : CoreAnimation.CALayer * CoreAnimation.CALayer -&gt; unit" Usage="cALayer.InsertSublayerAbove (layer, sibling)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertSublayer:above:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
        <Parameter Name="sibling" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="layer">The layer being inserted.</param>
        <param name="sibling">The existing sublayer, which will subsequently appear behind <paramref name="layer" />.</param>
        <summary>Inserts the specified layer into the <see cref="P:CoreAnimation.CALayer.Sublayers" /> array immediately after <paramref name="sibling" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertSublayerBelow">
      <MemberSignature Language="C#" Value="public virtual void InsertSublayerBelow (CoreAnimation.CALayer layer, CoreAnimation.CALayer sibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertSublayerBelow(class CoreAnimation.CALayer layer, class CoreAnimation.CALayer sibling) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.InsertSublayerBelow(CoreAnimation.CALayer,CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member InsertSublayerBelow : CoreAnimation.CALayer * CoreAnimation.CALayer -&gt; unit&#xA;override this.InsertSublayerBelow : CoreAnimation.CALayer * CoreAnimation.CALayer -&gt; unit" Usage="cALayer.InsertSublayerBelow (layer, sibling)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("insertSublayer:below:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
        <Parameter Name="sibling" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="layer">The layer being inserted.</param>
        <param name="sibling">The existing sublayer, which will subsequently appear in front of <paramref name="layer" />.</param>
        <summary>Inserts the specified layer into the <see cref="P:CoreAnimation.CALayer.Sublayers" /> array immediately prior to <paramref name="sibling" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutIfNeeded">
      <MemberSignature Language="C#" Value="public virtual void LayoutIfNeeded ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LayoutIfNeeded() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.LayoutIfNeeded" />
      <MemberSignature Language="F#" Value="abstract member LayoutIfNeeded : unit -&gt; unit&#xA;override this.LayoutIfNeeded : unit -&gt; unit" Usage="cALayer.LayoutIfNeeded " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("layoutIfNeeded")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutSublayers">
      <MemberSignature Language="C#" Value="public virtual void LayoutSublayers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LayoutSublayers() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.LayoutSublayers" />
      <MemberSignature Language="F#" Value="abstract member LayoutSublayers : unit -&gt; unit&#xA;override this.LayoutSublayers : unit -&gt; unit" Usage="cALayer.LayoutSublayers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("layoutSublayers")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MagnificationFilter">
      <MemberSignature Language="C#" Value="public virtual string MagnificationFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MagnificationFilter" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.MagnificationFilter" />
      <MemberSignature Language="F#" Value="member this.MagnificationFilter : string with get, set" Usage="CoreAnimation.CALayer.MagnificationFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("magnificationFilter", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMagnificationFilter:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CALayer Mask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreAnimation.CALayer Mask" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Mask" />
      <MemberSignature Language="F#" Value="member this.Mask : CoreAnimation.CALayer with get, set" Usage="CoreAnimation.CALayer.Mask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("mask", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMask:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CALayer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An optional layer, the alpha channel of which is used to mask the contents of this layer.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaskedCorners">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CACornerMask MaskedCorners { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreAnimation.CACornerMask MaskedCorners" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.MaskedCorners" />
      <MemberSignature Language="F#" Value="member this.MaskedCorners : CoreAnimation.CACornerMask with get, set" Usage="CoreAnimation.CALayer.MaskedCorners" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("maskedCorners", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMaskedCorners:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CACornerMask</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MasksToBounds">
      <MemberSignature Language="C#" Value="public virtual bool MasksToBounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MasksToBounds" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.MasksToBounds" />
      <MemberSignature Language="F#" Value="member this.MasksToBounds : bool with get, set" Usage="CoreAnimation.CALayer.MasksToBounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("masksToBounds")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMasksToBounds:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether sublayers are clipped to the <see cref="P:CoreAnimation.CALayer.Bounds" /> of this layer.</summary>
        <value>The default value is <see langword="false" />.</value>
        <remarks>If <see langword="true" />, the clipping mask matches the bounds of <c>this</c><see cref="T:CoreAnimation.CALayer" />, including rounded corners.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinificationFilter">
      <MemberSignature Language="C#" Value="public virtual string MinificationFilter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MinificationFilter" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.MinificationFilter" />
      <MemberSignature Language="F#" Value="member this.MinificationFilter : string with get, set" Usage="CoreAnimation.CALayer.MinificationFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("minificationFilter", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMinificationFilter:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinificationFilterBias">
      <MemberSignature Language="C#" Value="public virtual float MinificationFilterBias { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MinificationFilterBias" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.MinificationFilterBias" />
      <MemberSignature Language="F#" Value="member this.MinificationFilterBias : single with get, set" Usage="CoreAnimation.CALayer.MinificationFilterBias" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("minificationFilterBias")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMinificationFilterBias:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModelLayer">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CALayer ModelLayer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreAnimation.CALayer ModelLayer" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ModelLayer" />
      <MemberSignature Language="F#" Value="member this.ModelLayer : CoreAnimation.CALayer" Usage="CoreAnimation.CALayer.ModelLayer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("modelLayer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CALayer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Name" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="CoreAnimation.CALayer.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("name", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setName:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedsDisplay">
      <MemberSignature Language="C#" Value="public virtual bool NeedsDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedsDisplay" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.NeedsDisplay" />
      <MemberSignature Language="F#" Value="member this.NeedsDisplay : bool" Usage="CoreAnimation.CALayer.NeedsDisplay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("needsDisplay")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the layer has been marked as requiring an update.</summary>
        <value>
          <see langword="true" /> if the layer has been marked as requiring an update.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedsDisplayForKey">
      <MemberSignature Language="C#" Value="public static bool NeedsDisplayForKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool NeedsDisplayForKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.NeedsDisplayForKey(System.String)" />
      <MemberSignature Language="F#" Value="static member NeedsDisplayForKey : string -&gt; bool" Usage="CoreAnimation.CALayer.NeedsDisplayForKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("needsDisplayForKey:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedsDisplayOnBoundsChange">
      <MemberSignature Language="C#" Value="public virtual bool NeedsDisplayOnBoundsChange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool NeedsDisplayOnBoundsChange" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.NeedsDisplayOnBoundsChange" />
      <MemberSignature Language="F#" Value="member this.NeedsDisplayOnBoundsChange : bool with get, set" Usage="CoreAnimation.CALayer.NeedsDisplayOnBoundsChange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("needsDisplayOnBoundsChange")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setNeedsDisplayOnBoundsChange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedsLayout">
      <MemberSignature Language="C#" Value="public virtual bool NeedsLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NeedsLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.NeedsLayout" />
      <MemberSignature Language="F#" Value="abstract member NeedsLayout : unit -&gt; bool&#xA;override this.NeedsLayout : unit -&gt; bool" Usage="cALayer.NeedsLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("needsLayout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOrderIn">
      <MemberSignature Language="C#" Value="public static Foundation.NSString OnOrderIn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString OnOrderIn" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.OnOrderIn" />
      <MemberSignature Language="F#" Value="member this.OnOrderIn : Foundation.NSString" Usage="CoreAnimation.CALayer.OnOrderIn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAOnOrderIn", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAOnOrderIn</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOrderOut">
      <MemberSignature Language="C#" Value="public static Foundation.NSString OnOrderOut { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString OnOrderOut" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.OnOrderOut" />
      <MemberSignature Language="F#" Value="member this.OnOrderOut : Foundation.NSString" Usage="CoreAnimation.CALayer.OnOrderOut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCAOnOrderOut", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCAOnOrderOut</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Opacity">
      <MemberSignature Language="C#" Value="public virtual float Opacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Opacity" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Opacity" />
      <MemberSignature Language="F#" Value="member this.Opacity : single with get, set" Usage="CoreAnimation.CALayer.Opacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("opacity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setOpacity:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The transparency of the layer, in the range 0 (transparent) to 1.0 (opaque).</summary>
        <value>The default value is 1.0.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Opaque">
      <MemberSignature Language="C#" Value="public virtual bool Opaque { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Opaque" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Opaque" />
      <MemberSignature Language="F#" Value="member this.Opaque : bool with get, set" Usage="CoreAnimation.CALayer.Opaque" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isOpaque")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setOpaque:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the layer and its contents are completely opaque.</summary>
        <value>The default value is <see langword="false" />. If <see langword="true" />, the system can render the layer more quickly.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint Position" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Position" />
      <MemberSignature Language="F#" Value="member this.Position : CoreGraphics.CGPoint with get, set" Usage="CoreAnimation.CALayer.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("position")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The layer's position in the coordinate space of its <see cref="P:CoreAnimation.CALayer.SuperLayer" />.</summary>
        <value>The default is (0,0). This value is specified in points relative to the layer's <see cref="P:CoreAnimation.CALayer.AnchorPoint" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredFrameSize">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize PreferredFrameSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGSize PreferredFrameSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.PreferredFrameSize" />
      <MemberSignature Language="F#" Value="abstract member PreferredFrameSize : unit -&gt; CoreGraphics.CGSize&#xA;override this.PreferredFrameSize : unit -&gt; CoreGraphics.CGSize" Usage="cALayer.PreferredFrameSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("preferredFrameSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The preferred size for this layer, in the coordinate of its <see cref="P:CoreAnimation.CALayer.SuperLayer" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentationLayer">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CALayer PresentationLayer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreAnimation.CALayer PresentationLayer" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.PresentationLayer" />
      <MemberSignature Language="F#" Value="member this.PresentationLayer : CoreAnimation.CALayer" Usage="CoreAnimation.CALayer.PresentationLayer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("presentationLayer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CALayer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RasterizationScale">
      <MemberSignature Language="C#" Value="public virtual nfloat RasterizationScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat RasterizationScale" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.RasterizationScale" />
      <MemberSignature Language="F#" Value="member this.RasterizationScale : nfloat with get, set" Usage="CoreAnimation.CALayer.RasterizationScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("rasterizationScale")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRasterizationScale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllAnimations">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllAnimations ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllAnimations() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.RemoveAllAnimations" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllAnimations : unit -&gt; unit&#xA;override this.RemoveAllAnimations : unit -&gt; unit" Usage="cALayer.RemoveAllAnimations " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeAllAnimations")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all animations currently attached to the layer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnimation">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnimation (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnimation(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.RemoveAnimation(System.String)" />
      <MemberSignature Language="F#" Value="abstract member RemoveAnimation : string -&gt; unit&#xA;override this.RemoveAnimation : string -&gt; unit" Usage="cALayer.RemoveAnimation key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeAnimationForKey:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The animation's identifier.</param>
        <summary>Removes the specified animation from the layer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromSuperLayer">
      <MemberSignature Language="C#" Value="public virtual void RemoveFromSuperLayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromSuperLayer() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.RemoveFromSuperLayer" />
      <MemberSignature Language="F#" Value="abstract member RemoveFromSuperLayer : unit -&gt; unit&#xA;override this.RemoveFromSuperLayer : unit -&gt; unit" Usage="cALayer.RemoveFromSuperLayer " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeFromSuperlayer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes <c>this</c> from its <see cref="P:CoreAnimation.CALayer.SuperLayer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderInContext">
      <MemberSignature Language="C#" Value="public virtual void RenderInContext (CoreGraphics.CGContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderInContext(class CoreGraphics.CGContext ctx) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.RenderInContext(CoreGraphics.CGContext)" />
      <MemberSignature Language="F#" Value="abstract member RenderInContext : CoreGraphics.CGContext -&gt; unit&#xA;override this.RenderInContext : CoreGraphics.CGContext -&gt; unit" Usage="cALayer.RenderInContext ctx" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("renderInContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="CoreGraphics.CGContext" />
      </Parameters>
      <Docs>
        <param name="ctx">The context in which the layer should be rendered.</param>
        <summary>Renders the layer into the specified <see cref="T:CoreGraphics.CGContext" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatCount">
      <MemberSignature Language="C#" Value="public virtual float RepeatCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 RepeatCount" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.RepeatCount" />
      <MemberSignature Language="F#" Value="member this.RepeatCount : single with get, set" Usage="CoreAnimation.CALayer.RepeatCount" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:CoreAnimation.ICAMediaTiming.RepeatCount</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("repeatCount")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRepeatCount:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepeatDuration">
      <MemberSignature Language="C#" Value="public virtual double RepeatDuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 RepeatDuration" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.RepeatDuration" />
      <MemberSignature Language="F#" Value="member this.RepeatDuration : double with get, set" Usage="CoreAnimation.CALayer.RepeatDuration" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:CoreAnimation.ICAMediaTiming.RepeatDuration</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("repeatDuration")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRepeatDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceSublayer">
      <MemberSignature Language="C#" Value="public virtual void ReplaceSublayer (CoreAnimation.CALayer layer, CoreAnimation.CALayer with);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceSublayer(class CoreAnimation.CALayer layer, class CoreAnimation.CALayer with) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.ReplaceSublayer(CoreAnimation.CALayer,CoreAnimation.CALayer)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceSublayer : CoreAnimation.CALayer * CoreAnimation.CALayer -&gt; unit&#xA;override this.ReplaceSublayer : CoreAnimation.CALayer * CoreAnimation.CALayer -&gt; unit" Usage="cALayer.ReplaceSublayer (layer, with)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("replaceSublayer:with:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layer" Type="CoreAnimation.CALayer" />
        <Parameter Name="with" Type="CoreAnimation.CALayer" />
      </Parameters>
      <Docs>
        <param name="layer">To be added.</param>
        <param name="with">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollPoint">
      <MemberSignature Language="C#" Value="public virtual void ScrollPoint (CoreGraphics.CGPoint p);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollPoint(valuetype CoreGraphics.CGPoint p) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.ScrollPoint(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member ScrollPoint : CoreGraphics.CGPoint -&gt; unit&#xA;override this.ScrollPoint : CoreGraphics.CGPoint -&gt; unit" Usage="cALayer.ScrollPoint p" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="p" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="p">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollRectToVisible">
      <MemberSignature Language="C#" Value="public virtual void ScrollRectToVisible (CoreGraphics.CGRect r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollRectToVisible(valuetype CoreGraphics.CGRect r) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.ScrollRectToVisible(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member ScrollRectToVisible : CoreGraphics.CGRect -&gt; unit&#xA;override this.ScrollRectToVisible : CoreGraphics.CGRect -&gt; unit" Usage="cALayer.ScrollRectToVisible r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollRectToVisible:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContents">
      <MemberSignature Language="C#" Value="public void SetContents (Foundation.NSObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetContents(class Foundation.NSObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.SetContents(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="member this.SetContents : Foundation.NSObject -&gt; unit" Usage="cALayer.SetContents value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNeedsDisplay">
      <MemberSignature Language="C#" Value="public virtual void SetNeedsDisplay ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNeedsDisplay() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.SetNeedsDisplay" />
      <MemberSignature Language="F#" Value="abstract member SetNeedsDisplay : unit -&gt; unit&#xA;override this.SetNeedsDisplay : unit -&gt; unit" Usage="cALayer.SetNeedsDisplay " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setNeedsDisplay")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNeedsDisplayInRect">
      <MemberSignature Language="C#" Value="public virtual void SetNeedsDisplayInRect (CoreGraphics.CGRect r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNeedsDisplayInRect(valuetype CoreGraphics.CGRect r) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.SetNeedsDisplayInRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member SetNeedsDisplayInRect : CoreGraphics.CGRect -&gt; unit&#xA;override this.SetNeedsDisplayInRect : CoreGraphics.CGRect -&gt; unit" Usage="cALayer.SetNeedsDisplayInRect r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setNeedsDisplayInRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNeedsLayout">
      <MemberSignature Language="C#" Value="public virtual void SetNeedsLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNeedsLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreAnimation.CALayer.SetNeedsLayout" />
      <MemberSignature Language="F#" Value="abstract member SetNeedsLayout : unit -&gt; unit&#xA;override this.SetNeedsLayout : unit -&gt; unit" Usage="cALayer.SetNeedsLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setNeedsLayout")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadowColor">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGColor ShadowColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGColor ShadowColor" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ShadowColor" />
      <MemberSignature Language="F#" Value="member this.ShadowColor : CoreGraphics.CGColor with get, set" Usage="CoreAnimation.CALayer.ShadowColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shadowColor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShadowColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadowOffset">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize ShadowOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize ShadowOffset" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ShadowOffset" />
      <MemberSignature Language="F#" Value="member this.ShadowOffset : CoreGraphics.CGSize with get, set" Usage="CoreAnimation.CALayer.ShadowOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shadowOffset")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShadowOffset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadowOpacity">
      <MemberSignature Language="C#" Value="public virtual float ShadowOpacity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ShadowOpacity" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ShadowOpacity" />
      <MemberSignature Language="F#" Value="member this.ShadowOpacity : single with get, set" Usage="CoreAnimation.CALayer.ShadowOpacity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shadowOpacity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShadowOpacity:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadowPath">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPath ShadowPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGPath ShadowPath" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ShadowPath" />
      <MemberSignature Language="F#" Value="member this.ShadowPath : CoreGraphics.CGPath with get, set" Usage="CoreAnimation.CALayer.ShadowPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shadowPath")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShadowPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadowRadius">
      <MemberSignature Language="C#" Value="public virtual nfloat ShadowRadius { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat ShadowRadius" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ShadowRadius" />
      <MemberSignature Language="F#" Value="member this.ShadowRadius : nfloat with get, set" Usage="CoreAnimation.CALayer.ShadowRadius" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shadowRadius")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShadowRadius:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRasterize">
      <MemberSignature Language="C#" Value="public virtual bool ShouldRasterize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldRasterize" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ShouldRasterize" />
      <MemberSignature Language="F#" Value="member this.ShouldRasterize : bool with get, set" Usage="CoreAnimation.CALayer.ShouldRasterize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shouldRasterize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShouldRasterize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Speed">
      <MemberSignature Language="C#" Value="public virtual float Speed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Speed" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Speed" />
      <MemberSignature Language="F#" Value="member this.Speed : single with get, set" Usage="CoreAnimation.CALayer.Speed" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:CoreAnimation.ICAMediaTiming.Speed</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("speed")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSpeed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary Style" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Style" />
      <MemberSignature Language="F#" Value="member this.Style : Foundation.NSDictionary with get, set" Usage="CoreAnimation.CALayer.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("style", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setStyle:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sublayers">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CALayer[] Sublayers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreAnimation.CALayer[] Sublayers" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Sublayers" />
      <MemberSignature Language="F#" Value="member this.Sublayers : CoreAnimation.CALayer[] with get, set" Usage="CoreAnimation.CALayer.Sublayers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("sublayers", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSublayers:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CALayer[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SublayerTransform">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CATransform3D SublayerTransform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreAnimation.CATransform3D SublayerTransform" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.SublayerTransform" />
      <MemberSignature Language="F#" Value="member this.SublayerTransform : CoreAnimation.CATransform3D with get, set" Usage="CoreAnimation.CALayer.SublayerTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("sublayerTransform")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSublayerTransform:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CATransform3D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SuperLayer">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CALayer SuperLayer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreAnimation.CALayer SuperLayer" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.SuperLayer" />
      <MemberSignature Language="F#" Value="member this.SuperLayer : CoreAnimation.CALayer" Usage="CoreAnimation.CALayer.SuperLayer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("superlayer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CALayer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeOffset">
      <MemberSignature Language="C#" Value="public virtual double TimeOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TimeOffset" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.TimeOffset" />
      <MemberSignature Language="F#" Value="member this.TimeOffset : double with get, set" Usage="CoreAnimation.CALayer.TimeOffset" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:CoreAnimation.ICAMediaTiming.TimeOffset</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("timeOffset")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTimeOffset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CATransform3D Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreAnimation.CATransform3D Transform" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Transform" />
      <MemberSignature Language="F#" Value="member this.Transform : CoreAnimation.CATransform3D with get, set" Usage="CoreAnimation.CALayer.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("transform")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTransform:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CATransform3D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transition">
      <MemberSignature Language="C#" Value="public static Foundation.NSString Transition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString Transition" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.Transition" />
      <MemberSignature Language="F#" Value="member this.Transition : Foundation.NSString" Usage="CoreAnimation.CALayer.Transition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCATransition", "CoreAnimation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCATransition</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect VisibleRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect VisibleRect" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.VisibleRect" />
      <MemberSignature Language="F#" Value="member this.VisibleRect : CoreGraphics.CGRect" Usage="CoreAnimation.CALayer.VisibleRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("visibleRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="CoreAnimation.CALayer.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZPosition">
      <MemberSignature Language="C#" Value="public virtual nfloat ZPosition { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat ZPosition" />
      <MemberSignature Language="DocId" Value="P:CoreAnimation.CALayer.ZPosition" />
      <MemberSignature Language="F#" Value="member this.ZPosition : nfloat with get, set" Usage="CoreAnimation.CALayer.ZPosition" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("zPosition")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setZPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
