<Type Name="CAPropertyAnimation" FullName="CoreAnimation.CAPropertyAnimation">
  <TypeSignature Language="C#" Value="public class CAPropertyAnimation : CoreAnimation.CAAnimation" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CAPropertyAnimation extends CoreAnimation.CAAnimation" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreAnimation.CAAnimation</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("CAPropertyAnimation", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An animation that can animate object properties.</summary>
    <remarks>For a list of common properties to animate, see the documentation forÂ <see cref="P:CoreAnimation.CAPropertyAnimation.KeyPath" /></remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/CAPropertyAnimation_class/index.html">Apple documentation for <c>CAPropertyAnimation</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CAPropertyAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CAPropertyAnimation (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CAPropertyAnimation (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CAPropertyAnimation (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Additive">
      <MemberSignature Language="C#" Value="public virtual bool Additive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Additive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isAdditive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAdditive:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cumulative">
      <MemberSignature Language="C#" Value="public virtual bool Cumulative { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cumulative" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isCumulative")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setCumulative:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromKeyPath">
      <MemberSignature Language="C#" Value="public static CoreAnimation.CAPropertyAnimation FromKeyPath (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreAnimation.CAPropertyAnimation FromKeyPath(string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("animationWithKeyPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CAPropertyAnimation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">
          <para>A key path represening the property to animate.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a property animation from the specified keypath.</summary>
        <returns>The new animation.</returns>
        <remarks>
          <para>The animation created will animate the property specified by the keypath.</para>
          <list type="table">
            <listheader>
              <term>Property</term>
              <description>Action</description>
            </listheader>
            <item>
              <term>anchorPoint</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>backgroundColor</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.   Subproperties are animated with basic animations.</description>
            </item>
            <item>
              <term>backgroundFilters</term>
              <description>Animates using a CATransition for 0.25 seconds or the duration of the transaction.   The default animation type is CATransition.Fade and the range is from 0.0 to 1.0. The filter subproperties are animated with a CABasicAnimation.</description>
            </item>
            <item>
              <term>borderColor</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>borderWidth</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>bounds</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>compositingFilter</term>
              <description>Animates using a CATransition for 0.25 seconds or the duration of the transaction.   The default animation type is CATransition.Fade and the range is from 0.0 to 1.0. Subproperties are animated with basic animations.</description>
            </item>
            <item>
              <term>contents</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>contentsRect</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>cornerRadius</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>doubleSided</term>
              <description>No default implied animation is set.</description>
            </item>
            <item>
              <term>filters</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation. Sub-properties of the filters are animated using the default implied CABasicAnimation described in Table 10.</description>
            </item>
            <item>
              <term>frame</term>
              <description>The frame property itself is not animatable. You can achieve the same results by modifying the bounds and position properties instead.</description>
            </item>
            <item>
              <term>hidden</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>mask</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation. This property is available only on Mac OS X.</description>
            </item>
            <item>
              <term>masksToBounds</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>opacity</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>position</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>shadowColor</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation. This property is available only on Mac OS X.</description>
            </item>
            <item>
              <term>shadowOffset</term>
              <description>Uses the default implied CABasicAnimation described in Table 10. This property is available only on Mac OS X.</description>
            </item>
            <item>
              <term>shadowOpacity</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation. This property is available only on Mac OS X.</description>
            </item>
            <item>
              <term>shadowRadius</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation. This property is available only on Mac OS X.</description>
            </item>
            <item>
              <term>sublayers</term>
              <description>Animates using a CATransition for 0.25 seconds or the duration of the transaction.   The default animation type is CATransition.Fade and the range is from 0.0 to 1.0..</description>
            </item>
            <item>
              <term>sublayerTransform</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>transform</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
            <item>
              <term>zPosition</term>
              <description>Animates for 0.25 seconds or the duration of the current transaction using a CABasiCanimation.</description>
            </item>
          </list>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyPath">
      <MemberSignature Language="C#" Value="public virtual string KeyPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("keyPath", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setKeyPath:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueFunction">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CAValueFunction ValueFunction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreAnimation.CAValueFunction ValueFunction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("valueFunction", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setValueFunction:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CAValueFunction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
