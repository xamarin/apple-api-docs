<Type Name="CMFormatDescription" FullName="MonoTouch.CoreMedia.CMFormatDescription">
  <TypeSignature Language="C#" Value="public class CMFormatDescription : IDisposable, MonoTouch.ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CMFormatDescription extends System.Object implements class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 4, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes media data for audio, video, text and time codes </summary>
    <remarks>Some properties apply to all media types, while some others only apply to specific media types.   They are prefixed with Audio or Video in those cases.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AudioChannelLayout">
      <MemberSignature Language="C#" Value="public MonoTouch.AudioToolbox.AudioChannelLayout AudioChannelLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.AudioToolbox.AudioChannelLayout AudioChannelLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioChannelLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: describe the channel layout.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioFormats">
      <MemberSignature Language="C#" Value="public MonoTouch.AudioToolbox.AudioFormat[] AudioFormats { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.AudioToolbox.AudioFormat[] AudioFormats" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioFormat[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: the supported audio formats, sorted from most rich to less.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioFormatType">
      <MemberSignature Language="C#" Value="public MonoTouch.AudioToolbox.AudioFormatType AudioFormatType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.AudioToolbox.AudioFormatType AudioFormatType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioMagicCookie">
      <MemberSignature Language="C#" Value="public byte[] AudioMagicCookie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int8[] AudioMagicCookie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Byte[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: magic cookie that might need to be passed to some backends.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioMostCompatibleFormat">
      <MemberSignature Language="C#" Value="public MonoTouch.AudioToolbox.AudioFormat AudioMostCompatibleFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.AudioToolbox.AudioFormat AudioMostCompatibleFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: returns the most compaible audio format.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioRichestDecodableFormat">
      <MemberSignature Language="C#" Value="public MonoTouch.AudioToolbox.AudioFormat AudioRichestDecodableFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.AudioToolbox.AudioFormat AudioRichestDecodableFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.AudioToolbox.AudioFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: Returns the richest decodable format.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AudioStreamBasicDescription">
      <MemberSignature Language="C#" Value="public Nullable&lt;MonoTouch.AudioToolbox.AudioStreamBasicDescription&gt; AudioStreamBasicDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype MonoTouch.AudioToolbox.AudioStreamBasicDescription&gt; AudioStreamBasicDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;MonoTouch.AudioToolbox.AudioStreamBasicDescription&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Audio-media only: Returns the AudioStreamBasicDescritpion object for the audio.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClosedCaptionFormatType">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreMedia.CMClosedCaptionFormatType ClosedCaptionFormatType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreMedia.CMClosedCaptionFormatType ClosedCaptionFormatType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMClosedCaptionFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreMedia.CMFormatDescription Create (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreMedia.CMFormatDescription Create(native int handle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMFormatDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">The native handle to a CMFormatDescription or a subclass of it.</param>
        <summary>Creates a CMFormatDescription (or a subclass of it) based on a native handle.</summary>
        <returns>The return can be either a CMFormatDescription a <see cref="T:MonoTouch.CoreMedia.CMAudioFormatDescription" /> or a <see cref="T:MonoTouch.CoreMedia.CMVideoFormatDescription" />, you can use the C# <see langword="is" /> expression to find out which subclass to cast the result to if you need access to the audio or video specific elements.</returns>
        <remarks>This is the recommended way of surfacing an unmanaged format description, as this will create the proper wrapper with a strong type for the audio or video versions of it.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreMedia.CMFormatDescription Create (IntPtr handle, bool owns);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreMedia.CMFormatDescription Create(native int handle, bool owns) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMFormatDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="owns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">The native handle to a CMFormatDescription or a subclass of it.</param>
        <param name="owns">True if the handle is already owned by maanged code, false otherwise (and in this case, the code will manually call retain on the object).</param>
        <summary>Creates a CMFormatDescription (or a subclass of it) based on a native handle.</summary>
        <returns>
          <para>The return can be either a CMFormatDescription a <see cref="T:MonoTouch.CoreMedia.CMAudioFormatDescription" /> or a <see cref="T:MonoTouch.CoreMedia.CMVideoFormatDescription" />, you can use the C# <see langword="is" /> expression to find out which subclass to cast the result to if you need access to the audio or video specific elements.</para>
          <para>
          </para>
        </returns>
        <remarks>This is mostly used to support the binding infrastructure.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreMedia.CMFormatDescription Create (MonoTouch.CoreMedia.CMMediaType mediaType, uint mediaSubtype, out MonoTouch.CoreMedia.CMFormatDescriptionError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreMedia.CMFormatDescription Create(valuetype MonoTouch.CoreMedia.CMMediaType mediaType, unsigned int32 mediaSubtype, valuetype MonoTouch.CoreMedia.CMFormatDescriptionError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMFormatDescription</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mediaType" Type="MonoTouch.CoreMedia.CMMediaType" />
        <Parameter Name="mediaSubtype" Type="System.UInt32" />
        <Parameter Name="error" Type="MonoTouch.CoreMedia.CMFormatDescriptionError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="mediaType">media type that we want to create a wrapper for</param>
        <param name="mediaSubtype">The media subtype</param>
        <param name="error">Errors, if any, are returned here.</param>
        <summary>Creates a CMFormatDescription (or a subclass of it) based on a native handle and to have it wrapped in a specific type.</summary>
        <returns>
          <para>The return can be either a CMFormatDescription a <see cref="T:MonoTouch.CoreMedia.CMAudioFormatDescription" /> or a <see cref="T:MonoTouch.CoreMedia.CMVideoFormatDescription" /> depending on the mediaType parameter that you passed.</para>
          <para>
          </para>
          <para />
        </returns>
        <remarks>
          <para>In general, the <see cref="M:MonoTouch.CoreMedia.CMFormatDescription.Create(System.IntPtr)" /> is a better option as it probes for the underlying type and creates the correct subclass of <see cref="T:MonoTouch.CoreMedia.CMFormatDescription" /></para>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the CMFormatDescription object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the CMFormatDescription class.</para>
          <para>Calling the Dispose method when you are finished using the CMFormatDescription ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CMFormatDescription object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CMFormatDescription class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the CMFormatDescription ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CMFormatDescription ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the CMFormatDescription object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtension">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSObject GetExtension (string extensionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSObject GetExtension(string extensionKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extensionKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extensionKey">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensionKeysCommonWithImageBuffers">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject[] GetExtensionKeysCommonWithImageBuffers ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject[] GetExtensionKeysCommonWithImageBuffers() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the Extension Keys that are common with CVImageBuffer objects.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExtensions">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSDictionary GetExtensions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.Foundation.NSDictionary GetExtensions() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeID">
      <MemberSignature Language="C#" Value="public static int GetTypeID ();" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GetTypeID() cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static nint GetTypeID ();" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.nint GetTypeID() cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Type identifier for the MonoTouch.CoreMedia.CMFormatDescription type.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The returned token is the CoreFoundation type identifier (CFType) that has been assigned to this class.</para>
          <para>This can be used to determine type identity between different CoreFoundation objects.</para>
          <para>You can retrieve the type of a CoreFoundation object by invoking the <see cref="M:MonoTouch.CoreFoundation.CFType.GetTypeID" /> on the native handle of the object</para>
          <example>
            <code lang="c#">bool isCMFormatDescription = (CFType.GetTypeID (foo.Handle) == CMFormatDescription.GetTypeID ());</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVideoCleanAperture">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF GetVideoCleanAperture (bool originIsAtTopLeft);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.RectangleF GetVideoCleanAperture(bool originIsAtTopLeft) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use CMVideoFormatDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="originIsAtTopLeft" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="originIsAtTopLeft">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVideoPresentationDimensions">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF GetVideoPresentationDimensions (bool usePixelAspectRatio, bool useCleanAperture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF GetVideoPresentationDimensions(bool usePixelAspectRatio, bool useCleanAperture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use CMVideoFormatDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.SizeF</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="usePixelAspectRatio" Type="System.Boolean" />
        <Parameter Name="useCleanAperture" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="usePixelAspectRatio">To be added.</param>
        <param name="useCleanAperture">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaSubType">
      <MemberSignature Language="C#" Value="public uint MediaSubType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 MediaSubType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the media subtype, ideally you should use the strongly typed versions instead.</summary>
        <value>
        </value>
        <remarks>
	  Instead of using this uint value, you can use the specific
	  strongly-typed version: AudioFormatType, SubtitleFormatType,
	  ClosedCaptionFormatType, MuxedStreamType, VideoCodecType,
	  MetadataFormatType or TimeCodeFormatType.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaType">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreMedia.CMMediaType MediaType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreMedia.CMMediaType MediaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMMediaType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MetadataFormatType">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreMedia.CMMetadataFormatType MetadataFormatType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreMedia.CMMetadataFormatType MetadataFormatType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMMetadataFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MuxedStreamType">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreMedia.CMMuxedStreamType MuxedStreamType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreMedia.CMMuxedStreamType MuxedStreamType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMMuxedStreamType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubtitleFormatType">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreMedia.CMSubtitleFormatType SubtitleFormatType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreMedia.CMSubtitleFormatType SubtitleFormatType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMSubtitleFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeCodeFormatType">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreMedia.CMTimeCodeFormatType TimeCodeFormatType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreMedia.CMTimeCodeFormatType TimeCodeFormatType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMTimeCodeFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoCodecType">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreMedia.CMVideoCodecType VideoCodecType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreMedia.CMVideoCodecType VideoCodecType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMVideoCodecType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoDimensions">
      <MemberSignature Language="C#" Value="public System.Drawing.Size VideoDimensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size VideoDimensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use CMVideoFormatDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Video-media only: the video dimensions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoMatchesImageBuffer">
      <MemberSignature Language="C#" Value="public bool VideoMatchesImageBuffer (MonoTouch.CoreVideo.CVImageBuffer imageBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool VideoMatchesImageBuffer(class MonoTouch.CoreVideo.CVImageBuffer imageBuffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageBuffer" Type="MonoTouch.CoreVideo.CVImageBuffer" />
      </Parameters>
      <Docs>
        <param name="imageBuffer">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
