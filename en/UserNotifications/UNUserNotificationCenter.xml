<Type Name="UNUserNotificationCenter" FullName="UserNotifications.UNUserNotificationCenter">
  <TypeSignature Language="C#" Value="public class UNUserNotificationCenter : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UNUserNotificationCenter extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:UserNotifications.UNUserNotificationCenter" />
  <TypeSignature Language="F#" Value="type UNUserNotificationCenter = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UNUserNotificationCenter", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 14, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>System-provided class that lets the developer schedule and manage notifications.</summary>
    <remarks>Developers use <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=User%20Notifications%20UNUser%20Notification%20Center%20Current%20Notification%20Center&amp;scope=Xamarin" title="M:UserNotifications.UNUserNotificationCenter.CurrentNotificationCenter*">M:UserNotifications.UNUserNotificationCenter.CurrentNotificationCenter*</a></format> to obtain the singleton that coordinates and schedules notifications.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/reference/UserNotifications/UNUserNotificationCenter">Apple documentation for <c>UNUserNotificationCenter</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UNUserNotificationCenter (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UserNotifications.UNUserNotificationCenter : Foundation.NSObjectFlag -&gt; UserNotifications.UNUserNotificationCenter" Usage="new UserNotifications.UNUserNotificationCenter t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UNUserNotificationCenter (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UserNotifications.UNUserNotificationCenter : nativeint -&gt; UserNotifications.UNUserNotificationCenter" Usage="new UserNotifications.UNUserNotificationCenter handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNotificationRequest">
      <MemberSignature Language="C#" Value="public virtual void AddNotificationRequest (UserNotifications.UNNotificationRequest request, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddNotificationRequest(class UserNotifications.UNNotificationRequest request, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.AddNotificationRequest(UserNotifications.UNNotificationRequest,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member AddNotificationRequest : UserNotifications.UNNotificationRequest * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.AddNotificationRequest : UserNotifications.UNNotificationRequest * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="uNUserNotificationCenter.AddNotificationRequest (request, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addNotificationRequest:withCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="UserNotifications.UNNotificationRequest" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="request">The data and settings for the notification.</param>
        <param name="completionHandler">An action that returns <see langword="void" /> and takes an out parameter for storing any errors that occur while trying to add the request.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>Adds the local notification that is specified by <paramref name="request" />, with the specified <paramref name="completionHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNotificationRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddNotificationRequestAsync (UserNotifications.UNNotificationRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddNotificationRequestAsync(class UserNotifications.UNNotificationRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.AddNotificationRequestAsync(UserNotifications.UNNotificationRequest)" />
      <MemberSignature Language="F#" Value="abstract member AddNotificationRequestAsync : UserNotifications.UNNotificationRequest -&gt; System.Threading.Tasks.Task&#xA;override this.AddNotificationRequestAsync : UserNotifications.UNNotificationRequest -&gt; System.Threading.Tasks.Task" Usage="uNUserNotificationCenter.AddNotificationRequestAsync request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="UserNotifications.UNNotificationRequest" />
      </Parameters>
      <Docs>
        <param name="request">The data and settings for the notification.</param>
        <summary>Adds the local notification that is specified by <paramref name="request" />, with the specified <paramref name="completionHandler" />.</summary>
        <returns>A task that represents the asynchronous AddNotificationRequest operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UserNotifications.UNUserNotificationCenter.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UserNotifications.UNUserNotificationCenter.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static UserNotifications.UNUserNotificationCenter Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UserNotifications.UNUserNotificationCenter Current" />
      <MemberSignature Language="DocId" Value="P:UserNotifications.UNUserNotificationCenter.Current" />
      <MemberSignature Language="F#" Value="member this.Current : UserNotifications.UNUserNotificationCenter" Usage="UserNotifications.UNUserNotificationCenter.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("currentNotificationCenter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UserNotifications.UNUserNotificationCenter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public virtual UserNotifications.IUNUserNotificationCenterDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UserNotifications.IUNUserNotificationCenterDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UserNotifications.UNUserNotificationCenter.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UserNotifications.IUNUserNotificationCenterDelegate with get, set" Usage="UserNotifications.UNUserNotificationCenter.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UserNotifications.IUNUserNotificationCenterDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UserNotifications.IUNUserNotificationCenterDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UserNotifications.IUNUserNotificationCenterDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="uNUserNotificationCenter.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UNUserNotificationCenter object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UNUserNotificationCenter class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UNUserNotificationCenter ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeliveredNotifications">
      <MemberSignature Language="C#" Value="public virtual void GetDeliveredNotifications (Action&lt;UserNotifications.UNNotification[]&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetDeliveredNotifications(class System.Action`1&lt;class UserNotifications.UNNotification[]&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.GetDeliveredNotifications(System.Action{UserNotifications.UNNotification[]})" />
      <MemberSignature Language="F#" Value="abstract member GetDeliveredNotifications : Action&lt;UserNotifications.UNNotification[]&gt; -&gt; unit&#xA;override this.GetDeliveredNotifications : Action&lt;UserNotifications.UNNotification[]&gt; -&gt; unit" Usage="uNUserNotificationCenter.GetDeliveredNotifications completionHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getDeliveredNotificationsWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completionHandler" Type="System.Action&lt;UserNotifications.UNNotification[]&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V200))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completionHandler">An action that takes an array of the delivered notifications and returns <see langword="void" />.</param>
        <summary>Returns the delivered notifications that are still in the notification center, processing them before they are returned.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDeliveredNotificationsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;UserNotifications.UNNotification[]&gt; GetDeliveredNotificationsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class UserNotifications.UNNotification[]&gt; GetDeliveredNotificationsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.GetDeliveredNotificationsAsync" />
      <MemberSignature Language="F#" Value="abstract member GetDeliveredNotificationsAsync : unit -&gt; System.Threading.Tasks.Task&lt;UserNotifications.UNNotification[]&gt;&#xA;override this.GetDeliveredNotificationsAsync : unit -&gt; System.Threading.Tasks.Task&lt;UserNotifications.UNNotification[]&gt;" Usage="uNUserNotificationCenter.GetDeliveredNotificationsAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;UserNotifications.UNNotification[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the delivered notifications that are still in the notification center, processing them before they are returned.</summary>
        <returns>The delivered notifications that are still in the notification center.</returns>
        <remarks>
          <para copied="true">The GetDeliveredNotificationsAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNotificationCategories">
      <MemberSignature Language="C#" Value="public virtual void GetNotificationCategories (Action&lt;Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt;&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetNotificationCategories(class System.Action`1&lt;class Foundation.NSSet`1&lt;class UserNotifications.UNNotificationCategory&gt;&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.GetNotificationCategories(System.Action{Foundation.NSSet{UserNotifications.UNNotificationCategory}})" />
      <MemberSignature Language="F#" Value="abstract member GetNotificationCategories : Action&lt;Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt;&gt; -&gt; unit&#xA;override this.GetNotificationCategories : Action&lt;Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt;&gt; -&gt; unit" Usage="uNUserNotificationCenter.GetNotificationCategories completionHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getNotificationCategoriesWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt;&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V201))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completionHandler">An action that takes an array of the currently registered notification categories and returns <see langword="void" />.</param>
        <summary>Returns the currently registered notification categories for the app, processing them before they are returned.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNotificationCategoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt;&gt; GetNotificationCategoriesAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSSet`1&lt;class UserNotifications.UNNotificationCategory&gt;&gt; GetNotificationCategoriesAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.GetNotificationCategoriesAsync" />
      <MemberSignature Language="F#" Value="abstract member GetNotificationCategoriesAsync : unit -&gt; System.Threading.Tasks.Task&lt;Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt;&gt;&#xA;override this.GetNotificationCategoriesAsync : unit -&gt; System.Threading.Tasks.Task&lt;Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt;&gt;" Usage="uNUserNotificationCenter.GetNotificationCategoriesAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the currently registered notification categories for the app, processing them before they are returned.</summary>
        <returns>A task that returns the set of the currently registered notification categories for the app.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNotificationSettings">
      <MemberSignature Language="C#" Value="public virtual void GetNotificationSettings (Action&lt;UserNotifications.UNNotificationSettings&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetNotificationSettings(class System.Action`1&lt;class UserNotifications.UNNotificationSettings&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.GetNotificationSettings(System.Action{UserNotifications.UNNotificationSettings})" />
      <MemberSignature Language="F#" Value="abstract member GetNotificationSettings : Action&lt;UserNotifications.UNNotificationSettings&gt; -&gt; unit&#xA;override this.GetNotificationSettings : Action&lt;UserNotifications.UNNotificationSettings&gt; -&gt; unit" Usage="uNUserNotificationCenter.GetNotificationSettings completionHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getNotificationSettingsWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completionHandler" Type="System.Action&lt;UserNotifications.UNNotificationSettings&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V202))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completionHandler">An action that takes a notification settings object and returns <see langword="void" />.</param>
        <summary>Returns the notification settings object for the app, processing it before it is returned.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNotificationSettingsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;UserNotifications.UNNotificationSettings&gt; GetNotificationSettingsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class UserNotifications.UNNotificationSettings&gt; GetNotificationSettingsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.GetNotificationSettingsAsync" />
      <MemberSignature Language="F#" Value="abstract member GetNotificationSettingsAsync : unit -&gt; System.Threading.Tasks.Task&lt;UserNotifications.UNNotificationSettings&gt;&#xA;override this.GetNotificationSettingsAsync : unit -&gt; System.Threading.Tasks.Task&lt;UserNotifications.UNNotificationSettings&gt;" Usage="uNUserNotificationCenter.GetNotificationSettingsAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;UserNotifications.UNNotificationSettings&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the notification settings object for the app, processing it before it is returned.</summary>
        <returns>A task that returns the notification settings for the app.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPendingNotificationRequests">
      <MemberSignature Language="C#" Value="public virtual void GetPendingNotificationRequests (Action&lt;UserNotifications.UNNotificationRequest[]&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetPendingNotificationRequests(class System.Action`1&lt;class UserNotifications.UNNotificationRequest[]&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.GetPendingNotificationRequests(System.Action{UserNotifications.UNNotificationRequest[]})" />
      <MemberSignature Language="F#" Value="abstract member GetPendingNotificationRequests : Action&lt;UserNotifications.UNNotificationRequest[]&gt; -&gt; unit&#xA;override this.GetPendingNotificationRequests : Action&lt;UserNotifications.UNNotificationRequest[]&gt; -&gt; unit" Usage="uNUserNotificationCenter.GetPendingNotificationRequests completionHandler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getPendingNotificationRequestsWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completionHandler" Type="System.Action&lt;UserNotifications.UNNotificationRequest[]&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V203))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completionHandler">An action that takes an array of the pending notification requests and returns <see langword="void" />.</param>
        <summary>Returns an array that contains the pending notification requests, processing them before returning them.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPendingNotificationRequestsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;UserNotifications.UNNotificationRequest[]&gt; GetPendingNotificationRequestsAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class UserNotifications.UNNotificationRequest[]&gt; GetPendingNotificationRequestsAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.GetPendingNotificationRequestsAsync" />
      <MemberSignature Language="F#" Value="abstract member GetPendingNotificationRequestsAsync : unit -&gt; System.Threading.Tasks.Task&lt;UserNotifications.UNNotificationRequest[]&gt;&#xA;override this.GetPendingNotificationRequestsAsync : unit -&gt; System.Threading.Tasks.Task&lt;UserNotifications.UNNotificationRequest[]&gt;" Usage="uNUserNotificationCenter.GetPendingNotificationRequestsAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;UserNotifications.UNNotificationRequest[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array that contains the pending notification requests, processing them before returning them.</summary>
        <returns>A task that returns the array that contains the pending notification requests.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllDeliveredNotifications">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllDeliveredNotifications ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllDeliveredNotifications() cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.RemoveAllDeliveredNotifications" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllDeliveredNotifications : unit -&gt; unit&#xA;override this.RemoveAllDeliveredNotifications : unit -&gt; unit" Usage="uNUserNotificationCenter.RemoveAllDeliveredNotifications " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeAllDeliveredNotifications")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all delivered notifications for the app from the notification center.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllPendingNotificationRequests">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllPendingNotificationRequests ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllPendingNotificationRequests() cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.RemoveAllPendingNotificationRequests" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllPendingNotificationRequests : unit -&gt; unit&#xA;override this.RemoveAllPendingNotificationRequests : unit -&gt; unit" Usage="uNUserNotificationCenter.RemoveAllPendingNotificationRequests " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeAllPendingNotificationRequests")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all pending notification requests for the app from the notification center.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDeliveredNotifications">
      <MemberSignature Language="C#" Value="public virtual void RemoveDeliveredNotifications (string[] identifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveDeliveredNotifications(string[] identifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.RemoveDeliveredNotifications(System.String[])" />
      <MemberSignature Language="F#" Value="abstract member RemoveDeliveredNotifications : string[] -&gt; unit&#xA;override this.RemoveDeliveredNotifications : string[] -&gt; unit" Usage="uNUserNotificationCenter.RemoveDeliveredNotifications identifiers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeDeliveredNotificationsWithIdentifiers:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifiers" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="identifiers">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovePendingNotificationRequests">
      <MemberSignature Language="C#" Value="public virtual void RemovePendingNotificationRequests (string[] identifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemovePendingNotificationRequests(string[] identifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.RemovePendingNotificationRequests(System.String[])" />
      <MemberSignature Language="F#" Value="abstract member RemovePendingNotificationRequests : string[] -&gt; unit&#xA;override this.RemovePendingNotificationRequests : string[] -&gt; unit" Usage="uNUserNotificationCenter.RemovePendingNotificationRequests identifiers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removePendingNotificationRequestsWithIdentifiers:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifiers" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="identifiers">The identifiers for which to remove the corresponding notification requests.</param>
        <summary>Removes all pending notification requests for the app that have any of the the specified <paramref name="identifiers" /> from the notification center.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestAuthorization">
      <MemberSignature Language="C#" Value="public virtual void RequestAuthorization (UserNotifications.UNAuthorizationOptions options, Action&lt;bool,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestAuthorization(valuetype UserNotifications.UNAuthorizationOptions options, class System.Action`2&lt;bool, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.RequestAuthorization(UserNotifications.UNAuthorizationOptions,System.Action{System.Boolean,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member RequestAuthorization : UserNotifications.UNAuthorizationOptions * Action&lt;bool, Foundation.NSError&gt; -&gt; unit&#xA;override this.RequestAuthorization : UserNotifications.UNAuthorizationOptions * Action&lt;bool, Foundation.NSError&gt; -&gt; unit" Usage="uNUserNotificationCenter.RequestAuthorization (options, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("requestAuthorizationWithOptions:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="UserNotifications.UNAuthorizationOptions" />
        <Parameter Name="completionHandler" Type="System.Action&lt;System.Boolean,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V5))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">The options for the authorization request.</param>
        <param name="completionHandler">A task that takes a <see langword="bool" /> success value and an error to process.</param>
        <summary>Requests notifcation authorization with the specified options, and processes the result of the request.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestAuthorizationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Tuple&lt;bool,Foundation.NSError&gt;&gt; RequestAuthorizationAsync (UserNotifications.UNAuthorizationOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class System.Tuple`2&lt;bool, class Foundation.NSError&gt;&gt; RequestAuthorizationAsync(valuetype UserNotifications.UNAuthorizationOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.RequestAuthorizationAsync(UserNotifications.UNAuthorizationOptions)" />
      <MemberSignature Language="F#" Value="abstract member RequestAuthorizationAsync : UserNotifications.UNAuthorizationOptions -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;&#xA;override this.RequestAuthorizationAsync : UserNotifications.UNAuthorizationOptions -&gt; System.Threading.Tasks.Task&lt;bool * Foundation.NSError&gt;" Usage="uNUserNotificationCenter.RequestAuthorizationAsync options" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Tuple&lt;System.Boolean,Foundation.NSError&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="UserNotifications.UNAuthorizationOptions" />
      </Parameters>
      <Docs>
        <param name="options">The options for the authorization request.</param>
        <summary>Requests notifcation authorization with the specified options, and processes the result of the request.</summary>
        <returns>A task that takes an authorization options object and returns a tuple that contains a boolean that indicates the result of the request and an error.</returns>
        <remarks>The error in the returned tuple may be <see langword="null" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNotificationCategories">
      <MemberSignature Language="C#" Value="public virtual void SetNotificationCategories (Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt; categories);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNotificationCategories(class Foundation.NSSet`1&lt;class UserNotifications.UNNotificationCategory&gt; categories) cil managed" />
      <MemberSignature Language="DocId" Value="M:UserNotifications.UNUserNotificationCenter.SetNotificationCategories(Foundation.NSSet{UserNotifications.UNNotificationCategory})" />
      <MemberSignature Language="F#" Value="abstract member SetNotificationCategories : Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt; -&gt; unit&#xA;override this.SetNotificationCategories : Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt; -&gt; unit" Usage="uNUserNotificationCenter.SetNotificationCategories categories" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setNotificationCategories:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categories" Type="Foundation.NSSet&lt;UserNotifications.UNNotificationCategory&gt;" />
      </Parameters>
      <Docs>
        <param name="categories">The set of categories to support.</param>
        <summary>Sets the specified supported notification categories</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportsContentExtensions">
      <MemberSignature Language="C#" Value="public virtual bool SupportsContentExtensions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportsContentExtensions" />
      <MemberSignature Language="DocId" Value="P:UserNotifications.UNUserNotificationCenter.SupportsContentExtensions" />
      <MemberSignature Language="F#" Value="member this.SupportsContentExtensions : bool" Usage="UserNotifications.UNUserNotificationCenter.SupportsContentExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("supportsContentExtensions")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
