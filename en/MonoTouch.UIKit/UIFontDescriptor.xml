<Type Name="UIFontDescriptor" FullName="MonoTouch.UIKit.UIFontDescriptor">
  <TypeSignature Language="C#" Value="public class UIFontDescriptor : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSCopying, MonoTouch.Foundation.INSSecureCoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIFontDescriptor extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSCoding, class MonoTouch.Foundation.INSCopying, class MonoTouch.Foundation.INSSecureCoding, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UIFontDescriptor", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes properties of a font, use to create fonts with certain features.   Provides ways of finding fonts matching a description as well.</summary>
    <remarks>
      <para> Developers create UIFontDescriptors with a set of
	parameters they are interested in (font faces, font families,
	font attributes, fallbacks).  You can consider these
	descriptors queries, which you can later use to create a
	concrete UIFont wit by using the <see cref="M:MonoTouch.UIKit.UIFont.FromDescriptor" /> method.
      </para>
      <para>

	These objects are immutable, once created, they can not be
	changed.  But given a UIFontDescriptor, you can create a more
	precise font descriptor instance with new information.  You
	can create a new UIFontDescriptor with more detailed font
	attributes using the <see cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithAttributes" />
	method, extend one by explicitly setting a font face or font family using the <see cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithFace" /> and <see cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithFamily" /> methods, specify a desired font size or a transformation matrix with the <see cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithSize" /> and <see cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithMatrix" /> methods, or request that certain stylistic traits be present with <see cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithTraits" />.

      </para>
      <para>
	
	This class exposes various static properties that return the
	UIFontDescriptor that matches the user's global preferences
	(font sizes) as well as the system font.   These properties are: 
	<see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredHeadline" />,
	<see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredBody" />,
	<see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredSubheadline" />,
	<see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredFootnote" />,
	<see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredCaption1" /> and
	<see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredCaption2" />.
      </para>
      <para> You can use the <see cref="M:MonoTouch.UIKit.UIFontDescriptor.GetMatchingFontDescriptors" /> method to get a set of UIFontDescriptors that match your
	font explicitly, or you can use <see cref="M:MonoTouch.UIKit.UIFontDescriptor.CreateWithTraits" />
	and <see cref="T:MonoTouch.UIKit.UIFont.FromDescriptor" />
	methods to match implicitly.
      </para>
      <para>
	The following example shows how to create two fonts: one with
	the preferred font for body text, and then a bold version of
	the same font:
      </para>
      <example>
        <code lang="C#"><![CDATA[

// Creates a UIFont for the body text
var bodyDescriptor = UIFontDescriptor.PreferredBody;
UIFont bodyFont = UIFont.FromDescriptor (bodyDescriptor, 0);
	  
// Creates a bold version of it:
var boldDescriptor = bodyDescriptor.CreateWithTraits (UIFontDescriptorSymbolicTraits.Bold);
UIFont boldBodyFont = UIFont.FromDescriptor (boldDescriptor, 0);

]]></code>
      </example>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIFontDescriptor_Class/index.html">Apple documentation for <c>UIFontDescriptor</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (MonoTouch.Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSDictionary attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithFontAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Weak dictionary of font attributes.</param>
        <summary>Creates a UIFontDescriptor using a set of attributes contained in the dictionary.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UIFontDescriptor (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (MonoTouch.UIKit.UIFontAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIFontAttributes attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.UIKit.UIFontAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">List of desired font attributes.</param>
        <summary>Creates a font descriptor using the specified font attributes.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UIFontDescriptor (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CascadeList">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIFontDescriptor[] CascadeList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIFontDescriptor[] CascadeList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the list of sub descriptors to be used before the system default fallbacks.</summary>
        <value>The default is the list of descriptors based on the user locale.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterSet">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSCharacterSet CharacterSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSCharacterSet CharacterSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Describes the character set supported by the specified font.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>
          <para>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Copy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject Copy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>
          <para>Implementation of the INSCopyable interface.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithAttributes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithAttributes (MonoTouch.Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithAttributes(class MonoTouch.Foundation.NSDictionary attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorByAddingAttributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">dictionary containing the attributes.</param>
        <summary>Creates a new UIFontDescriptor based on adding the provided attributes to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added attributes.</returns>
        <remarks>
          <para>Use the strongly typed version instead.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithAttributes">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIFontDescriptor CreateWithAttributes (MonoTouch.UIKit.UIFontAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.UIKit.UIFontDescriptor CreateWithAttributes(class MonoTouch.UIKit.UIFontAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.UIKit.UIFontAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">dictionary containing the attributes.</param>
        <summary>Creates a new UIFontDescriptor based on adding the provided attributes to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added attributes.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithFace">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithFace (string newFace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithFace(string newFace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithFace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newFace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newFace">New font face to use.</param>
        <summary>Creates a new UIFontDescriptor based on setting a font face to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added font face.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithFamily">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithFamily (string newFamily);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithFamily(string newFamily) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithFamily:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newFamily" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newFamily">New font family to use.</param>
        <summary>Creates a new UIFontDescriptor based on setting a font family to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added font family.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithMatrix">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithMatrix (MonoTouch.CoreGraphics.CGAffineTransform matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithMatrix(valuetype MonoTouch.CoreGraphics.CGAffineTransform matrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithMatrix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="matrix">New transofmration matrix to use.</param>
        <summary>Creates a new UIFontDescriptor based on setting a new transformation matrix to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added transformation matrix.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithSize">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithSize (float newPointSize);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithSize(float32 newPointSize) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithSize (nfloat newPointSize);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithSize(valuetype System.nfloat newPointSize) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPointSize" Type="System.Single" apistyle="classic" />
        <Parameter Name="newPointSize" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="newPointSize">New desired font size for the descriptor.</param>
        <summary>Creates a new UIFontDescriptor based on setting a new font size to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added font size.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithTraits">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor CreateWithTraits (MonoTouch.UIKit.UIFontDescriptorSymbolicTraits symbolicTraits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor CreateWithTraits(valuetype MonoTouch.UIKit.UIFontDescriptorSymbolicTraits symbolicTraits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithSymbolicTraits:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbolicTraits" Type="MonoTouch.UIKit.UIFontDescriptorSymbolicTraits" />
      </Parameters>
      <Docs>
        <param name="symbolicTraits">New desired stylistic traits for the descriptor.</param>
        <summary>Creates a new UIFontDescriptor based on setting a new symbolic traits to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added symbolic traits.</returns>
        <remarks>
          <para>Traits include attributes like bold, italic, condensed, monospace, vertical, optimized for the UI, </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIFontDescriptor object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIFontDescriptor class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the UIFontDescriptor ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:MonoTouch.Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:MonoTouch.Foundation.NSKeyedArchived" /> and then invoke the <see cref="M:MonoTouch.Foundation.NSKeyedArchived.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If you want to allow your object to be archived, you should override this method and store your state in using the provided <paramref name="encoder" /> parameter.   In addition, you should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="c#">public void override EncodeTo (NSCoder coder){
    c.Encode (1, key: "version");
    c.Encode (userName, key: "userName");
    c.Encode (hostName, key: "hostName");</code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Face">
      <MemberSignature Language="C#" Value="public string Face { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Face" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font face.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Family">
      <MemberSignature Language="C#" Value="public string Family { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Family" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font family.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FeatureSettings">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIFontFeature[] FeatureSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIFontFeature[] FeatureSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontFeature[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Typographic and layout feature settings.</summary>
        <value>
        </value>
        <remarks>
          <para>

	    This property is an array of UIFontFeature objects, each
	    representing a font-specific typograph or layout feature
	    that can be enabled in the font.  For background on Font
	    Features, you can read
	    https://developer.apple.com/fonts/registry

	  </para>
          <para>

	    The following example shows how to configure the font to
	    use proportional numbers as well as informing the
	    rendering engine to use the 1st Character Alternatives available in this font. 
	  </para>
          <example>
            <code lang="C#"><![CDATA[
UIFont CustomizeFont (UIFont font)
{
    var originalDescriptor = font.FontDescriptor;
    var attributes = new UIFontAttributes (
        new UIFontFeature (CTFontFeatureNumberSpacing.Selector.ProportionalNumbers),
	new UIFontFeature ((CTFontFeatureCharacterAlternatives.Selector)1));

    var newDesc = originalDescriptor.CreateWithAttributes (attributes);
    return UIFont.FromDescriptor (newDesc, 80);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedAdvance">
      <MemberSignature Language="C#" Value="public Nullable&lt;float&gt; FixedAdvance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float32&gt; FixedAdvance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Override for font's fixed advance for individual glyphs.</summary>
        <value>Default value is 0, null if not set.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontAttributes">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIFontAttributes FontAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIFontAttributes FontAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font attributes.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAttributes">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor FromAttributes (MonoTouch.Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor FromAttributes(class MonoTouch.Foundation.NSDictionary attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithFontAttributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Weak dictionary of font attributes.</param>
        <summary>(Weak) Creates a UIFontDescriptor using a set of attributes contained in the dictionary.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAttributes">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor FromAttributes (MonoTouch.UIKit.UIFontAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor FromAttributes(class MonoTouch.UIKit.UIFontAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="MonoTouch.UIKit.UIFontAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">Weak dictionary of font attributes.</param>
        <summary>Creates a UIFontDescriptor using a set of attributes contained in the dictionary.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor FromName (string fontName, MonoTouch.CoreGraphics.CGAffineTransform matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor FromName(string fontName, valuetype MonoTouch.CoreGraphics.CGAffineTransform matrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithName:matrix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fontName" Type="System.String" />
        <Parameter Name="matrix" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="fontName">Font name.</param>
        <param name="matrix">Transformation matrix.</param>
        <summary>Creates a UIFontDescriptor using the specified name and transformation matrix.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor FromName (string fontName, float size);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor FromName(string fontName, float32 size) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor FromName (string fontName, nfloat size);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor FromName(string fontName, valuetype System.nfloat size) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fontDescriptorWithName:size:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fontName" Type="System.String" />
        <Parameter Name="size" Type="System.Single" apistyle="classic" />
        <Parameter Name="size" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="fontName">Font name.</param>
        <param name="size">Font size.</param>
        <summary>Creates a UIFontDescriptor using the specified name and font size.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatchingFontDescriptors">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptor[] GetMatchingFontDescriptors (MonoTouch.Foundation.NSSet mandatoryKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIFontDescriptor[] GetMatchingFontDescriptors(class MonoTouch.Foundation.NSSet mandatoryKeys) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("matchingFontDescriptorsWithMandatoryKeys:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mandatoryKeys" Type="MonoTouch.Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="mandatoryKeys">
          <para>Mandatory keys that must be present.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Retrieve a UIFontDescriptor with an explicit set of features.</summary>
        <returns>
        </returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatchingFontDescriptors">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIFontDescriptor[] GetMatchingFontDescriptors (MonoTouch.UIKit.UIFontDescriptorAttribute[] mandatoryKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.UIKit.UIFontDescriptor[] GetMatchingFontDescriptors(valuetype MonoTouch.UIKit.UIFontDescriptorAttribute[] mandatoryKeys) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mandatoryKeys" Type="MonoTouch.UIKit.UIFontDescriptorAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mandatoryKeys">The list of mandatory keys that you desire on the font descriptor.</param>
        <summary>Retrieve a UIFontDescriptor with an explicit set of features.</summary>
        <returns>
        </returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject GetObject (MonoTouch.Foundation.NSString anAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject GetObject(class MonoTouch.Foundation.NSString anAttribute) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("objectForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anAttribute" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="anAttribute">Attribute to retrieve.</param>
        <summary>Low-level/weak API to retrieve properties from the UIFontDescriptor.</summary>
        <returns>
        </returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredDescriptorForTextStyle">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor GetPreferredDescriptorForTextStyle (MonoTouch.Foundation.NSString uiFontTextStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIFontDescriptor GetPreferredDescriptorForTextStyle(class MonoTouch.Foundation.NSString uiFontTextStyle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("preferredFontDescriptorWithTextStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiFontTextStyle" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="uiFontTextStyle">Name of one of the built-in system text styles.</param>
        <summary>Weakly-typed version of an API used to retrieve the user's desired font size.</summary>
        <returns>UIFontDescriptor</returns>
        <remarks>
          <para>
	    
	  You can instead use the 
	    <see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredHeadline" />,
	    <see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredBody" />,
	    <see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredSubheadline" />,
	    <see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredFootnote" />,
	    <see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredCaption1" /> and
	    <see cref="P:MonoTouch.UIKit.UIFontDescriptor.PreferredCaption2" /> properties to get this information.
	  </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Matrix">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGAffineTransform Matrix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGAffineTransform Matrix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("matrix")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Transformation matrix for the descriptor.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of the descriptor.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PointSize">
      <MemberSignature Language="C#" Value="public virtual float PointSize { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 PointSize" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat PointSize { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat PointSize" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("pointSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Point size in the descriptor.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostscriptName">
      <MemberSignature Language="C#" Value="public virtual string PostscriptName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostscriptName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("postscriptName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font's PostScript name.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredBody">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredBody { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIFontDescriptor PreferredBody" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFontDescriptor for the Body dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredCallout">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredCallout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIFontDescriptor PreferredCallout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.iOS(9, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredCaption1">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredCaption1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIFontDescriptor PreferredCaption1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFontDescriptor for the Caption1 dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredCaption2">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredCaption2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIFontDescriptor PreferredCaption2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFontDescriptor for the Caption2 dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredFootnote">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredFootnote { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIFontDescriptor PreferredFootnote" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFontDescriptor for the Footnote dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeadline">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredHeadline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIFontDescriptor PreferredHeadline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFontDescriptor for the Headline dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredSubheadline">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredSubheadline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIFontDescriptor PreferredSubheadline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFontDescriptor for the Subheadline dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredTitle1">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredTitle1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIFontDescriptor PreferredTitle1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.iOS(9, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredTitle2">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredTitle2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIFontDescriptor PreferredTitle2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.iOS(9, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredTitle3">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIFontDescriptor PreferredTitle3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIFontDescriptor PreferredTitle3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.iOS(9, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public Nullable&lt;float&gt; Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float32&gt; Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Font size (if set).</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolicTraits">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFontDescriptorSymbolicTraits SymbolicTraits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIFontDescriptorSymbolicTraits SymbolicTraits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("symbolicTraits")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontDescriptorSymbolicTraits</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Font's Symbolic traits</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStyle">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSString TextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSString TextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of the style to use for text.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Traits">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIFontTraits Traits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIFontTraits Traits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFontTraits</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Font's traits.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Variation" apistyle="classic">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSDictionary Variation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary Variation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
        </summary>
        <value>
        </value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleName">
      <MemberSignature Language="C#" Value="public string VisibleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VisibleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The visible name for this descriptor.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakFeatureSettings">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSDictionary[] WeakFeatureSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary[] WeakFeatureSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Weakly typed version of the feature settings.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakFontAttributes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary WeakFontAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary WeakFontAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("fontAttributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>(Weak) font attributes.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
