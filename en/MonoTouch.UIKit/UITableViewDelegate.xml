<Type Name="UITableViewDelegate" FullName="MonoTouch.UIKit.UITableViewDelegate">
  <TypeSignature Language="C#" Value="public class UITableViewDelegate : MonoTouch.UIKit.UIScrollViewDelegate, IDisposable, MonoTouch.UIKit.IUITableViewDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UITableViewDelegate extends MonoTouch.UIKit.UIScrollViewDelegate implements class MonoTouch.ObjCRuntime.INativeObject, class MonoTouch.UIKit.IUIScrollViewDelegate, class MonoTouch.UIKit.IUITableViewDelegate, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.UIKit.UIScrollViewDelegate</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.UIKit.IUITableViewDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UITableViewDelegate", false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class that receives notifications from a UITableView. MonoTouch developers should generally use <see cref="T:MonoTouch.UIKit.UITableViewSource" /> instead of this class.</summary>
    <remarks>
      <para>Implementing <see cref="T:MonoTouch.UIKit.UITableView" /> often requires subclasses of both <see cref="T:MonoTouch.UIKit.UITableViewDataSource" /> and <see cref="T:MonoTouch.UIKit.UITableViewDelegate" /> to provide data and behavior for the table view. MonoTouch provides a single class - <see cref="T:MonoTouch.UIKit.UITableViewSource" /> - so that only one class needs to be implemented.</para>
      <para>The UITableViewDelegate class methods provide a table view with the ability to manage selection, configure section headers and footers, delete and reorder cells and control the editing menu.</para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=23a2571b-45eb-4889-bb67-d88937cb68c1">monocatalog</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDelegate_Protocol/index.html">Apple documentation for <c>UITableViewDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITableViewDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public UITableViewDelegate (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITableViewDelegate (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UITableViewDelegate (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITableViewDelegate (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UITableViewDelegate (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessoryButtonTapped">
      <MemberSignature Language="C#" Value="public virtual void AccessoryButtonTapped (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AccessoryButtonTapped(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:accessoryButtonTappedForRowWithIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">The table view containing the row/cell accessory that has been tapped.</param>
        <param name="indexPath">The location of the row in the table view.</param>
        <summary>Called when the user taps the DetailDisclosureButton accessory on the row located at <paramref name="indexPath" />.</summary>
        <remarks>This method should typically display a new view related to the selected row.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessoryForRow">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITableViewCellAccessory AccessoryForRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.UITableViewCellAccessory AccessoryForRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:accessoryTypeForRowWithIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_3_0, Introduced=MonoTouch.ObjCRuntime.Platform.iOS_2_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITableViewCellAccessory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the rows.</param>
        <param name="indexPath">Location of the row.</param>
        <summary>Deprecated in iOS 3.0. Use <see cref="P:MonoTouch.UIKit.UITableViewCell.Accessory" /> and <see cref="P:MonoTouch.UIKit.UITableViewCell.AccessoryView" /> when configuring table view cells.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanPerformAction">
      <MemberSignature Language="C#" Value="public virtual bool CanPerformAction (MonoTouch.UIKit.UITableView tableView, MonoTouch.ObjCRuntime.Selector action, MonoTouch.Foundation.NSIndexPath indexPath, MonoTouch.Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanPerformAction(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.ObjCRuntime.Selector action, class MonoTouch.Foundation.NSIndexPath indexPath, class MonoTouch.Foundation.NSObject sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:canPerformAction:forRowAtIndexPath:withSender:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
        <Parameter Name="sender" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row.</param>
        <param name="action">A selector identifying the Copy or Paste method (ie. <see cref="M:MonoTouch.UIKit.UIResponder.Copy(MonoTouch.Foundation.NSObject)" /> or <see cref="M:MonoTouch.UIKit.UIResponder.Paste(MonoTouch.Foundation.NSObject)" />).</param>
        <param name="indexPath">Location of the row.</param>
        <param name="sender">Object that initially triggere the Copy or Paste.</param>
        <summary>Whether the editing menu should omit the Copy or Paste command for the specified row.</summary>
        <returns>
          <see langword="true" /> if the command corresponding to <paramref name="action" />, otherwise <see langword="false" />. The default is <see langword="false" />.</returns>
        <remarks>
          <para>Invoked after <see cref="M:MonoTouch.UIKit.UITableViewSource.ShouldShowMenu(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath)" /> to potentially exclude one of the commands (Copy or Paste) from the editing menu. For example, if the user triggers the editing menu on a row that does not accept pasted content, return <see langword="false" /> from this method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CellDisplayingEnded">
      <MemberSignature Language="C#" Value="public virtual void CellDisplayingEnded (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UITableViewCell cell, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CellDisplayingEnded(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.UIKit.UITableViewCell cell, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:didEndDisplayingCell:forRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="cell" Type="MonoTouch.UIKit.UITableViewCell" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">The <see cref="T:MonoTouch.UIKit.UITableView" /> being displayed.</param>
        <param name="cell">The <see cref="T:MonoTouch.UIKit.UITableViewCell" /> that has just been removed.</param>
        <param name="indexPath">The <see cref="T:MonoTouch.Foundation.NSIndexPath" /> specifying the <paramref name="cell" />.</param>
        <summary>Called when a table row is removed from a <see cref="T:MonoTouch.UIKit.UITableView" /> (for example, due to scrolling).</summary>
        <remarks>Application developers should use this method, rather than attempting to monitor the <paramref name="cell" />'s visibility directly.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomizeMoveTarget">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSIndexPath CustomizeMoveTarget (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath sourceIndexPath, MonoTouch.Foundation.NSIndexPath proposedIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSIndexPath CustomizeMoveTarget(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath sourceIndexPath, class MonoTouch.Foundation.NSIndexPath proposedIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="sourceIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
        <Parameter Name="proposedIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row to be moved.</param>
        <param name="sourceIndexPath">The original location of the row being moved.</param>
        <param name="proposedIndexPath">The location in the table view where the row has been dropped. The location can be altered by this method.</param>
        <summary>Return a new index path to change the final location of a row being moved by the user.</summary>
        <returns>An index path to retarget the proposed move of a row. Use <paramref name="proposedIndexPath" /> if no customization is required.</returns>
        <remarks>
          <para>Allows customization of the target location for a row that is being moved within a table view. As the row is moved, other rows slide apart visually at the destination location to indicate where the row would be moved to. By returning a value that is different to <paramref name="proposedIndexPath" /> this method can prevent a row from being moved to certain locations.</para>
          <para>[UITableViewDelegate]</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationEnded" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void DecelerationEnded (MonoTouch.UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DecelerationEnded(class MonoTouch.UIKit.UIScrollView scrollView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewDidEndDecelerating:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The table view being scrolled.</param>
        <summary>Called when deceleration has ended (at the end of a scrolling movement).</summary>
        <remarks>
          <para>The scroll view subclass (table view) calls this method when scrolling movement comes to a halt.</para>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationStarted" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void DecelerationStarted (MonoTouch.UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DecelerationStarted(class MonoTouch.UIKit.UIScrollView scrollView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewWillBeginDecelerating:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The table view being scrolled.</param>
        <summary>Called when deceleration has started (at the end of a scrolling movement).</summary>
        <remarks>
          <para>After a user's finger stops dragging and is lifted from the screen (touch up), the table view will continue to move a short distance.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidEndEditing">
      <MemberSignature Language="C#" Value="public virtual void DidEndEditing (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidEndEditing(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:didEndEditingRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view being edited.</param>
        <param name="indexPath">Location of the row.</param>
        <summary>Called when the table view has left editing mode for the row specified by <paramref name="indexPath" />.</summary>
        <remarks>
          <para>When the user swipes across a single row to activate the swipe-to-delete feature, a Delete button appears and the table goes into a "swipe to delete editing mode". The table view calls <see cref="M:MonoTouch.UIKit.UITableViewSource.WillBeginEditing(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath)" /> to allow the row to adjust its user interface.</para>
          <para>This method is called when the table view exits that mode (and the Delete button disappears), usually by the user touching elsewhere in the table view.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidZoom" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void DidZoom (MonoTouch.UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DidZoom(class MonoTouch.UIKit.UIScrollView scrollView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewDidZoom:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(3, 2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">Table view being zoomed.</param>
        <summary>Called when the table view is being zoomed.</summary>
        <remarks>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DraggingEnded" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void DraggingEnded (MonoTouch.UIKit.UIScrollView scrollView, bool willDecelerate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DraggingEnded(class MonoTouch.UIKit.UIScrollView scrollView, bool willDecelerate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewDidEndDragging:willDecelerate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
        <Parameter Name="willDecelerate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scrollView">Table view where the content has finished scrolling.</param>
        <param name="willDecelerate">
          <see langword="true" /> if the scrolling movement will continue (but decelerate) after the user lifts their finger. If <see langword="false" /> then the scrolling stops immediately upon touch-up.</param>
        <summary>Called when dragging has ended.</summary>
        <remarks>
          <para>Dragging ends when the user lifts their finger and stops scrolling the content directly.</para>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DraggingStarted" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void DraggingStarted (MonoTouch.UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void DraggingStarted(class MonoTouch.UIKit.UIScrollView scrollView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewWillBeginDragging:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">Table view whose content is about to be scrolled.</param>
        <summary>Called when dragging is about to begin.</summary>
        <remarks>
          <para>This method may not be called until dragging has already commenced a small distance</para>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditActionsForRow">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITableViewRowAction[] EditActionsForRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITableViewRowAction[] EditActionsForRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:editActionsForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITableViewRowAction[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Returns an array of row actions to display after the user swipes the row in the <paramref name="tableView" /> table view that is identified by <paramref name="indexPath" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingStyleForRow">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITableViewCellEditingStyle EditingStyleForRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.UITableViewCellEditingStyle EditingStyleForRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:editingStyleForRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITableViewCellEditingStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view that is going to be editable.</param>
        <param name="indexPath">Location of the row.</param>
        <summary>Called for each row being displayed by the table view, to determine what editing style to use for that row.</summary>
        <returns>The editing style to be used for the row specified by <paramref name="indexPath" />.</returns>
        <remarks>
          <para>When the table view enters editing mode, this method allows the editing style to be set for each row.</para>
          <para>If the <see cref="T:MonoTouch.UIKit.UITableViewCell" /> is editable (<see cref="P:MonoTouch.UIKit.UITableViewCell.Editing" /> is <see langword="true" />) but this method is not implemented, the cell gets <see cref="F:MonoTouch.UIKit.UITableViewCellEditingStyle.Delete" /> set for it by default.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EstimatedHeight">
      <MemberSignature Language="C#" Value="public virtual float EstimatedHeight (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 EstimatedHeight(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat EstimatedHeight (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat EstimatedHeight(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:estimatedHeightForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The estimated height of the cell at the indexPath.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EstimatedHeightForFooter">
      <MemberSignature Language="C#" Value="public virtual float EstimatedHeightForFooter (MonoTouch.UIKit.UITableView tableView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 EstimatedHeightForFooter(class MonoTouch.UIKit.UITableView tableView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat EstimatedHeightForFooter (MonoTouch.UIKit.UITableView tableView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat EstimatedHeightForFooter(class MonoTouch.UIKit.UITableView tableView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:estimatedHeightForFooterInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>The estimated height of the footer for the specified section.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EstimatedHeightForHeader">
      <MemberSignature Language="C#" Value="public virtual float EstimatedHeightForHeader (MonoTouch.UIKit.UITableView tableView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 EstimatedHeightForHeader(class MonoTouch.UIKit.UITableView tableView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat EstimatedHeightForHeader (MonoTouch.UIKit.UITableView tableView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat EstimatedHeightForHeader(class MonoTouch.UIKit.UITableView tableView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:estimatedHeightForHeaderInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>The estimated height of the header for the specified section.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterViewDisplayingEnded">
      <MemberSignature Language="C#" Value="public virtual void FooterViewDisplayingEnded (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UIView footerView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FooterViewDisplayingEnded(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.UIKit.UIView footerView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void FooterViewDisplayingEnded (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UIView footerView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FooterViewDisplayingEnded(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.UIKit.UIView footerView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:didEndDisplayingFooterView:forSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="footerView" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">Table to which the footer view belongs.</param>
        <param name="footerView">The <see cref="T:MonoTouch.UIKit.UIView" /> being removed.</param>
        <param name="section">The index of the section to which the <paramref name="footerView" /> belonged.</param>
        <summary>Called when a section footer view is removed from the table (for instance, due to scrolling).</summary>
        <remarks>Application developers should use this method rather than trying to monitor the <paramref name="footerView" />'s visibility directly.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeightForFooter">
      <MemberSignature Language="C#" Value="public virtual float GetHeightForFooter (MonoTouch.UIKit.UITableView tableView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetHeightForFooter(class MonoTouch.UIKit.UITableView tableView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat GetHeightForFooter (MonoTouch.UIKit.UITableView tableView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetHeightForFooter(class MonoTouch.UIKit.UITableView tableView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:heightForFooterInSection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view.</param>
        <param name="section">Index of the section requiring a footer display.</param>
        <summary>Called to determine the height of the footer for the section specified by <paramref name="section" />.</summary>
        <returns>The height of the footer (in points) as a <see langword="float" />.</returns>
        <remarks>
          <para>This method allows section footers to have different heights. This method is not called if the table is <see cref="F:MonoTouch.UIKit.UITableViewStyle.Plain" /> style.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeightForHeader">
      <MemberSignature Language="C#" Value="public virtual float GetHeightForHeader (MonoTouch.UIKit.UITableView tableView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetHeightForHeader(class MonoTouch.UIKit.UITableView tableView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat GetHeightForHeader (MonoTouch.UIKit.UITableView tableView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetHeightForHeader(class MonoTouch.UIKit.UITableView tableView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:heightForHeaderInSection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view.</param>
        <param name="section">Index of the section requiring a header display.</param>
        <summary>Called to determine the height of the header for the section specified by <paramref name="section" />.</summary>
        <returns>The height of the header (in points) as a <see langword="float" />.</returns>
        <remarks>
          <para>This method allows section headers to have different heights. This method is not called if the table is <see cref="F:MonoTouch.UIKit.UITableViewStyle.Plain" /> style.</para>
          <para>[UITableViewDelegate]</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeightForRow">
      <MemberSignature Language="C#" Value="public virtual float GetHeightForRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 GetHeightForRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat GetHeightForRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetHeightForRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:heightForRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view.</param>
        <param name="indexPath">Location of the row.</param>
        <summary>Called to determine the height of the row at <paramref name="indexPath" />.</summary>
        <returns>The height of the row (in points) as a <see langword="float" />.</returns>
        <remarks>
          <para>This method allows rows to have different heights (for example, rows that contain a variable number of text lines). If this method is implemented, it overrides the <see cref="P:MonoTouch.UIKit.UITableView.RowHeight" /> property set on the table view, for the row at <paramref name="indexPath" />.</para>
          <para>There are performance implications to using this method instead of <see cref="P:MonoTouch.UIKit.UITableView.RowHeight" />: every time a table view is displayed it calls this method for each of its rows. This can result in poor performance when the table has a large number of rows (for example, 1000 rows or more).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForFooter">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView GetViewForFooter (MonoTouch.UIKit.UITableView tableView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIView GetViewForFooter(class MonoTouch.UIKit.UITableView tableView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView GetViewForFooter (MonoTouch.UIKit.UITableView tableView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIView GetViewForFooter(class MonoTouch.UIKit.UITableView tableView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:viewForFooterInSection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the section.</param>
        <param name="section">Section index where the footer will be added.</param>
        <summary>Returns a view object to display at the end of the given section.</summary>
        <returns>A view to be displayed at the end of the given <paramref name="section" />.</returns>
        <remarks>
          <para>Can either be a <see cref="T:MonoTouch.UIKit.UILabel" />, <see cref="T:MonoTouch.UIKit.UIImageView" /> or a custom view. This method requires <see cref="M:MonoTouch.UIKit.UITableViewSource.GetHeightForFooter(System.Int32,MonoTouch.UIKit.UITableView)" /> to be implemented as well.</para>
          <para>[UITableViewDelegate]</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForHeader">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView GetViewForHeader (MonoTouch.UIKit.UITableView tableView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIView GetViewForHeader(class MonoTouch.UIKit.UITableView tableView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView GetViewForHeader (MonoTouch.UIKit.UITableView tableView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIView GetViewForHeader(class MonoTouch.UIKit.UITableView tableView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:viewForHeaderInSection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the section.</param>
        <param name="section">Section index where the header will be added.</param>
        <summary>Returns a view object to display at the start of the given section.</summary>
        <returns>A view to be displayed at the start of the given <paramref name="section" />.</returns>
        <remarks>
          <para>Can either be a <see cref="T:MonoTouch.UIKit.UILabel" />, <see cref="T:MonoTouch.UIKit.UIImageView" /> or a custom view. This method requires <see cref="M:MonoTouch.UIKit.UITableViewSource.GetHeightForHeader(System.Int32,MonoTouch.UIKit.UITableView)" /> to be implemented as well.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderViewDisplayingEnded">
      <MemberSignature Language="C#" Value="public virtual void HeaderViewDisplayingEnded (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UIView headerView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HeaderViewDisplayingEnded(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.UIKit.UIView headerView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void HeaderViewDisplayingEnded (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UIView headerView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HeaderViewDisplayingEnded(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.UIKit.UIView headerView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:didEndDisplayingHeaderView:forSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="headerView" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">The <see cref="T:MonoTouch.UIKit.UITableView" /> to which the <paramref name="headerView" /> belongs.</param>
        <param name="headerView">The <see cref="T:MonoTouch.UIKit.UIView" /> being removed.</param>
        <param name="section">An index indicating the section to which the <paramref name="headerView" /> belongs.</param>
        <summary>Called when a section header is removed from a table (for instance, due to scrolling).</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="IndentationLevel">
      <MemberSignature Language="C#" Value="public virtual int IndentationLevel (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndentationLevel(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint IndentationLevel (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint IndentationLevel(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:indentationLevelForRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row.</param>
        <param name="indexPath">Location of the row.</param>
        <summary>Get the indentation level for the row specified by <paramref name="indexPath" />.</summary>
        <returns>How much the contents of this row should be indented to show its hierarchical position with respect to the other rows.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformAction">
      <MemberSignature Language="C#" Value="public virtual void PerformAction (MonoTouch.UIKit.UITableView tableView, MonoTouch.ObjCRuntime.Selector action, MonoTouch.Foundation.NSIndexPath indexPath, MonoTouch.Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformAction(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.ObjCRuntime.Selector action, class MonoTouch.Foundation.NSIndexPath indexPath, class MonoTouch.Foundation.NSObject sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:performAction:forRowAtIndexPath:withSender:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
        <Parameter Name="sender" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row.</param>
        <param name="action">A selector identifying the Copy or Paste method (ie. <see cref="M:MonoTouch.UIKit.UIResponder.Copy(MonoTouch.Foundation.NSObject)" /> or <see cref="M:MonoTouch.UIKit.UIResponder.Paste(MonoTouch.Foundation.NSObject)" />).</param>
        <param name="indexPath">Location of the row where the copy or paste operation was selected.</param>
        <param name="sender">Object that triggered the copy or paste operation.</param>
        <summary>Called to perform a copy or paste operation on the row specified by <paramref name="indexPath" />.</summary>
        <remarks>
          <para>This method is called when a copy or paste operation is chosen from the editing menu in a table view cell. The implementation may use <see cref="T:MonoTouch.UIKit.UIPasteboard" /> to write the relevant <paramref name="indexPath" /> row data to share with other applications (or just for use within the current application).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDeselected">
      <MemberSignature Language="C#" Value="public virtual void RowDeselected (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RowDeselected(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:didDeselectRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row.</param>
        <param name="indexPath">Location of the row that has become de-selected.</param>
        <summary>Called when the row specified by <paramref name="indexPath" /> is de-selected.</summary>
        <remarks>
          <para>This method can be used to perform any processing required when a row is de-selected, such as removing a <see cref="F:MonoTouch.UIKit.UITableViewCellAccessory.Checkmark" /> accessory (if one is being displayed). In such an example, use the <see cref="M:MonoTouch.UIKit.UITableViewSource.RowSelected(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath)" /> to display the checkmark.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHighlighted">
      <MemberSignature Language="C#" Value="public virtual void RowHighlighted (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath rowIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RowHighlighted(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath rowIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:didHighlightRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="rowIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">The <see cref="T:MonoTouch.UIKit.UITableView" /> containing the row.</param>
        <param name="rowIndexPath">Location of the row being highlighted.</param>
        <summary>Called when a row is highlighted.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowSelected">
      <MemberSignature Language="C#" Value="public virtual void RowSelected (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RowSelected(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:didSelectRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row.</param>
        <param name="indexPath">Location of the row that has become selected.</param>
        <summary>Called when the row specified by <paramref name="indexPath" /> is selected.</summary>
        <remarks>
          <para>This method can be used to perform any processing required when a row is selected, such as displaying a <see cref="F:MonoTouch.UIKit.UITableViewCellAccessory.Checkmark" /> accessory. In such an example, use the <see cref="M:MonoTouch.UIKit.UITableViewSource.RowDeselected(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath)" /> to hide the checkmark.</para>
          <para>Alternatively this method may push a new view controller onto a UINavigationController if the table view is part of an hierarchical menu, or display another view or alert depending on the application's requirements.</para>
          <para>This method is not called when the table is in editing mode (ie. when <see cref="P:MonoTouch.UIKit.UITableView.Editing" /> is <see langword="true" />).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowUnhighlighted">
      <MemberSignature Language="C#" Value="public virtual void RowUnhighlighted (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath rowIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RowUnhighlighted(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath rowIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:didUnhighlightRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="rowIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">The <see cref="T:MonoTouch.UIKit.UITableView" /> containing the row.</param>
        <param name="rowIndexPath">The row being unhighlighted.</param>
        <summary>Called when a row is unhighlighted.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAnimationEnded" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void ScrollAnimationEnded (MonoTouch.UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ScrollAnimationEnded(class MonoTouch.UIKit.UIScrollView scrollView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewDidEndScrollingAnimation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">Scroll view subclass that is performing a scrolling animation.</param>
        <summary>Called when a scrolling animation in the scroll view is finished.</summary>
        <remarks>
          <para>The scroll view subclass calls this method after <see cref="M:MonoTouch.UIKit.UIScrollView.SetContentOffset(System.Drawing.PointF,System.Boolean)" /> and <see cref="M:MonoTouch.UIKit.UIScrollView.ScrollRectToVisible(System.Drawing.RectangleF,System.Boolean)" /> (but only if animations are requested).</para>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrolled" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void Scrolled (MonoTouch.UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Scrolled(class MonoTouch.UIKit.UIScrollView scrollView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewDidScroll:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">Scroll view subclass where the scrolling occurred.</param>
        <summary>Called when the user scrolls the content.</summary>
        <remarks>
          <para>This method is typically implemented to obtain the change in content offset from <paramref name="scrollView" /> and draw the affected portion of the content view.</para>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrolledToTop" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void ScrolledToTop (MonoTouch.UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ScrolledToTop(class MonoTouch.UIKit.UIScrollView scrollView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewDidScrollToTop:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">Scroll view subclass that was scrolled.</param>
        <summary>Called when the scroll view is scrolled to the top of the content.</summary>
        <remarks>
          <para>The scroll view calls this method when it finishes scrolling to the top of the content. It might be called immediately if the top is already shown. For the scroll-to-top gesture (tap on the status bar) to work, <see cref="P:MonoTouch.UIKit.UIScrollView.ScrollsToTop" /> (on <see cref="T:MonoTouch.UIKit.UIScrollView" />) must be set to <see langword="true" /></para>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldHighlightRow">
      <MemberSignature Language="C#" Value="public virtual bool ShouldHighlightRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath rowIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldHighlightRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath rowIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:shouldHighlightRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="rowIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">The <see cref="T:MonoTouch.UIKit.UITableView" /> in which the row is located.</param>
        <param name="rowIndexPath">The location of the row being highlighted.</param>
        <summary>Called prior to highlighting. If this method returns <see langword="false" />, the row will not be highlighted.</summary>
        <returns>
          <see langword="true" /> if the row should be highlighted, <see langword="false" /> otherwise.</returns>
        <remarks>
          <para>This method is called prior to highlighing (see the "Highlighting and selection" discussion in the remarks on <see cref="T:MonoTouch.UIKit.UITableView" />. Application developers can override this method to gain finer-grained control over row selection.</para>
          <para>The default implementation of this method returns <see langword="true" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldIndentWhileEditing">
      <MemberSignature Language="C#" Value="public virtual bool ShouldIndentWhileEditing (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldIndentWhileEditing(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:shouldIndentWhileEditingRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view that contains the row.</param>
        <param name="indexPath">Location of the row.</param>
        <summary>Whether the row specified by <paramref name="indexPath" /> should be indented while the table is in edit mode.</summary>
        <returns>
          <see langword="true" /> if the row's contents should be indented, otherwise <see langword="false" />.</returns>
        <remarks>
          <para>If this property is not implemented the default is <see langword="true" /> and the row is indented while the table view is in edit mode.</para>
          <para>This method is used to force a row's content to be indented while the containing table view is in edit mode, regardless of whether the row itself is displaying edit controls. Being indented means the row content 'lines up' with other rows that may be displaying edit controls.</para>
          <para>This type of indenting is not related to <see cref="P:MonoTouch.UIKit.UITableViewSource.IndentationLevel(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath)" /> which is used to indent row contents to represent a hierarchical relationship between rows.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldScrollToTop" apistyle="classic">
      <MemberSignature Language="C#" Value="public override bool ShouldScrollToTop (MonoTouch.UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ShouldScrollToTop(class MonoTouch.UIKit.UIScrollView scrollView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewShouldScrollToTop:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">Scroll view requesting whether scroll is allowed.</param>
        <summary>Called by the scroll view subclass to determine whether it should scroll to the top of the content.</summary>
        <returns>
          <see langword="true" /> to allow scrolling to the top of the content, <see langword="false" /> to prevent it.</returns>
        <remarks>
          <para>If this method is not implemented, <see langword="true" /> is the default. For the scroll-to-top gesture (tap on the status bar) to work, <see cref="P:MonoTouch.UIKit.UIScrollView.ScrollsToTop" /> (on <see cref="T:MonoTouch.UIKit.UIScrollView" />) must be set to <see langword="true" />.</para>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldShowMenu">
      <MemberSignature Language="C#" Value="public virtual bool ShouldShowMenu (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath rowAtindexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldShowMenu(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath rowAtindexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:shouldShowMenuForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="rowAtindexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row.</param>
        <param name="rowAtindexPath">Location of the row that the user is selecting.</param>
        <summary>Whether the editing menu should be displayed for the row specified by <paramref name="indexPath" />.</summary>
        <returns>
          <see langword="true" /> if the editing menu should appear for this row, or <see langword="false" /> if not. The default is <see langword="false" />.</returns>
        <remarks>
          <para>This method controls whether the editing menu is displayed when the user tap-holds on the specified row. Return <see langword="false" /> to prevent the menu from appearing (for example, if copying or pasting of data is not supported on this row).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleForDeleteConfirmation">
      <MemberSignature Language="C#" Value="public virtual string TitleForDeleteConfirmation (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TitleForDeleteConfirmation(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view being edited.</param>
        <param name="indexPath">Location of the row that may be deleted.</param>
        <summary>Sets the text of the Delete button for the specified row.</summary>
        <returns>Text to be used as the title for the Delete button.</returns>
        <remarks>
          <para>The Delete button appears when the user swipes-to-delete or taps the red circle accessory while the table view is in edit mode.</para>
          <para>Use this method to customize the button title, for example in the Mail app the Delete button title contains the number of emails that will be deleted in a message thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewForZoomingInScrollView" apistyle="classic">
      <MemberSignature Language="C#" Value="public override MonoTouch.UIKit.UIView ViewForZoomingInScrollView (MonoTouch.UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class MonoTouch.UIKit.UIView ViewForZoomingInScrollView(class MonoTouch.UIKit.UIScrollView scrollView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("viewForZoomingInScrollView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">Scroll view subclass displaying the content.</param>
        <summary>Returns the view to scale when zooming is about to occur in the scroll view.</summary>
        <returns>A <see cref="T:MonoTouch.UIKit.UIView" /> that will be scaled by the zooming gesture. Return <see langword="null" /> to prevent zooming.</returns>
        <remarks>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillBeginEditing">
      <MemberSignature Language="C#" Value="public virtual void WillBeginEditing (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillBeginEditing(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:willBeginEditingRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view about to be edited.</param>
        <param name="indexPath">Location of the row that has been swiped.</param>
        <summary>Called when the table view is about to enter swipe-to-delete editing mode.</summary>
        <remarks>
          <para>This method is never called unless <see cref="M:MonoTouch.UIKit.UITableViewSource.CommitEditingStyle(MonoTouch.UIKit.UITableView,MonoTouch.UIKit.UITableViewCellEditingStyle,MonoTouch.Foundation.NSIndexPath)" /> is also implemented.</para>
          <para>When the user swipes across a row, the table view's <see cref="P:MonoTouch.UIKit.UITableView.Editing" /> property becomes <see langword="true" /> and a Delete button is shown in the row that was swiped (located at <paramref name="indexPath" />). This method is called to allow the user interface to be updated (for example, to provide a Cancel button to exit editing mode).</para>
          <para>When exiting editing mode (such as after deletion operation), <see cref="M:MonoTouch.UIKit.UITableViewSource.DidEndEditing(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath)" /> is called.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDeselectRow">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSIndexPath WillDeselectRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSIndexPath WillDeselectRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:willDeselectRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">The table involved.</param>
        <param name="indexPath">The index path of the row about to be de-selected.</param>
        <summary>Called prior to the de-selection of a row.</summary>
        <returns>If <see langword="null" />, the row will not be de-selected. If a value other than <paramref name="indexPath" /> requests that another row be de-selected.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDisplay">
      <MemberSignature Language="C#" Value="public virtual void WillDisplay (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UITableViewCell cell, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDisplay(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.UIKit.UITableViewCell cell, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:willDisplayCell:forRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="cell" Type="MonoTouch.UIKit.UITableViewCell" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row.</param>
        <param name="cell">Cell view that is going to be used to draw the row.</param>
        <param name="indexPath">Location of the row.</param>
        <summary>Called just before a cell is rendered for the row specified by <paramref name="indexPath" />.</summary>
        <remarks>
          <para>Use this method to override properties of the cell before it is rendered (such as selection status or background color). After this method has been called, the table view will only modify the Alpha and Frame properties as it animates them (if required).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDisplayFooterView">
      <MemberSignature Language="C#" Value="public virtual void WillDisplayFooterView (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UIView footerView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDisplayFooterView(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.UIKit.UIView footerView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void WillDisplayFooterView (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UIView footerView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDisplayFooterView(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.UIKit.UIView footerView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:willDisplayFooterView:forSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="footerView" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">The <see cref="T:MonoTouch.UIKit.UITableView" /> involved.</param>
        <param name="footerView">The <see cref="T:MonoTouch.UIKit.UIView" /> that will be used as the footer view.</param>
        <param name="section">The table section to which the footer view belongs.</param>
        <summary>Called prior to the display of a footer view for a section.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDisplayHeaderView">
      <MemberSignature Language="C#" Value="public virtual void WillDisplayHeaderView (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UIView headerView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDisplayHeaderView(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.UIKit.UIView headerView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void WillDisplayHeaderView (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UIView headerView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDisplayHeaderView(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.UIKit.UIView headerView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:willDisplayHeaderView:forSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="headerView" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">The <see cref="T:MonoTouch.UIKit.UITableView" /> involved.</param>
        <param name="headerView">The <see cref="T:MonoTouch.UIKit.UIView" /> that will be used as the header view.</param>
        <param name="section">The table section to which the header view belongs.</param>
        <summary>Called prior to the display of a header view for a section.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillEndDragging" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void WillEndDragging (MonoTouch.UIKit.UIScrollView scrollView, System.Drawing.PointF velocity, ref System.Drawing.PointF targetContentOffset);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WillEndDragging(class MonoTouch.UIKit.UIScrollView scrollView, valuetype System.Drawing.PointF velocity, valuetype System.Drawing.PointF targetContentOffset) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public override void WillEndDragging (MonoTouch.UIKit.UIScrollView scrollView, MonoTouch.CoreGraphics.CGPoint velocity, ref MonoTouch.CoreGraphics.CGPoint targetContentOffset);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void WillEndDragging(class MonoTouch.UIKit.UIScrollView scrollView, valuetype MonoTouch.CoreGraphics.CGPoint velocity, valuetype MonoTouch.CoreGraphics.CGPoint targetContentOffset) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewWillEndDragging:withVelocity:targetContentOffset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
        <Parameter Name="velocity" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="targetContentOffset" Type="System.Drawing.PointF&amp;" RefType="ref" apistyle="classic" />
        <Parameter Name="velocity" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
        <Parameter Name="targetContentOffset" Type="MonoTouch.CoreGraphics.CGPoint&amp;" RefType="ref" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="scrollView">Scroll view subclass where user touch ended.</param>
        <param name="velocity">The velocity of the scroll view (in points) when the touch ended.</param>
        <param name="targetContentOffset">The expected offset when the scrolling action decelerates to a stop.</param>
        <summary>Called when the user finishes scrolling the content.</summary>
        <remarks>
          <para>The <see langword="ref" /> parameter <paramref name="targetContentOffset" /> can be modified in this method to adjust where the scroll view ends its scrolling animation.</para>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillSelectRow">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSIndexPath WillSelectRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSIndexPath WillSelectRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:willSelectRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row.</param>
        <param name="indexPath">Location of the row about to be selected.</param>
        <summary>Called when a row is about to be selected.</summary>
        <returns>The <see cref="T:MonoTouch.Foundation.NSIndexPath" /> of the row to be selected. Return the <paramref name="indexPath" /> that was passed in to select that row, return an alternate <see cref="T:MonoTouch.Foundation.NSIndexPath" /> to select a different row, or return <see langword="null" /> to cancel selection.</returns>
        <remarks>
          <para>This method is called after a row is selected (ie. the user has performed a touch-up on the row). Although rows are highlighted on touch-down, this does not indication selection has occurred. Use <see cref="F:MonoTouch.UIKit.UITableViewCellSelectionStyle.None" /> to prevent the cell becoming highlighted on touch-down.</para>
          <para>This method is not called when the table view's <see cref="P:MonoTouch.UIKit.UITableView.Editing" /> property is <see langword="true" /> unless <see cref="P:MonoTouch.UIKit.UITableView.AllowsSelectionDuringEditing" /> property is also <see langword="true" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomingEnded" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void ZoomingEnded (MonoTouch.UIKit.UIScrollView scrollView, MonoTouch.UIKit.UIView withView, float atScale);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ZoomingEnded(class MonoTouch.UIKit.UIScrollView scrollView, class MonoTouch.UIKit.UIView withView, float32 atScale) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public override void ZoomingEnded (MonoTouch.UIKit.UIScrollView scrollView, MonoTouch.UIKit.UIView withView, nfloat atScale);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ZoomingEnded(class MonoTouch.UIKit.UIScrollView scrollView, class MonoTouch.UIKit.UIView withView, valuetype System.nfloat atScale) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewDidEndZooming:withView:atScale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
        <Parameter Name="withView" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="atScale" Type="System.Single" apistyle="classic" />
        <Parameter Name="atScale" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="scrollView">Scroll view subclass containing the content being zoomed.</param>
        <param name="withView">View representing the content that needs to be scaled.</param>
        <param name="atScale">The scale factor to use. This value must be between the limits set by the <see cref="T:MonoTouch.UIKit.UIScrollView" /> properties <see cref="P:MonoTouch.UIKit.UIScrollView.MinimumZoomScale" /> and <see cref="P:MonoTouch.UIKit.UIScrollView.MaximumZoomScale" />.</param>
        <summary>Called when content zooming is complete.</summary>
        <remarks>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomingStarted" apistyle="classic">
      <MemberSignature Language="C#" Value="public override void ZoomingStarted (MonoTouch.UIKit.UIScrollView scrollView, MonoTouch.UIKit.UIView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ZoomingStarted(class MonoTouch.UIKit.UIScrollView scrollView, class MonoTouch.UIKit.UIView view) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollViewWillBeginZooming:withView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(3, 2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="MonoTouch.UIKit.UIScrollView" />
        <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="scrollView">Scroll view subclass containing the content.</param>
        <param name="view">The content view about to be zoomed.</param>
        <summary>Called when a zooming operation is about to start.</summary>
        <remarks>
          <para>This method is inherited from <see cref="T:MonoTouch.UIKit.UIScrollViewDelegate" /></para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
