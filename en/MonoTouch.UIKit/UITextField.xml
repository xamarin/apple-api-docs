<Type Name="UITextField" FullName="MonoTouch.UIKit.UITextField">
  <TypeSignature Language="C#" Value="public class UITextField : MonoTouch.UIKit.UIControl, IDisposable, MonoTouch.UIKit.IUITextInput" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UITextField extends MonoTouch.UIKit.UIControl implements class MonoTouch.ObjCRuntime.INativeObject, class MonoTouch.UIKit.IUIKeyInput, class MonoTouch.UIKit.IUITextInput, class MonoTouch.UIKit.IUITextInputTraits, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.UIKit.UIControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.UIKit.IUITextInput</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UITextField", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A text entry control.</summary>
    <remarks>
      <para>
   The MonoTouch API supports two styles of event notification: the Objective-C style that uses a delegate class or the C# style using event notifications.  
</para>
      <para>
   The C# style allows the user to add or remove event handlers at runtime by assigning to the events of properties of this class.    Event handlers can be anyone of a method, an anonymous methods or a lambda expression.  Using the C# style events or properties will override any manual settings to the Objective-C Delegate or WeakDelegate settings.
</para>
      <para>The Objective-C style requires the user to create a new class derived from <see cref="T:MonoTouch.UIKit.UITextFieldDelegate" /> class and assign it to the <see cref="P:MonoTouch.UIKit.Delegate" /> property.   Alternatively, for low-level control, by creating a class derived from <see cref="T:MonoTouch.Foundation.NSObject" /> which has every entry point properly decorated with an [Export] attribute.   The instance of this object can then be assigned to the <see cref="P:MonoTouch.UIKit.UITextField.WeakDelegate" /> property.   
</para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=23a2571b-45eb-4889-bb67-d88937cb68c1">monocatalog</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextField_Class/index.html">Apple documentation for <c>UITextField</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextField ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextField (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextField (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UITextField (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextField (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UITextField (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextField (System.Drawing.RectangleF frame);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF frame) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public UITextField (MonoTouch.CoreGraphics.CGRect frame);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MonoTouch.CoreGraphics.CGRect frame) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="frame" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UITextField with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of UITextField with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustsFontSizeToFitWidth">
      <MemberSignature Language="C#" Value="public virtual bool AdjustsFontSizeToFitWidth { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AdjustsFontSizeToFitWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("adjustsFontSizeToFitWidth")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAdjustsFontSizeToFitWidth:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A <see cref="System.Boolean" /> that controls if the font should be scaled down to ensure the text fits in the control.</summary>
        <value>Default value is <see langword="false" />.</value>
        <remarks>If this property is set to <see langword="true" />, then the control will reduce the size of the font so that all the text can be displayed in the control or font reaches the <see cref="P:MonoTouch.UIKit.UITextField.MinimumFontSize" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsEditingTextAttributes">
      <MemberSignature Language="C#" Value="public virtual bool AllowsEditingTextAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsEditingTextAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("allowsEditingTextAttributes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAllowsEditingTextAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether text entered or pasted can change the attributes of the content.</summary>
        <value>The default value is <see langword="false" />.</value>
        <remarks>
          <para>If <see langword="true" />, the user can edit style attributes and styled text that is pasted into the <see cref="T:MonoTouch.UIKit.UITextField" /> will retain characteristics. If <see langword="false" />, text styling is solely a programmatic feature.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextField.UITextFieldAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UITextField/UITextFieldAppearance Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextField+UITextFieldAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UITextField.</para>
          <para>If you want to control the appearance of subclasses of UITextField, use the <see cref="M:MonoTouch.UIKit.UITextField.GetAppearance" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextField.UITextFieldAppearance AppearanceWhenContainedIn (Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextField/UITextFieldAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextField+UITextFieldAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that you want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that you can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where you can set appearance properties for instances of UITextField when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If you want to control the appearance of subclasses of UITextField, use the <see cref="M:MonoTouch.UIKit.UITextField.GetAppearance" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#">
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
</code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:MonoTouch.UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributedPlaceholder">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSAttributedString AttributedPlaceholder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSAttributedString AttributedPlaceholder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("attributedPlaceholder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAttributedPlaceholder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the contents of the placeholder as an attributed string.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <example>
            <code lang="C#"><![CDATA[
myLogin.AttributedPlaceholder = new NSAttributedString (
    "Enter your credentials",
    font: UIFont.FromName ("HoeflerText-Regular", 24.0f),
    foregroundColor: UIColor.Red,
    strokeWidth: 4
);
	]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributedText">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSAttributedString AttributedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSAttributedString AttributedText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("attributedText")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAttributedText:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Sets the contents of the text field using an attributed string.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <example>
            <code lang="C#"><![CDATA[
myTextField.AttributedText = new NSAttributedString (
    "Hello, World",
    font: UIFont.FromName ("HoeflerText-Regular", 24.0f),
    foregroundColor: UIColor.Red,
    strokeWidth: 4
);
	]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutocapitalizationType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextAutocapitalizationType AutocapitalizationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextAutocapitalizationType AutocapitalizationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("autocapitalizationType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAutocapitalizationType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextAutocapitalizationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property controls how words should be capitalized by the system during user input.</summary>
        <value>The default value is <see cref="E:MonoTouch.UIKit.UITextAutocapitalizationType.Sentences" /></value>
        <remarks>To be added. </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutocorrectionType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextAutocorrectionType AutocorrectionType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextAutocorrectionType AutocorrectionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("autocorrectionType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAutocorrectionType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextAutocorrectionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property controls how auto-correction should be applied by the system during user input.</summary>
        <value>The default value is <see cref="E:MonoTouch.UIKit.UITextAutocorrectionType.Default" /></value>
        <remarks>To be added. </remarks>
      </Docs>
    </Member>
    <Member MemberName="Background">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImage Background { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIImage Background" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("background")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setBackground:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property contains the image that will be displayed in the background of the control when it is enabled.</summary>
        <value>
        </value>
        <remarks>Background images are drawn in the border rectangle portion of the control.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginFloatingCursor">
      <MemberSignature Language="C#" Value="public virtual void BeginFloatingCursor (System.Drawing.PointF point);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginFloatingCursor(valuetype System.Drawing.PointF point) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void BeginFloatingCursor (MonoTouch.CoreGraphics.CGPoint point);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginFloatingCursor(valuetype MonoTouch.CoreGraphics.CGPoint point) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("beginFloatingCursorAtPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginningOfDocument">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition BeginningOfDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextPosition BeginningOfDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("beginningOfDocument")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the text position that is the start of the document. Read-only.</summary>
        <value>Beginning text position of type <see cref="T:MonoTouch.UIKit.UITextPosition" />.
        </value>
        <remarks>To be added. </remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderRect">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF BorderRect (System.Drawing.RectangleF forBounds);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF BorderRect(valuetype System.Drawing.RectangleF forBounds) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect BorderRect (MonoTouch.CoreGraphics.CGRect forBounds);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect BorderRect(valuetype MonoTouch.CoreGraphics.CGRect forBounds) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("borderRectForBounds:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBounds" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="forBounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="forBounds">The bounding rectangle.</param>
        <summary>Returns the border rectangle.</summary>
        <returns>
        </returns>
        <remarks>Do not call this method directly. It is used to provide a different border rectangle for a control.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BorderStyle">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextBorderStyle BorderStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextBorderStyle BorderStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("borderStyle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setBorderStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextBorderStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The border style.</summary>
        <value>Border style of type <see cref="T:MonoTouch.UIKit.UITextBorderStyle" />.
        </value>
        <remarks>Any custom background image associated with the control will be ignored if the value of this property is set to <see cref="F:MonoTouch.UIKit.UITextBorderStyle.RoundedRect" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearButtonMode">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextFieldViewMode ClearButtonMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextFieldViewMode ClearButtonMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("clearButtonMode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setClearButtonMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextFieldViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property controls when the 'clear' button appears in the text field.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearButtonRect">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF ClearButtonRect (System.Drawing.RectangleF forBounds);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF ClearButtonRect(valuetype System.Drawing.RectangleF forBounds) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect ClearButtonRect (MonoTouch.CoreGraphics.CGRect forBounds);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect ClearButtonRect(valuetype MonoTouch.CoreGraphics.CGRect forBounds) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("clearButtonRectForBounds:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBounds" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="forBounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="forBounds">The bounding rectangle.</param>
        <summary>Returns a rectangle for drawing the 'clear' button.</summary>
        <returns>
        </returns>
        <remarks>Do not call this method directly. This method is provided to allow the 'clear' button to be placed in a different location. Subclasses of <see cref="T:MonoTouch.UIKit.UITextField" /> that override this property should still call the <see langword="base" /> method and modify the original returned rectangle.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearsOnBeginEditing">
      <MemberSignature Language="C#" Value="public virtual bool ClearsOnBeginEditing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClearsOnBeginEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("clearsOnBeginEditing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setClearsOnBeginEditing:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property indicates if the control will delete any existing text before editing.</summary>
        <value>
        </value>
        <remarks>If <see langword="true" />, then existing text will be cleared when the control is selected for input.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearsOnInsertion">
      <MemberSignature Language="C#" Value="public virtual bool ClearsOnInsertion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClearsOnInsertion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("clearsOnInsertion")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setClearsOnInsertion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether a paste operation should replace existing content.</summary>
        <value>The default is <see langword="false" />.</value>
        <remarks>If <see langword="true" />, the selection UI is hidden and a post operation replaces the existing content.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparePosition">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSComparisonResult ComparePosition (MonoTouch.UIKit.UITextPosition first, MonoTouch.UIKit.UITextPosition second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.Foundation.NSComparisonResult ComparePosition(class MonoTouch.UIKit.UITextPosition first, class MonoTouch.UIKit.UITextPosition second) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("comparePosition:toPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="second" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="first">The first  location in a document.</param>
        <param name="second">The second location in a document.</param>
        <summary>Returns a value that shows how one location in a document that compares to another location: before, identical, or after.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentInputModeDidChangeNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString CurrentInputModeDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString CurrentInputModeDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextInputCurrentInputModeDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for CurrentInputModeDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:MonoTouch.Foundation.NSNotificationCenter" /> to register a listener for this notification.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (UITextField.CurrentInputModeDidChangeNotification, (notification) => Console.WriteLine ("Received the notification UITextField", notification);


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextField", notification);
}
void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextField.CurrentInputModeDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
      <!-- BUGBUG/TODO, look at this orphan: DataDetectorTypes -->
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextFieldDelegate Delegate { get; set; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextFieldDelegate Delegate" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.IUITextFieldDelegate Delegate { get; set; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.IUITextFieldDelegate Delegate" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">MonoTouch.UIKit.UITextFieldDelegate</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.UIKit.IUITextFieldDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the MonoTouch.UIKit.UITextFieldDelegate model class which acts as the class delegate.</summary>
        <value>
          <para>The instance of the MonoTouch.UIKit.UITextFieldDelegate model class</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, use the WeakDelegate property instead if you want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBackward">
      <MemberSignature Language="C#" Value="public virtual void DeleteBackward ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteBackward() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("deleteBackward")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method will delete one character backward of the cursor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DictationRecognitionFailed">
      <MemberSignature Language="C#" Value="public virtual void DictationRecognitionFailed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DictationRecognitionFailed() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("dictationRecognitionFailed")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 1, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method is called when dictation has completed and failed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DictationRecordingDidEnd">
      <MemberSignature Language="C#" Value="public virtual void DictationRecordingDidEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DictationRecordingDidEnd() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("dictationRecordingDidEnd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 1, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called when dictation finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisabledBackground">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImage DisabledBackground { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIImage DisabledBackground" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("disabledBackground")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDisabledBackground:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The image to display in the background when the control is disabled.</summary>
        <value>
        </value>
        <remarks>Background images are drawn in the border rectangle portion of the control.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UITextField object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UITextField class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the UITextField ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPlaceholder">
      <MemberSignature Language="C#" Value="public virtual void DrawPlaceholder (System.Drawing.RectangleF rect);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPlaceholder(valuetype System.Drawing.RectangleF rect) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void DrawPlaceholder (MonoTouch.CoreGraphics.CGRect rect);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPlaceholder(valuetype MonoTouch.CoreGraphics.CGRect rect) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawPlaceholderInRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle that will hold the placeholder text.</param>
        <summary>Will draw the placeholder text in the provided rectangle.</summary>
        <remarks>Do not call this method directly. It is provided to custom the location of the placeholder text. Subclasses of <see cref="T:MonoTouch.UIKit.UITextField" /> that override this property should still call the <see langword="base" /> method and modify the original returned rectangle. If the subclass renders the text itself, then the <see langword="base" /> method should not be called.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawText">
      <MemberSignature Language="C#" Value="public virtual void DrawText (System.Drawing.RectangleF rect);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawText(valuetype System.Drawing.RectangleF rect) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void DrawText (MonoTouch.CoreGraphics.CGRect rect);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawText(valuetype MonoTouch.CoreGraphics.CGRect rect) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawTextInRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle that will hold the text.</param>
        <summary>Will draw the text in the provided rectangle.</summary>
        <remarks>Do not call this method directly. It is provided to custom the location of the text. Subclasses of <see cref="T:MonoTouch.UIKit.UITextField" /> that override this property should still call the <see langword="base" /> method and modify the original returned rectangle. If the subclass renders the text itself, then the <see langword="base" /> method should not be called.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingRect">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF EditingRect (System.Drawing.RectangleF forBounds);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF EditingRect(valuetype System.Drawing.RectangleF forBounds) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect EditingRect (MonoTouch.CoreGraphics.CGRect forBounds);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect EditingRect(valuetype MonoTouch.CoreGraphics.CGRect forBounds) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("editingRectForBounds:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBounds" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="forBounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="forBounds">The bounding rectangle.</param>
        <summary>Returns the rectangle to display the editable text.</summary>
        <returns>The rectangle in which text can be edited</returns>
        <remarks>Do not call this method directly. Do not call this method directly. It is provided to customize the location of the editing rectangle.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablesReturnKeyAutomatically">
      <MemberSignature Language="C#" Value="public virtual bool EnablesReturnKeyAutomatically { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablesReturnKeyAutomatically" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("enablesReturnKeyAutomatically")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setEnablesReturnKeyAutomatically:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A value that control if the return key is automatically enabled.</summary>
        <value>
        </value>
        <remarks>If the value of this property is <see langword="true" />, then the return key is disabled when there is no text in the view.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ended">
      <MemberSignature Language="C#" Value="public event EventHandler Ended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Ended" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when editing has ended.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="EndFloatingCursor">
      <MemberSignature Language="C#" Value="public virtual void EndFloatingCursor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndFloatingCursor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("endFloatingCursor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfDocument">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition EndOfDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextPosition EndOfDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("endOfDocument")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The text position for the end of the document.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFont Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIFont Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("font")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setFont:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font to use for displaying the text.</summary>
        <value>
        </value>
        <remarks>The same font is used for the both the text and the placeholder text. The default is 12 point Helvetica plain.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextField.UITextFieldAppearance GetAppearance (MonoTouch.UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextField/UITextFieldAppearance GetAppearance(class MonoTouch.UIKit.UITraitCollection traits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextField+UITextFieldAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextField.UITextFieldAppearance GetAppearance (MonoTouch.UIKit.UITraitCollection traits, Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextField/UITextFieldAppearance GetAppearance(class MonoTouch.UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextField+UITextFieldAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextField.UITextFieldAppearance GetAppearance&lt;T&gt; () where T : MonoTouch.UIKit.UITextField;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextField/UITextFieldAppearance GetAppearance&lt;(class MonoTouch.UIKit.UITextField) T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextField+UITextFieldAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UITextField.</typeparam>
        <summary>
          <para>Obtains the appearance proxy <see cref="T:MonoTouch.UIKit.UITextField.UITextFieldAppearance" /> for the subclass of UITextField.</para>
        </summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:MonoTouch.UIKit.UITextField.Appearance" /> property, or the <see cref="M:MonoTouch.UIKit.UITextFieldAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#">
var myTheme = UITextField.GetAppearance&lt;MyUITextFieldSubclass&gt; ();
myTheme.TintColor = UIColor.Red;
</code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:MonoTouch.UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextField.UITextFieldAppearance GetAppearance&lt;T&gt; (MonoTouch.UIKit.UITraitCollection traits) where T : MonoTouch.UIKit.UITextField;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextField/UITextFieldAppearance GetAppearance&lt;(class MonoTouch.UIKit.UITextField) T&gt;(class MonoTouch.UIKit.UITraitCollection traits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextField+UITextFieldAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UITextField.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>
          <para>Obtains the appearance proxy <see cref="T:MonoTouch.UIKit.UITextField.UITextFieldAppearance" /> for the subclass of UITextField.</para>
        </summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where you can set appearance properties for instances of UITextField.</para>
          <para>Unlike the <see cref="P:MonoTouch.UIKit.UITextField.Appearance" /> property, or the <see cref="M:MonoTouch.UIKit.UITextFieldAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#">
var myTheme = UITextField.GetAppearance&lt;MyUITextFieldSubclass&gt; (myTraits, );
myTheme.TintColor = UIColor.Red;
</code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:MonoTouch.UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextField.UITextFieldAppearance GetAppearance&lt;T&gt; (MonoTouch.UIKit.UITraitCollection traits, Type[] containers) where T : MonoTouch.UIKit.UITextField;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextField/UITextFieldAppearance GetAppearance&lt;(class MonoTouch.UIKit.UITextField) T&gt;(class MonoTouch.UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextField+UITextFieldAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>MonoTouch.UIKit.UITextField</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UITextField.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that you want to have as the containers to apply this particular appearance.</param>
        <summary>
          <para>Obtains the appearance proxy <see cref="T:MonoTouch.UIKit.UITextField.UITextFieldAppearance" /> for the subclass of UITextField that has the specified trait collection when the view is hosted in the specified hierarchy.</para>
        </summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where you can set appearance properties for instances of UITextField that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:MonoTouch.UIKit.UITextField.Appearance" /> property, or the <see cref="M:MonoTouch.UIKit.UITextFieldAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#">
var myTheme = UITextField.GetAppearance&lt;MyUITextFieldSubclass&gt; (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
</code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:MonoTouch.UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextField.UITextFieldAppearance GetAppearance&lt;T&gt; (MonoTouch.UIKit.UITraitCollection traits, Type[] containers) where T : MonoTouch.UIKit.UITextField;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextField/UITextFieldAppearance GetAppearance&lt;(class MonoTouch.UIKit.UITextField) T&gt;(class MonoTouch.UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextField+UITextFieldAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>MonoTouch.UIKit.UITextField</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UITextField.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that you want to have as the containers to apply this particular appearance.</param>
        <summary>
          <para>Obtains the appearance proxy <see cref="T:MonoTouch.UIKit.UITextField.UITextFieldAppearance" /> for the subclass of UITextField that has the specified trait collection when the view is hosted in the specified hierarchy.</para>
        </summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where you can set appearance properties for instances of UITextField that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:MonoTouch.UIKit.UITextField.Appearance" /> property, or the <see cref="M:MonoTouch.UIKit.UITextFieldAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#">
var myTheme = UITextField.GetAppearance&lt;MyUITextFieldSubclass&gt; (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
</code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:MonoTouch.UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseWritingDirection">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextWritingDirection GetBaseWritingDirection (MonoTouch.UIKit.UITextPosition forPosition, MonoTouch.UIKit.UITextStorageDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.UITextWritingDirection GetBaseWritingDirection(class MonoTouch.UIKit.UITextPosition forPosition, valuetype MonoTouch.UIKit.UITextStorageDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("baseWritingDirectionForPosition:inDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextWritingDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="direction" Type="MonoTouch.UIKit.UITextStorageDirection" />
      </Parameters>
      <Docs>
        <param name="forPosition">The location in a document.</param>
        <param name="direction">The direction of storage.</param>
        <summary>Determines the writing direction from a position within the text.</summary>
        <returns>The writing direction (i.e. left-to-right, or right-to-left)</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCaretRectForPosition">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF GetCaretRectForPosition (MonoTouch.UIKit.UITextPosition position);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetCaretRectForPosition(class MonoTouch.UIKit.UITextPosition position) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect GetCaretRectForPosition (MonoTouch.UIKit.UITextPosition position);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect GetCaretRectForPosition(class MonoTouch.UIKit.UITextPosition position) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("caretRectForPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="position">A location in the document to draw a rectangle at.</param>
        <summary>This method will return a rectangle that can be used for drawing the insertion caret.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterOffsetOfPosition">
      <MemberSignature Language="C#" Value="public virtual int GetCharacterOffsetOfPosition (MonoTouch.UIKit.UITextPosition position, MonoTouch.UIKit.UITextRange range);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharacterOffsetOfPosition(class MonoTouch.UIKit.UITextPosition position, class MonoTouch.UIKit.UITextRange range) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint GetCharacterOffsetOfPosition (MonoTouch.UIKit.UITextPosition position, MonoTouch.UIKit.UITextRange range);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetCharacterOffsetOfPosition(class MonoTouch.UIKit.UITextPosition position, class MonoTouch.UIKit.UITextRange range) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("characterOffsetOfPosition:withinRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="position">A location in the text.</param>
        <param name="range">The range of text in a document.</param>
        <summary>Returns the number of characters in some text between <paramref name="position" /> and the start of the <paramref name="range" />.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange GetCharacterRange (MonoTouch.UIKit.UITextPosition byExtendingPosition, MonoTouch.UIKit.UITextLayoutDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetCharacterRange(class MonoTouch.UIKit.UITextPosition byExtendingPosition, valuetype MonoTouch.UIKit.UITextLayoutDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("characterRangeByExtendingPosition:inDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byExtendingPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="direction" Type="MonoTouch.UIKit.UITextLayoutDirection" />
      </Parameters>
      <Docs>
        <param name="byExtendingPosition">A location in some text.</param>
        <param name="direction">The direction of the layout.</param>
        <summary>Returns a range that represents the distance from <paramref name="byExtendingPosition" /> to as far as is possible in <paramref name="direction" />.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRangeAtPoint">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint (System.Drawing.PointF point);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint(valuetype System.Drawing.PointF point) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint (MonoTouch.CoreGraphics.CGPoint point);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint(valuetype MonoTouch.CoreGraphics.CGPoint point) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("characterRangeAtPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">A point within the control.</param>
        <summary>Returns the character or characters at the point specified.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClosestPositionToPoint">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (System.Drawing.PointF point);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype System.Drawing.PointF point) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (MonoTouch.CoreGraphics.CGPoint point);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype MonoTouch.CoreGraphics.CGPoint point) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("closestPositionToPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">A point within the control.</param>
        <summary>Returns the position that is closest to the point specified within the control.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClosestPositionToPoint">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (System.Drawing.PointF point, MonoTouch.UIKit.UITextRange withinRange);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype System.Drawing.PointF point, class MonoTouch.UIKit.UITextRange withinRange) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (MonoTouch.CoreGraphics.CGPoint point, MonoTouch.UIKit.UITextRange withinRange);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype MonoTouch.CoreGraphics.CGPoint point, class MonoTouch.UIKit.UITextRange withinRange) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("closestPositionToPoint:withinRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="withinRange" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">A point within the control.</param>
        <param name="withinRange">The range of text within in the control.</param>
        <summary>Returns the position in <paramref name="withinRange" /> that is closest to <paramref name="withinRange" />.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstRectForRange">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF GetFirstRectForRange (MonoTouch.UIKit.UITextRange range);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetFirstRectForRange(class MonoTouch.UIKit.UITextRange range) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect GetFirstRectForRange (MonoTouch.UIKit.UITextRange range);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect GetFirstRectForRange(class MonoTouch.UIKit.UITextRange range) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("firstRectForRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">A range of text in the control.</param>
        <summary>Returns a rectangle that will enclose the first line of text in the <paramref name="range" /> (if the range specifies multiple lines of text).</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFrameForDictationResultPlaceholder">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF GetFrameForDictationResultPlaceholder (MonoTouch.Foundation.NSObject placeholder);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetFrameForDictationResultPlaceholder(class MonoTouch.Foundation.NSObject placeholder) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect GetFrameForDictationResultPlaceholder (MonoTouch.Foundation.NSObject placeholder);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect GetFrameForDictationResultPlaceholder(class MonoTouch.Foundation.NSObject placeholder) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("frameForDictationResultPlaceholder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="placeholder" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="placeholder">The value returned from <see cref="M:MonoTouch.UIKit.UITextField.InsertDictationResultPlaceholder" />.</param>
        <summary>The frame in which the dictation results should be displayed.</summary>
        <returns>The rectangle in which the dictation placeholder animation will display.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOffsetFromPosition">
      <MemberSignature Language="C#" Value="public virtual int GetOffsetFromPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextPosition toPosition);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetOffsetFromPosition(class MonoTouch.UIKit.UITextPosition fromPosition, class MonoTouch.UIKit.UITextPosition toPosition) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint GetOffsetFromPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextPosition toPosition);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetOffsetFromPosition(class MonoTouch.UIKit.UITextPosition fromPosition, class MonoTouch.UIKit.UITextPosition toPosition) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("offsetFromPosition:toPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="toPosition" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="fromPosition">A location within the document.</param>
        <param name="toPosition">A second location within document.</param>
        <summary>Returns the number of characters between two visible locations in a document.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, int offset);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, int32 offset) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, nint offset);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, valuetype System.nint offset) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionFromPosition:offset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="offset" Type="System.Int32" apistyle="classic" />
        <Parameter Name="offset" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="fromPosition">A position within a document.</param>
        <param name="offset">A positive or negative character offset relative to <paramref name="fromPosition" />.</param>
        <summary>Returns a second position that is offset from the specified position.</summary>
        <returns>
        </returns>
        <remarks>May be <see langword="null" /> if the computed position is less than zero or greater than the length of the text in the document.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextRange withinRange, int atCharacterOffset);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextRange withinRange, int32 atCharacterOffset) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextRange withinRange, nint atCharacterOffset);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextRange withinRange, valuetype System.nint atCharacterOffset) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionWithinRange:atCharacterOffset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withinRange" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="atCharacterOffset" Type="System.Int32" apistyle="classic" />
        <Parameter Name="atCharacterOffset" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="withinRange">A range of text in a document.</param>
        <param name="atCharacterOffset">An offset relative to the start of the <paramref name="withinRange" />.</param>
        <summary>Returns a position within a document relative to the start of <paramref name="withinRange" />.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextLayoutDirection inDirection, int offset);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, valuetype MonoTouch.UIKit.UITextLayoutDirection inDirection, int32 offset) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextLayoutDirection inDirection, nint offset);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, valuetype MonoTouch.UIKit.UITextLayoutDirection inDirection, valuetype System.nint offset) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionFromPosition:inDirection:offset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="inDirection" Type="MonoTouch.UIKit.UITextLayoutDirection" />
        <Parameter Name="offset" Type="System.Int32" apistyle="classic" />
        <Parameter Name="offset" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="fromPosition">The first position.</param>
        <param name="inDirection">The direction to calculate the offset from.</param>
        <param name="offset">The offset to use.</param>
        <summary>Returns a second position in a document the direction and <paramref name="offset" /> relative to the first position. </summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionWithinRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPositionWithinRange (MonoTouch.UIKit.UITextRange range, MonoTouch.UIKit.UITextLayoutDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPositionWithinRange(class MonoTouch.UIKit.UITextRange range, valuetype MonoTouch.UIKit.UITextLayoutDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionWithinRange:farthestInDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="direction" Type="MonoTouch.UIKit.UITextLayoutDirection" />
      </Parameters>
      <Docs>
        <param name="range">A range of text in the document.</param>
        <param name="direction">The direction of the layout.</param>
        <summary>Returns the furthest position possible in the visible text.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelectionRects">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextSelectionRect[] GetSelectionRects (MonoTouch.UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextSelectionRect[] GetSelectionRects(class MonoTouch.UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("selectionRectsForRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextSelectionRect[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">The <see cref="T:MonoTouch.UIKit.UITextRange" /> for which the selection rectangles are desired.</param>
        <summary>An array of <see cref="T:MonoTouch.UIKit.UITextSelectionRect" />s that frame the <paramref name="range" />.</summary>
        <returns>An array (possibly empty) of the <see cref="T:MonoTouch.UIKit.UITextSelectionRect" />s in the <paramref name="range" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange GetTextRange (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextPosition toPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetTextRange(class MonoTouch.UIKit.UITextPosition fromPosition, class MonoTouch.UIKit.UITextPosition toPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textRangeFromPosition:toPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="toPosition" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="fromPosition">The start position.</param>
        <param name="toPosition">The end position.</param>
        <summary>Returns the text range between two positions in a document.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextStyling">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary GetTextStyling (MonoTouch.UIKit.UITextPosition atPosition, MonoTouch.UIKit.UITextStorageDirection inDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSDictionary GetTextStyling(class MonoTouch.UIKit.UITextPosition atPosition, valuetype MonoTouch.UIKit.UITextStorageDirection inDirection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textStylingAtPosition:inDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="atPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="inDirection" Type="MonoTouch.UIKit.UITextStorageDirection" />
      </Parameters>
      <Docs>
        <param name="atPosition">A position within a document.</param>
        <param name="inDirection">The direction of the styling.</param>
        <summary>Returns a <see cref="T:MonoTouch.Foundation.NSDictionary" /> of styling properties at the position and in the direction specified.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasText">
      <MemberSignature Language="C#" Value="public virtual bool HasText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("hasText")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A value representing if there is text in the view.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputAccessoryView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView InputAccessoryView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIView InputAccessoryView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 3, 2, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inputAccessoryView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 3, 2, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setInputAccessoryView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 3, 2, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A custom view to display when this control becomes the first responder.</summary>
        <value>
          <para>The default for this value is <see langword="null" />, and no accessory view is displayed.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>Assignment to this property will show an accessory view such as a toolbar on top of the <see cref="P:MonoTouch.UIKit.UITextField.InputView" />. Application developers can use this property to create a toolbar, custom keys, etc. without fully replacing the keyboard.</para>
          <para>
            <img href="UITextField.InputView.png" />
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputDelegate">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextInputDelegate InputDelegate { get; set; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextInputDelegate InputDelegate" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.IUITextInputDelegate InputDelegate { get; set; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.IUITextInputDelegate InputDelegate" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">MonoTouch.UIKit.UITextInputDelegate</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.UIKit.IUITextInputDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The input delegate object for this <see cref="T:MonoTouch.UIKit.UITextField" />.</summary>
        <value>The default value is a system-provided <see cref="T:MonoTouch.UIKit.UITextInputDelegate" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView InputView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIView InputView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 3, 2, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inputView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 3, 2, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setInputView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 3, 2, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A custom view to be used when the control becomes the first responder.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>The default value is <see langword="null" /> and is the standard system keyboard.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertDictationResult">
      <MemberSignature Language="C#" Value="public virtual void InsertDictationResult (MonoTouch.Foundation.NSArray dictationResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertDictationResult(class MonoTouch.Foundation.NSArray dictationResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertDictationResult:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 1, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictationResult" Type="MonoTouch.Foundation.NSArray" />
      </Parameters>
      <Docs>
        <param name="dictationResult">An array of <see cref="T:MonoTouch.UIKit.UIDictationPhrase" /> objects.</param>
        <summary>Used to select a <see cref="T:MonoTouch.UIKit.UIDictationPhrase" /> from a collection of possible phrases.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertDictationResultPlaceholder">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject InsertDictationResultPlaceholder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject InsertDictationResultPlaceholder() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertDictationResultPlaceholder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden, can be used to provide information for <see cref="M:MonoTouch.UIKit.UITextField.GetFrameForDictationResultPlaceholder" />.</summary>
        <returns>Must not return <see langword="null" />.</returns>
        <remarks>
          <para>The intent of this method is to provide location information to <see cref="M:MonoTouch.UIKit.UITextField.GetFrameForDictationResultPlaceholder" />. Application developers who override this method must also override and implement <see cref="M:MonoTouch.UIKit.UITextField.RemoveDictationResultsPlaceholder" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertText">
      <MemberSignature Language="C#" Value="public virtual void InsertText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertText:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to insert.</param>
        <summary>This method will insert text into the view at the position indicated by the cursor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEditing">
      <MemberSignature Language="C#" Value="public virtual bool IsEditing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isEditing")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A value that indicates if the user is editing the text in the view. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <see langword="true" /> if the text is being edited, otherwise <see langword="false" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardAppearance">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIKeyboardAppearance KeyboardAppearance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIKeyboardAppearance KeyboardAppearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("keyboardAppearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setKeyboardAppearance:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIKeyboardAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The style of the keyboard that is used with the view.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIKeyboardType KeyboardType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIKeyboardType KeyboardType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("keyboardType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setKeyboardType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIKeyboardType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type of keyboard to use with the view.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView LeftView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIView LeftView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("leftView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setLeftView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An overlay that is displayed on the left side of the view.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>The overlay will be display in the bounds set by <see cref="P:MonoTouch.UIKit.UITextField.LeftViewRect" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftViewMode">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextFieldViewMode LeftViewMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextFieldViewMode LeftViewMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("leftViewMode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setLeftViewMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextFieldViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A property that determines when the <see cref="P:MonoTouch.UIKit.UITextField.LeftView" /> will be displayed.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftViewRect">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF LeftViewRect (System.Drawing.RectangleF forBounds);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF LeftViewRect(valuetype System.Drawing.RectangleF forBounds) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect LeftViewRect (MonoTouch.CoreGraphics.CGRect forBounds);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect LeftViewRect(valuetype MonoTouch.CoreGraphics.CGRect forBounds) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("leftViewRectForBounds:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBounds" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="forBounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="forBounds">The bounding rectangle of the view.</param>
        <summary>Returns the rectangle in which the <see cref="P:MonoTouch.UIKit.UITextField.LeftView" /> should be displayed.</summary>
        <returns>
        </returns>
        <remarks>Do not call this method directly. It is provided so that subclasses may customize location of the <see cref="P:MonoTouch.UIKit.UITextField.LeftView" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkedTextRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange MarkedTextRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextRange MarkedTextRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("markedTextRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The range of marked text in the document. Read-only.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkedTextStyle">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary MarkedTextStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary MarkedTextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("markedTextStyle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMarkedTextStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A <see cref="T:MonoTouch.Foundation.NSDictionary" /> of attributes describing style of the <see cref="P:MonoTouch.UIKit.UITextField.MarkedTextRange" />.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumFontSize">
      <MemberSignature Language="C#" Value="public virtual float MinimumFontSize { get; set; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MinimumFontSize" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat MinimumFontSize { get; set; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat MinimumFontSize" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("minimumFontSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMinimumFontSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property represents the smallest font size that may be used for the text.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Placeholder">
      <MemberSignature Language="C#" Value="public virtual string Placeholder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Placeholder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("placeholder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPlaceholder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property represents the text to be displayed when there is no text in the view.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaceholderRect">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF PlaceholderRect (System.Drawing.RectangleF forBounds);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF PlaceholderRect(valuetype System.Drawing.RectangleF forBounds) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect PlaceholderRect (MonoTouch.CoreGraphics.CGRect forBounds);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect PlaceholderRect(valuetype MonoTouch.CoreGraphics.CGRect forBounds) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("placeholderRectForBounds:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBounds" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="forBounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="forBounds">The rectangle to draw the placeholder text.</param>
        <summary>This property represents the rectangle that is used to draw the <see cref="P:MonoTouch.UIKet.UITextField.PlaceHolder" /> text.</summary>
        <returns>
        </returns>
        <remarks>Do not call this method directly. Is is provided to allow for customizations of the placeholder rectangle by subclassing <see cref="T:MonoTouch.UIKit.UITextField" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDictationResultPlaceholder">
      <MemberSignature Language="C#" Value="public virtual void RemoveDictationResultPlaceholder (MonoTouch.Foundation.NSObject placeholder, bool willInsertResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveDictationResultPlaceholder(class MonoTouch.Foundation.NSObject placeholder, bool willInsertResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeDictationResultPlaceholder:willInsertResult:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="placeholder" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="willInsertResult" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="placeholder">The placeholder that is no longer needed. Should be an object previously returned by <see cref="M:MonoTouch.UIKit.UITextField.InsertDictationResultPlaceholder" />.</param>
        <param name="willInsertResult">To be added.</param>
        <summary>With <see cref="M:MonoTouch.UIKit.UITextField.InsertDictationResultPlaceholder" />, allows the app developer to customize the location of the placeholder for dictation results.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceText">
      <MemberSignature Language="C#" Value="public virtual void ReplaceText (MonoTouch.UIKit.UITextRange range, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceText(class MonoTouch.UIKit.UITextRange range, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("replaceRange:withText:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="range">The range to replace text.</param>
        <param name="text">The replacement text.</param>
        <summary>Replaces text in the specified range with the text provided.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnKeyType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIReturnKeyType ReturnKeyType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIReturnKeyType ReturnKeyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("returnKeyType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setReturnKeyType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIReturnKeyType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The property is used to get or set the <see cref="T:MonoTouch.UIKit.UIReturnKeyType" /> of the "return" key. The "return" key will display different text depending on this property.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView RightView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIView RightView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("rightView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setRightView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property holds a overlay that will be displayed on the right side of the text field.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>This view is placed in the <see cref="P:MonoTouch.UIKit.UITextField.RightViewRect" />. If this overlap covers the clear button, the clear button will take priority in receiving events. If the RightView contains a control, then the contained controll will receive priority for events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightViewMode">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextFieldViewMode RightViewMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextFieldViewMode RightViewMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("rightViewMode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setRightViewMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextFieldViewMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property controls when the <see cref="P:MonoTouch.UIKit.UITextField.RightView" /> will appear.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightViewRect">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF RightViewRect (System.Drawing.RectangleF forBounds);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF RightViewRect(valuetype System.Drawing.RectangleF forBounds) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect RightViewRect (MonoTouch.CoreGraphics.CGRect forBounds);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect RightViewRect(valuetype MonoTouch.CoreGraphics.CGRect forBounds) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("rightViewRectForBounds:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBounds" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="forBounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="forBounds">The bounding rectangle.</param>
        <summary>This method will return the location of the <see cref="P:MonoTouch.UIKit.UITextField.RightView" />.</summary>
        <returns>
        </returns>
        <remarks>Do not call this method directly. It is provided to allow customizations of the <see cref="P:MonoTouch.UIKite.UITextField.RightView" /> by subclassing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecureTextEntry">
      <MemberSignature Language="C#" Value="public virtual bool SecureTextEntry { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SecureTextEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isSecureTextEntry")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSecureTextEntry:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property controls if the text being displayed should be hidden.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedTextRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange SelectedTextRange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextRange SelectedTextRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("selectedTextRange")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSelectedTextRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property returns the range of text that is selected.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionAffinity">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextStorageDirection SelectionAffinity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextStorageDirection SelectionAffinity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("selectionAffinity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSelectionAffinity:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextStorageDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBaseWritingDirectionforRange">
      <MemberSignature Language="C#" Value="public virtual void SetBaseWritingDirectionforRange (MonoTouch.UIKit.UITextWritingDirection writingDirection, MonoTouch.UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBaseWritingDirectionforRange(valuetype MonoTouch.UIKit.UITextWritingDirection writingDirection, class MonoTouch.UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setBaseWritingDirection:forRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writingDirection" Type="MonoTouch.UIKit.UITextWritingDirection" />
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="writingDirection">The writing direction.</param>
        <param name="range">The range of text in the document.</param>
        <summary>Sets the writing direction for a given range of text.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMarkedText">
      <MemberSignature Language="C#" Value="public virtual void SetMarkedText (string markedText, MonoTouch.Foundation.NSRange selectedRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMarkedText(string markedText, valuetype MonoTouch.Foundation.NSRange selectedRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setMarkedText:selectedRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="markedText" Type="System.String" />
        <Parameter Name="selectedRange" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="markedText">The text to insert.</param>
        <param name="selectedRange">The selected text within the <paramref name="markedText" />. </param>
        <summary>This method will replace any existing marked text the specified text and then selects it.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeginEditing">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextFieldCondition ShouldBeginEditing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextFieldCondition ShouldBeginEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextFieldCondition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value />
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldChangeCharacters">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextFieldChange ShouldChangeCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextFieldChange ShouldChangeCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextFieldChange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>A delegate, usually a method, a anonymous method or a lambda function.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldChangeTextInRange">
      <MemberSignature Language="C#" Value="public virtual bool ShouldChangeTextInRange (MonoTouch.UIKit.UITextRange inRange, string replacementText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldChangeTextInRange(class MonoTouch.UIKit.UITextRange inRange, string replacementText) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("shouldChangeTextInRange:replacementText:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inRange" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="replacementText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inRange">Current selection range in which text is changed.</param>
        <param name="replacementText">The replacement text to insert.</param>
        <summary>Allows the app developer to programmatically reject replacement text.</summary>
        <returns>
          <see langword="true" /> if old text is to be replaced by new text; <see langword="false" /> if  replacement operation is to be aborted.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldClear">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextFieldCondition ShouldClear { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextFieldCondition ShouldClear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextFieldCondition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>The delegate/method.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldEndEditing">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextFieldCondition ShouldEndEditing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextFieldCondition ShouldEndEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextFieldCondition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value />
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReturn">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextFieldCondition ShouldReturn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextFieldCondition ShouldReturn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextFieldCondition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>A delegate that holds a method, an anonymous method or a lambda function.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellCheckingType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextSpellCheckingType SpellCheckingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextSpellCheckingType SpellCheckingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("spellCheckingType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSpellCheckingType:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextSpellCheckingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property controls if spell checking will be enabled or disabled during input.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Started" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when editing has started.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("text")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setText:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The text to display.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextAlignment TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textAlignment")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTextAlignment:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>How the <see cref="P:MonoTouch.UIKit.UITextField.Text" /> should be aligned.</summary>
        <value>Values UITextAlignment.Justified and UITextAlignment.Natural are not supported.</value>
        <remarks>The value of this property applies both the the <see cref="P:MonoTouch.UIKit.UITextField.Text" /> and <see cref="P:MonoTouch.UIKit.UITextField.Placeholder" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextBackgroundColorKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextBackgroundColorKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextBackgroundColorKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextInputTextBackgroundColorKey", "UIKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use NSAttributedString.BackgroundColorAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use NSAttributedString.BackgroundColorAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The property holds the key that should be used to retrieve the background color of text from a <see cref="T:MonoTouch.Foundation.NSDictionary" />.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextColor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIColor TextColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIColor TextColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textColor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTextColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The color of the <see cref="P:MonoTouch.UIKit.UITextField.Text" />.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextColorKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextColorKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextColorKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextInputTextColorKey", "UIKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use NSAttributedString.ForegroundColorAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use NSAttributedString.ForegroundColorAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The property holds the key that should be used to retrieve the value of the text color from a <see cref="T:MonoTouch.Foundation.NSDictionary" />.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContentType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString TextContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSString TextContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textContentType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTextContentType:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextDidBeginEditingNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextDidBeginEditingNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextDidBeginEditingNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextFieldTextDidBeginEditingNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for TextDidBeginEditing</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:MonoTouch.Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:UITextField+Notifications" />.<see cref="M:UITextField+Notifications.ObserveTextDidBeginEditingNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = UITextField.Notifications.ObserveTextDidBeginEditing ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextField.Notifications.ObserveTextDidBeginEditing (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="c#">
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UITextField.TextDidBeginEditingNotification, (notification) =&gt; {Console.WriteLine ("Received the notification UITextField", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextField", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextField.TextDidBeginEditingNotification, Callback);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextDidEndEditingNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextDidEndEditingNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextDidEndEditingNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextFieldTextDidEndEditingNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for TextDidEndEditing</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:MonoTouch.Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:UITextField+Notifications" />.<see cref="M:UITextField+Notifications.ObserveTextDidEndEditingNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = UITextField.Notifications.ObserveTextDidEndEditing ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextField.Notifications.ObserveTextDidEndEditing (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="c#">
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UITextField.TextDidEndEditingNotification, (notification) =&gt; {Console.WriteLine ("Received the notification UITextField", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextField", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextField.TextDidEndEditingNotification, Callback);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFieldTextDidChangeNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextFieldTextDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextFieldTextDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextFieldTextDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for TextFieldTextDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:MonoTouch.Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:UITextField+Notifications" />.<see cref="M:UITextField+Notifications.ObserveTextFieldTextDidChangeNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = UITextField.Notifications.ObserveTextFieldTextDidChange ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextField.Notifications.ObserveTextFieldTextDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="c#">
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UITextField.TextFieldTextDidChangeNotification, (notification) =&gt; {Console.WriteLine ("Received the notification UITextField", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextField", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextField.TextFieldTextDidChangeNotification, Callback);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFontKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextFontKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextFontKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextInputTextFontKey", "UIKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use NSAttributedString.FontAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use NSAttributedString.FontAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The property holds the key that should be used to retrieve the value of the font for the text from a <see cref="T:MonoTouch.Foundation.NSDictionary" />.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView TextInputView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIView TextInputView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textInputView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This the view that provides the coordinate system. Read-only.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInRange">
      <MemberSignature Language="C#" Value="public virtual string TextInRange (MonoTouch.UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TextInRange(class MonoTouch.UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textInRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">A range of text.</param>
        <summary>A substring of text in the <paramref name="range" />.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextRect">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF TextRect (System.Drawing.RectangleF forBounds);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF TextRect(valuetype System.Drawing.RectangleF forBounds) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect TextRect (MonoTouch.CoreGraphics.CGRect forBounds);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect TextRect(valuetype MonoTouch.CoreGraphics.CGRect forBounds) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textRectForBounds:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBounds" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="forBounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="forBounds">The bounding rectangle.</param>
        <summary>This method return the computed rectangle for drawing the text.</summary>
        <returns>
        </returns>
        <remarks>Do not call this method directly. It exists to provide customizations by subclassing <see cref="T:MonoTouch.UIKit.UITextField" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tokenizer">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextInputTokenizer Tokenizer { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextInputTokenizer Tokenizer" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.IUITextInputTokenizer Tokenizer { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.IUITextInputTokenizer Tokenizer" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">MonoTouch.UIKit.UITextInputTokenizer</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.UIKit.IUITextInputTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property provides information on the tokenizer that would be used to break up the text into units such as characters, words, lines, and paragraphs.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypingAttributes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary TypingAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary TypingAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("typingAttributes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTypingAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The attribute keys to apply to newly typed text.</summary>
        <value>
          <see langword="null" /> unless the <see cref="T:MonoTouch.UIKit.UITextField" /> is in editing mode. When the selection changes, the <see cref="T:MonoTouch.UIKit.Foundation.NSDictionary" /> is cleared.<para tool="nullallowed">This value can be <see langword="null" />.</para></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnmarkText">
      <MemberSignature Language="C#" Value="public virtual void UnmarkText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnmarkText() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unmarkText")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Any currently marked text is unmarked.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateFloatingCursor">
      <MemberSignature Language="C#" Value="public virtual void UpdateFloatingCursor (System.Drawing.PointF point);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateFloatingCursor(valuetype System.Drawing.PointF point) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void UpdateFloatingCursor (MonoTouch.CoreGraphics.CGPoint point);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateFloatingCursor(valuetype MonoTouch.CoreGraphics.CGPoint point) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("updateFloatingCursorAtPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDefaultTextAttributes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary WeakDefaultTextAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary WeakDefaultTextAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("defaultTextAttributes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDefaultTextAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A reference to the text attributes that does not prevent garbage collection.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>
          <para>The instance that will respond to events and data requests.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakInputDelegate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakInputDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakInputDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inputDelegate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setInputDelegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for inserted text.</summary>
        <value>Automatically assigned at runtime.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakTokenizer">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakTokenizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakTokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("tokenizer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property provides information on the tokenizer that would be used to break up the text into units such as characters, words, lines, and paragraphs.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
