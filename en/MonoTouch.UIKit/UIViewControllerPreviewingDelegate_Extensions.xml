<Type Name="UIViewControllerPreviewingDelegate_Extensions" FullName="MonoTouch.UIKit.UIViewControllerPreviewingDelegate_Extensions">
  <TypeSignature Language="C#" Value="public static class UIViewControllerPreviewingDelegate_Extensions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit UIViewControllerPreviewingDelegate_Extensions extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Extension methods to the <see cref="T:MonoTouch.UIKit.IUIViewControllerPreviewingDelegate" /> interface to support all the methods from the <see cref="T:MonoTouch.UIKit.UIViewControllerPreviewingDelegate" /> protocol.</para>
    </summary>
    <remarks>
      <para>The extension methods for <see cref="T:MonoTouch.UIKit.IUIViewControllerPreviewingDelegate" /> allow developers to treat instances of the interface as having all the optional methods of the original <see cref="T:MonoTouch.UIKit.UIViewControllerPreviewingDelegate" /> protocol.   Since the interface only contains the required members, these extension methods allow developers to call the optional members of the protocol.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CommitViewController">
      <MemberSignature Language="C#" Value="public static void CommitViewController (this MonoTouch.UIKit.IUIViewControllerPreviewingDelegate This, MonoTouch.UIKit.IUIViewControllerPreviewing previewingContext, MonoTouch.UIKit.UIViewController viewControllerToCommit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CommitViewController(class MonoTouch.UIKit.IUIViewControllerPreviewingDelegate This, class MonoTouch.UIKit.IUIViewControllerPreviewing previewingContext, class MonoTouch.UIKit.UIViewController viewControllerToCommit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="This" Type="MonoTouch.UIKit.IUIViewControllerPreviewingDelegate" RefType="this" />
        <Parameter Name="previewingContext" Type="MonoTouch.UIKit.IUIViewControllerPreviewing" />
        <Parameter Name="viewControllerToCommit" Type="MonoTouch.UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="This">The instance on which this extension method operates on.</param>
        <param name="previewingContext">The context in which the 3D Touch is occurring.</param>
        <param name="previewingContext">The context in which the 3D Touch is occurring.</param>
        <param name="viewControllerToCommit">The  to which the app should transfer control.</param>
        <summary>Called when the user performs the 3D Touch "Pop" pressure gesture that begins the transfer to the final UX, which is typically contained in the <paramref name="viewControllerToCommit" />.</summary>
        <remarks>
          <para>On hardware that supports 3D Touch (see <see cref="P:MonoTouch.UIKit.TraitCollection.ForceTouchCapability" />), a strong push activates the transfer to the new UI, which is typically specified by <paramref name="viewControllerToCommit" />. However, the application developer can provide custom UX (for example, to provide a more in-depth editing experience) by passing their desired view controller to <see cref="M:MonoTouch.UIKit.ViewController.ShowViewController" /> inside this method.</para>
          <example>
            <code lang="C#"><![CDATA[
public void CommitViewController (IUIViewControllerPreviewing previewingContext, UIViewController viewControllerToCommit)
{
			ShowViewController (viewControllerToCommit, this);
}
    ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewControllerForPreview">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIViewController GetViewControllerForPreview (this MonoTouch.UIKit.IUIViewControllerPreviewingDelegate This, MonoTouch.UIKit.IUIViewControllerPreviewing previewingContext, MonoTouch.CoreGraphics.CGPoint location);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIViewController GetViewControllerForPreview(class MonoTouch.UIKit.IUIViewControllerPreviewingDelegate This, class MonoTouch.UIKit.IUIViewControllerPreviewing previewingContext, valuetype MonoTouch.CoreGraphics.CGPoint location) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="This" Type="MonoTouch.UIKit.IUIViewControllerPreviewingDelegate" RefType="this" />
        <Parameter Name="previewingContext" Type="MonoTouch.UIKit.IUIViewControllerPreviewing" />
        <Parameter Name="location" Type="MonoTouch.CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="This">The instance on which this extension method operates on.</param>
        <param name="previewingContext">The context in which the 3D Touch is occurring..</param>
        <param name="location">The location where the 3D touch is occurring.</param>
        <summary>Called when the user performs the 3D Touch "Peek" pressure gesture.</summary>
        <returns>The <see cref="T:MonoTouch.UIKit.UIViewController" /> that provides the 3D Touch "Peek" UX.</returns>
        <remarks>
          <para>On hardware that supports 3D Touch (see <see cref="P:MonoTouch.UIKit.TraitCollection.ForceTouchCapability" />), this method is called when the 3D Touch triggers the "Peek" action. </para>
          <para>One feature of 3D Touch is the ability to blur the background except for the element that is the subject of the touch. Application developers control this behavior by to setting the <see cref="P:MonoTouch.UIKit.IUIViewControllingPreviewing.SourceRect" /> to the appropriate that should not be blurred. For instance, in a table, one can prevent the selected cell from blurring by retrieving the cell at the <paramref name="location" /> at which the 3D Touch is occurring and then setting the <see cref="P:MonoTouch.UIKit.IUIViewControllerPreviewing.SourceRect" /> to the <see cref="P:MonoTouch.UIKit.UIView.Frame" /> of the cell:</para>
          <example>
            <code lang="C#"><![CDATA[
// Obtain the index path and the cell that was pressed. (Checks for null not shown.)
var indexPath = TableView.IndexPathForRowAtPoint (location);
var cell = TableView.CellAt (indexPath);
previewingContext.SourceRect = cell.Frame;
    ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>