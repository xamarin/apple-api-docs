<Type Name="IUITextInputTraits" FullName="MonoTouch.UIKit.IUITextInputTraits">
  <TypeSignature Language="C#" Value="public interface IUITextInputTraits : IDisposable, MonoTouch.ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUITextInputTraits implements class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol(Name="UITextInputTraits", WrapperType=typeof(MonoTouch.UIKit.UITextInputTraitsWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(ArgumentSemantic=MonoTouch.ObjCRuntime.ArgumentSemantic.None, GetterSelector="autocapitalizationType", IsProperty=true, IsRequired=true, IsStatic=false, Name="AutocapitalizationType", PropertyType=typeof(MonoTouch.UIKit.UITextAutocapitalizationType), Selector="autocapitalizationType", SetterSelector="setAutocapitalizationType:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(ArgumentSemantic=MonoTouch.ObjCRuntime.ArgumentSemantic.None, GetterSelector="autocorrectionType", IsProperty=true, IsRequired=true, IsStatic=false, Name="AutocorrectionType", PropertyType=typeof(MonoTouch.UIKit.UITextAutocorrectionType), Selector="autocorrectionType", SetterSelector="setAutocorrectionType:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(ArgumentSemantic=MonoTouch.ObjCRuntime.ArgumentSemantic.None, GetterSelector="keyboardType", IsProperty=true, IsRequired=true, IsStatic=false, Name="KeyboardType", PropertyType=typeof(MonoTouch.UIKit.UIKeyboardType), Selector="keyboardType", SetterSelector="setKeyboardType:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(ArgumentSemantic=MonoTouch.ObjCRuntime.ArgumentSemantic.None, GetterSelector="keyboardAppearance", IsProperty=true, IsRequired=true, IsStatic=false, Name="KeyboardAppearance", PropertyType=typeof(MonoTouch.UIKit.UIKeyboardAppearance), Selector="keyboardAppearance", SetterSelector="setKeyboardAppearance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(ArgumentSemantic=MonoTouch.ObjCRuntime.ArgumentSemantic.None, GetterSelector="returnKeyType", IsProperty=true, IsRequired=true, IsStatic=false, Name="ReturnKeyType", PropertyType=typeof(MonoTouch.UIKit.UIReturnKeyType), Selector="returnKeyType", SetterSelector="setReturnKeyType:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(ArgumentSemantic=MonoTouch.ObjCRuntime.ArgumentSemantic.None, GetterSelector="enablesReturnKeyAutomatically", IsProperty=true, IsRequired=true, IsStatic=false, Name="EnablesReturnKeyAutomatically", PropertyType=typeof(System.Boolean), Selector="enablesReturnKeyAutomatically", SetterSelector="setEnablesReturnKeyAutomatically:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(ArgumentSemantic=MonoTouch.ObjCRuntime.ArgumentSemantic.None, GetterSelector="isSecureTextEntry", IsProperty=true, IsRequired=true, IsStatic=false, Name="SecureTextEntry", PropertyType=typeof(System.Boolean), Selector="secureTextEntry", SetterSelector="setSecureTextEntry:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(ArgumentSemantic=MonoTouch.ObjCRuntime.ArgumentSemantic.None, GetterSelector="spellCheckingType", IsProperty=true, IsRequired=true, IsStatic=false, Name="SpellCheckingType", PropertyType=typeof(MonoTouch.UIKit.UITextSpellCheckingType), Selector="spellCheckingType", SetterSelector="setSpellCheckingType:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.ProtocolMember(ArgumentSemantic=MonoTouch.ObjCRuntime.ArgumentSemantic.None, GetterSelector="textContentType", IsProperty=true, IsRequired=false, IsStatic=false, Name="TextContentType", PropertyType=typeof(MonoTouch.Foundation.NSString), Selector="textContentType", SetterSelector="setTextContentType:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An interface implemented by <see cref="T:MonoTouch.UIKit.UITextField" /> and <see cref="T:MonoTouch.UIKit.UITextView" /> with common input traits.</summary>
    <remarks />
  </Docs>
  <Members>
    <Member MemberName="AutocapitalizationType">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextAutocapitalizationType AutocapitalizationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextAutocapitalizationType AutocapitalizationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("autocapitalizationType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAutocapitalizationType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextAutocapitalizationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:MonoTouch.UIKit.UITextAutocapitalizationType" /> used by the <see cref="T:MonoTouch.UIKit.UITextInput" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutocorrectionType">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextAutocorrectionType AutocorrectionType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextAutocorrectionType AutocorrectionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("autocorrectionType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAutocorrectionType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextAutocorrectionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:MonoTouch.UIKit.UITextAutocorrectionType" /> used by the <see cref="T:MonoTouch.UIKit.UIKit.UITextInput" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablesReturnKeyAutomatically">
      <MemberSignature Language="C#" Value="public bool EnablesReturnKeyAutomatically { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablesReturnKeyAutomatically" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("enablesReturnKeyAutomatically")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setEnablesReturnKeyAutomatically:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the return key is automatically enabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardAppearance">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIKeyboardAppearance KeyboardAppearance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIKeyboardAppearance KeyboardAppearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("keyboardAppearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setKeyboardAppearance:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIKeyboardAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:MonoTouch.UIKit.UIKeyboardAppearance" /> used by the <see cref="T:MonoTouch.UIKit.UITextInput" /></summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardType">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIKeyboardType KeyboardType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIKeyboardType KeyboardType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("keyboardType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setKeyboardType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIKeyboardType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:MonoTouch.UIKit.UIKeyboarType" /> used by the <see cref="T:MonoTouch.UIKit.UITextInput" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnKeyType">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIReturnKeyType ReturnKeyType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIReturnKeyType ReturnKeyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("returnKeyType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setReturnKeyType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIReturnKeyType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The form of the return key for the <see cref="T:MonoTouch.UIKit.UITextInput" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecureTextEntry">
      <MemberSignature Language="C#" Value="public bool SecureTextEntry { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SecureTextEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isSecureTextEntry")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSecureTextEntry:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the entered text should be hidden.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellCheckingType">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextSpellCheckingType SpellCheckingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextSpellCheckingType SpellCheckingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("spellCheckingType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSpellCheckingType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextSpellCheckingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that tells whether spell-checking is on, off, or if spell-checking will be enabled only when auto-complete is enabled (default).</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
