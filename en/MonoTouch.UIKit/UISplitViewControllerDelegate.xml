<Type Name="UISplitViewControllerDelegate" FullName="MonoTouch.UIKit.UISplitViewControllerDelegate">
  <TypeSignature Language="C#" Value="public class UISplitViewControllerDelegate : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.UIKit.IUISplitViewControllerDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UISplitViewControllerDelegate extends MonoTouch.Foundation.NSObject implements class MonoTouch.ObjCRuntime.INativeObject, class MonoTouch.UIKit.IUISplitViewControllerDelegate, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.UIKit.IUISplitViewControllerDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UISplitViewControllerDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 3, 2, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The delegate associated with <see cref="T:MonoTouch.UIKit.UISplitViewController" /> events.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=08f52114-da41-447b-92a4-b86981b03c21">Popovers</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISplitViewControllerDelegate_protocol/index.html">Apple documentation for <c>UISplitViewControllerDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISplitViewControllerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISplitViewControllerDelegate (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISplitViewControllerDelegate (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UISplitViewControllerDelegate (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISplitViewControllerDelegate (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UISplitViewControllerDelegate (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollapseSecondViewController">
      <MemberSignature Language="C#" Value="public virtual bool CollapseSecondViewController (MonoTouch.UIKit.UISplitViewController splitViewController, MonoTouch.UIKit.UIViewController secondaryViewController, MonoTouch.UIKit.UIViewController primaryViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CollapseSecondViewController(class MonoTouch.UIKit.UISplitViewController splitViewController, class MonoTouch.UIKit.UIViewController secondaryViewController, class MonoTouch.UIKit.UIViewController primaryViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewController:collapseSecondaryViewController:ontoPrimaryViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="MonoTouch.UIKit.UISplitViewController" />
        <Parameter Name="secondaryViewController" Type="MonoTouch.UIKit.UIViewController" />
        <Parameter Name="primaryViewController" Type="MonoTouch.UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">Designates the split view controller with the collapsing interface.</param>
        <param name="secondaryViewController">Designates the secondary view controller for the split view interface.</param>
        <param name="primaryViewController">Designates the primary view controller for the split view interface.</param>
        <summary>Requests that the delegate adjust their primary view controller and  incorporate their secondary view controller into the collapsed interface.</summary>
        <returns>Returns <see langword="true" /> if the developer does not want the split view controller to do anything with the secondary view controller, and <see langword="false" /> to enable the split view controller to attempt to incorporate the secondary view controller’s content into the collapsed interface.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventShowDetailViewController">
      <MemberSignature Language="C#" Value="public virtual bool EventShowDetailViewController (MonoTouch.UIKit.UISplitViewController splitViewController, MonoTouch.UIKit.UIViewController vc, MonoTouch.Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EventShowDetailViewController(class MonoTouch.UIKit.UISplitViewController splitViewController, class MonoTouch.UIKit.UIViewController vc, class MonoTouch.Foundation.NSObject sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewController:showDetailViewController:sender:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="MonoTouch.UIKit.UISplitViewController" />
        <Parameter Name="vc" Type="MonoTouch.UIKit.UIViewController" />
        <Parameter Name="sender" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="splitViewController">Designates the split view controller that has its secondary view being updated.</param>
        <param name="vc">The view controller that is being displayed in the secondary position.</param>
        <param name="sender">The action making the request.</param>
        <summary>Queries the delegate to see if it wants to do the work of displaying a view controller in the secondary position of the split view interface.</summary>
        <returns>Returns <see langword="true" /> if the developer handled the presentation of the specified view controller, and <see langword="false" /> if they wanted the split view controller to perform that action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventShowViewController">
      <MemberSignature Language="C#" Value="public virtual bool EventShowViewController (MonoTouch.UIKit.UISplitViewController splitViewController, MonoTouch.UIKit.UIViewController vc, MonoTouch.Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EventShowViewController(class MonoTouch.UIKit.UISplitViewController splitViewController, class MonoTouch.UIKit.UIViewController vc, class MonoTouch.Foundation.NSObject sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewController:showViewController:sender:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="MonoTouch.UIKit.UISplitViewController" />
        <Parameter Name="vc" Type="MonoTouch.UIKit.UIViewController" />
        <Parameter Name="sender" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="splitViewController">Designates the split view controller that has its primary view being updated.</param>
        <param name="vc">The view controller that is being displayed in the primary position.</param>
        <param name="sender">The action making the request.</param>
        <summary>Queries the delegate to see if it wants to perform the work of displaying a view controller in the primary position of the split view interface.</summary>
        <returns>Returns <see langword="true" /> if the developer handled the presentation of the specified view controller, and <see langword="false" /> if they wanted the split view controller to perform that action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredInterfaceOrientationForPresentation">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIInterfaceOrientation GetPreferredInterfaceOrientationForPresentation (MonoTouch.UIKit.UISplitViewController splitViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.UIInterfaceOrientation GetPreferredInterfaceOrientationForPresentation(class MonoTouch.UIKit.UISplitViewController splitViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewControllerPreferredInterfaceOrientationForPresentation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIInterfaceOrientation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="MonoTouch.UIKit.UISplitViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">Designates the split view controller that will be presented onscreen.</param>
        <summary>Requests the delegate for an orientation to use when presenting the split view controller.</summary>
        <returns>Returns the orientation that will be be used  when the split view controller will first be displayed..</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrimaryViewControllerForCollapsingSplitViewController">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIViewController GetPrimaryViewControllerForCollapsingSplitViewController (MonoTouch.UIKit.UISplitViewController splitViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIViewController GetPrimaryViewControllerForCollapsingSplitViewController(class MonoTouch.UIKit.UISplitViewController splitViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("primaryViewControllerForCollapsingSplitViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="MonoTouch.UIKit.UISplitViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">Designates the split view controller whose interface is collapsing.</param>
        <summary>Requests that the delegate provide the single view controller to display after the split view interface collapses.</summary>
        <returns>New primary controller that will be displayed onscreen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrimaryViewControllerForExpandingSplitViewController">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIViewController GetPrimaryViewControllerForExpandingSplitViewController (MonoTouch.UIKit.UISplitViewController splitViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIViewController GetPrimaryViewControllerForExpandingSplitViewController(class MonoTouch.UIKit.UISplitViewController splitViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("primaryViewControllerForExpandingSplitViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="MonoTouch.UIKit.UISplitViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">To be added.</param>
        <summary>Requests that the delegate provide the single view controller to display after the split view interface expands.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetDisplayModeForAction">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UISplitViewControllerDisplayMode GetTargetDisplayModeForAction (MonoTouch.UIKit.UISplitViewController svc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.UISplitViewControllerDisplayMode GetTargetDisplayModeForAction(class MonoTouch.UIKit.UISplitViewController svc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("targetDisplayModeForActionInSplitViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UISplitViewControllerDisplayMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="MonoTouch.UIKit.UISplitViewController" />
      </Parameters>
      <Docs>
        <param name="svc">Split view controller whose action might be triggered.</param>
        <summary>Requests that the delegate  provide the display mode to apply when a split view controller action occurs.</summary>
        <returns>Returns the  display mode to be applied to the split view controller when the user performs specific actions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparateSecondaryViewController">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIViewController SeparateSecondaryViewController (MonoTouch.UIKit.UISplitViewController splitViewController, MonoTouch.UIKit.UIViewController primaryViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIViewController SeparateSecondaryViewController(class MonoTouch.UIKit.UISplitViewController splitViewController, class MonoTouch.UIKit.UIViewController primaryViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewController:separateSecondaryViewControllerFromPrimaryViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="MonoTouch.UIKit.UISplitViewController" />
        <Parameter Name="primaryViewController" Type="MonoTouch.UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">The split view controller with the expanding interface.</param>
        <param name="primaryViewController">Primary view controller specified for the expanded split view interface.</param>
        <summary>Requests that the delegate provide a new secondary view controller for the split view interface.</summary>
        <returns>Returns view controller to be used as the secondary view controller in the expanded split view interface or <see langword="null" /> to enable the split view controller to choose an appropriate secondary view controller.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldHideViewController">
      <MemberSignature Language="C#" Value="public virtual bool ShouldHideViewController (MonoTouch.UIKit.UISplitViewController svc, MonoTouch.UIKit.UIViewController viewController, MonoTouch.UIKit.UIInterfaceOrientation inOrientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldHideViewController(class MonoTouch.UIKit.UISplitViewController svc, class MonoTouch.UIKit.UIViewController viewController, valuetype MonoTouch.UIKit.UIInterfaceOrientation inOrientation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewController:shouldHideViewController:inOrientation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use UISearchController starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="MonoTouch.UIKit.UISplitViewController" />
        <Parameter Name="viewController" Type="MonoTouch.UIKit.UIViewController" />
        <Parameter Name="inOrientation" Type="MonoTouch.UIKit.UIInterfaceOrientation" />
      </Parameters>
      <Docs>
        <param name="svc">The designated split view controller whose action might be triggered.</param>
        <param name="viewController">The specified view controller.</param>
        <param name="inOrientation">The specified orientation.</param>
        <summary>Whether the specified viewController should be hidden in the specified orientation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportedInterfaceOrientations">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIInterfaceOrientationMask SupportedInterfaceOrientations (MonoTouch.UIKit.UISplitViewController splitViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.UIInterfaceOrientationMask SupportedInterfaceOrientations(class MonoTouch.UIKit.UISplitViewController splitViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewControllerSupportedInterfaceOrientations:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIInterfaceOrientationMask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="MonoTouch.UIKit.UISplitViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">The split view controller.</param>
        <summary>Queries the delegate for specification of the interface orientations that the split view controller supports.</summary>
        <returns>Returns the orientations requested for the specified split view controller to support.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillChangeDisplayMode">
      <MemberSignature Language="C#" Value="public virtual void WillChangeDisplayMode (MonoTouch.UIKit.UISplitViewController svc, MonoTouch.UIKit.UISplitViewControllerDisplayMode displayMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillChangeDisplayMode(class MonoTouch.UIKit.UISplitViewController svc, valuetype MonoTouch.UIKit.UISplitViewControllerDisplayMode displayMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewController:willChangeToDisplayMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="MonoTouch.UIKit.UISplitViewController" />
        <Parameter Name="displayMode" Type="MonoTouch.UIKit.UISplitViewControllerDisplayMode" />
      </Parameters>
      <Docs>
        <param name="svc">The split view controller whose display mode is changing.</param>
        <param name="displayMode">TThe new display mode that will be applied.</param>
        <summary>Informs the delegate that the display mode for the split view controller is about to change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillHideViewController">
      <MemberSignature Language="C#" Value="public virtual void WillHideViewController (MonoTouch.UIKit.UISplitViewController svc, MonoTouch.UIKit.UIViewController aViewController, MonoTouch.UIKit.UIBarButtonItem barButtonItem, MonoTouch.UIKit.UIPopoverController pc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillHideViewController(class MonoTouch.UIKit.UISplitViewController svc, class MonoTouch.UIKit.UIViewController aViewController, class MonoTouch.UIKit.UIBarButtonItem barButtonItem, class MonoTouch.UIKit.UIPopoverController pc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewController:willHideViewController:withBarButtonItem:forPopoverController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use UISearchController starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="MonoTouch.UIKit.UISplitViewController" />
        <Parameter Name="aViewController" Type="MonoTouch.UIKit.UIViewController" />
        <Parameter Name="barButtonItem" Type="MonoTouch.UIKit.UIBarButtonItem" />
        <Parameter Name="pc" Type="MonoTouch.UIKit.UIPopoverController" />
      </Parameters>
      <Docs>
        <param name="svc">The split view controller whose display mode is changing.</param>
        <param name="aViewController">Specified view controller.</param>
        <param name="barButtonItem">An enumeration of the predefined <see cref="T:MonoTouch.UIKit.UIBarButtonItem" />s.</param>
        <param name="pc">Specified popover controller.</param>
        <summary>Indicates that the UISplitViewController is about to be hidden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPresentViewController">
      <MemberSignature Language="C#" Value="public virtual void WillPresentViewController (MonoTouch.UIKit.UISplitViewController svc, MonoTouch.UIKit.UIPopoverController pc, MonoTouch.UIKit.UIViewController aViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillPresentViewController(class MonoTouch.UIKit.UISplitViewController svc, class MonoTouch.UIKit.UIPopoverController pc, class MonoTouch.UIKit.UIViewController aViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewController:popoverController:willPresentViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use UISearchController starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="MonoTouch.UIKit.UISplitViewController" />
        <Parameter Name="pc" Type="MonoTouch.UIKit.UIPopoverController" />
        <Parameter Name="aViewController" Type="MonoTouch.UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="svc">The split view controller whose display mode is changing.</param>
        <param name="pc">Specified popover controller.</param>
        <param name="aViewController">Specified view controller.</param>
        <summary>Indicates that the UISplitViewController is about to be presented.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillShowViewController">
      <MemberSignature Language="C#" Value="public virtual void WillShowViewController (MonoTouch.UIKit.UISplitViewController svc, MonoTouch.UIKit.UIViewController aViewController, MonoTouch.UIKit.UIBarButtonItem button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillShowViewController(class MonoTouch.UIKit.UISplitViewController svc, class MonoTouch.UIKit.UIViewController aViewController, class MonoTouch.UIKit.UIBarButtonItem button) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("splitViewController:willShowViewController:invalidatingBarButtonItem:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use UISearchController starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="MonoTouch.UIKit.UISplitViewController" />
        <Parameter Name="aViewController" Type="MonoTouch.UIKit.UIViewController" />
        <Parameter Name="button" Type="MonoTouch.UIKit.UIBarButtonItem" />
      </Parameters>
      <Docs>
        <param name="svc">The split view controller whose display mode is changing.</param>
        <param name="aViewController">Specified view controller.</param>
        <param name="button">An enumeration of the predefined <see cref="T:MonoTouch.UIKit.UIBarButtonItem" />s.</param>
        <summary>Indicates that the UISplitViewController is about to be shown.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
