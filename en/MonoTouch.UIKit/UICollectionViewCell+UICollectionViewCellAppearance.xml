<Type Name="UICollectionViewCell+UICollectionViewCellAppearance" FullName="MonoTouch.UIKit.UICollectionViewCell+UICollectionViewCellAppearance">
  <TypeSignature Language="C#" Value="public class UICollectionViewCell.UICollectionViewCellAppearance : MonoTouch.UIKit.UICollectionReusableView.UICollectionReusableViewAppearance" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit UICollectionViewCell/UICollectionViewCellAppearance extends MonoTouch.UIKit.UICollectionReusableView/UICollectionReusableViewAppearance" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.UIKit.UICollectionReusableView+UICollectionReusableViewAppearance</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <para>Appearance class for objects of type <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />.</para>
    </summary>
    <remarks>
      <para>This appearance class is a strongly typed subclass of UIAppearance that is intended to be used with objects of class <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />.   You can obtain an instance to this class by either accessing the static <see cref="P:MonoTouch.UIKit.UICollectionViewCell.Appearance" /> property on the <see cref="T:MonoTouch.UIKit.UICollectionViewCell" /> or by calling the <see cref="M:MonoTouch.UIKit.UICollectionViewCell.AppearanceWhenContainedIn" /> to get a UIAppearance that is context sensitive.</para>
    </remarks>
  </Docs>
  <Members />
</Type>
