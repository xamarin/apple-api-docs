<Type Name="UICollectionViewLayout" FullName="MonoTouch.UIKit.UICollectionViewLayout">
  <TypeSignature Language="C#" Value="public class UICollectionViewLayout : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSCoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UICollectionViewLayout extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSCoding, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UICollectionViewLayout", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_6_0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for specifying the layout of a <see cref="T:MonoTouch.UIKit.UICollectionView" />.</summary>
    <remarks>
      <para>
        Collection Views allow content to be displayed using arbitrary layouts. Grid-like layouts can use the <see cref="T:MonoTouch.UIKit.UICollectionViewFlowLayout" /> or application developers can subtype <see cref="T:MonoTouch.UIKit.UICollectionViewLayout" /> to create their own flexible pattern.
      </para>
      <para>The layout of the <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />s in a <see cref="T:MonoTouch.UIKit.UICollectionView" /> is controlled by a <see cref="T:MonoTouch.UIKit.UICollectionViewLayout" />, which can be passed in to the <see cref="C:MonoTouch.UIKit.UICollectionView(UICollectionViewLayout)" /> constructor or can changed with <see cref="M:MonoTouch.UIKit.UICollectionView.SetCollectionViewLayout" />. </para>
      <para>Application developers can create fully custom layouts by subclassing either <see cref="T:MonoTouch.UIKit.UICollectionViewFlowLayout" /> or <see cref="T:MonoTouch.UIKit.UICollectionViewLayout" />. </para>
      <para>
        The key methods to override are:
      </para>
      <para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:MonoTouch.UIKit.UICollectionViewLayout.PrepareLayout" />
            </term>
            <description>Used for performing initial geometric calculations that will be used throughout the layout process.</description>
          </item>
          <item>
            <term>
              <see cref="M:MonoTouch.UIKit.UICollectionViewLayout.CollectionViewContentSize" />
            </term>
            <description>
              Returns the size of the area used to display content.
            </description>
          </item>
          <item>
            <term>
              <see cref="M:MonoTouch.UIKit.UICollectionViewLayout.LayoutAttributesForElementsInRect" />
            </term>
            <description>Returns the layout attributes for all the cells and views within the specified rectangle.
            </description>
          </item>
          <item>
            <term>
              <see cref="M:MonoTouch.UIKit.UICollectionViewLayout.LayoutAttributesForItem" />
            </term>
            <description>The layout attributes of a specific cell
            </description>
          </item>
          <item>
            <term>
              <see cref="M:MonoTouch.UIKit.UICollectionViewLayout.ShouldInvalidateLayoutForBoundsChange" />
            </term>
            <description>Returns <see langword="true" /> if the new bounds require an update of the layout.</description>
          </item>
        </list>
      </para>
      <para>The following code, taken from the "Introduction to Collection Views" class, creates a circular layout, as shown in the following image:</para>
      <example>
        <code lang="C#"><![CDATA[
          public override UICollectionViewLayoutAttributes LayoutAttributesForItem (NSIndexPath path)
          {
            UICollectionViewLayoutAttributes attributes = UICollectionViewLayoutAttributes.CreateForCell (path);
            attributes.Size = new SizeF (ItemSize, ItemSize);
          
            attributes.Center = new PointF (center.X + radius * (float)Math.Cos (2 * path.Row * Math.PI / cellCount),
              center.Y + radius * (float)Math.Sin (2 * path.Row * Math.PI / cellCount));
            return attributes;
          }
        ]]></code>
      </example>
      <para>
        <img href="UIKit.UICollectionView.CircleLayout.png" />
      </para>
    </remarks>
    <altmember cref="T:MonoTouch.UIKit.UICollectionView" />
    <altmember cref="T:MonoTouch.UIKit.UICollectionViewController" />
    <altmember cref="T:MonoTouch.UIKit.UICollectionViewFlowLayout" />
    <related type="article" href="http://docs.xamarin.com/ios/Guides/User_Interface/Introduction_to_Collection_Views">Introduction to Collection Views</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewLayout_class/index.html">Apple documentation for <c>UICollectionViewLayout</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewLayout (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewLayout (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UICollectionViewLayout (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewLayout (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UICollectionViewLayout (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionView CollectionView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UICollectionView CollectionView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("collectionView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:MonoTouch.UIKit.UICollectionView" /> which this <see cref="T:MonoTouch.UIKit.UICollectionViewLayout" /> is laying out.</summary>
        <value>The default value is <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionViewContentSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF CollectionViewContentSize { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF CollectionViewContentSize" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGSize CollectionViewContentSize { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGSize CollectionViewContentSize" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("collectionViewContentSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The SizeF of this UICollectionViewLayout's content.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UICollectionViewLayout object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UICollectionViewLayout class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the UICollectionViewLayout ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:MonoTouch.Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:MonoTouch.Foundation.NSKeyedArchived" /> and then invoke the <see cref="M:MonoTouch.Foundation.NSKeyedArchived.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If you want to allow your object to be archived, you should override this method and store your state in using the provided <paramref name="encoder" /> parameter.   In addition, you should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="c#">public void override EncodeTo (NSCoder coder){
    c.Encode (1, key: "version");
    c.Encode (userName, key: "userName");
    c.Encode (hostName, key: "hostName");</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalizeAnimatedBoundsChange">
      <MemberSignature Language="C#" Value="public virtual void FinalizeAnimatedBoundsChange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalizeAnimatedBoundsChange() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("finalizeAnimatedBoundsChange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden, performs custom cleanup after animated changes to the bounds or after items have been inserted or deleted.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalizeCollectionViewUpdates">
      <MemberSignature Language="C#" Value="public virtual void FinalizeCollectionViewUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalizeCollectionViewUpdates() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("finalizeCollectionViewUpdates")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden, allows additional animations or clean up during an update.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalizeLayoutTransition">
      <MemberSignature Language="C#" Value="public virtual void FinalizeLayoutTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalizeLayoutTransition() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("finalizeLayoutTransition")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called prior to transition animations, informs the layout object to perform any steps necessary before the animations.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalLayoutAttributesForDisappearingDecorationElement">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingDecorationElement (MonoTouch.Foundation.NSString elementKind, MonoTouch.Foundation.NSIndexPath decorationIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingDecorationElement(class MonoTouch.Foundation.NSString elementKind, class MonoTouch.Foundation.NSIndexPath decorationIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="decorationIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="elementKind">To be added.</param>
        <param name="decorationIndexPath">To be added.</param>
        <summary>The final layout information for a decoration element that is about to be removed from this UICollectionViewLayout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalLayoutAttributesForDisappearingItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingItem (MonoTouch.Foundation.NSIndexPath itemIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingItem(class MonoTouch.Foundation.NSIndexPath itemIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("finalLayoutAttributesForDisappearingItemAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="itemIndexPath">To be added.</param>
        <summary>The final layout information for an item that is about to be removed from the UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalLayoutAttributesForDisappearingSupplementaryElement">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingSupplementaryElement (MonoTouch.Foundation.NSString elementKind, MonoTouch.Foundation.NSIndexPath elementIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingSupplementaryElement(class MonoTouch.Foundation.NSString elementKind, class MonoTouch.Foundation.NSIndexPath elementIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="elementIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="elementKind">To be added.</param>
        <param name="elementIndexPath">To be added.</param>
        <summary>The final layout information for a supplementary view that is about to be removed from the collection view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathsToDeleteForDecorationViewOfKind">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSIndexPath[] GetIndexPathsToDeleteForDecorationViewOfKind (MonoTouch.Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSIndexPath[] GetIndexPathsToDeleteForDecorationViewOfKind(class MonoTouch.Foundation.NSString kind) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("indexPathsToDeleteForDecorationViewOfKind:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>An array of NSIndexPaths indicating the decoration views to remove.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathsToDeleteForSupplementaryView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSIndexPath[] GetIndexPathsToDeleteForSupplementaryView (MonoTouch.Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSIndexPath[] GetIndexPathsToDeleteForSupplementaryView(class MonoTouch.Foundation.NSString kind) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("indexPathsToDeleteForSupplementaryViewOfKind:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>An array of NSIndexPaths indicating the supplementary views to remove.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathsToInsertForDecorationView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSIndexPath[] GetIndexPathsToInsertForDecorationView (MonoTouch.Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSIndexPath[] GetIndexPathsToInsertForDecorationView(class MonoTouch.Foundation.NSString kind) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("indexPathsToInsertForDecorationViewOfKind:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>An array of NSIndexPaths indicating the decoration views to add.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathsToInsertForSupplementaryView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSIndexPath[] GetIndexPathsToInsertForSupplementaryView (MonoTouch.Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSIndexPath[] GetIndexPathsToInsertForSupplementaryView(class MonoTouch.Foundation.NSString kind) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("indexPathsToInsertForSupplementaryViewOfKind:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>An array of index paths indicating the supplementary views to add.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidationContext">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContext (MonoTouch.UIKit.UICollectionViewLayoutAttributes preferredAttributes, MonoTouch.UIKit.UICollectionViewLayoutAttributes originalAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContext(class MonoTouch.UIKit.UICollectionViewLayoutAttributes preferredAttributes, class MonoTouch.UIKit.UICollectionViewLayoutAttributes originalAttributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invalidationContextForPreferredLayoutAttributes:withOriginalAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferredAttributes" Type="MonoTouch.UIKit.UICollectionViewLayoutAttributes" />
        <Parameter Name="originalAttributes" Type="MonoTouch.UIKit.UICollectionViewLayoutAttributes" />
      </Parameters>
      <Docs>
        <param name="preferredAttributes">To be added.</param>
        <param name="originalAttributes">To be added.</param>
        <summary>Gets the invalidated areas for a change from <paramref name="originalAttributes" /> to <paramref name="preferredAttributes" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidationContextForBoundsChange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForBoundsChange (System.Drawing.RectangleF newBounds);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForBoundsChange(valuetype System.Drawing.RectangleF newBounds) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForBoundsChange (MonoTouch.CoreGraphics.CGRect newBounds);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForBoundsChange(valuetype MonoTouch.CoreGraphics.CGRect newBounds) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invalidationContextForBoundsChange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBounds" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="newBounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="newBounds">To be added.</param>
        <summary>Returns a UICollectionViewLayoutInvalidationContext that specifies the portions of the layout that change in response to a change in bounds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidationContextForEndingInteractiveMovementOfItems">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForEndingInteractiveMovementOfItems (MonoTouch.Foundation.NSIndexPath[] finalIndexPaths, MonoTouch.Foundation.NSIndexPath[] previousIndexPaths, bool movementCancelled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForEndingInteractiveMovementOfItems(class MonoTouch.Foundation.NSIndexPath[] finalIndexPaths, class MonoTouch.Foundation.NSIndexPath[] previousIndexPaths, bool movementCancelled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths:previousIndexPaths:movementCancelled:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalIndexPaths" Type="MonoTouch.Foundation.NSIndexPath[]" />
        <Parameter Name="previousIndexPaths" Type="MonoTouch.Foundation.NSIndexPath[]" />
        <Parameter Name="movementCancelled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="finalIndexPaths">To be added.</param>
        <param name="previousIndexPaths">To be added.</param>
        <param name="movementCancelled">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidationContextForInteractivelyMovingItems">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForInteractivelyMovingItems (MonoTouch.Foundation.NSIndexPath[] targetIndexPaths, System.Drawing.PointF targetPosition, MonoTouch.Foundation.NSIndexPath[] previousIndexPaths, System.Drawing.PointF previousPosition);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForInteractivelyMovingItems(class MonoTouch.Foundation.NSIndexPath[] targetIndexPaths, valuetype System.Drawing.PointF targetPosition, class MonoTouch.Foundation.NSIndexPath[] previousIndexPaths, valuetype System.Drawing.PointF previousPosition) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForInteractivelyMovingItems (MonoTouch.Foundation.NSIndexPath[] targetIndexPaths, MonoTouch.CoreGraphics.CGPoint targetPosition, MonoTouch.Foundation.NSIndexPath[] previousIndexPaths, MonoTouch.CoreGraphics.CGPoint previousPosition);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForInteractivelyMovingItems(class MonoTouch.Foundation.NSIndexPath[] targetIndexPaths, valuetype MonoTouch.CoreGraphics.CGPoint targetPosition, class MonoTouch.Foundation.NSIndexPath[] previousIndexPaths, valuetype MonoTouch.CoreGraphics.CGPoint previousPosition) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invalidationContextForInteractivelyMovingItems:withTargetPosition:previousIndexPaths:previousPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetIndexPaths" Type="MonoTouch.Foundation.NSIndexPath[]" />
        <Parameter Name="targetPosition" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="previousIndexPaths" Type="MonoTouch.Foundation.NSIndexPath[]" />
        <Parameter Name="previousPosition" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="targetPosition" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
        <Parameter Name="previousPosition" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="targetIndexPaths">To be added.</param>
        <param name="targetPosition">To be added.</param>
        <param name="previousIndexPaths">To be added.</param>
        <param name="previousPosition">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLayoutAttributesForInteractivelyMovingItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes GetLayoutAttributesForInteractivelyMovingItem (MonoTouch.Foundation.NSIndexPath indexPath, System.Drawing.PointF targetPosition);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes GetLayoutAttributesForInteractivelyMovingItem(class MonoTouch.Foundation.NSIndexPath indexPath, valuetype System.Drawing.PointF targetPosition) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes GetLayoutAttributesForInteractivelyMovingItem (MonoTouch.Foundation.NSIndexPath indexPath, MonoTouch.CoreGraphics.CGPoint targetPosition);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes GetLayoutAttributesForInteractivelyMovingItem(class MonoTouch.Foundation.NSIndexPath indexPath, valuetype MonoTouch.CoreGraphics.CGPoint targetPosition) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutAttributesForInteractivelyMovingItemAtIndexPath:withTargetPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
        <Parameter Name="targetPosition" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="targetPosition" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="indexPath">To be added.</param>
        <param name="targetPosition">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetIndexPathForInteractivelyMovingItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSIndexPath GetTargetIndexPathForInteractivelyMovingItem (MonoTouch.Foundation.NSIndexPath previousIndexPath, System.Drawing.PointF position);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSIndexPath GetTargetIndexPathForInteractivelyMovingItem(class MonoTouch.Foundation.NSIndexPath previousIndexPath, valuetype System.Drawing.PointF position) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSIndexPath GetTargetIndexPathForInteractivelyMovingItem (MonoTouch.Foundation.NSIndexPath previousIndexPath, MonoTouch.CoreGraphics.CGPoint position);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSIndexPath GetTargetIndexPathForInteractivelyMovingItem(class MonoTouch.Foundation.NSIndexPath previousIndexPath, valuetype MonoTouch.CoreGraphics.CGPoint position) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("targetIndexPathForInteractivelyMovingItem:withPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
        <Parameter Name="position" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="position" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="previousIndexPath">To be added.</param>
        <param name="position">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialLayoutAttributesForAppearingDecorationElement">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingDecorationElement (MonoTouch.Foundation.NSString elementKind, MonoTouch.Foundation.NSIndexPath decorationIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingDecorationElement(class MonoTouch.Foundation.NSString elementKind, class MonoTouch.Foundation.NSIndexPath decorationIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="decorationIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="elementKind">To be added.</param>
        <param name="decorationIndexPath">To be added.</param>
        <summary>Information on the starting layout of a decoration view that is being inserted into the UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialLayoutAttributesForAppearingItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingItem (MonoTouch.Foundation.NSIndexPath itemIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingItem(class MonoTouch.Foundation.NSIndexPath itemIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initialLayoutAttributesForAppearingItemAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="itemIndexPath">To be added.</param>
        <summary>Information on the starting layout of an item that is being inserted into the UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialLayoutAttributesForAppearingSupplementaryElement">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingSupplementaryElement (MonoTouch.Foundation.NSString elementKind, MonoTouch.Foundation.NSIndexPath elementIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingSupplementaryElement(class MonoTouch.Foundation.NSString elementKind, class MonoTouch.Foundation.NSIndexPath elementIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="elementIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="elementKind">To be added.</param>
        <param name="elementIndexPath">To be added.</param>
        <summary>Information on the starting layout of a supplementary view that is being inserted into the UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLayout">
      <MemberSignature Language="C#" Value="public virtual void InvalidateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invalidateLayout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the current layout and initiates an update.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLayout">
      <MemberSignature Language="C#" Value="public virtual void InvalidateLayout (MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateLayout(class MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invalidateLayoutWithContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="MonoTouch.UIKit.UICollectionViewLayoutInvalidationContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Forces recomputation and application of the collection view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidationContextClass">
      <MemberSignature Language="C#" Value="public static MonoTouch.ObjCRuntime.Class InvalidationContextClass ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.ObjCRuntime.Class InvalidationContextClass() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("invalidationContextClass")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The custom UICollectionViewLayoutInvalidationContext used for this UICollectionViewLayout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesClass">
      <MemberSignature Language="C#" Value="public static MonoTouch.ObjCRuntime.Class LayoutAttributesClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.ObjCRuntime.Class LayoutAttributesClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("layoutAttributesClass")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UICollectionViewLayoutAttributes used for layout attributes for this UICollectionViewLayout.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesForDecorationView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes LayoutAttributesForDecorationView (MonoTouch.Foundation.NSString kind, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes LayoutAttributesForDecorationView(class MonoTouch.Foundation.NSString kind, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutAttributesForDecorationViewOfKind:atIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The UICollectionViewLayoutAttributes for the specified decoration view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesForElementsInRect">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect (System.Drawing.RectangleF rect);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect(valuetype System.Drawing.RectangleF rect) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect (MonoTouch.CoreGraphics.CGRect rect);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect(valuetype MonoTouch.CoreGraphics.CGRect rect) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutAttributesForElementsInRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>The UICollectionViewLayoutAttributes for all the cells and views in the specified reRectangleF.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesForItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes LayoutAttributesForItem (MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes LayoutAttributesForItem(class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutAttributesForItemAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="indexPath">To be added.</param>
        <summary>The UICollectionViewLayoutAttributes for the specified NSIndexPath.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesForSupplementaryView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryView (MonoTouch.Foundation.NSString kind, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryView(class MonoTouch.Foundation.NSString kind, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutAttributesForSupplementaryViewOfKind:atIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The UICollectionViewLayoutAttributes for the specified supplementary view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesForSupplementaryView">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryView (MonoTouch.UIKit.UICollectionElementKindSection section, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.UIKit.UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryView(valuetype MonoTouch.UIKit.UICollectionElementKindSection section, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="section" Type="MonoTouch.UIKit.UICollectionElementKindSection" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="section">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The attributes for the supplementary view at the specified indexPath.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForAnimatedBoundsChange">
      <MemberSignature Language="C#" Value="public virtual void PrepareForAnimatedBoundsChange (System.Drawing.RectangleF oldBounds);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForAnimatedBoundsChange(valuetype System.Drawing.RectangleF oldBounds) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void PrepareForAnimatedBoundsChange (MonoTouch.CoreGraphics.CGRect oldBounds);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForAnimatedBoundsChange(valuetype MonoTouch.CoreGraphics.CGRect oldBounds) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("prepareForAnimatedBoundsChange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldBounds" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="oldBounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="oldBounds">To be added.</param>
        <summary>Called prior to animated changes to the bounds or before insertion or deletion of items.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForCollectionViewUpdates">
      <MemberSignature Language="C#" Value="public virtual void PrepareForCollectionViewUpdates (MonoTouch.UIKit.UICollectionViewUpdateItem[] updateItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForCollectionViewUpdates(class MonoTouch.UIKit.UICollectionViewUpdateItem[] updateItems) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("prepareForCollectionViewUpdates:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updateItems" Type="MonoTouch.UIKit.UICollectionViewUpdateItem[]" />
      </Parameters>
      <Docs>
        <param name="updateItems">To be added.</param>
        <summary>Notifies the layout object that the contents of the UICollectionView are about to change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForTransitionFromLayout">
      <MemberSignature Language="C#" Value="public virtual void PrepareForTransitionFromLayout (MonoTouch.UIKit.UICollectionViewLayout oldLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForTransitionFromLayout(class MonoTouch.UIKit.UICollectionViewLayout oldLayout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("prepareForTransitionFromLayout:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldLayout" Type="MonoTouch.UIKit.UICollectionViewLayout" />
      </Parameters>
      <Docs>
        <param name="oldLayout">To be added.</param>
        <summary>Notifies the layout object that it will shortly be installed as the layout for the UICollectionView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForTransitionToLayout">
      <MemberSignature Language="C#" Value="public virtual void PrepareForTransitionToLayout (MonoTouch.UIKit.UICollectionViewLayout newLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForTransitionToLayout(class MonoTouch.UIKit.UICollectionViewLayout newLayout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("prepareForTransitionToLayout:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newLayout" Type="MonoTouch.UIKit.UICollectionViewLayout" />
      </Parameters>
      <Docs>
        <param name="newLayout">To be added.</param>
        <summary>Tells the layout object that it will shortly be removed as the layout for the UICollectionView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareLayout">
      <MemberSignature Language="C#" Value="public virtual void PrepareLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareLayout() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("prepareLayout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells the layout object to update the layout.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassForDecorationView">
      <MemberSignature Language="C#" Value="public void RegisterClassForDecorationView (Type viewType, MonoTouch.Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClassForDecorationView(class System.Type viewType, class MonoTouch.Foundation.NSString kind) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewType" Type="System.Type" />
        <Parameter Name="kind" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="viewType">The type of the class that will provide the decoration.   Use null to unregister the previous.</param>
        <param name="kind">The element kind for which the registered type will be used.</param>
        <summary>Registers the class identified by kind as a decoration view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNibForDecorationView">
      <MemberSignature Language="C#" Value="public virtual void RegisterNibForDecorationView (MonoTouch.UIKit.UINib nib, MonoTouch.Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterNibForDecorationView(class MonoTouch.UIKit.UINib nib, class MonoTouch.Foundation.NSString kind) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("registerNib:forDecorationViewOfKind:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nib" Type="MonoTouch.UIKit.UINib" />
        <Parameter Name="kind" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="nib">
          <para>The object containing the cell definition, the nib file should contain a single UICollectionReusableView object.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="kind">The element kind for which the registered type will be used.</param>
        <summary>Registers the UINib for use as a template for decoration views.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInvalidateLayout">
      <MemberSignature Language="C#" Value="public virtual bool ShouldInvalidateLayout (MonoTouch.UIKit.UICollectionViewLayoutAttributes preferredAttributes, MonoTouch.UIKit.UICollectionViewLayoutAttributes originalAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldInvalidateLayout(class MonoTouch.UIKit.UICollectionViewLayoutAttributes preferredAttributes, class MonoTouch.UIKit.UICollectionViewLayoutAttributes originalAttributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferredAttributes" Type="MonoTouch.UIKit.UICollectionViewLayoutAttributes" />
        <Parameter Name="originalAttributes" Type="MonoTouch.UIKit.UICollectionViewLayoutAttributes" />
      </Parameters>
      <Docs>
        <param name="preferredAttributes">To be added.</param>
        <param name="originalAttributes">To be added.</param>
        <summary>Returns true if the collection view needs to invalidate for a change from <paramref name="preferredAttributes" /> to <paramref name="originalAttributes" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInvalidateLayoutForBoundsChange">
      <MemberSignature Language="C#" Value="public virtual bool ShouldInvalidateLayoutForBoundsChange (System.Drawing.RectangleF newBounds);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldInvalidateLayoutForBoundsChange(valuetype System.Drawing.RectangleF newBounds) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual bool ShouldInvalidateLayoutForBoundsChange (MonoTouch.CoreGraphics.CGRect newBounds);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldInvalidateLayoutForBoundsChange(valuetype MonoTouch.CoreGraphics.CGRect newBounds) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("shouldInvalidateLayoutForBoundsChange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBounds" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="newBounds" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="newBounds">To be added.</param>
        <summary>Whether the new bounds requires a layout update.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetContentOffset">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF TargetContentOffset (System.Drawing.PointF proposedContentOffset, System.Drawing.PointF scrollingVelocity);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF TargetContentOffset(valuetype System.Drawing.PointF proposedContentOffset, valuetype System.Drawing.PointF scrollingVelocity) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGPoint TargetContentOffset (MonoTouch.CoreGraphics.CGPoint proposedContentOffset, MonoTouch.CoreGraphics.CGPoint scrollingVelocity);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGPoint TargetContentOffset(valuetype MonoTouch.CoreGraphics.CGPoint proposedContentOffset, valuetype MonoTouch.CoreGraphics.CGPoint scrollingVelocity) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("targetContentOffsetForProposedContentOffset:withScrollingVelocity:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.PointF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedContentOffset" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="scrollingVelocity" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="proposedContentOffset" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
        <Parameter Name="scrollingVelocity" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="proposedContentOffset">To be added.</param>
        <param name="scrollingVelocity">To be added.</param>
        <summary>The PointF at which to stop scrolling.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetContentOffsetForProposedContentOffset">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF TargetContentOffsetForProposedContentOffset (System.Drawing.PointF proposedContentOffset);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF TargetContentOffsetForProposedContentOffset(valuetype System.Drawing.PointF proposedContentOffset) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGPoint TargetContentOffsetForProposedContentOffset (MonoTouch.CoreGraphics.CGPoint proposedContentOffset);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGPoint TargetContentOffsetForProposedContentOffset(valuetype MonoTouch.CoreGraphics.CGPoint proposedContentOffset) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("targetContentOffsetForProposedContentOffset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.PointF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedContentOffset" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="proposedContentOffset" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="proposedContentOffset">To be added.</param>
        <summary>The content offset to use after an animated layout change.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
