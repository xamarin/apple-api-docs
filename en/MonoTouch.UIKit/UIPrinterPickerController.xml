<Type Name="UIPrinterPickerController" FullName="MonoTouch.UIKit.UIPrinterPickerController">
  <TypeSignature Language="C#" Value="public class UIPrinterPickerController : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIPrinterPickerController extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UIPrinterPickerController", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Presents a standard interface for selecting a printer.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPrinterPickerController_class/index.html">Apple documentation for <c>UIPrinterPickerController</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIPrinterPickerController (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIPrinterPickerController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.IUIPrinterPickerControllerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.IUIPrinterPickerControllerDelegate Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.IUIPrinterPickerControllerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the MonoTouch.UIKit.UIPrinterPickerControllerDelegate model class which acts as the class delegate.</summary>
        <value>
          <para>The instance of the MonoTouch.UIKit.UIPrinterPickerControllerDelegate model class</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dismiss">
      <MemberSignature Language="C#" Value="public virtual void Dismiss (bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dismiss(bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("dismissAnimated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="animated">To be added.</param>
        <summary>Dismisses <c>this</c> <see cref="T:UIKit.UIPrinterPickerController" /> controller with or without animation, as determined by <paramref name="animated" />, without calling <see cref="M:UIKit.UIPrinterPickerControllerDelegate.WillDismiss" /> or <see cref="M:UIKit.UIPrinterPickerControllerDelegate.DidDismiss" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIPrinterPickerController object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIPrinterPickerController class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UIPrinterPickerController ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPrinter">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIPrinterPickerController FromPrinter (MonoTouch.UIKit.UIPrinter printer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIPrinterPickerController FromPrinter(class MonoTouch.UIKit.UIPrinter printer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("printerPickerControllerWithInitiallySelectedPrinter:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPrinterPickerController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printer" Type="MonoTouch.UIKit.UIPrinter" />
      </Parameters>
      <Docs>
        <param name="printer">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a <see cref="T:UIKit.UIPrinterPickerController" /> that has the selected <see cref="T:UIKit.UIPrinter" /> object, or for a value of <see langword="null" />, no selection.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Present">
      <MemberSignature Language="C#" Value="public virtual bool Present (bool animated, MonoTouch.UIKit.UIPrinterPickerCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Present(bool animated, class MonoTouch.UIKit.UIPrinterPickerCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentAnimated:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.UIKit.UIPrinterPickerCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDUIPrinterPickerCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="animated">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Shows a <see cref="T:UIKit.UIPrinterPickerController" /> from this app, with or without animation, depending on <paramref name="animated" />, and code to run on completion, as a <see cref="T:UIKit.UIPrinterPickerCompletionHandler" /> object, and then returns whether the object was displayed.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentAsync (bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentAsync(bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="animated">To be added.</param>
        <summary>Shows a  from this app, with or without animation, depending on , and code to run on completion, as a  object, and then returns whether the object was displayed.</summary>
        <returns>
          <para>A task that represents the asynchronous Present operation.   The value of the TResult parameter is of type MonoTouch.UIKit.UIPrinterPickerCompletionResult.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PresentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentAsync (bool animated, out bool result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentAsync(bool animated, bool result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="animated">To be added.</param>
        <param name="result">Whether the user picked a printer.</param>
        <summary>Shows a <see cref="T:UIKit.UIPrinterPickerController" />  from this app, with or without animation, depending on <paramref name="animated" />, returning a task that provides the picker completion result.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromBarButtonItem">
      <MemberSignature Language="C#" Value="public virtual bool PresentFromBarButtonItem (MonoTouch.UIKit.UIBarButtonItem item, bool animated, MonoTouch.UIKit.UIPrinterPickerCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PresentFromBarButtonItem(class MonoTouch.UIKit.UIBarButtonItem item, bool animated, class MonoTouch.UIKit.UIPrinterPickerCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentFromBarButtonItem:animated:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MonoTouch.UIKit.UIBarButtonItem" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.UIKit.UIPrinterPickerCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDUIPrinterPickerCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="animated">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Shows a <see cref="T:UIKit.UIPrinterPickerController" /> from this app as a popover that is anchored to a <see cref="T:UIKit.UIBarButtonItem" /> item, with or without animation, depending on <paramref name="animated" />, and code to run on completion, as a <see cref="T:UIKit.UIPrinterPickerCompletionHandler" /> object, and then returns whether the object was displayed.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromBarButtonItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentFromBarButtonItemAsync (MonoTouch.UIKit.UIBarButtonItem item, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentFromBarButtonItemAsync(class MonoTouch.UIKit.UIBarButtonItem item, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MonoTouch.UIKit.UIBarButtonItem" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Shows a  from this app as a popover that is anchored to a  item, with or without animation, depending on , and code to run on completion, as a  object, and then returns whether the object was displayed.</summary>
        <returns>
          <para>A task that represents the asynchronous PresentFromBarButtonItem operation.   The value of the TResult parameter is of type MonoTouch.UIKit.UIPrinterPickerCompletionResult.  To be added.</para>
        </returns>
        <remarks>
          <para copied="true">The PresentFromBarButtonItemAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromBarButtonItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentFromBarButtonItemAsync (MonoTouch.UIKit.UIBarButtonItem item, bool animated, out bool result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentFromBarButtonItemAsync(class MonoTouch.UIKit.UIBarButtonItem item, bool animated, bool result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MonoTouch.UIKit.UIBarButtonItem" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="animated">To be added.</param>
        <param name="result">To be added.</param>
        <summary>Asynchronously shows a <see cref="T:UIKit.UIPrinterPickerController" /> from this app as a popover that is anchored to a <see cref="T:UIKit.UIBarButtonItem" /> item, with or without animation, depending on <paramref name="animated" />, returning a task that provides the result.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromRect">
      <MemberSignature Language="C#" Value="public virtual bool PresentFromRect (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.UIKit.UIView view, bool animated, MonoTouch.UIKit.UIPrinterPickerCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PresentFromRect(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.UIKit.UIView view, bool animated, class MonoTouch.UIKit.UIPrinterPickerCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentFromRect:inView:animated:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.UIKit.UIPrinterPickerCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDUIPrinterPickerCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="view">To be added.</param>
        <param name="animated">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Shows a <see cref="T:UIKit.UIPrinterPickerController" /> from this app as a popover that is anchored to a <see cref="T:System.Drawing.RectangleF" /> object contained in a <see cref="T:UIKit.UIView" /> view, with or without animation, depending on <paramref name="animated" />, and code to run on completion, as a <see cref="T:UIKit.UIPrinterPickerCompletionHandler" /> object, and then returns whether the object was displayed.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromRectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentFromRectAsync (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.UIKit.UIView view, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentFromRectAsync(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.UIKit.UIView view, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" />
        <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="view">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Shows a  from this app as a popover that is anchored to a  object contained in a  view, with or without animation, depending on , and code to run on completion, as a  object, and then returns whether the object was displayed.</summary>
        <returns>
          <para>A task that represents the asynchronous PresentFromRect operation.   The value of the TResult parameter is of type MonoTouch.UIKit.UIPrinterPickerCompletionResult.  To be added.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="PresentFromRectAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentFromRectAsync (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.UIKit.UIView view, bool animated, out bool result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt; PresentFromRectAsync(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.UIKit.UIView view, bool animated, bool result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrinterPickerCompletionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" />
        <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="view">To be added.</param>
        <param name="animated">To be added.</param>
        <param name="result">To be added.</param>
        <summary>Shows a <see cref="T:UIKit.UIPrinterPickerController" /> from this app as a popover that is anchored to a <see cref="T:System.Drawing.RectangleF" /> object contained in a <see cref="T:UIKit.UIView" /> view, with or without animation, depending on <paramref name="animated" />, returning a task that provides the result.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedPrinter">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIPrinter SelectedPrinter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIPrinter SelectedPrinter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("selectedPrinter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPrinter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the selected <see cref="T:UIKit.UIPrinter" /> object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>
          <para>The instance that will respond to events and data requests.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>