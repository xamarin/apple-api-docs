<Type Name="UIGestureRecognizer" FullName="MonoTouch.UIKit.UIGestureRecognizer">
  <TypeSignature Language="C#" Value="public class UIGestureRecognizer : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIGestureRecognizer extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UIGestureRecognizer", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 3, 2, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for gesture recognizers.</summary>
    <remarks>
      <para>This abstract base class provides features common to recognizers of touch-oriented user gestures.</para>
    </remarks>
    <altmember cref="T:MonoTouch.UIKit.UITapGestureRecognizer" />
    <altmember cref="T:MonoTouch.UIKit.UIPinchGestureRecognizer" />
    <altmember cref="T:MonoTouch.UIKit.UIRotationGestureRecognizer" />
    <altmember cref="T:MonoTouch.UIKit.UISwipeGestureRecognizer" />
    <altmember cref="T:MonoTouch.UIKit.UIPanGestureRecognizer" />
    <altmember cref="T:MonoTouch.UIKit.UILongPressGestureRecognizer" />
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=6b7f700b-aad2-4d67-a437-3a3482728a1b">Example_Touch</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=82ff303e-bd49-43cb-9520-d471c625a3c5">Touches_Classic</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=cb71419a-f5de-4239-aa70-260ce1813e55">SimpleTextInput</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIGestureRecognizer_Class/index.html">Apple documentation for <c>UIGestureRecognizer</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
          To add methods that will be invoked upon recognition, you can use the AddTarget method.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer (MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="action">Code to invoke when the gesture is recognized.</param>
        <summary>Constructs a gesture recognizer and provides a method to invoke when the gesture is recognized.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UIGestureRecognizer (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="unified">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">Code to invoke when the gesture is recognized.</param>
        <summary>Initalizes a gesture recognizer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UIGestureRecognizer (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer (MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector action) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithTarget:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="target">Recipient for action messages that are sent by the receiver.</param>
        <param name="action">Code to invoke when the gesture is recognized.</param>
        <summary>Initializes a designated gesture-recognizer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer (MonoTouch.ObjCRuntime.Selector sel, MonoTouch.UIKit.UIGestureRecognizer.Token token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.ObjCRuntime.Selector sel, class MonoTouch.UIKit.UIGestureRecognizer/Token token) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sel" Type="MonoTouch.ObjCRuntime.Selector" />
        <Parameter Name="token" Type="MonoTouch.UIKit.UIGestureRecognizer+Token" />
      </Parameters>
      <Docs>
        <param name="sel">A selector that specifies the method that is implemented by the target to handle the gesture that is recognized by the receiver.</param>
        <param name="token">String constant to be used as a token.</param>
        <summary>Initalizes a gesture recognizer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIGestureRecognizer.Token AddTarget (MonoTouch.Foundation.NSAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.UIKit.UIGestureRecognizer/Token AddTarget(class MonoTouch.Foundation.NSAction action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIGestureRecognizer+Token</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="MonoTouch.Foundation.NSAction" />
      </Parameters>
      <Docs>
        <param name="action">The method to invoke when the gesture has been recognized.</param>
        <summary>Registers a new callback for when the gesture has been recognized.</summary>
        <returns>The returned token can be used later to remove this particular action from being invoked by the gesture recognizer using the <see cref="M:MonoTouch.UIKit.UIGestureRecognizer.RemoveTarget" /> method.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTarget" apistyle="unified">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIGestureRecognizer.Token AddTarget (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.UIKit.UIGestureRecognizer/Token AddTarget(class System.Action action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIGestureRecognizer+Token</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">The method to invoke when the gesture has been recognized.</param>
        <summary>Registers a new callback for when the gesture has been recognized.</summary>
        <returns>The returned token can be used later to remove this particular action from being invoked by the gesture recognizer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIGestureRecognizer.Token AddTarget (Action&lt;MonoTouch.Foundation.NSObject&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.UIKit.UIGestureRecognizer/Token AddTarget(class System.Action`1&lt;class MonoTouch.Foundation.NSObject&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIGestureRecognizer+Token</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;MonoTouch.Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="action">The method to invoke when the gesture has been recognized.</param>
        <summary>Registers a new callback for when the gesture has been recognized.</summary>
        <returns>The returned token can be used later to remove this particular action from being invoked by the gesture recognizer using the <see cref="M:MonoTouch.UIKit.UIGestureRecognizer.RemoveTarget" /> method.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public virtual void AddTarget (MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTarget(class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addTarget:action:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="target">An instance of NSObject that holds a method flagged with the specified selector.</param>
        <param name="action">The selector to invoke on the specified NSObject instance.</param>
        <summary>Low-level version of AddTarget.</summary>
        <remarks>Unlike the C#-based AddTarget method, this version of AddTarget requires both an NSObject instance plus a selector to invoke when the gesture is recognized.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowedPressTypes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSNumber[] AllowedPressTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSNumber[] AllowedPressTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("allowedPressTypes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAllowedPressTypes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSNumber[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowedTouchTypes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSNumber[] AllowedTouchTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSNumber[] AllowedTouchTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("allowedTouchTypes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAllowedTouchTypes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSNumber[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBePreventedByGestureRecognizer">
      <MemberSignature Language="C#" Value="public virtual bool CanBePreventedByGestureRecognizer (MonoTouch.UIKit.UIGestureRecognizer preventingGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanBePreventedByGestureRecognizer(class MonoTouch.UIKit.UIGestureRecognizer preventingGestureRecognizer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("canBePreventedByGestureRecognizer:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preventingGestureRecognizer" Type="MonoTouch.UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="preventingGestureRecognizer">To be added.</param>
        <summary>When overridden, allows the specified UIGestureRecognizer to prevent this UIGestureRecognizer from recognizing a gesture. </summary>
        <returns>If set to <see langword="true" />, this indicates that preventingGestureRecognizer can block the receiver from recognizing its gesture. Otherwise set to <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelsTouchesInView">
      <MemberSignature Language="C#" Value="public virtual bool CancelsTouchesInView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelsTouchesInView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("cancelsTouchesInView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setCancelsTouchesInView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether touches recognized as part of a gesture should be delivered to the underlying UIView.</summary>
        <value>If set to <see langword="true" />, the receiver recognizes its gesture. Otherwise set to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanPreventGestureRecognizer">
      <MemberSignature Language="C#" Value="public virtual bool CanPreventGestureRecognizer (MonoTouch.UIKit.UIGestureRecognizer preventedGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanPreventGestureRecognizer(class MonoTouch.UIKit.UIGestureRecognizer preventedGestureRecognizer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("canPreventGestureRecognizer:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preventedGestureRecognizer" Type="MonoTouch.UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="preventedGestureRecognizer">To be added.</param>
        <summary>When overridden, indicates that this UIGestureRecognizer can prevent the specified UIGestureRecognizer from recognizing a gesture.</summary>
        <returns>If set to <see langword="true" />, the receiver can block preventedGestureRecognizer from recognizing its gesture. Otherwise set to <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelaysTouchesBegan">
      <MemberSignature Language="C#" Value="public virtual bool DelaysTouchesBegan { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelaysTouchesBegan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("delaysTouchesBegan")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDelaysTouchesBegan:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UIGestureRecognizer should delay sending touches to the underlying UIVew during the gesture's begin phase.</summary>
        <value>If set to <see langword="true" />, then the receiver delays sending touches in a begin phase to its view. Otherwise set to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelaysTouchesEnded">
      <MemberSignature Language="C#" Value="public virtual bool DelaysTouchesEnded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelaysTouchesEnded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("delaysTouchesEnded")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDelaysTouchesEnded:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UIGestureRecgonizer should delay sending touches to the underlying UIView during the gesture's end phase.</summary>
        <value>If set to <see langword="true" />, then the receiver delays sending touches in an end phase to its view. Otherwise set to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIGestureRecognizerDelegate Delegate { get; set; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIGestureRecognizerDelegate Delegate" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.IUIGestureRecognizerDelegate Delegate { get; set; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.IUIGestureRecognizerDelegate Delegate" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">MonoTouch.UIKit.UIGestureRecognizerDelegate</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.UIKit.IUIGestureRecognizerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the MonoTouch.UIKit.UIGestureRecognizerDelegate model class which acts as the class delegate.</summary>
        <value>
          <para>The instance of the MonoTouch.UIKit.UIGestureRecognizerDelegate model class</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, use the WeakDelegate property instead if you want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIGestureRecognizer object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIGestureRecognizer class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the UIGestureRecognizer ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the UIGestureRecognizer is enabled.</summary>
        <value>If set to <see langword="true" />, indicates whether the gesture recognizer is enabled. Otherwise set to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnorePress">
      <MemberSignature Language="C#" Value="public void IgnorePress (MonoTouch.UIKit.UIPress button, MonoTouch.UIKit.UIPressesEvent event);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IgnorePress(class MonoTouch.UIKit.UIPress button, class MonoTouch.UIKit.UIPressesEvent event) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="MonoTouch.UIKit.UIPress" />
        <Parameter Name="event" Type="MonoTouch.UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="button">To be added.</param>
        <param name="event">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreTouch">
      <MemberSignature Language="C#" Value="public virtual void IgnoreTouch (MonoTouch.UIKit.UITouch touch, MonoTouch.UIKit.UIEvent forEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IgnoreTouch(class MonoTouch.UIKit.UITouch touch, class MonoTouch.UIKit.UIEvent forEvent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("ignoreTouch:forEvent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touch" Type="MonoTouch.UIKit.UITouch" />
        <Parameter Name="forEvent" Type="MonoTouch.UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="touch">The part of the current multi-touch sequence and associated that is associated with the specified event.</param>
        <param name="forEvent">Event that includes a reference to touch.</param>
        <summary>Ignores a specific touch of the given event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationInView">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF LocationInView (MonoTouch.UIKit.UIView view);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF LocationInView(class MonoTouch.UIKit.UIView view) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGPoint LocationInView (MonoTouch.UIKit.UIView view);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGPoint LocationInView(class MonoTouch.UIKit.UIView view) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("locationInView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.PointF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="view">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>The PointF in the given UIView of the gesture represented by this UIGestureRecognizer.</summary>
        <returns>A point in the views's local coordinate system identifying the location of the gesture.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationOfTouch">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF LocationOfTouch (int touchIndex, MonoTouch.UIKit.UIView inView);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF LocationOfTouch(int32 touchIndex, class MonoTouch.UIKit.UIView inView) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGPoint LocationOfTouch (nint touchIndex, MonoTouch.UIKit.UIView inView);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGPoint LocationOfTouch(valuetype System.nint touchIndex, class MonoTouch.UIKit.UIView inView) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("locationOfTouch:inView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.PointF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchIndex" Type="System.Int32" apistyle="classic" />
        <Parameter Name="inView" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="touchIndex" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="touchIndex"> Index for a UITouch object located in a private array that is maintained by the receiver.</param>
        <param name="inView">
          <para>The view where the gesture took place.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>The location, in the local coordinate system of the UIView, of one of the gesture's touches.</summary>
        <returns>A point in the coordinate system of the view that identifies the touch location.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfTouches">
      <MemberSignature Language="C#" Value="public virtual int NumberOfTouches { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 NumberOfTouches" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint NumberOfTouches { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint NumberOfTouches" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("numberOfTouches")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of touches involved in the gesture.</summary>
        <value>The number of touches in a private array that is maintained by the receiver.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParametrizedSelector">
      <MemberSignature Language="C#" Value="public static MonoTouch.ObjCRuntime.Selector ParametrizedSelector;" />
      <MemberSignature Language="ILAsm" Value=".field public static class MonoTouch.ObjCRuntime.Selector ParametrizedSelector" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Don't use, this field has been removed the Unified API. Use 'Selector.GetHandle (&lt;string&gt;)' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ObjCRuntime.Selector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A selector that points to "target:", that is, a method that takes one NSObject argument.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesBegan">
      <MemberSignature Language="C#" Value="public virtual void PressesBegan (MonoTouch.Foundation.NSSet presses, MonoTouch.UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesBegan(class MonoTouch.Foundation.NSSet presses, class MonoTouch.UIKit.UIPressesEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pressesBegan:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="MonoTouch.Foundation.NSSet" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:Monotouch.UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:Monotouch.UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates that a physical button has been pressed on a remote or game controller.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesBegan" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void PressesBegan (MonoTouch.Foundation.NSSet&lt;MonoTouch.UIKit.UIPress&gt; presses, MonoTouch.UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesBegan(class MonoTouch.Foundation.NSSet`1&lt;class MonoTouch.UIKit.UIPress&gt; presses, class MonoTouch.UIKit.UIPressesEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pressesBegan:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="MonoTouch.Foundation.NSSet&lt;MonoTouch.UIKit.UIPress&gt;" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:Monotouch.UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:Monotouch.UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates that a physical button has been pressed on a remote or game controller.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesCancelled">
      <MemberSignature Language="C#" Value="public virtual void PressesCancelled (MonoTouch.Foundation.NSSet presses, MonoTouch.UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesCancelled(class MonoTouch.Foundation.NSSet presses, class MonoTouch.UIKit.UIPressesEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pressesCancelled:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="MonoTouch.Foundation.NSSet" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:Monotouch.UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:Monotouch.UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates a physical button-press event has been cancelled due to a system event.</summary>
        <remarks>
          <para>Developers who handle press events must implement this method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesCancelled" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void PressesCancelled (MonoTouch.Foundation.NSSet&lt;MonoTouch.UIKit.UIPress&gt; presses, MonoTouch.UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesCancelled(class MonoTouch.Foundation.NSSet`1&lt;class MonoTouch.UIKit.UIPress&gt; presses, class MonoTouch.UIKit.UIPressesEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pressesCancelled:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="MonoTouch.Foundation.NSSet&lt;MonoTouch.UIKit.UIPress&gt;" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:Monotouch.UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:Monotouch.UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates a physical button-press event has been cancelled due to a system event.</summary>
        <remarks>
          <para>Developers who handle press events must implement this method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesChanged">
      <MemberSignature Language="C#" Value="public virtual void PressesChanged (MonoTouch.Foundation.NSSet presses, MonoTouch.UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesChanged(class MonoTouch.Foundation.NSSet presses, class MonoTouch.UIKit.UIPressesEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pressesChanged:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="MonoTouch.Foundation.NSSet" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:Monotouch.UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:Monotouch.UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates that the <see cref="P:Monotouch.UIKit.UIPress.Force" /> value of the <paramref name="evt" /> has changed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesChanged" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void PressesChanged (MonoTouch.Foundation.NSSet&lt;MonoTouch.UIKit.UIPress&gt; presses, MonoTouch.UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesChanged(class MonoTouch.Foundation.NSSet`1&lt;class MonoTouch.UIKit.UIPress&gt; presses, class MonoTouch.UIKit.UIPressesEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pressesChanged:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="MonoTouch.Foundation.NSSet&lt;MonoTouch.UIKit.UIPress&gt;" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:Monotouch.UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:Monotouch.UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates that the <see cref="P:Monotouch.UIKit.UIPress.Force" /> value of the <paramref name="evt" /> has changed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesEnded">
      <MemberSignature Language="C#" Value="public virtual void PressesEnded (MonoTouch.Foundation.NSSet presses, MonoTouch.UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesEnded(class MonoTouch.Foundation.NSSet presses, class MonoTouch.UIKit.UIPressesEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pressesEnded:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="MonoTouch.Foundation.NSSet" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:Monotouch.UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:Monotouch.UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates the ending of a press of a physical button on a remote or game controller.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesEnded" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void PressesEnded (MonoTouch.Foundation.NSSet&lt;MonoTouch.UIKit.UIPress&gt; presses, MonoTouch.UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesEnded(class MonoTouch.Foundation.NSSet`1&lt;class MonoTouch.UIKit.UIPress&gt; presses, class MonoTouch.UIKit.UIPressesEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pressesEnded:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="MonoTouch.Foundation.NSSet&lt;MonoTouch.UIKit.UIPress&gt;" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:Monotouch.UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:Monotouch.UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates the ending of a press of a physical button on a remote or game controller.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTarget">
      <MemberSignature Language="C#" Value="public void RemoveTarget (MonoTouch.UIKit.UIGestureRecognizer.Token token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveTarget(class MonoTouch.UIKit.UIGestureRecognizer/Token token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="MonoTouch.UIKit.UIGestureRecognizer+Token" />
      </Parameters>
      <Docs>
        <param name="token">A Token returned by the AddTarget method.</param>
        <summary>Removes the callback method for the specified gesture being recognized, based on the token that was returned by AddTarget.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTarget">
      <MemberSignature Language="C#" Value="public virtual void RemoveTarget (MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTarget(class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeTarget:action:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="target">
          <para>The NSObject instance where the method will be invoked.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="action">
          <para>The name of the selector in the target object that was registered with AddTarget.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Low-level counterpart to the low-level AddTarget method.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequireGestureRecognizerToFail">
      <MemberSignature Language="C#" Value="public virtual void RequireGestureRecognizerToFail (MonoTouch.UIKit.UIGestureRecognizer otherGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequireGestureRecognizerToFail(class MonoTouch.UIKit.UIGestureRecognizer otherGestureRecognizer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("requireGestureRecognizerToFail:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherGestureRecognizer" Type="MonoTouch.UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="otherGestureRecognizer">To be added.</param>
        <summary>Causes this UIGestureRecognizer to only work if the specified UIGestureRecognizer fails (e.g., a single-tap gesture might require that a double-tap gesture fail).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("reset")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden, allows the application developer to reset internal state when a gesture is recognized.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBegin">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIGestureProbe ShouldBegin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIGestureProbe ShouldBegin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIGestureProbe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>
        </value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeRequiredToFailBy">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIGesturesProbe ShouldBeRequiredToFailBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIGesturesProbe ShouldBeRequiredToFailBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIGesturesProbe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>If set to <see langword="true" />, sets up the failure requirement. Otherwise set to <see langword="false" />.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeRequiredToFailByGestureRecognizer">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBeRequiredToFailByGestureRecognizer (MonoTouch.UIKit.UIGestureRecognizer otherGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBeRequiredToFailByGestureRecognizer(class MonoTouch.UIKit.UIGestureRecognizer otherGestureRecognizer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("shouldBeRequiredToFailByGestureRecognizer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherGestureRecognizer" Type="MonoTouch.UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="otherGestureRecognizer">A subclass instance of UIGestureRecognizer.</param>
        <summary>Specifically overridden to indicate that a receiver requires the specified gesture recognizer to fail. </summary>
        <returns>If set to <see langword="true" />, sets up the failure requirement. Otherwise set to <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReceivePress">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIGesturesPress ShouldReceivePress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIGesturesPress ShouldReceivePress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIGesturesPress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReceiveTouch">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITouchEventArgs ShouldReceiveTouch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITouchEventArgs ShouldReceiveTouch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITouchEventArgs</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>
        </value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRecognizeSimultaneously">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIGesturesProbe ShouldRecognizeSimultaneously { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIGesturesProbe ShouldRecognizeSimultaneously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIGesturesProbe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>
        </value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRequireFailureOf">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIGesturesProbe ShouldRequireFailureOf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIGesturesProbe ShouldRequireFailureOf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIGesturesProbe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>
        </value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRequireFailureOfGestureRecognizer">
      <MemberSignature Language="C#" Value="public virtual bool ShouldRequireFailureOfGestureRecognizer (MonoTouch.UIKit.UIGestureRecognizer otherGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldRequireFailureOfGestureRecognizer(class MonoTouch.UIKit.UIGestureRecognizer otherGestureRecognizer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("shouldRequireFailureOfGestureRecognizer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherGestureRecognizer" Type="MonoTouch.UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="otherGestureRecognizer">To be added.</param>
        <summary>Returns a value that tells whether the receiver requires <paramref name="otherGestureRecognizer" /> to fail.</summary>
        <returns>If set to <see langword="true" />, it sets up the failure requirement. Otherwise set to <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIGestureRecognizerState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIGestureRecognizerState State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("state")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setState:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIGestureRecognizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current state of this UIGestureRecognizer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesBegan">
      <MemberSignature Language="C#" Value="public virtual void TouchesBegan (MonoTouch.Foundation.NSSet touches, MonoTouch.UIKit.UIEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TouchesBegan(class MonoTouch.Foundation.NSSet touches, class MonoTouch.UIKit.UIEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("touchesBegan:withEvent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="MonoTouch.Foundation.NSSet" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="touches">The set of UITouch instances in the event that is represented by the event that represents the touches in the UITouchPhaseBegan phase.</param>
        <param name="evt">Represents the event that the touches belong to.</param>
        <summary>Indicates that one or more fingers have touched down in the associated UIView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCancelled">
      <MemberSignature Language="C#" Value="public virtual void TouchesCancelled (MonoTouch.Foundation.NSSet touches, MonoTouch.UIKit.UIEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TouchesCancelled(class MonoTouch.Foundation.NSSet touches, class MonoTouch.UIKit.UIEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("touchesCancelled:withEvent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="MonoTouch.Foundation.NSSet" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="touches">The set of UITouch instances in the event that is represented by the event that represents the touches in the UITouchPhaseCancelled phase.</param>
        <param name="evt">Represents the event that the touches belong to.</param>
        <summary>Indicates that a system event (e.g., a low-memory warning) has cancelled the touch event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesEnded">
      <MemberSignature Language="C#" Value="public virtual void TouchesEnded (MonoTouch.Foundation.NSSet touches, MonoTouch.UIKit.UIEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TouchesEnded(class MonoTouch.Foundation.NSSet touches, class MonoTouch.UIKit.UIEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("touchesEnded:withEvent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="MonoTouch.Foundation.NSSet" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="touches">The set of UITouch instances in the event that is represented by the event that represents the touches in the UITouchPhaseEnded phase.</param>
        <param name="evt">Represents the event that the touches belong to.</param>
        <summary>Indicates that one or more fingers have lifted in the associated UIView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesEstimatedPropertiesUpdated">
      <MemberSignature Language="C#" Value="public virtual void TouchesEstimatedPropertiesUpdated (MonoTouch.Foundation.NSSet touches);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TouchesEstimatedPropertiesUpdated(class MonoTouch.Foundation.NSSet touches) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("touchesEstimatedPropertiesUpdated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 1, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="MonoTouch.Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="touches">To be added.</param>
        <summary>Called when the estimated properties of <paramref name="touches" /> have been updated.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesMoved">
      <MemberSignature Language="C#" Value="public virtual void TouchesMoved (MonoTouch.Foundation.NSSet touches, MonoTouch.UIKit.UIEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TouchesMoved(class MonoTouch.Foundation.NSSet touches, class MonoTouch.UIKit.UIEvent evt) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("touchesMoved:withEvent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="MonoTouch.Foundation.NSSet" />
        <Parameter Name="evt" Type="MonoTouch.UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="touches">The set of UITouch instances in the event that is represented by the event that represents the touches in the UITouchPhaseMoved phase.</param>
        <param name="evt">Represents the event that the touches belong to.</param>
        <summary>Indicates that one or more fingers have moved in the associated UIView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView View { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIView View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("view")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIView to which this UIGestureRecognizer is attached. Read-only.</summary>
        <value>A point in the coordinate system of the view identifying the location of the gesture.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>
          <para>The instance that will respond to events and data requests.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
