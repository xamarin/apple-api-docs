<Type Name="UITableViewDataSource" FullName="MonoTouch.UIKit.UITableViewDataSource">
  <TypeSignature Language="C#" Value="public abstract class UITableViewDataSource : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.UIKit.IUITableViewDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UITableViewDataSource extends MonoTouch.Foundation.NSObject implements class MonoTouch.ObjCRuntime.INativeObject, class MonoTouch.UIKit.IUITableViewDataSource, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.UIKit.IUITableViewDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UITableViewDataSource", false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The data source for a <see cref="T:MonoTouch.UIKit.UITableView" />. Xamarin.iOS developers should prefer to use <see cref="T:MonoTouch.UIKit.UITableViewSource" /> instead of this class.</summary>
    <remarks>
      <para>Implementing <see cref="T:MonoTouch.UIKit.UITableView" /> often requires subclasses of both <see cref="T:MonoTouch.UIKit.UITableViewDataSource" /> and <see cref="T:MonoTouch.UIKit.UITableViewDelegate" /> to provide data and behavior for the table view. Xamarin.iOS provides a single class - <see cref="T:MonoTouch.UIKit.UITableViewSource" /> - so that only one class needs to be implemented.</para>
      <para>The <see cref="T:MonoTouch.UIKit.UITableViewDataSource" /> class methods provide a table view with all the information it requires to display its data - such as informing it of the number of sections and rows, and what cell view to use for each row.</para>
      <para>The universally-important function of <see cref="T:MonoTouch.UIKit.UITableViewDataSource" /> is to provide individual <see cref="T:MonoTouch.UIKit.UITableViewCell" />s in response to calls to <see cref="M:MonoTouch.UIKit.UITableViewDataSource.GetCell" />. That call takes as arguments the <see cref="T:MonoTouch.UIKit.UITableView" /> in question and an <see cref="T:MonoTouch.Foundation.NSIndexPath" />. That <see cref="T:MonoTouch.Foundation.NSIndexPath" /> is based, in turn, on calls to <see cref="M:MonoTouch.UIKit.UITableViewDataSource.NumberOfSections" /> and <see cref="M:MonoTouch.UIKit.UITableViewDataSource.RowsInSection" />, so the application developer must, at a minimum, override these three functions. (The <see cref="T:MonoTouch.UIKit.UITableView" /> additionally calls <see cref="M:MonoTouch.UIKit.UITableViewDelegate.GetHeightForRow" /> and other layout-related methods for header and footer views and the application developer must override these as appropriate.)</para>
      <para>Static tables may return references to pre-allocated <see cref="T:MonoTouch.UIKit.UITableViewCell" />s from calls to <see cref="M:MonoTouch.UIKit.UITableViewDataSource.GetCell" />. Dynamic tables should use the <see cref="T:MonoTouch.UIKit.UITableView" />'s built-in cell reuse cache by calling <see cref="M:MonoTouch.UIKit.UITableView.DequeueReusableCell" />. In iOS 6 and later, application developers should use <see cref="M:MonoTouch.UIKit.UITableView.RegisterClassForCellReuse" /> or <see cref="M:MonoTouch.UIKit.UITableView.RegisterNibForCellReuse" /> during initialization, in which case <see cref="M:MonoTouch.UIKit.UITableView.DequeueReusableCell" /> will instantiate new <see cref="T:MonoTouch.UIKit.UITableViewCell" />s as necessary. If application developers are targeting earlier iOS versions, their override of <see cref="M:MonoTouch.UIKit.UITableViewDataSource.GetCell" /> must check for an <see langword="null" /> return from <see cref="M:MonoTouch.UIKit.UITableView.DequeueReusableCell" /> and instantiate a <see cref="T:MonoTouch.UIKit.UITableViewCell" /> as necessary. </para>
    </remarks>
    <altmember cref="T:MonoTouch.UIKit.UITableView" />
    <altmember cref="T:MonoTouch.UIKit.UITableViewSource" />
    <altmember cref="T:MonoTouch.UIKit.UITableViewCell" />
    <altmember cref="T:MonoTouch.UIKit.UITableViewDelegate" />
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=23a2571b-45eb-4889-bb67-d88937cb68c1">monocatalog</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewDataSource_Protocol/index.html">Apple documentation for <c>UITableViewDataSource</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITableViewDataSource ();" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UITableViewDataSource ();" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public UITableViewDataSource (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITableViewDataSource (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UITableViewDataSource (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITableViewDataSource (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UITableViewDataSource (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanEditRow">
      <MemberSignature Language="C#" Value="public virtual bool CanEditRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanEditRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:canEditRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row.</param>
        <param name="indexPath">Location of the row.</param>
        <summary>Whether the row located at <paramref name="indexPath" /> should be editable.</summary>
        <returns>
          <see langword="true" /> if the row is editable, otherwise <see langword="false" />.</returns>
        <remarks>
          <para>This method allows specific rows to be editable or not. If this method is not implemented, all rows are assumed to be editable. Editable rows display the insertion or deletion control in their cell when the table view is in editing mode.</para>
          <para>Rows that are not editable will ignore the <see cref="P:MonoTouch.UIKit.UITableViewCell.EditingStyle" /> property and will not be indented.</para>
          <para>Rows that are editable, but should not display the insertion or deletion control, can return <see cref="F:MonoTouch.UIKit.UITableViewCellEditingStyle.None" /> from the <see cref="M:MonoTouch.UIKit.UITableViewSource.EditingStyleForRow(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath)" /> method on the table view's <see cref="T:MonoTouch.UIKit.UITableViewSource" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanMoveRow">
      <MemberSignature Language="C#" Value="public virtual bool CanMoveRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanMoveRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:canMoveRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row.</param>
        <param name="indexPath">Location of the row.</param>
        <summary>Whether the row located at <paramref name="indexPath" /> can be moved to another location in the table view.</summary>
        <returns>
          <see langword="true" /> if the row can be moved, otherwise <see langword="false" />.</returns>
        <remarks>
          <para>This method allows specific rows to have the reordering control to be hidden for specific rows. By default, the reordering control is always shown if <see cref="M:MonoTouch.UIKit.UITableViewSource.MoveRow(MonoTouch.UIKit.UITableView,MonoTouch.Foundation.NSIndexPath,MonoTouch.Foundation.NSIndexPath)" /> is implemented on the <see cref="M:MonoTouch.UIKit.UITableViewSource" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEditingStyle">
      <MemberSignature Language="C#" Value="public virtual void CommitEditingStyle (MonoTouch.UIKit.UITableView tableView, MonoTouch.UIKit.UITableViewCellEditingStyle editingStyle, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitEditingStyle(class MonoTouch.UIKit.UITableView tableView, valuetype MonoTouch.UIKit.UITableViewCellEditingStyle editingStyle, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:commitEditingStyle:forRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="editingStyle" Type="MonoTouch.UIKit.UITableViewCellEditingStyle" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view requesting insertion or deletion.</param>
        <param name="editingStyle">Cell editing style requested for the row at <paramref name="indexPath" />, such as <see cref="F:MonoTouch.UIKit.UITableViewEditingStyle.Insert" /> or <see cref="F:MonoTouch.UIKit.UITableViewEditingStyle.Delete" />.</param>
        <param name="indexPath">Location of the row.</param>
        <summary>Commits the insertion or deletion of the specified row.</summary>
        <remarks>
          <para>When the user taps the insertion (green plus) or Delete button in a cell, the table view calls this method to commit the change (if the user taps the deletion (red minus) button, that simply reveals the Delete button).</para>
          <para>This method should commit the <paramref name="editingStyle" /> by calling <see cref="T:MonoTouch.UIKit.UITableView" /> methods <see cref="M:MonoTouch.UIKit.UITableView.InsertRows(MonoTouch.Foundation.NSIndexPath[],MonoTouch.UIKit.UITableViewRowAnimation)" /> or <see cref="M:MonoTouch.UIKit.UITableView.DeleteRows(MonoTouch.Foundation.NSIndexPath[],MonoTouch.UIKit.UITableViewRowAnimation)" />.</para>
          <para>This method must be implemented to enable the swipe-to-delete feature of the table view control.</para>
          <para>Application developers should not call <see cref="M:MonoTouch.UIKit.UITableView.SetEditing(System.Boolean,System.Boolean)" /> in this method. If for some reason this is necessary, developers must invoke it after a delay using <see cref="M:MonoTouch.Foundation.PerformSelector(MonoTouch.ObjCRuntime.Selector,MonoTouch.Foundation.NSObject,System.Double)" />.</para>
          <para>[UITableViewDataSource]</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCell">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.UIKit.UITableViewCell GetCell (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITableViewCell GetCell(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:cellForRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITableViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view requesting the cell.</param>
        <param name="indexPath">Location of the row where the cell will be displayed.</param>
        <summary>Called by the table view to get populate the row at <paramref name="indexPath" /> with a cell view.</summary>
        <returns>An object that inherits from <see cref="T:MonoTouch.UIKit.UITableViewCell" /> that the table can use for the specified row. Do not return <see langword="null" /> or an assertion will be raised.</returns>
        <remarks>
          <para>This method is called once for each row that is visible on screen. During scrolling, it is called additional times as new rows come into view. Cells that disappear from view are cached by the table view. The implementation of this method should call the table view's <see cref="M:MonoTouch.UIKit.UITableView.DequeueReusableCell(MonoTouch.Foundation.NSString)" /> method to obtain a cached cell object for reuse. If <see cref="M:MonoTouch.UIKit.UITableView.RegisterClassForCellReuse" /> or <see cref="M:MonoTouch.UIKit.UITableView.RegisterNibForCellReuse" /> have not been called during initialization, application developers must check the result of <see cref="M:MonoTouch.UIKit.UITableView.DequeueReusableCell" /> for <see langword="null" /> and instantiate a new <see cref="T:MonoTouch.UIKit.UITableViewCell" /> as necessary).</para>
          <para>Once a cell is retrieved, all of its relevant properties must be set based on the <paramref name="indexPath" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveRow">
      <MemberSignature Language="C#" Value="public virtual void MoveRow (MonoTouch.UIKit.UITableView tableView, MonoTouch.Foundation.NSIndexPath sourceIndexPath, MonoTouch.Foundation.NSIndexPath destinationIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveRow(class MonoTouch.UIKit.UITableView tableView, class MonoTouch.Foundation.NSIndexPath sourceIndexPath, class MonoTouch.Foundation.NSIndexPath destinationIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:moveRowAtIndexPath:toIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="sourceIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
        <Parameter Name="destinationIndexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the row being moved.</param>
        <param name="sourceIndexPath">Location of the row to be moved.</param>
        <param name="destinationIndexPath">New location of the row.</param>
        <summary>Called when a row has been moved so that the data source can 'implement' the changed row position that has been performed in the user interface. This ensures the data is kept in-sync with what is being displayed.</summary>
        <remarks>
          <para>When a row is moved (when the table view is in edit mode), the source needs to be updated to reflect that change. Implement this method to persist the updated row position in the data source.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfSections">
      <MemberSignature Language="C#" Value="public virtual int NumberOfSections (MonoTouch.UIKit.UITableView tableView);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 NumberOfSections(class MonoTouch.UIKit.UITableView tableView) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint NumberOfSections (MonoTouch.UIKit.UITableView tableView);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint NumberOfSections(class MonoTouch.UIKit.UITableView tableView) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("numberOfSectionsInTableView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view displaying the sections.</param>
        <summary>Returns the number of sections that are required to display the data.</summary>
        <returns>Number of sections required to display the data. The default is 1 (a table must have at least one section).</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowsInSection">
      <MemberSignature Language="C#" Value="public abstract int RowsInSection (MonoTouch.UIKit.UITableView tableView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 RowsInSection(class MonoTouch.UIKit.UITableView tableView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public abstract nint RowsInSection (MonoTouch.UIKit.UITableView tableView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint RowsInSection(class MonoTouch.UIKit.UITableView tableView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:numberOfRowsInSection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">Index of the section containing the rows.</param>
        <summary>Called by the table view to find out how many rows are to be rendered in the section specified by <paramref name="section" />.</summary>
        <returns>Number of rows in the section at index <paramref name="section" />.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SectionFor">
      <MemberSignature Language="C#" Value="public virtual int SectionFor (MonoTouch.UIKit.UITableView tableView, string title, int atIndex);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 SectionFor(class MonoTouch.UIKit.UITableView tableView, string title, int32 atIndex) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint SectionFor (MonoTouch.UIKit.UITableView tableView, string title, nint atIndex);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint SectionFor(class MonoTouch.UIKit.UITableView tableView, string title, valuetype System.nint atIndex) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:sectionForSectionIndexTitle:atIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="atIndex" Type="System.Int32" apistyle="classic" />
        <Parameter Name="atIndex" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the section.</param>
        <param name="title">The title that's displayed in the table view's index.</param>
        <param name="atIndex">The index of the title in the array returned from the <see cref="P:MonoTouch.UIKit.UITableViewSource.SectionIndexTitles" />.</param>
        <summary>Returns the index of the section with the given <paramref name="tableView" /> and <paramref name="atIndex" />.</summary>
        <returns>The index of the section in the table view.</returns>
        <remarks>
          <para>This method is only required for table views that have an index: they must have the <see cref="F:MonoTouch.UIKit.UITableViewStyle.Plain" /> style and implement the <see cref="P:MonoTouch.UIKit.UITableViewSource.SectionIndexTitles" /> property.</para>
          <para>The index for a table view may contain fewer items than the number of actual sections in the table. This method is passed the text and index of an item in the index, and should return the position of the corresponding section. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SectionIndexTitles">
      <MemberSignature Language="C#" Value="public virtual string[] SectionIndexTitles (MonoTouch.UIKit.UITableView tableView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] SectionIndexTitles(class MonoTouch.UIKit.UITableView tableView) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("sectionIndexTitlesForTableView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view that is displaying the index.</param>
        <summary>Returns an array of titles to be displayed as an index on the table view.</summary>
        <returns>Array of titles, for example to display an alphabetized list return an array of strings from "A" to "Z".</returns>
        <remarks>
          <para>The index list appears along the right edge of a table view.</para>
          <para>Only tables with the <see cref="F:MonoTouch.UIKit.UITableViewStyle.Plain" /> style should implement this property.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleForFooter">
      <MemberSignature Language="C#" Value="public virtual string TitleForFooter (MonoTouch.UIKit.UITableView tableView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TitleForFooter(class MonoTouch.UIKit.UITableView tableView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual string TitleForFooter (MonoTouch.UIKit.UITableView tableView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TitleForFooter(class MonoTouch.UIKit.UITableView tableView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:titleForFooterInSection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the section.</param>
        <param name="section">Index of the section displaying the footer.</param>
        <summary>Called to populate the footer for the specified section.</summary>
        <returns>Text to display in the section footer, or <see langword="null" /> if no title is required.</returns>
        <remarks>
          <para>Table views use a fixed style for the section footer. To customize the appearance of the footer, return a custom view from <see cref="M:MonoTouch.UIKit.UITableViewSource.GetViewForFooter(MonoTouch.UIKit.UITableView,System.Int32)" /> instead of implementing this method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleForHeader">
      <MemberSignature Language="C#" Value="public virtual string TitleForHeader (MonoTouch.UIKit.UITableView tableView, int section);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TitleForHeader(class MonoTouch.UIKit.UITableView tableView, int32 section) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual string TitleForHeader (MonoTouch.UIKit.UITableView tableView, nint section);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TitleForHeader(class MonoTouch.UIKit.UITableView tableView, valuetype System.nint section) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("tableView:titleForHeaderInSection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="MonoTouch.UIKit.UITableView" />
        <Parameter Name="section" Type="System.Int32" apistyle="classic" />
        <Parameter Name="section" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tableView">Table view containing the section.</param>
        <param name="section">Index of the section displaying the header.</param>
        <summary>Called to populate the header for the specified section.</summary>
        <returns>Text to display in the section header, or <see langword="null" /> if no title is required.</returns>
        <remarks>
          <para>Table views use a fixed style for the section header. To customize the appearance of the header, return a custom view from <see cref="M:MonoTouch.UIKit.UITableViewSource.GetViewForHeader(MonoTouch.UIKit.UITableView,System.Int32)" /> instead of implementing this method.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
