<Type Name="UICollectionViewDataSource" FullName="MonoTouch.UIKit.UICollectionViewDataSource">
  <TypeSignature Language="C#" Value="public abstract class UICollectionViewDataSource : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.UIKit.IUICollectionViewDataSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UICollectionViewDataSource extends MonoTouch.Foundation.NSObject implements class MonoTouch.ObjCRuntime.INativeObject, class MonoTouch.UIKit.IUICollectionViewDataSource, class System.IDisposable" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.UIKit.IUICollectionViewDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UICollectionViewDataSource", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The data source for a <see cref="T:MonoTouch.UIKit.UICollectionView" />.</summary>
    <remarks>
      <para>
        As with other parts of iOS, such as <see cref="T:MonoTouch.UIKit.UITableView" /> and <see cref="T:MonoTouch.MapKit.MKMapView" />, <see cref="T:MonoTouch.UIKit.UICollectionView" /> gets its data from a data source, which is exposed in MonoTouch via the <see cref="T:MonoTouch.UIKit.UICollectionViewDataSource" /> class. This class is responsible for providing the content to the <see cref="T:MonoTouch.UIKit.UICollectionView" /> including:
      </para>
      <list type="bullet">
        <item>
          <term>Cells – Returned from <see cref="M:MonoTouch.UIKit.UICollectionViewDataSource.GetCell" /> method.</term>
        </item>
        <item>
          <term>Supplementary Views – Returned from <see cref="M:MonoTouch.UIKit.UICollectionViewDataSource.GetViewForSupplementaryElement" /> method.</term>
        </item>
        <item>
          <term>Number of sections – Returned from <see cref="M:MonoTouch.UIKit.UICollectionViewDataSource.NumberOfSections" /> method. Defaults to 1 if not implemented.</term>
        </item>
        <item>
          <term>Number of items per section – Returned from <see cref="M:MonoTouch.UIKit.UICollectionViewDataSource.GetItemsCount" /> method.</term>
        </item>
      </list>
      <para>The <see cref="T:MonoTouch.UIKit.UICollectionView" /> maintains a reuse queue, which efficiently reuses <see cref="T:MonoTouch.UIKit.UICollectionReusableView" />s without allocating and de-allocating any more than necessary. The <see cref="M:MonoTouch.UIKit.UICollectionViewDataSource.GetCell" /> and <see cref="M:MonoTouch.UIKit.UICollectionViewDataSource.GetViewForSupplementaryElement" /> are the functions that mutate the values of <see cref="T:MonoTouch.UIKit.UICollectionReusableView" /> component views. Because these methods may be called frequently during scrolling (particularly <see cref="M:MonoTouch.UIKit.UICollectionViewDataSource.GetCell" />), the application developer should avoid unnecessary calculation in them.</para>
      <para>The following code, taken from the "Introduction to Collection Views," shows a simple <see cref="T:MonoTouch.UIKit.UICollectionViewDataSource" /> implementation. There are 3 sections and a large <c>animal</c> array representing model data. The number of items per section is 1/3 of the total size of the <c>animals</c> array. The <c>AnimalCell</c> type is a subtype of <see cref="T:MonoTouch.UIKit.UICollectionViewCell" /> and is defined as having a <see cref="T:MonoTouch.UIKit.UIImage" /><c>Image</c> property; the <see cref="M:MonoTouch.UIKit.UICollectionViewDataSource.GetCell" /> method sets this property in the reused <c>animalCell</c> from the <c>animals</c> data as appropriate. Similarly, the <see cref="M:MonoTouch.UIKit.UICollectionViewDataSource" /> sets the <c>Text</c> property of a <c>Header</c> type defined in the project. </para>
      <example>
        <code lang="C#"><![CDATA[
          protected const int SectionCount = 3;
          
          public override int NumberOfSections (UICollectionView collectionView)
          {
            return SectionCount;
          }
          
          public override int GetItemsCount (UICollectionView collectionView, int section)
          {
            return animals.Count / SectionCount;
          }
          
          public override UICollectionViewCell GetCell (UICollectionView collectionView, MonoTouch.Foundation.NSIndexPath indexPath)
          {
            var animalCell = (AnimalCell)collectionView.DequeueReusableCell (animalCellId, indexPath);
          
            var animal = animals [indexPath.Section * (animals.Count / SectionCount) + indexPath.Row];
          
            animalCell.Image = animal.Image;
          
            return animalCell;
          }
          
          public override UICollectionReusableView GetViewForSupplementaryElement (UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath)
          {
            var headerView = (Header)collectionView.DequeueReusableSupplementaryView (elementKind, headerId, indexPath);
            headerView.Text = "Supplementary View Section " + indexPath.Section.ToString ();
            return headerView;
          }
          
        ]]></code>
      </example>
      <para>The <see cref="T:MonoTouch.UIKit.UICollectionViewSource" /> combines the <see cref="T:MonoTouch.UIKit.UICollectionViewDataSource" /> API and the <see cref="T:MonoTouch.UIKit.UICollectionViewDelegate" /> API in a single convenience class. Rather than creating two classes to assign to the <see cref="P:MonoTouch.UIKit.UICollectionView.DataSource" /> and <see cref="P:MonoTouch.UIKit.UICollectionView.Delegate" /> properties, a single <see cref="T:MonoTouch.UIKit.UICollectionViewSource" /> can be created and assigned to the <see cref="P:MonoTouch.UIKit.UICollectionView.Source" /> property.</para>
    </remarks>
    <altmember cref="T:MonoTouch.UIKit.UICollectionViewSource" />
    <altmember cref="T:MonoTouch.UIKit.UICollectionView" />
    <altmember cref="T:MonoTouch.UIKit.UICollectionViewController" />
    <altmember cref="T:MonoTouch.UIKit.UICollectionReusableView" />
    <related type="article" href="http://docs.xamarin.com/ios/Guides/User_Interface/Introduction_to_CollectionViews" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewDataSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewDataSource (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewDataSource (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewDataSource (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCell">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.UIKit.UICollectionViewCell GetCell (MonoTouch.UIKit.UICollectionView collectionView, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionViewCell GetCell(class MonoTouch.UIKit.UICollectionView collectionView, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("collectionView:cellForItemAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="MonoTouch.UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The cell at the specified indexPath.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsCount">
      <MemberSignature Language="C#" Value="public abstract int GetItemsCount (MonoTouch.UIKit.UICollectionView collectionView, int section);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetItemsCount(class MonoTouch.UIKit.UICollectionView collectionView, int32 section) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public abstract nint GetItemsCount (MonoTouch.UIKit.UICollectionView collectionView, nint section);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetItemsCount(class MonoTouch.UIKit.UICollectionView collectionView, valuetype System.nint section) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("collectionView:numberOfItemsInSection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Int32</ReturnType>
        <ReturnType apistyle="new">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="MonoTouch.UIKit.UICollectionView" />
        <Parameter Name="section" Type="System.Int32" apistyle="old" />
        <Parameter Name="section" Type="System.nint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="collectionView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>The number of items in the specified section.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForSupplementaryElement">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionReusableView GetViewForSupplementaryElement (MonoTouch.UIKit.UICollectionView collectionView, MonoTouch.Foundation.NSString elementKind, MonoTouch.Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UICollectionReusableView GetViewForSupplementaryElement(class MonoTouch.UIKit.UICollectionView collectionView, class MonoTouch.Foundation.NSString elementKind, class MonoTouch.Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("collectionView:viewForSupplementaryElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionReusableView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="MonoTouch.UIKit.UICollectionView" />
        <Parameter Name="elementKind" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="indexPath" Type="MonoTouch.Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">To be added.</param>
        <param name="elementKind">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Retrieves the UICollectionReusableView for the specified elementKind at the specified indexPath.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfSections">
      <MemberSignature Language="C#" Value="public virtual int NumberOfSections (MonoTouch.UIKit.UICollectionView collectionView);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 NumberOfSections(class MonoTouch.UIKit.UICollectionView collectionView) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual nint NumberOfSections (MonoTouch.UIKit.UICollectionView collectionView);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint NumberOfSections(class MonoTouch.UIKit.UICollectionView collectionView) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("numberOfSectionsInCollectionView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Int32</ReturnType>
        <ReturnType apistyle="new">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="MonoTouch.UIKit.UICollectionView" />
      </Parameters>
      <Docs>
        <param name="collectionView">To be added.</param>
        <summary>The number of sections in the UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
