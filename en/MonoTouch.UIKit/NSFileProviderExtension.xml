<Type Name="NSFileProviderExtension" FullName="MonoTouch.UIKit.NSFileProviderExtension">
  <TypeSignature Language="C#" Value="public class NSFileProviderExtension : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSFileProviderExtension extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSFileProviderExtension", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.WatchOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Subclasses of <see cref="T:MonoTouch.UIKit.NSFileProviderExtension" /> implement the move and open functionality for extensions of type <see cref="T:MonoTouch.UIKit.UIDocumentPickerViewController" />.</summary>
    <remarks>
      <para>(More documentation for this node is coming)</para>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/NSFileProviderExtension_Class/index.html">Apple documentation for <c>NSFileProviderExtension</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileProviderExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
          <para></para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSFileProviderExtension (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSFileProviderExtension (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>
          <para>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public virtual void CreateDirectory (string directoryName, string parentItemIdentifier, Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateDirectory(string directoryName, string parentItemIdentifier, class System.Action`2&lt;class MonoTouch.FileProvider.INSFileProviderItem, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("createDirectoryWithName:inParentItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryName" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directoryName">To be added.</param>
        <param name="parentItemIdentifier">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Creates a new directory in the specified location and runs a handler when the operation is complete.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt; CreateDirectoryAsync (string directoryName, string parentItemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.FileProvider.INSFileProviderItem&gt; CreateDirectoryAsync(string directoryName, string parentItemIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryName" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryName">To be added.</param>
        <param name="parentItemIdentifier">To be added.</param>
        <summary>Asynchronously creates a new directory in the specified location, returnin a task that contains the resulting file provider item for the new directory.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public virtual void DeleteItem (string itemIdentifier, Action&lt;MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteItem(string itemIdentifier, class System.Action`1&lt;class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("deleteItemWithIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V8))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Deletes the identified item and runs a handler when the operation is complete.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteItemAsync (string itemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteItemAsync(string itemIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <summary>Asynchronously deletes the identified item, returning a task that represents the operation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentStorageUrl">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSUrl DocumentStorageUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSUrl DocumentStorageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use 'FileProvider::NSFileProviderManager.DocumentStorageUrl' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("documentStorageURL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use 'FileProvider::NSFileProviderManager.DocumentStorageUrl' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Obtains the root URL for all of shared documents.</summary>
        <value>URL that resides inside the shared container of the document picker.</value>
        <remarks>
          <para>The specified URL needs to be accessible by the File Provider extension. Ordinarily it resides in a container that is shared by the containing app AND the view controller extension.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.FileProvider.NSFileProviderDomain Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.FileProvider.NSFileProviderDomain Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("domain")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FileProvider.NSFileProviderDomain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the domain that this file provider manages.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FetchThumbnails">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSProgress FetchThumbnails (MonoTouch.Foundation.NSString[] itemIdentifiers, MonoTouch.CoreGraphics.CGSize size, MonoTouch.UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler, Action&lt;MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSProgress FetchThumbnails(class MonoTouch.Foundation.NSString[] itemIdentifiers, valuetype MonoTouch.CoreGraphics.CGSize size, class MonoTouch.UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler, class System.Action`1&lt;class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fetchThumbnailsForItemIdentifiers:requestedSize:perThumbnailCompletionHandler:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSProgress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifiers" Type="MonoTouch.Foundation.NSString[]" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" />
        <Parameter Name="perThumbnailCompletionHandler" Type="MonoTouch.UIKit.NSFileProviderExtensionFetchThumbnailsHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDNSFileProviderExtensionFetchThumbnailsHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V8))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifiers">To be added.</param>
        <param name="size">To be added.</param>
        <param name="perThumbnailCompletionHandler">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Fetches thumbnails for the specified item identifiers, runs the specified <paramref name="perThumbnailCompletionHandler" /> for each thumbnail, and runs <paramref name="completionHandler" /> when the entire operation is complete</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FetchThumbnailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FetchThumbnailsAsync (MonoTouch.Foundation.NSString[] itemIdentifiers, MonoTouch.CoreGraphics.CGSize size, MonoTouch.UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FetchThumbnailsAsync(class MonoTouch.Foundation.NSString[] itemIdentifiers, valuetype MonoTouch.CoreGraphics.CGSize size, class MonoTouch.UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifiers" Type="MonoTouch.Foundation.NSString[]" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" />
        <Parameter Name="perThumbnailCompletionHandler" Type="MonoTouch.UIKit.NSFileProviderExtensionFetchThumbnailsHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDNSFileProviderExtensionFetchThumbnailsHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifiers">To be added.</param>
        <param name="size">To be added.</param>
        <param name="perThumbnailCompletionHandler">To be added.</param>
        <summary>Asynchronously fetches thumbnails for the specified item identifiers, runs the specified <paramref name="perThumbnailCompletionHandler" /> for each thumbnail, returning a task that represents the operation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FetchThumbnailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FetchThumbnailsAsync (MonoTouch.Foundation.NSString[] itemIdentifiers, MonoTouch.CoreGraphics.CGSize size, MonoTouch.UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler, out MonoTouch.Foundation.NSProgress result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FetchThumbnailsAsync(class MonoTouch.Foundation.NSString[] itemIdentifiers, valuetype MonoTouch.CoreGraphics.CGSize size, class MonoTouch.UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler, class MonoTouch.Foundation.NSProgress result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifiers" Type="MonoTouch.Foundation.NSString[]" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" />
        <Parameter Name="perThumbnailCompletionHandler" Type="MonoTouch.UIKit.NSFileProviderExtensionFetchThumbnailsHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDNSFileProviderExtensionFetchThumbnailsHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="result" Type="MonoTouch.Foundation.NSProgress&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="itemIdentifiers">To be added.</param>
        <param name="size">To be added.</param>
        <param name="perThumbnailCompletionHandler">To be added.</param>
        <param name="result">To be added.</param>
        <summary>Asynchronously fetches thumbnails for the specified item identifiers, runs the specified <paramref name="perThumbnailCompletionHandler" /> for each thumbnail, and updates the progress result, returning a task that represents the operation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.FileProvider.INSFileProviderEnumerator GetEnumerator (string containerItemIdentifier, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.FileProvider.INSFileProviderEnumerator GetEnumerator(string containerItemIdentifier, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("enumeratorForContainerItemIdentifier:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FileProvider.INSFileProviderEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerItemIdentifier" Type="System.String" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="containerItemIdentifier">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Returns an enumerator for the contents of the container.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.FileProvider.INSFileProviderItem GetItem (MonoTouch.Foundation.NSString identifier, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.FileProvider.INSFileProviderItem GetItem(class MonoTouch.Foundation.NSString identifier, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("itemForIdentifier:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FileProvider.INSFileProviderItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="identifier">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Returns the item for the identifier.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPersistentIdentifier">
      <MemberSignature Language="C#" Value="public virtual string GetPersistentIdentifier (MonoTouch.Foundation.NSUrl itemUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPersistentIdentifier(class MonoTouch.Foundation.NSUrl itemUrl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("persistentIdentifierForItemAtURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemUrl" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="itemUrl">The URL for the shared document.</param>
        <summary>Gets a specified identifier for a given URL.</summary>
        <returns>String that specifically identifies a document with reference to its URL.</returns>
        <remarks>
          <para>The identifier is defined by relative path of the document from the root URL address that was returned by the DocumentStorageURL method.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlaceholderUrl">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSUrl GetPlaceholderUrl (MonoTouch.Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSUrl GetPlaceholderUrl(class MonoTouch.Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("placeholderURLForURL:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use 'FileProvider::NSFileProviderManager.GetPlaceholderUrl (NSUrl)' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The URL for the shared document.</param>
        <summary>Gets the placeholder URL.</summary>
        <returns>The placeholder URL.</returns>
        <remarks>
          <para>Do not override this method.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedServiceSources">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.FileProvider.INSFileProviderServiceSource[] GetSupportedServiceSources (string itemIdentifier, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.FileProvider.INSFileProviderServiceSource[] GetSupportedServiceSources(string itemIdentifier, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("supportedServiceSourcesForItemIdentifier:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.FileProvider.INSFileProviderServiceSource[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Returns an array that contains the service sources that the app can use to perform actions on the identified item.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrlForItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSUrl GetUrlForItem (string persistentIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSUrl GetUrlForItem(string persistentIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("URLForItemWithPersistentIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="persistentIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="persistentIdentifier">Persistent identifier for a document that is shared .</param>
        <summary>Gets the URL for a specified persistent identifier.</summary>
        <returns>The shared document's URL.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDocument">
      <MemberSignature Language="C#" Value="public virtual void ImportDocument (MonoTouch.Foundation.NSUrl fileUrl, string parentItemIdentifier, Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportDocument(class MonoTouch.Foundation.NSUrl fileUrl, string parentItemIdentifier, class System.Action`2&lt;class MonoTouch.FileProvider.INSFileProviderItem, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("importDocumentAtURL:toParentItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileUrl" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fileUrl">To be added.</param>
        <param name="parentItemIdentifier">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Imports the resource at the specified <paramref name="fileURL" /> into the directory that is identified by <paramref name="parentItemIdentifier" />.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt; ImportDocumentAsync (MonoTouch.Foundation.NSUrl fileUrl, string parentItemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.FileProvider.INSFileProviderItem&gt; ImportDocumentAsync(class MonoTouch.Foundation.NSUrl fileUrl, string parentItemIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileUrl" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileUrl">To be added.</param>
        <param name="parentItemIdentifier">To be added.</param>
        <summary>Asynchronously imports the resource at the specified <paramref name="fileURL" /> into the directory that is identified by <paramref name="parentItemIdentifier" />, returning a task that contains the file provider for the imported item.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemChangedAtUrl">
      <MemberSignature Language="C#" Value="public virtual void ItemChangedAtUrl (MonoTouch.Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ItemChangedAtUrl(class MonoTouch.Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("itemChangedAtURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <summary>Informs a file provider extension that there has been a change in a document.</summary>
        <remarks>
          <para>You must override this method.Do not call super.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvidePlaceholderAtUrl">
      <MemberSignature Language="C#" Value="public virtual void ProvidePlaceholderAtUrl (MonoTouch.Foundation.NSUrl url, Action&lt;MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvidePlaceholderAtUrl(class MonoTouch.Foundation.NSUrl url, class System.Action`1&lt;class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("providePlaceholderAtURL:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <param name="completionHandler">
          <para>An action the system calls subseqent to the creation of a placeholder.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a specified placeholder for a previously defined URL.</summary>
        <remarks>
          <para>You need to override this method. This method is called to provide a placeholder for documents that are returned by the Document Picker but that are not locally stored.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvidePlaceholderAtUrlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ProvidePlaceholderAtUrlAsync (MonoTouch.Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ProvidePlaceholderAtUrlAsync(class MonoTouch.Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <summary>Creates a specified placeholder for a previously defined URL.</summary>
        <returns>A task that represents the asynchronous ProvidePlaceholderAtUrl operation</returns>
        <remarks>
          <para></para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderIdentifier">
      <MemberSignature Language="C#" Value="public virtual string ProviderIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use 'FileProvider::NSFileProviderManager.ProviderIdentifier' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("providerIdentifier")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use 'FileProvider::NSFileProviderManager.ProviderIdentifier' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides an identifier for reads and writes that are coordinated. </summary>
        <value>A string uniquely identifying the purpose identifier. By default, the bundle identifier for the containing app.</value>
        <remarks>
          <para>You can override this method to provide a different identifier for the provider.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameItem">
      <MemberSignature Language="C#" Value="public virtual void RenameItem (string itemIdentifier, string itemName, Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenameItem(string itemIdentifier, string itemName, class System.Action`2&lt;class MonoTouch.FileProvider.INSFileProviderItem, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("renameItemWithIdentifier:toName:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="itemName" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <param name="itemName">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Changes the name of the identified item.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt; RenameItemAsync (string itemIdentifier, string itemName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.FileProvider.INSFileProviderItem&gt; RenameItemAsync(string itemIdentifier, string itemName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="itemName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <param name="itemName">To be added.</param>
        <summary>Asynchronously changes the name of the identified item, returning a task that contains a file provider for the renamed item.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReparentItem">
      <MemberSignature Language="C#" Value="public virtual void ReparentItem (string itemIdentifier, string parentItemIdentifier, string newName, Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReparentItem(string itemIdentifier, string parentItemIdentifier, string newName, class System.Action`2&lt;class MonoTouch.FileProvider.INSFileProviderItem, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("reparentItemWithIdentifier:toParentItemWithIdentifier:newName:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V86))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <param name="parentItemIdentifier">To be added.</param>
        <param name="newName">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Moves the identified item to a new name under a new parent.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReparentItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt; ReparentItemAsync (string itemIdentifier, string parentItemIdentifier, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.FileProvider.INSFileProviderItem&gt; ReparentItemAsync(string itemIdentifier, string parentItemIdentifier, string newName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <param name="parentItemIdentifier">To be added.</param>
        <param name="newName">To be added.</param>
        <summary>Asynchronously moves the identified item to a new name under a new parent, returning a task that contains a file provider for the reparented item.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFavoriteRank">
      <MemberSignature Language="C#" Value="public virtual void SetFavoriteRank (MonoTouch.Foundation.NSNumber favoriteRank, string itemIdentifier, Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFavoriteRank(class MonoTouch.Foundation.NSNumber favoriteRank, string itemIdentifier, class System.Action`2&lt;class MonoTouch.FileProvider.INSFileProviderItem, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFavoriteRank:forItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="favoriteRank" Type="MonoTouch.Foundation.NSNumber" />
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="favoriteRank">To be added.</param>
        <param name="itemIdentifier">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Sets the favorite rank of the identified directory.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFavoriteRankAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt; SetFavoriteRankAsync (MonoTouch.Foundation.NSNumber favoriteRank, string itemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.FileProvider.INSFileProviderItem&gt; SetFavoriteRankAsync(class MonoTouch.Foundation.NSNumber favoriteRank, string itemIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="favoriteRank" Type="MonoTouch.Foundation.NSNumber" />
        <Parameter Name="itemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="favoriteRank">To be added.</param>
        <param name="itemIdentifier">To be added.</param>
        <summary>Asynchronously sets the favorite rank of the identified item, returning a task that contains the file provider for the favorited directory.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLastUsedDate">
      <MemberSignature Language="C#" Value="public virtual void SetLastUsedDate (MonoTouch.Foundation.NSDate lastUsedDate, string itemIdentifier, Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLastUsedDate(class MonoTouch.Foundation.NSDate lastUsedDate, string itemIdentifier, class System.Action`2&lt;class MonoTouch.FileProvider.INSFileProviderItem, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setLastUsedDate:forItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lastUsedDate" Type="MonoTouch.Foundation.NSDate" />
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="lastUsedDate">To be added.</param>
        <param name="itemIdentifier">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Sets the last used date for the identified item.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLastUsedDateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt; SetLastUsedDateAsync (MonoTouch.Foundation.NSDate lastUsedDate, string itemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.FileProvider.INSFileProviderItem&gt; SetLastUsedDateAsync(class MonoTouch.Foundation.NSDate lastUsedDate, string itemIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lastUsedDate" Type="MonoTouch.Foundation.NSDate" />
        <Parameter Name="itemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="lastUsedDate">To be added.</param>
        <param name="itemIdentifier">To be added.</param>
        <summary>Asynchronously sets the last used date for the identified item, returning a task that contains a file provider for the item.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTagData">
      <MemberSignature Language="C#" Value="public virtual void SetTagData (MonoTouch.Foundation.NSData tagData, string itemIdentifier, Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTagData(class MonoTouch.Foundation.NSData tagData, string itemIdentifier, class System.Action`2&lt;class MonoTouch.FileProvider.INSFileProviderItem, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setTagData:forItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tagData">To be added.</param>
        <param name="itemIdentifier">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Sets the tag data on an item.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTagDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt; SetTagDataAsync (MonoTouch.Foundation.NSData tagData, string itemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.FileProvider.INSFileProviderItem&gt; SetTagDataAsync(class MonoTouch.Foundation.NSData tagData, string itemIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="itemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagData">To be added.</param>
        <param name="itemIdentifier">To be added.</param>
        <summary>Asynchronously sets the tag data on an item, returning a task that contains a file provider for the newly tagged item.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartProvidingItemAtUrl">
      <MemberSignature Language="C#" Value="public virtual void StartProvidingItemAtUrl (MonoTouch.Foundation.NSUrl url, Action&lt;MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartProvidingItemAtUrl(class MonoTouch.Foundation.NSUrl url, class System.Action`1&lt;class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("startProvidingItemAtURL:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <param name="completionHandler">
          <para>An action the system calls when the refernced file becomes available.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Supplies an actual file on a disk in place of a placeholder.</summary>
        <remarks>
          <para>You have to override this method. Do not call super in an implementation.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartProvidingItemAtUrlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task StartProvidingItemAtUrlAsync (MonoTouch.Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StartProvidingItemAtUrlAsync(class MonoTouch.Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <summary>Supplies an actual file on a disk in place of a placeholder.</summary>
        <returns>A task that represents the asynchronous StartProvidingItemAtUrl operation</returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
          <para copied="true">The StartProvidingItemAtUrlAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">You have to override this method. Do not call super in an implementation.</para>
          <para tool="threads" copied="true">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopProvidingItemAtUrl">
      <MemberSignature Language="C#" Value="public virtual void StopProvidingItemAtUrl (MonoTouch.Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopProvidingItemAtUrl(class MonoTouch.Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("stopProvidingItemAtURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <summary>Informs a file provider extension when a specified document is no longer being accessed</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrashItem">
      <MemberSignature Language="C#" Value="public virtual void TrashItem (string itemIdentifier, Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrashItem(string itemIdentifier, class System.Action`2&lt;class MonoTouch.FileProvider.INSFileProviderItem, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("trashItemWithIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Moves the identified item into the trash.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrashItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt; TrashItemAsync (string itemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.FileProvider.INSFileProviderItem&gt; TrashItemAsync(string itemIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <summary>Asynchronously moves the identified item into the trash, returning a task that contains a file provider for the newly deleted item.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UntrashItem">
      <MemberSignature Language="C#" Value="public virtual void UntrashItem (string itemIdentifier, string parentItemIdentifier, Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UntrashItem(string itemIdentifier, string parentItemIdentifier, class System.Action`2&lt;class MonoTouch.FileProvider.INSFileProviderItem, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("untrashItemWithIdentifier:toParentItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.FileProvider.INSFileProviderItem,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <param name="parentItemIdentifier">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Rstores the identified item from the trash.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UntrashItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt; UntrashItemAsync (string itemIdentifier, string parentItemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.FileProvider.INSFileProviderItem&gt; UntrashItemAsync(string itemIdentifier, string parentItemIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">To be added.</param>
        <param name="parentItemIdentifier">To be added.</param>
        <summary>Asynchronously restores the identified item from the trash, returning a task that contains a file provider for the newly restored item.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePlaceholder">
      <MemberSignature Language="C#" Value="public static bool WritePlaceholder (MonoTouch.Foundation.NSUrl placeholderUrl, MonoTouch.Foundation.NSDictionary metadata, ref MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WritePlaceholder(class MonoTouch.Foundation.NSUrl placeholderUrl, class MonoTouch.Foundation.NSDictionary metadata, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("writePlaceholderAtURL:withMetadata:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use 'NSFileProviderManager' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="placeholderUrl" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="placeholderUrl">Pleaceholder URL related to the specified document.</param>
        <param name="metadata">The document's metadata.</param>
        <param name="error">If an error were to occur during the execution, the parameter is set to an error object describing the issue. If no error is to occur, you may pass in Null.</param>
        <summary>Writes a placeholder using provided metadata.</summary>
        <returns>Yes if written successfully, otherwise no.</returns>
        <remarks>
          <para>Use whenever you need a placeholder for a document. You must not override this method.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>