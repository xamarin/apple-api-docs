<Type Name="UIPrintInteractionController" FullName="MonoTouch.UIKit.UIPrintInteractionController">
  <TypeSignature Language="C#" Value="public class UIPrintInteractionController : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIPrintInteractionController extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UIPrintInteractionController", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Since(4, 2)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Main driver for the printing process on iOS.</summary>
    <remarks>
      <para>

	The UIPrintInteractionController provides access to the
	printing framework on iOS.  To print on iOS, you configure the
	<see cref="P:MonoTouch.UIKit.UIPrintInteractionController.SharedPrintController" /> 
	singleton by specifying your print task, optionally hook up to
	events and then you invoke the <see cref="P:MonoTouch.UIKit.UIPrintInteractionController.Present(bool,MonoTouch.UIKit.UIPrintINteractionCompletionHandler)" />
	method to allow the user to select a printer and to print.

    </para>
      <para> This class offers a number of mechanisms for printing, you
      can print using one of these configuration, based on your needs
      </para>
      <list type="bullet">
        <item>
          <term>
            <para>Ready to print PDF file.  You can print it by
	  assigning to the <see cref="P:MonoTouch.UIKit.UIPrintInteractionController.PrintingItem" />
	  property the NSUrl pointing to the file or the NSData that
	  contains the PDF in memory.</para>
          </term>
        </item>
        <item>
          <term>
            <para>Ready to print image.  You can print it by assigning
	  to the <see cref="P:MonoTouch.UIKit.UIPrintInteractionController.PrintingItem" />
	  property the UIImage or a photo ALAsset (the ALAsset with an
	  AssetType of ALAssetType.Photo).
	  </para>
          </term>
        </item>
        <item>
          <term>
            <para>Ready to print collection of images and PDF files.  You can print it by assigning
	  the mix of elements to the  <see cref="P:MonoTouch.UIKit.UIPrintInteractionController.PrintingItems" />
	  property an array of objects containing NSUrl, UIImage, NSData or ALAsset values.   
	  </para>
          </term>
        </item>
        <item>
          <term>
            <para> To layout information using using one of the built-in
	    print formatters you would assign your print formatter to
	    the <see cref="P:MonoTouch.UIKit.UIPrintInteractionController.PrintFormatter" />
	    property.  The built-in print formatters include the <see cref="T:MonoTouch.UIKit.UISimpleTextPrintFormatter" />
	    which can be used for simple rending text across multiple
	    pages and has control for font, color, alignment and line
	    breaking modes; For more advanced text printing you can
	    use the <see cref="T:MonoTouch.UIKit.UIMarkupTextPrintFormatter" />; For
	    printing UIViews, you use the <see cref="T:MonoTouch.UIKit.UIViewPrintFormatter" /> which has
	    a bulit-in ability to print the contents of a UIWebView,
	    UITextView and MKMapView objects.
	  </para>
          </term>
        </item>
        <item>
          <term>
            <para> For more advanced uses, where you might want to
	    control the actual rendering of the page, you must
	    implement a subclass of <see cref="T:MonoTouch.UIKit.UIPrintPageRenderer" /> and assign
	    the instance of your renderer to the <see cref="P:MonoTouch.UIKit.UIPrintInteractionController.PrintPageRenderer" />
	    property.</para>
          </term>
        </item>
      </list>
      <example>
        <code lang="C#"><![CDATA[
	//
	// Print a PDF file, simple API
	//
        NSUrl url = NSUrl.FromFilename ("SomeFile.pdf");           
	var printInfo = UIPrintInfo.PrintInfo;

        printInfo.OutputType = UIPrintInfoOutputType.General;
        printInfo.JobName = "Test: PDF Print";

        var printer = UIPrintInteractionController.SharedPrintController;

        printer.PrintInfo = printInfo;
        printer.PrintingItem = url;
        printer.ShowsPageRange = true;

        printer.Present (true, (handler, completed, err) =&gt; {
            if (!completed &amp; err != null){
                Console.WriteLine ("error");
            }
        });
]]></code>
      </example>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=b2bbd86e-13c6-4c6a-aa16-4096acf51e4d">print</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=a96da854-7c59-4e25-9fb5-78be262620dd">RecipesAndPrinting</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPrintInteractionController (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPrintInteractionController (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPrintInteractionController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanPrint">
      <MemberSignature Language="C#" Value="public static bool CanPrint (MonoTouch.Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanPrint(class MonoTouch.Foundation.NSData data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("canPrintData:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">Data to probe.</param>
        <summary>Determines if the data stored in the NSData can be printed.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanPrint">
      <MemberSignature Language="C#" Value="public static bool CanPrint (MonoTouch.Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanPrint(class MonoTouch.Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("canPrintURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <summary>Whether printing is available.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChoosePaper">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIPrintInteractionPaperList ChoosePaper { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIPrintInteractionPaperList ChoosePaper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPrintInteractionPaperList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CutLengthForPaper">
      <MemberSignature Language="C#" Value="public Func&lt;MonoTouch.UIKit.UIPrintInteractionController,MonoTouch.UIKit.UIPrintPaper,float&gt; CutLengthForPaper { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`3&lt;class MonoTouch.UIKit.UIPrintInteractionController, class MonoTouch.UIKit.UIPrintPaper, float32&gt; CutLengthForPaper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;MonoTouch.UIKit.UIPrintInteractionController,MonoTouch.UIKit.UIPrintPaper,System.Single&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIPrintInteractionControllerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIPrintInteractionControllerDelegate Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPrintInteractionControllerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the MonoTouch.UIKit.UIPrintInteractionControllerDelegate model class which acts as the class delegate.</summary>
        <value>
          <para>The instance of the MonoTouch.UIKit.UIPrintInteractionControllerDelegate model class</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, use the WeakDelegate property instead if you want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDismissPrinterOptions">
      <MemberSignature Language="C#" Value="public event EventHandler DidDismissPrinterOptions;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidDismissPrinterOptions" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFinishJob">
      <MemberSignature Language="C#" Value="public event EventHandler DidFinishJob;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidFinishJob" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidPresentPrinterOptions">
      <MemberSignature Language="C#" Value="public event EventHandler DidPresentPrinterOptions;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidPresentPrinterOptions" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dismiss">
      <MemberSignature Language="C#" Value="public virtual void Dismiss (bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dismiss(bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("dismissAnimated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="animated">To be added.</param>
        <summary>Dismisses the printing-options sheet or popover.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIPrintInteractionController object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIPrintInteractionController class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the UIPrintInteractionController ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewController">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIPrintInteraction GetViewController { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIPrintInteraction GetViewController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPrintInteraction</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Present" apistyle="new">
      <MemberSignature Language="C#" Value="public virtual bool Present (bool animated, MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Present(bool animated, class MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentAnimated:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.UIKit.UIPrintInteractionCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDUIPrintInteractionCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="animated">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Present">
      <MemberSignature Language="C#" Value="public virtual void Present (bool animated, MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Present(bool animated, class MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentAnimated:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.UIKit.UIPrintInteractionCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDUIPrintInteractionCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="animated">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Presents the iPhone printing interface.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentAsync (bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentAsync(bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="animated">To be added.</param>
        <summary>Presents the iPhone printing interface.</summary>
        <returns>
          <para>A task that represents the asynchronous Present operation.   The value of the TResult parameter is of type MonoTouch.UIKit.UIPrintInteractionResult.  To be added.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentAsync" apistyle="new">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentAsync (bool animated, out bool result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentAsync(bool animated, bool result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="animated">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromBarButtonItem" apistyle="new">
      <MemberSignature Language="C#" Value="public virtual bool PresentFromBarButtonItem (MonoTouch.UIKit.UIBarButtonItem item, bool animated, MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PresentFromBarButtonItem(class MonoTouch.UIKit.UIBarButtonItem item, bool animated, class MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentFromBarButtonItem:animated:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MonoTouch.UIKit.UIBarButtonItem" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.UIKit.UIPrintInteractionCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDUIPrintInteractionCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="animated">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromBarButtonItem">
      <MemberSignature Language="C#" Value="public virtual void PresentFromBarButtonItem (MonoTouch.UIKit.UIBarButtonItem item, bool animated, MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentFromBarButtonItem(class MonoTouch.UIKit.UIBarButtonItem item, bool animated, class MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentFromBarButtonItem:animated:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MonoTouch.UIKit.UIBarButtonItem" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.UIKit.UIPrintInteractionCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDUIPrintInteractionCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="animated">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Presents the iPad printing user interface in a popover view that can be animated from a bar-button item.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromBarButtonItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentFromBarButtonItemAsync (MonoTouch.UIKit.UIBarButtonItem item, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentFromBarButtonItemAsync(class MonoTouch.UIKit.UIBarButtonItem item, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MonoTouch.UIKit.UIBarButtonItem" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Presents the iPad printing user interface in a popover view that can be animated from a bar-button item.</summary>
        <returns>
          <para>A task that represents the asynchronous PresentFromBarButtonItem operation.   The value of the TResult parameter is of type MonoTouch.UIKit.UIPrintInteractionResult.  To be added.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromBarButtonItemAsync" apistyle="new">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentFromBarButtonItemAsync (MonoTouch.UIKit.UIBarButtonItem item, bool animated, out bool result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentFromBarButtonItemAsync(class MonoTouch.UIKit.UIBarButtonItem item, bool animated, bool result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MonoTouch.UIKit.UIBarButtonItem" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="animated">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromRectInView" apistyle="new">
      <MemberSignature Language="C#" Value="public virtual bool PresentFromRectInView (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.UIKit.UIView view, bool animated, MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PresentFromRectInView(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.UIKit.UIView view, bool animated, class MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentFromRect:inView:animated:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" />
        <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.UIKit.UIPrintInteractionCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDUIPrintInteractionCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="view">To be added.</param>
        <param name="animated">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromRectInView">
      <MemberSignature Language="C#" Value="public virtual void PresentFromRectInView (System.Drawing.RectangleF rect, MonoTouch.UIKit.UIView view, bool animated, MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentFromRectInView(valuetype System.Drawing.RectangleF rect, class MonoTouch.UIKit.UIView view, bool animated, class MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("presentFromRect:inView:animated:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="completion" Type="MonoTouch.UIKit.UIPrintInteractionCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDUIPrintInteractionCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="view">To be added.</param>
        <param name="animated">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Presents the iPad printing user interface in a popover view that can be animated from any area in a view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromRectInViewAsync" apistyle="new">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentFromRectInViewAsync (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.UIKit.UIView view, bool animated, out bool result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentFromRectInViewAsync(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.UIKit.UIView view, bool animated, bool result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" />
        <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="result" Type="System.Boolean&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="view">To be added.</param>
        <param name="animated">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromRectInViewAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentFromRectInViewAsync (System.Drawing.RectangleF rect, MonoTouch.UIKit.UIView view, bool animated);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentFromRectInViewAsync(valuetype System.Drawing.RectangleF rect, class MonoTouch.UIKit.UIView view, bool animated) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentFromRectInViewAsync (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.UIKit.UIView view, bool animated);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.UIKit.UIPrintInteractionResult&gt; PresentFromRectInViewAsync(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.UIKit.UIView view, bool animated) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.UIKit.UIPrintInteractionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="view" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="view">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Presents the iPad printing user interface in a popover view that can be animated from any area in a view.</summary>
        <returns>
          <para>A task that represents the asynchronous PresentFromRectInView operation.   The value of the TResult parameter is of type MonoTouch.UIKit.UIPrintInteractionResult.  To be added.</para>
        </returns>
        <remarks>
          <para copied="true">The PresentFromRectInViewAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintableUTIs">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSSet PrintableUTIs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSSet PrintableUTIs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("printableUTIs")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Uniform Type Identifiers for the types of data that UIKit can print.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatter">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIPrintFormatter PrintFormatter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIPrintFormatter PrintFormatter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("printFormatter", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPrintFormatter:", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPrintFormatter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIPrintFormatter that will lay out of the content of pages based on the kind of content.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintInfo">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIPrintInfo PrintInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIPrintInfo PrintInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("printInfo", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPrintInfo:", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPrintInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Information about the print job.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintingAvailable">
      <MemberSignature Language="C#" Value="public static bool PrintingAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property bool PrintingAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isPrintingAvailable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether printing is available.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintingItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject PrintingItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject PrintingItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("printingItem", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPrintingItem:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A ready-to-print object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintingItems">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject[] PrintingItems { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject[] PrintingItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("printingItems", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPrintingItems:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of ready-to-print objects.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPageRenderer">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIPrintPageRenderer PrintPageRenderer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIPrintPageRenderer PrintPageRenderer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("printPageRenderer", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPrintPageRenderer:", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPrintPageRenderer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If set, use the specified instance of UIPrintPageRenderer for printing.</summary>
        <value>
        </value>
        <remarks>
          <para>
	    You must
	    implement a subclass of <see cref="T:MonoTouch.UIKit.UIPrintPageRenderer" /> and assign
	    the instance of your renderer to the <see cref="P:MonoTouch.UIKit.UIPrintInteractionController.PrintPageRenderer" />
	    property.
	  </para>
          <example>
            <code lang="C#"><![CDATA[
	// Get a reference to the singleton iOS printing concierge
	UIPrintInteractionController printController = UIPrintInteractionController.SharedPrintController;
	
	// Instruct the printing concierge to use our custom UIPrintPageRenderer subclass when printing this job
	printController.PrintPageRenderer = new MyPrintPageRenderer (myData);
	
	// Ask for a print job object and configure its settings to tailor the print request
	UIPrintInfo info = UIPrintInfo.PrintInfo;
	
	// B&W or color, normal quality output for mixed text, graphics, and images
	info.OutputType = UIPrintInfoOutputType.General;
	
	// Select the job named this in the printer queue to cancel our print request.
	info.JobName = "Recipes";
	
	// Instruct the printing concierge to use our custom print job settings.
	printController.PrintInfo = info;
	
	// Present the standard iOS Print Panel that allows you to pick the target Printer, number of pages, double-sided, etc.
	printController.Present (true, PrintingCompleted);

	]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintPaper">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIPrintPaper PrintPaper { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIPrintPaper PrintPaper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("printPaper")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPrintPaper</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Holds the paper size and printing area for the print job. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintToPrinter">
      <MemberSignature Language="C#" Value="public virtual bool PrintToPrinter (MonoTouch.UIKit.UIPrinter printer, MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PrintToPrinter(class MonoTouch.UIKit.UIPrinter printer, class MonoTouch.UIKit.UIPrintInteractionCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("printToPrinter:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printer" Type="MonoTouch.UIKit.UIPrinter" />
        <Parameter Name="completion" Type="MonoTouch.UIKit.UIPrintInteractionCompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDUIPrintInteractionCompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="printer">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedPrintController">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIPrintInteractionController SharedPrintController { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIPrintInteractionController SharedPrintController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("sharedPrintController")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIPrintInteractionController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The shared print-interaction controller object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsNumberOfCopies">
      <MemberSignature Language="C#" Value="public virtual bool ShowsNumberOfCopies { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsNumberOfCopies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("showsNumberOfCopies")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setShowsNumberOfCopies:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the printing options includes the number of copies to be printed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsPageRange">
      <MemberSignature Language="C#" Value="public virtual bool ShowsPageRange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsPageRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("showsPageRange")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setShowsPageRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the printing options includes a page-range control.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsPaperSelectionForLoadedPapers">
      <MemberSignature Language="C#" Value="public virtual bool ShowsPaperSelectionForLoadedPapers { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsPaperSelectionForLoadedPapers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("showsPaperSelectionForLoadedPapers")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setShowsPaperSelectionForLoadedPapers:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("delegate", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDelegate:", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>
          <para>The instance that will respond to events and data requests.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDismissPrinterOptions">
      <MemberSignature Language="C#" Value="public event EventHandler WillDismissPrinterOptions;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WillDismissPrinterOptions" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPresentPrinterOptions">
      <MemberSignature Language="C#" Value="public event EventHandler WillPresentPrinterOptions;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WillPresentPrinterOptions" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillStartJob">
      <MemberSignature Language="C#" Value="public event EventHandler WillStartJob;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WillStartJob" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
