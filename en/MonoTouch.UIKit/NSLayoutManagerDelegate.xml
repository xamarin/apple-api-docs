<Type Name="NSLayoutManagerDelegate" FullName="MonoTouch.UIKit.NSLayoutManagerDelegate">
  <TypeSignature Language="C#" Value="public class NSLayoutManagerDelegate : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.UIKit.INSLayoutManagerDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSLayoutManagerDelegate extends MonoTouch.Foundation.NSObject implements class MonoTouch.ObjCRuntime.INativeObject, class MonoTouch.UIKit.INSLayoutManagerDelegate, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.UIKit.INSLayoutManagerDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSLayoutManagerDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_7_0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A delegate object that exposes events for <see cref="T:MonoTouch.UIKit.NSLayoutManager" />s.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/NSLayoutManagerDelegate_Protocol_TextKit/index.html">Apple documentation for <c>NSLayoutManagerDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutManagerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public NSLayoutManagerDelegate (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutManagerDelegate (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected NSLayoutManagerDelegate (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutManagerDelegate (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected NSLayoutManagerDelegate (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBoxForControlGlyph">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF BoundingBoxForControlGlyph (MonoTouch.UIKit.NSLayoutManager layoutManager, uint glyphIndex, MonoTouch.UIKit.NSTextContainer textContainer, System.Drawing.RectangleF proposedRect, System.Drawing.PointF glyphPosition, uint charIndex);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF BoundingBoxForControlGlyph(class MonoTouch.UIKit.NSLayoutManager layoutManager, unsigned int32 glyphIndex, class MonoTouch.UIKit.NSTextContainer textContainer, valuetype System.Drawing.RectangleF proposedRect, valuetype System.Drawing.PointF glyphPosition, unsigned int32 charIndex) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect BoundingBoxForControlGlyph (MonoTouch.UIKit.NSLayoutManager layoutManager, nuint glyphIndex, MonoTouch.UIKit.NSTextContainer textContainer, MonoTouch.CoreGraphics.CGRect proposedRect, MonoTouch.CoreGraphics.CGPoint glyphPosition, nuint charIndex);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect BoundingBoxForControlGlyph(class MonoTouch.UIKit.NSLayoutManager layoutManager, valuetype System.nuint glyphIndex, class MonoTouch.UIKit.NSTextContainer textContainer, valuetype MonoTouch.CoreGraphics.CGRect proposedRect, valuetype MonoTouch.CoreGraphics.CGPoint glyphPosition, valuetype System.nuint charIndex) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:boundingBoxForControlGlyphAtIndex:forTextContainer:proposedLineFragment:glyphPosition:characterIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="glyphIndex" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="textContainer" Type="MonoTouch.UIKit.NSTextContainer" />
        <Parameter Name="proposedRect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="glyphPosition" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="charIndex" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="glyphIndex" Type="System.nuint" apistyle="unified" />
        <Parameter Name="proposedRect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
        <Parameter Name="glyphPosition" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
        <Parameter Name="charIndex" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <param name="textContainer">To be added.</param>
        <param name="proposedRect">To be added.</param>
        <param name="glyphPosition">To be added.</param>
        <param name="charIndex">To be added.</param>
        <summary>The RectangleF bounding the specified control glyph.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeGeometry">
      <MemberSignature Language="C#" Value="public virtual void DidChangeGeometry (MonoTouch.UIKit.NSLayoutManager layoutManager, MonoTouch.UIKit.NSTextContainer textContainer, System.Drawing.SizeF oldSize);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChangeGeometry(class MonoTouch.UIKit.NSLayoutManager layoutManager, class MonoTouch.UIKit.NSTextContainer textContainer, valuetype System.Drawing.SizeF oldSize) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual void DidChangeGeometry (MonoTouch.UIKit.NSLayoutManager layoutManager, MonoTouch.UIKit.NSTextContainer textContainer, MonoTouch.CoreGraphics.CGSize oldSize);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChangeGeometry(class MonoTouch.UIKit.NSLayoutManager layoutManager, class MonoTouch.UIKit.NSTextContainer textContainer, valuetype MonoTouch.CoreGraphics.CGSize oldSize) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:textContainer:didChangeGeometryFromSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="textContainer" Type="MonoTouch.UIKit.NSTextContainer" />
        <Parameter Name="oldSize" Type="System.Drawing.SizeF" apistyle="classic" />
        <Parameter Name="oldSize" Type="MonoTouch.CoreGraphics.CGSize" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="textContainer">To be added.</param>
        <param name="oldSize">To be added.</param>
        <summary>The geometry of <paramref name="textContainer" /> changed from <paramref name="oldSize" />, and <paramref name="layoutManager" /> will invalidate the layout.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidCompleteLayout">
      <MemberSignature Language="C#" Value="public virtual void DidCompleteLayout (MonoTouch.UIKit.NSLayoutManager layoutManager, MonoTouch.UIKit.NSTextContainer textContainer, bool layoutFinishedFlag);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidCompleteLayout(class MonoTouch.UIKit.NSLayoutManager layoutManager, class MonoTouch.UIKit.NSTextContainer textContainer, bool layoutFinishedFlag) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:didCompleteLayoutForTextContainer:atEnd:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="textContainer" Type="MonoTouch.UIKit.NSTextContainer" />
        <Parameter Name="layoutFinishedFlag" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="textContainer">To be added.</param>
        <param name="layoutFinishedFlag">To be added.</param>
        <summary>Indicates that the specified NSLayoutManager has finished laying out text in the specified text container.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidInvalidatedLayout">
      <MemberSignature Language="C#" Value="public virtual void DidInvalidatedLayout (MonoTouch.UIKit.NSLayoutManager sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidInvalidatedLayout(class MonoTouch.UIKit.NSLayoutManager sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManagerDidInvalidateLayout:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="MonoTouch.UIKit.NSLayoutManager" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <summary>Indicates that the NSLayoutManager has invalidated layout information (not glyph information).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineSpacingAfterGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual float LineSpacingAfterGlyphAtIndex (MonoTouch.UIKit.NSLayoutManager layoutManager, uint glyphIndex, System.Drawing.RectangleF rect);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 LineSpacingAfterGlyphAtIndex(class MonoTouch.UIKit.NSLayoutManager layoutManager, unsigned int32 glyphIndex, valuetype System.Drawing.RectangleF rect) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat LineSpacingAfterGlyphAtIndex (MonoTouch.UIKit.NSLayoutManager layoutManager, nuint glyphIndex, MonoTouch.CoreGraphics.CGRect rect);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat LineSpacingAfterGlyphAtIndex(class MonoTouch.UIKit.NSLayoutManager layoutManager, valuetype System.nuint glyphIndex, valuetype MonoTouch.CoreGraphics.CGRect rect) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:lineSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="glyphIndex" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="glyphIndex" Type="System.nuint" apistyle="unified" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <param name="rect">To be added.</param>
        <summary>The line spacing after the line ending with the specified glyph index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphSpacingAfterGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual float ParagraphSpacingAfterGlyphAtIndex (MonoTouch.UIKit.NSLayoutManager layoutManager, uint glyphIndex, System.Drawing.RectangleF rect);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ParagraphSpacingAfterGlyphAtIndex(class MonoTouch.UIKit.NSLayoutManager layoutManager, unsigned int32 glyphIndex, valuetype System.Drawing.RectangleF rect) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat ParagraphSpacingAfterGlyphAtIndex (MonoTouch.UIKit.NSLayoutManager layoutManager, nuint glyphIndex, MonoTouch.CoreGraphics.CGRect rect);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat ParagraphSpacingAfterGlyphAtIndex(class MonoTouch.UIKit.NSLayoutManager layoutManager, valuetype System.nuint glyphIndex, valuetype MonoTouch.CoreGraphics.CGRect rect) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:paragraphSpacingAfterGlyphAtIndex:withProposedLineFragmentRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="glyphIndex" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="glyphIndex" Type="System.nuint" apistyle="unified" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <param name="rect">To be added.</param>
        <summary>The paragraph spacing after the line ending with the specified glyph index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphSpacingBeforeGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual float ParagraphSpacingBeforeGlyphAtIndex (MonoTouch.UIKit.NSLayoutManager layoutManager, uint glyphIndex, System.Drawing.RectangleF rect);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float32 ParagraphSpacingBeforeGlyphAtIndex(class MonoTouch.UIKit.NSLayoutManager layoutManager, unsigned int32 glyphIndex, valuetype System.Drawing.RectangleF rect) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nfloat ParagraphSpacingBeforeGlyphAtIndex (MonoTouch.UIKit.NSLayoutManager layoutManager, nuint glyphIndex, MonoTouch.CoreGraphics.CGRect rect);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat ParagraphSpacingBeforeGlyphAtIndex(class MonoTouch.UIKit.NSLayoutManager layoutManager, valuetype System.nuint glyphIndex, valuetype MonoTouch.CoreGraphics.CGRect rect) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:paragraphSpacingBeforeGlyphAtIndex:withProposedLineFragmentRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="glyphIndex" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="glyphIndex" Type="System.nuint" apistyle="unified" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <param name="rect">To be added.</param>
        <summary>The paragraph spacing before the line starting with the specified glyph index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBreakLineByHyphenatingBeforeCharacter">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBreakLineByHyphenatingBeforeCharacter (MonoTouch.UIKit.NSLayoutManager layoutManager, uint charIndex);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBreakLineByHyphenatingBeforeCharacter(class MonoTouch.UIKit.NSLayoutManager layoutManager, unsigned int32 charIndex) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual bool ShouldBreakLineByHyphenatingBeforeCharacter (MonoTouch.UIKit.NSLayoutManager layoutManager, nuint charIndex);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBreakLineByHyphenatingBeforeCharacter(class MonoTouch.UIKit.NSLayoutManager layoutManager, valuetype System.nuint charIndex) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:shouldBreakLineByHyphenatingBeforeCharacterAtIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="charIndex" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="charIndex" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="charIndex">To be added.</param>
        <summary>Whether a line should break with a hyphen at the specified point. Called frequently.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBreakLineByWordBeforeCharacter">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBreakLineByWordBeforeCharacter (MonoTouch.UIKit.NSLayoutManager layoutManager, uint charIndex);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBreakLineByWordBeforeCharacter(class MonoTouch.UIKit.NSLayoutManager layoutManager, unsigned int32 charIndex) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual bool ShouldBreakLineByWordBeforeCharacter (MonoTouch.UIKit.NSLayoutManager layoutManager, nuint charIndex);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBreakLineByWordBeforeCharacter(class MonoTouch.UIKit.NSLayoutManager layoutManager, valuetype System.nuint charIndex) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:shouldBreakLineByWordBeforeCharacterAtIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="charIndex" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="charIndex" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="charIndex">To be added.</param>
        <summary>Whether a line should have a soft line break. Called frequently.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldGenerateGlyphs">
      <MemberSignature Language="C#" Value="public virtual uint ShouldGenerateGlyphs (MonoTouch.UIKit.NSLayoutManager layoutManager, IntPtr glyphBuffer, IntPtr props, IntPtr charIndexes, MonoTouch.UIKit.UIFont aFont, MonoTouch.Foundation.NSRange glyphRange);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int32 ShouldGenerateGlyphs(class MonoTouch.UIKit.NSLayoutManager layoutManager, native int glyphBuffer, native int props, native int charIndexes, class MonoTouch.UIKit.UIFont aFont, valuetype MonoTouch.Foundation.NSRange glyphRange) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nuint ShouldGenerateGlyphs (MonoTouch.UIKit.NSLayoutManager layoutManager, IntPtr glyphBuffer, IntPtr props, IntPtr charIndexes, MonoTouch.UIKit.UIFont aFont, MonoTouch.Foundation.NSRange glyphRange);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint ShouldGenerateGlyphs(class MonoTouch.UIKit.NSLayoutManager layoutManager, native int glyphBuffer, native int props, native int charIndexes, class MonoTouch.UIKit.UIFont aFont, valuetype MonoTouch.Foundation.NSRange glyphRange) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:shouldGenerateGlyphs:properties:characterIndexes:font:forGlyphRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.UInt32</ReturnType>
        <ReturnType apistyle="unified">System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="glyphBuffer" Type="System.IntPtr" />
        <Parameter Name="props" Type="System.IntPtr" />
        <Parameter Name="charIndexes" Type="System.IntPtr" />
        <Parameter Name="aFont" Type="MonoTouch.UIKit.UIFont" />
        <Parameter Name="glyphRange" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="glyphBuffer">To be added.</param>
        <param name="props">To be added.</param>
        <param name="charIndexes">To be added.</param>
        <param name="aFont">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>When overridden, allows the app developer to customize the initial glyph generation process.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSetLineFragmentRect">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSetLineFragmentRect (MonoTouch.UIKit.NSLayoutManager layoutManager, ref System.Drawing.RectangleF lineFragmentRect, ref System.Drawing.RectangleF lineFragmentUsedRect, ref float baselineOffset, MonoTouch.UIKit.NSTextContainer textContainer, MonoTouch.Foundation.NSRange glyphRange);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSetLineFragmentRect(class MonoTouch.UIKit.NSLayoutManager layoutManager, valuetype System.Drawing.RectangleF lineFragmentRect, valuetype System.Drawing.RectangleF lineFragmentUsedRect, float32 baselineOffset, class MonoTouch.UIKit.NSTextContainer textContainer, valuetype MonoTouch.Foundation.NSRange glyphRange) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual bool ShouldSetLineFragmentRect (MonoTouch.UIKit.NSLayoutManager layoutManager, ref MonoTouch.CoreGraphics.CGRect lineFragmentRect, ref MonoTouch.CoreGraphics.CGRect lineFragmentUsedRect, ref nfloat baselineOffset, MonoTouch.UIKit.NSTextContainer textContainer, MonoTouch.Foundation.NSRange glyphRange);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSetLineFragmentRect(class MonoTouch.UIKit.NSLayoutManager layoutManager, valuetype MonoTouch.CoreGraphics.CGRect lineFragmentRect, valuetype MonoTouch.CoreGraphics.CGRect lineFragmentUsedRect, valuetype System.nfloat baselineOffset, class MonoTouch.UIKit.NSTextContainer textContainer, valuetype MonoTouch.Foundation.NSRange glyphRange) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:shouldSetLineFragmentRect:lineFragmentUsedRect:baselineOffset:inTextContainer:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="lineFragmentRect" Type="System.Drawing.RectangleF&amp;" RefType="ref" apistyle="classic" />
        <Parameter Name="lineFragmentUsedRect" Type="System.Drawing.RectangleF&amp;" RefType="ref" apistyle="classic" />
        <Parameter Name="baselineOffset" Type="System.Single&amp;" RefType="ref" apistyle="classic" />
        <Parameter Name="textContainer" Type="MonoTouch.UIKit.NSTextContainer" />
        <Parameter Name="glyphRange" Type="MonoTouch.Foundation.NSRange" />
        <Parameter Name="lineFragmentRect" Type="MonoTouch.CoreGraphics.CGRect&amp;" RefType="ref" apistyle="unified" />
        <Parameter Name="lineFragmentUsedRect" Type="MonoTouch.CoreGraphics.CGRect&amp;" RefType="ref" apistyle="unified" />
        <Parameter Name="baselineOffset" Type="System.nfloat&amp;" RefType="ref" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="lineFragmentRect">To be added.</param>
        <param name="lineFragmentUsedRect">To be added.</param>
        <param name="baselineOffset">To be added.</param>
        <param name="textContainer">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldUseAction">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSControlCharacterAction ShouldUseAction (MonoTouch.UIKit.NSLayoutManager layoutManager, MonoTouch.UIKit.NSControlCharacterAction action, uint charIndex);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.NSControlCharacterAction ShouldUseAction(class MonoTouch.UIKit.NSLayoutManager layoutManager, valuetype MonoTouch.UIKit.NSControlCharacterAction action, unsigned int32 charIndex) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSControlCharacterAction ShouldUseAction (MonoTouch.UIKit.NSLayoutManager layoutManager, MonoTouch.UIKit.NSControlCharacterAction action, nuint charIndex);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.NSControlCharacterAction ShouldUseAction(class MonoTouch.UIKit.NSLayoutManager layoutManager, valuetype MonoTouch.UIKit.NSControlCharacterAction action, valuetype System.nuint charIndex) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("layoutManager:shouldUseAction:forControlCharacterAtIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSControlCharacterAction</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutManager" Type="MonoTouch.UIKit.NSLayoutManager" />
        <Parameter Name="action" Type="MonoTouch.UIKit.NSControlCharacterAction" />
        <Parameter Name="charIndex" Type="System.UInt32" apistyle="classic" />
        <Parameter Name="charIndex" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="layoutManager">To be added.</param>
        <param name="action">To be added.</param>
        <param name="charIndex">To be added.</param>
        <summary>The control character action for the control character at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
