<Type Name="NSLayoutConstraint" FullName="MonoTouch.UIKit.NSLayoutConstraint">
  <TypeSignature Language="C#" Value="public class NSLayoutConstraint : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSLayoutConstraint extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSLayoutConstraint", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A relationship between two layout attributes used in a constraint-based layout.</summary>
    <remarks>
      <para>An <see cref="T:MonoTouch.UIKit.NSLayoutConstraint" /> specifies the relationship between two layout attributes (<see cref="P:MonoTouch.UIKit.NSLayoutConstraint.FirstAttribute" /> and <see cref="P:MonoTouch.UIKit.NSLayoutConstraint.SecondAttribute" />, both of which are of type <see cref="T:MonoTouch.UIKit.NSLayoutAttribute" />) in a constraint-based layout.</para>
      <para>The relationship consists of:</para>
      <list type="bullet">
        <item>
          <term>A <see cref="T:MonoTouch.UIKit.NSLayoutRelation" /> (e.g., <see cref="M:MonoTouch.UIKit.NSLayoutRelation.GreaterThanOrEqual" />)</term>
        </item>
        <item>
          <term>A floating point <see cref="M:MonoTouch.UIKit.NSLayoutConstraint.Multiplier" /></term>
        </item>
        <item>
          <term>A single-precision floating point <see cref="M:MonoTouch.UIKit.NSLayoutConstraint.Constant" /></term>
        </item>
        <item>
          <term>A floating point <see cref="M:MonoTouch.UIKit.NSLayoutConstraint.Priority" />. Constraints with higher priorities are satisfied before constraints with lower priorities.</term>
        </item>
      </list>
      <para>The constraint engine will set the value of the <see cref="P:MonoTouch.UIKit.NSLayoutConstraint.FirstAttribute" /> such that it satisfies the constraint <c>FirstAttribute &lt;Relation&gt; &lt;Constant&gt; + &lt;Multiplier&gt; * &lt;SecondAttribute&gt;</c>.  For instance, in the following code from the "Media Notes" sample, <c>tconstraint2</c> is a constraint that specifies that the top of the <c>toolbar</c> is going to be equal to the top of the <c>View</c> plus the value of the <c>toolbarVerticalOffset</c>, while <c>tconstraint1</c> specifies that the width of the <c>toolbar</c> will be equal to the width of the <c>View</c>. Both of these constraints have a <see cref="M:MonoTouch.UIKit.NSLayoutConstraint.Priority" /> of <c>1.0</c>.</para>
      <example>
        <code lang="C#"><![CDATA[
          var tconstraint2 = NSLayoutConstraint.Create (toolbar, NSLayoutAttribute.Top, NSLayoutRelation.Equal,
                                                             View, NSLayoutAttribute.Top, 1.0f, toolbarVerticalOffset);
            toolbarTopConstraint = tconstraint2;
            var tconstraint1 = NSLayoutConstraint.Create (toolbar, NSLayoutAttribute.Width, NSLayoutRelation.Equal,
                                                             View, NSLayoutAttribute.Width, 1.0f, 0.0f);
        ]]></code>
      </example>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/iOS/Samples/ByGuid?guid=FAE04EC0-301F-11D3-BF4B-00C04F79EFBC">Media Notes</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutConstraint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutConstraint (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutConstraint (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutConstraint (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateConstraints">
      <MemberSignature Language="C#" Value="public static void ActivateConstraints (MonoTouch.UIKit.NSLayoutConstraint[] constraints);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ActivateConstraints(class MonoTouch.UIKit.NSLayoutConstraint[] constraints) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("activateConstraints:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraints" Type="MonoTouch.UIKit.NSLayoutConstraint[]" />
      </Parameters>
      <Docs>
        <param name="constraints">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="public virtual bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isActive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setActive:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public virtual float Constant { get; set; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Constant" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual nfloat Constant { get; set; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Constant" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("constant")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setConstant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Single</ReturnType>
        <ReturnType apistyle="new">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the constant float applied to the constraint.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.NSLayoutConstraint Create (MonoTouch.Foundation.NSObject view1, MonoTouch.UIKit.NSLayoutAttribute attribute1, MonoTouch.UIKit.NSLayoutRelation relation, MonoTouch.Foundation.NSObject view2, MonoTouch.UIKit.NSLayoutAttribute attribute2, float multiplier, float constant);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.NSLayoutConstraint Create(class MonoTouch.Foundation.NSObject view1, valuetype MonoTouch.UIKit.NSLayoutAttribute attribute1, valuetype MonoTouch.UIKit.NSLayoutRelation relation, class MonoTouch.Foundation.NSObject view2, valuetype MonoTouch.UIKit.NSLayoutAttribute attribute2, float32 multiplier, float32 constant) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.NSLayoutConstraint Create (MonoTouch.Foundation.NSObject view1, MonoTouch.UIKit.NSLayoutAttribute attribute1, MonoTouch.UIKit.NSLayoutRelation relation, MonoTouch.Foundation.NSObject view2, MonoTouch.UIKit.NSLayoutAttribute attribute2, nfloat multiplier, nfloat constant);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.NSLayoutConstraint Create(class MonoTouch.Foundation.NSObject view1, valuetype MonoTouch.UIKit.NSLayoutAttribute attribute1, valuetype MonoTouch.UIKit.NSLayoutRelation relation, class MonoTouch.Foundation.NSObject view2, valuetype MonoTouch.UIKit.NSLayoutAttribute attribute2, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view1" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="attribute1" Type="MonoTouch.UIKit.NSLayoutAttribute" />
        <Parameter Name="relation" Type="MonoTouch.UIKit.NSLayoutRelation" />
        <Parameter Name="view2" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="attribute2" Type="MonoTouch.UIKit.NSLayoutAttribute" />
        <Parameter Name="multiplier" Type="System.Single" apistyle="old" />
        <Parameter Name="constant" Type="System.Single" apistyle="old" />
        <Parameter Name="multiplier" Type="System.nfloat" apistyle="new" />
        <Parameter Name="constant" Type="System.nfloat" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="view1">To be added.</param>
        <param name="attribute1">To be added.</param>
        <param name="relation">To be added.</param>
        <param name="view2">
          <para>The other item that the contraint will reference.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="attribute2">To be added.</param>
        <param name="multiplier">To be added.</param>
        <param name="constant">To be added.</param>
        <summary>Factory method for creating a constraint.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.NSLayoutConstraint Create (MonoTouch.ObjCRuntime.INativeObject view1, MonoTouch.UIKit.NSLayoutAttribute attribute1, MonoTouch.UIKit.NSLayoutRelation relation, MonoTouch.ObjCRuntime.INativeObject view2, MonoTouch.UIKit.NSLayoutAttribute attribute2, float multiplier, float constant);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.NSLayoutConstraint Create(class MonoTouch.ObjCRuntime.INativeObject view1, valuetype MonoTouch.UIKit.NSLayoutAttribute attribute1, valuetype MonoTouch.UIKit.NSLayoutRelation relation, class MonoTouch.ObjCRuntime.INativeObject view2, valuetype MonoTouch.UIKit.NSLayoutAttribute attribute2, float32 multiplier, float32 constant) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.NSLayoutConstraint Create (MonoTouch.ObjCRuntime.INativeObject view1, MonoTouch.UIKit.NSLayoutAttribute attribute1, MonoTouch.UIKit.NSLayoutRelation relation, MonoTouch.ObjCRuntime.INativeObject view2, MonoTouch.UIKit.NSLayoutAttribute attribute2, nfloat multiplier, nfloat constant);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.NSLayoutConstraint Create(class MonoTouch.ObjCRuntime.INativeObject view1, valuetype MonoTouch.UIKit.NSLayoutAttribute attribute1, valuetype MonoTouch.UIKit.NSLayoutRelation relation, class MonoTouch.ObjCRuntime.INativeObject view2, valuetype MonoTouch.UIKit.NSLayoutAttribute attribute2, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view1" Type="MonoTouch.ObjCRuntime.INativeObject" />
        <Parameter Name="attribute1" Type="MonoTouch.UIKit.NSLayoutAttribute" />
        <Parameter Name="relation" Type="MonoTouch.UIKit.NSLayoutRelation" />
        <Parameter Name="view2" Type="MonoTouch.ObjCRuntime.INativeObject" />
        <Parameter Name="attribute2" Type="MonoTouch.UIKit.NSLayoutAttribute" />
        <Parameter Name="multiplier" Type="System.Single" apistyle="old" />
        <Parameter Name="constant" Type="System.Single" apistyle="old" />
        <Parameter Name="multiplier" Type="System.nfloat" apistyle="new" />
        <Parameter Name="constant" Type="System.nfloat" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="view1">To be added.</param>
        <param name="attribute1">To be added.</param>
        <param name="relation">To be added.</param>
        <param name="view2">To be added.</param>
        <param name="attribute2">To be added.</param>
        <param name="multiplier">To be added.</param>
        <param name="constant">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeactivateConstraints">
      <MemberSignature Language="C#" Value="public static void DeactivateConstraints (MonoTouch.UIKit.NSLayoutConstraint[] constraints);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeactivateConstraints(class MonoTouch.UIKit.NSLayoutConstraint[] constraints) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("deactivateConstraints:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraints" Type="MonoTouch.UIKit.NSLayoutConstraint[]" />
      </Parameters>
      <Docs>
        <param name="constraints">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NSLayoutConstraint object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSLayoutConstraint class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the NSLayoutConstraint ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstAttribute">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutAttribute FirstAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.NSLayoutAttribute FirstAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("firstAttribute")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The attribute of the first item participating in the constraint.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject FirstItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject FirstItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("firstItem", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The first item participating in the constraint.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromVisualFormat">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.NSLayoutConstraint[] FromVisualFormat (string format, MonoTouch.UIKit.NSLayoutFormatOptions formatOptions, MonoTouch.Foundation.NSDictionary metrics, MonoTouch.Foundation.NSDictionary views);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.NSLayoutConstraint[] FromVisualFormat(string format, valuetype MonoTouch.UIKit.NSLayoutFormatOptions formatOptions, class MonoTouch.Foundation.NSDictionary metrics, class MonoTouch.Foundation.NSDictionary views) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("constraintsWithVisualFormat:options:metrics:views:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutConstraint[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatOptions" Type="MonoTouch.UIKit.NSLayoutFormatOptions" />
        <Parameter Name="metrics" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="views" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="formatOptions">To be added.</param>
        <param name="metrics">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="views">To be added.</param>
        <summary>Factory method for creating a constraint using Visual Format Language.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiplier">
      <MemberSignature Language="C#" Value="public virtual float Multiplier { get; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Multiplier" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual nfloat Multiplier { get; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Multiplier" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("multiplier")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Single</ReturnType>
        <ReturnType apistyle="new">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Applied to the second attribute participating in the constraint.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public virtual float Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("priority")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPriority:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The priority of the constraint. Must be in range [0, UILayoutPriority.Required].</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relation">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutRelation Relation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.NSLayoutRelation Relation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("relation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutRelation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The NSRelation that holds between the two items in the constraint.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecondAttribute">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutAttribute SecondAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.NSLayoutAttribute SecondAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("secondAttribute")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The attribute of the second item participating in the constraint.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecondItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject SecondItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject SecondItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("secondItem", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The second item participating in the constraint.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeArchived">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBeArchived { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldBeArchived" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("shouldBeArchived")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setShouldBeArchived:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the constraint should be archived by its owning UIView.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
