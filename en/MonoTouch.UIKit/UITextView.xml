<Type Name="UITextView" FullName="MonoTouch.UIKit.UITextView">
  <TypeSignature Language="C#" Value="public class UITextView : MonoTouch.UIKit.UIScrollView, MonoTouch.UIKit.IUITextInputTraits" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UITextView extends MonoTouch.UIKit.UIScrollView implements class MonoTouch.UIKit.IUITextInputTraits" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.UIKit.UIScrollView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.UIKit.IUITextInputTraits</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UITextView", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:MonoTouch.UIKit.UIControl" /> that displays a scrollable multi-line text editor.</summary>
    <remarks>
      <para>The <see cref="T:MonoTouch.UIKit.UITextView" /> is a scrollable, multi-line text view that can display styled text and can be editable.</para>
      <format type="text/html">
        <h2>Editing</h2>
      </format>
      <para>If <see cref="P:MonoTouch.UIKit.UITextView.Editable" /> is <see langword="true" />, the text view will be editable by the application user. When the application user taps on the view, it becomes the first responder and displays the system keyboard. It is the application developer's responsibility to ensure that the keyboard does not obscure functionality (e.g., by scrolling or rearranging views). To make the keyboard disappear, the application developer must have the <see cref="T:MonoTouch.UIKit.UITextView" /> resign first responder status (by calling <see cref="M:MonoTouch.UIKit.UIResponder.ResignFirstResponder" />).</para>
      <para>Application developers can use <see cref="T:MonoTouch.UIKit.UIKeyboard.Notifications" /> to calculate the necessary scrolling or rearranging of views associated with the appearance and disappearance of the keyboard. </para>
      <para>Since the <see cref="T:MonoTouch.UIKit.UITextView" /> is multiline, unlike the <see cref="T:MonoTouch.UIKit.UITextField" />, the keyboard's <c>return</c> key cannot be replaced by a <c>done</c> key and there is no equivalent to the <see cref="P:MonoTouch.UIKit.UITextField.ShouldReturn" /> property. A common idiom for a <see cref="T:MonoTouch.UIKit.UITextView" /> is to "end editing when the user touches anywhere outside the text field." This can be done by overriding <see cref="M:MonoTouch.UIResponder.TouchesBegan" /> in the containing <see cref="T:MonoTouch.UIKit.UIView" /> and calling <see cref="M:MonoTouch.UIKit.UIView.EndEditing" />, as shown in the following example:</para>
      <example>
        <code lang="C#"><![CDATA[
public class MyView : UIView
{
	UITextView textView;

	public MyView()
	{
		textView = new UITextView(new RectangleF(10, 44, UIScreen.MainScreen.Bounds.Width - 20, 300)){
			Editable = true
		};
		AddSubview(textView);
	}

	public override void TouchesBegan(NSSet touches, UIEvent evt)
	{
		EndEditing(true);
	}
}
          ]]></code>
      </example>
      <format type="text/html">
        <h2>Text Kit</h2>
      </format>
      <para>iOS 7 introduced "Text Kit," a broad set of APIs and modifications of existing classes, built on <see cref="N:MonoTouch.CoreText" />, that greatly expands the typographical flexibility of iOS.</para>
      <para>
        <see cref="T:MonoTouch.UIKit.UITextView" />s are intended to display large amounts of text. The text is stored in <see cref="T:MonoTouch.UIKit.NSTextStorage" /> objects and layout of the text is managed by a <see cref="T:MonoTouch.UIKit.NSLayoutManager" />, which lays out the text in an area defined by <see cref="T:MonoTouch.UIKit.NSTextContainer" /> objects. </para>
      <para>Mapped to the Model-View-Controller pattern, the <see cref="T:MonoTouch.UIKit.NSLayoutManager" /> is the Controller, the <see cref="T:MonoTouch.UIKit.UITextView" /> is the View, and <see cref="T:MonoTouch.UIKit.NSTextStorage" /> and <see cref="T:MonoTouch.UIKit.NSTextContainer" />s are Model elements.</para>
      <para>
        <see cref="T:MonoTouch.UIKit.NSTextStorage" /> is a subclass of <see cref="T:MonoTouch.Foundation.NSMutableAttributedString" /> and is responsible for holding the string, with various text styles. <see cref="T:MonoTouch.UIKit.NSTextContainer" /> objects are responsible for modeling the geometric layout of the page. The <see cref="T:MonoTouch.UIKit.NSLayoutManager" /> translates characters in the <see cref="T:MonoTouch.UIKit.NSTextStorage" /> into glyphs, lays those out in lines according to the constraints of the <see cref="T:MonoTouch.UIKit.NSTextContainer" />s, and coordinates the display of one or more <see cref="T:MonoTouch.UIKit.UITextView" /> objects.</para>
      <para>The following example shows the basic use of two important Text Kit features: multiple text styles and exclusion paths:</para>
      <example>
        <code lang="C#"><![CDATA[
	var size = UIScreen.MainScreen.Bounds.Size;

	var atts = new UIStringAttributes();
	atts.ForegroundColor = UIColor.Blue;
	var txt = "\nText Kit.\n Lorem ipsum dolor ...  auctor.";
	var attributedString = new NSMutableAttributedString(txt, atts);
	attributedString.BeginEditing();
	attributedString.AddAttribute(UIStringAttributeKey.ForegroundColor, UIColor.Red, new NSRange(0, 10));
	attributedString.AddAttribute(UIStringAttributeKey.Font, UIFont.PreferredFontForTextStyle(UIFontTextStyle.Headline), new NSRange(0, 10));
	attributedString.EndEditing();

	//NSTextStorage == MVC Model (partial)
	var storage = new NSTextStorage();
	storage.SetString(attributedString);

	//NSLayoutManager == MVC Controller
	var layoutManager = new NSLayoutManager();
	storage.AddLayoutManager(layoutManager);
	//NSTextContainer defines a logical block (page, column)
	var container = new NSTextContainer(size);
	layoutManager.AddTextContainer(container);

	//UITextView == MVC View
	TextView = new UITextView(new RectangleF(new PointF(0, 0), size), container);
	TextView.AttributedText = attributedString;
	TextView.ScrollEnabled = false;
	TextView.Editable = false;
	TextView.UserInteractionEnabled = false;
	AddSubview(TextView);

	//Add an image overlay, with exclusion path..
	var logoRect = new RectangleF(96, 195, 95, 90);
	var img = UIImage.FromBundle("xam.png");
	var imgView = new UIImageView(logoRect);
	imgView.Image = img;
	AddSubview(imgView);

	//Note exclusion path in container coordinate system...
	var xRect = TextView.ConvertRectFromView(logoRect, this);
	var hexPath = HexPath(xRect);
	container.ExclusionPaths = new UIBezierPath[] { hexPath };
}
            ]]></code>
      </example>
      <para>iOS 6 added multiple text-style capability to <see cref="T:MonoTouch.UIKit.UITextView" />. To use multiple styles, application developers must use the <see cref="P:MonoTouch.UIKit.UITextView.AttributedText" /> property. The <see cref="P:MonoTouch.UIKit.UITextView.Font" />, <see cref="P:MonoTouch.UIKit.UITextView.TextColor" />, and <see cref="P:MonoTouch.UIKit.UITextView.TextAlignment" /> properties apply to all the text in the <see cref="T:MonoTouch.UIKit.UITextView" />.</para>
      <format type="text/html">
        <br />
      </format>
      <para>
        The MonoTouch API supports two styles of event notification: the Objective-C style that uses a delegate class or the C# style using event notifications.  
      </para>
      <para>
        The C# style allows the user to add or remove event handlers at runtime by assigning to the events of properties of this class.    Event handlers can be anyone of a method, an anonymous methods or a lambda expression.  Using the C# style events or properties will override any manual settings to the Objective-C Delegate or WeakDelegate settings.
      </para>
      <para>The Objective-C style requires the user to create a new class derived from <see cref="T:MonoTouch.UIKit.UITextViewDelegate" /> class and assign it to the <see cref="P:MonoTouch.UIKit.Delegate" /> property.   Alternatively, for low-level control, by creating a class derived from <see cref="T:MonoTouch.Foundation.NSObject" /> which has every entry point properly decorated with an [Export] attribute.   The instance of this object can then be assigned to the <see cref="P:MonoTouch.UIKit.UITextView.WeakDelegate" /> property.   
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextView (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextView (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextView (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextView (System.Drawing.RectangleF frame);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF frame) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public UITextView (MonoTouch.CoreGraphics.CGRect frame);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MonoTouch.CoreGraphics.CGRect frame) cil managed" apistyle="new" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="frame" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UITextView with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of UITextView with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextView (System.Drawing.RectangleF frame, MonoTouch.UIKit.NSTextContainer textContainer);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF frame, class MonoTouch.UIKit.NSTextContainer textContainer) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public UITextView (MonoTouch.CoreGraphics.CGRect frame, MonoTouch.UIKit.NSTextContainer textContainer);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MonoTouch.CoreGraphics.CGRect frame, class MonoTouch.UIKit.NSTextContainer textContainer) cil managed" apistyle="new" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithFrame:textContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="textContainer" Type="MonoTouch.UIKit.NSTextContainer" />
        <Parameter Name="frame" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="frame">To be added.</param>
        <param name="textContainer">To be added.</param>
        <summary>Instantiates a new <see cref="T:MonoTouch.UIKit.UITextView" /> with the specified <paramref name="frame" /> and <paramref name="textContainer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsEditingTextAttributes">
      <MemberSignature Language="C#" Value="public virtual bool AllowsEditingTextAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsEditingTextAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("allowsEditingTextAttributes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAllowsEditingTextAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the application user can change the style of the text.</summary>
        <value>The default value is <see langword="false" />.</value>
        <remarks>When <see langword="true" />, the application user can change the style of the currently-selected text.</remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.AttributedText" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.DataDetectorTypes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Editable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Font" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Text" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextAlignment" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextContainerInsert" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextColor" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TypingAttributes" />
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextView.UITextViewAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UITextView/UITextViewAppearance Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextView+UITextViewAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>Setting any appearance properties on this instance will affect the appearance of all instances of UITextView.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextView.UITextViewAppearance AppearanceWhenContainedIn (Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextView/UITextViewAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextView+UITextViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that you want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that you can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where you can set appearance properties for instances of UITextView when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#">
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
</code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:MonoTouch.UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributedText">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSAttributedString AttributedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSAttributedString AttributedText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("attributedText", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAttributedText:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contents of the text view as an attributed string.</summary>
        <value>
        </value>
        <remarks>
          <para>Application developers must use this property if they desire the use of multiple text styles in the <see cref="T:MonoTouch.UIKit.UITextView" />. The following example uses <see cref="M:MonoTouch.Foundation.NSMutableAttributableString.AddAttribute" /> to modify the color and font in a various ranges, as shown in the image.</para>
          <example>
            <code lang="C#"><![CDATA[
  //UITextView default
  var atts = new UIStringAttributes();
  atts.ForegroundColor = UIColor.Blue;
  var txt = "Text Kit.\n Lorem ipsum different font dolor sit amet, consectetur adipiscing elit.";
  var attributedString = new NSMutableAttributedString(txt,atts);
  
  //Multiple type styles. 
  attributedString.BeginEditing();
  attributedString.AddAttribute(UIStringAttributeKey.ForegroundColor, UIColor.Red, new NSRange(0, 10));
  attributedString.AddAttribute(UIStringAttributeKey.Font, UIFont.PreferredFontForTextStyle(UIFontTextStyle.Headline), new NSRange(0, 10));
  attributedString.AddAttribute(UIStringAttributeKey.Font, UIFont.FromName("Georgia", 20), new NSRange(23, 14));
  attributedString.EndEditing();
  
  TextView.AttributedText = attributedString;
            ]]></code>
          </example>
          <para>
            <img href="MonoTouch.UIKit.UITextView.AttributedText.png" />
          </para>
        </remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.AllowsEditingTextAttributes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.DataDetectorTypes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Editable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Font" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Text" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextAlignment" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextContainerInsert" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextColor" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TypingAttributes" />
      </Docs>
    </Member>
    <Member MemberName="AutocapitalizationType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextAutocapitalizationType AutocapitalizationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextAutocapitalizationType AutocapitalizationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("autocapitalizationType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAutocapitalizationType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextAutocapitalizationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>How input is converted to all capitalization.</summary>
        <value>The default value is <see cref="E:MonoTouch.UIKit.UITextAutocapitalizationType.Sentences" /></value>
        <remarks>
          <para>The application user can ignore this value by setting Settings-&gt;General-&gt;Keyboard-&gt;Auto-Capitalization to off.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutocorrectionType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextAutocorrectionType AutocorrectionType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextAutocorrectionType AutocorrectionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("autocorrectionType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAutocorrectionType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextAutocorrectionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A property that controls when words will be automatically corrected.</summary>
        <value>The default value is <see cref="E:MonoTouch.UIKit.UITextAutocorrectionType.Default" /></value>
        <remarks>
          <para>The application user can ignore this value by setting Settings-&gt;General-&gt;Keyboard-&gt;Auto-Correction to off.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginningOfDocument">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition BeginningOfDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextPosition BeginningOfDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("beginningOfDocument")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property holds the text position for the beginning of the document. Read-only.</summary>
        <value>
        </value>
        <remarks />
        <altmember cref="P:MonoTouch.UIKit.UITextView.EndOfDocument" />
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public event EventHandler Changed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Changed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearsOnInsertion">
      <MemberSignature Language="C#" Value="public virtual bool ClearsOnInsertion { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClearsOnInsertion" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("clearsOnInsertion")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setClearsOnInsertion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether inserting new text erases the current contents.</summary>
        <value>The default value is <see langword="false" />.</value>
        <remarks>
          <para>If this value is <see langword="true" /> and the <see cref="T:MonoTouch.UIKit.UITextView" /> is in editing mode, inserting text will replace the existing contents and set this property to <see langword="false" />.</para>
        </remarks>
        <altmember cref="M:MonoTouch.UIKit.UITextView.ScrollRangeToVisible" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Selectable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.SelectedRange" />
      </Docs>
    </Member>
    <Member MemberName="ComparePosition">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSComparisonResult ComparePosition (MonoTouch.UIKit.UITextPosition first, MonoTouch.UIKit.UITextPosition second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.Foundation.NSComparisonResult ComparePosition(class MonoTouch.UIKit.UITextPosition first, class MonoTouch.UIKit.UITextPosition second) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("comparePosition:toPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="second" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="first">The first  location in a document.</param>
        <param name="second">The second location in a document.</param>
        <summary>Returns a value that shows how one location in a document that compares to another location: before, identical, or after.</summary>
        <returns>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CurrentInputModeDidChangeNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString CurrentInputModeDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString CurrentInputModeDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextInputCurrentInputModeDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for CurrentInputModeDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:MonoTouch.Foundation.NSNotificationCenter" /> to register a listener for this notification.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (UITextView.CurrentInputModeDidChangeNotification, (notification) => Console.WriteLine ("Received the notification UITextView", notification);

// Method style
void Callback (NSNotification notification)
{
   Console.WriteLine ("Received a notification UITextView", notification);
}
void Setup ()
{
   NSNotificationCenter.DefaultCenter.AddObserver (UITextView.CurrentInputModeDidChangeNotification, Callback);
}
              ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataDetectorTypes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIDataDetectorType DataDetectorTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIDataDetectorType DataDetectorTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("dataDetectorTypes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDataDetectorTypes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIDataDetectorType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property holds a value that determines what text in the document can be converted into clickable links.</summary>
        <value>The default value is <see cref="E:MonoTouch.UIKit.UIDataDetectorTypes.None" /></value>
        <remarks>
          <para>Setting this value to something other the <see cref="E:MonoTouch.UIKit.UIDataDetectorTypes.None" /> will convert appropriate text (phone numbers, URLs, calendar events, and addresses) into clickable links. On clicking, the operating system will open the appropriate application to handle that type of link.</para>
        </remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.AllowsEditingTextAttributes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.AttributedText" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Editable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Font" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Text" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextAlignment" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextContainerInsert" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextColor" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TypingAttributes" />
      </Docs>
    </Member>
    <Member MemberName="DecelerationEnded">
      <MemberSignature Language="C#" Value="public event EventHandler DecelerationEnded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DecelerationEnded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationStarted">
      <MemberSignature Language="C#" Value="public event EventHandler DecelerationStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DecelerationStarted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextViewDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextViewDelegate Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextViewDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the MonoTouch.UIKit.UITextViewDelegate model class which acts as the class delegate.</summary>
        <value>
          <para>The instance of the MonoTouch.UIKit.UITextViewDelegate model class</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, use the WeakDelegate property instead if you want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBackward">
      <MemberSignature Language="C#" Value="public virtual void DeleteBackward ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteBackward() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("deleteBackward")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deletes one character backwards from the cursor.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="DictationRecognitionFailed">
      <MemberSignature Language="C#" Value="public virtual void DictationRecognitionFailed ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DictationRecognitionFailed() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("dictationRecognitionFailed")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method is called once dictation has unsuccessfully completed.</summary>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DictationRecordingDidEnd">
      <MemberSignature Language="C#" Value="public virtual void DictationRecordingDidEnd ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DictationRecordingDidEnd() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("dictationRecordingDidEnd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method is called when the there is a pending dictation. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidZoom">
      <MemberSignature Language="C#" Value="public event EventHandler DidZoom;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidZoom" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UITextView object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UITextView class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the UITextView ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DraggingEnded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.UIKit.DraggingEventArgs&gt; DraggingEnded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.UIKit.DraggingEventArgs&gt; DraggingEnded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.UIKit.DraggingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DraggingStarted">
      <MemberSignature Language="C#" Value="public event EventHandler DraggingStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DraggingStarted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Editable">
      <MemberSignature Language="C#" Value="public virtual bool Editable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Editable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isEditable")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setEditable:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property determines if the text view is editable or not.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.AllowsEditingTextAttributes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.AttributedText" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.DataDetectorTypes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Font" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Text" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextAlignment" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextContainerInsert" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextColor" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TypingAttributes" />
      </Docs>
    </Member>
    <Member MemberName="EnablesReturnKeyAutomatically">
      <MemberSignature Language="C#" Value="public virtual bool EnablesReturnKeyAutomatically { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablesReturnKeyAutomatically" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("enablesReturnKeyAutomatically")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setEnablesReturnKeyAutomatically:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If <see langword="true" />, then the return key on the keyboard will be disabled when there is no text in the text view.</summary>
        <value>The default value is <see langword="false" />.
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ended">
      <MemberSignature Language="C#" Value="public event EventHandler Ended;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Ended" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when editing has finished in this UITextView.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="EndOfDocument">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition EndOfDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextPosition EndOfDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("endOfDocument")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property holds the text position for the end of the document. Read-only.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
        <altmember cref="P:MonoTouch.UIKit.BeginningOfDocument" />
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIFont Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIFont Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("font", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setFont:", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property holds the font that will be used to display the text.</summary>
        <value>The default value is <see langword="null" /> (the default font is <see cref="P:MonoTouch.UIKit.UIFont.PreferredBody" />).</value>
        <remarks>
          <para>Assignment to this property will affect all the text in the <see cref="T:MonoTouch.UIKit.UITextView" />. If multiple text-styles are desired, the application developer must use the <see cref="P:MonoTouch.UIKit.UITextView.AttributedText" /> property.</para>
        </remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.AllowsEditingTextAttributes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.AttributedText" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.DataDetectorTypes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Editable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Text" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextAlignment" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextContainerInsert" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextColor" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TypingAttributes" />
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextView.UITextViewAppearance GetAppearance&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextView/UITextViewAppearance GetAppearance&lt;T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextView+UITextViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <summary>The strongly-typed IUIAppearance for this object.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextView.UITextViewAppearance GetAppearance&lt;T&gt; (MonoTouch.UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextView/UITextViewAppearance GetAppearance&lt;T&gt;(class MonoTouch.UIKit.UITraitCollection traits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextView+UITextViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="traits">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UITextView.UITextViewAppearance GetAppearance&lt;T&gt; (MonoTouch.UIKit.UITraitCollection traits, Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UITextView/UITextViewAppearance GetAppearance&lt;T&gt;(class MonoTouch.UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextView+UITextViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseWritingDirection">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextWritingDirection GetBaseWritingDirection (MonoTouch.UIKit.UITextPosition forPosition, MonoTouch.UIKit.UITextStorageDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.UITextWritingDirection GetBaseWritingDirection(class MonoTouch.UIKit.UITextPosition forPosition, valuetype MonoTouch.UIKit.UITextStorageDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("baseWritingDirectionForPosition:inDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextWritingDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="direction" Type="MonoTouch.UIKit.UITextStorageDirection" />
      </Parameters>
      <Docs>
        <param name="forPosition">The location in a document.</param>
        <param name="direction">The direction of storage.</param>
        <summary>Determines the writing direction from a position within the text.</summary>
        <returns>The writing direction (i.e. left-to-right, or right-to-left)</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetCaretRectForPosition">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF GetCaretRectForPosition (MonoTouch.UIKit.UITextPosition position);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetCaretRectForPosition(class MonoTouch.UIKit.UITextPosition position) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect GetCaretRectForPosition (MonoTouch.UIKit.UITextPosition position);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect GetCaretRectForPosition(class MonoTouch.UIKit.UITextPosition position) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("caretRectForPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="position">A location in the document to draw a rectangle at.</param>
        <summary>This method will return a rectangle that can be used for drawing the insertion caret.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterOffsetOfPosition">
      <MemberSignature Language="C#" Value="public virtual int GetCharacterOffsetOfPosition (MonoTouch.UIKit.UITextPosition position, MonoTouch.UIKit.UITextRange range);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetCharacterOffsetOfPosition(class MonoTouch.UIKit.UITextPosition position, class MonoTouch.UIKit.UITextRange range) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual nint GetCharacterOffsetOfPosition (MonoTouch.UIKit.UITextPosition position, MonoTouch.UIKit.UITextRange range);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetCharacterOffsetOfPosition(class MonoTouch.UIKit.UITextPosition position, class MonoTouch.UIKit.UITextRange range) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("characterOffsetOfPosition:withinRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Int32</ReturnType>
        <ReturnType apistyle="new">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="position">A location in the text.</param>
        <param name="range">The range of text in a document.</param>
        <summary>Returns the number of characters in some text between <paramref name="position" /> and the start of the <paramref name="range" />.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange GetCharacterRange (MonoTouch.UIKit.UITextPosition byExtendingPosition, MonoTouch.UIKit.UITextLayoutDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetCharacterRange(class MonoTouch.UIKit.UITextPosition byExtendingPosition, valuetype MonoTouch.UIKit.UITextLayoutDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("characterRangeByExtendingPosition:inDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byExtendingPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="direction" Type="MonoTouch.UIKit.UITextLayoutDirection" />
      </Parameters>
      <Docs>
        <param name="byExtendingPosition">A location in some text.</param>
        <param name="direction">The direction of the layout.</param>
        <summary>Returns a range that represents the distance from <paramref name="byExtendingPosition" /> to as far as is possible in <paramref name="direction" />.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRangeAtPoint">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint (System.Drawing.PointF point);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint(valuetype System.Drawing.PointF point) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint (MonoTouch.CoreGraphics.CGPoint point);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetCharacterRangeAtPoint(valuetype MonoTouch.CoreGraphics.CGPoint point) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("characterRangeAtPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="old" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="point">A point within the control.</param>
        <summary>Returns the character or characters at the point specified.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClosestPositionToPoint">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (System.Drawing.PointF point);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype System.Drawing.PointF point) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (MonoTouch.CoreGraphics.CGPoint point);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype MonoTouch.CoreGraphics.CGPoint point) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("closestPositionToPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="old" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="point">A point within the control.</param>
        <summary>Returns the position that is closest to the point specified within the control.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClosestPositionToPoint">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (System.Drawing.PointF point, MonoTouch.UIKit.UITextRange withinRange);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype System.Drawing.PointF point, class MonoTouch.UIKit.UITextRange withinRange) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint (MonoTouch.CoreGraphics.CGPoint point, MonoTouch.UIKit.UITextRange withinRange);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetClosestPositionToPoint(valuetype MonoTouch.CoreGraphics.CGPoint point, class MonoTouch.UIKit.UITextRange withinRange) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("closestPositionToPoint:withinRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="old" />
        <Parameter Name="withinRange" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="point">A point within the control.</param>
        <param name="withinRange">The range of text within in the control.</param>
        <summary>Returns the position in <paramref name="withinRange" /> that is closest to <paramref name="withinRange" />.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstRectForRange">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF GetFirstRectForRange (MonoTouch.UIKit.UITextRange range);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetFirstRectForRange(class MonoTouch.UIKit.UITextRange range) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect GetFirstRectForRange (MonoTouch.UIKit.UITextRange range);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect GetFirstRectForRange(class MonoTouch.UIKit.UITextRange range) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("firstRectForRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">A range of text in the control.</param>
        <summary>Returns a rectangle that will enclose the first line of text in the <paramref name="range" /> (if the range specifies multiple lines of text).</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFrameForDictationResultPlaceholder">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF GetFrameForDictationResultPlaceholder (MonoTouch.Foundation.NSObject placeholder);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF GetFrameForDictationResultPlaceholder(class MonoTouch.Foundation.NSObject placeholder) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect GetFrameForDictationResultPlaceholder (MonoTouch.Foundation.NSObject placeholder);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect GetFrameForDictationResultPlaceholder(class MonoTouch.Foundation.NSObject placeholder) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("frameForDictationResultPlaceholder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="placeholder" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="placeholder">To be added.</param>
        <summary>When overridden, customizes the placement of the dictation placeholder.</summary>
        <returns>The rectangle in which the dictation placeholder animation will display.</returns>
        <remarks>
          <para>Application developers who override this method should return a rectangle that is located where they will insert the dictation results.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOffsetFromPosition">
      <MemberSignature Language="C#" Value="public virtual int GetOffsetFromPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextPosition toPosition);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetOffsetFromPosition(class MonoTouch.UIKit.UITextPosition fromPosition, class MonoTouch.UIKit.UITextPosition toPosition) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual nint GetOffsetFromPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextPosition toPosition);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetOffsetFromPosition(class MonoTouch.UIKit.UITextPosition fromPosition, class MonoTouch.UIKit.UITextPosition toPosition) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("offsetFromPosition:toPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Int32</ReturnType>
        <ReturnType apistyle="new">System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="toPosition" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="fromPosition">A location within the document.</param>
        <param name="toPosition">A second location within document.</param>
        <summary>Returns the number of characters between two visible locations in a document.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, int offset);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, int32 offset) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, nint offset);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, valuetype System.nint offset) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionFromPosition:offset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="offset" Type="System.Int32" apistyle="old" />
        <Parameter Name="offset" Type="System.nint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="fromPosition">A position within a document.</param>
        <param name="offset">A positive or negative character offset relative to <paramref name="fromPosition" />.</param>
        <summary>Returns a second position that is offset from the specified position.</summary>
        <returns>
        </returns>
        <remarks>May be <see langword="null" /> if the computed position is less than zero or greater than the length of the text in the document.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextRange withinRange, int atCharacterOffset);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextRange withinRange, int32 atCharacterOffset) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextRange withinRange, nint atCharacterOffset);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextRange withinRange, valuetype System.nint atCharacterOffset) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionWithinRange:atCharacterOffset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withinRange" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="atCharacterOffset" Type="System.Int32" apistyle="old" />
        <Parameter Name="atCharacterOffset" Type="System.nint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="withinRange">A range of text in a document.</param>
        <param name="atCharacterOffset">An offset relative to the start of the <paramref name="withinRange" />.</param>
        <summary>Returns a position within a document relative to the start of <paramref name="withinRange" />.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextLayoutDirection inDirection, int offset);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, valuetype MonoTouch.UIKit.UITextLayoutDirection inDirection, int32 offset) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPosition (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextLayoutDirection inDirection, nint offset);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPosition(class MonoTouch.UIKit.UITextPosition fromPosition, valuetype MonoTouch.UIKit.UITextLayoutDirection inDirection, valuetype System.nint offset) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionFromPosition:inDirection:offset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="inDirection" Type="MonoTouch.UIKit.UITextLayoutDirection" />
        <Parameter Name="offset" Type="System.Int32" apistyle="old" />
        <Parameter Name="offset" Type="System.nint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="fromPosition">The first position.</param>
        <param name="inDirection">The direction to calculate the offset from.</param>
        <param name="offset">The offset to use.</param>
        <summary>Returns a second position in a document the direction and <paramref name="offset" /> relative to the first position. </summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionWithinRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextPosition GetPositionWithinRange (MonoTouch.UIKit.UITextRange range, MonoTouch.UIKit.UITextLayoutDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextPosition GetPositionWithinRange(class MonoTouch.UIKit.UITextRange range, valuetype MonoTouch.UIKit.UITextLayoutDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionWithinRange:farthestInDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="direction" Type="MonoTouch.UIKit.UITextLayoutDirection" />
      </Parameters>
      <Docs>
        <param name="range">A range of text in the document.</param>
        <param name="direction">The direction of the layout.</param>
        <summary>Returns the furthest position possible in the visible text.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelectionRects">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextSelectionRect[] GetSelectionRects (MonoTouch.UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextSelectionRect[] GetSelectionRects(class MonoTouch.UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("selectionRectsForRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextSelectionRect[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">The <see cref="T:MonoTouch.UIKit.UITextRange" /> for which the selection rectangles are desired.</param>
        <summary>The selection rectangles for the <paramref name="range" />.</summary>
        <returns>An array (possibly empty) of the <see cref="T:MonoTouch.UIKit.UITextSelectionRect" />s in the <paramref name="range" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange GetTextRange (MonoTouch.UIKit.UITextPosition fromPosition, MonoTouch.UIKit.UITextPosition toPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UITextRange GetTextRange(class MonoTouch.UIKit.UITextPosition fromPosition, class MonoTouch.UIKit.UITextPosition toPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textRangeFromPosition:toPosition:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="toPosition" Type="MonoTouch.UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="fromPosition">The start position.</param>
        <param name="toPosition">The end position.</param>
        <summary>Returns the text range between two positions in a document.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextStyling">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary GetTextStyling (MonoTouch.UIKit.UITextPosition atPosition, MonoTouch.UIKit.UITextStorageDirection inDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSDictionary GetTextStyling(class MonoTouch.UIKit.UITextPosition atPosition, valuetype MonoTouch.UIKit.UITextStorageDirection inDirection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textStylingAtPosition:inDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="atPosition" Type="MonoTouch.UIKit.UITextPosition" />
        <Parameter Name="inDirection" Type="MonoTouch.UIKit.UITextStorageDirection" />
      </Parameters>
      <Docs>
        <param name="atPosition">A position within a document.</param>
        <param name="inDirection">The direction of the styling.</param>
        <summary>Returns a <see cref="T:MonoTouch.Foundation.NSDictionary" /> of styling properties at the position and in the direction specified.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasText">
      <MemberSignature Language="C#" Value="public virtual bool HasText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("hasText")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A value representing if there is text in the view.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputAccessoryView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView InputAccessoryView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIView InputAccessoryView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(3, 2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inputAccessoryView", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(3, 2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setInputAccessoryView:", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(3, 2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A custom view to display when this control becomes the first responder.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputDelegate">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextInputDelegate InputDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextInputDelegate InputDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextInputDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A delegate object that can respond to text and selection changes.</summary>
        <value>The default value is a system-provided <see cref="T:MonoTouch.UIKit.UITextInputDelegate" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView InputView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIView InputView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(3, 2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inputView", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(3, 2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setInputView:", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(3, 2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A custom view to be used when the controll becomes the first responder.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>The default value is <see langword="null" /> and is the standard system keyboard.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertDictationResult">
      <MemberSignature Language="C#" Value="public virtual void InsertDictationResult (MonoTouch.Foundation.NSArray dictationResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertDictationResult(class MonoTouch.Foundation.NSArray dictationResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertDictationResult:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 1)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dictationResult" Type="MonoTouch.Foundation.NSArray" />
      </Parameters>
      <Docs>
        <param name="dictationResult">An array of <see cref="T:MonoTouch.UIKit.UIDictationPhrase" /> objects.</param>
        <summary>Used to select a <see cref="T:MonoTouch.UIKit.UIDictationPhrase" /> from a collection of possible phrases.</summary>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertDictationResultPlaceholder">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject InsertDictationResultPlaceholder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject InsertDictationResultPlaceholder() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertDictationResultPlaceholder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The dictation-results placeholder that will be used during dictation processing.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The result of this method is passed to <see cref="M:MonoTouch.UIKit.UITextView.GetFrameForDictationResultPlaceholder" />.</para>
          <para>Application developers who override this method must also override <see cref="M:MonoTouch.UIKit.UITextView.RemoveDictationResultPlaceholder" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertText">
      <MemberSignature Language="C#" Value="public virtual void InsertText (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertText(string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertText:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">The text to insert.</param>
        <summary>This method will insert text into the view at the position indicated by the cursor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardAppearance">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIKeyboardAppearance KeyboardAppearance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIKeyboardAppearance KeyboardAppearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("keyboardAppearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setKeyboardAppearance:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIKeyboardAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The style of the keyboard that is used with the view.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIKeyboardType KeyboardType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIKeyboardType KeyboardType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("keyboardType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setKeyboardType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIKeyboardType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type of keyboard to use with the view.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutManager">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSLayoutManager LayoutManager { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.NSLayoutManager LayoutManager" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("layoutManager", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSLayoutManager</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An <see cref="T:MonoTouch.UIKit.NSLayoutManager" /> to control the layout of the text.</summary>
        <value>By default, <see cref="P:MonoTouch.UIKit.NSLayoutManager.AllowsNonContiguousLayout" /> is <see langword="true" />.</value>
        <remarks>
          <para>The default <see cref="T:MonoTouch.UIKit.NSLayoutManager" /> for a <see cref="T:MonoTouch.UIKit.UITextView" /> allows non-contiguous layout, which can be confusing, as the default value for <see cref="P:MonoTouch.UIKit.NSLayoutManager.AllowsNonContiguousLayout" /> is <see langword="false" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkedTextRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange MarkedTextRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextRange MarkedTextRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("markedTextRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The range of marked text in the document. Read-only.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkedTextStyle">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary MarkedTextStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary MarkedTextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("markedTextStyle", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMarkedTextStyle:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A <see cref="T:MonoTouch.Foundation.NSDictionary" /> of attributes describing style of the <see cref="P:MonoTouch.UIKit.UITextField.MarkedTextRange" />.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveDictationResultPlaceholder">
      <MemberSignature Language="C#" Value="public virtual void RemoveDictationResultPlaceholder (MonoTouch.Foundation.NSObject placeholder, bool willInsertResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveDictationResultPlaceholder(class MonoTouch.Foundation.NSObject placeholder, bool willInsertResult) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeDictationResultPlaceholder:willInsertResult:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="placeholder" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="willInsertResult" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="placeholder">The placeholder that is no longer needed.</param>
        <param name="willInsertResult">The value of this will be <see langword="true" /> if the dictation was interpreted.</param>
        <summary>Informs the <see cref="T:MonoTouch.UIKit.UITextView" /> that the placeholder is no longer needed.</summary>
        <remarks>
          <para>Application developers who override this method must also override <see cref="M:MonoTouch.UIKit.UITextView.RemoveDictationResultPlaceholder" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceText">
      <MemberSignature Language="C#" Value="public virtual void ReplaceText (MonoTouch.UIKit.UITextRange range, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceText(class MonoTouch.UIKit.UITextRange range, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("replaceRange:withText:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="range">The range to replace text.</param>
        <param name="text">The replacement text.</param>
        <summary>Replaces text in the specified range with the text provided.</summary>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnKeyType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIReturnKeyType ReturnKeyType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIReturnKeyType ReturnKeyType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("returnKeyType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setReturnKeyType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIReturnKeyType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The property is used to get or set the <see cref="T:MonoTouch.UIKit.UIReturnKeyType" /> of the "return" key. The "return" key will display different text depending on this property.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAnimationEnded">
      <MemberSignature Language="C#" Value="public event EventHandler ScrollAnimationEnded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ScrollAnimationEnded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrolled">
      <MemberSignature Language="C#" Value="public event EventHandler Scrolled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Scrolled" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrolledToTop">
      <MemberSignature Language="C#" Value="public event EventHandler ScrolledToTop;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ScrolledToTop" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollRangeToVisible">
      <MemberSignature Language="C#" Value="public virtual void ScrollRangeToVisible (MonoTouch.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollRangeToVisible(valuetype MonoTouch.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("scrollRangeToVisible:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="range">The range of text to display.</param>
        <summary>Scrolls the text view until the <paramref name="range" /> is visible.</summary>
        <remarks>To be added.
        </remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.ClearsOnInsertion" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Selectable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.SelectedRange" />
      </Docs>
    </Member>
    <Member MemberName="SecureTextEntry">
      <MemberSignature Language="C#" Value="public virtual bool SecureTextEntry { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SecureTextEntry" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isSecureTextEntry")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSecureTextEntry:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property controls if the text being displayed should be hidden.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Selectable">
      <MemberSignature Language="C#" Value="public virtual bool Selectable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selectable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isSelectable")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSelectable:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the application user can select content and interact with links and text attachments.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.ClearsOnInsertion" />
        <altmember cref="M:MonoTouch.UIKit.UITextView.ScrollRangeToVisible" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.SelectedRange" />
      </Docs>
    </Member>
    <Member MemberName="SelectedRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSRange SelectedRange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.Foundation.NSRange SelectedRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("selectedRange")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSelectedRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property returns the range of text that is selected.</summary>
        <value>
        </value>
        <remarks>
          <para>This property can have three possible values:
            <list type="bullet"><item><term><see langword="null" /></term><description>There is no current selection</description></item><item><term>A zero length <see cref="T:MonoTouch.UIKit.UITextRange" /></term><description>This indicates the insertion point</description></item><item><term>A <see cref="T:MonoTouch.UIKit.UITextRange" /> of length &gt; 0</term><description>This indicates the currently selected text.</description></item></list></para>
        </remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.ClearsOnInsertion" />
        <altmember cref="M:MonoTouch.UIKit.UITextView.ScrollRangeToVisible" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Selectable" />
      </Docs>
    </Member>
    <Member MemberName="SelectedTextRange">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextRange SelectedTextRange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextRange SelectedTextRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("selectedTextRange", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSelectedTextRange:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property returns the range of text that is selected.</summary>
        <value>
        </value>
        <remarks>
          <para>This property can have three possible values:
            <list type="bullet"><item><term><see langword="null" /></term><description>There is no current selection</description></item><item><term>A zero length <see cref="T:MonoTouch.UIKit.UITextRange" /></term><description>This indicates the insertion point</description></item><item><term>A <see cref="T:MonoTouch.UIKit.UITextRange" /> of length &gt; 0</term><description>This indicates the currently selected text.</description></item></list></para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler SelectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SelectionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBaseWritingDirectionforRange">
      <MemberSignature Language="C#" Value="public virtual void SetBaseWritingDirectionforRange (MonoTouch.UIKit.UITextWritingDirection writingDirection, MonoTouch.UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBaseWritingDirectionforRange(valuetype MonoTouch.UIKit.UITextWritingDirection writingDirection, class MonoTouch.UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setBaseWritingDirection:forRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writingDirection" Type="MonoTouch.UIKit.UITextWritingDirection" />
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="writingDirection">To be added.</param>
        <param name="range">To be added.</param>
        <summary>Specifies the base writing direction.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMarkedText">
      <MemberSignature Language="C#" Value="public virtual void SetMarkedText (string markedText, MonoTouch.Foundation.NSRange selectedRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMarkedText(string markedText, valuetype MonoTouch.Foundation.NSRange selectedRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setMarkedText:selectedRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="markedText" Type="System.String" />
        <Parameter Name="selectedRange" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="markedText">The text to insert.</param>
        <param name="selectedRange">The selected text within the <paramref name="markedText" />. </param>
        <summary>This method will replace any existing marked text the specified text and then selects it.</summary>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeginEditing">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextViewCondition ShouldBeginEditing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextViewCondition ShouldBeginEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextViewCondition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>The delegate value, usually an anonymous method, a method or a lambda function.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldChangeText">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextViewChange ShouldChangeText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextViewChange ShouldChangeText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextViewChange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>The delegate value, usually an anonymous method, a method or a lambda function.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldChangeTextInRange">
      <MemberSignature Language="C#" Value="public virtual bool ShouldChangeTextInRange (MonoTouch.UIKit.UITextRange inRange, string replacementText);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldChangeTextInRange(class MonoTouch.UIKit.UITextRange inRange, string replacementText) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("shouldChangeTextInRange:replacementText:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inRange" Type="MonoTouch.UIKit.UITextRange" />
        <Parameter Name="replacementText" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inRange">To be added.</param>
        <param name="replacementText">To be added.</param>
        <summary>Called prior to an edit. Can be overridden to selectively filter edits.</summary>
        <returns>The default value is <see langword="true" />.</returns>
        <remarks>
          <para>This method is called prior to a replacement being made in the text. Application developers can override this method and, if they return <see langword="false" />, the replacement will not be made.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldEndEditing">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextViewCondition ShouldEndEditing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextViewCondition ShouldEndEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextViewCondition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>The delegate value, usually an anonymous method, a method or a lambda function.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInteractWithTextAttachment">
      <MemberSignature Language="C#" Value="public Func&lt;MonoTouch.UIKit.UITextView,MonoTouch.UIKit.NSTextAttachment,MonoTouch.Foundation.NSRange,bool&gt; ShouldInteractWithTextAttachment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`4&lt;class MonoTouch.UIKit.UITextView, class MonoTouch.UIKit.NSTextAttachment, valuetype MonoTouch.Foundation.NSRange, bool&gt; ShouldInteractWithTextAttachment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;MonoTouch.UIKit.UITextView,MonoTouch.UIKit.NSTextAttachment,MonoTouch.Foundation.NSRange,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInteractWithUrl">
      <MemberSignature Language="C#" Value="public Func&lt;MonoTouch.UIKit.UITextView,MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSRange,bool&gt; ShouldInteractWithUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Func`4&lt;class MonoTouch.UIKit.UITextView, class MonoTouch.Foundation.NSUrl, valuetype MonoTouch.Foundation.NSRange, bool&gt; ShouldInteractWithUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Func&lt;MonoTouch.UIKit.UITextView,MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSRange,System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldScrollToTop">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIScrollViewCondition ShouldScrollToTop { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIScrollViewCondition ShouldScrollToTop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIScrollViewCondition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellCheckingType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextSpellCheckingType SpellCheckingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextSpellCheckingType SpellCheckingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("spellCheckingType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSpellCheckingType:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextSpellCheckingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property controls if spell checking will be enabled or disabled during input.</summary>
        <value>
        </value>
        <remarks>
          <para>If the application user has turned spell-checking off with Settings-&gt;General-&gt;Keyboard-&gt;Check Spelling, this property will be ignored.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Started">
      <MemberSignature Language="C#" Value="public event EventHandler Started;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Started" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when editing has started on this UITextView.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("text", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setText:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property will set the text to display, or retrieve the text that is being displayed.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.
        </remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.AllowsEditingTextAttributes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.AttributedText" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.DataDetectorTypes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Editable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Font" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextAlignment" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextContainerInsert" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextColor" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TypingAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignment">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UITextAlignment TextAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UITextAlignment TextAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textAlignment")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTextAlignment:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>How the <see cref="P:MonoTouch.UIKit.UITextField.Text" /> should be aligned.</summary>
        <value>
        </value>
        <remarks>
          <para>Assignment to this property will affect all the text in the <see cref="T:MonoTouch.UIKit.UITextView" />. If multiple text-styles are desired, the application developer must use the <see cref="P:MonoTouch.UIKit.UITextView.AttributedText" /> property.</para>
          <para>The value of this property applies both the the <see cref="P:MonoTouch.UIKit.UITextField.Text" /> and <see cref="P:MonoTouch.UIKit.UITextField.Placeholder" />.</para>
        </remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.AllowsEditingTextAttributes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.AttributedText" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.DataDetectorTypes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Editable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Font" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Text" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextContainerInsert" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextColor" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TypingAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TextBackgroundColorKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextBackgroundColorKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextBackgroundColorKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextInputTextBackgroundColorKey", "UIKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0, Message="Use NSAttributedString.BackgroundColorAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0, Message="Use NSAttributedString.BackgroundColorAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The constant that should be used as the key value when retrieving the text background color from a <see cref="T:MonoTouch.Foundation.NSDictionary" />.</summary>
        <value>The constant is the <see cref="T:MonoTouch.Foundation.NSString" /> "UITextInputTextBackgroundColorKey"	.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextColor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIColor TextColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIColor TextColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textColor", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTextColor:", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The color to use for all the text in the <see cref="T:MonoTouch.UIKit.UITextView" />.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Assignment to this property will affect all the text in the <see cref="T:MonoTouch.UIKit.UITextView" />. If multiple text-styles are desired, the application developer must use the <see cref="P:MonoTouch.UIKit.UITextView.AttributedText" /> property.</para>
        </remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.AllowsEditingTextAttributes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.AttributedText" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.DataDetectorTypes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Editable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Font" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Text" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextAlignment" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextContainerInsert" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TypingAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TextColorKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextColorKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextColorKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextInputTextColorKey", "UIKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0, Message="Use NSAttributedString.ForegroundColorAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0, Message="Use NSAttributedString.ForegroundColorAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The constant that should be used as the key value when retrieving the text color from a <see cref="T:MonoTouch.Foundation.NSDictionary" />.</summary>
        <value>The constant is the <see cref="T:MonoTouch.Foundation.NSString" /> "UITextInputTextColorKey"	.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContainer">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSTextContainer TextContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.NSTextContainer TextContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textContainer", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Defines the area in which text should be displayed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContainerInset">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIEdgeInsets TextContainerInset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIEdgeInsets TextContainerInset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textContainerInset", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTextContainerInset:", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Defines the <see cref="P:MonoTouch.UIKit.UITextView.TextContainer" />'s layout area as insets from the <see cref="T:MonoTouch.UITextView" />'s content area.</summary>
        <value>The default value is {8, 0, 8, 0} (8 logical pixels inset at top and bottom, no inset on edges).</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.AllowsEditingTextAttributes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.AttributedText" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.DataDetectorTypes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Editable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Font" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Text" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextAlignment" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextColor" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TypingAttributes" />
      </Docs>
    </Member>
    <Member MemberName="TextDidBeginEditingNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextDidBeginEditingNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextDidBeginEditingNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextViewTextDidBeginEditingNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for TextDidBeginEditing</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:MonoTouch.Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:UITextView+Notifications" />.<see cref="M:UITextView+Notifications.ObserveTextDidBeginEditingNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = UITextView.Notifications.ObserveTextDidBeginEditing ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextView.Notifications.ObserveTextDidBeginEditing (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="c#">
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UITextView.TextDidBeginEditingNotification, (notification) =&gt; {Console.WriteLine ("Received the notification UITextView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextView.TextDidBeginEditingNotification, Callback);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextDidChangeNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextViewTextDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for TextDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:MonoTouch.Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:UITextView+Notifications" />.<see cref="M:UITextView+Notifications.ObserveTextDidChangeNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = UITextView.Notifications.ObserveTextDidChange ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextView.Notifications.ObserveTextDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="c#">
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UITextView.TextDidChangeNotification, (notification) =&gt; {Console.WriteLine ("Received the notification UITextView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextView.TextDidChangeNotification, Callback);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextDidEndEditingNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextDidEndEditingNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextDidEndEditingNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextViewTextDidEndEditingNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for TextDidEndEditing</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:MonoTouch.Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:UITextView+Notifications" />.<see cref="M:UITextView+Notifications.ObserveTextDidEndEditingNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="c#">
//
// Lambda style
//

// listening
notification = UITextView.Notifications.ObserveTextDidEndEditing ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextView.Notifications.ObserveTextDidEndEditing (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}</code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="c#">
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UITextView.TextDidEndEditingNotification, (notification) =&gt; {Console.WriteLine ("Received the notification UITextView", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UITextView", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UITextView.TextDidEndEditingNotification, Callback);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextFontKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString TextFontKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString TextFontKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("UITextInputTextFontKey", "UIKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0, Message="Use NSAttributedString.FontAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_8_0, Message="Use NSAttributedString.FontAttributeName starting with iOS 8.0")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The property holds the key that should be used to retrieve the value of the font for the text from a <see cref="T:MonoTouch.Foundation.NSDictionary" />.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInputView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView TextInputView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIView TextInputView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textInputView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This the view that provides the coordinate system. Read-only.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInRange">
      <MemberSignature Language="C#" Value="public virtual string TextInRange (MonoTouch.UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TextInRange(class MonoTouch.UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("textInRange:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">A range of text.</param>
        <summary>A substring of text in the <paramref name="range" />.</summary>
        <returns>
        </returns>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStorage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.NSTextStorage TextStorage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.NSTextStorage TextStorage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("textStorage", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.NSTextStorage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Holds the attribute text being displayed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tokenizer">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UITextInputTokenizer Tokenizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UITextInputTokenizer Tokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UITextInputTokenizer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property provides information on the tokenizer that would be used to break up the text into units such as characters, words, lines, and paragraphs.</summary>
        <value>
        </value>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypingAttributes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary TypingAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary TypingAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("typingAttributes", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setTypingAttributes:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The attributes to be applied to newly-typed text.</summary>
        <value>The default value is <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MonoTouch.UIKit.UITextView.AllowsEditingTextAttributes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.AttributedText" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.DataDetectorTypes" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Editable" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Font" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.Text" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextAlignment" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextContainerInsert" />
        <altmember cref="P:MonoTouch.UIKit.UITextView.TextColor" />
      </Docs>
    </Member>
    <Member MemberName="UnmarkText">
      <MemberSignature Language="C#" Value="public virtual void UnmarkText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnmarkText() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unmarkText")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Any currently marked text is unmarked.</summary>
        <remarks>To be added.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewForZoomingInScrollView">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIScrollViewGetZoomView ViewForZoomingInScrollView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIScrollViewGetZoomView ViewForZoomingInScrollView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIScrollViewGetZoomView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("delegate", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDelegate:", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>
          <para>The instance that will respond to events and data requests.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakInputDelegate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakInputDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakInputDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inputDelegate", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setInputDelegate:", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for inserted text.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakLinkTextAttributes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary WeakLinkTextAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary WeakLinkTextAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("linkTextAttributes", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setLinkTextAttributes:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakTokenizer">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakTokenizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakTokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("tokenizer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillEndDragging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.UIKit.WillEndDraggingEventArgs&gt; WillEndDragging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.UIKit.WillEndDraggingEventArgs&gt; WillEndDragging" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.UIKit.WillEndDraggingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomingEnded">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.UIKit.ZoomingEndedEventArgs&gt; ZoomingEnded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.UIKit.ZoomingEndedEventArgs&gt; ZoomingEnded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.UIKit.ZoomingEndedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomingStarted">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.UIKit.UIScrollViewZoomingEventArgs&gt; ZoomingStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.UIKit.UIScrollViewZoomingEventArgs&gt; ZoomingStarted" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.UIKit.UIScrollViewZoomingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
