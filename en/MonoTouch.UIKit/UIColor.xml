<Type Name="UIColor" FullName="MonoTouch.UIKit.UIColor">
  <TypeSignature Language="C#" Value="public class UIColor : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSCopying, MonoTouch.Foundation.INSSecureCoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIColor extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSCoding, class MonoTouch.Foundation.INSCopying, class MonoTouch.Foundation.INSSecureCoding, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UIColor", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Colors and Patterns as used in MonoTouch.UIKit.</summary>
    <remarks>
      <para> 
	Basic representation for colors in UIKit.  UIColors can
	be created from various color representations as well as
	encoding an alpha transparency channel.  In addition to solid
	or transparent colors, it is possible to create a UIColor
	instance from an image, and use the resulting UIColor as a
	brush whenever a UIKit UIColor is used.</para>
      <para>

	  In addition to providing various constructors and some
	  common colors, the following colors represent system colors:
	  <see cref="P:MonoTouch.UIKit.UIColor.LightTextColor" />, <see cref="P:MonoTouch.UIKit.UIColor.DarkTextColor" />, <see cref="P:MonoTouch.UIKit.UIColor.GroupTableViewBackgroundColor" />,
	  <see cref="P:MonoTouch.UIKit.UIColor.ViewFlipsideBackgroundColor" />,
	  <see cref="P:MonoTouch.UIKit.UIColor.ScrollViewTexturedBackgroundColor" />
	  and <see cref="P:MonoTouch.UIKit.UIColor.UnderPageBackgroundColor" />.
	</para>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=2c1eba2d-8abc-408e-8ee8-a03ffac6ffde">avTouch</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=064a9ab4-1e58-4cf6-a1c2-aab04997aa57">Example_Drawing</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=23a2571b-45eb-4889-bb67-d88937cb68c1">monocatalog</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=e980347f-d1db-4de0-9d6a-b9dc714dc58a">QuartzSample</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=a96da854-7c59-4e25-9fb5-78be262620dd">RecipesAndPrinting</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=501b07a2-835a-4ff4-9320-8239735b524f">WeatherMap</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIColor_Class/index.html">Apple documentation for <c>UIColor</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIColor (MonoTouch.CoreGraphics.CGColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreGraphics.CGColor color) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCGColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="color" Type="MonoTouch.CoreGraphics.CGColor" />
      </Parameters>
      <Docs>
        <param name="color">To be added.</param>
        <summary>Creates a new <see cref="T:Monotouch.UIKit.UIColor" /> from the specified <see cref="T:Monotouch.CoreGraphics.CGColor" />.</summary>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIColor (MonoTouch.CoreImage.CIColor ciColor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreImage.CIColor ciColor) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCIColor:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="ciColor" Type="MonoTouch.CoreImage.CIColor" />
      </Parameters>
      <Docs>
        <param name="ciColor">To be added.</param>
        <summary>Creates a new <see cref="T:Monotouch.UIKit.UIColor" /> from the specified <see cref="T:Monotouch.CoreImage.CIColor" />.</summary>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIColor (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIColor (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UIColor (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIColor (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UIColor (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIColor (float red, float green, float blue, float alpha);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 red, float32 green, float32 blue, float32 alpha) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public UIColor (nfloat red, nfloat green, nfloat blue, nfloat alpha);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.nfloat red, valuetype System.nfloat green, valuetype System.nfloat blue, valuetype System.nfloat alpha) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithRed:green:blue:alpha:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="red" Type="System.Single" apistyle="classic" />
        <Parameter Name="green" Type="System.Single" apistyle="classic" />
        <Parameter Name="blue" Type="System.Single" apistyle="classic" />
        <Parameter Name="alpha" Type="System.Single" apistyle="classic" />
        <Parameter Name="red" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="green" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="blue" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="alpha" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="red">Red component, 0.0 to 1.0f.</param>
        <param name="green">Green component 0.0 to 1.0f.</param>
        <param name="blue">Blue component value 0.0 to 1.0f.</param>
        <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
        <summary>UIColor constructor from red, green, blue and alpha components.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Black">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Black { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Black" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("blackColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with grayscale 0.0 and alpha 1.0.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blue">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Blue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Blue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("blueColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with RGBA of (0,0,1,1).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Brown">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Brown { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Brown" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("brownColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with RGBA of (0.6, 0.4, 0.2, 1.0).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CGColor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGColor CGColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreGraphics.CGColor CGColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("CGColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the CoreGraphics CGColor for this UIColor.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CIColor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIColor CIColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreImage.CIColor CIColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("CIColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a CIColor representation of the color.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>
          <para>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Clear { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Clear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("clearColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with grayscale 0 and alpha 0.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ColorWithAlpha">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIColor ColorWithAlpha (float alpha);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIColor ColorWithAlpha(float32 alpha) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIColor ColorWithAlpha (nfloat alpha);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIColor ColorWithAlpha(valuetype System.nfloat alpha) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("colorWithAlphaComponent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alpha" Type="System.Single" apistyle="classic" />
        <Parameter Name="alpha" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
        <summary>Creates a new color with the specified alpha channel from a reference color.</summary>
        <returns>A copy of the color, but with a new alpha component value.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Copy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject Copy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>
          <para>Implementation of the INSCopyable interface.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cyan">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Cyan { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Cyan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("cyanColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with RGBA of (0, 1, 1, 1).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DarkGray">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor DarkGray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor DarkGray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("darkGrayColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with grayscale 1/3 and alpha 1.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DarkTextColor">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor DarkTextColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor DarkTextColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("darkTextColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The system color for displaying text on a light background.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIColor object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIColor class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the UIColor ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:MonoTouch.Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:MonoTouch.Foundation.NSKeyedArchived" /> and then invoke the <see cref="M:MonoTouch.Foundation.NSKeyedArchived.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If you want to allow your object to be archived, you should override this method and store your state in using the provided <paramref name="encoder" /> parameter.   In addition, you should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="c#">public void override EncodeTo (NSCoder coder){
    c.Encode (1, key: "version");
    c.Encode (userName, key: "userName");
    c.Encode (hostName, key: "hostName");</code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCGColor">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromCGColor (MonoTouch.CoreGraphics.CGColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromCGColor(class MonoTouch.CoreGraphics.CGColor color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("colorWithCGColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="MonoTouch.CoreGraphics.CGColor" />
      </Parameters>
      <Docs>
        <param name="color">The CoreGraphics CGColor.</param>
        <summary>Creates a UIColor based on the Core Graphics Quartz color reference.</summary>
        <returns>Newly constructed UIColor.</returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromCIColor">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromCIColor (MonoTouch.CoreImage.CIColor color);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromCIColor(class MonoTouch.CoreImage.CIColor color) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("colorWithCIColor:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="MonoTouch.CoreImage.CIColor" />
      </Parameters>
      <Docs>
        <param name="color">CoreImage CIColor.</param>
        <summary>Creates a UIColor from a CoreImage CIColor.</summary>
        <returns>The new UIColor.</returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHSB">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromHSB (float hue, float saturation, float brightness);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromHSB(float32 hue, float32 saturation, float32 brightness) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromHSB (nfloat hue, nfloat saturation, nfloat brightness);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromHSB(valuetype System.nfloat hue, valuetype System.nfloat saturation, valuetype System.nfloat brightness) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hue" Type="System.Single" apistyle="classic" />
        <Parameter Name="saturation" Type="System.Single" apistyle="classic" />
        <Parameter Name="brightness" Type="System.Single" apistyle="classic" />
        <Parameter Name="hue" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="saturation" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="brightness" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="hue">Hue component value from 0.0 to 1.0f.</param>
        <param name="saturation">Saturation component value from 0.0 to 1.0f</param>
        <param name="brightness">Brightness component value from 0.0 to 1.0f.</param>
        <summary>Creates a color from using the hue, saturation and brightness components.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHSBA">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromHSBA (float hue, float saturation, float brightness, float alpha);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromHSBA(float32 hue, float32 saturation, float32 brightness, float32 alpha) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromHSBA (nfloat hue, nfloat saturation, nfloat brightness, nfloat alpha);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromHSBA(valuetype System.nfloat hue, valuetype System.nfloat saturation, valuetype System.nfloat brightness, valuetype System.nfloat alpha) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("colorWithHue:saturation:brightness:alpha:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hue" Type="System.Single" apistyle="classic" />
        <Parameter Name="saturation" Type="System.Single" apistyle="classic" />
        <Parameter Name="brightness" Type="System.Single" apistyle="classic" />
        <Parameter Name="alpha" Type="System.Single" apistyle="classic" />
        <Parameter Name="hue" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="saturation" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="brightness" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="alpha" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="hue">Hue component value from 0.0 to 1.0f.</param>
        <param name="saturation">Saturation component value from 0.0 to 1.0f</param>
        <param name="brightness">Brightness component value from 0.0 to 1.0f.</param>
        <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
        <summary>Creates a color from using the hue, saturation, brightness and alpha components.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPatternImage">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromPatternImage (MonoTouch.UIKit.UIImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromPatternImage(class MonoTouch.UIKit.UIImage image) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("colorWithPatternImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
      </Parameters>
      <Docs>
        <param name="image">Image to use as a pattern</param>
        <summary>Creates a UIColor based on an image, the color can then be used as a brush to paint with the image.</summary>
        <returns>
        </returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRGB">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromRGB (byte red, byte green, byte blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromRGB(unsigned int8 red, unsigned int8 green, unsigned int8 blue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.Byte" />
        <Parameter Name="green" Type="System.Byte" />
        <Parameter Name="blue" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="red">Red component, 0 to 255.</param>
        <param name="green">Green component 0 to 255.</param>
        <param name="blue">Blue component value 0 to 255.</param>
        <summary>Creates a solid color using the red, green and blue components specified.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRGB">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromRGB (int red, int green, int blue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromRGB(int32 red, int32 green, int32 blue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.Int32" />
        <Parameter Name="green" Type="System.Int32" />
        <Parameter Name="blue" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="red">To be added.</param>
        <param name="green">To be added.</param>
        <param name="blue">To be added.</param>
        <summary>Creates a color from the specified combinated of red, green, and blue components.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRGB">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromRGB (float red, float green, float blue);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromRGB(float32 red, float32 green, float32 blue) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromRGB (nfloat red, nfloat green, nfloat blue);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromRGB(valuetype System.nfloat red, valuetype System.nfloat green, valuetype System.nfloat blue) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.Single" apistyle="classic" />
        <Parameter Name="green" Type="System.Single" apistyle="classic" />
        <Parameter Name="blue" Type="System.Single" apistyle="classic" />
        <Parameter Name="red" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="green" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="blue" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="red">Red component, 0.0 to 1.0f.</param>
        <param name="green">Green component 0.0 to 1.0f.</param>
        <param name="blue">Blue component value 0.0 to 1.0f.</param>
        <summary>Creates a solid color using the red, green and blue components specified.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRGBA">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromRGBA (byte red, byte green, byte blue, byte alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromRGBA(unsigned int8 red, unsigned int8 green, unsigned int8 blue, unsigned int8 alpha) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.Byte" />
        <Parameter Name="green" Type="System.Byte" />
        <Parameter Name="blue" Type="System.Byte" />
        <Parameter Name="alpha" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="red">Red component, 0 to 255.</param>
        <param name="green">Green component 0 to 255.</param>
        <param name="blue">Blue component value 0 to 255.</param>
        <param name="alpha">Alpha (transparency) value 0 to 255.</param>
        <summary>Creates a color with the specified alpha transparency using the red, green and blue components specified.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRGBA">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromRGBA (int red, int green, int blue, int alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromRGBA(int32 red, int32 green, int32 blue, int32 alpha) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.Int32" />
        <Parameter Name="green" Type="System.Int32" />
        <Parameter Name="blue" Type="System.Int32" />
        <Parameter Name="alpha" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="red">To be added.</param>
        <param name="green">To be added.</param>
        <param name="blue">To be added.</param>
        <param name="alpha">To be added.</param>
        <summary>Creates a color from the specified combination of red, green, and blue elements, with the specified transparency.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRGBA">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromRGBA (float red, float green, float blue, float alpha);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromRGBA(float32 red, float32 green, float32 blue, float32 alpha) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromRGBA (nfloat red, nfloat green, nfloat blue, nfloat alpha);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromRGBA(valuetype System.nfloat red, valuetype System.nfloat green, valuetype System.nfloat blue, valuetype System.nfloat alpha) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("colorWithRed:green:blue:alpha:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.Single" apistyle="classic" />
        <Parameter Name="green" Type="System.Single" apistyle="classic" />
        <Parameter Name="blue" Type="System.Single" apistyle="classic" />
        <Parameter Name="alpha" Type="System.Single" apistyle="classic" />
        <Parameter Name="red" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="green" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="blue" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="alpha" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="red">Red component, 0.0 to 1.0f.</param>
        <param name="green">Green component 0.0 to 1.0f.</param>
        <param name="blue">Blue component value 0.0 to 1.0f.</param>
        <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
        <summary>Creates a color with the specified alpha transparency using the red, green and blue components specified.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromWhiteAlpha">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromWhiteAlpha (float white, float alpha);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromWhiteAlpha(float32 white, float32 alpha) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor FromWhiteAlpha (nfloat white, nfloat alpha);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIColor FromWhiteAlpha(valuetype System.nfloat white, valuetype System.nfloat alpha) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("colorWithWhite:alpha:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="white" Type="System.Single" apistyle="classic" />
        <Parameter Name="alpha" Type="System.Single" apistyle="classic" />
        <Parameter Name="white" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="alpha" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="white">The grayscale value of the color from 0.0 to 1.0f.</param>
        <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
        <summary>Creates a grayscale color, based on the current colorspace.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHSBA">
      <MemberSignature Language="C#" Value="public void GetHSBA (out float hue, out float saturation, out float brightness, out float alpha);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetHSBA(float32 hue, float32 saturation, float32 brightness, float32 alpha) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public void GetHSBA (out nfloat hue, out nfloat saturation, out nfloat brightness, out nfloat alpha);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetHSBA(valuetype System.nfloat hue, valuetype System.nfloat saturation, valuetype System.nfloat brightness, valuetype System.nfloat alpha) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hue" Type="System.Single&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="saturation" Type="System.Single&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="brightness" Type="System.Single&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="alpha" Type="System.Single&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="hue" Type="System.nfloat&amp;" RefType="out" apistyle="unified" />
        <Parameter Name="saturation" Type="System.nfloat&amp;" RefType="out" apistyle="unified" />
        <Parameter Name="brightness" Type="System.nfloat&amp;" RefType="out" apistyle="unified" />
        <Parameter Name="alpha" Type="System.nfloat&amp;" RefType="out" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="hue">Hue component value from 0.0 to 1.0f.</param>
        <param name="saturation">Saturation component value from 0.0 to 1.0f</param>
        <param name="brightness">Brightness component value from 0.0 to 1.0f.</param>
        <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
        <summary>Returns the hue, saturation, brightness and alpha components of the color.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRGBA">
      <MemberSignature Language="C#" Value="public void GetRGBA (out float red, out float green, out float blue, out float alpha);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetRGBA(float32 red, float32 green, float32 blue, float32 alpha) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public void GetRGBA (out nfloat red, out nfloat green, out nfloat blue, out nfloat alpha);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void GetRGBA(valuetype System.nfloat red, valuetype System.nfloat green, valuetype System.nfloat blue, valuetype System.nfloat alpha) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.Single&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="green" Type="System.Single&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="blue" Type="System.Single&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="alpha" Type="System.Single&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="red" Type="System.nfloat&amp;" RefType="out" apistyle="unified" />
        <Parameter Name="green" Type="System.nfloat&amp;" RefType="out" apistyle="unified" />
        <Parameter Name="blue" Type="System.nfloat&amp;" RefType="out" apistyle="unified" />
        <Parameter Name="alpha" Type="System.nfloat&amp;" RefType="out" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="red">Red component, 0.0 to 1.0f.</param>
        <param name="green">Green component 0.0 to 1.0f.</param>
        <param name="blue">Blue component value 0.0 to 1.0f.</param>
        <param name="alpha">Alpha (transparency) value from 0.0 to 1.0f.</param>
        <summary>Returns the red, green, blue and alpha components of this color.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetWhite">
      <MemberSignature Language="C#" Value="public virtual bool GetWhite (out float white, out float alpha);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetWhite(float32 white, float32 alpha) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual bool GetWhite (out nfloat white, out nfloat alpha);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetWhite(valuetype System.nfloat white, valuetype System.nfloat alpha) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("getWhite:alpha:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="white" Type="System.Single&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="alpha" Type="System.Single&amp;" RefType="out" apistyle="classic" />
        <Parameter Name="white" Type="System.nfloat&amp;" RefType="out" apistyle="unified" />
        <Parameter Name="alpha" Type="System.nfloat&amp;" RefType="out" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="white">To be added.</param>
        <param name="alpha">To be added.</param>
        <summary>The grayscale components of the color.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Gray">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Gray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Gray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("grayColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color object with grayscale 0.5 and alpha 1.0.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Green">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Green { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Green" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("greenColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with RGBA of (0,1,0,1).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupTableViewBackgroundColor">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor GroupTableViewBackgroundColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor GroupTableViewBackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("groupTableViewBackgroundColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The operating system color used for the background in groupped UITableViews.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LightGray">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor LightGray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor LightGray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("lightGrayColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with grayscale 2/3 and alpha 1.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LightTextColor">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor LightTextColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor LightTextColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("lightTextColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The operating system color used for displaying text on a dark background.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Magenta">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Magenta { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Magenta" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("magentaColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with RGBA of (1,0,1,1).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Orange">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Orange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Orange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("orangeColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with RGBA of (1.0, 0.5, 0.0, 1.0).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Purple">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Purple { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Purple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("purpleColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with RGBA of (0.5, 0.0, 0.5, 1.0).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Red">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Red { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Red" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("redColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with RGBA of (1,0,0,1).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollViewTexturedBackgroundColor">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor ScrollViewTexturedBackgroundColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor ScrollViewTexturedBackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_3_2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_7_0, Introduced=MonoTouch.ObjCRuntime.Platform.iOS_3_2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("scrollViewTexturedBackgroundColor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_3_2)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_7_0, Introduced=MonoTouch.ObjCRuntime.Platform.iOS_3_2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property, that renders the area behind scrollable content.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetColor">
      <MemberSignature Language="C#" Value="public virtual void SetColor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetColor() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("set")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets both the fill and stroke color for drawing.</summary>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFill">
      <MemberSignature Language="C#" Value="public virtual void SetFill ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFill() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFill")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the fill color for drawing.</summary>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStroke">
      <MemberSignature Language="C#" Value="public virtual void SetStroke ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStroke() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setStroke")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets the stroke color for drawing.</summary>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of the value of the current instance.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderPageBackgroundColor">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor UnderPageBackgroundColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor UnderPageBackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_7_0, Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("underPageBackgroundColor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_7_0, Introduced=MonoTouch.ObjCRuntime.Platform.iOS_5_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated method, indicating the color used to render the background of a page.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewFlipsideBackgroundColor">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor ViewFlipsideBackgroundColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor ViewFlipsideBackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_7_0, Introduced=MonoTouch.ObjCRuntime.Platform.iOS_2_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("viewFlipsideBackgroundColor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Deprecated=MonoTouch.ObjCRuntime.Platform.iOS_7_0, Introduced=MonoTouch.ObjCRuntime.Platform.iOS_2_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property, that specifies the back of pages during a flip transition.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="White">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor White { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor White" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("whiteColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with grayscale 1 and alpha 1.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Yellow">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIColor Yellow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIColor Yellow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("yellowColor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A color with RGBA of (1, 1, 0, 1). </summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
