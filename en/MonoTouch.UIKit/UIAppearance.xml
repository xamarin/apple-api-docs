<Type Name="UIAppearance" FullName="MonoTouch.UIKit.UIAppearance">
  <TypeSignature Language="C#" Value="public class UIAppearance : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.UIKit.IUIAppearance" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIAppearance extends MonoTouch.Foundation.NSObject implements class MonoTouch.ObjCRuntime.INativeObject, class MonoTouch.UIKit.IUIAppearance, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.UIKit.IUIAppearance</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UIAppearance", false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Proxy class for styling the appearance of <see cref="N:MonoTouch.UIKit" /> views.</summary>
    <remarks>
      <para>

	The <see cref="T:MonoTouch.UIKit.UIAppearance" /> class is a proxy that is created on demand to
        style views of a particular class.  The <c>UIAppearance</c> framework
	is supported either as a way of styling all instances of a
	particular class or by styling all instances of a particular
	class that are contained in specific hierarchy.
      </para>
      <para> 
	You can get the global proxy for a particular element by
	accessing the static <see cref="P:MonoTouch.UIKit.UIView.Appearance" /> property of that class.
      </para>
      <para>
	
	To obtain the <see cref="T:MonoTouch.UIKit.UIAppearance" /> proxy for a particular class, you
	should invoke the <see cref="M:MonoTouch.UIKit.UIView.AppearanceWhenContainedIn" /> method.  This
	method takes a variable list of <see cref="T:System.Type" />
	objects and it represents the set of containers that must be
	present for the style to be applied.  You can use this as the
	pattern used to apply the style to your elements.

      </para>
      <para>


	The following classes expose both the <see cref="P:MonoTouch.UIKit.UIView.Appearance" /> property and
	the <see cref="M:MonoTouch.UIKit.UIView.AppearanceWhenContainedIn" /> method:

      </para>
      <para tool="list-of-classes">
        <see cref="T:MonoTouch.AddressBookUI.ABPeoplePickerNavigationController" />, <see cref="T:MonoTouch.iAd.ADBannerView" />, <see cref="T:MonoTouch.CoreAudioKit.CAInterAppAudioSwitcherView" />, <see cref="T:MonoTouch.CoreAudioKit.CAInterAppAudioTransportView" />, <see cref="T:MonoTouch.EventKitUI.EKEventEditViewController" />, <see cref="T:MonoTouch.GameKit.GKAchievementViewController" />, <see cref="T:MonoTouch.GameKit.GKFriendRequestComposeViewController" />, <see cref="T:MonoTouch.GameKit.GKLeaderboardViewController" />, <see cref="T:MonoTouch.GameKit.GKTurnBasedMatchmakerViewController" />, <see cref="T:MonoTouch.GLKit.GLKView" />, <see cref="T:MonoTouch.MessageUI.MFMailComposeViewController" />, <see cref="T:MonoTouch.MessageUI.MFMessageComposeViewController" />, <see cref="T:MonoTouch.MapKit.MKAnnotationView" />, <see cref="T:MonoTouch.MapKit.MKCircleView" />, <see cref="T:MonoTouch.MapKit.MKMapView" />, <see cref="T:MonoTouch.MapKit.MKOverlayPathView" />, <see cref="T:MonoTouch.MapKit.MKOverlayView" />, <see cref="T:MonoTouch.MapKit.MKPinAnnotationView" />, <see cref="T:MonoTouch.MapKit.MKPolygonView" />, <see cref="T:MonoTouch.MapKit.MKPolylineView" />, <see cref="T:MonoTouch.MapKit.MKUserTrackingBarButtonItem" />, <see cref="T:MonoTouch.MediaPlayer.MPVolumeView" />, <see cref="T:MonoTouch.MetalKit.MTKView" />, <see cref="T:MonoTouch.PassKit.PKAddPassButton" />, <see cref="T:MonoTouch.PassKit.PKPaymentButton" />, <see cref="T:MonoTouch.SceneKit.SCNView" />, <see cref="T:MonoTouch.SpriteKit.SKView" />, <see cref="T:MonoTouch.UIKit.UIActionSheet" />, <see cref="T:MonoTouch.UIKit.UIActivityIndicatorView" />, <see cref="T:MonoTouch.UIKit.UIAlertView" />, <see cref="T:MonoTouch.UIKit.UIBarButtonItem" />, <see cref="T:MonoTouch.UIKit.UIBarItem" />, <see cref="T:MonoTouch.UIKit.UIButton" />, <see cref="T:MonoTouch.UIKit.UICollectionReusableView" />, <see cref="T:MonoTouch.UIKit.UICollectionView" />, <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />, <see cref="T:MonoTouch.UIKit.UIControl" />, <see cref="T:MonoTouch.UIKit.UIDatePicker" />, <see cref="T:MonoTouch.UIKit.UIImageView" />, <see cref="T:MonoTouch.UIKit.UIInputView" />, <see cref="T:MonoTouch.UIKit.UILabel" />, <see cref="T:MonoTouch.UIKit.UINavigationBar" />, <see cref="T:MonoTouch.UIKit.UIPageControl" />, <see cref="T:MonoTouch.UIKit.UIPickerView" />, <see cref="T:MonoTouch.UIKit.UIPopoverBackgroundView" />, <see cref="T:MonoTouch.UIKit.UIProgressView" />, <see cref="T:MonoTouch.UIKit.UIRefreshControl" />, <see cref="T:MonoTouch.UIKit.UIScrollView" />, <see cref="T:MonoTouch.UIKit.UISearchBar" />, <see cref="T:MonoTouch.UIKit.UISegmentedControl" />, <see cref="T:MonoTouch.UIKit.UISlider" />, <see cref="T:MonoTouch.UIKit.UIStackView" />, <see cref="T:MonoTouch.UIKit.UIStepper" />, <see cref="T:MonoTouch.UIKit.UISwitch" />, <see cref="T:MonoTouch.UIKit.UITabBar" />, <see cref="T:MonoTouch.UIKit.UITabBarItem" />, <see cref="T:MonoTouch.UIKit.UITableView" />, <see cref="T:MonoTouch.UIKit.UITableViewCell" />, <see cref="T:MonoTouch.UIKit.UITableViewHeaderFooterView" />, <see cref="T:MonoTouch.UIKit.UITextField" />, <see cref="T:MonoTouch.UIKit.UITextView" />, <see cref="T:MonoTouch.UIKit.UIToolbar" />, <see cref="T:MonoTouch.UIKit.UIView" />, <see cref="T:MonoTouch.UIKit.UIVisualEffectView" />, <see cref="T:MonoTouch.UIKit.UIWebView" />, <see cref="T:MonoTouch.UIKit.UIWindow" /> and <see cref="T:MonoTouch.WebKit.WKWebView" />.</para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAppearance_Protocol/index.html">Apple documentation for <c>UIAppearance</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public UIAppearance (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIAppearance (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UIAppearance (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIAppearance (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected UIAppearance (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>Whether this is equivalent to <paramref name="other" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static IntPtr GetAppearance (IntPtr class_ptr, MonoTouch.UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetAppearance(native int class_ptr, class MonoTouch.UIKit.UITraitCollection traits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="class_ptr" Type="System.IntPtr" />
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="class_ptr">To be added.</param>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static IntPtr GetAppearance (IntPtr class_ptr, Type[] whenFoundIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetAppearance(native int class_ptr, class System.Type[] whenFoundIn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="class_ptr" Type="System.IntPtr" />
        <Parameter Name="whenFoundIn" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="class_ptr">To be added.</param>
        <param name="whenFoundIn">To be added.</param>
        <summary>This object's appearance proxy in the specified containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static IntPtr GetAppearance (IntPtr class_ptr, MonoTouch.UIKit.UITraitCollection traits, Type[] whenFoundIn);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetAppearance(native int class_ptr, class MonoTouch.UIKit.UITraitCollection traits, class System.Type[] whenFoundIn) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="class_ptr" Type="System.IntPtr" />
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
        <Parameter Name="whenFoundIn" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="class_ptr">To be added.</param>
        <param name="traits">To be added.</param>
        <param name="whenFoundIn">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" /> when found in the <paramref name="whenFoundIn" /> containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a hash code for the current instance.</summary>
        <returns>A int containing the hash code for this instance.</returns>
        <remarks>The algorithm used to generate the hash code is unspecified.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (MonoTouch.UIKit.UIAppearance a, MonoTouch.UIKit.UIAppearance b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class MonoTouch.UIKit.UIAppearance a, class MonoTouch.UIKit.UIAppearance b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MonoTouch.UIKit.UIAppearance" />
        <Parameter Name="b" Type="MonoTouch.UIKit.UIAppearance" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>Overload of the equality operator.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (MonoTouch.UIKit.UIAppearance a, MonoTouch.UIKit.UIAppearance b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class MonoTouch.UIKit.UIAppearance a, class MonoTouch.UIKit.UIAppearance b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MonoTouch.UIKit.UIAppearance" />
        <Parameter Name="b" Type="MonoTouch.UIKit.UIAppearance" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>Overload of the inequality operatory.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectorAppearance" apistyle="classic">
      <MemberSignature Language="C#" Value="public static readonly IntPtr SelectorAppearance;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly native int SelectorAppearance" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the proxy for the appearance.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
