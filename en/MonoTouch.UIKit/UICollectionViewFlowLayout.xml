<Type Name="UICollectionViewFlowLayout" FullName="MonoTouch.UIKit.UICollectionViewFlowLayout">
  <TypeSignature Language="C#" Value="public class UICollectionViewFlowLayout : MonoTouch.UIKit.UICollectionViewLayout" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UICollectionViewFlowLayout extends MonoTouch.UIKit.UICollectionViewLayout" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.UIKit.UICollectionViewLayout</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("UICollectionViewFlowLayout", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A flow-based layout for use with <see cref="T:MonoTouch.UIKit.UICollectionView" />s.</summary>
    <remarks>
      <para>
        <see cref="T:MonoTouch.UIKit.UICollectionView" />s allow content to be displayed using arbitrary layouts. The <see cref="T:MonoTouch.UIKit.UICollectionViewFlowLayout" /> provides an easy-to-use flow-based layout.      
      </para>
      <para>The <see cref="T:MonoTouch.UIKit.UICollectionViewFlowLayout" /> lays out <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />s side-by-side, either horizontally or vertically. Component <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />s wrap at the boundaries. Cells are spaced in the direction of layout according to the <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.MinimumInteritemSpacing" /> property and rows (whether horizontal or vertical) are separated based on the <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.MinimumLineSpacing" /> property.</para>
      <para>The application developer can use various methods of <see cref="T:MonoTouch.UIKit.UICollectionViewDelegateFlowLayout" /> to modify the exact spacing and size of cells within a <see cref="T:MonoTouch.UIKit.UICollectionViewFlowLayout" />.</para>
      <para>The direction of the flow layout is at right angles to the direction of the <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.ScrollDirection" /> property. In the following image, the flow layout is left-to-right and the <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.ScrollDirection" /> is <see cref="M:MonoTouch.UIKit.UICollectionViewScrollDirection.Vertical" />.</para>
      <para>
        <img href="MonoTouch.UIKit.UICollectionViewFlowLayout.ScrollDirection.png" />
      </para>
    </remarks>
    <altmember cref="T:MonoTouch.UIKit.UICollectionViewFlowLayout" />
    <related type="article" href="http://docs.xamarin.com/ios/Guides/User_Interface/Introduction_to_Collection_Views">Introduction to Collection Views</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewFlowLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewFlowLayout (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewFlowLayout (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewFlowLayout (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EstimatedItemSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF EstimatedItemSize { get; set; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF EstimatedItemSize" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGSize EstimatedItemSize { get; set; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGSize EstimatedItemSize" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("estimatedItemSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setEstimatedItemSize:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterReferenceSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF FooterReferenceSize { get; set; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF FooterReferenceSize" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGSize FooterReferenceSize { get; set; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGSize FooterReferenceSize" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("footerReferenceSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setFooterReferenceSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the <see cref="T:System.Drawing.SizeF" /> of the footer of a <see cref="T:MonoTouch.UIKit.UICollectionViewFlowLayout" /> section.</summary>
        <value>The default value is {0,0}.</value>
        <remarks>
          <para>The header and footer elements of a <see cref="T:MonoTouch.UIKit.UICollectionViewFlowLayout" /> separate sections. They are horizontally laid out if if the <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.ScrollDirection" /> is <see cref="M:MonoTouch.UIKit.UICollectionViewScrollDirection.Vertical" />, and vertically laid out if the <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.ScrollDirection" /> is <see cref="M:MonoTouch.UIKit.UICollectionViewScrollDirection.Horizontal" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderReferenceSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF HeaderReferenceSize { get; set; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF HeaderReferenceSize" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGSize HeaderReferenceSize { get; set; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGSize HeaderReferenceSize" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("headerReferenceSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setHeaderReferenceSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default SizeF for section headers.|The defaultSizeF for section headers.</summary>
        <value>The default value is {0,0}.</value>
        <remarks>
          <para>The header and footer elements of a <see cref="T:MonoTouch.UIKit.UICollectionViewFlowLayout" /> separate sections. They are horizontally laid out if if the <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.ScrollDirection" /> is <see cref="M:MonoTouch.UIKit.UICollectionViewScrollDirection.Vertical" />, and vertically laid out if the <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.ScrollDirection" /> is <see cref="M:MonoTouch.UIKit.UICollectionViewScrollDirection.Horizontal" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemSize">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.SizeF ItemSize { get; set; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.SizeF ItemSize" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGSize ItemSize { get; set; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGSize ItemSize" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("itemSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setItemSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default size of the <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />s being displayed.</summary>
        <value>The default value is {50,50}.</value>
        <remarks>Can be customized with the <see cref="M:MonoTouch.UIKit.UICollectionViewDelegateFlowLayout.GetSizeForItem" /> method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumInteritemSpacing">
      <MemberSignature Language="C#" Value="public virtual float MinimumInteritemSpacing { get; set; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MinimumInteritemSpacing" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual nfloat MinimumInteritemSpacing { get; set; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat MinimumInteritemSpacing" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("minimumInteritemSpacing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMinimumInteritemSpacing:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Single</ReturnType>
        <ReturnType apistyle="new">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The minimum spacing between cells in the direction of the flow (i.e., between sides if horizontal, between bottom and top if vertical).</summary>
        <value>The default value is 10.</value>
        <remarks>Can be customized with the <see cref="M:MonoTouch.UIKit.UICollectionViewDelegateFlowLayout.GetMinimumInteritemSpacingForSection" /> method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumLineSpacing">
      <MemberSignature Language="C#" Value="public virtual float MinimumLineSpacing { get; set; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MinimumLineSpacing" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual nfloat MinimumLineSpacing { get; set; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat MinimumLineSpacing" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("minimumLineSpacing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMinimumLineSpacing:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Single</ReturnType>
        <ReturnType apistyle="new">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The minimum spacing between new lines of cells, in the direction of the <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.ScrollDirection" /> property (i.e., the opposite of the flow direction).</summary>
        <value>The default value is 10.</value>
        <remarks>Can be customized with the <see cref="M:MonoTouch.UIKit.UICollectionViewDelegateFlowLayout.GetMinimumLineSpacingForSection" /> method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollDirection">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UICollectionViewScrollDirection ScrollDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UICollectionViewScrollDirection ScrollDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("scrollDirection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setScrollDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UICollectionViewScrollDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The scrolling direction, which is at right angles to the flow direction.</summary>
        <value>The default value is <see cref="M:MonoTouch.UIKit.UICollectionViewScrollDirection.Vertical" />.</value>
        <remarks>
          <para>By default, cells are laid out with a left-to-right flow direction and wrap top-to-bottom. If the number of cells exceeds screen real estate, the <see cref="T:MonoTouch.UIKit.UICollectionView" /> will scroll vertically.</para>
          <para>If the application developer sets <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.ScrollDirection" /> to <see cref="M:MonoTouch.UIKit.UICollectionViewScrollDirection.Horizontal" />, cells will be laid out top-to-bottom and wrap left-to-right.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SectionInset">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIEdgeInsets SectionInset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIEdgeInsets SectionInset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("sectionInset")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSectionInset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Insets between sections.</summary>
        <value>The default value is {{0,0},{0,0}}.</value>
        <remarks>Where <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.MinimumInteritemSpacing" /> and <see cref="M:MonoTouch.UIKit.UICollectionViewFlowLayout.MinimumLineSpacing" /> specify the distances between individual <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />s, the <see cref="P:MonoTouch.UIKit.UICollectionViewFlowLayout.SectionInset" /> property specifies spacing between the headers and footers of a section and their component <see cref="T:MonoTouch.UIKit.UICollectionViewCell" />s.
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
