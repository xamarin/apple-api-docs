<Type Name="HKUnit" FullName="MonoTouch.HealthKit.HKUnit">
  <TypeSignature Language="C#" Value="public class HKUnit : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSCopying, MonoTouch.Foundation.INSSecureCoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HKUnit extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSCoding, class MonoTouch.Foundation.INSCopying, class MonoTouch.Foundation.INSSecureCoding, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("HKUnit", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definitions and utility methods for manipulating measurements of mass, length, volume, and energy.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKUnit_Class/index.html">Apple documentation for <c>HKUnit</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HKUnit (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HKUnit (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected HKUnit (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HKUnit (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected HKUnit (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Atmosphere">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Atmosphere { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Atmosphere" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("atmosphereUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a pressure unit of 1 Atmosphere, equal to 101.325 kPa.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Calorie">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Calorie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Calorie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("calorieUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an energy unit of 1 Calorie, equal to 4.184 joules.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CentimeterOfWater">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CentimeterOfWater { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit CentimeterOfWater" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("centimeterOfWaterUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a pressure unit of 1 centimeter of water.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Copy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject Copy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("countUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit to measure discrete scalar values.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateJouleUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CreateJouleUnit (MonoTouch.HealthKit.HKMetricPrefix prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit CreateJouleUnit(valuetype MonoTouch.HealthKit.HKMetricPrefix prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("jouleUnitWithMetricPrefix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="MonoTouch.HealthKit.HKMetricPrefix" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <summary>Creates a unit for measuring energy in joules.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLiterUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CreateLiterUnit (MonoTouch.HealthKit.HKMetricPrefix prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit CreateLiterUnit(valuetype MonoTouch.HealthKit.HKMetricPrefix prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("literUnitWithMetricPrefix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="MonoTouch.HealthKit.HKMetricPrefix" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <summary>Creates a unit for measuring volume in liters.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMeterUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CreateMeterUnit (MonoTouch.HealthKit.HKMetricPrefix prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit CreateMeterUnit(valuetype MonoTouch.HealthKit.HKMetricPrefix prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("meterUnitWithMetricPrefix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="MonoTouch.HealthKit.HKMetricPrefix" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <summary>Creates a unit for measuring length in meters.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMoleUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CreateMoleUnit (double gramsPerMole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit CreateMoleUnit(float64 gramsPerMole) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("moleUnitWithMolarMass:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="gramsPerMole" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="gramsPerMole">To be added.</param>
        <summary>Creates a unit for measuring quantities in moles.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMoleUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CreateMoleUnit (MonoTouch.HealthKit.HKMetricPrefix prefix, double gramsPerMole);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit CreateMoleUnit(valuetype MonoTouch.HealthKit.HKMetricPrefix prefix, float64 gramsPerMole) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("moleUnitWithMetricPrefix:molarMass:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="MonoTouch.HealthKit.HKMetricPrefix" />
        <Parameter Name="gramsPerMole" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <param name="gramsPerMole">To be added.</param>
        <summary>Creates a unit for measuring quantities in moles, multiplied by the specified prefix.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePascalUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CreatePascalUnit (MonoTouch.HealthKit.HKMetricPrefix prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit CreatePascalUnit(valuetype MonoTouch.HealthKit.HKMetricPrefix prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pascalUnitWithMetricPrefix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="MonoTouch.HealthKit.HKMetricPrefix" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <summary>Creates a unit for measuring pressure in Pascals.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecondUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CreateSecondUnit (MonoTouch.HealthKit.HKMetricPrefix prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit CreateSecondUnit(valuetype MonoTouch.HealthKit.HKMetricPrefix prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("secondUnitWithMetricPrefix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="MonoTouch.HealthKit.HKMetricPrefix" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <summary>Creates a unit for measuring time in seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSiemenUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CreateSiemenUnit (MonoTouch.HealthKit.HKMetricPrefix prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit CreateSiemenUnit(valuetype MonoTouch.HealthKit.HKMetricPrefix prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("siemenUnitWithMetricPrefix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="MonoTouch.HealthKit.HKMetricPrefix" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <summary>Creates a unit for measuring conductance in Siemens, multiplied the specified <paramref name="prefix" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CupImperialUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CupImperialUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit CupImperialUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("cupImperialUnit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CupUSUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit CupUSUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit CupUSUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("cupUSUnit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Day">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Day { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Day" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("dayUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Creates a unit for measuring time in 24-hour days.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DegreeCelsius">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit DegreeCelsius { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit DegreeCelsius" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("degreeCelsiusUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Creates a unit for measuring temperature in degrees Celsius.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DegreeFahrenheit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit DegreeFahrenheit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit DegreeFahrenheit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("degreeFahrenheitUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Creates a unit for measuring temperature in degrees Fahrenheit.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:MonoTouch.Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:MonoTouch.Foundation.NSKeyedArchived" /> and then invoke the <see cref="M:MonoTouch.Foundation.NSKeyedArchived.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If you want to allow your object to be archived, you should override this method and store your state in using the provided <paramref name="encoder" /> parameter.   In addition, you should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="c#">public void override EncodeTo (NSCoder coder){
    c.Encode (1, key: "version");
    c.Encode (userName, key: "userName");
    c.Encode (hostName, key: "hostName");</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FluidOunceImperialUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit FluidOunceImperialUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit FluidOunceImperialUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("fluidOunceImperialUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit for measuring volume in imperial fluid ounces. An imperial fluid ounce is approximately 0.961 US fluid oz.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FluidOunceUSUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit FluidOunceUSUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit FluidOunceUSUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("fluidOunceUSUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit for measuring volume in US fluid ounces.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Foot">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Foot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Foot" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("footUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit for measuring distance in feet.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromEnergyFormatterUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit FromEnergyFormatterUnit (MonoTouch.Foundation.NSEnergyFormatterUnit energyFormatterUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit FromEnergyFormatterUnit(valuetype MonoTouch.Foundation.NSEnergyFormatterUnit energyFormatterUnit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unitFromEnergyFormatterUnit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="energyFormatterUnit" Type="MonoTouch.Foundation.NSEnergyFormatterUnit" />
      </Parameters>
      <Docs>
        <param name="energyFormatterUnit">To be added.</param>
        <summary>Creates an energy unit from an energy formatter.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGramUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit FromGramUnit (MonoTouch.HealthKit.HKMetricPrefix prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit FromGramUnit(valuetype MonoTouch.HealthKit.HKMetricPrefix prefix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("gramUnitWithMetricPrefix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="MonoTouch.HealthKit.HKMetricPrefix" />
      </Parameters>
      <Docs>
        <param name="prefix">To be added.</param>
        <summary>Creates a unit for measuring mass in grams, multiplied by <paramref name="prefix" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromLengthFormatterUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit FromLengthFormatterUnit (MonoTouch.Foundation.NSLengthFormatterUnit lengthFormatterUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit FromLengthFormatterUnit(valuetype MonoTouch.Foundation.NSLengthFormatterUnit lengthFormatterUnit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unitFromLengthFormatterUnit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lengthFormatterUnit" Type="MonoTouch.Foundation.NSLengthFormatterUnit" />
      </Parameters>
      <Docs>
        <param name="lengthFormatterUnit">To be added.</param>
        <summary>Creates a length unit from a length formatter.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMassFormatterUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit FromMassFormatterUnit (MonoTouch.Foundation.NSMassFormatterUnit massFormatterUnit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit FromMassFormatterUnit(valuetype MonoTouch.Foundation.NSMassFormatterUnit massFormatterUnit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unitFromMassFormatterUnit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="massFormatterUnit" Type="MonoTouch.Foundation.NSMassFormatterUnit" />
      </Parameters>
      <Docs>
        <param name="massFormatterUnit">To be added.</param>
        <summary>Creates a mass unit from a mass formatter.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromString">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit FromString (string aString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.HealthKit.HKUnit FromString(string aString) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unitFromString:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aString">To be added.</param>
        <summary>Creates a unit by parsing <paramref name="aString" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKUnit_Class/index.html#//apple_ref/occ/clm/HKUnit/unitFromString:">Apple documentation for <c>unitFromString:</c></related>
      </Docs>
    </Member>
    <Member MemberName="GetEnergyFormatterUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSEnergyFormatterUnit GetEnergyFormatterUnit (MonoTouch.HealthKit.HKUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.Foundation.NSEnergyFormatterUnit GetEnergyFormatterUnit(class MonoTouch.HealthKit.HKUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("energyFormatterUnitFromUnit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSEnergyFormatterUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="MonoTouch.HealthKit.HKUnit" />
      </Parameters>
      <Docs>
        <param name="unit">To be added.</param>
        <summary>Creates an energy formatter for displaying <paramref name="unit" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLengthFormatterUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSLengthFormatterUnit GetLengthFormatterUnit (MonoTouch.HealthKit.HKUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.Foundation.NSLengthFormatterUnit GetLengthFormatterUnit(class MonoTouch.HealthKit.HKUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("lengthFormatterUnitFromUnit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSLengthFormatterUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="MonoTouch.HealthKit.HKUnit" />
      </Parameters>
      <Docs>
        <param name="unit">To be added.</param>
        <summary>Creates a length formatter for displaying <paramref name="unit" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMassFormatterUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSMassFormatterUnit GetMassFormatterUnit (MonoTouch.HealthKit.HKUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.Foundation.NSMassFormatterUnit GetMassFormatterUnit(class MonoTouch.HealthKit.HKUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("massFormatterUnitFromUnit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSMassFormatterUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="MonoTouch.HealthKit.HKUnit" />
      </Parameters>
      <Docs>
        <param name="unit">To be added.</param>
        <summary>Creates a mass formatter for displaying <paramref name="unit" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Gram">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Gram { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Gram" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("gramUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit for measuring mass in grams.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hour">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Hour { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Hour" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("hourUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit for measuring time in hours.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Inch">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Inch { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Inch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inchUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit for measuring length in inches.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNull">
      <MemberSignature Language="C#" Value="public virtual bool IsNull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isNull")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that indicates whether all the dimensions in a unit cancel each other out. <see langword="true" /> if they cancel, otherwise <see langword="false" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Joule">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Joule { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Joule" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("jouleUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures energy in joules.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kelvin">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Kelvin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Kelvin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("kelvinUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures temperature in degrees Kelvin.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Kilocalorie">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Kilocalorie { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Kilocalorie" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("kilocalorieUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures energy in kilocalories. Kilocalories are called "calories" in dietary usage.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Liter">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Liter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Liter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("literUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures volume in liters.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Meter">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Meter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Meter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("meterUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures length in meters.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Mile">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Mile { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Mile" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("mileUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures length in miles.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MillimeterOfMercury">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit MillimeterOfMercury { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit MillimeterOfMercury" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("millimeterOfMercuryUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures pressure in millimeters of mercury.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Minute">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Minute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Minute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("minuteUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures time in minutes.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MolarMassBloodGlucose">
      <MemberSignature Language="C#" Value="public const double MolarMassBloodGlucose = 180.155880000054;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal float64 MolarMassBloodGlucose = (180.155880000054)" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <MemberValue>180.155880000054</MemberValue>
      <Docs>
        <summary>The molecular mass of blood glucose. Read-only.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Ounce">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Ounce { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Ounce" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("ounceUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures volume in US fluid ounces.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pascal">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Pascal { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Pascal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("pascalUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures pressure in Pascals.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Percent">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Percent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Percent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("percentUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures proportion in percentage.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PintImperialUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit PintImperialUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit PintImperialUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("pintImperialUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures volume in imperial pints.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PintUSUnit">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit PintUSUnit { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit PintUSUnit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("pintUSUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures volume in US pints.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pound">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Pound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Pound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("poundUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures mass by the force that it exerts in pounds.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReciprocalUnit">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.HealthKit.HKUnit ReciprocalUnit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.HealthKit.HKUnit ReciprocalUnit() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("reciprocalUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a unit that is the reciprocal of the current unit.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Second">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Second { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Second" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("secondUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures time in seconds.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Siemen">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Siemen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Siemen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("siemenUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures conductance in Siemens.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stone">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Stone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Stone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("stoneUnit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a unit that measures mass in stones.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnitDividedBy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.HealthKit.HKUnit UnitDividedBy (MonoTouch.HealthKit.HKUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.HealthKit.HKUnit UnitDividedBy(class MonoTouch.HealthKit.HKUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unitDividedByUnit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="MonoTouch.HealthKit.HKUnit" />
      </Parameters>
      <Docs>
        <param name="unit">To be added.</param>
        <summary>Returns a unit that is the result of dividing <see langword="this" /> unit by <paramref name="unit" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnitMultipliedBy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.HealthKit.HKUnit UnitMultipliedBy (MonoTouch.HealthKit.HKUnit unit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.HealthKit.HKUnit UnitMultipliedBy(class MonoTouch.HealthKit.HKUnit unit) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unitMultipliedByUnit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="unit" Type="MonoTouch.HealthKit.HKUnit" />
      </Parameters>
      <Docs>
        <param name="unit">To be added.</param>
        <summary>Returns a unit that is the result of multiplying <see langword="this" /> unit by <paramref name="unit" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnitRaisedToPower">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.HealthKit.HKUnit UnitRaisedToPower (int power);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.HealthKit.HKUnit UnitRaisedToPower(int32 power) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.HealthKit.HKUnit UnitRaisedToPower (nint power);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.HealthKit.HKUnit UnitRaisedToPower(valuetype System.nint power) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("unitRaisedToPower:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="power" Type="System.Int32" apistyle="classic" />
        <Parameter Name="power" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="power">To be added.</param>
        <summary>Returns a unit that is the result of raising <see langword="this" /> unit by <paramref name="power" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnitString">
      <MemberSignature Language="C#" Value="public virtual string UnitString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UnitString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("unitString")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a string representation of <see langword="this" /> unit.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Yard">
      <MemberSignature Language="C#" Value="public static MonoTouch.HealthKit.HKUnit Yard { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.HealthKit.HKUnit Yard" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("yardUnit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKUnit</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
