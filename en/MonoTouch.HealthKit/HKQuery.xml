<Type Name="HKQuery" FullName="MonoTouch.HealthKit.HKQuery">
  <TypeSignature Language="C#" Value="public class HKQuery : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HKQuery extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("HKQuery", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for querying Health Kit databases.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/HealthKit/Reference/HKQuery_Class/index.html">Apple documentation for <c>HKQuery</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public HKQuery (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HKQuery (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected HKQuery (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HKQuery (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected HKQuery (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the HKQuery object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the HKQuery class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the HKQuery ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForCategorySamples">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForCategorySamples (MonoTouch.Foundation.NSPredicateOperatorType operatorType, int value);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForCategorySamples(valuetype MonoTouch.Foundation.NSPredicateOperatorType operatorType, int32 value) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForCategorySamples (MonoTouch.Foundation.NSPredicateOperatorType operatorType, nint value);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForCategorySamples(valuetype MonoTouch.Foundation.NSPredicateOperatorType operatorType, valuetype System.nint value) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForCategorySamplesWithOperatorType:value:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="MonoTouch.Foundation.NSPredicateOperatorType" />
        <Parameter Name="value" Type="System.Int32" apistyle="classic" />
        <Parameter Name="value" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="value">To be added.</param>
        <summary> Creates and returns a predicate that can be used to check the value of a category sample.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForDuration">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForDuration (MonoTouch.Foundation.NSPredicateOperatorType operatorType, double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForDuration(valuetype MonoTouch.Foundation.NSPredicateOperatorType operatorType, float64 duration) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForWorkoutsWithOperatorType:duration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="MonoTouch.Foundation.NSPredicateOperatorType" />
        <Parameter Name="duration" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="duration">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get workouts by duration.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForMetadataKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForMetadataKey (MonoTouch.Foundation.NSString metadataKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForMetadataKey(class MonoTouch.Foundation.NSString metadataKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsWithMetadataKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataKey" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="metadataKey">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects by metadata key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForMetadataKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForMetadataKey (MonoTouch.Foundation.NSString metadataKey, MonoTouch.Foundation.NSObject[] allowedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForMetadataKey(class MonoTouch.Foundation.NSString metadataKey, class MonoTouch.Foundation.NSObject[] allowedValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsWithMetadataKey:allowedValues:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataKey" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="allowedValues" Type="MonoTouch.Foundation.NSObject[]" />
      </Parameters>
      <Docs>
        <param name="metadataKey">To be added.</param>
        <param name="allowedValues">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects by metadata key and value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForMetadataKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForMetadataKey (MonoTouch.Foundation.NSString metadataKey, MonoTouch.Foundation.NSPredicateOperatorType operatorType, MonoTouch.Foundation.NSObject value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForMetadataKey(class MonoTouch.Foundation.NSString metadataKey, valuetype MonoTouch.Foundation.NSPredicateOperatorType operatorType, class MonoTouch.Foundation.NSObject value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsWithMetadataKey:operatorType:value:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="metadataKey" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="operatorType" Type="MonoTouch.Foundation.NSPredicateOperatorType" />
        <Parameter Name="value" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="metadataKey">To be added.</param>
        <param name="operatorType">To be added.</param>
        <param name="value">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects by metadata key and value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObject">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObject (MonoTouch.Foundation.NSUuid objectUuid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObject(class MonoTouch.Foundation.NSUuid objectUuid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectWithUUID:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectUuid" Type="MonoTouch.Foundation.NSUuid" />
      </Parameters>
      <Docs>
        <param name="objectUuid">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects by UUID.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjects">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObjects (MonoTouch.Foundation.NSSet objectUuids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObjects(class MonoTouch.Foundation.NSSet objectUuids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsWithUUIDs:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectUuids" Type="MonoTouch.Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="objectUuids">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get multiple objects by UUID.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromDevices">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromDevices (MonoTouch.Foundation.NSSet devices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromDevices(class MonoTouch.Foundation.NSSet devices) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsFromDevices:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="devices" Type="MonoTouch.Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="devices">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromDevices" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromDevices (MonoTouch.Foundation.NSSet&lt;MonoTouch.HealthKit.HKDevice&gt; devices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromDevices(class MonoTouch.Foundation.NSSet`1&lt;class MonoTouch.HealthKit.HKDevice&gt; devices) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsFromDevices:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="devices" Type="MonoTouch.Foundation.NSSet&lt;MonoTouch.HealthKit.HKDevice&gt;" />
      </Parameters>
      <Docs>
        <param name="devices">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromSource">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromSource (MonoTouch.HealthKit.HKSource source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromSource(class MonoTouch.HealthKit.HKSource source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsFromSource:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="MonoTouch.HealthKit.HKSource" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects from a specified source.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromSourceRevisions">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromSourceRevisions (MonoTouch.Foundation.NSSet sourceRevisions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromSourceRevisions(class MonoTouch.Foundation.NSSet sourceRevisions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsFromSourceRevisions:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceRevisions" Type="MonoTouch.Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="sourceRevisions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromSourceRevisions" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromSourceRevisions (MonoTouch.Foundation.NSSet&lt;MonoTouch.HealthKit.HKSourceRevision&gt; sourceRevisions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromSourceRevisions(class MonoTouch.Foundation.NSSet`1&lt;class MonoTouch.HealthKit.HKSourceRevision&gt; sourceRevisions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsFromSourceRevisions:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceRevisions" Type="MonoTouch.Foundation.NSSet&lt;MonoTouch.HealthKit.HKSourceRevision&gt;" />
      </Parameters>
      <Docs>
        <param name="sourceRevisions">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromSources">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromSources (MonoTouch.Foundation.NSSet sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromSources(class MonoTouch.Foundation.NSSet sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsFromSources:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="MonoTouch.Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="sources">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects from a set of sources.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsFromWorkout">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromWorkout (MonoTouch.HealthKit.HKWorkout workout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObjectsFromWorkout(class MonoTouch.HealthKit.HKWorkout workout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsFromWorkout:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workout" Type="MonoTouch.HealthKit.HKWorkout" />
      </Parameters>
      <Docs>
        <param name="workout">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get objects from a workout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsWithDeviceProperty">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObjectsWithDeviceProperty (string key, MonoTouch.Foundation.NSSet allowedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObjectsWithDeviceProperty(string key, class MonoTouch.Foundation.NSSet allowedValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsWithDeviceProperty:allowedValues:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="allowedValues" Type="MonoTouch.Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="allowedValues">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForObjectsWithDeviceProperty" apistyle="unified">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForObjectsWithDeviceProperty (string key, MonoTouch.Foundation.NSSet&lt;MonoTouch.Foundation.NSString&gt; allowedValues);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForObjectsWithDeviceProperty(string key, class MonoTouch.Foundation.NSSet`1&lt;class MonoTouch.Foundation.NSString&gt; allowedValues) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsWithDeviceProperty:allowedValues:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_9_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="allowedValues" Type="MonoTouch.Foundation.NSSet&lt;MonoTouch.Foundation.NSString&gt;" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="allowedValues">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForQuantitySamples">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForQuantitySamples (MonoTouch.Foundation.NSPredicateOperatorType operatorType, MonoTouch.HealthKit.HKQuantity quantity);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForQuantitySamples(valuetype MonoTouch.Foundation.NSPredicateOperatorType operatorType, class MonoTouch.HealthKit.HKQuantity quantity) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForQuantitySamplesWithOperatorType:quantity:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="MonoTouch.Foundation.NSPredicateOperatorType" />
        <Parameter Name="quantity" Type="MonoTouch.HealthKit.HKQuantity" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="quantity">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get samples by quantity.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForSamples">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForSamples (MonoTouch.Foundation.NSDate startDate, MonoTouch.Foundation.NSDate endDate, MonoTouch.HealthKit.HKQueryOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForSamples(class MonoTouch.Foundation.NSDate startDate, class MonoTouch.Foundation.NSDate endDate, valuetype MonoTouch.HealthKit.HKQueryOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForSamplesWithStartDate:endDate:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startDate" Type="MonoTouch.Foundation.NSDate" />
        <Parameter Name="endDate" Type="MonoTouch.Foundation.NSDate" />
        <Parameter Name="options" Type="MonoTouch.HealthKit.HKQueryOptions" />
      </Parameters>
      <Docs>
        <param name="startDate">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="endDate">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="options">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get samples that are in a date range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForTotalDistance">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForTotalDistance (MonoTouch.Foundation.NSPredicateOperatorType operatorType, MonoTouch.HealthKit.HKQuantity totalDistance);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForTotalDistance(valuetype MonoTouch.Foundation.NSPredicateOperatorType operatorType, class MonoTouch.HealthKit.HKQuantity totalDistance) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForWorkoutsWithOperatorType:totalDistance:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="MonoTouch.Foundation.NSPredicateOperatorType" />
        <Parameter Name="totalDistance" Type="MonoTouch.HealthKit.HKQuantity" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="totalDistance">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get workouts by distance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForTotalEnergyBurned">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForTotalEnergyBurned (MonoTouch.Foundation.NSPredicateOperatorType operatorType, MonoTouch.HealthKit.HKQuantity totalEnergyBurned);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForTotalEnergyBurned(valuetype MonoTouch.Foundation.NSPredicateOperatorType operatorType, class MonoTouch.HealthKit.HKQuantity totalEnergyBurned) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForWorkoutsWithOperatorType:totalEnergyBurned:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operatorType" Type="MonoTouch.Foundation.NSPredicateOperatorType" />
        <Parameter Name="totalEnergyBurned" Type="MonoTouch.HealthKit.HKQuantity" />
      </Parameters>
      <Docs>
        <param name="operatorType">To be added.</param>
        <param name="totalEnergyBurned">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get workouts by energy consumed.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForWorkouts">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForWorkouts (MonoTouch.HealthKit.HKWorkoutActivityType workoutActivityType);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForWorkouts(valuetype MonoTouch.HealthKit.HKWorkoutActivityType workoutActivityType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForWorkoutsWithWorkoutActivityType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="workoutActivityType" Type="MonoTouch.HealthKit.HKWorkoutActivityType" />
      </Parameters>
      <Docs>
        <param name="workoutActivityType">To be added.</param>
        <summary> Creates and returns a predicate that can be used to get workouts by activity type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Predicate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSPredicate Predicate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSPredicate Predicate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("predicate", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a predicate that filters objects that are returned from the HealthKit store.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PredicateForObjectsWithNoCorrelation">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate PredicateForObjectsWithNoCorrelation ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate PredicateForObjectsWithNoCorrelation() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForObjectsWithNoCorrelation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> Creates and returns a predicate for objects that do not have a HealthKit correlation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.HealthKit.HKSampleType SampleType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.HealthKit.HKSampleType SampleType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("sampleType", MonoTouch.ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.HealthKit.HKSampleType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the type of returned objects.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
