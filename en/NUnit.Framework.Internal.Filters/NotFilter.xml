<Type Name="NotFilter" FullName="NUnit.Framework.Internal.Filters.NotFilter">
  <TypeSignature Language="C#" Value="public class NotFilter : Xamarin.iOS.dll=NUnit.Framework.Internal.TestFilter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit NotFilter extends Xamarin.iOS.dll=NUnit.Framework.Internal.TestFilter" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>NUnit.Framework.Internal.TestFilter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            NotFilter negates the operation of another filter
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NotFilter (Xamarin.iOS.dll=NUnit.Framework.Api.ITestFilter baseFilter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Xamarin.iOS.dll=NUnit.Framework.Api.ITestFilter baseFilter) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="baseFilter" Type="Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITestFilter" />
      </Parameters>
      <Docs>
        <param name="baseFilter">The filter to be negated</param>
        <summary>
            Construct a not filter on another filter
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseFilter">
      <MemberSignature Language="C#" Value="public Xamarin.iOS.dll=NUnit.Framework.Api.ITestFilter BaseFilter { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Xamarin.iOS.dll=NUnit.Framework.Api.ITestFilter BaseFilter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Xamarin.iOS.dll=NUnit.Framework.Api.ITestFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Gets the base filter
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Match">
      <MemberSignature Language="C#" Value="public override bool Match (Xamarin.iOS.dll=NUnit.Framework.Api.ITest test);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Match(class Xamarin.iOS.dll=NUnit.Framework.Api.ITest test) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITest" />
      </Parameters>
      <Docs>
        <param name="test">The test to be matched</param>
        <summary>
            Check whether the filter matches a test
            </summary>
        <returns>True if it matches, otherwise false</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MatchDescendant">
      <MemberSignature Language="C#" Value="protected override bool MatchDescendant (Xamarin.iOS.dll=NUnit.Framework.Api.ITest test);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool MatchDescendant(class Xamarin.iOS.dll=NUnit.Framework.Api.ITest test) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Api.ITest" />
      </Parameters>
      <Docs>
        <param name="test">The test to be matched</param>
        <summary>
            Determine whether any descendant of the test matches the filter criteria.
            </summary>
        <returns>True if at least one descendant matches the filter criteria</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopLevel">
      <MemberSignature Language="C#" Value="public bool TopLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TopLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
            Indicates whether this is a top-level NotFilter,
            requiring special handling of Explicit
            </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>