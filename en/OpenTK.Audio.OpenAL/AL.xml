<Type Name="AL" FullName="OpenTK.Audio.OpenAL.AL">
  <TypeSignature Language="C#" Value="public static class AL" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit AL extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>OpenTK-1.0</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Provides access to the OpenAL 1.1 flat API.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BindBufferToSource">
      <MemberSignature Language="C#" Value="public static void BindBufferToSource (int source, int buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindBufferToSource(int32 source, int32 buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Source name to attach the Buffer to.</param>
        <param name="buffer">Buffer name which is attached to the Source.</param>
        <summary>(Helper) Binds a Buffer to a Source handle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindBufferToSource">
      <MemberSignature Language="C#" Value="public static void BindBufferToSource (uint source, uint buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BindBufferToSource(unsigned int32 source, unsigned int32 buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.UInt32" />
        <Parameter Name="buffer" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="source">Source name to attach the Buffer to.</param>
        <param name="buffer">Buffer name which is attached to the Source.</param>
        <summary>(Helper) Binds a Buffer to a Source handle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferData">
      <MemberSignature Language="C#" Value="public static void BufferData (int bid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALFormat format, IntPtr buffer, int size, int freq);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BufferData(int32 bid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALFormat format, native int buffer, int32 size, int32 freq) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bid" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.IntPtr" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="freq" Type="System.Int32" />
        <Parameter Name="format" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALFormat" />
      </Parameters>
      <Docs>
        <param name="bid">buffer Handle/Name to be filled with buffer.</param>
        <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
        <param name="buffer">Pointer to a pinned audio buffer.</param>
        <param name="size">The size of the audio buffer in bytes.</param>
        <param name="freq">The frequency of the audio buffer.</param>
        <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferData">
      <MemberSignature Language="C#" Value="public static void BufferData (uint bid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALFormat format, IntPtr buffer, int size, int freq);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alBufferData&quot; cdecl)void BufferData(unsigned int32 bid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALFormat format, native int buffer, int32 size, int32 freq) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bid" Type="System.UInt32" />
        <Parameter Name="buffer" Type="System.IntPtr" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="freq" Type="System.Int32" />
        <Parameter Name="format" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALFormat" />
      </Parameters>
      <Docs>
        <param name="bid">buffer Handle/Name to be filled with buffer.</param>
        <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
        <param name="buffer">Pointer to a pinned audio buffer.</param>
        <param name="size">The size of the audio buffer in bytes.</param>
        <param name="freq">The frequency of the audio buffer.</param>
        <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BufferData&lt;TBuffer&gt;">
      <MemberSignature Language="C#" Value="public static void BufferData&lt;TBuffer&gt; (int bid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALFormat format, TBuffer[] buffer, int size, int freq) where TBuffer : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void BufferData&lt;struct .ctor (class System.ValueType) TBuffer&gt;(int32 bid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALFormat format, !!TBuffer[] buffer, int32 size, int32 freq) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TBuffer">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="bid" Type="System.Int32" />
        <Parameter Name="buffer" Type="TBuffer[]" />
        <Parameter Name="size" Type="System.Int32" />
        <Parameter Name="freq" Type="System.Int32" />
        <Parameter Name="format" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALFormat" />
      </Parameters>
      <Docs>
        <typeparam name="TBuffer">To be added.</typeparam>
        <param name="bid">buffer Handle/Name to be filled with buffer.</param>
        <param name="format">Format type from among the following: ALFormat.Mono8, ALFormat.Mono16, ALFormat.Stereo8, ALFormat.Stereo16.</param>
        <param name="buffer">The audio buffer.</param>
        <param name="size">The size of the audio buffer in bytes.</param>
        <param name="freq">The frequency of the audio buffer.</param>
        <summary>This function fills a buffer with audio buffer. All the pre-defined formats are PCM buffer, but this function may be used by extensions to load other buffer types as well.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBuffer">
      <MemberSignature Language="C#" Value="public static void DeleteBuffer (int buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteBuffer(int32 buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Pointer to a buffer name identifying the buffer to be deleted.</param>
        <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBuffer">
      <MemberSignature Language="C#" Value="public static void DeleteBuffer (ref uint buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteBuffer(unsigned int32 buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="buffer">Pointer to a buffer name identifying the buffer to be deleted.</param>
        <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBuffers">
      <MemberSignature Language="C#" Value="public static void DeleteBuffers (int[] buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteBuffers(int32[] buffers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBuffers">
      <MemberSignature Language="C#" Value="public static void DeleteBuffers (uint[] buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteBuffers(unsigned int32[] buffers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="System.UInt32[]" />
      </Parameters>
      <Docs>
        <param name="buffers">Pointer to a buffer name identifying the buffer to be deleted.</param>
        <summary>This function deletes one buffer only, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBuffers">
      <MemberSignature Language="C#" Value="public static void DeleteBuffers (int n, ref int buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteBuffers(int32 n, int32 buffers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="buffers" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="n">The number of buffers to be deleted.</param>
        <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBuffers">
      <MemberSignature Language="C#" Value="public static void DeleteBuffers (int n, int* buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alDeleteBuffers&quot; cdecl)void DeleteBuffers(int32 n, int32* buffers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>OpenTK-1.0</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="buffers" Type="System.Int32*" />
      </Parameters>
      <Docs>
        <param name="n">To be added.</param>
        <param name="buffers">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBuffers">
      <MemberSignature Language="C#" Value="public static void DeleteBuffers (int n, ref uint buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteBuffers(int32 n, unsigned int32 buffers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="buffers" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="n">The number of buffers to be deleted.</param>
        <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteBuffers">
      <MemberSignature Language="C#" Value="public static void DeleteBuffers (int n, uint* buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alDeleteBuffers&quot; cdecl)void DeleteBuffers(int32 n, unsigned int32* buffers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="buffers" Type="System.UInt32*" />
      </Parameters>
      <Docs>
        <param name="n">The number of buffers to be deleted.</param>
        <param name="buffers">Pointer to an array of buffer names identifying the buffers to be deleted.</param>
        <summary>This function deletes one or more buffers, freeing the resources used by the buffer. Buffers which are attached to a source can not be deleted. See AL.Source (ALSourcei) and AL.SourceUnqueueBuffers for information on how to detach a buffer from a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSource">
      <MemberSignature Language="C#" Value="public static void DeleteSource (int source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteSource(int32 source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">Pointer to a source name identifying the source to be deleted.</param>
        <summary>This function deletes one source only.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSource">
      <MemberSignature Language="C#" Value="public static void DeleteSource (ref uint source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteSource(unsigned int32 source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="source">Pointer to a source name identifying the source to be deleted.</param>
        <summary>This function deletes one source only.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSources">
      <MemberSignature Language="C#" Value="public static void DeleteSources (int[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteSources(int32[] sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="sources">An array of source names identifying the sources to be deleted.</param>
        <summary>This function deletes one or more sources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSources">
      <MemberSignature Language="C#" Value="public static void DeleteSources (uint[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeleteSources(unsigned int32[] sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="System.UInt32[]" />
      </Parameters>
      <Docs>
        <param name="sources">An array of source names identifying the sources to be deleted.</param>
        <summary>This function deletes one or more sources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSources">
      <MemberSignature Language="C#" Value="public static void DeleteSources (int n, ref int sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alDeleteSources&quot; cdecl)void DeleteSources(int32 n, int32 sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="sources" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="n">The number of sources to be deleted.</param>
        <param name="sources">Reference to a single source, or an array of source names identifying the sources to be deleted.</param>
        <summary>This function deletes one or more sources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSources">
      <MemberSignature Language="C#" Value="public static void DeleteSources (int n, ref uint sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alDeleteSources&quot; cdecl)void DeleteSources(int32 n, unsigned int32 sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="sources" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="n">The number of sources to be deleted.</param>
        <param name="sources">Reference to a single source, or an array of source names identifying the sources to be deleted.</param>
        <summary>This function deletes one or more sources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSources">
      <MemberSignature Language="C#" Value="public static void DeleteSources (int n, uint* sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alDeleteSources&quot; cdecl)void DeleteSources(int32 n, unsigned int32* sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="sources" Type="System.UInt32*" />
      </Parameters>
      <Docs>
        <param name="n">The number of sources to be deleted.</param>
        <param name="sources">Pointer to an array of source names identifying the sources to be deleted.</param>
        <summary>This function deletes one or more sources.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Disable">
      <MemberSignature Language="C#" Value="public static void Disable (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALCapability capability);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alDisable&quot; cdecl)void Disable(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALCapability capability) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capability" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALCapability" />
      </Parameters>
      <Docs>
        <param name="capability">The name of a capability to disable.</param>
        <summary>This function disables a feature of the OpenAL driver.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DistanceModel">
      <MemberSignature Language="C#" Value="public static void DistanceModel (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALDistanceModel distancemodel);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alDistanceModel&quot; cdecl)void DistanceModel(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALDistanceModel distancemodel) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="distancemodel" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALDistanceModel" />
      </Parameters>
      <Docs>
        <param name="distancemodel"></param>
        <summary>This function selects the OpenAL distance model – ALDistanceModel.InverseDistance, ALDistanceModel.InverseDistanceClamped, ALDistanceModel.LinearDistance, ALDistanceModel.LinearDistanceClamped, ALDistanceModel.ExponentDistance, ALDistanceModel.ExponentDistanceClamped, or ALDistanceModel.None. The default distance model in OpenAL is ALDistanceModel.InverseDistanceClamped.</summary>
        <remarks>
            The ALDistanceModel .InverseDistance model works according to the following formula:
            gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));
            The ALDistanceModel .InverseDistanceClamped model works according to the following formula:
            distance = max(distance,ALSourcef.ReferenceDistance);
            distance = min(distance,ALSourcef.MaxDistance);
            gain = ALSourcef.ReferenceDistance / (ALSourcef.ReferenceDistance + ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance));
            The ALDistanceModel.LinearDistance model works according to the following formula:
            distance = min(distance, ALSourcef.MaxDistance) // avoid negative gain
            gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))
            The ALDistanceModel.LinearDistanceClamped model works according to the following formula:
            distance = max(distance, ALSourcef.ReferenceDistance)
            distance = min(distance, ALSourcef.MaxDistance)
            gain = (1 – ALSourcef.RolloffFactor * (distance – ALSourcef.ReferenceDistance) / (ALSourcef.MaxDistance – ALSourcef.ReferenceDistance))
            The ALDistanceModel.ExponentDistance model works according to the following formula:
            gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor)
            The ALDistanceModel.ExponentDistanceClamped model works according to the following formula:
            distance = max(distance, ALSourcef.ReferenceDistance)
            distance = min(distance, ALSourcef.MaxDistance)
            gain = (distance / ALSourcef.ReferenceDistance) ^ (- ALSourcef.RolloffFactor)
            The ALDistanceModel.None model works according to the following formula:
            gain = 1f;
            </remarks>
      </Docs>
    </Member>
    <Member MemberName="DopplerFactor">
      <MemberSignature Language="C#" Value="public static void DopplerFactor (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alDopplerFactor&quot; cdecl)void DopplerFactor(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">A negative value will result in an error, the command is then ignored. The default value is 1f. The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.</param>
        <summary>AL.DopplerFactor is a simple scaling of source and listener velocities to exaggerate or deemphasize the Doppler (pitch) shift resulting from the calculation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DopplerVelocity">
      <MemberSignature Language="C#" Value="public static void DopplerVelocity (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alDopplerVelocity&quot; cdecl)void DopplerVelocity(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">The default is 1.0f.</param>
        <summary>This function is deprecated and should not be used.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enable">
      <MemberSignature Language="C#" Value="public static void Enable (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALCapability capability);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alEnable&quot; cdecl)void Enable(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALCapability capability) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capability" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALCapability" />
      </Parameters>
      <Docs>
        <param name="capability">The name of a capability to enable.</param>
        <summary>This function enables a feature of the OpenAL driver. There are no capabilities defined in OpenAL 1.1 to be used with this function, but it may be used by an extension.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenBuffer">
      <MemberSignature Language="C#" Value="public static int GenBuffer ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GenBuffer() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
        <returns>Pointer to an uint value which will store the name of the new buffer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenBuffer">
      <MemberSignature Language="C#" Value="public static void GenBuffer (out uint buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenBuffer(unsigned int32 buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="buffer">Pointer to an uint value which will store the names of the new buffer.</param>
        <summary>This function generates one buffer only, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenBuffers">
      <MemberSignature Language="C#" Value="public static int[] GenBuffers (int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] GenBuffers(int32 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">The number of buffers to be generated.</param>
        <summary>This function generates one or more buffers, which contain audio data (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
        <returns>Pointer to an array of uint values which will store the names of the new buffers.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenBuffers">
      <MemberSignature Language="C#" Value="public static void GenBuffers (int n, out int buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenBuffers(int32 n, int32 buffers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="buffers" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="n">The number of buffers to be generated.</param>
        <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenBuffers">
      <MemberSignature Language="C#" Value="public static void GenBuffers (int n, int* buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGenBuffers&quot; cdecl)void GenBuffers(int32 n, int32* buffers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>OpenTK-1.0</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="buffers" Type="System.Int32*" />
      </Parameters>
      <Docs>
        <param name="n">To be added.</param>
        <param name="buffers">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenBuffers">
      <MemberSignature Language="C#" Value="public static void GenBuffers (int n, out uint buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenBuffers(int32 n, unsigned int32 buffers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="buffers" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="n">The number of buffers to be generated.</param>
        <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenBuffers">
      <MemberSignature Language="C#" Value="public static void GenBuffers (int n, uint* buffers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGenBuffers&quot; cdecl)void GenBuffers(int32 n, unsigned int32* buffers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="buffers" Type="System.UInt32*" />
      </Parameters>
      <Docs>
        <param name="n">The number of buffers to be generated.</param>
        <param name="buffers">Pointer to an array of uint values which will store the names of the new buffers.</param>
        <summary>This function generates one or more buffers, which contain audio buffer (see AL.BufferData). References to buffers are uint values, which are used wherever a buffer reference is needed (in calls such as AL.DeleteBuffers, AL.Source with parameter ALSourcei, AL.SourceQueueBuffers, and AL.SourceUnqueueBuffers).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenSource">
      <MemberSignature Language="C#" Value="public static int GenSource ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 GenSource() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This function generates one source only. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
        <returns>Pointer to an int value which will store the name of the new source.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenSource">
      <MemberSignature Language="C#" Value="public static void GenSource (out uint source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenSource(unsigned int32 source) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">Pointer to an uint value which will store the name of the new source.</param>
        <summary>This function generates one source only. References to sources are uint values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenSources">
      <MemberSignature Language="C#" Value="public static int[] GenSources (int n);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] GenSources(int32 n) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="n">The number of sources to be generated.</param>
        <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
        <returns>Pointer to an array of int values which will store the names of the new sources.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenSources">
      <MemberSignature Language="C#" Value="public static void GenSources (int[] sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenSources(int32[] sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sources" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenSources">
      <MemberSignature Language="C#" Value="public static void GenSources (int n, out int sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenSources(int32 n, int32 sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="sources" Type="System.Int32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="n">The number of sources to be generated.</param>
        <param name="sources">Pointer to an array of int values which will store the names of the new sources.</param>
        <summary>This function generates one or more sources. References to sources are int values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenSources">
      <MemberSignature Language="C#" Value="public static void GenSources (int n, out uint sources);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GenSources(int32 n, unsigned int32 sources) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="n" Type="System.Int32" />
        <Parameter Name="sources" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="n">The number of sources to be generated.</param>
        <param name="sources">Pointer to an array of uint values which will store the names of the new sources.</param>
        <summary>This function generates one or more sources. References to sources are uint values, which are used wherever a source reference is needed (in calls such as AL.DeleteSources and AL.Source with parameter ALSourcei).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static float Get (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetFloat param);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetFloat&quot; cdecl)float32 Get(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetFloat param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetFloat" />
      </Parameters>
      <Docs>
        <param name="param">the state to be queried: DopplerFactor, SpeedOfSound.</param>
        <summary>This function returns a floating point OpenAL state.</summary>
        <returns>The floating point state described by param will be returned.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static int Get (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetInteger param);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetInteger&quot; cdecl)int32 Get(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetInteger param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetInteger" />
      </Parameters>
      <Docs>
        <param name="param">the state to be queried: DistanceModel.</param>
        <summary>This function returns an integer OpenAL state.</summary>
        <returns>The integer state described by param will be returned.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Get">
      <MemberSignature Language="C#" Value="public static string Get (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetString param);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string Get(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetString param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetString" />
      </Parameters>
      <Docs>
        <param name="param">The property to be returned: Vendor, Version, Renderer and Extensions</param>
        <summary>This function retrieves an OpenAL string property.</summary>
        <returns>Returns a pointer to a null-terminated string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBuffer">
      <MemberSignature Language="C#" Value="public static void GetBuffer (int bid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetBufferi param, out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetBuffer(int32 bid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetBufferi param, int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bid" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetBufferi" />
      </Parameters>
      <Docs>
        <param name="bid">Buffer name whose attribute is being retrieved</param>
        <param name="param">The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).</param>
        <param name="value">A pointer to an int to hold the retrieved buffer</param>
        <summary>This function retrieves an integer property of a buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBuffer">
      <MemberSignature Language="C#" Value="public static void GetBuffer (uint bid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetBufferi param, out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetBufferi&quot; cdecl)void GetBuffer(unsigned int32 bid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetBufferi param, int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bid" Type="System.UInt32" />
        <Parameter Name="value" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetBufferi" />
      </Parameters>
      <Docs>
        <param name="bid">Buffer name whose attribute is being retrieved</param>
        <param name="param">The name of the attribute to be retrieved: ALGetBufferi.Frequency, Bits, Channels, Size, and the currently hidden AL_DATA (dangerous).</param>
        <param name="value">A pointer to an int to hold the retrieved buffer</param>
        <summary>This function retrieves an integer property of a buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumValue">
      <MemberSignature Language="C#" Value="public static int GetEnumValue (string ename);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetEnumValue&quot; ansi cdecl)int32 GetEnumValue(string ename) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="ename">A string describing an OpenAL token. Example "AL_DISTANCE_MODEL"</param>
        <summary>This function returns the enumeration value of an OpenAL token, described by a string.</summary>
        <returns>Returns the actual ALenum described by a string. Returns 0 if the string doesn’t describe a valid OpenAL token.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetErrorString">
      <MemberSignature Language="C#" Value="public static string GetErrorString (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALError param);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetErrorString(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALError param) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALError" />
      </Parameters>
      <Docs>
        <param name="param">The human-readable errorstring to be returned.</param>
        <summary>This function retrieves an OpenAL string property.</summary>
        <returns>Returns a pointer to a null-terminated string.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetListener">
      <MemberSignature Language="C#" Value="public static void GetListener (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerf param, out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetListenerf&quot; cdecl)void GetListener(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerf param, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerf" />
      </Parameters>
      <Docs>
        <param name="param">the name of the attribute to be retrieved: ALListenerf.Gain</param>
        <param name="value">a pointer to the floating point value being retrieved.</param>
        <summary>This function retrieves a floating point property of the listener.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetListener">
      <MemberSignature Language="C#" Value="public static void GetListener (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv param, float* values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetListenerfv&quot; cdecl)void GetListener(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv param, float32* values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Single*" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv" />
      </Parameters>
      <Docs>
        <param name="param">the name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation</param>
        <param name="values">A pointer to the floating point-vector value being retrieved.</param>
        <summary>This function retrieves a floating point-vector property of the listener. You must pin it manually.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetListener">
      <MemberSignature Language="C#" Value="public static void GetListener (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f param, out Xamarin.iOS.dll=OpenTK.Vector3 values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetListener(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f param, valuetype Xamarin.iOS.dll=OpenTK.Vector3 values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f" />
        <Parameter Name="values" Type="Xamarin.iOS.dll=OpenTK.Vector3&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="param">The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity</param>
        <param name="values">A Math.Vector3 to hold the three floats being retrieved.</param>
        <summary>This function retrieves a Math.Vector3 from a property of the listener.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetListener">
      <MemberSignature Language="C#" Value="public static void GetListener (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f param, out float value1, out float value2, out float value3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetListener3f&quot; cdecl)void GetListener(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f param, float32 value1, float32 value2, float32 value3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="value2" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="value3" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f" />
      </Parameters>
      <Docs>
        <param name="param">The name of the attribute to be retrieved: ALListener3f.Position, ALListener3f.Velocity</param>
        <param name="value1">Pointers to the three floating point being retrieved.</param>
        <param name="value2">Pointers to the three floating point being retrieved.</param>
        <param name="value3">Pointers to the three floating point being retrieved.</param>
        <summary>This function retrieves a set of three floating point values from a property of the listener.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetListener">
      <MemberSignature Language="C#" Value="public static void GetListener (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv param, out Xamarin.iOS.dll=OpenTK.Vector3 at, out Xamarin.iOS.dll=OpenTK.Vector3 up);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetListener(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv param, valuetype Xamarin.iOS.dll=OpenTK.Vector3 at, valuetype Xamarin.iOS.dll=OpenTK.Vector3 up) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv" />
        <Parameter Name="at" Type="Xamarin.iOS.dll=OpenTK.Vector3&amp;" RefType="out" />
        <Parameter Name="up" Type="Xamarin.iOS.dll=OpenTK.Vector3&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="param">the name of the attribute to be retrieved: ALListenerfv.Orientation</param>
        <param name="at">A Math.Vector3 for the At-Vector.</param>
        <param name="up">A Math.Vector3 for the Up-Vector.</param>
        <summary>This function retrieves two Math.Vector3 properties of the listener.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProcAddress">
      <MemberSignature Language="C#" Value="public static IntPtr GetProcAddress (string fname);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetProcAddress&quot; ansi cdecl)native int GetProcAddress(string fname) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fname">A string containing the function name.</param>
        <summary>This function returns the address of an OpenAL extension function. Handle with care.</summary>
        <returns>The return value is a pointer to the specified function. The return value will be IntPtr.Zero if the function is not found.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public static void GetSource (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetSourcei param, out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetSource(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetSourcei param, int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetSourcei" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being retrieved.</param>
        <param name="param">The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.</param>
        <param name="value">A pointer to the integer value being retrieved.</param>
        <summary>This function retrieves an integer property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public static void GetSource (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb param, out bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetSource(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb param, bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being retrieved.</param>
        <param name="param">The name of the attribute to get: ALSourceb.SourceRelative, Looping.</param>
        <param name="value">A pointer to the bool value being retrieved.</param>
        <summary>This function retrieves a bool property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public static void GetSource (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef param, out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetSource(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef param, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="value" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being retrieved.</param>
        <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
        <param name="value">A pointer to the floating point value being retrieved</param>
        <summary>This function retrieves a floating point property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public static void GetSource (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetSourcei param, out int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetSourcei&quot; cdecl)void GetSource(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetSourcei param, int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="value" Type="System.Int32&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALGetSourcei" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being retrieved.</param>
        <param name="param">The name of the attribute to retrieve: ALSourcei.SourceRelative, Buffer, SourceState, BuffersQueued, BuffersProcessed.</param>
        <param name="value">A pointer to the integer value being retrieved.</param>
        <summary>This function retrieves an integer property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public static void GetSource (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb param, out bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetSource(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb param, bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="value" Type="System.Boolean&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being retrieved.</param>
        <param name="param">The name of the attribute to get: ALSourceb.SourceRelative, Looping.</param>
        <param name="value">A pointer to the bool value being retrieved.</param>
        <summary>This function retrieves a bool property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public static void GetSource (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef param, out float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetSourcef&quot; cdecl)void GetSource(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef param, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="value" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being retrieved.</param>
        <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
        <param name="value">A pointer to the floating point value being retrieved</param>
        <summary>This function retrieves a floating point property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public static void GetSource (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, out Xamarin.iOS.dll=OpenTK.Vector3 values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetSource(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, valuetype Xamarin.iOS.dll=OpenTK.Vector3 values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f" />
        <Parameter Name="values" Type="Xamarin.iOS.dll=OpenTK.Vector3&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being retrieved.</param>
        <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
        <param name="values">A Math.Vector3 to retrieve the values to.</param>
        <summary>This function retrieves three floating point values representing a property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public static void GetSource (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, out Xamarin.iOS.dll=OpenTK.Vector3 values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetSource(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, valuetype Xamarin.iOS.dll=OpenTK.Vector3 values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f" />
        <Parameter Name="values" Type="Xamarin.iOS.dll=OpenTK.Vector3&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being retrieved.</param>
        <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
        <param name="values">A Math.Vector3 to retrieve the values to.</param>
        <summary>This function retrieves three floating point values representing a property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public static void GetSource (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, out float value1, out float value2, out float value3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void GetSource(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, float32 value1, float32 value2, float32 value3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="value1" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="value2" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="value3" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being retrieved.</param>
        <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
        <param name="value1">Pointer to the value to retrieve.</param>
        <param name="value2">Pointer to the value to retrieve.</param>
        <param name="value3">Pointer to the value to retrieve.</param>
        <summary>This function retrieves three floating point values representing a property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSource">
      <MemberSignature Language="C#" Value="public static void GetSource (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, out float value1, out float value2, out float value3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alGetSource3f&quot; cdecl)void GetSource(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, float32 value1, float32 value2, float32 value3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="value1" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="value2" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="value3" Type="System.Single&amp;" RefType="out" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being retrieved.</param>
        <param name="param">the name of the attribute being retrieved: ALSource3f.Position, Velocity, Direction.</param>
        <param name="value1">Pointer to the value to retrieve.</param>
        <param name="value2">Pointer to the value to retrieve.</param>
        <param name="value3">Pointer to the value to retrieve.</param>
        <summary>This function retrieves three floating point values representing a property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBuffer">
      <MemberSignature Language="C#" Value="public static bool IsBuffer (int bid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsBuffer(int32 bid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="bid">A buffer Handle previously allocated with <see cref="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)" />.</param>
        <summary>This function tests if a buffer name is valid, returning True if valid, False if not.</summary>
        <returns>Success.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsBuffer">
      <MemberSignature Language="C#" Value="public static bool IsBuffer (uint bid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alIsBuffer&quot; cdecl)bool IsBuffer(unsigned int32 bid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bid" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="bid">A buffer Handle previously allocated with <see cref="M:OpenTK.Audio.OpenAL.AL.GenBuffers(System.Int32)" />.</param>
        <summary>This function tests if a buffer name is valid, returning True if valid, False if not.</summary>
        <returns>Success.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public static bool IsEnabled (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALCapability capability);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alIsEnabled&quot; cdecl)bool IsEnabled(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALCapability capability) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capability" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALCapability" />
      </Parameters>
      <Docs>
        <param name="capability">The name of a capability to enable.</param>
        <summary>This function returns a boolean indicating if a specific feature is enabled in the OpenAL driver.</summary>
        <returns>True if enabled, False if disabled.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExtensionPresent">
      <MemberSignature Language="C#" Value="public static bool IsExtensionPresent (string extname);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alIsExtensionPresent&quot; ansi cdecl)bool IsExtensionPresent(string extname) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extname" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="extname">A string naming the desired extension. Example: "EAX-RAM"</param>
        <summary>This function tests if a specific Extension is available for the OpenAL driver.</summary>
        <returns>Returns True if the Extension is available or False if not available.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSource">
      <MemberSignature Language="C#" Value="public static bool IsSource (int sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool IsSource(int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sid">A source name to be tested for validity</param>
        <summary>This function tests if a source name is valid, returning True if valid and False if not.</summary>
        <returns>Success.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSource">
      <MemberSignature Language="C#" Value="public static bool IsSource (uint sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alIsSource&quot; cdecl)bool IsSource(unsigned int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="sid">A source name to be tested for validity</param>
        <summary>This function tests if a source name is valid, returning True if valid and False if not.</summary>
        <returns>Success.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Listener">
      <MemberSignature Language="C#" Value="public static void Listener (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerf param, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alListenerf&quot; cdecl)void Listener(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerf param, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerf" />
      </Parameters>
      <Docs>
        <param name="param">The name of the attribute to be set: ALListenerf.Gain</param>
        <param name="value">The float value to set the attribute to.</param>
        <summary>This function sets a floating point property for the listener.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Listener">
      <MemberSignature Language="C#" Value="public static void Listener (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv param, ref float[] values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Listener(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv param, float32[] values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="values" Type="System.Single[]&amp;" RefType="ref" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv" />
      </Parameters>
      <Docs>
        <param name="param">The name of the attribute to be set: ALListener3f.Position, ALListener3f.Velocity, ALListenerfv.Orientation</param>
        <param name="values">Pointer to floating point-vector values.</param>
        <summary>This function sets a floating point-vector property of the listener.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Listener">
      <MemberSignature Language="C#" Value="public static void Listener (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f param, ref Xamarin.iOS.dll=OpenTK.Vector3 values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Listener(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f param, valuetype Xamarin.iOS.dll=OpenTK.Vector3 values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f" />
        <Parameter Name="values" Type="Xamarin.iOS.dll=OpenTK.Vector3&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="param">The name of the attribute to set: ALListener3f.Position, ALListener3f.Velocity</param>
        <param name="values">The Math.Vector3 to set the attribute to.</param>
        <summary>This function sets a Math.Vector3 property for the listener.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Listener">
      <MemberSignature Language="C#" Value="public static void Listener (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f param, float value1, float value2, float value3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alListener3f&quot; cdecl)void Listener(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f param, float32 value1, float32 value2, float32 value3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value1" Type="System.Single" />
        <Parameter Name="value2" Type="System.Single" />
        <Parameter Name="value3" Type="System.Single" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListener3f" />
      </Parameters>
      <Docs>
        <param name="param">The name of the attribute to set: ALListener3f.Position, ALListener3f.Velocity</param>
        <param name="value1">The value to set the attribute to.</param>
        <param name="value2">The value to set the attribute to.</param>
        <param name="value3">The value to set the attribute to.</param>
        <summary>This function sets a floating point property for the listener.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Listener">
      <MemberSignature Language="C#" Value="public static void Listener (Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv param, ref Xamarin.iOS.dll=OpenTK.Vector3 at, ref Xamarin.iOS.dll=OpenTK.Vector3 up);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Listener(valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv param, valuetype Xamarin.iOS.dll=OpenTK.Vector3 at, valuetype Xamarin.iOS.dll=OpenTK.Vector3 up) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALListenerfv" />
        <Parameter Name="at" Type="Xamarin.iOS.dll=OpenTK.Vector3&amp;" RefType="ref" />
        <Parameter Name="up" Type="Xamarin.iOS.dll=OpenTK.Vector3&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="param">The name of the attribute to be set: ALListenerfv.Orientation</param>
        <param name="at">A Math.Vector3 for the At-Vector.</param>
        <param name="up">A Math.Vector3 for the Up-Vector.</param>
        <summary>This function sets two Math.Vector3 properties of the listener.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb param, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Source(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb param, bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set.</param>
        <param name="param">The name of the attribute to set: ALSourceb.SourceRelative, Looping.</param>
        <param name="value">The value to set the attribute to.</param>
        <summary>This function sets an bool property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef param, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Source(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef param, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set</param>
        <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
        <param name="value">The value to set the attribute to.</param>
        <summary>This function sets a floating point property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcei param, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Source(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcei param, int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcei" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set.</param>
        <param name="param">The name of the attribute to set: ALSourcei.SourceRelative, ConeInnerAngle, ConeOuterAngle, Looping, Buffer, SourceState.</param>
        <param name="value">The value to set the attribute to.</param>
        <summary>This function sets an integer property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb param, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Source(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb param, bool value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="value" Type="System.Boolean" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourceb" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set.</param>
        <param name="param">The name of the attribute to set: ALSourceb.SourceRelative, Looping.</param>
        <param name="value">The value to set the attribute to.</param>
        <summary>This function sets an bool property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef param, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourcef&quot; cdecl)void Source(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef param, float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcef" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set</param>
        <param name="param">The name of the attribute to set: ALSourcef.Pitch, Gain, MinGain, MaxGain, MaxDistance, RolloffFactor, ConeOuterGain, ConeInnerAngle, ConeOuterAngle, ReferenceDistance, EfxAirAbsorptionFactor, EfxRoomRolloffFactor, EfxConeOuterGainHighFrequency.</param>
        <param name="value">The value to set the attribute to.</param>
        <summary>This function sets a floating point property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcei param, int value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourcei&quot; cdecl)void Source(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcei param, int32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="value" Type="System.Int32" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSourcei" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set.</param>
        <param name="param">The name of the attribute to set: ALSourcei.SourceRelative, ConeInnerAngle, ConeOuterAngle, Looping, Buffer, SourceState.</param>
        <param name="value">The value to set the attribute to.</param>
        <summary>This function sets an integer property of a source.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, ref Xamarin.iOS.dll=OpenTK.Vector3 values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Source(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, valuetype Xamarin.iOS.dll=OpenTK.Vector3 values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f" />
        <Parameter Name="values" Type="Xamarin.iOS.dll=OpenTK.Vector3&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set.</param>
        <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
        <param name="values">A Math.Vector3 which the attribute will be set to.</param>
        <summary>This function sets a source property requiring three floating point values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, ref Xamarin.iOS.dll=OpenTK.Vector3 values);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Source(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, valuetype Xamarin.iOS.dll=OpenTK.Vector3 values) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f" />
        <Parameter Name="values" Type="Xamarin.iOS.dll=OpenTK.Vector3&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set.</param>
        <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
        <param name="values">A Math.Vector3 which the attribute will be set to.</param>
        <summary>This function sets a source property requiring three floating point values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, float value1, float value2, float value3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Source(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, float32 value1, float32 value2, float32 value3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="value1" Type="System.Single" />
        <Parameter Name="value2" Type="System.Single" />
        <Parameter Name="value3" Type="System.Single" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set.</param>
        <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
        <param name="value1">The three ALfloat values which the attribute will be set to.</param>
        <param name="value2">The three ALfloat values which the attribute will be set to.</param>
        <param name="value3">The three ALfloat values which the attribute will be set to.</param>
        <summary>This function sets a source property requiring three floating point values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (int sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3i param, int value1, int value2, int value3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Source(int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3i param, int32 value1, int32 value2, int32 value3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="value1" Type="System.Int32" />
        <Parameter Name="value2" Type="System.Int32" />
        <Parameter Name="value3" Type="System.Int32" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3i" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set.</param>
        <param name="param">The name of the attribute to set: EfxAuxiliarySendFilter</param>
        <param name="value1">The value to set the attribute to. (EFX Extension) The destination Auxiliary Effect Slot ID</param>
        <param name="value2">The value to set the attribute to. (EFX Extension) The Auxiliary Send number.</param>
        <param name="value3">The value to set the attribute to. (EFX Extension) optional Filter ID.</param>
        <summary>This function sets 3 integer properties of a source. This property is used to establish connections between Sources and Auxiliary Effect Slots.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, float value1, float value2, float value3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSource3f&quot; cdecl)void Source(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f param, float32 value1, float32 value2, float32 value3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="value1" Type="System.Single" />
        <Parameter Name="value2" Type="System.Single" />
        <Parameter Name="value3" Type="System.Single" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3f" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set.</param>
        <param name="param">The name of the attribute to set: ALSource3f.Position, Velocity, Direction.</param>
        <param name="value1">The three ALfloat values which the attribute will be set to.</param>
        <param name="value2">The three ALfloat values which the attribute will be set to.</param>
        <param name="value3">The three ALfloat values which the attribute will be set to.</param>
        <summary>This function sets a source property requiring three floating point values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public static void Source (uint sid, Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3i param, int value1, int value2, int value3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSource3i&quot; cdecl)void Source(unsigned int32 sid, valuetype Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3i param, int32 value1, int32 value2, int32 value3) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="value1" Type="System.Int32" />
        <Parameter Name="value2" Type="System.Int32" />
        <Parameter Name="value3" Type="System.Int32" />
        <Parameter Name="param" Type="Xamarin.iOS.dll=OpenTK.Audio.OpenAL.ALSource3i" />
      </Parameters>
      <Docs>
        <param name="sid">Source name whose attribute is being set.</param>
        <param name="param">The name of the attribute to set: EfxAuxiliarySendFilter</param>
        <param name="value1">The value to set the attribute to. (EFX Extension) The destination Auxiliary Effect Slot ID</param>
        <param name="value2">The value to set the attribute to. (EFX Extension) The Auxiliary Send number.</param>
        <param name="value3">The value to set the attribute to. (EFX Extension) optional Filter ID.</param>
        <summary>This function sets 3 integer properties of a source. This property is used to establish connections between Sources and Auxiliary Effect Slots.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePause">
      <MemberSignature Language="C#" Value="public static void SourcePause (int sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourcePause(int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to be paused.</param>
        <summary>This function pauses a source. The paused source will have its state changed to ALSourceState.Paused.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePause">
      <MemberSignature Language="C#" Value="public static void SourcePause (uint sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourcePause&quot; cdecl)void SourcePause(unsigned int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to be paused.</param>
        <summary>This function pauses a source. The paused source will have its state changed to ALSourceState.Paused.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePause">
      <MemberSignature Language="C#" Value="public static void SourcePause (int ns, int[] sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourcePause(int32 ns, int32[] sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be paused.</param>
        <param name="sids">A pointer to an array of sources to be paused.</param>
        <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePause">
      <MemberSignature Language="C#" Value="public static void SourcePause (int ns, ref uint sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourcePause(int32 ns, unsigned int32 sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be paused.</param>
        <param name="sids">A pointer to an array of sources to be paused.</param>
        <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePause">
      <MemberSignature Language="C#" Value="public static void SourcePause (int ns, uint* sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourcePausev&quot; winapi)void SourcePause(int32 ns, unsigned int32* sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32*" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be paused.</param>
        <param name="sids">A pointer to an array of sources to be paused.</param>
        <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePause">
      <MemberSignature Language="C#" Value="public static void SourcePause (int ns, uint[] sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourcePause(int32 ns, unsigned int32[] sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32[]" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be paused.</param>
        <param name="sids">A pointer to an array of sources to be paused.</param>
        <summary>This function pauses a set of sources. The paused sources will have their state changed to ALSourceState.Paused.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePlay">
      <MemberSignature Language="C#" Value="public static void SourcePlay (int sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourcePlay(int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to be played.</param>
        <summary>This function plays, replays or resumes a source. The playing source will have it's state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePlay">
      <MemberSignature Language="C#" Value="public static void SourcePlay (uint sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourcePlay&quot; cdecl)void SourcePlay(unsigned int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to be played.</param>
        <summary>This function plays, replays or resumes a source. The playing source will have it's state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePlay">
      <MemberSignature Language="C#" Value="public static void SourcePlay (int ns, int[] sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourcePlay(int32 ns, int32[] sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be played.</param>
        <param name="sids">A pointer to an array of sources to be played.</param>
        <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePlay">
      <MemberSignature Language="C#" Value="public static void SourcePlay (int ns, ref uint sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourcePlay(int32 ns, unsigned int32 sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be played.</param>
        <param name="sids">A pointer to an array of sources to be played.</param>
        <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePlay">
      <MemberSignature Language="C#" Value="public static void SourcePlay (int ns, uint* sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourcePlayv&quot; winapi)void SourcePlay(int32 ns, unsigned int32* sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32*" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be played.</param>
        <param name="sids">A pointer to an array of sources to be played.</param>
        <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePlay">
      <MemberSignature Language="C#" Value="public static void SourcePlay (int ns, uint[] sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourcePlay(int32 ns, unsigned int32[] sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32[]" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be played.</param>
        <param name="sids">A pointer to an array of sources to be played.</param>
        <summary>This function plays a set of sources. The playing sources will have their state changed to ALSourceState.Playing. When called on a source which is already playing, the source will restart at the beginning. When the attached buffer(s) are done playing, the source will progress to the ALSourceState.Stopped state.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceQueueBuffer">
      <MemberSignature Language="C#" Value="public static void SourceQueueBuffer (int source, int buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceQueueBuffer(int32 source, int32 buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Int32" />
        <Parameter Name="buffer" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="source">The name of the source to queue buffers onto.</param>
        <param name="buffer">The name of the buffer to be queued.</param>
        <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceQueueBuffers">
      <MemberSignature Language="C#" Value="public static void SourceQueueBuffers (int sid, int numEntries, int[] bids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceQueueBuffers(int32 sid, int32 numEntries, int32[] bids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="numEntries" Type="System.Int32" />
        <Parameter Name="bids" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to queue buffers onto.</param>
        <param name="numEntries">The number of buffers to be queued.</param>
        <param name="bids">A pointer to an array of buffer names to be queued.</param>
        <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceQueueBuffers">
      <MemberSignature Language="C#" Value="public static void SourceQueueBuffers (uint sid, int numEntries, ref uint bids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceQueueBuffers(unsigned int32 sid, int32 numEntries, unsigned int32 bids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="numEntries" Type="System.Int32" />
        <Parameter Name="bids" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to queue buffers onto.</param>
        <param name="numEntries">The number of buffers to be queued.</param>
        <param name="bids">A pointer to an array of buffer names to be queued.</param>
        <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceQueueBuffers">
      <MemberSignature Language="C#" Value="public static void SourceQueueBuffers (uint sid, int numEntries, uint* bids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourceQueueBuffers&quot; winapi)void SourceQueueBuffers(unsigned int32 sid, int32 numEntries, unsigned int32* bids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="numEntries" Type="System.Int32" />
        <Parameter Name="bids" Type="System.UInt32*" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to queue buffers onto.</param>
        <param name="numEntries">The number of buffers to be queued.</param>
        <param name="bids">A pointer to an array of buffer names to be queued.</param>
        <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceQueueBuffers">
      <MemberSignature Language="C#" Value="public static void SourceQueueBuffers (uint sid, int numEntries, uint[] bids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceQueueBuffers(unsigned int32 sid, int32 numEntries, unsigned int32[] bids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="numEntries" Type="System.Int32" />
        <Parameter Name="bids" Type="System.UInt32[]" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to queue buffers onto.</param>
        <param name="numEntries">The number of buffers to be queued.</param>
        <param name="bids">A pointer to an array of buffer names to be queued.</param>
        <summary>This function queues a set of buffers on a source. All buffers attached to a source will be played in sequence, and the number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed. When first created, a source will be of type ALSourceType.Undetermined. A successful AL.SourceQueueBuffers call will change the source type to ALSourceType.Streaming.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceRewind">
      <MemberSignature Language="C#" Value="public static void SourceRewind (int sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceRewind(int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to be rewound.</param>
        <summary>This function stops the source and sets its state to ALSourceState.Initial.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceRewind">
      <MemberSignature Language="C#" Value="public static void SourceRewind (uint sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourceRewind&quot; cdecl)void SourceRewind(unsigned int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to be rewound.</param>
        <summary>This function stops the source and sets its state to ALSourceState.Initial.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceRewind">
      <MemberSignature Language="C#" Value="public static void SourceRewind (int ns, int[] sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceRewind(int32 ns, int32[] sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be rewound.</param>
        <param name="sids">A pointer to an array of sources to be rewound.</param>
        <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceRewind">
      <MemberSignature Language="C#" Value="public static void SourceRewind (int ns, ref uint sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceRewind(int32 ns, unsigned int32 sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be rewound.</param>
        <param name="sids">A pointer to an array of sources to be rewound.</param>
        <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceRewind">
      <MemberSignature Language="C#" Value="public static void SourceRewind (int ns, uint* sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourceRewindv&quot; winapi)void SourceRewind(int32 ns, unsigned int32* sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32*" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be rewound.</param>
        <param name="sids">A pointer to an array of sources to be rewound.</param>
        <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceRewind">
      <MemberSignature Language="C#" Value="public static void SourceRewind (int ns, uint[] sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceRewind(int32 ns, unsigned int32[] sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32[]" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to be rewound.</param>
        <param name="sids">A pointer to an array of sources to be rewound.</param>
        <summary>This function stops a set of sources and sets all their states to ALSourceState.Initial.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceStop">
      <MemberSignature Language="C#" Value="public static void SourceStop (int sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceStop(int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to be stopped.</param>
        <summary>This function stops a source. The stopped source will have it's state changed to ALSourceState.Stopped.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceStop">
      <MemberSignature Language="C#" Value="public static void SourceStop (uint sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourceStop&quot; cdecl)void SourceStop(unsigned int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to be stopped.</param>
        <summary>This function stops a source. The stopped source will have it's state changed to ALSourceState.Stopped.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceStop">
      <MemberSignature Language="C#" Value="public static void SourceStop (int ns, int[] sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceStop(int32 ns, int32[] sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to stop.</param>
        <param name="sids">A pointer to an array of sources to be stopped.</param>
        <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceStop">
      <MemberSignature Language="C#" Value="public static void SourceStop (int ns, ref uint sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceStop(int32 ns, unsigned int32 sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to stop.</param>
        <param name="sids">A pointer to an array of sources to be stopped.</param>
        <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceStop">
      <MemberSignature Language="C#" Value="public static void SourceStop (int ns, uint* sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourceStopv&quot; winapi)void SourceStop(int32 ns, unsigned int32* sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32*" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to stop.</param>
        <param name="sids">A pointer to an array of sources to be stopped.</param>
        <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceStop">
      <MemberSignature Language="C#" Value="public static void SourceStop (int ns, uint[] sids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SourceStop(int32 ns, unsigned int32[] sids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ns" Type="System.Int32" />
        <Parameter Name="sids" Type="System.UInt32[]" />
      </Parameters>
      <Docs>
        <param name="ns">The number of sources to stop.</param>
        <param name="sids">A pointer to an array of sources to be stopped.</param>
        <summary>This function stops a set of sources. The stopped sources will have their state changed to ALSourceState.Stopped.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUnqueueBuffer">
      <MemberSignature Language="C#" Value="public static int SourceUnqueueBuffer (int sid);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 SourceUnqueueBuffer(int32 sid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to unqueue buffers from.</param>
        <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUnqueueBuffers">
      <MemberSignature Language="C#" Value="public static int[] SourceUnqueueBuffers (int sid, int numEntries);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32[] SourceUnqueueBuffers(int32 sid, int32 numEntries) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="numEntries" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to unqueue buffers from.</param>
        <param name="numEntries">The number of buffers to be unqueued.</param>
        <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUnqueueBuffers">
      <MemberSignature Language="C#" Value="public static void SourceUnqueueBuffers (int sid, int numEntries, ref int bids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourceUnqueueBuffers&quot; winapi)void SourceUnqueueBuffers(int32 sid, int32 numEntries, int32 bids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="numEntries" Type="System.Int32" />
        <Parameter Name="bids" Type="System.Int32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to unqueue buffers from.</param>
        <param name="numEntries">The number of buffers to be unqueued.</param>
        <param name="bids">A pointer to an array of buffer names that were removed.</param>
        <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUnqueueBuffers">
      <MemberSignature Language="C#" Value="public static void SourceUnqueueBuffers (int sid, int numEntries, int[] bids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourceUnqueueBuffers&quot; winapi)void SourceUnqueueBuffers(int32 sid, int32 numEntries, int32[] bids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.Int32" />
        <Parameter Name="numEntries" Type="System.Int32" />
        <Parameter Name="bids" Type="System.Int32[]" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to unqueue buffers from.</param>
        <param name="numEntries">The number of buffers to be unqueued.</param>
        <param name="bids">A pointer to an array of buffer names that were removed.</param>
        <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUnqueueBuffers">
      <MemberSignature Language="C#" Value="public static void SourceUnqueueBuffers (uint sid, int numEntries, ref uint bids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourceUnqueueBuffers&quot; winapi)void SourceUnqueueBuffers(unsigned int32 sid, int32 numEntries, unsigned int32 bids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="numEntries" Type="System.Int32" />
        <Parameter Name="bids" Type="System.UInt32&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to unqueue buffers from.</param>
        <param name="numEntries">The number of buffers to be unqueued.</param>
        <param name="bids">A pointer to an array of buffer names that were removed.</param>
        <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUnqueueBuffers">
      <MemberSignature Language="C#" Value="public static void SourceUnqueueBuffers (uint sid, int numEntries, uint* bids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourceUnqueueBuffers&quot; winapi)void SourceUnqueueBuffers(unsigned int32 sid, int32 numEntries, unsigned int32* bids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="numEntries" Type="System.Int32" />
        <Parameter Name="bids" Type="System.UInt32*" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to unqueue buffers from.</param>
        <param name="numEntries">The number of buffers to be unqueued.</param>
        <param name="bids">A pointer to an array of buffer names that were removed.</param>
        <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourceUnqueueBuffers">
      <MemberSignature Language="C#" Value="public static void SourceUnqueueBuffers (uint sid, int numEntries, uint[] bids);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSourceUnqueueBuffers&quot; winapi)void SourceUnqueueBuffers(unsigned int32 sid, int32 numEntries, unsigned int32[] bids) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sid" Type="System.UInt32" />
        <Parameter Name="numEntries" Type="System.Int32" />
        <Parameter Name="bids" Type="System.UInt32[]" />
      </Parameters>
      <Docs>
        <param name="sid">The name of the source to unqueue buffers from.</param>
        <param name="numEntries">The number of buffers to be unqueued.</param>
        <param name="bids">A pointer to an array of buffer names that were removed.</param>
        <summary>This function unqueues a set of buffers attached to a source. The number of processed buffers can be detected using AL.GetSource with parameter ALGetSourcei.BuffersProcessed, which is the maximum number of buffers that can be unqueued using this call. The unqueue operation will only take place if all n buffers can be removed from the queue.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeedOfSound">
      <MemberSignature Language="C#" Value="public static void SpeedOfSound (float value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;openal32.dll&quot; as &quot;alSpeedOfSound&quot; cdecl)void SpeedOfSound(float32 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SuppressUnmanagedCodeSecurity</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="value">A negative or zero value will result in an error, and the command is ignored. Default: 343.3f (appropriate for velocity units of meters and air as the propagation medium). The current setting can be queried using AL.Get with parameter ALGetFloat.SpeedOfSound.</param>
        <summary>AL.SpeedOfSound allows the application to change the reference (propagation) speed used in the Doppler calculation. The source and listener velocities should be expressed in the same units as the speed of sound.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>