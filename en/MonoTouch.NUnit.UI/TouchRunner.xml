<Type Name="TouchRunner" FullName="MonoTouch.NUnit.UI.TouchRunner">
  <TypeSignature Language="C#" Value="public class TouchRunner : NUnit.Framework.Api.ITestListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TouchRunner extends System.Object implements class NUnit.Framework.Api.ITestListener" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.6.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>NUnit.Framework.Api.ITestListener</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>The TouchRunner type is the main class for Touch.Unit. With a few settings it will create
	it's own UI and can start (by user input or automatically) executing all unit tests that
	were added to the runner's instance.
    </summary>
    <remarks>
      <para>By default all logs will be displayed on the console,
        i.e. they will be shown in MonoDevelop's Application Output pad.
        </para>
      <example>
        <code lang="c#">
            // a common FinishedLaunching implementation to use Touch.Unit inside a project
            public override bool FinishedLaunching (UIApplication app, NSDictionary options)
            {
                window = new UIWindow (UIScreen.MainScreen.Bounds);
                runner = new TouchRunner (window);
                // register every tests included in the main application/assembly
                runner.Add (System.Reflection.Assembly.GetExecutingAssembly ());
                window.RootViewController = new UINavigationController (runner.GetViewController ());
                window.MakeKeyAndVisible ();
                return true;
            }
            </code>
      </example>
      <para>Logs can also be sent to a network server, e.g. for automated testing.
        </para>
      <example>
        <code lang="c#">
            // a FinishedLaunching implementation to use the automated testing features
            public override bool FinishedLaunching (UIApplication app, NSDictionary options)
            {
                window = new UIWindow (UIScreen.MainScreen.Bounds);
                runner = new TouchRunner (window);
                // register every tests included in the main application/assembly
                runner.Add (System.Reflection.Assembly.GetExecutingAssembly ());
                // you can use a TcpTextWriter or set your own custom writer
                runner.Writer = new TcpTextWriter ("10.0.1.2", 16384);
                // start running the test suites as soon as the application is loaded
                runner.AutoStart = true;
                // crash the application (to ensure it's ended) and return to springboard
                runner.TerminateAfterExecution = true;
                window.RootViewController = new UINavigationController (runner.GetViewController ());
                window.MakeKeyAndVisible ();
                return true;
            }
            </code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TouchRunner (MonoTouch.UIKit.UIWindow window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIWindow window) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="window" Type="MonoTouch.UIKit.UIWindow" />
      </Parameters>
      <Docs>
        <param name="window">The UIWindow instance where the runner's user interface will be down.</param>
        <summary>Initializes a new instance of the MonoTouch.NUnit.UI.TouchRunner class with
		the default options, previously saved user options or (for automated testing) by parsing
		the command-lines options given to the application.
		</summary>
        <remarks>An ArgumentNullException is thrown when a null UIWindow instance is passed to this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="unified">
      <MemberSignature Language="C#" Value="public TouchRunner (UIKit.UIWindow window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.UIWindow window) cil managed" />
      <MemberType>Constructor</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="window" Type="UIKit.UIWindow" />
      </Parameters>
      <Docs>
        <param name="window">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Reflection.Assembly assembly);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Reflection.Assembly assembly) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
      </Parameters>
      <Docs>
        <param name="assembly">Assembly that contains one, or more, test suites to be executed by the runner.</param>
        <summary>Add the specified assembly to the list of assemblies that the runner will scan
		to find test suites, i.e. types decorated with a [TestSuite] attribute.
        </summary>
        <remarks>An ArgumentNullException is thrown when a null assembly is passed to this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (System.Reflection.Assembly assembly, System.Collections.Generic.IList&lt;string&gt; fixtures);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(class System.Reflection.Assembly assembly, class System.Collections.Generic.IList`1&lt;string&gt; fixtures) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="fixtures" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="assembly">To be added.</param>
        <param name="fixtures">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoStart">
      <MemberSignature Language="C#" Value="public bool AutoStart { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoStart" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether this MonoTouch.NUnit.UI.TouchRunner instance 
		should automatically start the unit tests execution when the application is launched. 
        </summary>
        <value>true for automatic test execution; otherwise, false (default)</value>
        <remarks>This can be used with the network logger to completely automate test execution.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseWriter">
      <MemberSignature Language="C#" Value="public void CloseWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CloseWriter() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the current writer.</summary>
        <remarks>This will end any network connection.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Api.ITestFilter Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Api.ITestFilter Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Api.ITestFilter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewController">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UIViewController GetViewController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.UIKit.UIViewController GetViewController() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the view controller that will coordinate the UI and unit tests execution, 
		including the (optional) automation support to start and terminate the application
		automatically.
        </summary>
        <returns>The view controller</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewController" apistyle="unified">
      <MemberSignature Language="C#" Value="public UIKit.UIViewController GetViewController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UIViewController GetViewController() cil managed" />
      <MemberType>Method</MemberType>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public bool Load (System.Reflection.Assembly assembly, System.Collections.IDictionary settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Load(class System.Reflection.Assembly assembly, class System.Collections.IDictionary settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="settings" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="assembly">To be added.</param>
        <param name="settings">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public bool Load (string assemblyName, System.Collections.IDictionary settings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Load(string assemblyName, class System.Collections.IDictionary settings) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assemblyName" Type="System.String" />
        <Parameter Name="settings" Type="System.Collections.IDictionary" />
      </Parameters>
      <Docs>
        <param name="assemblyName">To be added.</param>
        <param name="settings">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadedTest">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Api.ITest LoadedTest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Api.ITest LoadedTest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Api.ITest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NavigationController">
      <MemberSignature Language="C#" Value="public MonoTouch.UIKit.UINavigationController NavigationController { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UINavigationController NavigationController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UINavigationController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Helper property that gets the RootViewController property of the UIWindow 
		that was provided to the constructor.</summary>
        <value>The navigation controller</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWriter">
      <MemberSignature Language="C#" Value="public bool OpenWriter (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool OpenWriter(string message) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">First message to write on the output.</param>
        <summary>Opens the writer when starting the unit tests execution.</summary>
        <returns>true if the writer could be initialized properly, false otherwise (e.g. if
		the network logger could not contact it's server).</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Result">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Internal.TestResult Result { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NUnit.Framework.Internal.TestResult Result" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Internal.TestResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Internal.TestResult Run (NUnit.Framework.Internal.Test test);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Internal.TestResult Run(class NUnit.Framework.Internal.Test test) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Internal.TestResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="NUnit.Framework.Internal.Test" />
      </Parameters>
      <Docs>
        <param name="test">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (NUnit.Framework.Internal.TestSuite suite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class NUnit.Framework.Internal.TestSuite suite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suite" Type="NUnit.Framework.Internal.TestSuite" />
      </Parameters>
      <Docs>
        <param name="suite">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (NUnitLite.TestSuite suite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class NUnitLite.TestSuite suite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suite" Type="NUnitLite.TestSuite" />
      </Parameters>
      <Docs>
        <param name="suite">The TestSuite to be shown.</param>
        <summary>Push the UIViewController that is responsable to handle the specified 
		TestSuite instance.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TerminateAfterExecution">
      <MemberSignature Language="C#" Value="public bool TerminateAfterExecution { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TerminateAfterExecution" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value indicating whether this MonoTouch.NUnit.UI.TouchRunner instance
		should automatically terminate (i.e. kill) the application after execution of all unit tests.
        </summary>
        <value>true if the application shall terminate after the unit tests execution; otherwise, 
		false (default)</value>
        <remarks>Useful if you want to automate the sequential launch of several Touch.Unit applications
		(e.g. different test suites, different CPU architecture on the same tests).
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TestFinished">
      <MemberSignature Language="C#" Value="public void TestFinished (NUnit.Framework.Api.ITestResult r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TestFinished(class NUnit.Framework.Api.ITestResult r) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="NUnit.Framework.Api.ITestResult" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TestFinished">
      <MemberSignature Language="C#" Value="public void TestFinished (NUnitLite.TestResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TestFinished(class NUnitLite.TestResult result) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="NUnitLite.TestResult" />
      </Parameters>
      <Docs>
        <param name="result">The TestResult instance that contains the results and a reference to the test.</param>
        <summary>Called when test suite or test case is completed and results are available.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TestOutput">
      <MemberSignature Language="C#" Value="public void TestOutput (NUnit.Framework.Api.TestOutput testOutput);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TestOutput(class NUnit.Framework.Api.TestOutput testOutput) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="testOutput" Type="NUnit.Framework.Api.TestOutput" />
      </Parameters>
      <Docs>
        <param name="testOutput">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TestStarted">
      <MemberSignature Language="C#" Value="public void TestStarted (NUnit.Framework.Api.ITest test);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TestStarted(class NUnit.Framework.Api.ITest test) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="NUnit.Framework.Api.ITest" />
      </Parameters>
      <Docs>
        <param name="test">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TestStarted">
      <MemberSignature Language="C#" Value="public void TestStarted (NUnitLite.ITest test);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TestStarted(class NUnitLite.ITest test) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="test" Type="NUnitLite.ITest" />
      </Parameters>
      <Docs>
        <param name="test">The test(s) about to be executed.</param>
        <summary>Called when an ITest is about to start it's execution.</summary>
        <remarks>An ITest can either be an entire test suite or a single test case.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Writer">
      <MemberSignature Language="C#" Value="public System.IO.TextWriter Writer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IO.TextWriter Writer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.TextWriter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <c>TextWriter</c> instance where the results of the unit tests
		/// execution will be written. </summary>
        <value>The writer</value>
        <remarks>By default all text is written to Console.Out but the user can select (using the options) 
        or programmatically set a TcpTextWriter instance to have the test result be sent to a remote server.
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
