<Type Name="TouchRunner" FullName="MonoTouch.NUnit.UI.TouchRunner">
  <TypeSignature Language="C#" Value="public class TouchRunner : MonoTouch.NUnit.UI.BaseTouchRunner" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TouchRunner extends MonoTouch.NUnit.UI.BaseTouchRunner" />
  <TypeSignature Language="DocId" Value="T:MonoTouch.NUnit.UI.TouchRunner" />
  <TypeSignature Language="F#" Value="type TouchRunner = class&#xA;    inherit BaseTouchRunner" />
  <AssemblyInfo>
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.6.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.NUnit.UI.BaseTouchRunner</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Docs>
    <summary>The TouchRunner type is the main class for Touch.Unit. With a few settings it will create
	it's own UI and can start (by user input or automatically) executing all unit tests that
	were added to the runner's instance.
    </summary>
    <remarks>
      <para>By default all logs will be displayed on the console,
        i.e. they will be shown in MonoDevelop's Application Output pad.
        </para>
      <example>
        <code lang="c#">
            // a common FinishedLaunching implementation to use Touch.Unit inside a project
            public override bool FinishedLaunching (UIApplication app, NSDictionary options)
            {
                window = new UIWindow (UIScreen.MainScreen.Bounds);
                runner = new TouchRunner (window);
                // register every tests included in the main application/assembly
                runner.Add (System.Reflection.Assembly.GetExecutingAssembly ());
                window.RootViewController = new UINavigationController (runner.GetViewController ());
                window.MakeKeyAndVisible ();
                return true;
            }
            </code>
      </example>
      <para>Logs can also be sent to a network server, e.g. for automated testing.
        </para>
      <example>
        <code lang="c#">
            // a FinishedLaunching implementation to use the automated testing features
            public override bool FinishedLaunching (UIApplication app, NSDictionary options)
            {
                window = new UIWindow (UIScreen.MainScreen.Bounds);
                runner = new TouchRunner (window);
                // register every tests included in the main application/assembly
                runner.Add (System.Reflection.Assembly.GetExecutingAssembly ());
                // you can use a TcpTextWriter or set your own custom writer
                runner.Writer = new TcpTextWriter ("10.0.1.2", 16384);
                // start running the test suites as soon as the application is loaded
                runner.AutoStart = true;
                // crash the application (to ensure it's ended) and return to springboard
                runner.TerminateAfterExecution = true;
                window.RootViewController = new UINavigationController (runner.GetViewController ());
                window.MakeKeyAndVisible ();
                return true;
            }
            </code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TouchRunner (UIKit.UIWindow window);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.UIWindow window) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.NUnit.UI.TouchRunner.#ctor(UIKit.UIWindow)" />
      <MemberSignature Language="F#" Value="new MonoTouch.NUnit.UI.TouchRunner : UIKit.UIWindow -&gt; MonoTouch.NUnit.UI.TouchRunner" Usage="new MonoTouch.NUnit.UI.TouchRunner window" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="window" Type="UIKit.UIWindow" />
      </Parameters>
      <Docs>
        <param name="window">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteOnMainThread">
      <MemberSignature Language="C#" Value="protected override void ExecuteOnMainThread (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void ExecuteOnMainThread(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.NUnit.UI.TouchRunner.ExecuteOnMainThread(System.Action)" />
      <MemberSignature Language="F#" Value="override this.ExecuteOnMainThread : Action -&gt; unit" Usage="touchRunner.ExecuteOnMainThread action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewController">
      <MemberSignature Language="C#" Value="public UIKit.UIViewController GetViewController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UIViewController GetViewController() cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.NUnit.UI.TouchRunner.GetViewController" />
      <MemberSignature Language="F#" Value="member this.GetViewController : unit -&gt; UIKit.UIViewController" Usage="touchRunner.GetViewController " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NavigationController">
      <MemberSignature Language="C#" Value="public UIKit.UINavigationController NavigationController { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UINavigationController NavigationController" />
      <MemberSignature Language="DocId" Value="P:MonoTouch.NUnit.UI.TouchRunner.NavigationController" />
      <MemberSignature Language="F#" Value="member this.NavigationController : UIKit.UINavigationController" Usage="MonoTouch.NUnit.UI.TouchRunner.NavigationController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.6.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UINavigationController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Helper property that gets the RootViewController property of the UIWindow 
		that was provided to the constructor.</summary>
        <value>The navigation controller</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Show">
      <MemberSignature Language="C#" Value="public void Show (NUnit.Framework.Internal.TestSuite suite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Show(class NUnit.Framework.Internal.TestSuite suite) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.NUnit.UI.TouchRunner.Show(NUnit.Framework.Internal.TestSuite)" />
      <MemberSignature Language="F#" Value="member this.Show : NUnit.Framework.Internal.TestSuite -&gt; unit" Usage="touchRunner.Show suite" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="suite" Type="NUnit.Framework.Internal.TestSuite" />
      </Parameters>
      <Docs>
        <param name="suite">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TerminateWithSuccess">
      <MemberSignature Language="C#" Value="protected override void TerminateWithSuccess ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void TerminateWithSuccess() cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.NUnit.UI.TouchRunner.TerminateWithSuccess" />
      <MemberSignature Language="F#" Value="override this.TerminateWithSuccess : unit -&gt; unit" Usage="touchRunner.TerminateWithSuccess " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TestFinished">
      <MemberSignature Language="C#" Value="public override void TestFinished (NUnit.Framework.Api.ITestResult r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void TestFinished(class NUnit.Framework.Api.ITestResult r) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.NUnit.UI.TouchRunner.TestFinished(NUnit.Framework.Api.ITestResult)" />
      <MemberSignature Language="F#" Value="override this.TestFinished : NUnit.Framework.Api.ITestResult -&gt; unit" Usage="touchRunner.TestFinished r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="NUnit.Framework.Api.ITestResult" />
      </Parameters>
      <Docs>
        <param name="r">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteDeviceInformation">
      <MemberSignature Language="C#" Value="protected override void WriteDeviceInformation (System.IO.TextWriter writer);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WriteDeviceInformation(class System.IO.TextWriter writer) cil managed" />
      <MemberSignature Language="DocId" Value="M:MonoTouch.NUnit.UI.TouchRunner.WriteDeviceInformation(System.IO.TextWriter)" />
      <MemberSignature Language="F#" Value="override this.WriteDeviceInformation : System.IO.TextWriter -&gt; unit" Usage="touchRunner.WriteDeviceInformation writer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writer" Type="System.IO.TextWriter" />
      </Parameters>
      <Docs>
        <param name="writer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
