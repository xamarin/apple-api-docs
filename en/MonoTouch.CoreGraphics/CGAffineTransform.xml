<Type Name="CGAffineTransform" FullName="MonoTouch.CoreGraphics.CGAffineTransform">
  <TypeSignature Language="C#" Value="public struct CGAffineTransform" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi sealed beforefieldinit CGAffineTransform extends System.ValueType" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ValueType</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>2D Affine transformation used to convert between coordinate spaces.</summary>
    <remarks>
      <para>An affine transformation uses a matrix to transform poitns between coordinate spaces.   
</para>
      <para>
These transformation can be used to rotate, scale, shear and translate points and rectangles from one coordinate system into another.
</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CGAffineTransform (float xx, float yx, float xy, float yy, float x0, float y0);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 xx, float32 yx, float32 xy, float32 yy, float32 x0, float32 y0) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public CGAffineTransform (nfloat xx, nfloat yx, nfloat xy, nfloat yy, nfloat x0, nfloat y0);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.nfloat xx, valuetype System.nfloat yx, valuetype System.nfloat xy, valuetype System.nfloat yy, valuetype System.nfloat x0, valuetype System.nfloat y0) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xx" Type="System.Single" apistyle="classic" />
        <Parameter Name="yx" Type="System.Single" apistyle="classic" />
        <Parameter Name="xy" Type="System.Single" apistyle="classic" />
        <Parameter Name="yy" Type="System.Single" apistyle="classic" />
        <Parameter Name="x0" Type="System.Single" apistyle="classic" />
        <Parameter Name="y0" Type="System.Single" apistyle="classic" />
        <Parameter Name="xx" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="yx" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="xy" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="yy" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="x0" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="y0" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="xx">The xx component.</param>
        <param name="yx">The yx component.</param>
        <param name="xy">The xy component.</param>
        <param name="yy">The yy component.</param>
        <param name="x0">The X translation component.</param>
        <param name="y0">The y translation component.</param>
        <summary>Initializes an affine transformation from the matrix values.</summary>
        <remarks>
          <para>
Defines an affine transformation matrix with the following components:
</para>
          <para>
| xx yx 0 |
</para>
          <para>
| xy yy 0 |
</para>
          <para>
| tx ty 1 |
</para>
          <para>
The third column always has the values 0, 0, 1 so only six values need to be provided.
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CGAffineTransformInvert">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform CGAffineTransformInvert (MonoTouch.CoreGraphics.CGAffineTransform t);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics&quot; as &quot;CGAffineTransformInvert&quot; winapi)valuetype MonoTouch.CoreGraphics.CGAffineTransform CGAffineTransformInvert(valuetype MonoTouch.CoreGraphics.CGAffineTransform t) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="t">Affine transformation to invert.</param>
        <summary>Inverts the affine transformation matrix.</summary>
        <returns>If the affine transformation can not be inverted, the same matrix is returned.</returns>
        <remarks>You can use the inversion matrix to map points in the target coordinate space that had been mapped to the original coordinate space.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CGRectApplyAffineTransform">
      <MemberSignature Language="C#" Value="public static System.Drawing.RectangleF CGRectApplyAffineTransform (System.Drawing.RectangleF rect, MonoTouch.CoreGraphics.CGAffineTransform t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics&quot; as &quot;CGRectApplyAffineTransform&quot; winapi)valuetype System.Drawing.RectangleF CGRectApplyAffineTransform(valuetype System.Drawing.RectangleF rect, valuetype MonoTouch.CoreGraphics.CGAffineTransform t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGRect CGRectApplyAffineTransform (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.CoreGraphics.CGAffineTransform t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig pinvokeimpl (&quot;/System/Library/Frameworks/CoreGraphics.framework/CoreGraphics&quot; as &quot;CGRectApplyAffineTransform&quot; winapi)valuetype MonoTouch.CoreGraphics.CGRect CGRectApplyAffineTransform(valuetype MonoTouch.CoreGraphics.CGRect rect, valuetype MonoTouch.CoreGraphics.CGAffineTransform t) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="t" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to transform</param>
        <param name="t">The affine transformation to apply to the points in the rectangle.</param>
        <summary>Applies an affine transformation to a rectangle. </summary>
        <returns>A rectangle whose coordinates have been transformed to the space determined by the affine.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object o) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">The object to compare this instance against.</param>
        <summary>Compares the objects for equality.</summary>
        <returns>
          <see langword="true" /> if the objects are equal, <see langword="false" /> if not.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The hashcode for this object.</summary>
        <returns>An integer value.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Invert">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGAffineTransform Invert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGAffineTransform Invert() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Inverts this affine transformation.</summary>
        <returns>If the affine transformation can not be inverted, the matrix does not change.</returns>
        <remarks>You can use the inversion matrix to map points in the target coordinate space that had been mapped to the original coordinate space.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdentity">
      <MemberSignature Language="C#" Value="public bool IsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines if the affine corresponds to the identity affine.</summary>
        <value>Whether the affine is the identity.</value>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MakeIdentity">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform MakeIdentity ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform MakeIdentity() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the identity affine transformation.</summary>
        <returns>The identity matrix.</returns>
        <remarks>
          <para>
Sets up an identity transformation, like this:
</para>
          <para>
| 1 0 0 |
</para>
          <para>
| 0 1 0 |
</para>
          <para>
| 0 0 1 |
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeRotation">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform MakeRotation (float angle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform MakeRotation(float32 angle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform MakeRotation (nfloat angle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform MakeRotation(valuetype System.nfloat angle) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" apistyle="classic" />
        <Parameter Name="angle" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="angle">The angle in radians.</param>
        <summary>Returns an affine transformation for the requested rotation angle, in radians.</summary>
        <returns>The affine transformation for the requested rotation.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MakeScale">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform MakeScale (float sx, float sy);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform MakeScale(float32 sx, float32 sy) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform MakeScale (nfloat sx, nfloat sy);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform MakeScale(valuetype System.nfloat sx, valuetype System.nfloat sy) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" apistyle="classic" />
        <Parameter Name="sy" Type="System.Single" apistyle="classic" />
        <Parameter Name="sx" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="sy" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="sx">Scale factor in the X coordinate.</param>
        <param name="sy">Scale factor for the Y coordinate.</param>
        <summary>Returns the affine transformation for the requested scaling in the X and Y coordinates.</summary>
        <returns>Returns the affine transformation for the requested scaling in the X and Y coordinates.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="MakeTranslation">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform MakeTranslation (float tx, float ty);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform MakeTranslation(float32 tx, float32 ty) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform MakeTranslation (nfloat tx, nfloat ty);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform MakeTranslation(valuetype System.nfloat tx, valuetype System.nfloat ty) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="System.Single" apistyle="classic" />
        <Parameter Name="ty" Type="System.Single" apistyle="classic" />
        <Parameter Name="tx" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="ty" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tx">X translation.</param>
        <param name="ty">Y translation.</param>
        <summary>Return the affine transformation for translating to the requested location.</summary>
        <returns>Return the affine transformation for translating to the requested location.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public void Multiply (MonoTouch.CoreGraphics.CGAffineTransform b);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Multiply(valuetype MonoTouch.CoreGraphics.CGAffineTransform b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="b" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="b">The affine used to multiply the current affine by.</param>
        <summary>Multiplies the current affine transformation by the specified affine transformation.</summary>
        <remarks>Use affine multiplication to compose multiple affine tranformations into a single affine.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform Multiply (MonoTouch.CoreGraphics.CGAffineTransform a, MonoTouch.CoreGraphics.CGAffineTransform b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform Multiply(valuetype MonoTouch.CoreGraphics.CGAffineTransform a, valuetype MonoTouch.CoreGraphics.CGAffineTransform b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
        <Parameter Name="b" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="a">The first affine.</param>
        <param name="b">The second affine.</param>
        <summary>Multiplies the two affine transformations and returns the result.</summary>
        <returns>The multiplied affine.</returns>
        <remarks>Use affine multiplication to compose multiple affine tranformations into a single affine.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (MonoTouch.CoreGraphics.CGAffineTransform lhs, MonoTouch.CoreGraphics.CGAffineTransform rhs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(valuetype MonoTouch.CoreGraphics.CGAffineTransform lhs, valuetype MonoTouch.CoreGraphics.CGAffineTransform rhs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lhs" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
        <Parameter Name="rhs" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="lhs">Left hand side affine.</param>
        <param name="rhs">Right hand side affine.</param>
        <summary>Operator overload, compares two affines.</summary>
        <returns>
          <see langword="true" /> if the affines are identical.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (MonoTouch.CoreGraphics.CGAffineTransform lhs, MonoTouch.CoreGraphics.CGAffineTransform rhs);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(valuetype MonoTouch.CoreGraphics.CGAffineTransform lhs, valuetype MonoTouch.CoreGraphics.CGAffineTransform rhs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lhs" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
        <Parameter Name="rhs" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="lhs">Left hand side affine.</param>
        <param name="rhs">Right hand side affine.</param>
        <summary>Compares affines for inequality.</summary>
        <returns>
          <see langword="true" /> if the affines are different.</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="op_Multiply">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform op_Multiply (MonoTouch.CoreGraphics.CGAffineTransform a, MonoTouch.CoreGraphics.CGAffineTransform b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname valuetype MonoTouch.CoreGraphics.CGAffineTransform op_Multiply(valuetype MonoTouch.CoreGraphics.CGAffineTransform a, valuetype MonoTouch.CoreGraphics.CGAffineTransform b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
        <Parameter Name="b" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="a">First affine transform.</param>
        <param name="b">Second affine transform.</param>
        <summary>Multiplies the two affine transformations and returns a new affine with the result.</summary>
        <returns>New affine transformation with the result.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (float angle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rotate(float32 angle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public void Rotate (nfloat angle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rotate(valuetype System.nfloat angle) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" apistyle="classic" />
        <Parameter Name="angle" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="angle">Angle represented in radians.</param>
        <summary>Applies a rotation to the affine by the specified angle, in radians.</summary>
        <remarks>
          <para>Modifies the affine in place.</para>
          <para>This method is not equivalent to the native CoreGraphics' CGAffineTransformRotate method (in which case use <see cref="M:MonoTouch.CoreGraphics.CGAffineTransform.Rotate(MonoTouch.CoreGraphics.CGAffineTransform,System.Single)" /> instead).</para>
          <para>Developers should note that this instance method, <see cref="M:MonoTouch.CoreGraphics.CGAffineTransform.Rotate(System.Single)" />, right-multiplies itself by the rotation transformation that is defined by the <paramref name="angle" />. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform Rotate (MonoTouch.CoreGraphics.CGAffineTransform transform, float angle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform Rotate(valuetype MonoTouch.CoreGraphics.CGAffineTransform transform, float32 angle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform Rotate (MonoTouch.CoreGraphics.CGAffineTransform transform, nfloat angle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform Rotate(valuetype MonoTouch.CoreGraphics.CGAffineTransform transform, valuetype System.nfloat angle) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
        <Parameter Name="angle" Type="System.Single" apistyle="classic" />
        <Parameter Name="angle" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="transform">The affine to rotate.</param>
        <param name="angle">Angle represented in radians.</param>
        <summary>Applies a rotation to the affine by the specified angle, in radians.</summary>
        <returns>The rotated affine.</returns>
        <remarks>
          <para>This method is equivalent to the native CoreGraphics' CGAffineTransformRotate method.</para>
          <para>Developers should note that this static method, <see cref="M:MonoTouch.CoreGraphics.CGAffineTransform.Rotate(MonoTouch.CoreGraphics.CGAffineTransform,System.Single)" />, left-multiplies <paramref name="transform" /> by the rotation transformation that is defined by the <paramref name="angle" />. The multiplication order is, importantly, the reverse of what the developer expects from the instance method, <see cref="M:MonoTouch.CoreGraphics.CGAffineTransform.Rotate(System.Single)" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float sx, float sy);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 sx, float32 sy) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public void Scale (nfloat sx, nfloat sy);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(valuetype System.nfloat sx, valuetype System.nfloat sy) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" apistyle="classic" />
        <Parameter Name="sy" Type="System.Single" apistyle="classic" />
        <Parameter Name="sx" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="sy" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="sx">The X scale factor.</param>
        <param name="sy">The Y scale factor.</param>
        <summary>Modify the affine to scale by the specified magnitudes.</summary>
        <remarks>
          <para>This method modifies the current affine with the requested scaling factors.</para>
          <para>This method is not equivalent to the native CoreGraphics' CGAffineTransformScale method (in which case use <see cref="M:MonoTouch.CoreGraphics.CGAffineTransform.Scale(MonoTouch.CoreGraphics.CGAffineTransform,System.Single,System.Single)" /> instead).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform Scale (MonoTouch.CoreGraphics.CGAffineTransform transform, float sx, float sy);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform Scale(valuetype MonoTouch.CoreGraphics.CGAffineTransform transform, float32 sx, float32 sy) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform Scale (MonoTouch.CoreGraphics.CGAffineTransform transform, nfloat sx, nfloat sy);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform Scale(valuetype MonoTouch.CoreGraphics.CGAffineTransform transform, valuetype System.nfloat sx, valuetype System.nfloat sy) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
        <Parameter Name="sx" Type="System.Single" apistyle="classic" />
        <Parameter Name="sy" Type="System.Single" apistyle="classic" />
        <Parameter Name="sx" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="sy" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="transform">The affine to scale.</param>
        <param name="sx">The X scale factor.</param>
        <param name="sy">The Y scale factor.</param>
        <summary>Scales the affine by the specified magnitudes and returns the result.</summary>
        <returns>The scaled affine.</returns>
        <remarks>This method is equivalent to the native CoreGraphics' CGAffineTransformScale method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Renders the affine in textual form.</summary>
        <returns />
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="TransformPoint">
      <MemberSignature Language="C#" Value="public System.Drawing.PointF TransformPoint (System.Drawing.PointF point);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.PointF TransformPoint(valuetype System.Drawing.PointF point) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGPoint TransformPoint (MonoTouch.CoreGraphics.CGPoint point);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGPoint TransformPoint(valuetype MonoTouch.CoreGraphics.CGPoint point) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.PointF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="classic" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="point">The point to transform.</param>
        <summary>Transforms the coordinates of the provided point by the affine.</summary>
        <returns>The point translated to the new coordinate space.</returns>
        <remarks>
          <para>
The point defined by x, y is transformed like this:
</para>
          <para>
new_x = xx * x + xy * y + x0;
</para>
          <para>
new_y = yx * x + yy * y + y0;
</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformRect">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF TransformRect (System.Drawing.RectangleF rect);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.RectangleF TransformRect(valuetype System.Drawing.RectangleF rect) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGRect TransformRect (MonoTouch.CoreGraphics.CGRect rect);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGRect TransformRect(valuetype MonoTouch.CoreGraphics.CGRect rect) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="classic" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="rect">A rectangle to transform.</param>
        <summary>Applies the affine transform to the supplied rectangle and returns the transformed rectangle.</summary>
        <returns>The transformed rectangle.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformSize">
      <MemberSignature Language="C#" Value="public System.Drawing.SizeF TransformSize (System.Drawing.SizeF size);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.Drawing.SizeF TransformSize(valuetype System.Drawing.SizeF size) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGSize TransformSize (MonoTouch.CoreGraphics.CGSize size);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype MonoTouch.CoreGraphics.CGSize TransformSize(valuetype MonoTouch.CoreGraphics.CGSize size) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Drawing.SizeF</ReturnType>
        <ReturnType apistyle="unified">MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.SizeF" apistyle="classic" />
        <Parameter Name="size" Type="MonoTouch.CoreGraphics.CGSize" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (float tx, float ty);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(float32 tx, float32 ty) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public void Translate (nfloat tx, nfloat ty);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(valuetype System.nfloat tx, valuetype System.nfloat ty) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tx" Type="System.Single" apistyle="classic" />
        <Parameter Name="ty" Type="System.Single" apistyle="classic" />
        <Parameter Name="tx" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="ty" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="tx">X value to move the transform by.</param>
        <param name="ty">Y value to move the transform by.</param>
        <summary>Translates the affine transform by modifying every X value by the supplied X parameter and every Y value by the supplied Y parameter.</summary>
        <remarks>
          <para>Modifies the affine in place.</para>
          <para>This method is not equivalent to the native CoreGraphics' CGAffineTransformTranslate method (in which case use <see cref="M:MonoTouch.CoreGraphics.CGAffineTransform.Translate(MonoTouch.CoreGraphics.CGAffineTransform,System.Single,System.Single)" /> instead).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform Translate (MonoTouch.CoreGraphics.CGAffineTransform transform, float tx, float ty);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform Translate(valuetype MonoTouch.CoreGraphics.CGAffineTransform transform, float32 tx, float32 ty) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreGraphics.CGAffineTransform Translate (MonoTouch.CoreGraphics.CGAffineTransform transform, nfloat tx, nfloat ty);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype MonoTouch.CoreGraphics.CGAffineTransform Translate(valuetype MonoTouch.CoreGraphics.CGAffineTransform transform, valuetype System.nfloat tx, valuetype System.nfloat ty) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transform" Type="MonoTouch.CoreGraphics.CGAffineTransform" />
        <Parameter Name="tx" Type="System.Single" apistyle="classic" />
        <Parameter Name="ty" Type="System.Single" apistyle="classic" />
        <Parameter Name="tx" Type="System.nfloat" apistyle="unified" />
        <Parameter Name="ty" Type="System.nfloat" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="transform">The affine to translate.</param>
        <param name="tx">X value to move the transform by.</param>
        <param name="ty">Y value to move the transform by.</param>
        <summary>Translates the affine transform by modifying every X value by the supplied X parameter and every Y value by the supplied Y parameter.</summary>
        <returns>The translated affine transform.</returns>
        <remarks>This method is equivalent to the native CoreGraphics' CGAffineTransformTranslate method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="x0">
      <MemberSignature Language="C#" Value="public float x0;" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".field public float32 x0" apistyle="classic" />
      <MemberSignature Language="C#" Value="public nfloat x0;" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat x0" apistyle="unified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>X translation component of the affine transform.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="xx">
      <MemberSignature Language="C#" Value="public float xx;" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".field public float32 xx" apistyle="classic" />
      <MemberSignature Language="C#" Value="public nfloat xx;" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat xx" apistyle="unified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XX component of the affine.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="xy">
      <MemberSignature Language="C#" Value="public float xy;" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".field public float32 xy" apistyle="classic" />
      <MemberSignature Language="C#" Value="public nfloat xy;" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat xy" apistyle="unified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>XY component of the affine.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="y0">
      <MemberSignature Language="C#" Value="public float y0;" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".field public float32 y0" apistyle="classic" />
      <MemberSignature Language="C#" Value="public nfloat y0;" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat y0" apistyle="unified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Y translation component of the affine transformation.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="yx">
      <MemberSignature Language="C#" Value="public float yx;" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".field public float32 yx" apistyle="classic" />
      <MemberSignature Language="C#" Value="public nfloat yx;" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat yx" apistyle="unified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>YX component of the affine.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="yy">
      <MemberSignature Language="C#" Value="public float yy;" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".field public float32 yy" apistyle="classic" />
      <MemberSignature Language="C#" Value="public nfloat yy;" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.nfloat yy" apistyle="unified" />
      <MemberType>Field</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Single</ReturnType>
        <ReturnType apistyle="unified">System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>YY component of the affine.</summary>
        <remarks />
      </Docs>
    </Member>
  </Members>
</Type>
