<Type Name="IAVVideoCompositing" FullName="AVFoundation.IAVVideoCompositing">
  <TypeSignature Language="C#" Value="public interface IAVVideoCompositing : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAVVideoCompositing implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:AVFoundation.IAVVideoCompositing" />
  <TypeSignature Language="F#" Value="type IAVVideoCompositing = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="AVVideoCompositing", WrapperType=typeof(AVFoundation.AVVideoCompositingWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SourcePixelBufferAttributes", ReturnType=typeof(Foundation.NSDictionary), Selector="sourcePixelBufferAttributes")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="RequiredPixelBufferAttributesForRenderContext", ReturnType=typeof(Foundation.NSDictionary), Selector="requiredPixelBufferAttributesForRenderContext")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CancelAllPendingVideoCompositionRequests", Selector="cancelAllPendingVideoCompositionRequests")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="supportsWideColorSourceFrames", IsProperty=true, IsRequired=false, IsStatic=false, Name="SupportsWideColorSourceFrames", PropertyType=typeof(System.Boolean), Selector="supportsWideColorSourceFrames")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="RenderContextChanged", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVVideoCompositionRenderContext) }, Selector="renderContextChanged:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="StartVideoCompositionRequest", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVAsynchronousVideoCompositionRequest) }, Selector="startVideoCompositionRequest:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:AVFoundation.AVVideoCompositing" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:AVFoundation.AVVideoCompositing" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:AVFoundation.AVVideoCompositing" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:AVFoundation.AVVideoCompositing_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="RenderContextChanged">
      <MemberSignature Language="C#" Value="public void RenderContextChanged (AVFoundation.AVVideoCompositionRenderContext newRenderContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderContextChanged(class AVFoundation.AVVideoCompositionRenderContext newRenderContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.IAVVideoCompositing.RenderContextChanged(AVFoundation.AVVideoCompositionRenderContext)" />
      <MemberSignature Language="F#" Value="abstract member RenderContextChanged : AVFoundation.AVVideoCompositionRenderContext -&gt; unit" Usage="iAVVideoCompositing.RenderContextChanged newRenderContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("renderContextChanged:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newRenderContext" Type="AVFoundation.AVVideoCompositionRenderContext" />
      </Parameters>
      <Docs>
        <param name="newRenderContext">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiredPixelBufferAttributesForRenderContext">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary RequiredPixelBufferAttributesForRenderContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDictionary RequiredPixelBufferAttributesForRenderContext() cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.IAVVideoCompositing.RequiredPixelBufferAttributesForRenderContext" />
      <MemberSignature Language="F#" Value="abstract member RequiredPixelBufferAttributesForRenderContext : unit -&gt; Foundation.NSDictionary" Usage="iAVVideoCompositing.RequiredPixelBufferAttributesForRenderContext " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("requiredPixelBufferAttributesForRenderContext")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePixelBufferAttributes">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary SourcePixelBufferAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDictionary SourcePixelBufferAttributes() cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.IAVVideoCompositing.SourcePixelBufferAttributes" />
      <MemberSignature Language="F#" Value="abstract member SourcePixelBufferAttributes : unit -&gt; Foundation.NSDictionary" Usage="iAVVideoCompositing.SourcePixelBufferAttributes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("sourcePixelBufferAttributes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartVideoCompositionRequest">
      <MemberSignature Language="C#" Value="public void StartVideoCompositionRequest (AVFoundation.AVAsynchronousVideoCompositionRequest asyncVideoCompositionRequest);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartVideoCompositionRequest(class AVFoundation.AVAsynchronousVideoCompositionRequest asyncVideoCompositionRequest) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.IAVVideoCompositing.StartVideoCompositionRequest(AVFoundation.AVAsynchronousVideoCompositionRequest)" />
      <MemberSignature Language="F#" Value="abstract member StartVideoCompositionRequest : AVFoundation.AVAsynchronousVideoCompositionRequest -&gt; unit" Usage="iAVVideoCompositing.StartVideoCompositionRequest asyncVideoCompositionRequest" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("startVideoCompositionRequest:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncVideoCompositionRequest" Type="AVFoundation.AVAsynchronousVideoCompositionRequest" />
      </Parameters>
      <Docs>
        <param name="asyncVideoCompositionRequest">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
