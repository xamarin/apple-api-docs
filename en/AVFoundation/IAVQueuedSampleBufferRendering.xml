<Type Name="IAVQueuedSampleBufferRendering" FullName="AVFoundation.IAVQueuedSampleBufferRendering">
  <TypeSignature Language="C#" Value="public interface IAVQueuedSampleBufferRendering : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAVQueuedSampleBufferRendering implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:AVFoundation.IAVQueuedSampleBufferRendering" />
  <TypeSignature Language="F#" Value="type IAVQueuedSampleBufferRendering = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="AVQueuedSampleBufferRendering", WrapperType=typeof(AVFoundation.AVQueuedSampleBufferRenderingWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="Flush", Selector="flush")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="StopRequestingMediaData", Selector="stopRequestingMediaData")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.Strong, GetterSelector="timebase", IsProperty=true, IsRequired=true, IsStatic=false, Name="Timebase", PropertyType=typeof(CoreMedia.CMTimebase), Selector="timebase")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isReadyForMoreMediaData", IsProperty=true, IsRequired=true, IsStatic=false, Name="ReadyForMoreMediaData", PropertyType=typeof(System.Boolean), Selector="readyForMoreMediaData")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="Enqueue", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(CoreMedia.CMSampleBuffer) }, Selector="enqueueSampleBuffer:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="RequestMediaData", ParameterBlockProxy=new System.Type[] { null, typeof(ObjCRuntime.Trampolines/NIDAction) }, ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CoreFoundation.DispatchQueue), typeof(System.Action) }, Selector="requestMediaDataWhenReadyOnQueue:usingBlock:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface defining methods for queueing sample buffers for presentation.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Enqueue">
      <MemberSignature Language="C#" Value="public void Enqueue (CoreMedia.CMSampleBuffer sampleBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enqueue(class CoreMedia.CMSampleBuffer sampleBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.IAVQueuedSampleBufferRendering.Enqueue(CoreMedia.CMSampleBuffer)" />
      <MemberSignature Language="F#" Value="abstract member Enqueue : CoreMedia.CMSampleBuffer -&gt; unit" Usage="iAVQueuedSampleBufferRendering.Enqueue sampleBuffer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("enqueueSampleBuffer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampleBuffer" Type="CoreMedia.CMSampleBuffer" />
      </Parameters>
      <Docs>
        <param name="sampleBuffer">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.IAVQueuedSampleBufferRendering.Flush" />
      <MemberSignature Language="F#" Value="abstract member Flush : unit -&gt; unit" Usage="iAVQueuedSampleBufferRendering.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("flush")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadyForMoreMediaData">
      <MemberSignature Language="C#" Value="public bool ReadyForMoreMediaData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadyForMoreMediaData" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.IAVQueuedSampleBufferRendering.ReadyForMoreMediaData" />
      <MemberSignature Language="F#" Value="member this.ReadyForMoreMediaData : bool" Usage="AVFoundation.IAVQueuedSampleBufferRendering.ReadyForMoreMediaData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isReadyForMoreMediaData")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestMediaData">
      <MemberSignature Language="C#" Value="public void RequestMediaData (CoreFoundation.DispatchQueue queue, Action handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequestMediaData(class CoreFoundation.DispatchQueue queue, class System.Action handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.IAVQueuedSampleBufferRendering.RequestMediaData(CoreFoundation.DispatchQueue,System.Action)" />
      <MemberSignature Language="F#" Value="abstract member RequestMediaData : CoreFoundation.DispatchQueue * Action -&gt; unit" Usage="iAVQueuedSampleBufferRendering.RequestMediaData (queue, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("requestMediaDataWhenReadyOnQueue:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
        <Parameter Name="handler" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="queue">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopRequestingMediaData">
      <MemberSignature Language="C#" Value="public void StopRequestingMediaData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopRequestingMediaData() cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.IAVQueuedSampleBufferRendering.StopRequestingMediaData" />
      <MemberSignature Language="F#" Value="abstract member StopRequestingMediaData : unit -&gt; unit" Usage="iAVQueuedSampleBufferRendering.StopRequestingMediaData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("stopRequestingMediaData")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Timebase">
      <MemberSignature Language="C#" Value="public CoreMedia.CMTimebase Timebase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreMedia.CMTimebase Timebase" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.IAVQueuedSampleBufferRendering.Timebase" />
      <MemberSignature Language="F#" Value="member this.Timebase : CoreMedia.CMTimebase" Usage="AVFoundation.IAVQueuedSampleBufferRendering.Timebase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("timebase", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMedia.CMTimebase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
