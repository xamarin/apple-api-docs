<Type Name="AVAssetDownloadDelegate" FullName="AVFoundation.AVAssetDownloadDelegate">
  <TypeSignature Language="C#" Value="public class AVAssetDownloadDelegate : Foundation.NSObject, AVFoundation.IAVAssetDownloadDelegate, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AVAssetDownloadDelegate extends Foundation.NSObject implements class AVFoundation.IAVAssetDownloadDelegate, class Foundation.INSUrlSessionDelegate, class Foundation.INSUrlSessionTaskDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:AVFoundation.AVAssetDownloadDelegate" />
  <TypeSignature Language="F#" Value="type AVAssetDownloadDelegate = class&#xA;    inherit NSObject&#xA;    interface IAVAssetDownloadDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSUrlSessionTaskDelegate&#xA;    interface INSUrlSessionDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>AVFoundation.IAVAssetDownloadDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSUrlSessionDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSUrlSessionTaskDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("AVAssetDownloadDelegate", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate that handles events that can be encountered while downloading an asset.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/reference/AVFoundation/AVAssetDownloadDelegate">Apple documentation for <c>AVAssetDownloadDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVAssetDownloadDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVAssetDownloadDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVAssetDownloadDelegate : Foundation.NSObjectFlag -&gt; AVFoundation.AVAssetDownloadDelegate" Usage="new AVFoundation.AVAssetDownloadDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal AVAssetDownloadDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVAssetDownloadDelegate : nativeint -&gt; AVFoundation.AVAssetDownloadDelegate" Usage="new AVFoundation.AVAssetDownloadDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidCompleteForMediaSelection">
      <MemberSignature Language="C#" Value="public virtual void DidCompleteForMediaSelection (Foundation.NSUrlSession session, AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, AVFoundation.AVMediaSelection mediaSelection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidCompleteForMediaSelection(class Foundation.NSUrlSession session, class AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, class AVFoundation.AVMediaSelection mediaSelection) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.DidCompleteForMediaSelection(Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,AVFoundation.AVMediaSelection)" />
      <MemberSignature Language="F#" Value="abstract member DidCompleteForMediaSelection : Foundation.NSUrlSession * AVFoundation.AVAggregateAssetDownloadTask * AVFoundation.AVMediaSelection -&gt; unit&#xA;override this.DidCompleteForMediaSelection : Foundation.NSUrlSession * AVFoundation.AVAggregateAssetDownloadTask * AVFoundation.AVMediaSelection -&gt; unit" Usage="aVAssetDownloadDelegate.DidCompleteForMediaSelection (session, aggregateAssetDownloadTask, mediaSelection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:aggregateAssetDownloadTask:didCompleteForMediaSelection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="aggregateAssetDownloadTask" Type="AVFoundation.AVAggregateAssetDownloadTask" />
        <Parameter Name="mediaSelection" Type="AVFoundation.AVMediaSelection" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="aggregateAssetDownloadTask">To be added.</param>
        <param name="mediaSelection">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidCompleteWithError">
      <MemberSignature Language="C#" Value="public virtual void DidCompleteWithError (Foundation.NSUrlSession session, Foundation.NSUrlSessionTask task, Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidCompleteWithError(class Foundation.NSUrlSession session, class Foundation.NSUrlSessionTask task, class Foundation.NSError error) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.DidCompleteWithError(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSError)" />
      <MemberSignature Language="F#" Value="abstract member DidCompleteWithError : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Foundation.NSError -&gt; unit&#xA;override this.DidCompleteWithError : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Foundation.NSError -&gt; unit" Usage="aVAssetDownloadDelegate.DidCompleteWithError (session, task, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:task:didCompleteWithError:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
        <Parameter Name="error" Type="Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="task">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Method that is called if a task in the session completes with an error.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFinishCollectingMetrics">
      <MemberSignature Language="C#" Value="public virtual void DidFinishCollectingMetrics (Foundation.NSUrlSession session, Foundation.NSUrlSessionTask task, Foundation.NSUrlSessionTaskMetrics metrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidFinishCollectingMetrics(class Foundation.NSUrlSession session, class Foundation.NSUrlSessionTask task, class Foundation.NSUrlSessionTaskMetrics metrics) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.DidFinishCollectingMetrics(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlSessionTaskMetrics)" />
      <MemberSignature Language="F#" Value="abstract member DidFinishCollectingMetrics : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Foundation.NSUrlSessionTaskMetrics -&gt; unit&#xA;override this.DidFinishCollectingMetrics : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Foundation.NSUrlSessionTaskMetrics -&gt; unit" Usage="aVAssetDownloadDelegate.DidFinishCollectingMetrics (session, task, metrics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:task:didFinishCollectingMetrics:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
        <Parameter Name="metrics" Type="Foundation.NSUrlSessionTaskMetrics" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="task">To be added.</param>
        <param name="metrics">To be added.</param>
        <summary>Method that is called when the session finishes collecting metrics for the indicated <paramref name="task" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFinishDownloadingToUrl">
      <MemberSignature Language="C#" Value="public virtual void DidFinishDownloadingToUrl (Foundation.NSUrlSession session, AVFoundation.AVAssetDownloadTask assetDownloadTask, Foundation.NSUrl location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidFinishDownloadingToUrl(class Foundation.NSUrlSession session, class AVFoundation.AVAssetDownloadTask assetDownloadTask, class Foundation.NSUrl location) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.DidFinishDownloadingToUrl(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member DidFinishDownloadingToUrl : Foundation.NSUrlSession * AVFoundation.AVAssetDownloadTask * Foundation.NSUrl -&gt; unit&#xA;override this.DidFinishDownloadingToUrl : Foundation.NSUrlSession * AVFoundation.AVAssetDownloadTask * Foundation.NSUrl -&gt; unit" Usage="aVAssetDownloadDelegate.DidFinishDownloadingToUrl (session, assetDownloadTask, location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:assetDownloadTask:didFinishDownloadingToURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="assetDownloadTask" Type="AVFoundation.AVAssetDownloadTask" />
        <Parameter Name="location" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="assetDownloadTask">To be added.</param>
        <param name="location">To be added.</param>
        <summary>Method that is called when the <paramref name="assetDownloadTask" /> finishes downloading the asset to <paramref name="location" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidLoadTimeRange">
      <MemberSignature Language="C#" Value="public virtual void DidLoadTimeRange (Foundation.NSUrlSession session, AVFoundation.AVAssetDownloadTask assetDownloadTask, CoreMedia.CMTimeRange timeRange, Foundation.NSValue[] loadedTimeRanges, CoreMedia.CMTimeRange timeRangeExpectedToLoad);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidLoadTimeRange(class Foundation.NSUrlSession session, class AVFoundation.AVAssetDownloadTask assetDownloadTask, valuetype CoreMedia.CMTimeRange timeRange, class Foundation.NSValue[] loadedTimeRanges, valuetype CoreMedia.CMTimeRange timeRangeExpectedToLoad) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.DidLoadTimeRange(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,CoreMedia.CMTimeRange,Foundation.NSValue[],CoreMedia.CMTimeRange)" />
      <MemberSignature Language="F#" Value="abstract member DidLoadTimeRange : Foundation.NSUrlSession * AVFoundation.AVAssetDownloadTask * CoreMedia.CMTimeRange * Foundation.NSValue[] * CoreMedia.CMTimeRange -&gt; unit&#xA;override this.DidLoadTimeRange : Foundation.NSUrlSession * AVFoundation.AVAssetDownloadTask * CoreMedia.CMTimeRange * Foundation.NSValue[] * CoreMedia.CMTimeRange -&gt; unit" Usage="aVAssetDownloadDelegate.DidLoadTimeRange (session, assetDownloadTask, timeRange, loadedTimeRanges, timeRangeExpectedToLoad)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:assetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="assetDownloadTask" Type="AVFoundation.AVAssetDownloadTask" />
        <Parameter Name="timeRange" Type="CoreMedia.CMTimeRange" />
        <Parameter Name="loadedTimeRanges" Type="Foundation.NSValue[]" />
        <Parameter Name="timeRangeExpectedToLoad" Type="CoreMedia.CMTimeRange" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="assetDownloadTask">To be added.</param>
        <param name="timeRange">To be added.</param>
        <param name="loadedTimeRanges">To be added.</param>
        <param name="timeRangeExpectedToLoad">To be added.</param>
        <summary>Method that is called to communicate download progress updates.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidLoadTimeRange">
      <MemberSignature Language="C#" Value="public virtual void DidLoadTimeRange (Foundation.NSUrlSession session, AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, CoreMedia.CMTimeRange timeRange, Foundation.NSValue[] loadedTimeRanges, CoreMedia.CMTimeRange timeRangeExpectedToLoad, AVFoundation.AVMediaSelection mediaSelection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidLoadTimeRange(class Foundation.NSUrlSession session, class AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, valuetype CoreMedia.CMTimeRange timeRange, class Foundation.NSValue[] loadedTimeRanges, valuetype CoreMedia.CMTimeRange timeRangeExpectedToLoad, class AVFoundation.AVMediaSelection mediaSelection) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.DidLoadTimeRange(Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,CoreMedia.CMTimeRange,Foundation.NSValue[],CoreMedia.CMTimeRange,AVFoundation.AVMediaSelection)" />
      <MemberSignature Language="F#" Value="abstract member DidLoadTimeRange : Foundation.NSUrlSession * AVFoundation.AVAggregateAssetDownloadTask * CoreMedia.CMTimeRange * Foundation.NSValue[] * CoreMedia.CMTimeRange * AVFoundation.AVMediaSelection -&gt; unit&#xA;override this.DidLoadTimeRange : Foundation.NSUrlSession * AVFoundation.AVAggregateAssetDownloadTask * CoreMedia.CMTimeRange * Foundation.NSValue[] * CoreMedia.CMTimeRange * AVFoundation.AVMediaSelection -&gt; unit" Usage="aVAssetDownloadDelegate.DidLoadTimeRange (session, aggregateAssetDownloadTask, timeRange, loadedTimeRanges, timeRangeExpectedToLoad, mediaSelection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:aggregateAssetDownloadTask:didLoadTimeRange:totalTimeRangesLoaded:timeRangeExpectedToLoad:forMediaSelection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="aggregateAssetDownloadTask" Type="AVFoundation.AVAggregateAssetDownloadTask" />
        <Parameter Name="timeRange" Type="CoreMedia.CMTimeRange" />
        <Parameter Name="loadedTimeRanges" Type="Foundation.NSValue[]" />
        <Parameter Name="timeRangeExpectedToLoad" Type="CoreMedia.CMTimeRange" />
        <Parameter Name="mediaSelection" Type="AVFoundation.AVMediaSelection" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="aggregateAssetDownloadTask">To be added.</param>
        <param name="timeRange">To be added.</param>
        <param name="loadedTimeRanges">To be added.</param>
        <param name="timeRangeExpectedToLoad">To be added.</param>
        <param name="mediaSelection">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidReceiveChallenge">
      <MemberSignature Language="C#" Value="public virtual void DidReceiveChallenge (Foundation.NSUrlSession session, Foundation.NSUrlSessionTask task, Foundation.NSUrlAuthenticationChallenge challenge, Action&lt;Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidReceiveChallenge(class Foundation.NSUrlSession session, class Foundation.NSUrlSessionTask task, class Foundation.NSUrlAuthenticationChallenge challenge, class System.Action`2&lt;valuetype Foundation.NSUrlSessionAuthChallengeDisposition, class Foundation.NSUrlCredential&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.DidReceiveChallenge(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlAuthenticationChallenge,System.Action{Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential})" />
      <MemberSignature Language="F#" Value="abstract member DidReceiveChallenge : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Foundation.NSUrlAuthenticationChallenge * Action&lt;Foundation.NSUrlSessionAuthChallengeDisposition, Foundation.NSUrlCredential&gt; -&gt; unit&#xA;override this.DidReceiveChallenge : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Foundation.NSUrlAuthenticationChallenge * Action&lt;Foundation.NSUrlSessionAuthChallengeDisposition, Foundation.NSUrlCredential&gt; -&gt; unit" Usage="aVAssetDownloadDelegate.DidReceiveChallenge (session, task, challenge, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:task:didReceiveChallenge:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
        <Parameter Name="challenge" Type="Foundation.NSUrlAuthenticationChallenge" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V2))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="task">To be added.</param>
        <param name="challenge">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Method that is called to obtain credentials when a challenge is received.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidResolveMediaSelection">
      <MemberSignature Language="C#" Value="public virtual void DidResolveMediaSelection (Foundation.NSUrlSession session, AVFoundation.AVAssetDownloadTask assetDownloadTask, AVFoundation.AVMediaSelection resolvedMediaSelection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidResolveMediaSelection(class Foundation.NSUrlSession session, class AVFoundation.AVAssetDownloadTask assetDownloadTask, class AVFoundation.AVMediaSelection resolvedMediaSelection) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.DidResolveMediaSelection(Foundation.NSUrlSession,AVFoundation.AVAssetDownloadTask,AVFoundation.AVMediaSelection)" />
      <MemberSignature Language="F#" Value="abstract member DidResolveMediaSelection : Foundation.NSUrlSession * AVFoundation.AVAssetDownloadTask * AVFoundation.AVMediaSelection -&gt; unit&#xA;override this.DidResolveMediaSelection : Foundation.NSUrlSession * AVFoundation.AVAssetDownloadTask * AVFoundation.AVMediaSelection -&gt; unit" Usage="aVAssetDownloadDelegate.DidResolveMediaSelection (session, assetDownloadTask, resolvedMediaSelection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:assetDownloadTask:didResolveMediaSelection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="assetDownloadTask" Type="AVFoundation.AVAssetDownloadTask" />
        <Parameter Name="resolvedMediaSelection" Type="AVFoundation.AVMediaSelection" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="assetDownloadTask">To be added.</param>
        <param name="resolvedMediaSelection">To be added.</param>
        <summary>Method that is called when the download media selection is completely resolved.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSendBodyData">
      <MemberSignature Language="C#" Value="public virtual void DidSendBodyData (Foundation.NSUrlSession session, Foundation.NSUrlSessionTask task, long bytesSent, long totalBytesSent, long totalBytesExpectedToSend);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSendBodyData(class Foundation.NSUrlSession session, class Foundation.NSUrlSessionTask task, int64 bytesSent, int64 totalBytesSent, int64 totalBytesExpectedToSend) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.DidSendBodyData(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Int64,System.Int64,System.Int64)" />
      <MemberSignature Language="F#" Value="abstract member DidSendBodyData : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * int64 * int64 * int64 -&gt; unit&#xA;override this.DidSendBodyData : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * int64 * int64 * int64 -&gt; unit" Usage="aVAssetDownloadDelegate.DidSendBodyData (session, task, bytesSent, totalBytesSent, totalBytesExpectedToSend)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
        <Parameter Name="bytesSent" Type="System.Int64" />
        <Parameter Name="totalBytesSent" Type="System.Int64" />
        <Parameter Name="totalBytesExpectedToSend" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="task">To be added.</param>
        <param name="bytesSent">To be added.</param>
        <param name="totalBytesSent">To be added.</param>
        <param name="totalBytesExpectedToSend">To be added.</param>
        <summary>Method that is called to communicate progress when receiving body data.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NeedNewBodyStream">
      <MemberSignature Language="C#" Value="public virtual void NeedNewBodyStream (Foundation.NSUrlSession session, Foundation.NSUrlSessionTask task, Action&lt;Foundation.NSInputStream&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NeedNewBodyStream(class Foundation.NSUrlSession session, class Foundation.NSUrlSessionTask task, class System.Action`1&lt;class Foundation.NSInputStream&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.NeedNewBodyStream(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,System.Action{Foundation.NSInputStream})" />
      <MemberSignature Language="F#" Value="abstract member NeedNewBodyStream : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Action&lt;Foundation.NSInputStream&gt; -&gt; unit&#xA;override this.NeedNewBodyStream : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Action&lt;Foundation.NSInputStream&gt; -&gt; unit" Usage="aVAssetDownloadDelegate.NeedNewBodyStream (session, task, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:task:needNewBodyStream:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSInputStream&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V4))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="task">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Method that is called to obtain a new request body stream.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TaskIsWaitingForConnectivity">
      <MemberSignature Language="C#" Value="public virtual void TaskIsWaitingForConnectivity (Foundation.NSUrlSession session, Foundation.NSUrlSessionTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TaskIsWaitingForConnectivity(class Foundation.NSUrlSession session, class Foundation.NSUrlSessionTask task) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.TaskIsWaitingForConnectivity(Foundation.NSUrlSession,Foundation.NSUrlSessionTask)" />
      <MemberSignature Language="F#" Value="abstract member TaskIsWaitingForConnectivity : Foundation.NSUrlSession * Foundation.NSUrlSessionTask -&gt; unit&#xA;override this.TaskIsWaitingForConnectivity : Foundation.NSUrlSession * Foundation.NSUrlSessionTask -&gt; unit" Usage="aVAssetDownloadDelegate.TaskIsWaitingForConnectivity (session, task)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:taskIsWaitingForConnectivity:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillBeginDelayedRequest">
      <MemberSignature Language="C#" Value="public virtual void WillBeginDelayedRequest (Foundation.NSUrlSession session, Foundation.NSUrlSessionTask task, Foundation.NSUrlRequest request, Action&lt;Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillBeginDelayedRequest(class Foundation.NSUrlSession session, class Foundation.NSUrlSessionTask task, class Foundation.NSUrlRequest request, class System.Action`2&lt;valuetype Foundation.NSUrlSessionDelayedRequestDisposition, class Foundation.NSUrlRequest&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.WillBeginDelayedRequest(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest})" />
      <MemberSignature Language="F#" Value="abstract member WillBeginDelayedRequest : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Foundation.NSUrlRequest * Action&lt;Foundation.NSUrlSessionDelayedRequestDisposition, Foundation.NSUrlRequest&gt; -&gt; unit&#xA;override this.WillBeginDelayedRequest : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Foundation.NSUrlRequest * Action&lt;Foundation.NSUrlSessionDelayedRequestDisposition, Foundation.NSUrlRequest&gt; -&gt; unit" Usage="aVAssetDownloadDelegate.WillBeginDelayedRequest (session, task, request, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:task:willBeginDelayedRequest:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
        <Parameter Name="request" Type="Foundation.NSUrlRequest" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V1))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="task">To be added.</param>
        <param name="request">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDownloadToUrl">
      <MemberSignature Language="C#" Value="public virtual void WillDownloadToUrl (Foundation.NSUrlSession session, AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, Foundation.NSUrl location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDownloadToUrl(class Foundation.NSUrlSession session, class AVFoundation.AVAggregateAssetDownloadTask aggregateAssetDownloadTask, class Foundation.NSUrl location) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.WillDownloadToUrl(Foundation.NSUrlSession,AVFoundation.AVAggregateAssetDownloadTask,Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member WillDownloadToUrl : Foundation.NSUrlSession * AVFoundation.AVAggregateAssetDownloadTask * Foundation.NSUrl -&gt; unit&#xA;override this.WillDownloadToUrl : Foundation.NSUrlSession * AVFoundation.AVAggregateAssetDownloadTask * Foundation.NSUrl -&gt; unit" Usage="aVAssetDownloadDelegate.WillDownloadToUrl (session, aggregateAssetDownloadTask, location)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:aggregateAssetDownloadTask:willDownloadToURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="aggregateAssetDownloadTask" Type="AVFoundation.AVAggregateAssetDownloadTask" />
        <Parameter Name="location" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="aggregateAssetDownloadTask">To be added.</param>
        <param name="location">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPerformHttpRedirection">
      <MemberSignature Language="C#" Value="public virtual void WillPerformHttpRedirection (Foundation.NSUrlSession session, Foundation.NSUrlSessionTask task, Foundation.NSHttpUrlResponse response, Foundation.NSUrlRequest newRequest, Action&lt;Foundation.NSUrlRequest&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillPerformHttpRedirection(class Foundation.NSUrlSession session, class Foundation.NSUrlSessionTask task, class Foundation.NSHttpUrlResponse response, class Foundation.NSUrlRequest newRequest, class System.Action`1&lt;class Foundation.NSUrlRequest&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVAssetDownloadDelegate.WillPerformHttpRedirection(Foundation.NSUrlSession,Foundation.NSUrlSessionTask,Foundation.NSHttpUrlResponse,Foundation.NSUrlRequest,System.Action{Foundation.NSUrlRequest})" />
      <MemberSignature Language="F#" Value="abstract member WillPerformHttpRedirection : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Foundation.NSHttpUrlResponse * Foundation.NSUrlRequest * Action&lt;Foundation.NSUrlRequest&gt; -&gt; unit&#xA;override this.WillPerformHttpRedirection : Foundation.NSUrlSession * Foundation.NSUrlSessionTask * Foundation.NSHttpUrlResponse * Foundation.NSUrlRequest * Action&lt;Foundation.NSUrlRequest&gt; -&gt; unit" Usage="aVAssetDownloadDelegate.WillPerformHttpRedirection (session, task, response, newRequest, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="session" Type="Foundation.NSUrlSession" />
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
        <Parameter Name="response" Type="Foundation.NSHttpUrlResponse" />
        <Parameter Name="newRequest" Type="Foundation.NSUrlRequest" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSUrlRequest&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V5))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="session">To be added.</param>
        <param name="task">To be added.</param>
        <param name="response">To be added.</param>
        <param name="newRequest">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>Method that is called when the server requests a redirect.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
