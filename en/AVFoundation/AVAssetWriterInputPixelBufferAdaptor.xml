<Type Name="AVAssetWriterInputPixelBufferAdaptor" FullName="AVFoundation.AVAssetWriterInputPixelBufferAdaptor">
  <TypeSignature Language="C#" Value="public class AVAssetWriterInputPixelBufferAdaptor : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AVAssetWriterInputPixelBufferAdaptor extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("AVAssetWriterInputPixelBufferAdaptor", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 4, 1, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Allows the application developer to append video samples of type <see cref="T:CoreVideo.CVPixelBuffer" /> to a <see cref="T:AVFoundation.AVAssetWriterInput" /> object.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAssetWriterInputPixelBufferAdaptor_Class/index.html">Apple documentation for <c>AVAssetWriterInputPixelBufferAdaptor</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVAssetWriterInputPixelBufferAdaptor (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVAssetWriterInputPixelBufferAdaptor (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVAssetWriterInputPixelBufferAdaptor (AVFoundation.AVAssetWriterInput input, CoreVideo.CVPixelBufferAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class AVFoundation.AVAssetWriterInput input, class CoreVideo.CVPixelBufferAttributes attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="input" Type="AVFoundation.AVAssetWriterInput" />
        <Parameter Name="attributes" Type="CoreVideo.CVPixelBufferAttributes" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVAssetWriterInputPixelBufferAdaptor (AVFoundation.AVAssetWriterInput input, Foundation.NSDictionary sourcePixelBufferAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class AVFoundation.AVAssetWriterInput input, class Foundation.NSDictionary sourcePixelBufferAttributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithAssetWriterInput:sourcePixelBufferAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="input" Type="AVFoundation.AVAssetWriterInput" />
        <Parameter Name="sourcePixelBufferAttributes" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="sourcePixelBufferAttributes">
          <para>The dictionary should contain configuration
	  information using keys from the <see cref="T:CoreVideo.CVPixelBuffer" /> class.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppendPixelBufferWithPresentationTime">
      <MemberSignature Language="C#" Value="public virtual bool AppendPixelBufferWithPresentationTime (CoreVideo.CVPixelBuffer pixelBuffer, CoreMedia.CMTime presentationTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AppendPixelBufferWithPresentationTime(class CoreVideo.CVPixelBuffer pixelBuffer, valuetype CoreMedia.CMTime presentationTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("appendPixelBuffer:withPresentationTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixelBuffer" Type="CoreVideo.CVPixelBuffer" />
        <Parameter Name="presentationTime" Type="CoreMedia.CMTime" />
      </Parameters>
      <Docs>
        <param name="pixelBuffer">To be added.</param>
        <param name="presentationTime">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssetWriterInput">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVAssetWriterInput AssetWriterInput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AVFoundation.AVAssetWriterInput AssetWriterInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("assetWriterInput")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVAssetWriterInput</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:AVFoundation.AVAssetWriterInput" /> to which the adaptor appends pixel buffers.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public CoreVideo.CVPixelBufferAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreVideo.CVPixelBufferAttributes Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreVideo.CVPixelBufferAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:CoreVideo.CVPixelBufferAttributes" /> of the pixel buffers in the <see cref="P:AVFoundation.AVAssetWriterInputPixelBufferAdaptor.PixelBufferPool" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static AVFoundation.AVAssetWriterInputPixelBufferAdaptor Create (AVFoundation.AVAssetWriterInput input, CoreVideo.CVPixelBufferAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AVFoundation.AVAssetWriterInputPixelBufferAdaptor Create(class AVFoundation.AVAssetWriterInput input, class CoreVideo.CVPixelBufferAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AVFoundation.AVAssetWriterInputPixelBufferAdaptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="AVFoundation.AVAssetWriterInput" />
        <Parameter Name="attributes" Type="CoreVideo.CVPixelBufferAttributes" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>Factory method to create an <see cref="T:AVFoundation.AVAssetWriterInputPixelBufferAdaptor" /> with the specified s<paramref name="input" /> and <paramref name="attributes" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromInput">
      <MemberSignature Language="C#" Value="public static AVFoundation.AVAssetWriterInputPixelBufferAdaptor FromInput (AVFoundation.AVAssetWriterInput input, Foundation.NSDictionary sourcePixelBufferAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AVFoundation.AVAssetWriterInputPixelBufferAdaptor FromInput(class AVFoundation.AVAssetWriterInput input, class Foundation.NSDictionary sourcePixelBufferAttributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use 'Create' method.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Export("assetWriterInputPixelBufferAdaptorWithAssetWriterInput:sourcePixelBufferAttributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVAssetWriterInputPixelBufferAdaptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="AVFoundation.AVAssetWriterInput" />
        <Parameter Name="sourcePixelBufferAttributes" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <param name="sourcePixelBufferAttributes">
          <para>The dictionary should contain configuration
	  information using keys from the <see cref="T:CoreVideo.CVPixelBuffer" /> class.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Factory method to create an <see cref="T:AVFoundation.AVAssetWriterInputPixelBufferAdaptor" /> with the specified <paramref name="input" /> and <paramref name="sourcePixelBufferAttributes" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelBufferPool">
      <MemberSignature Language="C#" Value="public virtual CoreVideo.CVPixelBufferPool PixelBufferPool { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreVideo.CVPixelBufferPool PixelBufferPool" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("pixelBufferPool")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreVideo.CVPixelBufferPool</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets, if not <see langword="null" />, a <see cref="T:CoreVideo.CVPixelBufferPool" /> that vends pixel puffers and efficiently reuses resources.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SourcePixelBufferAttributes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary SourcePixelBufferAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary SourcePixelBufferAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("sourcePixelBufferAttributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A dictionary whose values describe the attributes of buffers vended by <see cref="P:AVFoundation.AVAssetWriterInputPixelBufferAdaptor.PixelBufferPool" />.</summary>
        <value>
          <para>The dictionary contains configuration
	  information using keys from the <see cref="T:CoreVideo.CVPixelBuffer" /> class.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
