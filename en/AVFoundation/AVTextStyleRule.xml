<Type Name="AVTextStyleRule" FullName="AVFoundation.AVTextStyleRule">
  <TypeSignature Language="C#" Value="public class AVTextStyleRule : Foundation.NSObject, Foundation.INSCopying, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AVTextStyleRule extends Foundation.NSObject implements class Foundation.INSCopying, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:AVFoundation.AVTextStyleRule" />
  <TypeSignature Language="F#" Value="type AVTextStyleRule = class&#xA;    inherit NSObject&#xA;    interface INSCopying&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("AVTextStyleRule", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class that applies text styling to media item elements such as subtitles, closed captions, etc.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVTextStyleRule_Class/index.html">Apple documentation for <c>AVTextStyleRule</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVTextStyleRule ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("iOS9 does not allow creating an empty instance")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVTextStyleRule (CoreMedia.CMTextMarkupAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CoreMedia.CMTextMarkupAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.#ctor(CoreMedia.CMTextMarkupAttributes)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVTextStyleRule : CoreMedia.CMTextMarkupAttributes -&gt; AVFoundation.AVTextStyleRule" Usage="new AVFoundation.AVTextStyleRule attributes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attributes" Type="CoreMedia.CMTextMarkupAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVTextStyleRule (Foundation.NSDictionary textMarkupAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSDictionary textMarkupAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.#ctor(Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVTextStyleRule : Foundation.NSDictionary -&gt; AVFoundation.AVTextStyleRule" Usage="new AVFoundation.AVTextStyleRule textMarkupAttributes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithTextMarkupAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="textMarkupAttributes" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="textMarkupAttributes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVTextStyleRule (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVTextStyleRule : Foundation.NSObjectFlag -&gt; AVFoundation.AVTextStyleRule" Usage="new AVFoundation.AVTextStyleRule t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal AVTextStyleRule (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVTextStyleRule : nativeint -&gt; AVFoundation.AVTextStyleRule" Usage="new AVFoundation.AVTextStyleRule handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVTextStyleRule (CoreMedia.CMTextMarkupAttributes attributes, string textSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CoreMedia.CMTextMarkupAttributes attributes, string textSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.#ctor(CoreMedia.CMTextMarkupAttributes,System.String)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVTextStyleRule : CoreMedia.CMTextMarkupAttributes * string -&gt; AVFoundation.AVTextStyleRule" Usage="new AVFoundation.AVTextStyleRule (attributes, textSelector)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attributes" Type="CoreMedia.CMTextMarkupAttributes" />
        <Parameter Name="textSelector" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="attributes">To be added.</param>
        <param name="textSelector">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVTextStyleRule (Foundation.NSDictionary textMarkupAttributes, string textSelector);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSDictionary textMarkupAttributes, string textSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.#ctor(Foundation.NSDictionary,System.String)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVTextStyleRule : Foundation.NSDictionary * string -&gt; AVFoundation.AVTextStyleRule" Usage="new AVFoundation.AVTextStyleRule (textMarkupAttributes, textSelector)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithTextMarkupAttributes:textSelector:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="textMarkupAttributes" Type="Foundation.NSDictionary" />
        <Parameter Name="textSelector" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textMarkupAttributes">To be added.</param>
        <param name="textSelector">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVTextStyleRule.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="AVFoundation.AVTextStyleRule.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="aVTextStyleRule.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPropertyList">
      <MemberSignature Language="C#" Value="public static AVFoundation.AVTextStyleRule[] FromPropertyList (Foundation.NSObject plist);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AVFoundation.AVTextStyleRule[] FromPropertyList(class Foundation.NSObject plist) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.FromPropertyList(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="static member FromPropertyList : Foundation.NSObject -&gt; AVFoundation.AVTextStyleRule[]" Usage="AVFoundation.AVTextStyleRule.FromPropertyList plist" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textStyleRulesFromPropertyList:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVTextStyleRule[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="plist" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="plist">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTextMarkupAttributes">
      <MemberSignature Language="C#" Value="public static AVFoundation.AVTextStyleRule FromTextMarkupAttributes (CoreMedia.CMTextMarkupAttributes textMarkupAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AVFoundation.AVTextStyleRule FromTextMarkupAttributes(class CoreMedia.CMTextMarkupAttributes textMarkupAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.FromTextMarkupAttributes(CoreMedia.CMTextMarkupAttributes)" />
      <MemberSignature Language="F#" Value="static member FromTextMarkupAttributes : CoreMedia.CMTextMarkupAttributes -&gt; AVFoundation.AVTextStyleRule" Usage="AVFoundation.AVTextStyleRule.FromTextMarkupAttributes textMarkupAttributes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVTextStyleRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textMarkupAttributes" Type="CoreMedia.CMTextMarkupAttributes" />
      </Parameters>
      <Docs>
        <param name="textMarkupAttributes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTextMarkupAttributes">
      <MemberSignature Language="C#" Value="public static AVFoundation.AVTextStyleRule FromTextMarkupAttributes (CoreMedia.CMTextMarkupAttributes textMarkupAttributes, string textSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AVFoundation.AVTextStyleRule FromTextMarkupAttributes(class CoreMedia.CMTextMarkupAttributes textMarkupAttributes, string textSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.FromTextMarkupAttributes(CoreMedia.CMTextMarkupAttributes,System.String)" />
      <MemberSignature Language="F#" Value="static member FromTextMarkupAttributes : CoreMedia.CMTextMarkupAttributes * string -&gt; AVFoundation.AVTextStyleRule" Usage="AVFoundation.AVTextStyleRule.FromTextMarkupAttributes (textMarkupAttributes, textSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVTextStyleRule</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textMarkupAttributes" Type="CoreMedia.CMTextMarkupAttributes" />
        <Parameter Name="textSelector" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textMarkupAttributes">To be added.</param>
        <param name="textSelector">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMarkupAttributes">
      <MemberSignature Language="C#" Value="public CoreMedia.CMTextMarkupAttributes TextMarkupAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreMedia.CMTextMarkupAttributes TextMarkupAttributes" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVTextStyleRule.TextMarkupAttributes" />
      <MemberSignature Language="F#" Value="member this.TextMarkupAttributes : CoreMedia.CMTextMarkupAttributes" Usage="AVFoundation.AVTextStyleRule.TextMarkupAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMedia.CMTextMarkupAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:CoreMedia.CMTextMarkupAttributes" /> that apply to the text.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextSelector">
      <MemberSignature Language="C#" Value="public virtual string TextSelector { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string TextSelector" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVTextStyleRule.TextSelector" />
      <MemberSignature Language="F#" Value="member this.TextSelector : string" Usage="AVFoundation.AVTextStyleRule.TextSelector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("textSelector")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToPropertyList">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ToPropertyList (AVFoundation.AVTextStyleRule[] textStyleRules);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ToPropertyList(class AVFoundation.AVTextStyleRule[] textStyleRules) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVTextStyleRule.ToPropertyList(AVFoundation.AVTextStyleRule[])" />
      <MemberSignature Language="F#" Value="static member ToPropertyList : AVFoundation.AVTextStyleRule[] -&gt; Foundation.NSObject" Usage="AVFoundation.AVTextStyleRule.ToPropertyList textStyleRules" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("propertyListForTextStyleRules:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textStyleRules" Type="AVFoundation.AVTextStyleRule[]" />
      </Parameters>
      <Docs>
        <param name="textStyleRules">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakTextMarkupAttributes">
      <MemberSignature Language="C#" Value="protected virtual Foundation.NSDictionary WeakTextMarkupAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary WeakTextMarkupAttributes" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVTextStyleRule.WeakTextMarkupAttributes" />
      <MemberSignature Language="F#" Value="member this.WeakTextMarkupAttributes : Foundation.NSDictionary" Usage="AVFoundation.AVTextStyleRule.WeakTextMarkupAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("textMarkupAttributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
