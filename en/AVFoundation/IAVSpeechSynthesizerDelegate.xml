<Type Name="IAVSpeechSynthesizerDelegate" FullName="AVFoundation.IAVSpeechSynthesizerDelegate">
  <TypeSignature Language="C#" Value="public interface IAVSpeechSynthesizerDelegate : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAVSpeechSynthesizerDelegate implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:AVFoundation.IAVSpeechSynthesizerDelegate" />
  <TypeSignature Language="F#" Value="type IAVSpeechSynthesizerDelegate = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="AVSpeechSynthesizerDelegate", WrapperType=typeof(AVFoundation.AVSpeechSynthesizerDelegateWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidStartSpeechUtterance", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVSpeechSynthesizer), typeof(AVFoundation.AVSpeechUtterance) }, Selector="speechSynthesizer:didStartSpeechUtterance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidFinishSpeechUtterance", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVSpeechSynthesizer), typeof(AVFoundation.AVSpeechUtterance) }, Selector="speechSynthesizer:didFinishSpeechUtterance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidPauseSpeechUtterance", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVSpeechSynthesizer), typeof(AVFoundation.AVSpeechUtterance) }, Selector="speechSynthesizer:didPauseSpeechUtterance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidContinueSpeechUtterance", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVSpeechSynthesizer), typeof(AVFoundation.AVSpeechUtterance) }, Selector="speechSynthesizer:didContinueSpeechUtterance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidCancelSpeechUtterance", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVSpeechSynthesizer), typeof(AVFoundation.AVSpeechUtterance) }, Selector="speechSynthesizer:didCancelSpeechUtterance:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillSpeakRangeOfSpeechString", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVSpeechSynthesizer), typeof(Foundation.NSRange), typeof(AVFoundation.AVSpeechUtterance) }, Selector="speechSynthesizer:willSpeakRangeOfSpeechString:utterance:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:AVFoundation.AVSpeechSynthesizerDelegate" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:AVFoundation.AVSpeechSynthesizerDelegate" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:AVFoundation.AVSpeechSynthesizerDelegate" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:AVFoundation.AVSpeechSynthesizerDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members />
</Type>
