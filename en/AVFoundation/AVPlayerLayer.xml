<Type Name="AVPlayerLayer" FullName="AVFoundation.AVPlayerLayer">
  <TypeSignature Language="C#" Value="public class AVPlayerLayer : CoreAnimation.CALayer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AVPlayerLayer extends CoreAnimation.CALayer" />
  <TypeSignature Language="DocId" Value="T:AVFoundation.AVPlayerLayer" />
  <TypeSignature Language="F#" Value="type AVPlayerLayer = class&#xA;    inherit CALayer" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreAnimation.CALayer</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("AVPlayerLayer", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A type of <see cref="T:CoreAnimation.CALayer" /> on which a <see cref="T:AVFoundation.AVPlayer" /> renders its output.</summary>
    <remarks>
      <para>
        <see cref="T:AVFoundation.AVPlayerLayer" /> objects may be used for AV playback in a variety of situations where a heavier-weight component such as <see cref="T:UIKit.UIWebView" /> would be unnecessary or unavailable (such as on tvOS).</para>
      <para>The following example shows how a <see cref="T:AVFoundation.AVPlayerLayer" /> can be used to stream a Web video:</para>
      <example>
        <code lang="C#"><![CDATA[
var src = NSUrl.FromString("https://somevideo");
var asset = AVAsset.FromUrl (src);
var playerItem = new AVPlayerItem (asset);
var player = new AVPlayer (playerItem);
var playerLayer = AVPlayerLayer.FromPlayer (player);
var frame = new CGRect (0, 0, this.View.Frame.Width, this.View.Frame.Height);
playerLayer.Frame = frame;
this.View.Layer.AddSublayer (playerLayer);
player.Play ();
    ]]></code>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVPlayerLayer_Class/index.html">Apple documentation for <c>AVPlayerLayer</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVPlayerLayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVPlayerLayer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVPlayerLayer (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVPlayerLayer.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVPlayerLayer : Foundation.NSCoder -&gt; AVFoundation.AVPlayerLayer" Usage="new AVFoundation.AVPlayerLayer coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVPlayerLayer (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVPlayerLayer.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVPlayerLayer : Foundation.NSObjectFlag -&gt; AVFoundation.AVPlayerLayer" Usage="new AVFoundation.AVPlayerLayer t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal AVPlayerLayer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVPlayerLayer.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new AVFoundation.AVPlayerLayer : nativeint -&gt; AVFoundation.AVPlayerLayer" Usage="new AVFoundation.AVPlayerLayer handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="AVFoundation.AVPlayerLayer.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPlayer">
      <MemberSignature Language="C#" Value="public static AVFoundation.AVPlayerLayer FromPlayer (AVFoundation.AVPlayer player);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AVFoundation.AVPlayerLayer FromPlayer(class AVFoundation.AVPlayer player) cil managed" />
      <MemberSignature Language="DocId" Value="M:AVFoundation.AVPlayerLayer.FromPlayer(AVFoundation.AVPlayer)" />
      <MemberSignature Language="F#" Value="static member FromPlayer : AVFoundation.AVPlayer -&gt; AVFoundation.AVPlayerLayer" Usage="AVFoundation.AVPlayerLayer.FromPlayer player" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("playerLayerWithPlayer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVPlayerLayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="player" Type="AVFoundation.AVPlayer" />
      </Parameters>
      <Docs>
        <param name="player">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Static factory method to create a <see cref="T:AVFoundation.AVPlayerLayer" /> for the specified <paramref name="player" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityResize">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityResize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityResize" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.GravityResize" />
      <MemberSignature Language="F#" Value="member this.GravityResize : Foundation.NSString" Usage="AVFoundation.AVPlayerLayer.GravityResize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("AVLayerVideoGravityResize", "AVFoundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant AVLayerVideoGravityResize</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityResizeAspect">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityResizeAspect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityResizeAspect" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.GravityResizeAspect" />
      <MemberSignature Language="F#" Value="member this.GravityResizeAspect : Foundation.NSString" Usage="AVFoundation.AVPlayerLayer.GravityResizeAspect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("AVLayerVideoGravityResizeAspect", "AVFoundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant AVLayerVideoGravityResizeAspect</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GravityResizeAspectFill">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GravityResizeAspectFill { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GravityResizeAspectFill" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.GravityResizeAspectFill" />
      <MemberSignature Language="F#" Value="member this.GravityResizeAspectFill : Foundation.NSString" Usage="AVFoundation.AVPlayerLayer.GravityResizeAspectFill" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("AVLayerVideoGravityResizeAspectFill", "AVFoundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant AVLayerVideoGravityResizeAspectFill</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PixelBufferAttributes">
      <MemberSignature Language="C#" Value="public CoreVideo.CVPixelBufferAttributes PixelBufferAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreVideo.CVPixelBufferAttributes PixelBufferAttributes" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.PixelBufferAttributes" />
      <MemberSignature Language="F#" Value="member this.PixelBufferAttributes : CoreVideo.CVPixelBufferAttributes with get, set" Usage="AVFoundation.AVPlayerLayer.PixelBufferAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreVideo.CVPixelBufferAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the attributes of the client visual buffer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Player">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVPlayer Player { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AVFoundation.AVPlayer Player" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.Player" />
      <MemberSignature Language="F#" Value="member this.Player : AVFoundation.AVPlayer with get, set" Usage="AVFoundation.AVPlayerLayer.Player" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("player", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPlayer:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVPlayer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the player whose output the player is displaying.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>The <see cref="T:AVFoundation.AVPlayer" /> whose content this layer displays.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadyForDisplay">
      <MemberSignature Language="C#" Value="public virtual bool ReadyForDisplay { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadyForDisplay" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.ReadyForDisplay" />
      <MemberSignature Language="F#" Value="member this.ReadyForDisplay : bool" Usage="AVFoundation.AVPlayerLayer.ReadyForDisplay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isReadyForDisplay")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the first frame is ready for display.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoGravity">
      <MemberSignature Language="C#" Value="public AVFoundation.AVLayerVideoGravity VideoGravity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AVFoundation.AVLayerVideoGravity VideoGravity" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.VideoGravity" />
      <MemberSignature Language="F#" Value="member this.VideoGravity : AVFoundation.AVLayerVideoGravity with get, set" Usage="AVFoundation.AVPlayerLayer.VideoGravity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AVFoundation.AVLayerVideoGravity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls how the visual content is displayed within the bounds of the layer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect VideoRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect VideoRect" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.VideoRect" />
      <MemberSignature Language="F#" Value="member this.VideoRect : CoreGraphics.CGRect" Usage="AVFoundation.AVPlayerLayer.VideoRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("videoRect")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the video image bounds.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakPixelBufferAttributes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary WeakPixelBufferAttributes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary WeakPixelBufferAttributes" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.WeakPixelBufferAttributes" />
      <MemberSignature Language="F#" Value="member this.WeakPixelBufferAttributes : Foundation.NSDictionary with get, set" Usage="AVFoundation.AVPlayerLayer.WeakPixelBufferAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("pixelBufferAttributes", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPixelBufferAttributes:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a weak reference to the pixel buffer attributes.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakVideoGravity">
      <MemberSignature Language="C#" Value="protected virtual Foundation.NSString WeakVideoGravity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSString WeakVideoGravity" />
      <MemberSignature Language="DocId" Value="P:AVFoundation.AVPlayerLayer.WeakVideoGravity" />
      <MemberSignature Language="F#" Value="member this.WeakVideoGravity : Foundation.NSString with get, set" Usage="AVFoundation.AVPlayerLayer.WeakVideoGravity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("videoGravity", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setVideoGravity:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a weak reference to the video gravity.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
