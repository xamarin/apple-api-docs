<Type Name="AVDepthData" FullName="AVFoundation.AVDepthData">
  <TypeSignature Language="C#" Value="public class AVDepthData : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AVDepthData extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("AVDepthData", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Encapsulates a map of captured depth data for each pixel in an image.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVDepthData (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVDepthData (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyExifOrientation">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVDepthData ApplyExifOrientation (ImageIO.CGImagePropertyOrientation exifOrientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class AVFoundation.AVDepthData ApplyExifOrientation(valuetype ImageIO.CGImagePropertyOrientation exifOrientation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("depthDataByApplyingExifOrientation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVDepthData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exifOrientation" Type="ImageIO.CGImagePropertyOrientation" />
      </Parameters>
      <Docs>
        <param name="exifOrientation">The orientation to apply.</param>
        <summary>Returns a new mirrored or rotated set of depth data.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AvailableDepthDataTypes">
      <MemberSignature Language="C#" Value="public CoreVideo.CVPixelFormatType[] AvailableDepthDataTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreVideo.CVPixelFormatType[] AvailableDepthDataTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreVideo.CVPixelFormatType[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns an array of depth data types that are suitable for use with <see cref="M:AVFoundation.AVDepthData.Create(CoreVideo.CVPixelFormatType)" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CameraCalibrationData">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVCameraCalibrationData CameraCalibrationData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AVFoundation.AVCameraCalibrationData CameraCalibrationData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("cameraCalibrationData")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVCameraCalibrationData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the camera calibration data, if present, that describes the variation of the camera from a pinhole camera.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToDepthDataType">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVDepthData ConvertToDepthDataType (CoreVideo.CVPixelFormatType depthDataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class AVFoundation.AVDepthData ConvertToDepthDataType(valuetype CoreVideo.CVPixelFormatType depthDataType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("depthDataByConvertingToDepthDataType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVDepthData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="depthDataType" Type="CoreVideo.CVPixelFormatType" />
      </Parameters>
      <Docs>
        <param name="depthDataType">The depth data type to convert to.</param>
        <summary>Returns a new depth data object with depth data of the specified type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static AVFoundation.AVDepthData Create (Foundation.NSDictionary imageSourceAuxDataInfoDictionary, out Foundation.NSError outError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AVFoundation.AVDepthData Create(class Foundation.NSDictionary imageSourceAuxDataInfoDictionary, class Foundation.NSError outError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("depthDataFromDictionaryRepresentation:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVDepthData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageSourceAuxDataInfoDictionary" Type="Foundation.NSDictionary" />
        <Parameter Name="outError" Type="Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="imageSourceAuxDataInfoDictionary">To be added.</param>
        <param name="outError">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates and returns a new AVDepthData object with the specified values.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static AVFoundation.AVDepthData Create (ImageIO.CGImageAuxiliaryDataInfo dataInfo, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AVFoundation.AVDepthData Create(class ImageIO.CGImageAuxiliaryDataInfo dataInfo, class Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AVFoundation.AVDepthData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataInfo" Type="ImageIO.CGImageAuxiliaryDataInfo" />
        <Parameter Name="error" Type="Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dataInfo">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Creates and returns a new AVDepthData object with the specified values.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthDataAccuracy">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVDepthDataAccuracy DepthDataAccuracy { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AVFoundation.AVDepthDataAccuracy DepthDataAccuracy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("depthDataAccuracy")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVDepthDataAccuracy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that tells whether the depth data is accurate relative to itself, or relative to the real world.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthDataMap">
      <MemberSignature Language="C#" Value="public virtual CoreVideo.CVPixelBuffer DepthDataMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreVideo.CVPixelBuffer DepthDataMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("depthDataMap")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreVideo.CVPixelBuffer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the array of depth data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthDataQuality">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVDepthDataQuality DepthDataQuality { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AVFoundation.AVDepthDataQuality DepthDataQuality" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("depthDataQuality")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVDepthDataQuality</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DepthDataType">
      <MemberSignature Language="C#" Value="public virtual CoreVideo.CVPixelFormatType DepthDataType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreVideo.CVPixelFormatType DepthDataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("depthDataType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreVideo.CVPixelFormatType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the pixel format type of the depth data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDictionaryRepresentation">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary GetDictionaryRepresentation (out string outAuxDataType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDictionary GetDictionaryRepresentation(string outAuxDataType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dictionaryRepresentationForAuxiliaryDataType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outAuxDataType" Type="System.String&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="outAuxDataType">The output data type.May be <see langword="null" />.</param>
        <summary>Returns a dictionary of depth data, suitable for writing to an image.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDepthDataFiltered">
      <MemberSignature Language="C#" Value="public virtual bool IsDepthDataFiltered { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDepthDataFiltered" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isDepthDataFiltered")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the data is smoothed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceDepthDataMap">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVDepthData ReplaceDepthDataMap (CoreVideo.CVPixelBuffer pixelBuffer, out Foundation.NSError outError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class AVFoundation.AVDepthData ReplaceDepthDataMap(class CoreVideo.CVPixelBuffer pixelBuffer, class Foundation.NSError outError) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("depthDataByReplacingDepthDataMapWithPixelBuffer:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVDepthData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixelBuffer" Type="CoreVideo.CVPixelBuffer" />
        <Parameter Name="outError" Type="Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pixelBuffer">The new depth data.</param>
        <param name="outError">The error that occurred, if present. May be <see langword="null" />.</param>
        <summary>Returns a new depth data map with the data in <paramref name="pixelBuffer" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakAvailableDepthDataTypes">
      <MemberSignature Language="C#" Value="protected virtual Foundation.NSNumber[] WeakAvailableDepthDataTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSNumber[] WeakAvailableDepthDataTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("availableDepthDataTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a weak reference to the available depth data types.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
