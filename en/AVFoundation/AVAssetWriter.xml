<Type Name="AVAssetWriter" FullName="AVFoundation.AVAssetWriter">
  <TypeSignature Language="C#" Value="public class AVAssetWriter : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AVAssetWriter extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("AVAssetWriter", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 4, 1, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An object that writes media data to an audiovisual container file.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/AVFoundation/Reference/AVAssetWriter_Class/index.html">Apple documentation for <c>AVAssetWriter</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVAssetWriter (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected AVAssetWriter (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVAssetWriter (Foundation.NSUrl outputUrl, string outputFileType, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSUrl outputUrl, string outputFileType, class Foundation.NSError error) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithURL:fileType:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="outputUrl" Type="Foundation.NSUrl" />
        <Parameter Name="outputFileType" Type="System.String" />
        <Parameter Name="error" Type="Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="outputUrl">To be added.</param>
        <param name="outputFileType">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Creates a new <see cref="T:AVFoundation.AVAssetWriter" /> with the specified values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInput">
      <MemberSignature Language="C#" Value="public virtual void AddInput (AVFoundation.AVAssetWriterInput input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddInput(class AVFoundation.AVAssetWriterInput input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addInput:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="AVFoundation.AVAssetWriterInput" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>Adds the <see cref="T:AVFoundation.AVAssetWriterInput" /> to <see cref="P:AVFoundation.AVAssetWriter.Inputs" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddInputGroup">
      <MemberSignature Language="C#" Value="public virtual void AddInputGroup (AVFoundation.AVAssetWriterInputGroup inputGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddInputGroup(class AVFoundation.AVAssetWriterInputGroup inputGroup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addInputGroup:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputGroup" Type="AVFoundation.AVAssetWriterInputGroup" />
      </Parameters>
      <Docs>
        <param name="inputGroup">To be added.</param>
        <summary>Adds <paramref name="inputGroup" /> to <see cref="P:AVFoundation.AVAssetWriter.InputGroups" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AvailableMediaTypes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSString[] AvailableMediaTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSString[] AvailableMediaTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("availableMediaTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains the media types for which the developer can add inputs.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddInput">
      <MemberSignature Language="C#" Value="public virtual bool CanAddInput (AVFoundation.AVAssetWriterInput input);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAddInput(class AVFoundation.AVAssetWriterInput input) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("canAddInput:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="AVFoundation.AVAssetWriterInput" />
      </Parameters>
      <Docs>
        <param name="input">To be added.</param>
        <summary>Whether the <paramref name="input" /> can be added to the <see cref="T:AVFoundation.AVAssetWriter" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAddInputGroup">
      <MemberSignature Language="C#" Value="public virtual bool CanAddInputGroup (AVFoundation.AVAssetWriterInputGroup inputGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanAddInputGroup(class AVFoundation.AVAssetWriterInputGroup inputGroup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("canAddInputGroup:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputGroup" Type="AVFoundation.AVAssetWriterInputGroup" />
      </Parameters>
      <Docs>
        <param name="inputGroup">To be added.</param>
        <summary>Whether the <paramref name="inputGroup" /> can be added to the <see cref="T:AVFoundation.AVAssetWriter" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanApplyOutputSettings">
      <MemberSignature Language="C#" Value="public bool CanApplyOutputSettings (AVFoundation.AudioSettings outputSettings, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanApplyOutputSettings(class AVFoundation.AudioSettings outputSettings, string mediaType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputSettings" Type="AVFoundation.AudioSettings" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputSettings">To be added.</param>
        <param name="mediaType">To be added.</param>
        <summary>Whether this <see cref="T:AVFoundation.AVAssetWriter" /> supports the <paramref name="outputSettings" /> for the <paramref name="mediaType" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanApplyOutputSettings">
      <MemberSignature Language="C#" Value="public bool CanApplyOutputSettings (AVFoundation.AVVideoSettingsCompressed outputSettings, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool CanApplyOutputSettings(class AVFoundation.AVVideoSettingsCompressed outputSettings, string mediaType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputSettings" Type="AVFoundation.AVVideoSettingsCompressed" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputSettings">To be added.</param>
        <param name="mediaType">To be added.</param>
        <summary>Whether this <see cref="T:AVFoundation.AVAssetWriter" /> supports the <paramref name="outputSettings" /> for the <paramref name="mediaType" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanApplyOutputSettings">
      <MemberSignature Language="C#" Value="public virtual bool CanApplyOutputSettings (Foundation.NSDictionary outputSettings, string mediaType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanApplyOutputSettings(class Foundation.NSDictionary outputSettings, string mediaType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("canApplyOutputSettings:forMediaType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputSettings" Type="Foundation.NSDictionary" />
        <Parameter Name="mediaType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="outputSettings">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="mediaType">To be added.</param>
        <summary>Whether this <see cref="T:AVFoundation.AVAssetWriter" /> supports the <paramref name="outputSettings" /> for the <paramref name="mediaType" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelWriting">
      <MemberSignature Language="C#" Value="public virtual void CancelWriting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelWriting() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("cancelWriting")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously cancels writing.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DirectoryForTemporaryFiles">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl DirectoryForTemporaryFiles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl DirectoryForTemporaryFiles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("directoryForTemporaryFiles", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDirectoryForTemporaryFiles:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the directory where temporary files that are generated while writing an asset will be stored.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndSessionAtSourceTime">
      <MemberSignature Language="C#" Value="public virtual void EndSessionAtSourceTime (CoreMedia.CMTime endTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndSessionAtSourceTime(valuetype CoreMedia.CMTime endTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("endSessionAtSourceTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endTime" Type="CoreMedia.CMTime" />
      </Parameters>
      <Docs>
        <param name="endTime">To be added.</param>
        <summary>Stops writing samples at the specified time.</summary>
        <remarks>
          <para>This method allows the application developer to end the writing session before the end of the last sample.</para>
          <para>Application developers do not need to call this method if they are satisfied by the behavior of <see cref="M:AVFoundation.AVAssetWriter.FinishWriting" />, which sets the session's end time to the ending timestamp of the final sample.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSError Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSError Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("error")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The cause of the error state of the <see cref="T:AVFoundation.AVAssetWriter" />, if any.</summary>
        <value>This value may be <see langword="null" />.<para tool="nullallowed">This value can be <see langword="null" />.</para></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishWriting">
      <MemberSignature Language="C#" Value="public virtual bool FinishWriting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool FinishWriting() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("finishWriting")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.None, "Use the asynchronous 'FinishWriting (NSAction completionHandler)' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 4, 1, ObjCRuntime.PlatformArchitecture.None, "Use the asynchronous 'FinishWriting (NSAction completionHandler)' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Application developers should not use this deprecated method. Instead, they should use <see cref="M:AVFoundation.AVAssetWriter.FinishWriting(NSAction)" /> or <see cref="M:AVFoundation.AVAssetWriter.FinishWritingAsync" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishWriting">
      <MemberSignature Language="C#" Value="public virtual void FinishWriting (Action completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishWriting(class System.Action completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("finishWritingWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completionHandler" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completionHandler">To be added.</param>
        <summary>Marks everything finished and runs <paramref name="completionHandler" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishWritingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FinishWritingAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FinishWritingAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Completes writing the output file.</summary>
        <returns>A task that represents the asynchronous FinishWriting operation</returns>
        <remarks>
          <para copied="true">The FinishWritingAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public static AVFoundation.AVAssetWriter FromUrl (Foundation.NSUrl outputUrl, string outputFileType, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class AVFoundation.AVAssetWriter FromUrl(class Foundation.NSUrl outputUrl, string outputFileType, class Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("assetWriterWithURL:fileType:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVAssetWriter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="outputUrl" Type="Foundation.NSUrl" />
        <Parameter Name="outputFileType" Type="System.String" />
        <Parameter Name="error" Type="Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="outputUrl">To be added.</param>
        <param name="outputFileType">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Factory method to create a <see cref="T:AVFoundation.AVAssetWriter" /> that will write to the specified <paramref name="outputUrl" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputGroups">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVAssetWriterInputGroup[] InputGroups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AVFoundation.AVAssetWriterInputGroup[] InputGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("inputGroups")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVAssetWriterInputGroup[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The array of <see cref="T:AVFoundation.AVAssetWriterInputGroup" />s in the <see cref="T:AVFoundation.AVAssetWriter" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="inputs">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVAssetWriterInput[] inputs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AVFoundation.AVAssetWriterInput[] inputs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("inputs")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVAssetWriterInput[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The array of <see cref="T:AVFoundation.AVAssetWriterInput" />s for the <see cref="T:AVFoundation.AVAssetWriter" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Metadata">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVMetadataItem[] Metadata { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class AVFoundation.AVMetadataItem[] Metadata" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("metadata", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMetadata:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVMetadataItem[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The array of <see cref="T:AVFoundation.AVMetadataItem" />s that should be written in the output file.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MovieFragmentInterval">
      <MemberSignature Language="C#" Value="public virtual CoreMedia.CMTime MovieFragmentInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreMedia.CMTime MovieFragmentInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("movieFragmentInterval", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMovieFragmentInterval:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMedia.CMTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Supported only by QuickTime movies, allows partially-written files to be opened.</summary>
        <value>To be added.</value>
        <remarks>
          <para>In QuickTime movies only, playback is supported up to the largest multiple of <see cref="P:AVFoundation.AVAssetWriter.MovieFragmentInterval" /> less than the time at which the file stopped being written.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MovieTimeScale">
      <MemberSignature Language="C#" Value="public virtual int MovieTimeScale { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MovieTimeScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("movieTimeScale")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMovieTimeScale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The timescale to be used for movies. Must be 0 or the positive denominator of a rational <see cref="T:CoreMedia.CMTime" /></summary>
        <value>The default value is 0.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputFileType">
      <MemberSignature Language="C#" Value="public virtual string OutputFileType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OutputFileType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("outputFileType", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The file type of the <see cref="T:AVFoundation.AVAssetWriter" />'s output.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputURL">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl OutputURL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl OutputURL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("outputURL", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The URL to which the <see cref="T:AVFoundation.AVAssetWriter" /> is writing.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverallDurationHint">
      <MemberSignature Language="C#" Value="public virtual CoreMedia.CMTime OverallDurationHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreMedia.CMTime OverallDurationHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("overallDurationHint", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setOverallDurationHint:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreMedia.CMTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a time value that gives the overall duration of the written data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldOptimizeForNetworkUse">
      <MemberSignature Language="C#" Value="public virtual bool ShouldOptimizeForNetworkUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldOptimizeForNetworkUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("shouldOptimizeForNetworkUse")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShouldOptimizeForNetworkUse:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the output file should be optimized for streaming.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartSessionAtSourceTime">
      <MemberSignature Language="C#" Value="public virtual void StartSessionAtSourceTime (CoreMedia.CMTime startTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartSessionAtSourceTime(valuetype CoreMedia.CMTime startTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("startSessionAtSourceTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startTime" Type="CoreMedia.CMTime" />
      </Parameters>
      <Docs>
        <param name="startTime">Often, application developers will set this to <see cref="F:CoreMedia.CMTime.Zero" />.</param>
        <summary>Sets the initial playback time.</summary>
        <remarks>
          <para>Samples whose timestamps end prior to <paramref name="startTime" /> will be stored, but not played. If the first sample's timestamp is later than <paramref name="startTime" />, an empty edit will be inserted to pad the playback. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartWriting">
      <MemberSignature Language="C#" Value="public virtual bool StartWriting ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool StartWriting() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("startWriting")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously begins writing output. Typically followed by a call to <see cref="M:AVFoundation.AVAssetWriter.StartSessionAtSourceTime" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public virtual AVFoundation.AVAssetWriterStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AVFoundation.AVAssetWriterStatus Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("status")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>AVFoundation.AVAssetWriterStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current status of the <see cref="T:AVFoundation.AVAssetWriter" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:AVAssetWriter.Error" />
      </Docs>
    </Member>
  </Members>
</Type>
