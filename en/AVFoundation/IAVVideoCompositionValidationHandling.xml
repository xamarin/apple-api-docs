<Type Name="IAVVideoCompositionValidationHandling" FullName="AVFoundation.IAVVideoCompositionValidationHandling">
  <TypeSignature Language="C#" Value="public interface IAVVideoCompositionValidationHandling : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IAVVideoCompositionValidationHandling implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:AVFoundation.IAVVideoCompositionValidationHandling" />
  <TypeSignature Language="F#" Value="type IAVVideoCompositionValidationHandling = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="AVVideoCompositionValidationHandling", WrapperType=typeof(AVFoundation.AVVideoCompositionValidationHandlingWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldContinueValidatingAfterFindingInvalidValueForKey", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVVideoComposition), typeof(System.String) }, ReturnType=typeof(System.Boolean), Selector="videoComposition:shouldContinueValidatingAfterFindingInvalidValueForKey:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldContinueValidatingAfterFindingEmptyTimeRange", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVVideoComposition), typeof(CoreMedia.CMTimeRange) }, ReturnType=typeof(System.Boolean), Selector="videoComposition:shouldContinueValidatingAfterFindingEmptyTimeRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVVideoComposition), typeof(AVFoundation.AVVideoCompositionInstruction) }, ReturnType=typeof(System.Boolean), Selector="videoComposition:shouldContinueValidatingAfterFindingInvalidTimeRangeInInstruction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldContinueValidatingAfterFindingInvalidTrackIDInInstruction", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(AVFoundation.AVVideoComposition), typeof(AVFoundation.AVVideoCompositionInstruction), typeof(AVFoundation.AVVideoCompositionLayerInstruction), typeof(AVFoundation.AVAsset) }, ReturnType=typeof(System.Boolean), Selector="videoComposition:shouldContinueValidatingAfterFindingInvalidTrackIDInInstruction:layerInstruction:asset:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:AVFoundation.AVVideoCompositionValidationHandling" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:AVFoundation.AVVideoCompositionValidationHandling" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:AVFoundation.AVVideoCompositionValidationHandling" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:AVFoundation.AVVideoCompositionValidationHandling_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members />
</Type>
