<Type Name="IINSendMessageIntentHandling" FullName="Intents.IINSendMessageIntentHandling">
  <TypeSignature Language="C#" Value="public interface IINSendMessageIntentHandling : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IINSendMessageIntentHandling implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Intents.IINSendMessageIntentHandling" />
  <TypeSignature Language="F#" Value="type IINSendMessageIntentHandling = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="INSendMessageIntentHandling", WrapperType=typeof(Intents.INSendMessageIntentHandlingWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, 0, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="HandleSendMessage", ParameterBlockProxy=new System.Type[] { null, typeof(ObjCRuntime.Trampolines/NIDActionArity1V98) }, ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Intents.INSendMessageIntent), typeof(System.Action`1&lt;Intents.INSendMessageIntentResponse&gt;) }, Selector="handleSendMessage:completion:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ConfirmSendMessage", ParameterBlockProxy=new System.Type[] { null, typeof(ObjCRuntime.Trampolines/NIDActionArity1V98) }, ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Intents.INSendMessageIntent), typeof(System.Action`1&lt;Intents.INSendMessageIntentResponse&gt;) }, Selector="confirmSendMessage:completion:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ResolveRecipients", ParameterBlockProxy=new System.Type[] { null, typeof(ObjCRuntime.Trampolines/NIDActionArity1V130) }, ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Intents.INSendMessageIntent), typeof(System.Action`1&lt;Intents.INPersonResolutionResult[]&gt;) }, Selector="resolveRecipientsForSendMessage:withCompletion:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ResolveRecipients", ParameterBlockProxy=new System.Type[] { null, typeof(ObjCRuntime.Trampolines/NIDActionArity1V137) }, ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Intents.INSendMessageIntent), typeof(System.Action`1&lt;Intents.INSendMessageRecipientResolutionResult[]&gt;) }, Selector="resolveRecipientsForSendMessage:completion:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ResolveContent", ParameterBlockProxy=new System.Type[] { null, typeof(ObjCRuntime.Trampolines/NIDActionArity1V69) }, ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Intents.INSendMessageIntent), typeof(System.Action`1&lt;Intents.INStringResolutionResult&gt;) }, Selector="resolveContentForSendMessage:withCompletion:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ResolveGroupName", ParameterBlockProxy=new System.Type[] { null, typeof(ObjCRuntime.Trampolines/NIDActionArity1V69) }, ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Intents.INSendMessageIntent), typeof(System.Action`1&lt;Intents.INStringResolutionResult&gt;) }, Selector="resolveGroupNameForSendMessage:withCompletion:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ResolveSpeakableGroupName", ParameterBlockProxy=new System.Type[] { null, typeof(ObjCRuntime.Trampolines/NIDActionArity1V54) }, ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Intents.INSendMessageIntent), typeof(System.Action`1&lt;Intents.INSpeakableStringResolutionResult&gt;) }, Selector="resolveSpeakableGroupNameForSendMessage:withCompletion:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface defining handler method that, when implemented, must call <paramref name="completion" /> with an <see cref="T:Intents.INSendMessageIntentResponse" /> appropriate to <paramref name="arg" />.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="HandleSendMessage">
      <MemberSignature Language="C#" Value="public void HandleSendMessage (Intents.INSendMessageIntent intent, Action&lt;Intents.INSendMessageIntentResponse&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HandleSendMessage(class Intents.INSendMessageIntent intent, class System.Action`1&lt;class Intents.INSendMessageIntentResponse&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:Intents.IINSendMessageIntentHandling.HandleSendMessage(Intents.INSendMessageIntent,System.Action{Intents.INSendMessageIntentResponse})" />
      <MemberSignature Language="F#" Value="abstract member HandleSendMessage : Intents.INSendMessageIntent * Action&lt;Intents.INSendMessageIntentResponse&gt; -&gt; unit" Usage="iINSendMessageIntentHandling.HandleSendMessage (intent, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("handleSendMessage:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intent" Type="Intents.INSendMessageIntent" />
        <Parameter Name="completion" Type="System.Action&lt;Intents.INSendMessageIntentResponse&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V98))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="intent">Specifies the user's intention.</param>
        <param name="completion">Completion method that must be called by the override.</param>
        <summary>Developers must override this method and invoke the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=System%20Action`%201&amp;scope=Xamarin" title="T:System.Action`1">T:System.Action`1</a></format> with an <see cref="T:Intents.INSendMessageIntentResponse" /> appropriate to the <see cref="T:Intents.INSendMessageIntent" />Â <paramref name="intent" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
