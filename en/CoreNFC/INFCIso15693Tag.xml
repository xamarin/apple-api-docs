<Type Name="INFCIso15693Tag" FullName="CoreNFC.INFCIso15693Tag">
  <TypeSignature Language="C#" Value="public interface INFCIso15693Tag : CoreNFC.INFCTag, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INFCIso15693Tag implements class CoreNFC.INFCTag, class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:CoreNFC.INFCIso15693Tag" />
  <TypeSignature Language="F#" Value="type INFCIso15693Tag = interface&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INFCTag&#xA;    interface INSCoding&#xA;    interface INSCopying&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>CoreNFC.INFCTag</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol(Name="NFCISO15693Tag", WrapperType=typeof(CoreNFC.NFCIso15693TagWrapper))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SendCustomCommand", ParameterBlockProxy=Mono.Cecil.CustomAttributeArgument[], ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="sendCustomCommandWithConfiguration:completionHandler:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ReadMultipleBlocks", ParameterBlockProxy=Mono.Cecil.CustomAttributeArgument[], ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="readMultipleBlocksWithConfiguration:completionHandler:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.Copy, GetterSelector="identifier", IsProperty=true, IsRequired=true, IsStatic=false, Name="Identifier", PropertyType=typeof(Foundation.NSData), Selector="identifier")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="icManufacturerCode", IsProperty=true, IsRequired=true, IsStatic=false, Name="IcManufacturerCode", PropertyType=typeof(System.nuint), Selector="icManufacturerCode")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.Copy, GetterSelector="icSerialNumber", IsProperty=true, IsRequired=true, IsStatic=false, Name="IcSerialNumber", PropertyType=typeof(Foundation.NSData), Selector="icSerialNumber")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SendCustomCommand", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CoreNFC.NFCIso15693CustomCommandConfiguration), typeof(System.Action`2&lt;Foundation.NSData,Foundation.NSError&gt;) }, Selector="sendCustomCommandWithConfiguration:completionHandler:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ReadMultipleBlocks", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CoreNFC.NFCIso15693ReadMultipleBlocksConfiguration), typeof(System.Action`2&lt;Foundation.NSData,Foundation.NSError&gt;) }, Selector="readMultipleBlocksWithConfiguration:completionHandler:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implements <see cref="T:CoreNFC.INFCTag" /> with data associated with an ISO-15693 vicinity card.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="IcManufacturerCode">
      <MemberSignature Language="C#" Value="public nuint IcManufacturerCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint IcManufacturerCode" />
      <MemberSignature Language="DocId" Value="P:CoreNFC.INFCIso15693Tag.IcManufacturerCode" />
      <MemberSignature Language="F#" Value="member this.IcManufacturerCode : nuint" Usage="CoreNFC.INFCIso15693Tag.IcManufacturerCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("icManufacturerCode")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Manufacturer, as defined in ISO-7816-6.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IcSerialNumber">
      <MemberSignature Language="C#" Value="public Foundation.NSData IcSerialNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSData IcSerialNumber" />
      <MemberSignature Language="DocId" Value="P:CoreNFC.INFCIso15693Tag.IcSerialNumber" />
      <MemberSignature Language="F#" Value="member this.IcSerialNumber : Foundation.NSData" Usage="CoreNFC.INFCIso15693Tag.IcSerialNumber" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("icSerialNumber")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("icSerialNumber", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the serial number of the tag, as <see cref="T:Foundation.NSData" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public Foundation.NSData Identifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSData Identifier" />
      <MemberSignature Language="DocId" Value="P:CoreNFC.INFCIso15693Tag.Identifier" />
      <MemberSignature Language="F#" Value="member this.Identifier : Foundation.NSData" Usage="CoreNFC.INFCIso15693Tag.Identifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("identifier")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("identifier", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the identifier of the tag, as <see cref="T:Foundation.NSData" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadMultipleBlocks">
      <MemberSignature Language="C#" Value="public void ReadMultipleBlocks (CoreNFC.NFCIso15693ReadMultipleBlocksConfiguration readConfiguration, Action&lt;Foundation.NSData,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadMultipleBlocks(class CoreNFC.NFCIso15693ReadMultipleBlocksConfiguration readConfiguration, class System.Action`2&lt;class Foundation.NSData, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreNFC.INFCIso15693Tag.ReadMultipleBlocks(CoreNFC.NFCIso15693ReadMultipleBlocksConfiguration,System.Action{Foundation.NSData,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member ReadMultipleBlocks : CoreNFC.NFCIso15693ReadMultipleBlocksConfiguration * Action&lt;Foundation.NSData, Foundation.NSError&gt; -&gt; unit" Usage="iNFCIso15693Tag.ReadMultipleBlocks (readConfiguration, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("readMultipleBlocksWithConfiguration:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readConfiguration" Type="CoreNFC.NFCIso15693ReadMultipleBlocksConfiguration" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSData,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V3))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="readConfiguration">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendCustomCommand">
      <MemberSignature Language="C#" Value="public void SendCustomCommand (CoreNFC.NFCIso15693CustomCommandConfiguration commandConfiguration, Action&lt;Foundation.NSData,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendCustomCommand(class CoreNFC.NFCIso15693CustomCommandConfiguration commandConfiguration, class System.Action`2&lt;class Foundation.NSData, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreNFC.INFCIso15693Tag.SendCustomCommand(CoreNFC.NFCIso15693CustomCommandConfiguration,System.Action{Foundation.NSData,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member SendCustomCommand : CoreNFC.NFCIso15693CustomCommandConfiguration * Action&lt;Foundation.NSData, Foundation.NSError&gt; -&gt; unit" Usage="iNFCIso15693Tag.SendCustomCommand (commandConfiguration, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("sendCustomCommandWithConfiguration:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="commandConfiguration" Type="CoreNFC.NFCIso15693CustomCommandConfiguration" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSData,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V3))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="commandConfiguration">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
