<Type Name="MKMapView" FullName="MonoTouch.MapKit.MKMapView">
  <TypeSignature Language="C#" Value="public class MKMapView : MonoTouch.UIKit.UIView" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MKMapView extends MonoTouch.UIKit.UIView" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.UIKit.UIView</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("MKMapView", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Embeddable Map View.</summary>
    <remarks>
      <para>The <see cref="T:MonoTouch.MapKit.MKMapView" /> provides a zoomable map interface upon which the application developer can add information-bearing <see cref="T:MonoTouch.MapKit.MKAnnotation" />s and area-based <see cref="T:MonoTouch.MapKit.MKOverlay" />s. </para>
      <para>In iOS 7 and later, maps support 3D imagery when the <see cref="P:MonoTouch.MapKit.MKMapView.MapType" /> property is <see cref="P:MonoTouch.MapKit.MKMapType.Standard" />. To view 3D imagery, the <see cref="P:MonoTouch.MapKit.MKMapView.ShowsBuilding" /> property must be <see langword="true" /> and the <see cref="P:MonoTouch.MapKit.MKMapView.Camera" /> and and <see cref="P:MonoTouch.MapKit.MKMapView.PitchEnabled" /> properties must be set to create a non-vertical perspective. The iOS simulator does not render 3D buildings. The following example shows how a camera can be set to provide 3D imagery:</para>
      <example>
        <code lang="C#"><![CDATA[
var target = new CLLocationCoordinate2D(37.7952, -122.4028);
var viewPoint = new CLLocationCoordinate2D(37.8009, -122.4100);
//Enable 3D buildings
mapView.ShowsBuildings = true;
mapView.PitchEnabled = true;

var camera = MKMapCamera.CameraLookingAtCenterCoordinate(target, viewPoint, 500);
mapView.Camera = camera;
          ]]></code>
      </example>
      <para>
        <img href="MKMapCamera.png" />
      </para>
      <format type="text/html">
        <h3>Overlays</h3>
      </format>
      <para>iOS distinguishes between the <see cref="T:MonoTouch.MapKit.MKOverlay" />, which represents the geometry of an overlay, and it's visual presentation. Prior to iOS 7, overlays were rendered using <see cref="T:MonoTouch.MapKit.MKOverlayView" />s. In iOS 7, these classes have been deprecated, and overlays now use the more efficient subclasses of <see cref="T:MonoTouch.MapKit.MKOverlayRenderer" />. </para>
      <para>To create an overlay and its renderer, application developers must add the overlay to the <see cref="T:MonoTouch.MapKit.MKMapView" /> and return the renderer either using the <see cref="M:MonoTouch.MapKit.MKMapView.OverlayRenderer" /> property or by overriding the <see cref="M:MonoTouch.MapKit.MKMapViewDelegate.OverlayRenderer" /> method.</para>
      <example>
        <code lang="C#"><![CDATA[
MKPolygon hotelOverlay = MKPolygon.FromCoordinates(coordinates);
mkMap.AddOverlay (hotelOverlay);
var polygon = MKPolygon.FromCoordinates(coordinates);
var renderer = new MKPolygonRenderer(polygon) { FillColor = UIColor.Red, Alpha = 0.5f };
mkMap.OverlayRenderer = (view, overlay) => renderer;
          ]]></code>
      </example>
      <para>
        <img href="MKOverlayRenderer.png" />
      </para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=167dc2bb-abca-4dc6-b6db-af97a040b57b">Example_ContentControls</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=423dbd0e-5321-482d-996e-bfa2d870c082">MapCallouts</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Content_Controls/Map_View/Add_an_Annotation_to_a_Map">Add an Annotation to a Map</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Content_Controls/Map_View/Add_an_Overlay_to_a_Map">Add an Overlay to a Map</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Content_Controls/Map_View/Change_Map_Modes">Change Map Modes</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Content_Controls/Map_View/Display_Device_Location">Display Device Location</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Content_Controls/Map_View/Handle_Annotation_Click">Handle Annotation Click</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKMapView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKMapView (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKMapView (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKMapView (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKMapView (System.Drawing.RectangleF frame);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF frame) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public MKMapView (MonoTouch.CoreGraphics.CGRect frame);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MonoTouch.CoreGraphics.CGRect frame) cil managed" apistyle="new" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="frame" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the MKMapView with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of MKMapView with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotation">
      <MemberSignature Language="C#" Value="public void AddAnnotation (MonoTouch.MapKit.MKAnnotation annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAnnotation(class MonoTouch.MapKit.MKAnnotation annotation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MonoTouch.MapKit.MKAnnotation" />
      </Parameters>
      <Docs>
        <param name="annotation">The annotation object to add to the map.</param>
        <summary>Allows adding an annotation to a map.</summary>
        <remarks>The annotation added to the map represents the model for the annotation. The associated view for the annotation will be returned by the <see cref="T:MonoTouch.MapKit.MKMapViewDelegate" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotation">
      <MemberSignature Language="C#" Value="public void AddAnnotation (MonoTouch.MapKit.MKAnnotation[] annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAnnotation(class MonoTouch.MapKit.MKAnnotation[] annotations) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AddAnnotations")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="MonoTouch.MapKit.MKAnnotation[]" />
      </Parameters>
      <Docs>
        <param name="annotations">The annotation objects to add to the map.</param>
        <summary>Adds an array of <see cref="T:MonoTouch.MapKit.MKAnnotation" />s to the map.</summary>
        <remarks>
          <para>The <paramref name="annotations" /> represent the model for the annotations. The associated views for the annotation will be returned by the <see cref="T:MonoTouch.MapKit.MKMapViewDelegate" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotation">
      <MemberSignature Language="C#" Value="public void AddAnnotation (MonoTouch.MapKit.MKPlacemark[] placemarks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAnnotation(class MonoTouch.MapKit.MKPlacemark[] placemarks) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use AddPlacemarks")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="placemarks" Type="MonoTouch.MapKit.MKPlacemark[]" />
      </Parameters>
      <Docs>
        <param name="placemarks">To be added.</param>
        <summary>Application developer should not use this deprecated method. Instead, they should use <see cref="M:MonoTouch.MapKit.MKMapView.AddPlacemarks" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotationObject">
      <MemberSignature Language="C#" Value="public virtual void AddAnnotationObject (MonoTouch.Foundation.NSObject annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAnnotationObject(class MonoTouch.Foundation.NSObject annotation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addAnnotation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="annotation">An NSObject containing the annotation to add.</param>
        <summary>Adds an annotation to the map.</summary>
        <remarks>Also see <see cref="M:MonoTouch.MapKit.MKMapView.AddAnnotation(MonoTouch.MapKit.MKAnnotation)" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotationObjects">
      <MemberSignature Language="C#" Value="public virtual void AddAnnotationObjects (MonoTouch.Foundation.NSObject[] annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAnnotationObjects(class MonoTouch.Foundation.NSObject[] annotations) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addAnnotations:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="MonoTouch.Foundation.NSObject[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="annotations">The annotations to add to the map.</param>
        <summary>Adds multiple annotations to the map.</summary>
        <remarks>Also see <see cref="M:MonoTouch.MapKit.MKMapView.AddAnnotations(MonoTouch.MapKit.MKAnnotation[])" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAnnotations">
      <MemberSignature Language="C#" Value="public void AddAnnotations (MonoTouch.MapKit.MKAnnotation[] annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddAnnotations(class MonoTouch.MapKit.MKAnnotation[] annotations) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="MonoTouch.MapKit.MKAnnotation[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="annotations">The annotations to add to the map.</param>
        <summary>Adds multiple annotations to the map.</summary>
        <remarks>The annotations added to the map represent the models for the annotations. The associated views for the annotations will be returned by the <see cref="T:MonoTouch.MapKit.MKMapViewDelegate" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOverlay">
      <MemberSignature Language="C#" Value="public virtual void AddOverlay (MonoTouch.Foundation.NSObject overlay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOverlay(class MonoTouch.Foundation.NSObject overlay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="overlay">The overlay to add to the map.</param>
        <summary>Adds an overlay to the map.</summary>
        <remarks>The overlay is a <see cref="T:MonoTouch.MapKit.MKOverlay" /> that represents the model for the overlay. The map monitors bounding rectangle that contains the overlay and delegates to the <see cref="T:MonoTouch.MapKit.MKMapViewDelegate" /> to return a view for the overlay when it needs to be displayed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOverlay">
      <MemberSignature Language="C#" Value="public virtual void AddOverlay (MonoTouch.MapKit.IMKOverlay overlay, MonoTouch.MapKit.MKOverlayLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOverlay(class MonoTouch.MapKit.IMKOverlay overlay, valuetype MonoTouch.MapKit.MKOverlayLevel level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addOverlay:level:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MonoTouch.MapKit.IMKOverlay" />
        <Parameter Name="level" Type="MonoTouch.MapKit.MKOverlayLevel" />
      </Parameters>
      <Docs>
        <param name="overlay">The overlay to add to the map.</param>
        <param name="level">Specifies the Z-order of the overlay.</param>
        <summary>Adds an overlay to the map.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOverlays">
      <MemberSignature Language="C#" Value="public virtual void AddOverlays (MonoTouch.Foundation.NSObject[] overlays);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOverlays(class MonoTouch.Foundation.NSObject[] overlays) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addOverlays:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlays" Type="MonoTouch.Foundation.NSObject[]" />
      </Parameters>
      <Docs>
        <param name="overlays">The overlays to add to the map.</param>
        <summary>Adds multiple overlays to the map.</summary>
        <remarks>Each overlay is an <see cref="T:MonoTouch.MapKit.MKOverlay" /> that represents the model for the overlay. The map monitors bounding rectangle that contains the overlay and delegates to the <see cref="T:MonoTouch.MapKit.MKMapViewDelegate" /> to return a view for each overlay when it needs to be displayed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOverlays">
      <MemberSignature Language="C#" Value="public virtual void AddOverlays (MonoTouch.MapKit.IMKOverlay[] overlays, MonoTouch.MapKit.MKOverlayLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOverlays(class MonoTouch.MapKit.IMKOverlay[] overlays, valuetype MonoTouch.MapKit.MKOverlayLevel level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addOverlays:level:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlays" Type="MonoTouch.MapKit.IMKOverlay[]" />
        <Parameter Name="level" Type="MonoTouch.MapKit.MKOverlayLevel" />
      </Parameters>
      <Docs>
        <param name="overlays">The overlays to add to the map.</param>
        <param name="level">The Z-order of the overlays.</param>
        <summary>Adds multiple overlays to the map.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPlacemark">
      <MemberSignature Language="C#" Value="public void AddPlacemark (MonoTouch.MapKit.MKPlacemark placemark);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPlacemark(class MonoTouch.MapKit.MKPlacemark placemark) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="placemark" Type="MonoTouch.MapKit.MKPlacemark" />
      </Parameters>
      <Docs>
        <param name="placemark">The placemark to add to the map.</param>
        <summary>Adds a placemark to the map</summary>
        <remarks>A placemark is an annotation that includes additional information associated with a location, such as the street, city and country.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPlacemarks">
      <MemberSignature Language="C#" Value="public void AddPlacemarks (MonoTouch.MapKit.MKPlacemark[] placemarks);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddPlacemarks(class MonoTouch.MapKit.MKPlacemark[] placemarks) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="placemarks" Type="MonoTouch.MapKit.MKPlacemark[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="placemarks">The placemarks to add to the map.</param>
        <summary>Adds an array of <see cref="T:MonoTouch.MapKit.MKPlacemark" />s to the map.</summary>
        <remarks>
          <para>A placemark is an annotation that includes additional information associated with a location, such as the street, city, and country.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Annotations">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject[] Annotations { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject[] Annotations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("annotations")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns all the annotations associated with a map.</summary>
        <value>
        </value>
        <remarks>
          
          The returned NSObjects are either instances of <see cref="T:MonoTouch.MapKit.MKShape" />, <see cref="T:MonoTouch.MapKit.MKUserLocation" />, <see cref="T:MonoTouch.MapKit.MKPlacemark" />.  You can use the C#
          "is" or "as" operators to turn the individual objects into
          one of the above.
          
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnotationVisibleRect">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF AnnotationVisibleRect { get; }" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF AnnotationVisibleRect" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect AnnotationVisibleRect { get; }" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGRect AnnotationVisibleRect" apistyle="new" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("annotationVisibleRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the rectangle where annotations are displayed.</summary>
        <value>
        </value>
        <remarks>The rectangle returned will be the rectangle for currently visible annotations only.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static MonoTouch.MapKit.MKMapView.MKMapViewAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.MapKit.MKMapView/MKMapViewAppearance Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>Setting any appearance properties on this instance will affect the appearance of all instances of MKMapView.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static MonoTouch.MapKit.MKMapView.MKMapViewAppearance AppearanceWhenContainedIn (Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.MapKit.MKMapView/MKMapViewAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that you want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that you can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where you can set appearance properties for instances of MKMapView when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#">
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
</code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:MonoTouch.UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CalloutAccessoryControlTapped">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKMapViewAccessoryTappedEventArgs&gt; CalloutAccessoryControlTapped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKMapViewAccessoryTappedEventArgs&gt; CalloutAccessoryControlTapped" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKMapViewAccessoryTappedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Camera">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKMapCamera Camera { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.MapKit.MKMapCamera Camera" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("camera", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setCamera:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapCamera</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Defines the perspective of the map.</summary>
        <value>The default value is <see langword="null" />.</value>
        <remarks>
          <para>
            The following example shows how this property can be set to provide 3D imagery:</para>
          <example>
            <code lang="C#"><![CDATA[
var target = new CLLocationCoordinate2D(37.7952, -122.4028);
var viewPoint = new CLLocationCoordinate2D(37.8009, -122.4100);
//Enable 3D buildings
mapView.ShowsBuildings = true;
mapView.PitchEnabled = true;

var camera = MKMapCamera.CameraLookingAtCenterCoordinate(target, viewPoint, 500);
mapView.Camera = camera;
          ]]></code>
          </example>
          <para>
            <img href="MKMapCamera.png" />
          </para>
        </remarks>
        <altmember cref="M:MonoTouch.MapKit.MKMapView.SetCamera" />
        <altmember cref="P:MonoTouch.MapKit.MKMapView.PitchEnabled" />
      </Docs>
    </Member>
    <Member MemberName="CenterCoordinate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreLocation.CLLocationCoordinate2D CenterCoordinate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreLocation.CLLocationCoordinate2D CenterCoordinate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("centerCoordinate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setCenterCoordinate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreLocation.CLLocationCoordinate2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The center of the map.</summary>
        <value>
        </value>
        <remarks>The map center is expressed as a <see cref="T:MonoTouch.CoreLocation.CLLocation2D" /> value that contains a latitude and longitude.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedDragState">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKMapViewDragStateEventArgs&gt; ChangedDragState;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKMapViewDragStateEventArgs&gt; ChangedDragState" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKMapViewDragStateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertCoordinate">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.PointF ConvertCoordinate (MonoTouch.CoreLocation.CLLocationCoordinate2D coordinate, MonoTouch.UIKit.UIView toPointToView);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.PointF ConvertCoordinate(valuetype MonoTouch.CoreLocation.CLLocationCoordinate2D coordinate, class MonoTouch.UIKit.UIView toPointToView) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGPoint ConvertCoordinate (MonoTouch.CoreLocation.CLLocationCoordinate2D coordinate, MonoTouch.UIKit.UIView toPointToView);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGPoint ConvertCoordinate(valuetype MonoTouch.CoreLocation.CLLocationCoordinate2D coordinate, class MonoTouch.UIKit.UIView toPointToView) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("convertCoordinate:toPointToView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.PointF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coordinate" Type="MonoTouch.CoreLocation.CLLocationCoordinate2D" />
        <Parameter Name="toPointToView" Type="MonoTouch.UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="coordinate">The coordinate to convert.</param>
        <param name="toPointToView">
          <para>The view whose coordinate system should be used to convert the map coordinate.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Converts a map coordinate to a point.</summary>
        <returns>The converted point in the coordinate system of the specified view.</returns>
        <remarks>If a view is not specified, the point will be relative to the window.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertPoint">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreLocation.CLLocationCoordinate2D ConvertPoint (System.Drawing.PointF point, MonoTouch.UIKit.UIView toCoordinateFromView);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreLocation.CLLocationCoordinate2D ConvertPoint(valuetype System.Drawing.PointF point, class MonoTouch.UIKit.UIView toCoordinateFromView) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreLocation.CLLocationCoordinate2D ConvertPoint (MonoTouch.CoreGraphics.CGPoint point, MonoTouch.UIKit.UIView toCoordinateFromView);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreLocation.CLLocationCoordinate2D ConvertPoint(valuetype MonoTouch.CoreGraphics.CGPoint point, class MonoTouch.UIKit.UIView toCoordinateFromView) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("convertPoint:toCoordinateFromView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreLocation.CLLocationCoordinate2D</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.PointF" apistyle="old" />
        <Parameter Name="toCoordinateFromView" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="point">The point to convert.</param>
        <param name="toCoordinateFromView">The view whose coordinate system should be used to convert the point.</param>
        <summary>Converts a point to a map coordinate.</summary>
        <returns>The converted map coordinate.</returns>
        <remarks>The point to convert is relative to the specified view.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertRect">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKCoordinateRegion ConvertRect (System.Drawing.RectangleF rect, MonoTouch.UIKit.UIView toRegionFromView);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.MapKit.MKCoordinateRegion ConvertRect(valuetype System.Drawing.RectangleF rect, class MonoTouch.UIKit.UIView toRegionFromView) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKCoordinateRegion ConvertRect (MonoTouch.CoreGraphics.CGRect rect, MonoTouch.UIKit.UIView toRegionFromView);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.MapKit.MKCoordinateRegion ConvertRect(valuetype MonoTouch.CoreGraphics.CGRect rect, class MonoTouch.UIKit.UIView toRegionFromView) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("convertRect:toRegionFromView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKCoordinateRegion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" apistyle="old" />
        <Parameter Name="toRegionFromView" Type="MonoTouch.UIKit.UIView" />
        <Parameter Name="rect" Type="MonoTouch.CoreGraphics.CGRect" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle to convert.</param>
        <param name="toRegionFromView">To be added.</param>
        <summary>Converts a rectangle to a map region</summary>
        <returns>The converted map region.</returns>
        <remarks>The rectangle is converted to a map region, with the rectangle in the coordinate system of the specified view.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertRegion">
      <MemberSignature Language="C#" Value="public virtual System.Drawing.RectangleF ConvertRegion (MonoTouch.MapKit.MKCoordinateRegion region, MonoTouch.UIKit.UIView toRectToView);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Drawing.RectangleF ConvertRegion(valuetype MonoTouch.MapKit.MKCoordinateRegion region, class MonoTouch.UIKit.UIView toRectToView) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGRect ConvertRegion (MonoTouch.MapKit.MKCoordinateRegion region, MonoTouch.UIKit.UIView toRectToView);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.CoreGraphics.CGRect ConvertRegion(valuetype MonoTouch.MapKit.MKCoordinateRegion region, class MonoTouch.UIKit.UIView toRectToView) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("convertRegion:toRectToView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="old">System.Drawing.RectangleF</ReturnType>
        <ReturnType apistyle="new">MonoTouch.CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="MonoTouch.MapKit.MKCoordinateRegion" />
        <Parameter Name="toRectToView" Type="MonoTouch.UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="region">The map region to convert.</param>
        <param name="toRectToView">
          <para>The view whose coordinate system is used for the conversion.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Converts a map region to a rectangle.</summary>
        <returns>The converted rectangle.</returns>
        <remarks>If the view is null, the conversion will use a rectangle relative to the window.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public MonoTouch.MapKit.MKMapViewDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.MapKit.MKMapViewDelegate Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapViewDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the MonoTouch.MapKit.MKMapViewDelegate model class which acts as the class delegate.</summary>
        <value>
          <para>The instance of the MonoTouch.MapKit.MKMapViewDelegate model class</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, use the WeakDelegate property instead if you want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DequeueReusableAnnotation">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKAnnotationView DequeueReusableAnnotation (string withViewIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.MapKit.MKAnnotationView DequeueReusableAnnotation(string withViewIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("dequeueReusableAnnotationViewWithIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKAnnotationView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withViewIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="withViewIdentifier">The identifier that is used to identify the annotation view for reuse.</param>
        <summary>Returns a reusable annnotation view.</summary>
        <returns>A reusable annotation view.</returns>
        <remarks>Allows annotation view that are not longer on the screen to be reused for annotations that are on the screen. This is a performance optimization that reduces the number of annotation views that need to be created.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeselectAnnotation">
      <MemberSignature Language="C#" Value="public virtual void DeselectAnnotation (MonoTouch.Foundation.NSObject annotation, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeselectAnnotation(class MonoTouch.Foundation.NSObject annotation, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("deselectAnnotation:animated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="annotation">The annotation to deselect</param>
        <param name="animated">A boolean value indicating if the annotation callout should disappear with an animated transition.</param>
        <summary>Deselects an annotation, causing the callout to disappear.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddAnnotationViews">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKMapViewAnnotationEventArgs&gt; DidAddAnnotationViews;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKMapViewAnnotationEventArgs&gt; DidAddAnnotationViews" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKMapViewAnnotationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddOverlayRenderers">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKDidAddOverlayRenderersEventArgs&gt; DidAddOverlayRenderers;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKDidAddOverlayRenderersEventArgs&gt; DidAddOverlayRenderers" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKDidAddOverlayRenderersEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddOverlayViews">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKOverlayViewsEventArgs&gt; DidAddOverlayViews;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKOverlayViewsEventArgs&gt; DidAddOverlayViews" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Since iOS 7 it is recommended that you use DidAddOverlayRenderers", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKOverlayViewsEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChageUserTrackingMode">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MMapViewUserTrackingEventArgs&gt; DidChageUserTrackingMode;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MMapViewUserTrackingEventArgs&gt; DidChageUserTrackingMode" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MMapViewUserTrackingEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDeselectAnnotationView">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKAnnotationViewEventArgs&gt; DidDeselectAnnotationView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKAnnotationViewEventArgs&gt; DidDeselectAnnotationView" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKAnnotationViewEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFailToLocateUser">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.Foundation.NSErrorEventArgs&gt; DidFailToLocateUser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.Foundation.NSErrorEventArgs&gt; DidFailToLocateUser" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.Foundation.NSErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidFinishRenderingMap">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKDidFinishRenderingMapEventArgs&gt; DidFinishRenderingMap;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKDidFinishRenderingMapEventArgs&gt; DidFinishRenderingMap" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKDidFinishRenderingMapEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectAnnotationView">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKAnnotationViewEventArgs&gt; DidSelectAnnotationView;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKAnnotationViewEventArgs&gt; DidSelectAnnotationView" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKAnnotationViewEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidStopLocatingUser">
      <MemberSignature Language="C#" Value="public event EventHandler DidStopLocatingUser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidStopLocatingUser" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateUserLocation">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKUserLocationEventArgs&gt; DidUpdateUserLocation;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKUserLocationEventArgs&gt; DidUpdateUserLocation" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKUserLocationEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the MKMapView object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the MKMapView class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the MKMapView ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExchangeOverlay">
      <MemberSignature Language="C#" Value="public virtual void ExchangeOverlay (MonoTouch.MapKit.IMKOverlay overlay1, MonoTouch.MapKit.IMKOverlay overlay2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExchangeOverlay(class MonoTouch.MapKit.IMKOverlay overlay1, class MonoTouch.MapKit.IMKOverlay overlay2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("exchangeOverlay:withOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay1" Type="MonoTouch.MapKit.IMKOverlay" />
        <Parameter Name="overlay2" Type="MonoTouch.MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="overlay1">The first overlay.</param>
        <param name="overlay2">The second overlay.</param>
        <summary>Swaps the index position of two overlays, changing their z-order.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExchangeOverlays">
      <MemberSignature Language="C#" Value="public virtual void ExchangeOverlays (int index1, int index2);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExchangeOverlays(int32 index1, int32 index2) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual void ExchangeOverlays (nint index1, nint index2);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExchangeOverlays(valuetype System.nint index1, valuetype System.nint index2) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("exchangeOverlayAtIndex:withOverlayAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index1" Type="System.Int32" apistyle="old" />
        <Parameter Name="index2" Type="System.Int32" apistyle="old" />
        <Parameter Name="index1" Type="System.nint" apistyle="new" />
        <Parameter Name="index2" Type="System.nint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="index1">The index of the first overlay.</param>
        <param name="index2">The index of the second overlay.</param>
        <summary>Swaps the index positions of two overlays.</summary>
        <remarks>Changing the index positions of the overlays will swap their z-order on the map.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnnotations">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSSet GetAnnotations (MonoTouch.MapKit.MKMapRect mapRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSSet GetAnnotations(valuetype MonoTouch.MapKit.MKMapRect mapRect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("annotationsInMapRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 2)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapRect" Type="MonoTouch.MapKit.MKMapRect" />
      </Parameters>
      <Docs>
        <param name="mapRect">The map rectangle to return annotations for.</param>
        <summary>Returns the annotations located in a specified map rectangle.</summary>
        <returns>The set of annotations.</returns>
        <remarks>Provides fast access to a set of annotations located in some area of the map.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.MapKit.MKMapView.MKMapViewAppearance GetAppearance&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.MapKit.MKMapView/MKMapViewAppearance GetAppearance&lt;T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The subtype of <see cref="T:MonoTouch.MapKit.MKMapView" /> for which the custom appearance is desired.</typeparam>
        <summary>Returns a <see cref="T:MonoTouch.MapKit.MKMapViewAppearance" /> for the specified type <c>T</c>.</summary>
        <returns>A <see cref="T:MonoTouch.MapKit.MKMapViewAppearance" /> for the specified type.</returns>
        <remarks>
          <para>This method returns a <see cref="T:MonoTouch.MapKit.MKMapViewAppearance" /> that allows a custom subclass to have a different appearance than the base class.</para>
          <para>Because <see langword="static" /> methods in C# are not polymorphic, the type parameter <c>T</c> is required to specify the subclass for which the <see cref="T:MonoTouch.MapKit.MKMapViewAppearance" /> is desired.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.MapKit.MKMapView.MKMapViewAppearance GetAppearance&lt;T&gt; (MonoTouch.UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.MapKit.MKMapView/MKMapViewAppearance GetAppearance&lt;T&gt;(class MonoTouch.UIKit.UITraitCollection traits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="traits">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.MapKit.MKMapView.MKMapViewAppearance GetAppearance&lt;T&gt; (MonoTouch.UIKit.UITraitCollection traits, Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.MapKit.MKMapView/MKMapViewAppearance GetAppearance&lt;T&gt;(class MonoTouch.UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapView+MKMapViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForAnnotation">
      <MemberSignature Language="C#" Value="public MonoTouch.MapKit.MKMapViewAnnotation GetViewForAnnotation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.MapKit.MKMapViewAnnotation GetViewForAnnotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapViewAnnotation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForOverlay">
      <MemberSignature Language="C#" Value="public MonoTouch.MapKit.MKMapViewOverlay GetViewForOverlay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.MapKit.MKMapViewOverlay GetViewForOverlay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapViewOverlay</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOverlay">
      <MemberSignature Language="C#" Value="public virtual void InsertOverlay (MonoTouch.Foundation.NSObject overlay, int index);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOverlay(class MonoTouch.Foundation.NSObject overlay, int32 index) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual void InsertOverlay (MonoTouch.Foundation.NSObject overlay, nint index);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOverlay(class MonoTouch.Foundation.NSObject overlay, valuetype System.nint index) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertOverlay:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="index" Type="System.Int32" apistyle="old" />
        <Parameter Name="index" Type="System.nint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="overlay">The overlay to insert.</param>
        <param name="index">The index to insert the overlay at.</param>
        <summary>Insert an overlay into a map.</summary>
        <remarks>The overlay view for the overlay will be returned from the <see cref="T:MonoTouch.MapKit.MKMapViewDelegate" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOverlay">
      <MemberSignature Language="C#" Value="public virtual void InsertOverlay (MonoTouch.MapKit.IMKOverlay overlay, uint index, MonoTouch.MapKit.MKOverlayLevel level);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOverlay(class MonoTouch.MapKit.IMKOverlay overlay, unsigned int32 index, valuetype MonoTouch.MapKit.MKOverlayLevel level) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public virtual void InsertOverlay (MonoTouch.MapKit.IMKOverlay overlay, nuint index, MonoTouch.MapKit.MKOverlayLevel level);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOverlay(class MonoTouch.MapKit.IMKOverlay overlay, valuetype System.nuint index, valuetype MonoTouch.MapKit.MKOverlayLevel level) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertOverlay:atIndex:level:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MonoTouch.MapKit.IMKOverlay" />
        <Parameter Name="index" Type="System.UInt32" apistyle="old" />
        <Parameter Name="level" Type="MonoTouch.MapKit.MKOverlayLevel" />
        <Parameter Name="index" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="overlay">To be added.</param>
        <param name="index">To be added.</param>
        <param name="level">To be added.</param>
        <summary>Adds an overlay at a specific z-index relative to other overlays.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOverlayAbove">
      <MemberSignature Language="C#" Value="public virtual void InsertOverlayAbove (MonoTouch.Foundation.NSObject overlay, MonoTouch.Foundation.NSObject sibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOverlayAbove(class MonoTouch.Foundation.NSObject overlay, class MonoTouch.Foundation.NSObject sibling) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertOverlay:aboveOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="sibling" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="overlay">The overlay to insert</param>
        <param name="sibling">The overlay to which the new overlay will be on top of.</param>
        <summary>Inserts one overlay before another in the map's overlay array.</summary>
        <remarks>Allows the overlay view for one overlay to be displayed on top of another.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertOverlayBelow">
      <MemberSignature Language="C#" Value="public virtual void InsertOverlayBelow (MonoTouch.Foundation.NSObject overlay, MonoTouch.Foundation.NSObject sibling);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertOverlayBelow(class MonoTouch.Foundation.NSObject overlay, class MonoTouch.Foundation.NSObject sibling) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertOverlay:belowOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="sibling" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="overlay">The overlay to insert.</param>
        <param name="sibling">The overlay to which the new overlay will be below.</param>
        <summary>Inserts one overlay after another in the map's overlay array.</summary>
        <remarks>Allows the overlay view for one overlay to be displayed below another.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadingMapFailed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.Foundation.NSErrorEventArgs&gt; LoadingMapFailed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.Foundation.NSErrorEventArgs&gt; LoadingMapFailed" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.Foundation.NSErrorEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapLoaded">
      <MemberSignature Language="C#" Value="public event EventHandler MapLoaded;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MapLoaded" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapRectThatFits">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKMapRect MapRectThatFits (MonoTouch.MapKit.MKMapRect mapRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.MapKit.MKMapRect MapRectThatFits(valuetype MonoTouch.MapKit.MKMapRect mapRect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("mapRectThatFits:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapRect" Type="MonoTouch.MapKit.MKMapRect" />
      </Parameters>
      <Docs>
        <param name="mapRect">The rectangle that needs to be adjusted to fit in the map view's frame.</param>
        <summary>Adjusts the width and height of a map rectangle so it fist in the map view's frame.</summary>
        <returns>The adjusted rectangle.</returns>
        <remarks>The center point of the map remains unchanged.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapRectThatFits">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKMapRect MapRectThatFits (MonoTouch.MapKit.MKMapRect mapRect, MonoTouch.UIKit.UIEdgeInsets edgePadding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.MapKit.MKMapRect MapRectThatFits(valuetype MonoTouch.MapKit.MKMapRect mapRect, valuetype MonoTouch.UIKit.UIEdgeInsets edgePadding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("mapRectThatFits:edgePadding:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapRect" Type="MonoTouch.MapKit.MKMapRect" />
        <Parameter Name="edgePadding" Type="MonoTouch.UIKit.UIEdgeInsets" />
      </Parameters>
      <Docs>
        <param name="mapRect">The rectangle that needs to be adjusted to fit in the map view's frame.</param>
        <param name="edgePadding">The insets values to pad the map rectangle with.</param>
        <summary>Adjusts the width and height of a map rectangle so it fits in the map view's frame, including accounting for padding between the frame and the map rectangle.</summary>
        <returns>The adjusted rectangle.</returns>
        <remarks>The center point of the map remains unchanged.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKMapType MapType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.MapKit.MKMapType MapType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("mapType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMapType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type of map to display</summary>
        <value>
        </value>
        <remarks>Allows the map to be displayed with a standard map, satellite imagery or a hybrid.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverlayRenderer">
      <MemberSignature Language="C#" Value="public MonoTouch.MapKit.MKRendererForOverlayDelegate OverlayRenderer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.MapKit.MKRendererForOverlayDelegate OverlayRenderer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKRendererForOverlayDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>You assign a function, delegate or anonymous method to this property to return a value to the object.   If you assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Overlays">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject[] Overlays { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject[] Overlays" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("overlays")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the overlays for the map.</summary>
        <value>
        </value>
        <remarks>The array that is returned will contain all the overlay objects currently associated with the map.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverlaysInLevel">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.IMKOverlay[] OverlaysInLevel (MonoTouch.MapKit.MKOverlayLevel level);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.MapKit.IMKOverlay[] OverlaysInLevel(valuetype MonoTouch.MapKit.MKOverlayLevel level) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("overlaysInLevel:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.IMKOverlay[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="level" Type="MonoTouch.MapKit.MKOverlayLevel" />
      </Parameters>
      <Docs>
        <param name="level">To be added.</param>
        <summary>The overlays in the specified <paramref name="level" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PitchEnabled">
      <MemberSignature Language="C#" Value="public virtual bool PitchEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PitchEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isPitchEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPitchEnabled:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the view uses the angle defined by the <see cref="P:MonoTouch.MapKit.MKMapView.Camera" />.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKCoordinateRegion Region { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.MapKit.MKCoordinateRegion Region" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("region")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setRegion:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKCoordinateRegion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The region displayed by the map view.</summary>
        <value>
        </value>
        <remarks>The larger the displayed region, the further the map will be zoomed out to fit the area.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKMapViewChangeEventArgs&gt; RegionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKMapViewChangeEventArgs&gt; RegionChanged" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKMapViewChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionThatFits">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKCoordinateRegion RegionThatFits (MonoTouch.MapKit.MKCoordinateRegion region);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.MapKit.MKCoordinateRegion RegionThatFits(valuetype MonoTouch.MapKit.MKCoordinateRegion region) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("regionThatFits:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKCoordinateRegion</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="MonoTouch.MapKit.MKCoordinateRegion" />
      </Parameters>
      <Docs>
        <param name="region">The region of the map to fit in the map view's frame.</param>
        <summary>Adjusts the size of the region to fit within the map view's frame</summary>
        <returns>The adjusted region.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegionWillChange">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;MonoTouch.MapKit.MKMapViewChangeEventArgs&gt; RegionWillChange;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class MonoTouch.MapKit.MKMapViewChangeEventArgs&gt; RegionWillChange" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;MonoTouch.MapKit.MKMapViewChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotation">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotation (MonoTouch.Foundation.NSObject annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotation(class MonoTouch.Foundation.NSObject annotation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeAnnotation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="annotation">The annotation to remove.</param>
        <summary>Removes a specified annotation from the map.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAnnotations">
      <MemberSignature Language="C#" Value="public virtual void RemoveAnnotations (MonoTouch.Foundation.NSObject[] annotations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAnnotations(class MonoTouch.Foundation.NSObject[] annotations) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeAnnotations:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="MonoTouch.Foundation.NSObject[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="annotations">The annotations to remove.</param>
        <summary>Removes multiple annotations from the map.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOverlay">
      <MemberSignature Language="C#" Value="public virtual void RemoveOverlay (MonoTouch.Foundation.NSObject overlay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOverlay(class MonoTouch.Foundation.NSObject overlay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="overlay">The overlay to remove.</param>
        <summary>Removes an overlay from the map.</summary>
        <remarks>Also causes the associated overlay view to be removed from the map's display.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOverlays">
      <MemberSignature Language="C#" Value="public virtual void RemoveOverlays (MonoTouch.Foundation.NSObject[] overlays);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveOverlays(class MonoTouch.Foundation.NSObject[] overlays) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeOverlays:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlays" Type="MonoTouch.Foundation.NSObject[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="overlays">The overlays to remove.</param>
        <summary>Removes multiple overlays from the map.</summary>
        <remarks>Also causes the associated overlay views to be removed from the map's display.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveOverlays">
      <MemberSignature Language="C#" Value="public void RemoveOverlays (MonoTouch.MapKit.IMKOverlay[] overlays);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveOverlays(class MonoTouch.MapKit.IMKOverlay[] overlays) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlays" Type="MonoTouch.MapKit.IMKOverlay[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="overlays">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RendererForOverlay">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKOverlayRenderer RendererForOverlay (MonoTouch.MapKit.IMKOverlay overlay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.MapKit.MKOverlayRenderer RendererForOverlay(class MonoTouch.MapKit.IMKOverlay overlay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("rendererForOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKOverlayRenderer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MonoTouch.MapKit.IMKOverlay" />
      </Parameters>
      <Docs>
        <param name="overlay">To be added.</param>
        <summary>The <see cref="T:MonoTouch.MapKit.MKOverlayRenderer" /> associated with the specified <paramref name="overlay" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateEnabled">
      <MemberSignature Language="C#" Value="public virtual bool RotateEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RotateEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isRotateEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setRotateEnabled:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the view uses the heading defined by the <see cref="P:MonoTouch.MapKit.MKMapView.Camera" />.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollEnabled">
      <MemberSignature Language="C#" Value="public virtual bool ScrollEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScrollEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isScrollEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setScrollEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Control if the map can be scrolled with a pan gesture.</summary>
        <value>
        </value>
        <remarks>Only controls interactive scrolling. The region can be changed in code regardless of this property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectAnnotation">
      <MemberSignature Language="C#" Value="public virtual void SelectAnnotation (MonoTouch.Foundation.NSObject annotation, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectAnnotation(class MonoTouch.Foundation.NSObject annotation, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("selectAnnotation:animated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="annotation">The annotation to select.</param>
        <param name="animated">A boolean indicating if the callout should be displayed with an animated transition.</param>
        <summary>Selects an annotation.</summary>
        <remarks>The annotation's callout view is displayed upon selection.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedAnnotations">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject[] SelectedAnnotations { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject[] SelectedAnnotations" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("selectedAnnotations", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setSelectedAnnotations:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array containing the curently selected annotations.</summary>
        <value>
        </value>
        <remarks>When setting this property, only the first annotation in the array will be selected.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCamera">
      <MemberSignature Language="C#" Value="public virtual void SetCamera (MonoTouch.MapKit.MKMapCamera camera, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCamera(class MonoTouch.MapKit.MKMapCamera camera, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setCamera:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="camera" Type="MonoTouch.MapKit.MKMapCamera" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="camera">To be added.</param>
        <param name="animated">If <see langword="true" />, animate the transition.</param>
        <summary>Sets the <see cref="P:MonoTouch.MapKit.MKMapView.Camera" /> property, optionally animating.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="P:MonoTouch.MapKit.MKMapView.Camera" />
      </Docs>
    </Member>
    <Member MemberName="SetCenterCoordinate">
      <MemberSignature Language="C#" Value="public virtual void SetCenterCoordinate (MonoTouch.CoreLocation.CLLocationCoordinate2D coordinate, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCenterCoordinate(valuetype MonoTouch.CoreLocation.CLLocationCoordinate2D coordinate, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setCenterCoordinate:animated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="coordinate" Type="MonoTouch.CoreLocation.CLLocationCoordinate2D" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="coordinate">The coordinate to center the map on.</param>
        <param name="animated">A boolean indicating if the transition to the new center location should be animated.</param>
        <summary>Sets the map center. This method is asynchronous.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="SetRegion">
      <MemberSignature Language="C#" Value="public virtual void SetRegion (MonoTouch.MapKit.MKCoordinateRegion region, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRegion(valuetype MonoTouch.MapKit.MKCoordinateRegion region, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setRegion:animated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="region" Type="MonoTouch.MapKit.MKCoordinateRegion" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="region">The region to display.</param>
        <param name="animated">A boolean indicating if the transition to the new region should be animated.</param>
        <summary>Changes the region dispalyed on the map.</summary>
        <remarks>If the region does not fit, the map view will adjust it so that it is visible.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetUserTrackingMode">
      <MemberSignature Language="C#" Value="public virtual void SetUserTrackingMode (MonoTouch.MapKit.MKUserTrackingMode trackingMode, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetUserTrackingMode(valuetype MonoTouch.MapKit.MKUserTrackingMode trackingMode, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setUserTrackingMode:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trackingMode" Type="MonoTouch.MapKit.MKUserTrackingMode" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="trackingMode">The <see cref="T:MonoTouch.MapKit.MKUserTrackingMode" /> used to track the user's location.</param>
        <param name="animated">Controls if the change in tracking mode is animated.</param>
        <summary>Sets the user tracking mode to a value in <see cref="T:MonoTouch.MapKit.MKUserTrackingMode" />.</summary>
        <remarks>Used to control if a user's location, heading or both are tracked.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisibleMapRect">
      <MemberSignature Language="C#" Value="public virtual void SetVisibleMapRect (MonoTouch.MapKit.MKMapRect mapRect, bool animate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisibleMapRect(valuetype MonoTouch.MapKit.MKMapRect mapRect, bool animate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVisibleMapRect:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapRect" Type="MonoTouch.MapKit.MKMapRect" />
        <Parameter Name="animate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mapRect">The rectangle used to define the visible portion of the map.</param>
        <param name="animate">Controls if the transition to the new map area is animated.</param>
        <summary>Sets the visible area of the map.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisibleMapRect">
      <MemberSignature Language="C#" Value="public virtual void SetVisibleMapRect (MonoTouch.MapKit.MKMapRect mapRect, MonoTouch.UIKit.UIEdgeInsets edgePadding, bool animate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisibleMapRect(valuetype MonoTouch.MapKit.MKMapRect mapRect, valuetype MonoTouch.UIKit.UIEdgeInsets edgePadding, bool animate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVisibleMapRect:edgePadding:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mapRect" Type="MonoTouch.MapKit.MKMapRect" />
        <Parameter Name="edgePadding" Type="MonoTouch.UIKit.UIEdgeInsets" />
        <Parameter Name="animate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mapRect">The rectangle used to define the visible portion of the map.</param>
        <param name="edgePadding">The inset padding to include when fitting the map rectangle.</param>
        <param name="animate">Controls if the transition to the new rectangle is animated.</param>
        <summary>Sets the visible area of the map, including additional space for padding.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowAnnotations">
      <MemberSignature Language="C#" Value="public virtual void ShowAnnotations (MonoTouch.MapKit.IMKAnnotation[] annotations, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowAnnotations(class MonoTouch.MapKit.IMKAnnotation[] annotations, bool animated) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("showAnnotations:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotations" Type="MonoTouch.MapKit.IMKAnnotation[]" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="annotations">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Sets the visible region of the map such that the specified annotations can all be seen.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsBuildings">
      <MemberSignature Language="C#" Value="public virtual bool ShowsBuildings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsBuildings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("showsBuildings")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setShowsBuildings:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether 3D geometry (if available) is rendered.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:MonoTouch.MapKit.MKMapView.Camera" />
        <altmember cref="P:MonoTouch.MapKit.MKMapView.PitchEnabled" />
        <altmember cref="T:MonoTouch.MapKit.MKCamera" />
      </Docs>
    </Member>
    <Member MemberName="ShowsPointsOfInterest">
      <MemberSignature Language="C#" Value="public virtual bool ShowsPointsOfInterest { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsPointsOfInterest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("showsPointsOfInterest")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setShowsPointsOfInterest:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the map should display features that are marked as points of interest.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsUserLocation">
      <MemberSignature Language="C#" Value="public virtual bool ShowsUserLocation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsUserLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("showsUserLocation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setShowsUserLocation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Shows the user's location.</summary>
        <value>
        </value>
        <remarks>Uses Core Location internally to locate the user. Therefore setting this property to true will result in the user being prompted to allow location.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserLocation">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKUserLocation UserLocation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.MapKit.MKUserLocation UserLocation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("userLocation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKUserLocation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the user's location.</summary>
        <value>
        </value>
        <remarks>The current location of the user.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserLocationVisible">
      <MemberSignature Language="C#" Value="public virtual bool UserLocationVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UserLocationVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isUserLocationVisible")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns if the user's location is currently visible on the map.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserTrackingMode">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKUserTrackingMode UserTrackingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.MapKit.MKUserTrackingMode UserTrackingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("userTrackingMode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setUserTrackingMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKUserTrackingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies if and how the map should track the application user's position.</summary>
        <value>The default value is <see cref="F:MonoTouch.MapKit.MKUserTrackingMode.None" />.</value>
        <remarks>
          <para>Setting this property to either <see cref="F:MonoTouch.MapKit.MKUserTrackingMode.Follow" /> or <see cref="F:MonoTouch.MapKit.MKUserTrackingMode.FollowWithHeading" /> causes the <see cref="T:MonoTouch.MapKit.MKMapView" /> to begin centering and zooming the map to the application user's location.</para>
        </remarks>
        <altmember cref="M:MonoTouch.UIKit.MKMapView.SetUserTrackingMode" />
      </Docs>
    </Member>
    <Member MemberName="ViewForAnnotation">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKAnnotationView ViewForAnnotation (MonoTouch.Foundation.NSObject annotation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.MapKit.MKAnnotationView ViewForAnnotation(class MonoTouch.Foundation.NSObject annotation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("viewForAnnotation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKAnnotationView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="annotation" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="annotation">The annotation to return the view for.</param>
        <summary>Returns the view for an annotation.</summary>
        <returns>The view associated with a particular annotation.</returns>
        <remarks>If the annotation's view is not currently visible on the screen, this method will return null.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewForOverlay">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKOverlayView ViewForOverlay (MonoTouch.Foundation.NSObject overlay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.MapKit.MKOverlayView ViewForOverlay(class MonoTouch.Foundation.NSObject overlay) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("viewForOverlay:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Starting with iOS 7 it is recommnended to use RendererForOverlay", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKOverlayView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="overlay" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="overlay">The overlay to return the view for.</param>
        <summary>Returns the view for an overlay. (iOS 7+ must use <see cref="M:MonoTouch.MapKit.MKMapView.OverlayRenderer" />)</summary>
        <returns>The view associated with a particular overlay.</returns>
        <remarks>If the overlay's view is not currently visible on the screen, this method will return null.</remarks>
      </Docs>
    </Member>
    <Member MemberName="visibleMapRect">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKMapRect visibleMapRect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.MapKit.MKMapRect visibleMapRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use VisibleMapRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application developers should use <see cref="P:MonoTouch.MapKit.MKMapView.VisibleMapRect" /> and not this mistakenly uncapitalized property.</summary>
        <value>
        </value>
        <remarks>This property exists for backward compatibility. Application developers should use <see cref="P:MonoTouch.MapKit.MKMapView.VisibleMapRect" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleMapRect">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKMapRect VisibleMapRect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.MapKit.MKMapRect VisibleMapRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("visibleMapRect")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setVisibleMapRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The map rectangle that is currently visible.</summary>
        <value>To be added.</value>
        <remarks>The visible portion of the map that is displayed can also be set using the <see cref="P:MonoTouch.MapKit.MKMapView.Region" /> property.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("delegate", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setDelegate:", MonoTouch.ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>
          <para>The instance that will respond to events and data requests.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillStartLoadingMap">
      <MemberSignature Language="C#" Value="public event EventHandler WillStartLoadingMap;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WillStartLoadingMap" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillStartLocatingUser">
      <MemberSignature Language="C#" Value="public event EventHandler WillStartLocatingUser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WillStartLocatingUser" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillStartRenderingMap">
      <MemberSignature Language="C#" Value="public event EventHandler WillStartRenderingMap;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WillStartRenderingMap" />
      <MemberType>Event</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If you assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomEnabled">
      <MemberSignature Language="C#" Value="public virtual bool ZoomEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ZoomEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isZoomEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setZoomEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Controls if the user can zoom in and out of the map using a pinch gesture.</summary>
        <value>Default is <see langword="true" />.</value>
        <remarks>The default value of <see langword="true" /> allows zooming. This property only controls if the user can interactively zoom. It has no affect on zooming the map in code, which can be done by changing either the <see cref="P:MonoTouch.MapKit.MKMapView.Region" /> or <see cref="P:MonoTouch.MapKit.MKMapView.visibleMapRect" /> properties.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
