<Type Name="MKOverlay" FullName="MonoTouch.MapKit.MKOverlay">
  <TypeSignature Language="C#" Value="public class MKOverlay : MonoTouch.MapKit.MKAnnotation, IDisposable, MonoTouch.MapKit.IMKOverlay" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MKOverlay extends MonoTouch.MapKit.MKAnnotation implements class MonoTouch.MapKit.IMKOverlay, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.MapKit.MKAnnotation</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.MapKit.IMKOverlay</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("MKOverlay", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes a map annotation that combines a location and a geometric shape.</summary>
    <remarks>
      <para>
        <see cref="T:MonoTouch.MapKit.MKOverlay" />s allow the application developer to layer graphics above an <see cref="T:MonoTouch.MapKit.MKMapView" />. The <see cref="T:MonoTouch.MapKit.MKOverlay" /> will automatically position, zoom, and orient itself to the underlying <see cref="T:MonoTouch.MapKit.MKMapView" />.</para>
      <para>iOS provides several standard overlays:</para>
      <list type="table">
        <listheader>
          <!-- listheader bolds this row -->
          <term>Class</term>
          <description>Description</description>
        </listheader>
        <item>
          <term>
            <see cref="T:MonoTouch.MapKit.MKCircle" />
          </term>
          <description>A circular region</description>
        </item>
        <item>
          <term>
            <see cref="T:MonoTouch.MapKit.MKPolygon" />
          </term>
          <description>A closed polygonal area.</description>
        </item>
        <item>
          <term>
            <see cref="T:MonoTouch.MapKit.MKPolyline" />
          </term>
          <description>An area defined by points in which the first and final points are not automatically joined.</description>
        </item>
      </list>
    </remarks>
    <related type="article" href="http://docs.xamarin.com/guides/ios/platform_features/ios_maps">iOS Maps</related>
    <related type="recipe" href="http://docs.xamarin.com/recipes/ios/content_controls/map_view/add_an_overlay_to_a_map">Add an Overlay to a Map</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKOverlay ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKOverlay (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKOverlay (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MKOverlay (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingMapRect">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.MapKit.MKMapRect BoundingMapRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.MapKit.MKMapRect BoundingMapRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("boundingMapRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.MapKit.MKMapRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A <see cref="T:MonoTouch.MapKit.MKMapRect" /> rectangle that contains the overlay.</summary>
        <value>The smallest rectangle that bounds the overlay.</value>
        <remarks>
          <!-- TODO: Isn't this ambiguous? Is there a specific map projection that is used? -->
          <para>The rectangle is defined using a projection of the globe onto a 2D surface.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Coordinate">
      <MemberSignature Language="C#" Value="public override MonoTouch.CoreLocation.CLLocationCoordinate2D Coordinate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreLocation.CLLocationCoordinate2D Coordinate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("coordinate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setCoordinate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreLocation.CLLocationCoordinate2D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An approximate center of the overlay.</summary>
        <value>A <see cref="T:MonoTouch.MapKit.CLLocationCoordinate2D" /> that is at the center of the <see cref="P:MonoTouch.MapKit.MKOverlay.MKMapRect" /> .</value>
        <remarks>
          <para>This location is used as the anchor point for callouts associated with the <see cref="T:MonoTouch.MapKit.MKOverlay" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersects">
      <MemberSignature Language="C#" Value="public virtual bool Intersects (MonoTouch.MapKit.MKMapRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Intersects(valuetype MonoTouch.MapKit.MKMapRect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("intersectsMapRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="MonoTouch.MapKit.MKMapRect" />
      </Parameters>
      <Docs>
        <param name="rect">The area being checked for intersection with this <see cref="T:MonoTouch.MapKit.MKOverlay" />.</param>
        <summary>Calculates whether the <paramref name="rect" /> intersects this <see cref="T:MonoTouch.MapKit.MKOverlay" />.</summary>
        <returns>
          <see langword="true" /> if the rectangle overlaps the overlay.</returns>
        <remarks>
          <para>The default implementation uses the <see cref="P:MonoTouch.MapKit.MKOverlay.BoundingMapRect" /> to calculate intersection. Application developers who need more precision should override this method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtitle">
      <MemberSignature Language="C#" Value="public override string Subtitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Subtitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("subtitle", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A subtitle associated with a callout.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public override string Title { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("title", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A title associated with a callout.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
