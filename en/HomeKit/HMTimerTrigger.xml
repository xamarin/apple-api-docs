<Type Name="HMTimerTrigger" FullName="HomeKit.HMTimerTrigger">
  <TypeSignature Language="C#" Value="public class HMTimerTrigger : HomeKit.HMTrigger" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMTimerTrigger extends HomeKit.HMTrigger" />
  <TypeSignature Language="DocId" Value="T:HomeKit.HMTimerTrigger" />
  <TypeSignature Language="F#" Value="type HMTimerTrigger = class&#xA;    inherit HMTrigger" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>HomeKit.HMTrigger</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("HMTimerTrigger", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:HomeKit.HMTrigger" /> that triggers in response to a possibly-recurring timer.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMTimerTrigger_Class/index.html">Apple documentation for <c>HMTimerTrigger</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HMTimerTrigger (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:HomeKit.HMTimerTrigger.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new HomeKit.HMTimerTrigger : Foundation.NSObjectFlag -&gt; HomeKit.HMTimerTrigger" Usage="new HomeKit.HMTimerTrigger t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal HMTimerTrigger (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:HomeKit.HMTimerTrigger.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new HomeKit.HMTimerTrigger : nativeint -&gt; HomeKit.HMTimerTrigger" Usage="new HomeKit.HMTimerTrigger handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HMTimerTrigger (string name, Foundation.NSDate fireDate, Foundation.NSTimeZone timeZone, Foundation.NSDateComponents recurrence, Foundation.NSCalendar recurrenceCalendar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class Foundation.NSDate fireDate, class Foundation.NSTimeZone timeZone, class Foundation.NSDateComponents recurrence, class Foundation.NSCalendar recurrenceCalendar) cil managed" />
      <MemberSignature Language="DocId" Value="M:HomeKit.HMTimerTrigger.#ctor(System.String,Foundation.NSDate,Foundation.NSTimeZone,Foundation.NSDateComponents,Foundation.NSCalendar)" />
      <MemberSignature Language="F#" Value="new HomeKit.HMTimerTrigger : string * Foundation.NSDate * Foundation.NSTimeZone * Foundation.NSDateComponents * Foundation.NSCalendar -&gt; HomeKit.HMTimerTrigger" Usage="new HomeKit.HMTimerTrigger (name, fireDate, timeZone, recurrence, recurrenceCalendar)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithName:fireDate:timeZone:recurrence:recurrenceCalendar:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="fireDate" Type="Foundation.NSDate" />
        <Parameter Name="timeZone" Type="Foundation.NSTimeZone" />
        <Parameter Name="recurrence" Type="Foundation.NSDateComponents" />
        <Parameter Name="recurrenceCalendar" Type="Foundation.NSCalendar" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="fireDate">To be added.</param>
        <param name="timeZone">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="recurrence">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="recurrenceCalendar">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:HomeKit.HMTimerTrigger.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="HomeKit.HMTimerTrigger.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FireDate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDate FireDate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDate FireDate" />
      <MemberSignature Language="DocId" Value="P:HomeKit.HMTimerTrigger.FireDate" />
      <MemberSignature Language="F#" Value="member this.FireDate : Foundation.NSDate" Usage="HomeKit.HMTimerTrigger.FireDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("fireDate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("fireDate", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time when the trigger will fire next.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Recurrence">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDateComponents Recurrence { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDateComponents Recurrence" />
      <MemberSignature Language="DocId" Value="P:HomeKit.HMTimerTrigger.Recurrence" />
      <MemberSignature Language="F#" Value="member this.Recurrence : Foundation.NSDateComponents" Usage="HomeKit.HMTimerTrigger.Recurrence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("recurrence")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("recurrence", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDateComponents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the interval at which the trigger recurs.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RecurrenceCalendar">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSCalendar RecurrenceCalendar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSCalendar RecurrenceCalendar" />
      <MemberSignature Language="DocId" Value="P:HomeKit.HMTimerTrigger.RecurrenceCalendar" />
      <MemberSignature Language="F#" Value="member this.RecurrenceCalendar : Foundation.NSCalendar" Usage="HomeKit.HMTimerTrigger.RecurrenceCalendar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("recurrenceCalendar")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("recurrenceCalendar", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCalendar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the calender in which the trigger operates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeZone">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSTimeZone TimeZone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSTimeZone TimeZone" />
      <MemberSignature Language="DocId" Value="P:HomeKit.HMTimerTrigger.TimeZone" />
      <MemberSignature Language="F#" Value="member this.TimeZone : Foundation.NSTimeZone" Usage="HomeKit.HMTimerTrigger.TimeZone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("timeZone")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("timeZone", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSTimeZone</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the time zone in which the trigger operates.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateFireDate">
      <MemberSignature Language="C#" Value="public virtual void UpdateFireDate (Foundation.NSDate fireDate, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateFireDate(class Foundation.NSDate fireDate, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:HomeKit.HMTimerTrigger.UpdateFireDate(Foundation.NSDate,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member UpdateFireDate : Foundation.NSDate * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.UpdateFireDate : Foundation.NSDate * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="hMTimerTrigger.UpdateFireDate (fireDate, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("updateFireDate:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fireDate" Type="Foundation.NSDate" Index="0" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;" Index="1" FrameworkAlternate="xamarin-ios-sdk-12">
          <Attributes>
            <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fireDate">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Updates the fire date by using <paramref name="fireDate" /> and runs <paramref name="completion" /> after it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateFireDateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdateFireDateAsync (Foundation.NSDate fireDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdateFireDateAsync(class Foundation.NSDate fireDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:HomeKit.HMTimerTrigger.UpdateFireDateAsync(Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member UpdateFireDateAsync : Foundation.NSDate -&gt; System.Threading.Tasks.Task&#xA;override this.UpdateFireDateAsync : Foundation.NSDate -&gt; System.Threading.Tasks.Task" Usage="hMTimerTrigger.UpdateFireDateAsync fireDate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fireDate" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="fireDate">To be added.</param>
        <summary>Updates the fire date by using <paramref name="fireDate" /> and runs <paramref name="completion" /> after it has finished.</summary>
        <returns>A task that represents the asynchronous UpdateFireDate operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRecurrence">
      <MemberSignature Language="C#" Value="public virtual void UpdateRecurrence (Foundation.NSDateComponents recurrence, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateRecurrence(class Foundation.NSDateComponents recurrence, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:HomeKit.HMTimerTrigger.UpdateRecurrence(Foundation.NSDateComponents,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member UpdateRecurrence : Foundation.NSDateComponents * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.UpdateRecurrence : Foundation.NSDateComponents * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="hMTimerTrigger.UpdateRecurrence (recurrence, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("updateRecurrence:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recurrence" Type="Foundation.NSDateComponents" Index="0" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;" Index="1" FrameworkAlternate="xamarin-ios-sdk-12">
          <Attributes>
            <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="recurrence">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Updates the recurrence by using <paramref name="recurrence" /> and runs <paramref name="completion" /> after it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateRecurrenceAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdateRecurrenceAsync (Foundation.NSDateComponents recurrence);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdateRecurrenceAsync(class Foundation.NSDateComponents recurrence) cil managed" />
      <MemberSignature Language="DocId" Value="M:HomeKit.HMTimerTrigger.UpdateRecurrenceAsync(Foundation.NSDateComponents)" />
      <MemberSignature Language="F#" Value="abstract member UpdateRecurrenceAsync : Foundation.NSDateComponents -&gt; System.Threading.Tasks.Task&#xA;override this.UpdateRecurrenceAsync : Foundation.NSDateComponents -&gt; System.Threading.Tasks.Task" Usage="hMTimerTrigger.UpdateRecurrenceAsync recurrence" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="recurrence" Type="Foundation.NSDateComponents" />
      </Parameters>
      <Docs>
        <param name="recurrence">To be added.This parameter can be .</param>
        <summary>Updates the recurrence by using <paramref name="recurrence" /> and runs <paramref name="completion" /> after it has finished.</summary>
        <returns>A task that represents the asynchronous UpdateRecurrence operation</returns>
        <remarks>
          <para copied="true">The UpdateRecurrenceAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTimeZone">
      <MemberSignature Language="C#" Value="public virtual void UpdateTimeZone (Foundation.NSTimeZone timeZone, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateTimeZone(class Foundation.NSTimeZone timeZone, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:HomeKit.HMTimerTrigger.UpdateTimeZone(Foundation.NSTimeZone,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member UpdateTimeZone : Foundation.NSTimeZone * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.UpdateTimeZone : Foundation.NSTimeZone * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="hMTimerTrigger.UpdateTimeZone (timeZone, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("updateTimeZone:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeZone" Type="Foundation.NSTimeZone" Index="0" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;" Index="1" FrameworkAlternate="xamarin-ios-sdk-12">
          <Attributes>
            <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="timeZone">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Updates the time zone by using <paramref name="timeZone" /> and runs <paramref name="completion" /> after it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateTimeZoneAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdateTimeZoneAsync (Foundation.NSTimeZone timeZone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdateTimeZoneAsync(class Foundation.NSTimeZone timeZone) cil managed" />
      <MemberSignature Language="DocId" Value="M:HomeKit.HMTimerTrigger.UpdateTimeZoneAsync(Foundation.NSTimeZone)" />
      <MemberSignature Language="F#" Value="abstract member UpdateTimeZoneAsync : Foundation.NSTimeZone -&gt; System.Threading.Tasks.Task&#xA;override this.UpdateTimeZoneAsync : Foundation.NSTimeZone -&gt; System.Threading.Tasks.Task" Usage="hMTimerTrigger.UpdateTimeZoneAsync timeZone" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeZone" Type="Foundation.NSTimeZone" />
      </Parameters>
      <Docs>
        <param name="timeZone">To be added.This parameter can be .</param>
        <summary>Updates the time zone by using <paramref name="timeZone" /> and runs <paramref name="completion" /> after it has finished.</summary>
        <returns>A task that represents the asynchronous UpdateTimeZone operation</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
