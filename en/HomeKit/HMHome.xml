<Type Name="HMHome" FullName="HomeKit.HMHome">
  <TypeSignature Language="C#" Value="public class HMHome : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit HMHome extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("HMHome", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An object representing a single residence. The highest level "container" in Home Kit.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/HomeKit/Reference/HMHome_Class/index.html">Apple documentation for <c>HMHome</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HMHome (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected HMHome (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Accessories">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMAccessory[] Accessories { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HomeKit.HMAccessory[] Accessories" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("accessories")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMAccessory[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains all of the accessories that have been added to the home.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionSets">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMActionSet[] ActionSets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HomeKit.HMActionSet[] ActionSets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("actionSets")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMActionSet[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains all of the action sets that are in the home.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessory">
      <MemberSignature Language="C#" Value="public virtual void AddAccessory (HomeKit.HMAccessory accessory, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAccessory(class HomeKit.HMAccessory accessory, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addAccessory:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="HomeKit.HMAccessory" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="accessory">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Adds <paramref name="accessory" /> to the home and runs <paramref name="completion" /> after it has been added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAccessoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddAccessoryAsync (HomeKit.HMAccessory accessory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddAccessoryAsync(class HomeKit.HMAccessory accessory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="HomeKit.HMAccessory" />
      </Parameters>
      <Docs>
        <param name="accessory">To be added.</param>
        <summary>Adds <paramref name="accessory" /> to the home and runs <paramref name="completion" /> after it has been added.</summary>
        <returns>A task that represents the asynchronous AddAccessory operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddActionSet">
      <MemberSignature Language="C#" Value="public virtual void AddActionSet (string actionSetName, Action&lt;HomeKit.HMActionSet,Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddActionSet(string actionSetName, class System.Action`2&lt;class HomeKit.HMActionSet, class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addActionSetWithName:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSetName" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;HomeKit.HMActionSet,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V2))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actionSetName">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Adds an action set named <paramref name="actionSetName" /> to the home and runs <paramref name="completion" /> after it has been added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddActionSetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;HomeKit.HMActionSet&gt; AddActionSetAsync (string actionSetName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class HomeKit.HMActionSet&gt; AddActionSetAsync(string actionSetName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;HomeKit.HMActionSet&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSetName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionSetName">To be added.</param>
        <summary>Adds an action set named <paramref name="actionSetName" /> to the home and runs <paramref name="completion" /> after it has been added.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous AddActionSet operation.  The value of the TResult parameter is of type System.Action&lt;HomeKit.HMActionSet,Foundation.NSError&gt;.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddAndSetupAccessories">
      <MemberSignature Language="C#" Value="public virtual void AddAndSetupAccessories (Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAndSetupAccessories(class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addAndSetupAccessoriesWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V8))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completion">To be added.</param>
        <summary>Displays a device selection user interface that allows the user to choose which devices to add and set up, and then runs a handler when the user exits the UI.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAndSetupAccessoriesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddAndSetupAccessoriesAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddAndSetupAccessoriesAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Displays a device selection user interface that allows the user to choose which devices to add and set up, and then runs a handler when the user exits the UI.</summary>
        <returns>A task that represents the asynchronous AddAndSetupAccessories operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddRoom">
      <MemberSignature Language="C#" Value="public virtual void AddRoom (string roomName, Action&lt;HomeKit.HMRoom,Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRoom(string roomName, class System.Action`2&lt;class HomeKit.HMRoom, class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addRoomWithName:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roomName" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;HomeKit.HMRoom,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V3))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="roomName">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Adds a room named <paramref name="roomName" /> to the home and runs <paramref name="completion" /> after it has been added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRoomAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;HomeKit.HMRoom&gt; AddRoomAsync (string roomName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class HomeKit.HMRoom&gt; AddRoomAsync(string roomName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;HomeKit.HMRoom&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="roomName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="roomName">To be added.</param>
        <summary>Adds a room named <paramref name="roomName" /> to the home and runs <paramref name="completion" /> after it has been added.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous AddRoom operation.  The value of the TResult parameter is of type System.Action&lt;HomeKit.HMRoom,Foundation.NSError&gt;.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddServiceGroup">
      <MemberSignature Language="C#" Value="public virtual void AddServiceGroup (string serviceGroupName, Action&lt;HomeKit.HMServiceGroup,Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddServiceGroup(string serviceGroupName, class System.Action`2&lt;class HomeKit.HMServiceGroup, class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addServiceGroupWithName:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceGroupName" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;HomeKit.HMServiceGroup,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V4))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="serviceGroupName">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Adds a service group named <paramref name="serviceGroupName" /> to the home and runs <paramref name="completion" /> after it has been added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddServiceGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;HomeKit.HMServiceGroup&gt; AddServiceGroupAsync (string serviceGroupName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class HomeKit.HMServiceGroup&gt; AddServiceGroupAsync(string serviceGroupName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;HomeKit.HMServiceGroup&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceGroupName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="serviceGroupName">To be added.</param>
        <summary>Adds a service group named <paramref name="serviceGroupName" /> to the home and runs <paramref name="completion" /> after it has been added.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous AddServiceGroup operation.  The value of the TResult parameter is of type System.Action&lt;HomeKit.HMServiceGroup,Foundation.NSError&gt;.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddTrigger">
      <MemberSignature Language="C#" Value="public virtual void AddTrigger (HomeKit.HMTrigger trigger, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTrigger(class HomeKit.HMTrigger trigger, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addTrigger:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="HomeKit.HMTrigger" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trigger">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Adds <paramref name="trigger" /> to the home and runs <paramref name="completion" /> after it has been added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTriggerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AddTriggerAsync (HomeKit.HMTrigger trigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AddTriggerAsync(class HomeKit.HMTrigger trigger) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="HomeKit.HMTrigger" />
      </Parameters>
      <Docs>
        <param name="trigger">To be added.</param>
        <summary>Adds <paramref name="trigger" /> to the home and runs <paramref name="completion" /> after it has been added.</summary>
        <returns>A task that represents the asynchronous AddTrigger operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddUser">
      <MemberSignature Language="C#" Value="public virtual void AddUser (Action&lt;HomeKit.HMUser,Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddUser(class System.Action`2&lt;class HomeKit.HMUser, class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addUserWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completion" Type="System.Action&lt;HomeKit.HMUser,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V5))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Developers should not use this deprecated method. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;HomeKit.HMUser&gt; AddUserAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class HomeKit.HMUser&gt; AddUserAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;HomeKit.HMUser&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Developers should not use this deprecated method. </summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous AddUser operation.  The value of the TResult parameter is of type System.Action&lt;HomeKit.HMUser,Foundation.NSError&gt;.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AddZone">
      <MemberSignature Language="C#" Value="public virtual void AddZone (string zoneName, Action&lt;HomeKit.HMZone,Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddZone(string zoneName, class System.Action`2&lt;class HomeKit.HMZone, class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addZoneWithName:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zoneName" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;HomeKit.HMZone,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V5))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="zoneName">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Adds a none that is named <paramref name="zoneName" /> to the home and runs <paramref name="completionHandler" /> after it has been added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddZoneAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;HomeKit.HMZone&gt; AddZoneAsync (string zoneName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class HomeKit.HMZone&gt; AddZoneAsync(string zoneName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;HomeKit.HMZone&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zoneName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="zoneName">To be added.</param>
        <summary>Adds a none that is named <paramref name="zoneName" /> to the home and runs <paramref name="completionHandler" /> after it has been added.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous AddZone operation.  The value of the TResult parameter is of type System.Action&lt;HomeKit.HMZone,Foundation.NSError&gt;.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="AssignAccessory">
      <MemberSignature Language="C#" Value="public virtual void AssignAccessory (HomeKit.HMAccessory accessory, HomeKit.HMRoom room, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssignAccessory(class HomeKit.HMAccessory accessory, class HomeKit.HMRoom room, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("assignAccessory:toRoom:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="HomeKit.HMAccessory" />
        <Parameter Name="room" Type="HomeKit.HMRoom" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="accessory">To be added.</param>
        <param name="room">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Assigns <paramref name="accessory" /> to <paramref name="room" /> and runs <paramref name="completion" /> afer it has been assigned.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssignAccessoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task AssignAccessoryAsync (HomeKit.HMAccessory accessory, HomeKit.HMRoom room);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task AssignAccessoryAsync(class HomeKit.HMAccessory accessory, class HomeKit.HMRoom room) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="HomeKit.HMAccessory" />
        <Parameter Name="room" Type="HomeKit.HMRoom" />
      </Parameters>
      <Docs>
        <param name="accessory">To be added.</param>
        <param name="room">To be added.</param>
        <summary>Assigns <paramref name="accessory" /> to <paramref name="room" /> and runs <paramref name="completion" /> afer it has been assigned.</summary>
        <returns>A task that represents the asynchronous AssignAccessory operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentUser">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMUser CurrentUser { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HomeKit.HMUser CurrentUser" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("currentUser")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMUser</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The active <see cref="T:HomeKit.HMUser" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public HomeKit.IHMHomeDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HomeKit.IHMHomeDelegate Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>HomeKit.IHMHomeDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the HomeKit.IHMHomeDelegate model class which acts as the class delegate.</summary>
        <value>
          <para>The instance of the HomeKit.IHMHomeDelegate model class</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddAccessory">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeAccessoryEventArgs&gt; DidAddAccessory;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeAccessoryEventArgs&gt; DidAddAccessory" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeAccessoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddActionSet">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeActionSetEventArgs&gt; DidAddActionSet;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeActionSetEventArgs&gt; DidAddActionSet" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeActionSetEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddRoom">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeRoomEventArgs&gt; DidAddRoom;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeRoomEventArgs&gt; DidAddRoom" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeRoomEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddRoomToZone">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeRoomZoneEventArgs&gt; DidAddRoomToZone;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeRoomZoneEventArgs&gt; DidAddRoomToZone" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeRoomZoneEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddService">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeServiceServiceGroupEventArgs&gt; DidAddService;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeServiceServiceGroupEventArgs&gt; DidAddService" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeServiceServiceGroupEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddServiceGroup">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeServiceGroupEventArgs&gt; DidAddServiceGroup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeServiceGroupEventArgs&gt; DidAddServiceGroup" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeServiceGroupEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddTrigger">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeTriggerEventArgs&gt; DidAddTrigger;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeTriggerEventArgs&gt; DidAddTrigger" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeTriggerEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddUser">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeUserEventArgs&gt; DidAddUser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeUserEventArgs&gt; DidAddUser" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeUserEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAddZone">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeZoneEventArgs&gt; DidAddZone;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeZoneEventArgs&gt; DidAddZone" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeZoneEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidEncounterError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeErrorAccessoryEventArgs&gt; DidEncounterError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeErrorAccessoryEventArgs&gt; DidEncounterError" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeErrorAccessoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRemoveAccessory">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeAccessoryEventArgs&gt; DidRemoveAccessory;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeAccessoryEventArgs&gt; DidRemoveAccessory" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeAccessoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRemoveActionSet">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeActionSetEventArgs&gt; DidRemoveActionSet;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeActionSetEventArgs&gt; DidRemoveActionSet" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeActionSetEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRemoveRoom">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeRoomEventArgs&gt; DidRemoveRoom;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeRoomEventArgs&gt; DidRemoveRoom" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeRoomEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRemoveRoomFromZone">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeRoomZoneEventArgs&gt; DidRemoveRoomFromZone;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeRoomZoneEventArgs&gt; DidRemoveRoomFromZone" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeRoomZoneEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRemoveService">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeServiceServiceGroupEventArgs&gt; DidRemoveService;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeServiceServiceGroupEventArgs&gt; DidRemoveService" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeServiceServiceGroupEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRemoveServiceGroup">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeServiceGroupEventArgs&gt; DidRemoveServiceGroup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeServiceGroupEventArgs&gt; DidRemoveServiceGroup" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeServiceGroupEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRemoveTrigger">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeTriggerEventArgs&gt; DidRemoveTrigger;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeTriggerEventArgs&gt; DidRemoveTrigger" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeTriggerEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRemoveUser">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeUserEventArgs&gt; DidRemoveUser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeUserEventArgs&gt; DidRemoveUser" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeUserEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRemoveZone">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeZoneEventArgs&gt; DidRemoveZone;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeZoneEventArgs&gt; DidRemoveZone" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeZoneEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUnblockAccessory">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeAccessoryEventArgs&gt; DidUnblockAccessory;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeAccessoryEventArgs&gt; DidUnblockAccessory" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeAccessoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateAccessControlForCurrentUser">
      <MemberSignature Language="C#" Value="public event EventHandler DidUpdateAccessControlForCurrentUser;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidUpdateAccessControlForCurrentUser" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateActionsForActionSet">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeActionSetEventArgs&gt; DidUpdateActionsForActionSet;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeActionSetEventArgs&gt; DidUpdateActionsForActionSet" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeActionSetEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateHomeHubState">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeHubStateEventArgs&gt; DidUpdateHomeHubState;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeHubStateEventArgs&gt; DidUpdateHomeHubState" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeHubStateEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateNameForActionSet">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeActionSetEventArgs&gt; DidUpdateNameForActionSet;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeActionSetEventArgs&gt; DidUpdateNameForActionSet" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeActionSetEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateNameForHome">
      <MemberSignature Language="C#" Value="public event EventHandler DidUpdateNameForHome;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidUpdateNameForHome" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateNameForRoom">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeRoomEventArgs&gt; DidUpdateNameForRoom;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeRoomEventArgs&gt; DidUpdateNameForRoom" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeRoomEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateNameForServiceGroup">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeServiceGroupEventArgs&gt; DidUpdateNameForServiceGroup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeServiceGroupEventArgs&gt; DidUpdateNameForServiceGroup" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeServiceGroupEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateNameForTrigger">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeTriggerEventArgs&gt; DidUpdateNameForTrigger;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeTriggerEventArgs&gt; DidUpdateNameForTrigger" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeTriggerEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateNameForZone">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeZoneEventArgs&gt; DidUpdateNameForZone;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeZoneEventArgs&gt; DidUpdateNameForZone" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeZoneEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateRoom">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeRoomAccessoryEventArgs&gt; DidUpdateRoom;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeRoomAccessoryEventArgs&gt; DidUpdateRoom" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeRoomAccessoryEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateTrigger">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;HomeKit.HMHomeTriggerEventArgs&gt; DidUpdateTrigger;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class HomeKit.HMHomeTriggerEventArgs&gt; DidUpdateTrigger" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;HomeKit.HMHomeTriggerEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the HMHome object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the HMHome class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the HMHome ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteActionSet">
      <MemberSignature Language="C#" Value="public virtual void ExecuteActionSet (HomeKit.HMActionSet actionSet, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ExecuteActionSet(class HomeKit.HMActionSet actionSet, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("executeActionSet:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSet" Type="HomeKit.HMActionSet" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actionSet">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Runs the specified <paramref name="actionSet" /> and runs <paramref name="completion" /> afer it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteActionSetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ExecuteActionSetAsync (HomeKit.HMActionSet actionSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ExecuteActionSetAsync(class HomeKit.HMActionSet actionSet) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSet" Type="HomeKit.HMActionSet" />
      </Parameters>
      <Docs>
        <param name="actionSet">To be added.</param>
        <summary>Runs the specified <paramref name="actionSet" /> and runs <paramref name="completion" /> afer it has finished.</summary>
        <returns>A task that represents the asynchronous ExecuteActionSet operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetBuiltinActionSet">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMActionSet GetBuiltinActionSet (string actionSetType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class HomeKit.HMActionSet GetBuiltinActionSet(string actionSetType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("builtinActionSetOfType:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMActionSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSetType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionSetType">To be added.</param>
        <summary>Retrieve the built-in <see cref="T:HomeKit.HMActionSet" /> of the specified <paramref name="actionSeType" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHomeAccessControl">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMHomeAccessControl GetHomeAccessControl (HomeKit.HMUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class HomeKit.HMHomeAccessControl GetHomeAccessControl(class HomeKit.HMUser user) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("homeAccessControlForUser:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMHomeAccessControl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="HomeKit.HMUser" />
      </Parameters>
      <Docs>
        <param name="user">To be added.</param>
        <summary>Gets the <see cref="T:HomeKit.HMHomeAccessControl" /> for the specified <paramref name="user" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRoomForEntireHome">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMRoom GetRoomForEntireHome ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class HomeKit.HMRoom GetRoomForEntireHome() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("roomForEntireHome")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMRoom</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the room object that represents the entire home.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMService[] GetServices (Foundation.NSString[] serviceTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class HomeKit.HMService[] GetServices(class Foundation.NSString[] serviceTypes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("servicesWithTypes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMService[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceTypes" Type="Foundation.NSString[]" />
      </Parameters>
      <Docs>
        <param name="serviceTypes">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetServices">
      <MemberSignature Language="C#" Value="public HomeKit.HMService[] GetServices (HomeKit.HMServiceType serviceTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class HomeKit.HMService[] GetServices(valuetype HomeKit.HMServiceType serviceTypes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>HomeKit.HMService[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceTypes" Type="HomeKit.HMServiceType" />
      </Parameters>
      <Docs>
        <param name="serviceTypes">To be added.</param>
        <summary>Returns services that accessories in the home provide that are of type <paramref name="serviceTypes" />. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HomeHubState">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMHomeHubState HomeHubState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype HomeKit.HMHomeHubState HomeHubState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("homeHubState")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMHomeHubState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that tells whether the hub is connected, disconnected, or unavailable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManageUsers">
      <MemberSignature Language="C#" Value="public virtual void ManageUsers (Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ManageUsers(class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("manageUsersWithCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V11))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completion">To be added.</param>
        <summary>Displays a device selection user interface that allows the user manage users and their privileges, and then runs a handler when the user exits the UI.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ManageUsersAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ManageUsersAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ManageUsersAsync() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Displays a device selection user interface that allows the user manage users and their privileges, and then runs a handler when the user exits the UI.</summary>
        <returns>A task that represents the asynchronous ManageUsers operation</returns>
        <remarks>
          <para copied="true">The ManageUsersAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the name of the home.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Primary">
      <MemberSignature Language="C#" Value="public virtual bool Primary { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Primary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isPrimary")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that tells whether the receiver is the primary home for its manager.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessory">
      <MemberSignature Language="C#" Value="public virtual void RemoveAccessory (HomeKit.HMAccessory accessory, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAccessory(class HomeKit.HMAccessory accessory, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeAccessory:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="HomeKit.HMAccessory" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="accessory">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Removes <paramref name="accessory" /> from the home and runs <paramref name="completion" /> afer it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAccessoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveAccessoryAsync (HomeKit.HMAccessory accessory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveAccessoryAsync(class HomeKit.HMAccessory accessory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="HomeKit.HMAccessory" />
      </Parameters>
      <Docs>
        <param name="accessory">To be added.</param>
        <summary>Removes <paramref name="accessory" /> from the home and runs <paramref name="completion" /> afer it has finished.</summary>
        <returns>A task that represents the asynchronous RemoveAccessory operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveActionSet">
      <MemberSignature Language="C#" Value="public virtual void RemoveActionSet (HomeKit.HMActionSet actionSet, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveActionSet(class HomeKit.HMActionSet actionSet, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeActionSet:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSet" Type="HomeKit.HMActionSet" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actionSet">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Removes <paramref name="actionSet" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveActionSetAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveActionSetAsync (HomeKit.HMActionSet actionSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveActionSetAsync(class HomeKit.HMActionSet actionSet) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSet" Type="HomeKit.HMActionSet" />
      </Parameters>
      <Docs>
        <param name="actionSet">To be added.</param>
        <summary>Removes <paramref name="actionSet" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <returns>A task that represents the asynchronous RemoveActionSet operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveRoom">
      <MemberSignature Language="C#" Value="public virtual void RemoveRoom (HomeKit.HMRoom room, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveRoom(class HomeKit.HMRoom room, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeRoom:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="room" Type="HomeKit.HMRoom" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="room">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Removes <paramref name="room" /> from the home and runs <paramref name="completion" /> after it has finished..</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveRoomAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveRoomAsync (HomeKit.HMRoom room);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveRoomAsync(class HomeKit.HMRoom room) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="room" Type="HomeKit.HMRoom" />
      </Parameters>
      <Docs>
        <param name="room">To be added.</param>
        <summary>Removes <paramref name="room" /> from the home and runs <paramref name="completion" /> after it has finished..</summary>
        <returns>A task that represents the asynchronous RemoveRoom operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveServiceGroup">
      <MemberSignature Language="C#" Value="public virtual void RemoveServiceGroup (HomeKit.HMServiceGroup group, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveServiceGroup(class HomeKit.HMServiceGroup group, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeServiceGroup:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceGroup" Type="HomeKit.HMServiceGroup" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Removes <paramref name="group" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveServiceGroupAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveServiceGroupAsync (HomeKit.HMServiceGroup group);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveServiceGroupAsync(class HomeKit.HMServiceGroup group) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceGroup" Type="HomeKit.HMServiceGroup" />
      </Parameters>
      <Docs>
        <param name="group">To be added.</param>
        <summary>Removes <paramref name="group" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <returns>A task that represents the asynchronous RemoveServiceGroup operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveTrigger">
      <MemberSignature Language="C#" Value="public virtual void RemoveTrigger (HomeKit.HMTrigger trigger, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTrigger(class HomeKit.HMTrigger trigger, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeTrigger:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="HomeKit.HMTrigger" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="trigger">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Removes <paramref name="trigger" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTriggerAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveTriggerAsync (HomeKit.HMTrigger trigger);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveTriggerAsync(class HomeKit.HMTrigger trigger) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trigger" Type="HomeKit.HMTrigger" />
      </Parameters>
      <Docs>
        <param name="trigger">To be added.</param>
        <summary>Removes <paramref name="trigger" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <returns>A task that represents the asynchronous RemoveTrigger operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveUser">
      <MemberSignature Language="C#" Value="public virtual void RemoveUser (HomeKit.HMUser user, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveUser(class HomeKit.HMUser user, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeUser:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="HomeKit.HMUser" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="user">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Removes the user who is specified by <paramref name="userID" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveUserAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveUserAsync (HomeKit.HMUser user);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveUserAsync(class HomeKit.HMUser user) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="user" Type="HomeKit.HMUser" />
      </Parameters>
      <Docs>
        <param name="user">To be added.</param>
        <summary>Removes the user who is specified by <paramref name="userID" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <returns>A task that represents the asynchronous RemoveUser operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="RemoveZone">
      <MemberSignature Language="C#" Value="public virtual void RemoveZone (HomeKit.HMZone zone, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveZone(class HomeKit.HMZone zone, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeZone:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="HomeKit.HMZone" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="zone">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Removes <paramref name="zone" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveZoneAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task RemoveZoneAsync (HomeKit.HMZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task RemoveZoneAsync(class HomeKit.HMZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="HomeKit.HMZone" />
      </Parameters>
      <Docs>
        <param name="zone">To be added.</param>
        <summary>Removes <paramref name="zone" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <returns>A task that represents the asynchronous RemoveZone operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="Rooms">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMRoom[] Rooms { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HomeKit.HMRoom[] Rooms" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("rooms")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMRoom[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains all the rooms in the home.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ServiceGroups">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMServiceGroup[] ServiceGroups { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HomeKit.HMServiceGroup[] ServiceGroups" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("serviceGroups")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMServiceGroup[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains all the service groups in the home.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Triggers">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMTrigger[] Triggers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HomeKit.HMTrigger[] Triggers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("triggers")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMTrigger[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains all the triggers in the home.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnblockAccessory">
      <MemberSignature Language="C#" Value="public virtual void UnblockAccessory (HomeKit.HMAccessory accessory, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnblockAccessory(class HomeKit.HMAccessory accessory, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("unblockAccessory:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="HomeKit.HMAccessory" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="accessory">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Unblocks <paramref name="accessory" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnblockAccessoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UnblockAccessoryAsync (HomeKit.HMAccessory accessory);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UnblockAccessoryAsync(class HomeKit.HMAccessory accessory) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="accessory" Type="HomeKit.HMAccessory" />
      </Parameters>
      <Docs>
        <param name="accessory">To be added.</param>
        <summary>Unblocks <paramref name="accessory" /> from the home and runs <paramref name="completion" /> after it has finished.</summary>
        <returns>A task that represents the asynchronous UnblockAccessory operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UniqueIdentifier">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUuid UniqueIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUuid UniqueIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("uniqueIdentifier")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUuid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identifies this <see cref="T:HomeKit.HMHome" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateName">
      <MemberSignature Language="C#" Value="public virtual void UpdateName (string name, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateName(string name, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("updateName:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="completion">A handler that returns <see langword="null" /> on success, or an error object on failure.</param>
        <summary>Changes the home name to <paramref name="name" /> and runs <paramref name="completion" /> after it has finished..</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateNameAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task UpdateNameAsync (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task UpdateNameAsync(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Changes the home name to <paramref name="name" /> and runs <paramref name="completion" /> after it has finished..</summary>
        <returns>A task that represents the asynchronous UpdateName operation</returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="UserFailedAccessoriesKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString UserFailedAccessoriesKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString UserFailedAccessoriesKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("HMUserFailedAccessoriesKey", "HomeKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant HMUserFailedAccessoriesKey</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Users">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMUser[] Users { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HomeKit.HMUser[] Users" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("users")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMUser[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains all the users in the home.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>
          <para>The instance that will respond to events and data requests.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Zones">
      <MemberSignature Language="C#" Value="public virtual HomeKit.HMZone[] Zones { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class HomeKit.HMZone[] Zones" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("zones")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>HomeKit.HMZone[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains all the zones in the home.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
