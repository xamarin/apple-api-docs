<Type Name="SKFieldNode" FullName="SpriteKit.SKFieldNode">
  <TypeSignature Language="C#" Value="public class SKFieldNode : SpriteKit.SKNode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKFieldNode extends SpriteKit.SKNode" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SpriteKit.SKNode</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("SKFieldNode", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Applies physics effects within a portion of a scene.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKFieldNode_Ref/index.html">Apple documentation for <c>SKFieldNode</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKFieldNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKFieldNode (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SKFieldNode (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SKFieldNode (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimationSpeed">
      <MemberSignature Language="C#" Value="public virtual float AnimationSpeed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 AnimationSpeed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("animationSpeed")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAnimationSpeed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the rate at which noise or turbulence changes in noise and turbulence nodes.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryBitMask">
      <MemberSignature Language="C#" Value="public virtual uint CategoryBitMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 CategoryBitMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("categoryBitMask")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setCategoryBitMask:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A bitmask that is compared with <see cref="P:SpriteKit.SKPhysicsBody.FieldBitMask" /> to deterimine which physics bodies are affected by this field node.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CraeteVortexField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CraeteVortexField ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CraeteVortexField() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the method 'CreateVortexField' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new field that exerts a right-handed force on neighboring physics bodies, perpendicular to a ray draw from the field node to the physics body.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCustomField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateCustomField (SpriteKit.SKFieldForceEvaluator evaluator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateCustomField(class SpriteKit.SKFieldForceEvaluator evaluator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("customFieldWithEvaluationBlock:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="evaluator" Type="SpriteKit.SKFieldForceEvaluator">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDSKFieldForceEvaluator))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="evaluator">To be added.</param>
        <summary>Creates a field that applies a custom force, returned by <paramref name="evaluator" />, to physics bodies.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDragField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateDragField ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateDragField() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dragField")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a field that applies a force that opposes motion.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateElectricField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateElectricField ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateElectricField() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("electricField")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a field that applies a force that is proportional to the charge on a physics body, along a line from the node to the body.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLinearGravityField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateLinearGravityField (OpenTK.Vector4 direction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateLinearGravityField(valuetype OpenTK.Vector4 direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("linearGravityFieldWithVector:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="OpenTK.Vector4" />
      </Parameters>
      <Docs>
        <param name="direction">To be added.</param>
        <summary>Creates a node that accelerates bodies in the specified <paramref name="direction" />, relative to the node.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMagneticField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateMagneticField ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateMagneticField() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("magneticField")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a field that applies a Lorentz force to moving charges.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNoiseField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateNoiseField (nfloat smoothness, nfloat speed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateNoiseField(valuetype System.nfloat smoothness, valuetype System.nfloat speed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("noiseFieldWithSmoothness:animationSpeed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smoothness" Type="System.nfloat" />
        <Parameter Name="speed" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="smoothness">To be added.</param>
        <param name="speed">To be added.</param>
        <summary>Creates a node that applies randomized accelerations to physics bodies.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRadialGravityField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateRadialGravityField ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateRadialGravityField() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("radialGravityField")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a node that applies a central acceleration to neighboring physics bodies.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpringField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateSpringField ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateSpringField() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("springField")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a node that applies a force that is proportional to displacement.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTurbulenceField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateTurbulenceField (nfloat smoothness, nfloat speed);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateTurbulenceField(valuetype System.nfloat smoothness, valuetype System.nfloat speed) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("turbulenceFieldWithSmoothness:animationSpeed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="smoothness" Type="System.nfloat" />
        <Parameter Name="speed" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="smoothness">To be added.</param>
        <param name="speed">To be added.</param>
        <summary>Creates a node that applies randomized forces to neighboring physics bodies, with an average force that is proportional to the physics body's speed.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVelocityField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateVelocityField (OpenTK.Vector4 direction);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateVelocityField(valuetype OpenTK.Vector4 direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("velocityFieldWithVector:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="OpenTK.Vector4" />
      </Parameters>
      <Docs>
        <param name="direction">To be added.</param>
        <summary>Creates a field that assigns a constant velocity to physics bodies.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVelocityField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateVelocityField (SpriteKit.SKTexture velocityTexture);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateVelocityField(class SpriteKit.SKTexture velocityTexture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("velocityFieldWithTexture:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="velocityTexture" Type="SpriteKit.SKTexture" />
      </Parameters>
      <Docs>
        <param name="velocityTexture">To be added.</param>
        <summary>Creates a field that interprets a texture as an array of normal velocity vectors and applies that velocity to objects that ecounter the corresponding locations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateVortexField">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKFieldNode CreateVortexField ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKFieldNode CreateVortexField() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("vortexField")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKFieldNode</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a field that applies a force to objects in a direction perpendicular to a line between the field node and the other object.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Direction">
      <MemberSignature Language="C#" Value="public virtual OpenTK.Vector4 Direction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype OpenTK.Vector4 Direction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("direction")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.Vector4</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the direction vector for the field node.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether the field is active.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Exclusive">
      <MemberSignature Language="C#" Value="public virtual bool Exclusive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Exclusive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isExclusive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setExclusive:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether the field should override all other fields whose regions intersect with its own region.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Falloff">
      <MemberSignature Language="C#" Value="public virtual float Falloff { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Falloff" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("falloff")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setFalloff:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the exponent that controls the decay rate of the field.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumRadius">
      <MemberSignature Language="C#" Value="public virtual float MinimumRadius { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MinimumRadius" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("minimumRadius")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMinimumRadius:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the radius outside of which falloff begins to occur. The field inside the minimum radius is equal to the field at the minimim radius.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Region">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKRegion Region { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SpriteKit.SKRegion Region" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("region", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRegion:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKRegion</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the area where the field's effects are applied.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Smoothness">
      <MemberSignature Language="C#" Value="public virtual float Smoothness { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Smoothness" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("smoothness")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSmoothness:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value between 0 and 1.0 that determines the smoothness of noise. 1.0 is smooth.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Strength">
      <MemberSignature Language="C#" Value="public virtual float Strength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Strength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("strength")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setStrength:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the dimensionless strength of the effect. 1.0 represents a conventionally default strength.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Texture">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKTexture Texture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SpriteKit.SKTexture Texture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("texture", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTexture:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTexture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the texture that will be used to calculate velocities for velocity fields.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
