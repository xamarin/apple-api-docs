<Type Name="SKConstraint" FullName="SpriteKit.SKConstraint">
  <TypeSignature Language="C#" Value="public class SKConstraint : Foundation.NSObject, IDisposable, Foundation.INSCoding, Foundation.INSCopying" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKConstraint extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSCopying, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("SKConstraint", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.WatchOS, 3, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Mathematical constraint on a node's position or orientation.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKConstraint_Ref/index.html">Apple documentation for <c>SKConstraint</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKConstraint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKConstraint (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SKConstraint (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SKConstraint (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Copy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject Copy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDistance">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKConstraint CreateDistance (MonoTouch.SpriteKit.SKRange range, MonoTouch.SpriteKit.SKNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKConstraint CreateDistance(class MonoTouch.SpriteKit.SKRange range, class MonoTouch.SpriteKit.SKNode node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("distance:toNode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.SpriteKit.SKRange" />
        <Parameter Name="node" Type="MonoTouch.SpriteKit.SKNode" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="node">To be added.</param>
        <summary>Creates a constraint that keeps a node within a specified range of <paramref name="node" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDistance">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKConstraint CreateDistance (MonoTouch.SpriteKit.SKRange range, MonoTouch.CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKConstraint CreateDistance(class MonoTouch.SpriteKit.SKRange range, valuetype MonoTouch.CoreGraphics.CGPoint point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("distance:toPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.SpriteKit.SKRange" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="point">To be added.</param>
        <summary>Creates a constraint that keeps a node within a specified range of a <paramref name="point" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDistance">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKConstraint CreateDistance (MonoTouch.SpriteKit.SKRange range, MonoTouch.CoreGraphics.CGPoint point, MonoTouch.SpriteKit.SKNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKConstraint CreateDistance(class MonoTouch.SpriteKit.SKRange range, valuetype MonoTouch.CoreGraphics.CGPoint point, class MonoTouch.SpriteKit.SKNode node) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("distance:toPoint:inNode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.SpriteKit.SKRange" />
        <Parameter Name="node" Type="MonoTouch.SpriteKit.SKNode" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="point">To be added.</param>
        <param name="node">To be added.</param>
        <summary>Creates a constraint that keeps a node within a specified range of a point that is specified in the coordinate system of <paramref name="node" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrientToNode">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKConstraint CreateOrientToNode (MonoTouch.SpriteKit.SKNode node, MonoTouch.SpriteKit.SKRange radians);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKConstraint CreateOrientToNode(class MonoTouch.SpriteKit.SKNode node, class MonoTouch.SpriteKit.SKRange radians) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("orientToNode:offset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="MonoTouch.SpriteKit.SKNode" />
        <Parameter Name="radians" Type="MonoTouch.SpriteKit.SKRange" />
      </Parameters>
      <Docs>
        <param name="node">To be added.</param>
        <param name="radians">To be added.</param>
        <summary>Creates a rotation constraint that causes a node to face within <paramref name="radians" /> away from a line to <paramref name="node" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrientToPoint">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKConstraint CreateOrientToPoint (MonoTouch.CoreGraphics.CGPoint point, MonoTouch.SpriteKit.SKRange radians);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKConstraint CreateOrientToPoint(valuetype MonoTouch.CoreGraphics.CGPoint point, class MonoTouch.SpriteKit.SKRange radians) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("orientToPoint:offset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radians" Type="MonoTouch.SpriteKit.SKRange" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="radians">To be added.</param>
        <summary>Creates a rotation constraint that causes a node to face within <paramref name="radians" /> away from a line to <paramref name="point" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateOrientToPoint">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKConstraint CreateOrientToPoint (MonoTouch.CoreGraphics.CGPoint point, MonoTouch.SpriteKit.SKNode node, MonoTouch.SpriteKit.SKRange radians);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKConstraint CreateOrientToPoint(valuetype MonoTouch.CoreGraphics.CGPoint point, class MonoTouch.SpriteKit.SKNode node, class MonoTouch.SpriteKit.SKRange radians) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("orientToPoint:inNode:offset:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="MonoTouch.SpriteKit.SKNode" />
        <Parameter Name="radians" Type="MonoTouch.SpriteKit.SKRange" />
        <Parameter Name="point" Type="MonoTouch.CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="node">To be added.</param>
        <param name="radians">To be added.</param>
        <summary>Creates a rotation constraint that causes a node to face within <paramref name="radians" /> away from a line to a <paramref name="node" /> that is specified in the coordinate system of <paramref name="node" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRestriction">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKConstraint CreateRestriction (MonoTouch.SpriteKit.SKRange xRange, MonoTouch.SpriteKit.SKRange yRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKConstraint CreateRestriction(class MonoTouch.SpriteKit.SKRange xRange, class MonoTouch.SpriteKit.SKRange yRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionX:Y:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xRange" Type="MonoTouch.SpriteKit.SKRange" />
        <Parameter Name="yRange" Type="MonoTouch.SpriteKit.SKRange" />
      </Parameters>
      <Docs>
        <param name="xRange">To be added.</param>
        <param name="yRange">To be added.</param>
        <summary>Creates a constraint that restrains a node's position to a specified x-range and y-range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateXRestriction">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKConstraint CreateXRestriction (MonoTouch.SpriteKit.SKRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKConstraint CreateXRestriction(class MonoTouch.SpriteKit.SKRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionX:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.SpriteKit.SKRange" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>Creates a constraint that restrains a node's position to a specified x-range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateYRestriction">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKConstraint CreateYRestriction (MonoTouch.SpriteKit.SKRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKConstraint CreateYRestriction(class MonoTouch.SpriteKit.SKRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("positionY:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="MonoTouch.SpriteKit.SKRange" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>Creates a constraint that restrains a node's position to a spy-range..</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateZRotation">
      <MemberSignature Language="C#" Value="public static MonoTouch.SpriteKit.SKConstraint CreateZRotation (MonoTouch.SpriteKit.SKRange zRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SpriteKit.SKConstraint CreateZRotation(class MonoTouch.SpriteKit.SKRange zRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("zRotation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zRange" Type="MonoTouch.SpriteKit.SKRange" />
      </Parameters>
      <Docs>
        <param name="zRange">To be added.</param>
        <summary>Creates a constraint that restrains a node's rotatin to a specified z rotational range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("enabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether the constraint is enabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReferenceNode">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.SpriteKit.SKNode ReferenceNode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.SpriteKit.SKNode ReferenceNode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("referenceNode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setReferenceNode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SpriteKit.SKNode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the node in whose coordinate system that values are calculated. Setting this to <see langword="null" /> causes the current node's coordinate system to be used.</summary>
        <value>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>