<Type Name="SKTransition" FullName="SpriteKit.SKTransition">
  <TypeSignature Language="C#" Value="public class SKTransition : Foundation.NSObject, Foundation.INSCopying, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKTransition extends Foundation.NSObject implements class Foundation.INSCopying, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("SKTransition", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Transitions that can be used between <see cref="T:SpriteKit.SKScene" />s. Used with the <see cref="M:SpriteKit.SKView.PresentScene(SpriteKit.SKScene,SpriteKit.SKTransition)" /> method.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKTransition_Ref/index.html">Apple documentation for <c>SKTransition</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SKTransition (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SKTransition (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CrossFadeWithDuration">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition CrossFadeWithDuration (double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition CrossFadeWithDuration(float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("crossFadeWithDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="sec">To be added.</param>
        <summary>Creates a crossfade transition that lasts the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoorsCloseHorizontalWithDuration">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition DoorsCloseHorizontalWithDuration (double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition DoorsCloseHorizontalWithDuration(float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("doorsCloseHorizontalWithDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="sec">To be added.</param>
        <summary>Creates a horizontal closing door transition that lasts the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoorsCloseVerticalWithDuration">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition DoorsCloseVerticalWithDuration (double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition DoorsCloseVerticalWithDuration(float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("doorsCloseVerticalWithDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="sec">To be added.</param>
        <summary>Creates a vertical closing door transition that lasts the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoorsOpenHorizontalWithDuration">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition DoorsOpenHorizontalWithDuration (double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition DoorsOpenHorizontalWithDuration(float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("doorsOpenHorizontalWithDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="sec">To be added.</param>
        <summary>Creates a horizontal opening door transition that lasts the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoorsOpenVerticalWithDuration">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition DoorsOpenVerticalWithDuration (double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition DoorsOpenVerticalWithDuration(float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("doorsOpenVerticalWithDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="sec">To be added.</param>
        <summary>Creates a vertical opening door transition that lasts the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoorwayWithDuration">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition DoorwayWithDuration (double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition DoorwayWithDuration(float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("doorwayWithDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="sec">To be added.</param>
        <summary>Creates a doorway transition, zooming to the following scene, that lasts the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FadeWithColor">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition FadeWithColor (UIKit.UIColor color, double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition FadeWithColor(class UIKit.UIColor color, float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fadeWithColor:duration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="UIKit.UIColor" />
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="color">To be added.</param>
        <param name="sec">To be added.</param>
        <summary>Creates a transition that fades to <paramref name="color" /> and then to the following scene, lasting the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FadeWithDuration">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition FadeWithDuration (double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition FadeWithDuration(float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fadeWithDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="sec">To be added.</param>
        <summary>Creates a transition that fades to black and then to the following scene, lasting the specified number of seconds</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlipHorizontalWithDuration">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition FlipHorizontalWithDuration (double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition FlipHorizontalWithDuration(float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("flipHorizontalWithDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="sec">To be added.</param>
        <summary>Creates a transition that flips horizontally to the following scene over the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlipVerticalWithDuration">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition FlipVerticalWithDuration (double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition FlipVerticalWithDuration(float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("flipVerticalWithDuration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="sec">To be added.</param>
        <summary>Creates a transition that flips vertically to the following scene over the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveInWithDirection">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition MoveInWithDirection (SpriteKit.SKTransitionDirection direction, double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition MoveInWithDirection(valuetype SpriteKit.SKTransitionDirection direction, float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("moveInWithDirection:duration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="SpriteKit.SKTransitionDirection" />
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="direction">To be added.</param>
        <param name="sec">To be added.</param>
        <summary>Creates a transition where the new scene overlays the old scene in the specified direction, over the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PausesIncomingScene">
      <MemberSignature Language="C#" Value="public virtual bool PausesIncomingScene { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PausesIncomingScene" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("pausesIncomingScene")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPausesIncomingScene:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether the new scene is paused during the transition.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PausesOutgoingScene">
      <MemberSignature Language="C#" Value="public virtual bool PausesOutgoingScene { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PausesOutgoingScene" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("pausesOutgoingScene")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPausesOutgoingScene:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value that controls whether the old scene is paused during the transition.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushWithDirection">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition PushWithDirection (SpriteKit.SKTransitionDirection direction, double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition PushWithDirection(valuetype SpriteKit.SKTransitionDirection direction, float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pushWithDirection:duration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="SpriteKit.SKTransitionDirection" />
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="direction">To be added.</param>
        <param name="sec">To be added.</param>
        <summary>Creates a transition where the new scene pushes the old scene in the specified direction, over the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RevealWithDirection">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition RevealWithDirection (SpriteKit.SKTransitionDirection direction, double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition RevealWithDirection(valuetype SpriteKit.SKTransitionDirection direction, float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("revealWithDirection:duration:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="direction" Type="SpriteKit.SKTransitionDirection" />
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="direction">To be added.</param>
        <param name="sec">To be added.</param>
        <summary>Creates a transition where the old scene moves away in the specified direction, revealing the new scene over the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionWithCIFilter">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTransition TransitionWithCIFilter (CoreImage.CIFilter filter, double sec);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTransition TransitionWithCIFilter(class CoreImage.CIFilter filter, float64 sec) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("transitionWithCIFilter:duration:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTransition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="CoreImage.CIFilter" />
        <Parameter Name="sec" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="filter">To be added.</param>
        <param name="sec">To be added.</param>
        <summary>Creates a transition that applies the specified filter over the specified number of seconds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
