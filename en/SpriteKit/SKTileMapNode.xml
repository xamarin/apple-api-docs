<Type Name="SKTileMapNode" FullName="SpriteKit.SKTileMapNode">
  <TypeSignature Language="C#" Value="public class SKTileMapNode : SpriteKit.SKNode, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKTileMapNode extends SpriteKit.SKNode implements class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:SpriteKit.SKTileMapNode" />
  <TypeSignature Language="F#" Value="type SKTileMapNode = class&#xA;    inherit SKNode&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSCopying&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>SpriteKit.SKNode</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("SKTileMapNode", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:SpriteKit.SKNode" /> that encapsulates a tiled map and a <see cref="T:SpriteKit.SKTileSet" />.</summary>
    <remarks>
      <para>The <see cref="T:SpriteKit.SKTileMapNode" /> subclass of <see cref="T:SpriteKit.SKNode" /> allows developers to easily create and manipulate tile-based maps with a variety of geometries and perspectives. An <see cref="T:SpriteKit.SKTileMapNode" /> contains a <see cref="T:SpriteKit.SKTileSet" /> that defines the overall map. In addition, the <see cref="T:SpriteKit.SKTileSet" /> contains one or more <see cref="T:SpriteKit.SKTileGroup" /> objects, each of which represents one style of tile, which may have several representations.</para>
      <example>
        <code lang="C#"><![CDATA[
//Load tile set
var tileSet = SKTileSet.FromName ("MyTileSet");
//Create a 16x16 map
var tileNode = new SKTileMapNode (tileSet, 16, 16, tileSet.DefaultTileSize);

//Fill the node's grid with the default tile 
var tg = tileSet.DefaultTileGroup;
tileNode.Fill (tg);
    ]]></code>
        <para>The relationship between a <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:Intents.SKTileMapNode&amp;scope=Xamarin" title="T:Intents.SKTileMapNode">T:Intents.SKTileMapNode</a></format> and it's tiles is shown in the following image:</para>
        <para>
          <img href="~/SpriteKit/_images/SKTileMapNode.Hierarchy.png" />
        </para>
      </example>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/reference/SpriteKit/SKTileMapNode">Apple documentation for <c>SKTileMapNode</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKTileMapNode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKTileMapNode (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new SpriteKit.SKTileMapNode : Foundation.NSCoder -&gt; SpriteKit.SKTileMapNode" Usage="new SpriteKit.SKTileMapNode coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SKTileMapNode (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new SpriteKit.SKTileMapNode : Foundation.NSObjectFlag -&gt; SpriteKit.SKTileMapNode" Usage="new SpriteKit.SKTileMapNode t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal SKTileMapNode (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new SpriteKit.SKTileMapNode : nativeint -&gt; SpriteKit.SKTileMapNode" Usage="new SpriteKit.SKTileMapNode handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKTileMapNode (SpriteKit.SKTileSet tileSet, nuint columns, nuint rows, CoreGraphics.CGSize tileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class SpriteKit.SKTileSet tileSet, valuetype System.nuint columns, valuetype System.nuint rows, valuetype CoreGraphics.CGSize tileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.#ctor(SpriteKit.SKTileSet,System.nuint,System.nuint,CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="new SpriteKit.SKTileMapNode : SpriteKit.SKTileSet * nuint * nuint * CoreGraphics.CGSize -&gt; SpriteKit.SKTileMapNode" Usage="new SpriteKit.SKTileMapNode (tileSet, columns, rows, tileSize)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithTileSet:columns:rows:tileSize:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="tileSet" Type="SpriteKit.SKTileSet" />
        <Parameter Name="columns" Type="System.nuint" />
        <Parameter Name="rows" Type="System.nuint" />
        <Parameter Name="tileSize" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="tileSet">To be added.</param>
        <param name="columns">To be added.</param>
        <param name="rows">To be added.</param>
        <param name="tileSize">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKTileMapNode (SpriteKit.SKTileSet tileSet, nuint columns, nuint rows, CoreGraphics.CGSize tileSize, SpriteKit.SKTileGroup tileGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class SpriteKit.SKTileSet tileSet, valuetype System.nuint columns, valuetype System.nuint rows, valuetype CoreGraphics.CGSize tileSize, class SpriteKit.SKTileGroup tileGroup) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.#ctor(SpriteKit.SKTileSet,System.nuint,System.nuint,CoreGraphics.CGSize,SpriteKit.SKTileGroup)" />
      <MemberSignature Language="F#" Value="new SpriteKit.SKTileMapNode : SpriteKit.SKTileSet * nuint * nuint * CoreGraphics.CGSize * SpriteKit.SKTileGroup -&gt; SpriteKit.SKTileMapNode" Usage="new SpriteKit.SKTileMapNode (tileSet, columns, rows, tileSize, tileGroup)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithTileSet:columns:rows:tileSize:fillWithTileGroup:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="tileSet" Type="SpriteKit.SKTileSet" />
        <Parameter Name="columns" Type="System.nuint" />
        <Parameter Name="rows" Type="System.nuint" />
        <Parameter Name="tileSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="tileGroup" Type="SpriteKit.SKTileGroup" />
      </Parameters>
      <Docs>
        <param name="tileSet">To be added.</param>
        <param name="columns">To be added.</param>
        <param name="rows">To be added.</param>
        <param name="tileSize">To be added.</param>
        <param name="tileGroup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKTileMapNode (SpriteKit.SKTileSet tileSet, nuint columns, nuint rows, CoreGraphics.CGSize tileSize, SpriteKit.SKTileGroup[] tileGroupLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class SpriteKit.SKTileSet tileSet, valuetype System.nuint columns, valuetype System.nuint rows, valuetype CoreGraphics.CGSize tileSize, class SpriteKit.SKTileGroup[] tileGroupLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.#ctor(SpriteKit.SKTileSet,System.nuint,System.nuint,CoreGraphics.CGSize,SpriteKit.SKTileGroup[])" />
      <MemberSignature Language="F#" Value="new SpriteKit.SKTileMapNode : SpriteKit.SKTileSet * nuint * nuint * CoreGraphics.CGSize * SpriteKit.SKTileGroup[] -&gt; SpriteKit.SKTileMapNode" Usage="new SpriteKit.SKTileMapNode (tileSet, columns, rows, tileSize, tileGroupLayout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithTileSet:columns:rows:tileSize:tileGroupLayout:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="tileSet" Type="SpriteKit.SKTileSet" />
        <Parameter Name="columns" Type="System.nuint" />
        <Parameter Name="rows" Type="System.nuint" />
        <Parameter Name="tileSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="tileGroupLayout" Type="SpriteKit.SKTileGroup[]" />
      </Parameters>
      <Docs>
        <param name="tileSet">To be added.</param>
        <param name="columns">To be added.</param>
        <param name="rows">To be added.</param>
        <param name="tileSize">To be added.</param>
        <param name="tileGroupLayout">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPoint">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint AnchorPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint AnchorPoint" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.AnchorPoint" />
      <MemberSignature Language="F#" Value="member this.AnchorPoint : CoreGraphics.CGPoint with get, set" Usage="SpriteKit.SKTileMapNode.AnchorPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("anchorPoint", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAnchorPoint:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A <see cref="T:CoreGraphics.CGPoint" /> whose values, in the range [0..1] specify where, in the texture, the <see cref="P:SpriteKit.SKNode.Frame" /> is anchored.</summary>
        <value>The default value is [0.5, 0.5], anchoring the frame to the center of the texture.</value>
        <remarks>
          <para>The major use for this property is to change the point around which a tile is rotated. The default value of [0.5, 0.5] indicates the center of the texture.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AttributeValues">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary&lt;Foundation.NSString,SpriteKit.SKAttributeValue&gt; AttributeValues { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary`2&lt;class Foundation.NSString, class SpriteKit.SKAttributeValue&gt; AttributeValues" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.AttributeValues" />
      <MemberSignature Language="F#" Value="member this.AttributeValues : Foundation.NSDictionary&lt;Foundation.NSString, SpriteKit.SKAttributeValue&gt; with get, set" Usage="SpriteKit.SKTileMapNode.AttributeValues" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("attributeValues", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAttributeValues:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary&lt;Foundation.NSString,SpriteKit.SKAttributeValue&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a dictionary of attributes for the shader that is attached to this node..</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BlendMode">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKBlendMode BlendMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype SpriteKit.SKBlendMode BlendMode" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.BlendMode" />
      <MemberSignature Language="F#" Value="member this.BlendMode : SpriteKit.SKBlendMode with get, set" Usage="SpriteKit.SKTileMapNode.BlendMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("blendMode", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBlendMode:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKBlendMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the blending mode to use when blending this node into its parent's frame buffer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="SpriteKit.SKTileMapNode.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor Color" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.Color" />
      <MemberSignature Language="F#" Value="member this.Color : UIKit.UIColor with get, set" Usage="SpriteKit.SKTileMapNode.Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("color", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setColor:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the color to blend with the texture.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColorBlendFactor">
      <MemberSignature Language="C#" Value="public virtual nfloat ColorBlendFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat ColorBlendFactor" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.ColorBlendFactor" />
      <MemberSignature Language="F#" Value="member this.ColorBlendFactor : nfloat with get, set" Usage="SpriteKit.SKTileMapNode.ColorBlendFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("colorBlendFactor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setColorBlendFactor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a value in the range [0,1] that indicates how fully to blend of the texture with the <see cref="P:SpriteKit.SKTileMapNode.Color" /> property before drawing.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="sKTileMapNode.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTileMapNode Create (SpriteKit.SKTileSet tileSet, nuint columns, nuint rows, CoreGraphics.CGSize tileSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTileMapNode Create(class SpriteKit.SKTileSet tileSet, valuetype System.nuint columns, valuetype System.nuint rows, valuetype CoreGraphics.CGSize tileSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.Create(SpriteKit.SKTileSet,System.nuint,System.nuint,CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="static member Create : SpriteKit.SKTileSet * nuint * nuint * CoreGraphics.CGSize -&gt; SpriteKit.SKTileMapNode" Usage="SpriteKit.SKTileMapNode.Create (tileSet, columns, rows, tileSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tileMapNodeWithTileSet:columns:rows:tileSize:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTileMapNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileSet" Type="SpriteKit.SKTileSet" />
        <Parameter Name="columns" Type="System.nuint" />
        <Parameter Name="rows" Type="System.nuint" />
        <Parameter Name="tileSize" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="tileSet">To be added.</param>
        <param name="columns">To be added.</param>
        <param name="rows">To be added.</param>
        <param name="tileSize">To be added.</param>
        <summary>Factory method to create an <see cref="T:SpriteKit.SKTileMapNode" /> with the specified properties.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTileMapNode Create (SpriteKit.SKTileSet tileSet, nuint columns, nuint rows, CoreGraphics.CGSize tileSize, SpriteKit.SKTileGroup tileGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTileMapNode Create(class SpriteKit.SKTileSet tileSet, valuetype System.nuint columns, valuetype System.nuint rows, valuetype CoreGraphics.CGSize tileSize, class SpriteKit.SKTileGroup tileGroup) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.Create(SpriteKit.SKTileSet,System.nuint,System.nuint,CoreGraphics.CGSize,SpriteKit.SKTileGroup)" />
      <MemberSignature Language="F#" Value="static member Create : SpriteKit.SKTileSet * nuint * nuint * CoreGraphics.CGSize * SpriteKit.SKTileGroup -&gt; SpriteKit.SKTileMapNode" Usage="SpriteKit.SKTileMapNode.Create (tileSet, columns, rows, tileSize, tileGroup)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tileMapNodeWithTileSet:columns:rows:tileSize:fillWithTileGroup:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTileMapNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileSet" Type="SpriteKit.SKTileSet" />
        <Parameter Name="columns" Type="System.nuint" />
        <Parameter Name="rows" Type="System.nuint" />
        <Parameter Name="tileSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="tileGroup" Type="SpriteKit.SKTileGroup" />
      </Parameters>
      <Docs>
        <param name="tileSet">To be added.</param>
        <param name="columns">To be added.</param>
        <param name="rows">To be added.</param>
        <param name="tileSize">To be added.</param>
        <param name="tileGroup">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTileMapNode Create (SpriteKit.SKTileSet tileSet, nuint columns, nuint rows, CoreGraphics.CGSize tileSize, SpriteKit.SKTileGroup[] tileGroupLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTileMapNode Create(class SpriteKit.SKTileSet tileSet, valuetype System.nuint columns, valuetype System.nuint rows, valuetype CoreGraphics.CGSize tileSize, class SpriteKit.SKTileGroup[] tileGroupLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.Create(SpriteKit.SKTileSet,System.nuint,System.nuint,CoreGraphics.CGSize,SpriteKit.SKTileGroup[])" />
      <MemberSignature Language="F#" Value="static member Create : SpriteKit.SKTileSet * nuint * nuint * CoreGraphics.CGSize * SpriteKit.SKTileGroup[] -&gt; SpriteKit.SKTileMapNode" Usage="SpriteKit.SKTileMapNode.Create (tileSet, columns, rows, tileSize, tileGroupLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tileMapNodeWithTileSet:columns:rows:tileSize:tileGroupLayout:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTileMapNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileSet" Type="SpriteKit.SKTileSet" />
        <Parameter Name="columns" Type="System.nuint" />
        <Parameter Name="rows" Type="System.nuint" />
        <Parameter Name="tileSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="tileGroupLayout" Type="SpriteKit.SKTileGroup[]" />
      </Parameters>
      <Docs>
        <param name="tileSet">To be added.</param>
        <param name="columns">To be added.</param>
        <param name="rows">To be added.</param>
        <param name="tileSize">To be added.</param>
        <param name="tileGroupLayout">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="sKTileMapNode.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the SKTileMapNode object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the SKTileMapNode class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the SKTileMapNode ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableAutomapping">
      <MemberSignature Language="C#" Value="public virtual bool EnableAutomapping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnableAutomapping" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.EnableAutomapping" />
      <MemberSignature Language="F#" Value="member this.EnableAutomapping : bool with get, set" Usage="SpriteKit.SKTileMapNode.EnableAutomapping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("enableAutomapping")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEnableAutomapping:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If <see langword="true" />, <see cref="M:SpriteKit.SKTileMapNode.SetTileGroup(SpriteKit.SKTileGroup,SpriteKit.SKTileDefinition,System.nuint,System.nuint)" /> may modify neighboring tiles to better match the one that was placed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="sKTileMapNode.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public virtual void Fill (SpriteKit.SKTileGroup tileGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Fill(class SpriteKit.SKTileGroup tileGroup) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.Fill(SpriteKit.SKTileGroup)" />
      <MemberSignature Language="F#" Value="abstract member Fill : SpriteKit.SKTileGroup -&gt; unit&#xA;override this.Fill : SpriteKit.SKTileGroup -&gt; unit" Usage="sKTileMapNode.Fill tileGroup" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fillWithTileGroup:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileGroup" Type="SpriteKit.SKTileGroup" />
      </Parameters>
      <Docs>
        <param name="tileGroup">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Performs a flood-fill of the <see cref="T:SpriteKit.SKTileMapNode" /> using the specified <paramref name="tileGroup" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTileSet">
      <MemberSignature Language="C#" Value="public static SpriteKit.SKTileMapNode[] FromTileSet (SpriteKit.SKTileSet tileSet, nuint columns, nuint rows, CoreGraphics.CGSize tileSize, GameplayKit.GKNoiseMap noiseMap, Foundation.NSNumber[] thresholds);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class SpriteKit.SKTileMapNode[] FromTileSet(class SpriteKit.SKTileSet tileSet, valuetype System.nuint columns, valuetype System.nuint rows, valuetype CoreGraphics.CGSize tileSize, class GameplayKit.GKNoiseMap noiseMap, class Foundation.NSNumber[] thresholds) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.FromTileSet(SpriteKit.SKTileSet,System.nuint,System.nuint,CoreGraphics.CGSize,GameplayKit.GKNoiseMap,Foundation.NSNumber[])" />
      <MemberSignature Language="F#" Value="static member FromTileSet : SpriteKit.SKTileSet * nuint * nuint * CoreGraphics.CGSize * GameplayKit.GKNoiseMap * Foundation.NSNumber[] -&gt; SpriteKit.SKTileMapNode[]" Usage="SpriteKit.SKTileMapNode.FromTileSet (tileSet, columns, rows, tileSize, noiseMap, thresholds)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tileMapNodesWithTileSet:columns:rows:tileSize:fromNoiseMap:tileTypeNoiseMapThresholds:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTileMapNode[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileSet" Type="SpriteKit.SKTileSet" />
        <Parameter Name="columns" Type="System.nuint" />
        <Parameter Name="rows" Type="System.nuint" />
        <Parameter Name="tileSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="noiseMap" Type="GameplayKit.GKNoiseMap" />
        <Parameter Name="thresholds" Type="Foundation.NSNumber[]" />
      </Parameters>
      <Docs>
        <param name="tileSet">To be added.</param>
        <param name="columns">To be added.</param>
        <param name="rows">To be added.</param>
        <param name="tileSize">To be added.</param>
        <param name="noiseMap">To be added.</param>
        <param name="thresholds">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCenterOfTile">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint GetCenterOfTile (nuint column, nuint row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint GetCenterOfTile(valuetype System.nuint column, valuetype System.nuint row) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.GetCenterOfTile(System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetCenterOfTile : nuint * nuint -&gt; CoreGraphics.CGPoint&#xA;override this.GetCenterOfTile : nuint * nuint -&gt; CoreGraphics.CGPoint" Usage="sKTileMapNode.GetCenterOfTile (column, row)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("centerOfTileAtColumn:row:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.nuint" />
        <Parameter Name="row" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="column">To be added.</param>
        <param name="row">To be added.</param>
        <summary>Retrieves the <see cref="T:CoreGraphics.CGPoint" /> at the center of the specified position.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTileColumnIndex">
      <MemberSignature Language="C#" Value="public virtual nuint GetTileColumnIndex (CoreGraphics.CGPoint position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GetTileColumnIndex(valuetype CoreGraphics.CGPoint position) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.GetTileColumnIndex(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetTileColumnIndex : CoreGraphics.CGPoint -&gt; nuint&#xA;override this.GetTileColumnIndex : CoreGraphics.CGPoint -&gt; nuint" Usage="sKTileMapNode.GetTileColumnIndex position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tileColumnIndexFromPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>Gets the column index (X value) for the specified <paramref name="position" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTileDefinition">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKTileDefinition GetTileDefinition (nuint column, nuint row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SpriteKit.SKTileDefinition GetTileDefinition(valuetype System.nuint column, valuetype System.nuint row) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.GetTileDefinition(System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetTileDefinition : nuint * nuint -&gt; SpriteKit.SKTileDefinition&#xA;override this.GetTileDefinition : nuint * nuint -&gt; SpriteKit.SKTileDefinition" Usage="sKTileMapNode.GetTileDefinition (column, row)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tileDefinitionAtColumn:row:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTileDefinition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.nuint" />
        <Parameter Name="row" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="column">To be added.</param>
        <param name="row">To be added.</param>
        <summary>Gets the <see cref="T:SpriteKit.SKTileDefinition" /> for the tile at the specified position.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTileGroup">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKTileGroup GetTileGroup (nuint column, nuint row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SpriteKit.SKTileGroup GetTileGroup(valuetype System.nuint column, valuetype System.nuint row) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.GetTileGroup(System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetTileGroup : nuint * nuint -&gt; SpriteKit.SKTileGroup&#xA;override this.GetTileGroup : nuint * nuint -&gt; SpriteKit.SKTileGroup" Usage="sKTileMapNode.GetTileGroup (column, row)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tileGroupAtColumn:row:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTileGroup</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="column" Type="System.nuint" />
        <Parameter Name="row" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="column">To be added.</param>
        <param name="row">To be added.</param>
        <summary>Gets the <see cref="T:SpriteKit.SKTileGroup" /> for the tile at the specified position.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTileRowIndex">
      <MemberSignature Language="C#" Value="public virtual nuint GetTileRowIndex (CoreGraphics.CGPoint position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GetTileRowIndex(valuetype CoreGraphics.CGPoint position) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.GetTileRowIndex(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetTileRowIndex : CoreGraphics.CGPoint -&gt; nuint&#xA;override this.GetTileRowIndex : CoreGraphics.CGPoint -&gt; nuint" Usage="sKTileMapNode.GetTileRowIndex position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tileRowIndexFromPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>Gets the row index (Y value) for the specified <paramref name="position" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKAttributeValue GetValue (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SpriteKit.SKAttributeValue GetValue(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.GetValue(System.String)" />
      <MemberSignature Language="F#" Value="override this.GetValue : string -&gt; SpriteKit.SKAttributeValue" Usage="sKTileMapNode.GetValue key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueForAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKAttributeValue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">The key that specifies the attribute whose value to get.</param>
        <summary>Returns the value for the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LightingBitMask">
      <MemberSignature Language="C#" Value="public virtual uint LightingBitMask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance unsigned int32 LightingBitMask" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.LightingBitMask" />
      <MemberSignature Language="F#" Value="member this.LightingBitMask : uint32 with get, set" Usage="SpriteKit.SKTileMapNode.LightingBitMask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("lightingBitMask")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setLightingBitMask:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the bit mask that is ANDed with the <see cref="P:SpriteKit.SKLightNode.CategoryBitMask" /> to determine if the light will be applied.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MapSize">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize MapSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize MapSize" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.MapSize" />
      <MemberSignature Language="F#" Value="member this.MapSize : CoreGraphics.CGSize" Usage="SpriteKit.SKTileMapNode.MapSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("mapSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size, in points, of the <see cref="T:SpriteKit.SKTileMapNode" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfColumns">
      <MemberSignature Language="C#" Value="public virtual nuint NumberOfColumns { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint NumberOfColumns" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.NumberOfColumns" />
      <MemberSignature Language="F#" Value="member this.NumberOfColumns : nuint with get, set" Usage="SpriteKit.SKTileMapNode.NumberOfColumns" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("numberOfColumns")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setNumberOfColumns:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of columns in the map.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfRows">
      <MemberSignature Language="C#" Value="public virtual nuint NumberOfRows { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint NumberOfRows" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.NumberOfRows" />
      <MemberSignature Language="F#" Value="member this.NumberOfRows : nuint with get, set" Usage="SpriteKit.SKTileMapNode.NumberOfRows" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("numberOfRows")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setNumberOfRows:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of rows in the map.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTileGroup">
      <MemberSignature Language="C#" Value="public virtual void SetTileGroup (SpriteKit.SKTileGroup tileGroup, nuint column, nuint row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTileGroup(class SpriteKit.SKTileGroup tileGroup, valuetype System.nuint column, valuetype System.nuint row) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.SetTileGroup(SpriteKit.SKTileGroup,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member SetTileGroup : SpriteKit.SKTileGroup * nuint * nuint -&gt; unit&#xA;override this.SetTileGroup : SpriteKit.SKTileGroup * nuint * nuint -&gt; unit" Usage="sKTileMapNode.SetTileGroup (tileGroup, column, row)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setTileGroup:forColumn:row:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileGroup" Type="SpriteKit.SKTileGroup" />
        <Parameter Name="column" Type="System.nuint" />
        <Parameter Name="row" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="tileGroup">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="column">To be added.</param>
        <param name="row">To be added.</param>
        <summary>Sets the <see cref="T:SpriteKit.SKTileGroup" /> at the specified location.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTileGroup">
      <MemberSignature Language="C#" Value="public virtual void SetTileGroup (SpriteKit.SKTileGroup tileGroup, SpriteKit.SKTileDefinition tileDefinition, nuint column, nuint row);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTileGroup(class SpriteKit.SKTileGroup tileGroup, class SpriteKit.SKTileDefinition tileDefinition, valuetype System.nuint column, valuetype System.nuint row) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.SetTileGroup(SpriteKit.SKTileGroup,SpriteKit.SKTileDefinition,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member SetTileGroup : SpriteKit.SKTileGroup * SpriteKit.SKTileDefinition * nuint * nuint -&gt; unit&#xA;override this.SetTileGroup : SpriteKit.SKTileGroup * SpriteKit.SKTileDefinition * nuint * nuint -&gt; unit" Usage="sKTileMapNode.SetTileGroup (tileGroup, tileDefinition, column, row)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setTileGroup:andTileDefinition:forColumn:row:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tileGroup" Type="SpriteKit.SKTileGroup" />
        <Parameter Name="tileDefinition" Type="SpriteKit.SKTileDefinition" />
        <Parameter Name="column" Type="System.nuint" />
        <Parameter Name="row" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="tileGroup">To be added.</param>
        <param name="tileDefinition">To be added.</param>
        <param name="column">To be added.</param>
        <param name="row">To be added.</param>
        <summary>Sets the <paramref name="tileGroup" /> and <paramref name="tileDefinition" /> at the specified location.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (SpriteKit.SKAttributeValue value, string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(class SpriteKit.SKAttributeValue value, string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKTileMapNode.SetValue(SpriteKit.SKAttributeValue,System.String)" />
      <MemberSignature Language="F#" Value="override this.SetValue : SpriteKit.SKAttributeValue * string -&gt; unit" Usage="sKTileMapNode.SetValue (value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setValue:forAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="SpriteKit.SKAttributeValue" />
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">The attribute value to set.</param>
        <param name="key">The key for the attribute to set.</param>
        <summary>Sets the attribute that is identified by <paramref name="key" /> to <paramref name="value" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shader">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKShader Shader { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SpriteKit.SKShader Shader" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.Shader" />
      <MemberSignature Language="F#" Value="member this.Shader : SpriteKit.SKShader with get, set" Usage="SpriteKit.SKTileMapNode.Shader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shader", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShader:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKShader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If not <see langword="null" />, a <see cref="T:SpriteKit.SKShader" /> applied to each tile in the map.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSet">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKTileSet TileSet { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SpriteKit.SKTileSet TileSet" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.TileSet" />
      <MemberSignature Language="F#" Value="member this.TileSet : SpriteKit.SKTileSet with get, set" Usage="SpriteKit.SKTileMapNode.TileSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("tileSet", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTileSet:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKTileSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:SpriteKit.SKTileSet" /> used by the <see cref="T:SpriteKit.SKTileMapNode" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TileSize">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize TileSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize TileSize" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKTileMapNode.TileSize" />
      <MemberSignature Language="F#" Value="member this.TileSize : CoreGraphics.CGSize with get, set" Usage="SpriteKit.SKTileMapNode.TileSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("tileSize", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTileSize:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the size, in points, of the bounding rectangle of a single tile within the map.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
