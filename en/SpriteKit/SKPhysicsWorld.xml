<Type Name="SKPhysicsWorld" FullName="SpriteKit.SKPhysicsWorld">
  <TypeSignature Language="C#" Value="public class SKPhysicsWorld : Foundation.NSObject, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SKPhysicsWorld extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:SpriteKit.SKPhysicsWorld" />
  <TypeSignature Language="F#" Value="type SKPhysicsWorld = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("SKPhysicsWorld", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages the physics for a <see cref="T:SpriteKit.SKScene" />.</summary>
    <remarks>
      <para>Every <see cref="T:SpriteKit.SKScene" /> has a <see cref="P:SpriteKit.SKScene.PhysicsWorld" /> property that holds a <see cref="T:SpriteKit.SKPhysicsWorld" /> object that manages the physics for that scene.</para>
      <para>The <see cref="T:SpriteKit.SKPhysicsWorld" /> has several responsibilities:</para>
      <para>
        <list type="bullet">
          <item>
            <term>Providing global values such as <see cref="P:SpriteKit.SKPhysicsWorld.Gravity" />.</term>
          </item>
          <item>
            <term>Connecting <see cref="T:SpriteKit.SKPhysicsBody" />s with the <see cref="M:SpriteKit.SKPhysicsWorld.AddJoint(SpriteKit.SKPhysicsJoint)" /> method.</term>
          </item>
          <item>
            <term>Raising events when <see cref="T:SpriteKit.SKPhysicsBody" /> begin or end contact with each other (see the <see cref="P:SpriteKit.SKPhysicsWorld.ContactDelegate" /> property and the <see cref="E:SpriteKit.SKPhysicsWorld.DidBeginContact" /> and <see cref="E:SpriteKit.SKPhysicsWorld.DidEndContact" /> methods).</term>
          </item>
          <item>
            <term>Enumerating bodies that intersect geometry (<see cref="M:SpriteKit.SKPhysicsWorld.EnumerateBodies(CoreGraphics.CGPoint,CoreGraphics.CGPoint,SpriteKit.SKPhysicsWorldBodiesAlongRayStartEnumeratorHandler)" /> and <see cref="M:SpriteKit.SKPhysicsWorld.GetBody(CoreGraphics.CGPoint,CoreGraphics.CGPoint)" /> methods).</term>
          </item>
        </list>
      </para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/SpriteKit/Reference/SKPhysicsWorld_Ref/index.html">Apple documentation for <c>SKPhysicsWorld</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SKPhysicsWorld (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new SpriteKit.SKPhysicsWorld : Foundation.NSCoder -&gt; SpriteKit.SKPhysicsWorld" Usage="new SpriteKit.SKPhysicsWorld coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SKPhysicsWorld (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new SpriteKit.SKPhysicsWorld : Foundation.NSObjectFlag -&gt; SpriteKit.SKPhysicsWorld" Usage="new SpriteKit.SKPhysicsWorld t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal SKPhysicsWorld (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new SpriteKit.SKPhysicsWorld : nativeint -&gt; SpriteKit.SKPhysicsWorld" Usage="new SpriteKit.SKPhysicsWorld handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddJoint">
      <MemberSignature Language="C#" Value="public virtual void AddJoint (SpriteKit.SKPhysicsJoint joint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddJoint(class SpriteKit.SKPhysicsJoint joint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.AddJoint(SpriteKit.SKPhysicsJoint)" />
      <MemberSignature Language="F#" Value="abstract member AddJoint : SpriteKit.SKPhysicsJoint -&gt; unit&#xA;override this.AddJoint : SpriteKit.SKPhysicsJoint -&gt; unit" Usage="sKPhysicsWorld.AddJoint joint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addJoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joint" Type="SpriteKit.SKPhysicsJoint" />
      </Parameters>
      <Docs>
        <param name="joint">The <see cref="T:SpriteKit.SKPhysicsJoint" /> to be added.</param>
        <summary>Adds a <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Sprite%20Kit%20SKJoint&amp;scope=Xamarin" title="T:SpriteKit.SKPhysicsJoint">T:SpriteKit.SKPhysicsJoint</a></format> to the physics simulation.</summary>
        <remarks>
          <para>The <see cref="T:SpriteKit.SKNode" />s whose <see cref="P:SpriteKit.SKNode.PhysicsBody" />s are associated with the <paramref name="joint" /> must be added to the <see cref="T:SpriteKit.SKScene" /> before calling this method, or a segfault will result. The following example demonstrates the necessary order:</para>
          <example>
            <code lang="C#"><![CDATA[
var joint = SKPhysicsJointFixed.Create(node1.PhysicsBody, node1.PhysicsBody, node1.Position);
//mySkScene.PhysicsWorld.AddJoint(joint); //NO. This will segfault if node1 or node2 not in mySkScene
mySkScene.AddChild(node1);
mySkScene.AddChild(node2);
mySkScene.PhysicsWorld.AddJoint(joint); //This works              
              ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKPhysicsWorld.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="SpriteKit.SKPhysicsWorld.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContactDelegate">
      <MemberSignature Language="C#" Value="public SpriteKit.ISKPhysicsContactDelegate ContactDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class SpriteKit.ISKPhysicsContactDelegate ContactDelegate" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKPhysicsWorld.ContactDelegate" />
      <MemberSignature Language="F#" Value="member this.ContactDelegate : SpriteKit.ISKPhysicsContactDelegate with get, set" Usage="SpriteKit.SKPhysicsWorld.ContactDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.ISKPhysicsContactDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A delegate object that can handle events relating to collisions between the physics bodies in the simulation.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidBeginContact">
      <MemberSignature Language="C#" Value="public event EventHandler DidBeginContact;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidBeginContact" />
      <MemberSignature Language="DocId" Value="E:SpriteKit.SKPhysicsWorld.DidBeginContact" />
      <MemberSignature Language="F#" Value="member this.DidBeginContact : EventHandler " Usage="member this.DidBeginContact : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakContactDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidEndContact">
      <MemberSignature Language="C#" Value="public event EventHandler DidEndContact;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidEndContact" />
      <MemberSignature Language="DocId" Value="E:SpriteKit.SKPhysicsWorld.DidEndContact" />
      <MemberSignature Language="F#" Value="member this.DidEndContact : EventHandler " Usage="member this.DidEndContact : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakContactDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="sKPhysicsWorld.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the SKPhysicsWorld object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the SKPhysicsWorld class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the SKPhysicsWorld ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="sKPhysicsWorld.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateBodies">
      <MemberSignature Language="C#" Value="public virtual void EnumerateBodies (CoreGraphics.CGPoint point, SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler enumeratorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateBodies(valuetype CoreGraphics.CGPoint point, class SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler enumeratorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.EnumerateBodies(CoreGraphics.CGPoint,SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateBodies : CoreGraphics.CGPoint * SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler -&gt; unit&#xA;override this.EnumerateBodies : CoreGraphics.CGPoint * SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler -&gt; unit" Usage="sKPhysicsWorld.EnumerateBodies (point, enumeratorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateBodiesAtPoint:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="enumeratorHandler" Type="SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDSKPhysicsWorldBodiesEnumeratorHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="enumeratorHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateBodies">
      <MemberSignature Language="C#" Value="public virtual void EnumerateBodies (CoreGraphics.CGRect rect, SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler enumeratorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateBodies(valuetype CoreGraphics.CGRect rect, class SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler enumeratorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.EnumerateBodies(CoreGraphics.CGRect,SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateBodies : CoreGraphics.CGRect * SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler -&gt; unit&#xA;override this.EnumerateBodies : CoreGraphics.CGRect * SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler -&gt; unit" Usage="sKPhysicsWorld.EnumerateBodies (rect, enumeratorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateBodiesInRect:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="enumeratorHandler" Type="SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDSKPhysicsWorldBodiesEnumeratorHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="enumeratorHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateBodies">
      <MemberSignature Language="C#" Value="public virtual void EnumerateBodies (CoreGraphics.CGPoint start, CoreGraphics.CGPoint end, SpriteKit.SKPhysicsWorldBodiesAlongRayStartEnumeratorHandler enumeratorHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateBodies(valuetype CoreGraphics.CGPoint start, valuetype CoreGraphics.CGPoint end, class SpriteKit.SKPhysicsWorldBodiesAlongRayStartEnumeratorHandler enumeratorHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.EnumerateBodies(CoreGraphics.CGPoint,CoreGraphics.CGPoint,SpriteKit.SKPhysicsWorldBodiesAlongRayStartEnumeratorHandler)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateBodies : CoreGraphics.CGPoint * CoreGraphics.CGPoint * SpriteKit.SKPhysicsWorldBodiesAlongRayStartEnumeratorHandler -&gt; unit&#xA;override this.EnumerateBodies : CoreGraphics.CGPoint * CoreGraphics.CGPoint * SpriteKit.SKPhysicsWorldBodiesAlongRayStartEnumeratorHandler -&gt; unit" Usage="sKPhysicsWorld.EnumerateBodies (start, end, enumeratorHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateBodiesAlongRayStart:end:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="CoreGraphics.CGPoint" />
        <Parameter Name="end" Type="CoreGraphics.CGPoint" />
        <Parameter Name="enumeratorHandler" Type="SpriteKit.SKPhysicsWorldBodiesAlongRayStartEnumeratorHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDSKPhysicsWorldBodiesAlongRayStartEnumeratorHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="end">To be added.</param>
        <param name="enumeratorHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBody">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKPhysicsBody GetBody (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SpriteKit.SKPhysicsBody GetBody(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.GetBody(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetBody : CoreGraphics.CGPoint -&gt; SpriteKit.SKPhysicsBody&#xA;override this.GetBody : CoreGraphics.CGPoint -&gt; SpriteKit.SKPhysicsBody" Usage="sKPhysicsWorld.GetBody point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("bodyAtPoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKPhysicsBody</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>Returns the first <see cref="T:SpriteKit.SKPhysicsBody" /> found that contains a point.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:SpriteKit.SKPhysicsWorld.EnumerateBodies(System.Drawing.PointF,SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler)" />
      </Docs>
    </Member>
    <Member MemberName="GetBody">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKPhysicsBody GetBody (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SpriteKit.SKPhysicsBody GetBody(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.GetBody(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member GetBody : CoreGraphics.CGRect -&gt; SpriteKit.SKPhysicsBody&#xA;override this.GetBody : CoreGraphics.CGRect -&gt; SpriteKit.SKPhysicsBody" Usage="sKPhysicsWorld.GetBody rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("bodyInRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKPhysicsBody</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>Returns the first <see cref="T:SpriteKit.SKPhysicsBody" /> whose shape intersects a rectangle.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:SpriteKit.SKPhysicsWorld.EnumerateBodies(System.Drawing.RectangleF,SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler)" />
      </Docs>
    </Member>
    <Member MemberName="GetBody">
      <MemberSignature Language="C#" Value="public virtual SpriteKit.SKPhysicsBody GetBody (CoreGraphics.CGPoint rayStart, CoreGraphics.CGPoint rayEnd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class SpriteKit.SKPhysicsBody GetBody(valuetype CoreGraphics.CGPoint rayStart, valuetype CoreGraphics.CGPoint rayEnd) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.GetBody(CoreGraphics.CGPoint,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetBody : CoreGraphics.CGPoint * CoreGraphics.CGPoint -&gt; SpriteKit.SKPhysicsBody&#xA;override this.GetBody : CoreGraphics.CGPoint * CoreGraphics.CGPoint -&gt; SpriteKit.SKPhysicsBody" Usage="sKPhysicsWorld.GetBody (rayStart, rayEnd)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("bodyAlongRayStart:end:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>SpriteKit.SKPhysicsBody</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rayStart" Type="CoreGraphics.CGPoint" />
        <Parameter Name="rayEnd" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="rayStart">To be added.</param>
        <param name="rayEnd">To be added.</param>
        <summary>Returns the first <see cref="T:SpriteKit.SKPhysicsBody" /> that intersects a ray defined by two points.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Note that this method returns bodies along a ray, which starts at <paramref name="start" /> but extends infinitely past <paramref name="end" />.</para>
        </remarks>
        <altmember cref="M:SpriteKit.SKPhysicsWorld.EnumerateBodies(System.Drawing.PointF, System.Drawing.PointF,SpriteKit.SKPhysicsWorldBodiesEnumeratorHandler)" />
      </Docs>
    </Member>
    <Member MemberName="Gravity">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGVector Gravity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGVector Gravity" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKPhysicsWorld.Gravity" />
      <MemberSignature Language="F#" Value="member this.Gravity : CoreGraphics.CGVector with get, set" Usage="SpriteKit.SKPhysicsWorld.Gravity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("gravity")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setGravity:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGVector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A vector representing gravitational acceleration.</summary>
        <value>The default value of (0, -9.8) mimics Earth standard gravity of 9.78 m/sec^2. Setting the value to (0,0) effectively turns off gravity.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:SpriteKite.SKPhysicsBody.AffectedByGravity" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAllJoints">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllJoints ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllJoints() cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.RemoveAllJoints" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllJoints : unit -&gt; unit&#xA;override this.RemoveAllJoints : unit -&gt; unit" Usage="sKPhysicsWorld.RemoveAllJoints " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeAllJoints")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all <see cref="T:SpriteKit.SKPhysicsJoint" />s.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveJoint">
      <MemberSignature Language="C#" Value="public virtual void RemoveJoint (SpriteKit.SKPhysicsJoint joint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveJoint(class SpriteKit.SKPhysicsJoint joint) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.RemoveJoint(SpriteKit.SKPhysicsJoint)" />
      <MemberSignature Language="F#" Value="abstract member RemoveJoint : SpriteKit.SKPhysicsJoint -&gt; unit&#xA;override this.RemoveJoint : SpriteKit.SKPhysicsJoint -&gt; unit" Usage="sKPhysicsWorld.RemoveJoint joint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeJoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="joint" Type="SpriteKit.SKPhysicsJoint" />
      </Parameters>
      <Docs>
        <param name="joint">To be added.</param>
        <summary>Removes the specified <see cref="T:SpriteKit.SKPhysicsJoint" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SampleFields">
      <MemberSignature Language="C#" Value="public virtual OpenTK.Vector3 SampleFields (OpenTK.Vector3 position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype OpenTK.Vector3 SampleFields(valuetype OpenTK.Vector3 position) cil managed" />
      <MemberSignature Language="DocId" Value="M:SpriteKit.SKPhysicsWorld.SampleFields(OpenTK.Vector3)" />
      <MemberSignature Language="F#" Value="abstract member SampleFields : OpenTK.Vector3 -&gt; OpenTK.Vector3&#xA;override this.SampleFields : OpenTK.Vector3 -&gt; OpenTK.Vector3" Usage="sKPhysicsWorld.SampleFields position" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("sampleFieldsAt:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.Vector3</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="OpenTK.Vector3" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <summary>Returns the net effect of all fields in the scene at <paramref name="position" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Speed">
      <MemberSignature Language="C#" Value="public virtual nfloat Speed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Speed" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKPhysicsWorld.Speed" />
      <MemberSignature Language="F#" Value="member this.Speed : nfloat with get, set" Usage="SpriteKit.SKPhysicsWorld.Speed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("speed")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSpeed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The rate at which the physics simulation runs.</summary>
        <value>The default value is 1.0. A value of 0.0 pauses the simulation.</value>
        <remarks>
          <para>This is a multiplier for the rate at which time passes in the physics simulation. For instance, a value of 2.0 will cause the physics to run twice as fast, while a value of 0.5 will halve the rate.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakContactDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakContactDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakContactDelegate" />
      <MemberSignature Language="DocId" Value="P:SpriteKit.SKPhysicsWorld.WeakContactDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakContactDelegate : Foundation.NSObject with get, set" Usage="SpriteKit.SKPhysicsWorld.WeakContactDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("contactDelegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setContactDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("contactDelegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setContactDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the delegate that is called when contacts occur.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
