<Namespace Name="GameController">
  <Docs>
    <summary>The GameController namespace provides support for external game controllers.</summary>
    <remarks>
      <para>The Game Controller namespace was added in iOS 7 and adds support for game controllers.</para>
      <para>Game controllers come in two forms: "form-fitting" controllers that contain an iOS device and "extended wireless" controllers that wirelessly connect to an iOS device or a Mac.</para>
      <para>Game controllers must be optional components: game developers must make their game playable by users who do not have game controllers.</para>
      <para>Form-fitting controllers are automatically discovered by the system. Extended wireless controllers are discovered by the system subsequent to the application developer calling <see cref="M:GameController.GCController.StartWirelessControllerDiscovery" /> and will cause the <see cref="M:GameController.GCController+Notifications.ObserveDidConnect" /> notification handler to fire. When wireless controller disconnect, the <see cref="M:GameController.GCController+Notifications.ObserveDidDisconnect" /> notification fires.</para>
      <para>There are two supported profiles for Game Controllers: <see cref="T:GameController.GCGamepad" /> and <see cref="T:GameController.CGExtendedGamepad" />. A <see cref="T:GameController.GCController" /> will have a non-null value for either its <see cref="P:GameController.CGController.Gamepad" /> or its <see cref="P:GameController.CGController.ExtendedGamepad" /> property, the application developer must read those to determine the type. </para>
      <para>
        <see cref="T:GameController.CGGamepad" />s have two shoulder buttons, a D-pad (see <see cref="T:GameController. GCControllerDirectionPad" />), and 4 face buttons labeled Y-B-A-X.</para>
      <para>
        <see cref="T:GameController.CGExtendedGamepad" />s have the same elements, plus two trigger buttons and two joysticks (see <see cref="T:GameController.GCControllerAxisInput" />). Apple conceptual schematics additionally show an LED array, but there is currently no programmatic access to this element.</para>
      <para>There are three ways to read game controller data:</para>
      <para>
        <list type="table">
          <listheader>
            <term>Technique</term>
            <description>Method(s)</description>
            <description>Use</description>
          </listheader>
          <item>
            <term>Polling</term>
            <description>Properties such as <see cref="P:GameController.GCControllerButtonInput.Pressed" /> or <see cref="P:GameController.GCControllerDirectionPad.XAxis" /></description>
            <description>Directly read from the game-loop (see <see cref="M:SpriteKit.SKScene.Update" />).</description>
          </item>
          <item>
            <term>Event-driven</term>
            <description>Element's <c>ValueChangedHandler</c> property (such as <see cref="M:GameController.GControllerButtonInput.ValueChangedHandler" />)</description>
            <description>Game Controller processes updates on the main thread. The framework ensures that simultaneously-occurring events result in a series of single callbacks.</description>
          </item>
          <item>
            <term>Coordinated Snapshot</term>
            <description>
              <see cref="M:GameController.CGGamepad.SaveSnapshot" />, <see cref="M:GameController.CGExtendedGamepad.SaveSnapshot" /></description>
            <description>Snapshots the controller state. Appropriate for marshalling, serialization, or delayed processing.</description>
          </item>
        </list>
      </para>
      <para>The major classes in the Game Controller namespace are shown in the following illustration:</para>
      <para>
        <img href="GameController.Classes.png" />
      </para>
    </remarks>
  </Docs>
</Namespace>