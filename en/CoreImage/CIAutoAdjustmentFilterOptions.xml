<Type Name="CIAutoAdjustmentFilterOptions" FullName="CoreImage.CIAutoAdjustmentFilterOptions">
  <TypeSignature Language="C#" Value="public class CIAutoAdjustmentFilterOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CIAutoAdjustmentFilterOptions extends System.Object" />
  <TypeSignature Language="DocId" Value="T:CoreImage.CIAutoAdjustmentFilterOptions" />
  <TypeSignature Language="F#" Value="type CIAutoAdjustmentFilterOptions = class" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>When passed to <see cref="M:CoreImage.CIImage.GetAutoAdjustmentFilters" />, limits the results.</summary>
    <remarks>
      <para>The sample below shows a typical use.</para>
      <example>
        <code lang="C#"><![CDATA[
void PrepareFixes (CIImage img)
{
    var opt = new CIAutoAdjustmentFilterOptions () {
    	RedEye = true,
    	AutoAdjustCrop = true
    };
    CIImage img = null;
    foreach (var filter in img.GetAutoAdjustmentFilters (opt)) {
    	filter.Image = img;
    	img = filter.OutputImage;
    }
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIAutoAdjustmentFilterOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIAutoAdjustmentFilterOptions.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates an empty filter.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoAdjustCrop">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; AutoAdjustCrop;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Nullable`1&lt;bool&gt; AutoAdjustCrop" />
      <MemberSignature Language="DocId" Value="F:CoreImage.CIAutoAdjustmentFilterOptions.AutoAdjustCrop" />
      <MemberSignature Language="F#" Value="val mutable AutoAdjustCrop : Nullable&lt;bool&gt;" Usage="CoreImage.CIAutoAdjustmentFilterOptions.AutoAdjustCrop" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether or not to automatically crop the image.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoAdjustLevel">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; AutoAdjustLevel;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Nullable`1&lt;bool&gt; AutoAdjustLevel" />
      <MemberSignature Language="DocId" Value="F:CoreImage.CIAutoAdjustmentFilterOptions.AutoAdjustLevel" />
      <MemberSignature Language="F#" Value="val mutable AutoAdjustLevel : Nullable&lt;bool&gt;" Usage="CoreImage.CIAutoAdjustmentFilterOptions.AutoAdjustLevel" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the automatic adjustment level.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enhance">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; Enhance;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Nullable`1&lt;bool&gt; Enhance" />
      <MemberSignature Language="DocId" Value="F:CoreImage.CIAutoAdjustmentFilterOptions.Enhance" />
      <MemberSignature Language="F#" Value="val mutable Enhance : Nullable&lt;bool&gt;" Usage="CoreImage.CIAutoAdjustmentFilterOptions.Enhance" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Set to false if you want to prevent filters that perform enhancements to be returned.</summary>
        <remarks>

	  By default an invocation to <see cref="M:CoreImage.CIImage.GetAutoAdjustmentFilters" /> will return filters that include enhancement filters.  To
	  prevent this, set this property to false.

	</remarks>
      </Docs>
    </Member>
    <Member MemberName="Features">
      <MemberSignature Language="C#" Value="public CoreImage.CIFeature[] Features;" />
      <MemberSignature Language="ILAsm" Value=".field public class CoreImage.CIFeature[] Features" />
      <MemberSignature Language="DocId" Value="F:CoreImage.CIAutoAdjustmentFilterOptions.Features" />
      <MemberSignature Language="F#" Value="val mutable Features : CoreImage.CIFeature[]" Usage="CoreImage.CIAutoAdjustmentFilterOptions.Features" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreImage.CIFeature[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides a set of features to use during Red-Eye filters.</summary>
        <remarks>
	  If this array is empty, CoreImage will use the CIDetector class to detect where the face is on the image and use the result.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageOrientation">
      <MemberSignature Language="C#" Value="public Nullable&lt;CoreImage.CIImageOrientation&gt; ImageOrientation;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Nullable`1&lt;valuetype CoreImage.CIImageOrientation&gt; ImageOrientation" />
      <MemberSignature Language="DocId" Value="F:CoreImage.CIAutoAdjustmentFilterOptions.ImageOrientation" />
      <MemberSignature Language="F#" Value="val mutable ImageOrientation : Nullable&lt;CoreImage.CIImageOrientation&gt;" Usage="CoreImage.CIAutoAdjustmentFilterOptions.ImageOrientation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;CoreImage.CIImageOrientation&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Provides image orientation information to the auto-enhance system.</summary>
        <remarks>Some adjustments depend on image orientation to work, providing this hint helps the auto correction software pick the best results.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedEye">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; RedEye;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Nullable`1&lt;bool&gt; RedEye" />
      <MemberSignature Language="DocId" Value="F:CoreImage.CIAutoAdjustmentFilterOptions.RedEye" />
      <MemberSignature Language="F#" Value="val mutable RedEye : Nullable&lt;bool&gt;" Usage="CoreImage.CIAutoAdjustmentFilterOptions.RedEye" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Set to false if you want to prevent the filter that performs red-eye removal from being returned.</summary>
        <remarks>
	  By default an invocation to <see cref="M:CoreImage.CIImage.GetAutoAdjustmentFilters" /> will return filters that include red-eye removal.  To
	  prevent this, set this property to false.
	</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
