<Type Name="CIContextOptions" FullName="CoreImage.CIContextOptions">
  <TypeSignature Language="C#" Value="public class CIContextOptions : Foundation.DictionaryContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CIContextOptions extends Foundation.DictionaryContainer" />
  <TypeSignature Language="DocId" Value="T:CoreImage.CIContextOptions" />
  <TypeSignature Language="F#" Value="type CIContextOptions = class&#xA;    inherit DictionaryContainer" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.DictionaryContainer</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Use to configure the CIContext rendering pipeline.</summary>
    <remarks>You would use an instance of this class to configure the CIContext rendering operations.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIContextOptions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIContextOptions.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates an empty set of options for CIContext rendering.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIContextOptions (Foundation.NSDictionary dictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSDictionary dictionary) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIContextOptions.#ctor(Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="new CoreImage.CIContextOptions : Foundation.NSDictionary -&gt; CoreImage.CIContextOptions" Usage="new CoreImage.CIContextOptions dictionary" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="dictionary" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="dictionary">To be added.</param>
        <summary>Constructs a new <see cref="T:CoreImage.CIContextOptions" /> object using the options specified in <paramref name="dictionary" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CacheIntermediates">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; CacheIntermediates { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; CacheIntermediates" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIContextOptions.CacheIntermediates" />
      <MemberSignature Language="F#" Value="member this.CacheIntermediates : Nullable&lt;bool&gt; with get, set" Usage="CoreImage.CIContextOptions.CacheIntermediates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If not <see langword="null" />, <see langword="true" /> indicates that intermediate images should be cached.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CIImageFormat">
      <MemberSignature Language="C#" Value="public Nullable&lt;int&gt; CIImageFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;int32&gt; CIImageFormat" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIContextOptions.CIImageFormat" />
      <MemberSignature Language="F#" Value="member this.CIImageFormat : Nullable&lt;int&gt; with get, set" Usage="CoreImage.CIContextOptions.CIImageFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the image format to use for storing intermediate rendering results.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HighQualityDownsample">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; HighQualityDownsample { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; HighQualityDownsample" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIContextOptions.HighQualityDownsample" />
      <MemberSignature Language="F#" Value="member this.HighQualityDownsample : Nullable&lt;bool&gt; with get, set" Usage="CoreImage.CIContextOptions.HighQualityDownsample" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> if downsampling should be higher quality at the expense of performance.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputColorSpace">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGColorSpace OutputColorSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGColorSpace OutputColorSpace" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIContextOptions.OutputColorSpace" />
      <MemberSignature Language="F#" Value="member this.OutputColorSpace : CoreGraphics.CGColorSpace with get, set" Usage="CoreImage.CIContextOptions.OutputColorSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGColorSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The desired CIColorSpace to be used for the CIContext rendering operation.</summary>
        <value>
        </value>
        <remarks>This color space is used before the image is rendered into the output.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputPremultiplied">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; OutputPremultiplied { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; OutputPremultiplied" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIContextOptions.OutputPremultiplied" />
      <MemberSignature Language="F#" Value="member this.OutputPremultiplied : Nullable&lt;bool&gt; with get, set" Usage="CoreImage.CIContextOptions.OutputPremultiplied" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If <see langword="true" />, the output should premultiply pixel values by their alpha values.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PriorityRequestLow">
      <MemberSignature Language="C#" Value="public Nullable&lt;bool&gt; PriorityRequestLow { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;bool&gt; PriorityRequestLow" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIContextOptions.PriorityRequestLow" />
      <MemberSignature Language="F#" Value="member this.PriorityRequestLow : Nullable&lt;bool&gt; with get, set" Usage="CoreImage.CIContextOptions.PriorityRequestLow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether to request low priority from the GPU.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseSoftwareRenderer">
      <MemberSignature Language="C#" Value="public bool UseSoftwareRenderer { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSoftwareRenderer" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIContextOptions.UseSoftwareRenderer" />
      <MemberSignature Language="F#" Value="member this.UseSoftwareRenderer : bool with get, set" Usage="CoreImage.CIContextOptions.UseSoftwareRenderer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Setting this to true will force the CPU software rendered to be used and prevent the job to be offloaded to the GPU</summary>
        <value>
        </value>
        <remarks>
          <para>

	    GPU contexts can be offloaded to the graphics processing
	    unit and can run very fast and have the added advantage
	    that they do not tax the main process with their task.
	    GPU contexts have image sizes limits imposed by the
	    underlying hardware, on some devices this can be 2048x2048
	    and on devices like the iPad 2 this is 4096x4096.

	  </para>
          <para>

	    CPU contexts have a few benefits, they can perform their
	    tasks on the background, support larger input and output
	    images (at the time of this writing, 8192x8192) and have
	    improved fidelity due to the IEEE compliant floating point
	    support.

	  </para>
          <para>

	    You can check the actual limits for input and output image
	    sizes by checking the <see cref="P:CoreImage.CIContext.InputImageMaximumSize" />
	    and the <see cref="P:CoreImage.CIContext.OutputImageMaximumSize" />
	    properties.

	  </para>
          <para>

	    GPU contexts have one extra downside when interacting with
	    background operations.  Consider the case where your
	    application applies a number of filters and saves the
	    result.  Typically, you will queue this work to take place
	    even if the user suspends the application by pressing the
	    home button.  The user might take a picture, and switch to
	    another app.  If you chose to use a GPU context to process
	    your image but you have been sent to the background, your
	    application will be terminated when it tries to access the
	    GPU, as the GPU is now in use by another application.

	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingColorSpace">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGColorSpace WorkingColorSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGColorSpace WorkingColorSpace" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIContextOptions.WorkingColorSpace" />
      <MemberSignature Language="F#" Value="member this.WorkingColorSpace : CoreGraphics.CGColorSpace with get, set" Usage="CoreImage.CIContextOptions.WorkingColorSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGColorSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The colorspace used by image processing operations, this is different than the colorspace used for the final rendering.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
