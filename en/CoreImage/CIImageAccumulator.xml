<Type Name="CIImageAccumulator" FullName="CoreImage.CIImageAccumulator">
  <TypeSignature Language="C#" Value="public class CIImageAccumulator : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CIImageAccumulator extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:CoreImage.CIImageAccumulator" />
  <TypeSignature Language="F#" Value="type CIImageAccumulator = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("CIImageAccumulator", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A feedback image processor.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/QuartzCoreFramework/Classes/CIImageAccumulator_Class/index.html">Apple documentation for <c>CIImageAccumulator</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImageAccumulator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIImageAccumulator.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("The default initializer does not work in recent iOS version (11b4).", false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CIImageAccumulator (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIImageAccumulator.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CoreImage.CIImageAccumulator : Foundation.NSObjectFlag -&gt; CoreImage.CIImageAccumulator" Usage="new CoreImage.CIImageAccumulator t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CIImageAccumulator (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIImageAccumulator.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreImage.CIImageAccumulator : nativeint -&gt; CoreImage.CIImageAccumulator" Usage="new CoreImage.CIImageAccumulator handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImageAccumulator (CoreGraphics.CGRect rectangle, CoreImage.CIFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect rectangle, valuetype CoreImage.CIFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIImageAccumulator.#ctor(CoreGraphics.CGRect,CoreImage.CIFormat)" />
      <MemberSignature Language="F#" Value="new CoreImage.CIImageAccumulator : CoreGraphics.CGRect * CoreImage.CIFormat -&gt; CoreImage.CIImageAccumulator" Usage="new CoreImage.CIImageAccumulator (rectangle, format)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithExtent:format:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="rectangle" Type="CoreGraphics.CGRect" />
        <Parameter Name="format" Type="CoreImage.CIFormat" />
      </Parameters>
      <Docs>
        <param name="rectangle">To be added.</param>
        <param name="format">To be added.</param>
        <summary>Creates a new image accumulator from the specified rectangle and using the specified format.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIImageAccumulator (CoreGraphics.CGRect extent, CoreImage.CIFormat format, CoreGraphics.CGColorSpace colorSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect extent, valuetype CoreImage.CIFormat format, class CoreGraphics.CGColorSpace colorSpace) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIImageAccumulator.#ctor(CoreGraphics.CGRect,CoreImage.CIFormat,CoreGraphics.CGColorSpace)" />
      <MemberSignature Language="F#" Value="new CoreImage.CIImageAccumulator : CoreGraphics.CGRect * CoreImage.CIFormat * CoreGraphics.CGColorSpace -&gt; CoreImage.CIImageAccumulator" Usage="new CoreImage.CIImageAccumulator (extent, format, colorSpace)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithExtent:format:colorSpace:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="extent" Type="CoreGraphics.CGRect" />
        <Parameter Name="format" Type="CoreImage.CIFormat" />
        <Parameter Name="colorSpace" Type="CoreGraphics.CGColorSpace" />
      </Parameters>
      <Docs>
        <param name="extent">To be added.</param>
        <param name="format">To be added.</param>
        <param name="colorSpace">To be added.</param>
        <summary>Creates a new image accumulator from the specified rectangle and using the specified format and color space.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CIImageFormat">
      <MemberSignature Language="C#" Value="public virtual int CIImageFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 CIImageFormat" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIImageAccumulator.CIImageFormat" />
      <MemberSignature Language="F#" Value="member this.CIImageFormat : int" Usage="CoreImage.CIImageAccumulator.CIImageFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("format")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the image format of the accumulator.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIImageAccumulator.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="CoreImage.CIImageAccumulator.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIImageAccumulator.Clear" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="cIImageAccumulator.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("clear")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the accumulator.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Extent">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect Extent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect Extent" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIImageAccumulator.Extent" />
      <MemberSignature Language="F#" Value="member this.Extent : CoreGraphics.CGRect" Usage="CoreImage.CIImageAccumulator.Extent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("extent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the extent of the image that is replaced.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRectangle">
      <MemberSignature Language="C#" Value="public static CoreImage.CIImageAccumulator FromRectangle (CoreGraphics.CGRect rect, CoreImage.CIFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreImage.CIImageAccumulator FromRectangle(valuetype CoreGraphics.CGRect rect, valuetype CoreImage.CIFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIImageAccumulator.FromRectangle(CoreGraphics.CGRect,CoreImage.CIFormat)" />
      <MemberSignature Language="F#" Value="static member FromRectangle : CoreGraphics.CGRect * CoreImage.CIFormat -&gt; CoreImage.CIImageAccumulator" Usage="CoreImage.CIImageAccumulator.FromRectangle (rect, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageAccumulatorWithExtent:format:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreImage.CIImageAccumulator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="format" Type="CoreImage.CIFormat" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle from which to create the accumulator.</param>
        <param name="format">The pixel format for the accumulator.</param>
        <summary>Creates and returns a new image accumulator from the specified rectangle and using the specified format.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRectangle">
      <MemberSignature Language="C#" Value="public static CoreImage.CIImageAccumulator FromRectangle (CoreGraphics.CGRect extent, CoreImage.CIFormat format, CoreGraphics.CGColorSpace colorSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreImage.CIImageAccumulator FromRectangle(valuetype CoreGraphics.CGRect extent, valuetype CoreImage.CIFormat format, class CoreGraphics.CGColorSpace colorSpace) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIImageAccumulator.FromRectangle(CoreGraphics.CGRect,CoreImage.CIFormat,CoreGraphics.CGColorSpace)" />
      <MemberSignature Language="F#" Value="static member FromRectangle : CoreGraphics.CGRect * CoreImage.CIFormat * CoreGraphics.CGColorSpace -&gt; CoreImage.CIImageAccumulator" Usage="CoreImage.CIImageAccumulator.FromRectangle (extent, format, colorSpace)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageAccumulatorWithExtent:format:colorSpace:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreImage.CIImageAccumulator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="CoreGraphics.CGRect" />
        <Parameter Name="format" Type="CoreImage.CIFormat" />
        <Parameter Name="colorSpace" Type="CoreGraphics.CGColorSpace" />
      </Parameters>
      <Docs>
        <param name="extent">To be added.</param>
        <param name="format">The pixel format for the accumulator.</param>
        <param name="colorSpace">The color space for the accumulator.</param>
        <summary>Creates and returns a new image accumulator from the specified rectangle and using the specified format and color space.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public virtual CoreImage.CIImage Image { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreImage.CIImage Image" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIImageAccumulator.Image" />
      <MemberSignature Language="F#" Value="member this.Image : CoreImage.CIImage with get, set" Usage="CoreImage.CIImageAccumulator.Image" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("image")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the accumulator contents.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImageDirty">
      <MemberSignature Language="C#" Value="public virtual void SetImageDirty (CoreImage.CIImage image, CoreGraphics.CGRect dirtyRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImageDirty(class CoreImage.CIImage image, valuetype CoreGraphics.CGRect dirtyRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIImageAccumulator.SetImageDirty(CoreImage.CIImage,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member SetImageDirty : CoreImage.CIImage * CoreGraphics.CGRect -&gt; unit&#xA;override this.SetImageDirty : CoreImage.CIImage * CoreGraphics.CGRect -&gt; unit" Usage="cIImageAccumulator.SetImageDirty (image, dirtyRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setImage:dirtyRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="CoreImage.CIImage" />
        <Parameter Name="dirtyRect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="dirtyRect">To be added.</param>
        <summary>Places the <paramref name="dirtyRect" /> portion of <paramref name="image" /> into the accumulator.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
