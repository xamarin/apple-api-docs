<Type Name="CIFilter" FullName="CoreImage.CIFilter">
  <TypeSignature Language="C#" Value="public class CIFilter : Foundation.NSObject, IDisposable, Foundation.INSCopying, Foundation.INSSecureCoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CIFilter extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CIFilter", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>CoreImage image filter.</summary>
    <remarks>
      <para>
        
        On iOS 7.0, the following are the built-in filters:
      </para>
      <para>
        Compositing Filters:
        <list type="bullet"><item><term><see cref="T:CoreImage.CIAdditionCompositing" /></term></item><item><term><see cref="T:CoreImage.CIMaximumCompositing" /></term></item><item><term><see cref="T:CoreImage.CIMinimumCompositing" /></term></item><item><term><see cref="T:CoreImage.CIMultiplyCompositing" /></term></item><item><term><see cref="T:CoreImage.CISourceAtopCompositing" /></term></item><item><term><see cref="T:CoreImage.CISourceInCompositing" /></term></item><item><term><see cref="T:CoreImage.CISourceOutCompositing" /></term></item><item><term><see cref="T:CoreImage.CISourceOverCompositing" /></term></item></list></para>
      <para>
        Affine Filters (<see cref="T:CoreImage.CIAffineFilter" />):
        <list type="bullet"><item><term><see cref="T:CoreImage.CIAffineClamp" /></term></item><item><term><see cref="T:CoreImage.CIAffineTile" /></term></item><item><term><see cref="T:CoreImage.CIAffineTransform" /></term></item></list></para>
      <para>
        Blend Filters (<see cref="T:CoreImage.CIBlendFilter" />):
        <list type="bullet"><item><term><see cref="T:CoreImage.CIBlendWithMask" /></term></item><item><term><see cref="T:CoreImage.CIColorBlendMode" /></term></item><item><term><see cref="T:CoreImage.CIColorBurnBlendMode" /></term></item><item><term><see cref="T:CoreImage.CIColorDodgeBlendMode" /></term></item><item><term><see cref="T:CoreImage.CIDarkenBlendMode" /></term></item><item><term><see cref="T:CoreImage.CIDifferenceBlendMode" /></term></item><item><term><see cref="T:CoreImage.CIExclusionBlendMode" /></term></item><item><term><see cref="T:CoreImage.CIHardLightBlendMode" /></term></item><item><term><see cref="T:CoreImage.CIHueBlendMode" /></term></item><item><term><see cref="T:CoreImage.CILightenBlendMode" /></term></item><item><term><see cref="T:CoreImage.CILuminosityBlendMode" /></term></item><item><term><see cref="T:CoreImage.CIMultiplyBlendMode" /></term></item><item><term><see cref="T:CoreImage.CIOverlayBlendMode" /></term></item><item><term><see cref="T:CoreImage.CISaturationBlendMode" /></term></item><item><term><see cref="T:CoreImage.CIScreenBlendMode" /></term></item><item><term><see cref="T:CoreImage.CISoftLightBlendMode" /></term></item></list></para>
      <para>
        Compositing Filters (<see cref="T:CoreImage.CICompositingFilter" />):
        <list type="bullet"><item><term><see cref="T:CoreImage.CIAdditionCompositing" /></term></item><item><term><see cref="T:CoreImage.CIMaximumCompositing" /></term></item><item><term><see cref="T:CoreImage.CIMinimumCompositing" /></term></item><item><term><see cref="T:CoreImage.CIMultiplyCompositing" /></term></item><item><term><see cref="T:CoreImage.CISourceAtopCompositing" /></term></item><item><term><see cref="T:CoreImage.CISourceInCompositing" /></term></item><item><term><see cref="T:CoreImage.CISourceOutCompositing" /></term></item><item><term><see cref="T:CoreImage.CISourceOverCompositing" /></term></item></list></para>
      <para>
        Convolution Filters (<see cref="T:CoreImag.CIConvolutionCore" />):
        <list type="bullet"><item><term><see cref="T:CoreImage.CIConvolution3x3" /></term></item><item><term><see cref="T:CoreImage.CIConvolution5x5" /></term></item><item><term><see cref="T:CoreImage.CIConvolution9Horizontal" /></term></item><item><term><see cref="T:CoreImage.CIConvolution9Vertical" /></term></item></list></para>
      <para>
        Distortion Filters (<see cref="T:CoreImage.CIDistortionFilter" />):
        <list type="bullet"><item><term><see cref="T:CoreImage.CIBumpDistortion" /></term></item><item><term><see cref="T:CoreImage.CIBumpDistortionLinear" /></term></item><item><term><see cref="T:CoreImage.CICircleSplashDistortion" /></term></item><item><term><see cref="T:CoreImage.CIHoleDistortion" /></term></item><item><term><see cref="T:CoreImage.CIPinchDistortion" /></term></item><item><term><see cref="T:CoreImage.CITwirlDistortion" /></term></item><item><term><see cref="T:CoreImage.CIVortexDistortion" /></term></item></list></para>
      <para>
        Photo Effects (<see cref="T:CoreImage.CIPhotoEffect" />):
        <list type="bullet"><item><term><see cref="T:CoreImage.CIPhotoEffectChrome" /></term></item><item><term><see cref="T:CoreImage.CIPhotoEffectFade" /></term></item><item><term><see cref="T:CoreImage.CIPhotoEffectInstant" /></term></item><item><term><see cref="T:CoreImage.CIPhotoEffectMono" /></term></item><item><term><see cref="T:CoreImage.CIPhotoEffectNoir" /></term></item><item><term><see cref="T:CoreImage.CIPhotoEffectProcess" /></term></item><item><term><see cref="T:CoreImage.CIPhotoEffectTonal" /></term></item><item><term><see cref="T:CoreImage.CIPhotoEffectTransfer" /></term></item></list></para>
      <para>
        Transition Filters (<see cref="T:CoreImage.CITransitionFilter" />):
        <list type="bullet"><item><term><see cref="T:CoreImage.CIBarsSwipeTransition" /></term></item><item><term><see cref="T:CoreImage.CICopyMachineTransition" /></term></item><item><term><see cref="T:CoreImage.CIDisintegrateWithMaskTransition" /></term></item><item><term><see cref="T:CoreImage.CIDissolveTransition" /></term></item><item><term><see cref="T:CoreImage.CIFlashTransition" /></term></item><item><term><see cref="T:CoreImage.CIModTransition" /></term></item><item><term><see cref="T:CoreImage.CISwipeTransition" /></term></item></list></para>
      <para>Specialized Filters:
        <list type="bullet"><item><term><see cref="T:CoreImage.CIBloom" /></term></item><item><term><see cref="T:CoreImage.CICheckerboardGenerator" /></term></item><item><term><see cref="T:CoreImage.CIColorClamp" /></term></item><item><term><see cref="T:CoreImage.CIColorControls" /></term></item><item><term><see cref="T:CoreImage.CIColorCrossPolynomial" /></term></item><item><term><see cref="T:CoreImage.CIColorCube" /></term></item><item><term><see cref="T:CoreImage.CIColorInvert" /></term></item><item><term><see cref="T:CoreImage.CIColorMap" /></term></item><item><term><see cref="T:CoreImage.CIColorMatrix" /></term></item><item><term><see cref="T:CoreImage.CIColorMonochrome" /></term></item><item><term><see cref="T:CoreImage.CIColorPosterize" /></term></item><item><term><see cref="T:CoreImage.CIConstantColorGenerator" /></term></item><item><term><see cref="T:CoreImage.CICrop" /></term></item><item><term><see cref="T:CoreImage.CIExposureAdjust" /></term></item><item><term><see cref="T:CoreImage.CIFaceBalance" /></term></item><item><term><see cref="T:CoreImage.CIFalseColor" /></term></item><item><term><see cref="T:CoreImage.CIGammaAdjust" /></term></item><item><term><see cref="T:CoreImage.CIGaussianBlur" /></term></item><item><term><see cref="T:CoreImage.CIGaussianGradient" /></term></item><item><term><see cref="T:CoreImage.CIGloom" /></term></item><item><term><see cref="T:CoreImage.CIHighlightShadowAdjust" /></term></item><item><term><see cref="T:CoreImage.CIHueAdjust" /></term></item><item><term><see cref="T:CoreImage.CILanczosScaleTransform" /></term></item><item><term><see cref="T:CoreImage.CILightTunnel" /></term></item><item><term><see cref="T:CoreImage.CILinearGradient" /></term></item><item><term><see cref="T:CoreImage.CILinearToSRGBToneCurve" /></term></item><item><term><see cref="T:CoreImage.CIMaskToAlpha" /></term></item><item><term><see cref="T:CoreImage.CIMaximumComponent" /></term></item><item><term><see cref="T:CoreImage.CIMinimumComponent" /></term></item><item><term><see cref="T:CoreImage.CIPerspectiveTile" /></term></item><item><term><see cref="T:CoreImage.CIPerspectiveTransform" /></term></item><item><term><see cref="T:CoreImage.CIPixellate" /></term></item><item><term><see cref="T:CoreImage.CIQRCodeGenerator" /></term></item><item><term><see cref="T:CoreImage.CIRadialGradient" /></term></item><item><term><see cref="T:CoreImage.CIRandomGenerator" /></term></item><item><term><see cref="T:CoreImage.CIScreenFilter" /></term></item><item><term><see cref="T:CoreImage.CISepiaTone" /></term></item><item><term><see cref="T:CoreImage.CISharpenLuminance" /></term></item><item><term><see cref="T:CoreImage.CISRGBToneCurveToLinear" /></term></item><item><term><see cref="T:CoreImage.CIStarShineGenerator" /></term></item><item><term><see cref="T:CoreImage.CIStraightenFilter" /></term></item><item><term><see cref="T:CoreImage.CIStripesGenerator" /></term></item><item><term><see cref="T:CoreImage.CITemperatureAndTint" /></term></item><item><term><see cref="T:CoreImage.CITileFilter" /></term></item><item><term><see cref="T:CoreImage.CIToneCurve" /></term></item><item><term><see cref="T:CoreImage.CITriangleKaleidoscope" /></term></item><item><term><see cref="T:CoreImage.CIUnsharpMask" /></term></item><item><term><see cref="T:CoreImage.CIVibrance" /></term></item><item><term><see cref="T:CoreImage.CIVignette" /></term></item><item><term><see cref="T:CoreImage.CIVignetteEffect" /></term></item><item><term><see cref="T:CoreImage.CIWhitePointAdjust" /></term></item></list></para>
      <para>
        
        To create a filter of the specified type, instantiate an
        instance of one of the above types, assign values to their
        properties and extract the result by using the OutputImage
        property.
        
      </para>
      <example>
        <code lang="C#"><![CDATA[
          var sepiaFilter = new CISepiaTone () {
          Image = mySourceImage,
          Intensity = 0.8f
          };
        ]]></code>
      </example>
      <para>
        You can chain your filters as well:
      </para>
      <example>
        <code lang="C#"><![CDATA[
          var sepiaFilter = new CISepiaTone () {
          Image = mySourceImage,
          Intensity = .8f
          };
          var invert = new CIColorInvert () {
          Image = sepia.OutputImage
          };
        ]]></code>
      </example>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=e2a0ccca-ab10-4e41-9c09-11831a8c1380">coreimage</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/QuartzCoreFramework/Classes/CIFilter_Class/index.html">Apple documentation for <c>CIFilter</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CIFilter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Creates a new CIFilter with default values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIFilter (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CIFilter (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CIFilter (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("attributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Configurable attributes of the filter.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            
            Each filter has a set of attributes that control it.  You can
            get this list by requesting the Attributes dictionary from the
            filter.  Each fitler, in addition to having a series of
            configurable properties always includes its name
            ("CIAttributeFilterName" key), a user friendly name
            ("CIAttributeFilterDisplayName" key) and a list of categories
            that this filter belongs to ("CIAttributeFilterCategories").   
            
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CategoryLocalizedName">
      <MemberSignature Language="C#" Value="public static string CategoryLocalizedName (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string CategoryLocalizedName(string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("localizedNameForCategory:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">To be added.</param>
        <summary>Returns the localized name for the specified category.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Copy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject Copy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRawFilter">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter CreateRawFilter (MonoTouch.Foundation.NSData data, MonoTouch.CoreImage.CIRawFilterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter CreateRawFilter(class MonoTouch.Foundation.NSData data, class MonoTouch.CoreImage.CIRawFilterOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIRawFilterOptions" />
      </Parameters>
      <Docs>
        <param name="data">The RAW image data.</param>
        <param name="options">The RAW processing options.</param>
        <summary>Creates a <see cref="T:CoreImage.CIFilter" /> that applies the <paramref name="options" /> to the RAW data in <paramref name="data" />.</summary>
        <returns>A RAW processing filter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRawFilter">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter CreateRawFilter (MonoTouch.Foundation.NSData data, MonoTouch.Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter CreateRawFilter(class MonoTouch.Foundation.NSData data, class MonoTouch.Foundation.NSDictionary options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("filterWithImageData:options:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="data">The RAW image data.</param>
        <param name="options">The RAW processing options.</param>
        <summary>Creates a <see cref="T:CoreImage.CIFilter" /> that applies the <paramref name="options" /> to the RAW data in <paramref name="data" />.</summary>
        <returns>A RAW processing filter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRawFilter">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter CreateRawFilter (MonoTouch.Foundation.NSUrl url, MonoTouch.CoreImage.CIRawFilterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter CreateRawFilter(class MonoTouch.Foundation.NSUrl url, class MonoTouch.CoreImage.CIRawFilterOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIRawFilterOptions" />
      </Parameters>
      <Docs>
        <param name="url">The URL from which the RAW image data can be read.</param>
        <param name="options">The RAW processing options.</param>
        <summary>Creates a <see cref="T:CoreImage.CIFilter" /> that applies the <paramref name="options" /> to the RAW data read from <paramref name="url" />.</summary>
        <returns>A RAW processing filter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRawFilter">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter CreateRawFilter (MonoTouch.Foundation.NSUrl url, MonoTouch.Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter CreateRawFilter(class MonoTouch.Foundation.NSUrl url, class MonoTouch.Foundation.NSDictionary options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("filterWithImageURL:options:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="url">The URL from which the RAW image data can be read.</param>
        <param name="options">The RAW processing options.</param>
        <summary>Creates a <see cref="T:CoreImage.CIFilter" /> that applies the <paramref name="options" /> to the RAW data read from <paramref name="url" />.</summary>
        <returns>A RAW processing filter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRawFilter">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter CreateRawFilter (MonoTouch.CoreVideo.CVPixelBuffer pixelBuffer, MonoTouch.Foundation.NSDictionary properties, MonoTouch.CoreImage.CIRawFilterOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter CreateRawFilter(class MonoTouch.CoreVideo.CVPixelBuffer pixelBuffer, class MonoTouch.Foundation.NSDictionary properties, class MonoTouch.CoreImage.CIRawFilterOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 12, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixelBuffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
        <Parameter Name="properties" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIRawFilterOptions" />
      </Parameters>
      <Docs>
        <param name="pixelBuffer">The <see cref="T:CoreVideo.CVPixelBuffer" /> containing RAW data.</param>
        <param name="properties">A dictionary of image data.</param>
        <param name="options">The set of RAW processing options to be applied to the input image(s).</param>
        <summary>Creates a RAW processing filter for converting the data in <paramref name="pixelBuffer" /> by applying the settings in <paramref name="options" />.</summary>
        <returns>A RAW processing filter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRawFilter">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter CreateRawFilter (MonoTouch.CoreVideo.CVPixelBuffer pixelBuffer, MonoTouch.Foundation.NSDictionary properties, MonoTouch.Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter CreateRawFilter(class MonoTouch.CoreVideo.CVPixelBuffer pixelBuffer, class MonoTouch.Foundation.NSDictionary properties, class MonoTouch.Foundation.NSDictionary options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("filterWithCVPixelBuffer:properties:options:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 12, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pixelBuffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
        <Parameter Name="properties" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="pixelBuffer">The <see cref="T:CoreVideo.CVPixelBuffer" /> containing RAW data.</param>
        <param name="properties">A dictionary of image data.</param>
        <param name="options">The set of RAW processing options to be applied to the input image(s).</param>
        <summary>Creates a RAW processing filter for converting the data in <paramref name="pixelBuffer" /> by applying the settings in <paramref name="options" />.</summary>
        <returns>A RAW processing filter.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterLocalizedDescription">
      <MemberSignature Language="C#" Value="public static string FilterLocalizedDescription (string filterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FilterLocalizedDescription(string filterName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("localizedDescriptionForFilterName:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterName">To be added.</param>
        <summary>Gets the localized description for the specified filter name.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterLocalizedName">
      <MemberSignature Language="C#" Value="public static string FilterLocalizedName (string filterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string FilterLocalizedName(string filterName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("localizedNameForFilterName:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterName">To be added.</param>
        <summary>Gets the localized name for the specified filter name.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterLocalizedReferenceDocumentation">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSUrl FilterLocalizedReferenceDocumentation (string filterName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSUrl FilterLocalizedReferenceDocumentation(string filterName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("localizedReferenceDocumentationForFilterName:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filterName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filterName">To be added.</param>
        <summary>Gets the localized reference documentation for the specified filter name.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterNamesInCategories">
      <MemberSignature Language="C#" Value="public static string[] FilterNamesInCategories (string[] categories);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FilterNamesInCategories(string[] categories) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="categories" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="categories">To be added.</param>
        <summary>Returns an array of strings that specifies the filters taht the system provides for the specified <paramref name="categories" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilterNamesInCategory">
      <MemberSignature Language="C#" Value="public static string[] FilterNamesInCategory (string category);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FilterNamesInCategory(string category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("filterNamesInCategory:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="category">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Returns an array of strings that specifies the filters taht the system provides for the specified <paramref name="category" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter FromName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter FromName(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("filterWithName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name of the CoreImage filter to instantiate.</param>
        <summary>Returns a CIFilter for the specific effect.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
            
            On iOS 5.0, the following are the built-in filters:
            <see cref="T:CoreImage.CICategoryBlur" />, <see cref="T:CoreImage.CICategoryColorEffect" />,
            <see cref="T:CoreImage.CIAdditionCompositing" />,
            <see cref="T:CoreImage.CIAffineTransform" />,
            <see cref="T:CoreImage.CICheckerboardGenerator" />,
            <see cref="T:CoreImage.CIColorBlendMode" />,
            <see cref="T:CoreImage.CIColorBurnBlendMode" />,
            <see cref="T:CoreImage.CIColorControls" />,
            <see cref="T:CoreImage.CIColorCube" />,
            <see cref="T:CoreImage.CIColorDodgeBlendMode" />,
            <see cref="T:CoreImage.CIColorInvert" />,
            <see cref="T:CoreImage.CIColorMatrix" />,
            <see cref="T:CoreImage.CIColorMonochrome" />,
            <see cref="T:CoreImage.CIConstantColorGenerator" />,
            <see cref="T:CoreImage.CICrop" />,
            <see cref="T:CoreImage.CIDarkenBlendMode" />,
            <see cref="T:CoreImage.CIDifferenceBlendMode" />,
            <see cref="T:CoreImage.CIExclusionBlendMode" />,
            <see cref="T:CoreImage.CIExposureAdjust" />,
            <see cref="T:CoreImage.CIFalseColor" />,
            <see cref="T:CoreImage.CIGammaAdjust" />,
            <see cref="T:CoreImage.CIGaussianGradient" />,
            <see cref="T:CoreImage.CIHardLightBlendMode" />,
            <see cref="T:CoreImage.CIHighlightShadowAdjust" />,
            <see cref="T:CoreImage.CIHueAdjust" />,
            <see cref="T:CoreImage.CIHueBlendMode" />,
            <see cref="T:CoreImage.CILightenBlendMode" />,
            <see cref="T:CoreImage.CILinearGradient" />,
            <see cref="T:CoreImage.CILuminosityBlendMode" />,
            <see cref="T:CoreImage.CIMaximumCompositing" />,
            <see cref="T:CoreImage.CIMinimumCompositing" />,
            <see cref="T:CoreImage.CIMultiplyBlendMode" />,
            <see cref="T:CoreImage.CIMultiplyCompositing" />,
            <see cref="T:CoreImage.CIOverlayBlendMode" />,
            <see cref="T:CoreImage.CIRadialGradient" />,
            <see cref="T:CoreImage.CISaturationBlendMode" />,
            <see cref="T:CoreImage.CIScreenBlendMode" />,
            <see cref="T:CoreImage.CISepiaTone" />,
            <see cref="T:CoreImage.CISoftLightBlendMode" />,
            <see cref="T:CoreImage.CISourceAtopCompositing" />,
            <see cref="T:CoreImage.CISourceInCompositing" />,
            <see cref="T:CoreImage.CISourceOutCompositing" />,
            <see cref="T:CoreImage.CISourceOverCompositing" />,
            <see cref="T:CoreImage.CIStraightenFilter" />,
            <see cref="T:CoreImage.CIStripesGenerator" />,
            <see cref="T:CoreImage.CITemperatureAndTint" />,
            <see cref="T:CoreImage.CIToneCurve" />,
            <see cref="T:CoreImage.CIVibrance" />,
            <see cref="T:CoreImage.CIVignette" /> and <see cref="T:CoreImage.CIWhitePointAdjust" />.
            
          </para>
          <para>
            
            To create a filter of the specified type, instantiate an
            instance of one of the above types, assign values to their
            properties and extract the result by using the OutputImage
            property.
            
          </para>
          <example>
            <code lang="C#"><![CDATA[
              var sepiaFilter = new CISepiaTone () {
              Image = mySourceImage,
              Intensity = 0.8f
              };
            ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromSerializedXMP">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter[] FromSerializedXMP (MonoTouch.Foundation.NSData xmpData, MonoTouch.CoreGraphics.CGRect extent, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter[] FromSerializedXMP(class MonoTouch.Foundation.NSData xmpData, valuetype MonoTouch.CoreGraphics.CGRect extent, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("filterArrayFromSerializedXMP:inputImageExtent:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="xmpData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
        <Parameter Name="extent" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="xmpData">To be added.</param>
        <param name="extent">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Deserializes XMP data into an array of filters. Sends errors to <paramref name="error" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFilter">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIFilter GetFilter (string name, MonoTouch.Foundation.NSDictionary inputParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIFilter GetFilter(string name, class MonoTouch.Foundation.NSDictionary inputParameters) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("filterWithName:withInputParameters:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFilter</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="inputParameters" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="inputParameters">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Returns a <see cref="T:CoreImage.CIFilter" /> that corresponds to <paramref name="name" /> and is initialized with the parameters that are named in <paramref name="inputParameters" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreImage.CIImage Image { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreImage.CIImage Image" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an image to filter.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputKeys">
      <MemberSignature Language="C#" Value="public virtual string[] InputKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] InputKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("inputKeys")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains the names of the input keys for the filter.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public MonoTouch.Foundation.NSObject this[MonoTouch.Foundation.NSString key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject Item(class MonoTouch.Foundation.NSString)" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>Gets the value that is identified by <paramref name="key" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("name")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setName:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.TvOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the filter name.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIImage OutputImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreImage.CIImage OutputImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("outputImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the image that results from applying the filter to <see cref="P:CoreImage.CIFilter.Image" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputKeys">
      <MemberSignature Language="C#" Value="public virtual string[] OutputKeys { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] OutputKeys" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("outputKeys")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array that contains the names of the output keys for the filter.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterFilterName">
      <MemberSignature Language="C#" Value="public static void RegisterFilterName (string name, MonoTouch.Foundation.NSObject constructorObject, MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSString,MonoTouch.Foundation.NSObject&gt; classAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RegisterFilterName(string name, class MonoTouch.Foundation.NSObject constructorObject, class MonoTouch.Foundation.NSDictionary`2&lt;class MonoTouch.Foundation.NSString, class MonoTouch.Foundation.NSObject&gt; classAttributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("The 'constructorObject' argument must implement 'ICIFilterConstructor'.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("registerFilterName:constructor:classAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="constructorObject" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="classAttributes" Type="MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSString,MonoTouch.Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="name">An identifier for the filter type.</param>
        <param name="constructorObject">The <see cref="T:CoreImage.ICIFilterConstructor" /> factory.</param>
        <param name="classAttributes">The filter attributes.</param>
        <summary>Registers the filter generated by the <paramref name="constructorObject" /> factory.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SerializedXMP">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSData SerializedXMP (MonoTouch.CoreImage.CIFilter[] filters, MonoTouch.CoreGraphics.CGRect extent);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSData SerializedXMP(class MonoTouch.CoreImage.CIFilter[] filters, valuetype MonoTouch.CoreGraphics.CGRect extent) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("serializedXMPFromFilters:inputImageExtent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filters" Type="MonoTouch.CoreImage.CIFilter[]" />
        <Parameter Name="extent" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="filters">To be added.</param>
        <param name="extent">To be added.</param>
        <summary>Returns a list of filters for an extent as serialized XMP data.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefaults">
      <MemberSignature Language="C#" Value="public virtual void SetDefaults ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDefaults() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setDefaults")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Sets all input values to their defaults.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>