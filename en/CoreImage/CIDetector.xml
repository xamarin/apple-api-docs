<Type Name="CIDetector" FullName="CoreImage.CIDetector">
  <TypeSignature Language="C#" Value="public class CIDetector : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CIDetector extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:CoreImage.CIDetector" />
  <TypeSignature Language="F#" Value="type CIDetector = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("CIDetector", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Image analysis class for face detection.</summary>
    <remarks>
      <para>
	CIDetector is a general API to perform image analysis on an
	image, but as of iOS5 only face detection is supported.  You
	initiate the face detection by calling the static method <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=M:CoreImage.CIDetector.CreateFaceDetector(CoreImage.CIContext,bool)&amp;scope=Xamarin" title="M:CoreImage.CIDetector.CreateFaceDetector(CoreImage.CIContext,bool)">M:CoreImage.CIDetector.CreateFaceDetector(CoreImage.CIContext,bool)</a></format>
	and then get the results by calling one of the FeaturesInImage
	overloads.
      </para>
      <example>
        <code lang="C#"><![CDATA[
var imageFile = "photoFace2.jpg";
var image = new UIImage(imageFile);

var context = new CIContext ();
var detector = CIDetector.CreateFaceDetector (context, true);
var ciImage = CIImage.FromCGImage (image.CGImage);
var features = detector.GetFeatures (ciImage);

Console.WriteLine ("Found " + features.Length + " faces (origin bottom-left)");
foreach (var feature in features){
    var facefeature = (CIFaceFeature) feature;

    Console.WriteLine ("Left eye  {0} {1}\n", facefeature.HasLeftEyePosition,  facefeature.LeftEyePosition);
    Console.WriteLine ("Right eye {0} {1}\n", facefeature.HasRightEyePosition, facefeature.RightEyePosition);
    Console.WriteLine ("Mouth     {0} {1}\n", facefeature.HasMouthPosition,    facefeature.MouthPosition);
}
	]]></code>
      </example>
      <para>Instances of <see cref="T:CoreImage.CIDetector" /> are expensive to initialize, so application developers should prefer to re-use existing instances rather than frequently creating new ones.</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/CoreImage/Reference/CIDetector_Ref/index.html">Apple documentation for <c>CIDetector</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CIDetector (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CoreImage.CIDetector : Foundation.NSObjectFlag -&gt; CoreImage.CIDetector" Usage="new CoreImage.CIDetector t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CIDetector (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreImage.CIDetector : nativeint -&gt; CoreImage.CIDetector" Usage="new CoreImage.CIDetector handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AspectRatio">
      <MemberSignature Language="C#" Value="public static Foundation.NSString AspectRatio { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString AspectRatio" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIDetector.AspectRatio" />
      <MemberSignature Language="F#" Value="member this.AspectRatio : Foundation.NSString" Usage="CoreImage.CIDetector.AspectRatio" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("CIDetectorAspectRatio", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant CIDetectorAspectRatio</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIDetector.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="CoreImage.CIDetector.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFaceDetector">
      <MemberSignature Language="C#" Value="public static CoreImage.CIDetector CreateFaceDetector (CoreImage.CIContext context, CoreImage.CIDetectorOptions detectorOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreImage.CIDetector CreateFaceDetector(class CoreImage.CIContext context, class CoreImage.CIDetectorOptions detectorOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.CreateFaceDetector(CoreImage.CIContext,CoreImage.CIDetectorOptions)" />
      <MemberSignature Language="F#" Value="static member CreateFaceDetector : CoreImage.CIContext * CoreImage.CIDetectorOptions -&gt; CoreImage.CIDetector" Usage="CoreImage.CIDetector.CreateFaceDetector (context, detectorOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreImage.CIDetector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="CoreImage.CIContext" />
        <Parameter Name="detectorOptions" Type="CoreImage.CIDetectorOptions" />
      </Parameters>
      <Docs>
        <param name="context">Image context.</param>
        <param name="detectorOptions">Options to use for the face detector.</param>
        <summary>Create a new face detector using the specified parameters.</summary>
        <returns>A CIDetector instance.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFaceDetector">
      <MemberSignature Language="C#" Value="public static CoreImage.CIDetector CreateFaceDetector (CoreImage.CIContext context, bool highAccuracy);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreImage.CIDetector CreateFaceDetector(class CoreImage.CIContext context, bool highAccuracy) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.CreateFaceDetector(CoreImage.CIContext,System.Boolean)" />
      <MemberSignature Language="F#" Value="static member CreateFaceDetector : CoreImage.CIContext * bool -&gt; CoreImage.CIDetector" Usage="CoreImage.CIDetector.CreateFaceDetector (context, highAccuracy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreImage.CIDetector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="CoreImage.CIContext" />
        <Parameter Name="highAccuracy" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="context">Image context.</param>
        <param name="highAccuracy">If true, it uses a more precise but slower scanning method;   If false, it uses a fast path, but not as precise..</param>
        <summary>Create a new face detector using the specified parameters.</summary>
        <returns>A CIDetector instance.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFaceDetector">
      <MemberSignature Language="C#" Value="public static CoreImage.CIDetector CreateFaceDetector (CoreImage.CIContext context, bool highAccuracy, float minFeatureSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreImage.CIDetector CreateFaceDetector(class CoreImage.CIContext context, bool highAccuracy, float32 minFeatureSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.CreateFaceDetector(CoreImage.CIContext,System.Boolean,System.Single)" />
      <MemberSignature Language="F#" Value="static member CreateFaceDetector : CoreImage.CIContext * bool * single -&gt; CoreImage.CIDetector" Usage="CoreImage.CIDetector.CreateFaceDetector (context, highAccuracy, minFeatureSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreImage.CIDetector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="CoreImage.CIContext" />
        <Parameter Name="highAccuracy" Type="System.Boolean" />
        <Parameter Name="minFeatureSize" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="context">Image context.</param>
        <param name="highAccuracy">If true, it uses a more precise but slower scanning method;   If false, it uses a fast path, but not as precise..</param>
        <param name="minFeatureSize">Minimum size that the detector will discover as a feature.</param>
        <summary>Create a new face detector using the specified parameters.</summary>
        <returns>A CIDetector instance.</returns>
        <remarks>minFeatureSize is new in iOS 6, it will be ignored in earlier releases.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFaceDetector">
      <MemberSignature Language="C#" Value="public static CoreImage.CIDetector CreateFaceDetector (CoreImage.CIContext context, Nullable&lt;CoreImage.FaceDetectorAccuracy&gt; accuracy = null, Nullable&lt;float&gt; minFeatureSize = null, Nullable&lt;bool&gt; trackingEnabled = null);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreImage.CIDetector CreateFaceDetector(class CoreImage.CIContext context, valuetype System.Nullable`1&lt;valuetype CoreImage.FaceDetectorAccuracy&gt; accuracy, valuetype System.Nullable`1&lt;float32&gt; minFeatureSize, valuetype System.Nullable`1&lt;bool&gt; trackingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.CreateFaceDetector(CoreImage.CIContext,System.Nullable{CoreImage.FaceDetectorAccuracy},System.Nullable{System.Single},System.Nullable{System.Boolean})" />
      <MemberSignature Language="F#" Value="static member CreateFaceDetector : CoreImage.CIContext * Nullable&lt;CoreImage.FaceDetectorAccuracy&gt; * Nullable&lt;single&gt; * Nullable&lt;bool&gt; -&gt; CoreImage.CIDetector" Usage="CoreImage.CIDetector.CreateFaceDetector (context, accuracy, minFeatureSize, trackingEnabled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreImage.CIDetector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="CoreImage.CIContext" />
        <Parameter Name="accuracy" Type="System.Nullable&lt;CoreImage.FaceDetectorAccuracy&gt;" />
        <Parameter Name="minFeatureSize" Type="System.Nullable&lt;System.Single&gt;" />
        <Parameter Name="trackingEnabled" Type="System.Nullable&lt;System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <param name="context">Image context.</param>
        <param name="accuracy">To be added.</param>
        <param name="minFeatureSize">Minimum size that the detector will discover as a feature.</param>
        <param name="trackingEnabled">Enables feature tracking.</param>
        <summary>Create a new face detector using the specified parameters.</summary>
        <returns>A CIDetector instance.</returns>
        <remarks>Both minFeatureSize and trackingEnabled are new in iOS 6, they will be ignored in earlier releases.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateQRDetector">
      <MemberSignature Language="C#" Value="public static CoreImage.CIDetector CreateQRDetector (CoreImage.CIContext context, CoreImage.CIDetectorOptions detectorOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreImage.CIDetector CreateQRDetector(class CoreImage.CIContext context, class CoreImage.CIDetectorOptions detectorOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.CreateQRDetector(CoreImage.CIContext,CoreImage.CIDetectorOptions)" />
      <MemberSignature Language="F#" Value="static member CreateQRDetector : CoreImage.CIContext * CoreImage.CIDetectorOptions -&gt; CoreImage.CIDetector" Usage="CoreImage.CIDetector.CreateQRDetector (context, detectorOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreImage.CIDetector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="CoreImage.CIContext" />
        <Parameter Name="detectorOptions" Type="CoreImage.CIDetectorOptions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="detectorOptions">To be added.</param>
        <summary>Create a detector that recognizes QR codes.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRectangleDetector">
      <MemberSignature Language="C#" Value="public static CoreImage.CIDetector CreateRectangleDetector (CoreImage.CIContext context, CoreImage.CIDetectorOptions detectorOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreImage.CIDetector CreateRectangleDetector(class CoreImage.CIContext context, class CoreImage.CIDetectorOptions detectorOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.CreateRectangleDetector(CoreImage.CIContext,CoreImage.CIDetectorOptions)" />
      <MemberSignature Language="F#" Value="static member CreateRectangleDetector : CoreImage.CIContext * CoreImage.CIDetectorOptions -&gt; CoreImage.CIDetector" Usage="CoreImage.CIDetector.CreateRectangleDetector (context, detectorOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreImage.CIDetector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="CoreImage.CIContext" />
        <Parameter Name="detectorOptions" Type="CoreImage.CIDetectorOptions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="detectorOptions">To be added.</param>
        <summary>Create a detector that recognizes rectangular objects in the image.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTextDetector">
      <MemberSignature Language="C#" Value="public static CoreImage.CIDetector CreateTextDetector (CoreImage.CIContext context, CoreImage.CIDetectorOptions detectorOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreImage.CIDetector CreateTextDetector(class CoreImage.CIContext context, class CoreImage.CIDetectorOptions detectorOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.CreateTextDetector(CoreImage.CIContext,CoreImage.CIDetectorOptions)" />
      <MemberSignature Language="F#" Value="static member CreateTextDetector : CoreImage.CIContext * CoreImage.CIDetectorOptions -&gt; CoreImage.CIDetector" Usage="CoreImage.CIDetector.CreateTextDetector (context, detectorOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreImage.CIDetector</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="CoreImage.CIContext" />
        <Parameter Name="detectorOptions" Type="CoreImage.CIDetectorOptions" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <param name="detectorOptions">To be added.</param>
        <summary>Creates a new CIDetector with the specified context and detection options.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FeaturesInImage">
      <MemberSignature Language="C#" Value="public virtual CoreImage.CIFeature[] FeaturesInImage (CoreImage.CIImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CoreImage.CIFeature[] FeaturesInImage(class CoreImage.CIImage image) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.FeaturesInImage(CoreImage.CIImage)" />
      <MemberSignature Language="F#" Value="abstract member FeaturesInImage : CoreImage.CIImage -&gt; CoreImage.CIFeature[]&#xA;override this.FeaturesInImage : CoreImage.CIImage -&gt; CoreImage.CIFeature[]" Usage="cIDetector.FeaturesInImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("featuresInImage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreImage.CIFeature[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="CoreImage.CIImage" />
      </Parameters>
      <Docs>
        <param name="image">Image to analyze.</param>
        <summary>Analyzes the image and returns a list of features discovered in the image (faces, QR codes, rectangles).</summary>
        <returns>Array of discovered features.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FeaturesInImage">
      <MemberSignature Language="C#" Value="public CoreImage.CIFeature[] FeaturesInImage (CoreImage.CIImage image, CoreImage.CIImageOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreImage.CIFeature[] FeaturesInImage(class CoreImage.CIImage image, valuetype CoreImage.CIImageOrientation orientation) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.FeaturesInImage(CoreImage.CIImage,CoreImage.CIImageOrientation)" />
      <MemberSignature Language="F#" Value="member this.FeaturesInImage : CoreImage.CIImage * CoreImage.CIImageOrientation -&gt; CoreImage.CIFeature[]" Usage="cIDetector.FeaturesInImage (image, orientation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreImage.CIFeature[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="CoreImage.CIImage" />
        <Parameter Name="orientation" Type="CoreImage.CIImageOrientation" />
      </Parameters>
      <Docs>
        <param name="image">Image to analyze.</param>
        <param name="orientation">Orientation for the image.</param>
        <summary>Analyzes the image and returns a list of features discovered in the image (faces, QR codes, rectangles).</summary>
        <returns>Array of discovered features.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FeaturesInImage">
      <MemberSignature Language="C#" Value="public virtual CoreImage.CIFeature[] FeaturesInImage (CoreImage.CIImage image, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CoreImage.CIFeature[] FeaturesInImage(class CoreImage.CIImage image, class Foundation.NSDictionary options) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreImage.CIDetector.FeaturesInImage(CoreImage.CIImage,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member FeaturesInImage : CoreImage.CIImage * Foundation.NSDictionary -&gt; CoreImage.CIFeature[]&#xA;override this.FeaturesInImage : CoreImage.CIImage * Foundation.NSDictionary -&gt; CoreImage.CIFeature[]" Usage="cIDetector.FeaturesInImage (image, options)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("featuresInImage:options:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreImage.CIFeature[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="CoreImage.CIImage" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="image">Image to analyze.</param>
        <param name="options">
          <para>Set of options to configure the search for features in the image.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Analyzes the image and returns a list of features discovered in the image (faces, QR codes, rectangles).</summary>
        <returns>Array of discovered features.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocalLength">
      <MemberSignature Language="C#" Value="public static Foundation.NSString FocalLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString FocalLength" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIDetector.FocalLength" />
      <MemberSignature Language="F#" Value="member this.FocalLength : Foundation.NSString" Usage="CoreImage.CIDetector.FocalLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("CIDetectorFocalLength", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant CIDetectorFocalLength</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfAngles">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NumberOfAngles { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NumberOfAngles" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIDetector.NumberOfAngles" />
      <MemberSignature Language="F#" Value="member this.NumberOfAngles : Foundation.NSString" Usage="CoreImage.CIDetector.NumberOfAngles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("CIDetectorNumberOfAngles", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of angles from which to sample when detecting features.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnSubFeatures">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ReturnSubFeatures { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ReturnSubFeatures" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIDetector.ReturnSubFeatures" />
      <MemberSignature Language="F#" Value="member this.ReturnSubFeatures : Foundation.NSString" Usage="CoreImage.CIDetector.ReturnSubFeatures" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("CIDetectorReturnSubFeatures", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that tells whether subfeatures are detected.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeQRCode">
      <MemberSignature Language="C#" Value="public static Foundation.NSString TypeQRCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString TypeQRCode" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIDetector.TypeQRCode" />
      <MemberSignature Language="F#" Value="member this.TypeQRCode : Foundation.NSString" Usage="CoreImage.CIDetector.TypeQRCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("CIDetectorTypeQRCode", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant CIDetectorTypeQRCode</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeRectangle">
      <MemberSignature Language="C#" Value="public static Foundation.NSString TypeRectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString TypeRectangle" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIDetector.TypeRectangle" />
      <MemberSignature Language="F#" Value="member this.TypeRectangle : Foundation.NSString" Usage="CoreImage.CIDetector.TypeRectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("CIDetectorTypeRectangle", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant CIDetectorTypeRectangle</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeText">
      <MemberSignature Language="C#" Value="public static Foundation.NSString TypeText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString TypeText" />
      <MemberSignature Language="DocId" Value="P:CoreImage.CIDetector.TypeText" />
      <MemberSignature Language="F#" Value="member this.TypeText : Foundation.NSString" Usage="CoreImage.CIDetector.TypeText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("CIDetectorTypeText", "CoreImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that tells whether the detector detects text.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
