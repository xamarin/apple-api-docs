<Type Name="CIContext" FullName="CoreImage.CIContext">
  <TypeSignature Language="C#" Value="public class CIContext : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CIContext extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("CIContext", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Orchestrates the rendering of a CIFilter pipeline.</summary>
    <remarks>
      <para>
	The CIContext class is used to orchestrate the rendering of a
	pipeline of filters into one of the supported output surfaces.
      </para>
      <para>

	The CGContext can render its results into a CoreGraphics
	CGImage, render directly into the screen with one of the
	various Draw methods, into a CoreVideo CVPixelBuffer or into a CoreGraphics context.
      </para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=e2a0ccca-ab10-4e41-9c09-11831a8c1380">coreimage</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/GraphicsImaging/Reference/QuartzCoreFramework/Classes/CIContext_Class/index.html">Apple documentation for <c>CIContext</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CIContext (MonoTouch.CoreImage.CIContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.CoreImage.CIContextOptions options) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIContextOptions" />
      </Parameters>
      <Docs>
        <param name="options">The context options to use.</param>
        <summary>Creates a new Core Image context with the specified <paramref name="options" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CIContext (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CIContext (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearCaches">
      <MemberSignature Language="C#" Value="public virtual void ClearCaches ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ClearCaches() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("clearCaches")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Frees data in the cache and runs the garbage collector.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext Create() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new <see cref="T:CoreImage.CIContext" /> with default options.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCGImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage CreateCGImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGRect fromRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreGraphics.CGImage CreateCGImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGRect fromRectangle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("createCGImage:fromRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="fromRectangle" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="fromRectangle">To be added.</param>
        <summary>Creates a new <see cref="T:CoreGraphics.CGImage" /> from the <paramref name="fromRectangle" /> region of <paramref name="image" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCGImage">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreGraphics.CGImage CreateCGImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGRect fromRect, MonoTouch.CoreImage.CIFormat ciImageFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.CoreGraphics.CGImage CreateCGImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGRect fromRect, valuetype MonoTouch.CoreImage.CIFormat ciImageFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="ciImageFormat" Type="MonoTouch.CoreImage.CIFormat" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="fromRect" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="fromRect">To be added.</param>
        <param name="ciImageFormat">To be added.</param>
        <param name="colorSpace">To be added.</param>
        <summary>Creates a new <see cref="T:CoreGraphics.CGImage" /> from the <paramref name="fromRectangle" /> region of <paramref name="image" /> with the specified format and color space.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCGImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage CreateCGImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGRect fromRect, int ciImageFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreGraphics.CGImage CreateCGImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGRect fromRect, int32 ciImageFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("createCGImage:fromRect:format:colorSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="ciImageFormat" Type="System.Int32" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="fromRect" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="fromRect">To be added.</param>
        <param name="ciImageFormat">To be added.</param>
        <param name="colorSpace">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new <see cref="T:CoreGraphics.CGImage" /> from the <paramref name="fromRectangle" /> region of <paramref name="image" /> with the specified format and color space.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCGImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGImage CreateCGImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGRect fromRect, MonoTouch.CoreImage.CIFormat format, MonoTouch.CoreGraphics.CGColorSpace colorSpace, bool deferred);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.CoreGraphics.CGImage CreateCGImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGRect fromRect, valuetype MonoTouch.CoreImage.CIFormat format, class MonoTouch.CoreGraphics.CGColorSpace colorSpace, bool deferred) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("createCGImage:fromRect:format:colorSpace:deferred:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="format" Type="MonoTouch.CoreImage.CIFormat" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="deferred" Type="System.Boolean" />
        <Parameter Name="fromRect" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="image">The source image.</param>
        <param name="fromRect">The rectangle from which the new image will be made.</param>
        <param name="format">The format of the new image.</param>
        <param name="colorSpace">
          <para>The colorspace of the new image.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="deferred">Whether the created image should use deferred rendering.</param>
        <summary>Creates a <see cref="T:CoreImage.CGImage" /> from the <paramref name="fromRect" /> in the <paramref name="image" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public virtual void DrawImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGPoint atPoint, MonoTouch.CoreGraphics.CGRect fromRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGPoint atPoint, valuetype MonoTouch.CoreGraphics.CGRect fromRect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawImage:atPoint:fromRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'DrawImage (image, CGRect, CGRect)' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.None, "Use 'DrawImage (image, CGRect, CGRect)' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'DrawImage (image, CGRect, CGRect)' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 4, ObjCRuntime.PlatformArchitecture.None, "Use 'DrawImage (image, CGRect, CGRect)' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="atPoint" Type="MonoTouch.CoreGraphics.CGPoint" />
        <Parameter Name="fromRect" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="atPoint">To be added.</param>
        <param name="fromRect">To be added.</param>
        <summary>Draws the <paramref name="fromRect" /> portion of <paramref name="image" /> to the point on the context that is specified by <paramref name="atPoint" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawImage">
      <MemberSignature Language="C#" Value="public virtual void DrawImage (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreGraphics.CGRect inRectangle, MonoTouch.CoreGraphics.CGRect fromRectangle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawImage(class MonoTouch.CoreImage.CIImage image, valuetype MonoTouch.CoreGraphics.CGRect inRectangle, valuetype MonoTouch.CoreGraphics.CGRect fromRectangle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawImage:inRect:fromRect:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="inRectangle" Type="MonoTouch.CoreGraphics.CGRect" />
        <Parameter Name="fromRectangle" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="inRectangle">To be added.</param>
        <param name="fromRectangle">To be added.</param>
        <summary>Draws the <paramref name="fromRect" /> portion of <paramref name="inRectangle" /> into the rectangle in the context that is specified by <paramref name="atPoint" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromContext (MonoTouch.CoreGraphics.CGContext ctx);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromContext(class MonoTouch.CoreGraphics.CGContext ctx) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="MonoTouch.CoreGraphics.CGContext" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <summary>Creates a new CIContext from an existing one.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromContext (MonoTouch.OpenGLES.EAGLContext eaglContext);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromContext(class MonoTouch.OpenGLES.EAGLContext eaglContext) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("contextWithEAGLContext:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eaglContext" Type="MonoTouch.OpenGLES.EAGLContext" />
      </Parameters>
      <Docs>
        <param name="eaglContext">To be added.</param>
        <summary>Creates a new <see cref="T:CoreImage.CIContext" /> from the provided <paramref name="eaglContext" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromContext (MonoTouch.CoreGraphics.CGContext ctx, MonoTouch.CoreImage.CIContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromContext(class MonoTouch.CoreGraphics.CGContext ctx, class MonoTouch.CoreImage.CIContextOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ctx" Type="MonoTouch.CoreGraphics.CGContext" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIContextOptions" />
      </Parameters>
      <Docs>
        <param name="ctx">To be added.</param>
        <param name="options">To be added.</param>
        <summary>Creates a new CIContext from an existing one, along with the provided </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromContext (MonoTouch.OpenGLES.EAGLContext eaglContext, MonoTouch.CoreImage.CIContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromContext(class MonoTouch.OpenGLES.EAGLContext eaglContext, class MonoTouch.CoreImage.CIContextOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eaglContext" Type="MonoTouch.OpenGLES.EAGLContext" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIContextOptions" />
      </Parameters>
      <Docs>
        <param name="eaglContext">The source <see cref="T:OpenGLES.EAGLContext" />.</param>
        <param name="options">The desired <see cref="T:CoreImage.CIContextOptions" />.</param>
        <summary>Creates a <see cref="T:CoreImage.CIContext" /> based on the <paramref name="eaglContext" />, with the specified <paramref name="options" />.</summary>
        <returns>A new <see cref="T:CoreImage.CIContext" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromContext">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromContext (MonoTouch.OpenGLES.EAGLContext eaglContext, MonoTouch.Foundation.NSDictionary dictionary);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromContext(class MonoTouch.OpenGLES.EAGLContext eaglContext, class MonoTouch.Foundation.NSDictionary dictionary) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("contextWithEAGLContext:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eaglContext" Type="MonoTouch.OpenGLES.EAGLContext" />
        <Parameter Name="dictionary" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="eaglContext">To be added.</param>
        <param name="dictionary">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new <see cref="T:CoreImage.CIContext" /> from the provided <paramref name="eaglContext" /> and by using the options that are named in <paramref name="dictionary" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMetalDevice">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromMetalDevice (MonoTouch.Metal.IMTLDevice device);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromMetalDevice(class MonoTouch.Metal.IMTLDevice device) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("contextWithMTLDevice:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="device" Type="MonoTouch.Metal.IMTLDevice" />
      </Parameters>
      <Docs>
        <param name="device">To be added.</param>
        <summary>Creates a new CIContext from the provided Metal device.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMetalDevice">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromMetalDevice (MonoTouch.Metal.IMTLDevice device, MonoTouch.CoreImage.CIContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromMetalDevice(class MonoTouch.Metal.IMTLDevice device, class MonoTouch.CoreImage.CIContextOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="device" Type="MonoTouch.Metal.IMTLDevice" />
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIContextOptions" />
      </Parameters>
      <Docs>
        <param name="device">To be added.</param>
        <param name="options">To be added.</param>
        <summary>Creates a new CIContext from the provided Metal device, along with the specified context.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMetalDevice">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromMetalDevice (MonoTouch.Metal.IMTLDevice device, MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSString,MonoTouch.Foundation.NSObject&gt; options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromMetalDevice(class MonoTouch.Metal.IMTLDevice device, class MonoTouch.Foundation.NSDictionary`2&lt;class MonoTouch.Foundation.NSString, class MonoTouch.Foundation.NSObject&gt; options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("contextWithMTLDevice:options:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="device" Type="MonoTouch.Metal.IMTLDevice" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSDictionary&lt;MonoTouch.Foundation.NSString,MonoTouch.Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="device">The source <see cref="T:MetalIMTlDevice" />.</param>
        <param name="options">The desired options for the new <see cref="T:CoreImag.CIContext" />.</param>
        <summary>Creates a new <see cref="T:CoreImage.CIContext" /> from the provided Metal <paramref name="device" />, applying the specified options.</summary>
        <returns>A new <see cref="T:CoreImage.CIContext" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromOptions">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreImage.CIContext FromOptions (MonoTouch.CoreImage.CIContextOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreImage.CIContext FromOptions(class MonoTouch.CoreImage.CIContextOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MonoTouch.CoreImage.CIContextOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>Creates a new <see cref="T:CoreImage.CIContext" /> from the options that are named in <paramref name="options" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputImageMaximumSize">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGSize InputImageMaximumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGSize InputImageMaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("inputImageMaximumSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the maximum allowed input image size.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputImageMaximumSize">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGSize OutputImageMaximumSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreGraphics.CGSize OutputImageMaximumSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("outputImageMaximumSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the maximum allowed output image size.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public virtual void Render (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreVideo.CVPixelBuffer buffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render(class MonoTouch.CoreImage.CIImage image, class MonoTouch.CoreVideo.CVPixelBuffer buffer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("render:toCVPixelBuffer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="buffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="buffer">To be added.</param>
        <summary>Renders <paramref name="image" /> to <paramref name="buffer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public virtual void Render (MonoTouch.CoreImage.CIImage image, MonoTouch.IOSurface.IOSurface surface, MonoTouch.CoreGraphics.CGRect bounds, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render(class MonoTouch.CoreImage.CIImage image, class MonoTouch.IOSurface.IOSurface surface, valuetype MonoTouch.CoreGraphics.CGRect bounds, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("render:toIOSurface:bounds:colorSpace:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="surface" Type="MonoTouch.IOSurface.IOSurface" />
        <Parameter Name="bounds" Type="MonoTouch.CoreGraphics.CGRect" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="surface">To be added.</param>
        <param name="bounds">To be added.</param>
        <param name="colorSpace">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public virtual void Render (MonoTouch.CoreImage.CIImage image, MonoTouch.CoreVideo.CVPixelBuffer buffer, MonoTouch.CoreGraphics.CGRect rectangle, MonoTouch.CoreGraphics.CGColorSpace cs);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render(class MonoTouch.CoreImage.CIImage image, class MonoTouch.CoreVideo.CVPixelBuffer buffer, valuetype MonoTouch.CoreGraphics.CGRect rectangle, class MonoTouch.CoreGraphics.CGColorSpace cs) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("render:toCVPixelBuffer:bounds:colorSpace:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="buffer" Type="MonoTouch.CoreVideo.CVPixelBuffer" />
        <Parameter Name="cs" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="rectangle" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="buffer">To be added.</param>
        <param name="rectangle">To be added.</param>
        <param name="cs">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Renders the <paramref name="rectangle" /> region of <paramref name="image" />, using the <paramref name="cs" /> color space, into <paramref name="buffer" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Render">
      <MemberSignature Language="C#" Value="public virtual void Render (MonoTouch.CoreImage.CIImage image, MonoTouch.Metal.IMTLTexture texture, MonoTouch.Metal.IMTLCommandBuffer commandBuffer, MonoTouch.CoreGraphics.CGRect bounds, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Render(class MonoTouch.CoreImage.CIImage image, class MonoTouch.Metal.IMTLTexture texture, class MonoTouch.Metal.IMTLCommandBuffer commandBuffer, valuetype MonoTouch.CoreGraphics.CGRect bounds, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("render:toMTLTexture:commandBuffer:bounds:colorSpace:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="texture" Type="MonoTouch.Metal.IMTLTexture" />
        <Parameter Name="commandBuffer" Type="MonoTouch.Metal.IMTLCommandBuffer" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="bounds" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="texture">To be added.</param>
        <param name="commandBuffer">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="bounds">To be added.</param>
        <param name="colorSpace">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Renders an image into the specified bounds of a Metal texture by queueing it into its command buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderToBitmap">
      <MemberSignature Language="C#" Value="public virtual void RenderToBitmap (MonoTouch.CoreImage.CIImage image, IntPtr bitmapPtr, nint bytesPerRow, MonoTouch.CoreGraphics.CGRect bounds, int bitmapFormat, MonoTouch.CoreGraphics.CGColorSpace colorSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenderToBitmap(class MonoTouch.CoreImage.CIImage image, native int bitmapPtr, valuetype System.nint bytesPerRow, valuetype MonoTouch.CoreGraphics.CGRect bounds, int32 bitmapFormat, class MonoTouch.CoreGraphics.CGColorSpace colorSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("render:toBitmap:rowBytes:bounds:format:colorSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.CoreImage.CIImage" />
        <Parameter Name="bitmapPtr" Type="System.IntPtr" />
        <Parameter Name="bitmapFormat" Type="System.Int32" />
        <Parameter Name="colorSpace" Type="MonoTouch.CoreGraphics.CGColorSpace" />
        <Parameter Name="bytesPerRow" Type="System.nint" />
        <Parameter Name="bounds" Type="MonoTouch.CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="bitmapPtr">To be added.</param>
        <param name="bytesPerRow">To be added.</param>
        <param name="bounds">To be added.</param>
        <param name="bitmapFormat">To be added.</param>
        <param name="colorSpace">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Renders the <paramref name="image" /> to <paramref name="bitmapPtr" /> by using the specified options.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingColorSpace">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreGraphics.CGColorSpace WorkingColorSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreGraphics.CGColorSpace WorkingColorSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("workingColorSpace")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreGraphics.CGColorSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The working <see cref="T:CoreGraphics.CGColorSpace" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WorkingFormat">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreImage.CIFormat WorkingFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreImage.CIFormat WorkingFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("workingFormat")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreImage.CIFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The working pixel format.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>