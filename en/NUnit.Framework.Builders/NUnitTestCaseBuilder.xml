<Type Name="NUnitTestCaseBuilder" FullName="NUnit.Framework.Builders.NUnitTestCaseBuilder">
  <TypeSignature Language="C#" Value="public class NUnitTestCaseBuilder : NUnit.Framework.Extensibility.ITestCaseBuilder2" apistyle="classic" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NUnitTestCaseBuilder extends System.Object implements class NUnit.Framework.Extensibility.ITestCaseBuilder, class NUnit.Framework.Extensibility.ITestCaseBuilder2" apistyle="classic" />
  <TypeSignature Language="C#" Value="public class NUnitTestCaseBuilder : Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Extensibility.ITestCaseBuilder2" apistyle="unified" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NUnitTestCaseBuilder extends System.Object implements class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Extensibility.ITestCaseBuilder, class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Extensibility.ITestCaseBuilder2" apistyle="unified" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.7.0.0</AssemblyVersion>
    <AssemblyVersion>0.8.0.0</AssemblyVersion>
    <AssemblyVersion>0.9.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>NUnit.Framework.Extensibility.ITestCaseBuilder2</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            Class to build ether a parameterized or a normal NUnitTestMethod.
            There are four cases that the builder must deal with:
            1. The method needs no params and none are provided
            2. The method needs params and they are provided
            3. The method needs no params but they are provided in error
            4. The method needs params but they are not provided
            This could have been done using two different builders, but it
            turned out to be simpler to have just one. The BuildFrom method
            takes a different branch depending on whether any parameters are
            provided, but all four cases are dealt with in lower-level methods
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NUnitTestCaseBuilder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildFrom" apistyle="classic">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Internal.Test BuildFrom (System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NUnit.Framework.Internal.Test BuildFrom(class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Internal.Test</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="method">The MethodInfo for which a test is to be built</param>
        <summary>
            Build a Test from the provided MethodInfo. Depending on
            whether the method takes arguments and on the availability
            of test case data, this method may return a single test
            or a group of tests contained in a ParameterizedMethodSuite.
            </summary>
        <returns>A Test representing one or more method invocations</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildFrom" apistyle="classic">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Internal.Test BuildFrom (System.Reflection.MethodInfo method, NUnit.Framework.Internal.Test parentSuite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NUnit.Framework.Internal.Test BuildFrom(class System.Reflection.MethodInfo method, class NUnit.Framework.Internal.Test parentSuite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Internal.Test</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parentSuite" Type="NUnit.Framework.Internal.Test" />
      </Parameters>
      <Docs>
        <param name="method">The MethodInfo for which a test is to be built</param>
        <param name="parentSuite">The test fixture being populated, or null</param>
        <summary>
            Build a Test from the provided MethodInfo. Depending on
            whether the method takes arguments and on the availability
            of test case data, this method may return a single test
            or a group of tests contained in a ParameterizedMethodSuite.
            </summary>
        <returns>A Test representing one or more method invocations</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BuildParameterizedMethodSuite" apistyle="classic">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Internal.Test BuildParameterizedMethodSuite (System.Reflection.MethodInfo method, NUnit.Framework.Internal.Test parentSuite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class NUnit.Framework.Internal.Test BuildParameterizedMethodSuite(class System.Reflection.MethodInfo method, class NUnit.Framework.Internal.Test parentSuite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Internal.Test</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parentSuite" Type="NUnit.Framework.Internal.Test" />
      </Parameters>
      <Docs>
        <param name="method">The MethodInfo for which a test is to be built</param>
        <param name="parentSuite">The test suite for which the method is being built</param>
        <summary>
            Builds a ParameterizedMetodSuite containing individual
            test cases for each set of parameters provided for
            this method.
            </summary>
        <returns>A ParameterizedMethodSuite populated with test cases</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBuildFrom">
      <MemberSignature Language="C#" Value="public bool CanBuildFrom (System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanBuildFrom(class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="method">A MethodInfo for the method being used as a test method</param>
        <summary>
            Determines if the method can be used to build an NUnit test
            test method of some kind. The method must normally be marked
            with an identifying attriute for this to be true.
            Note that this method does not check that the signature
            of the method for validity. If we did that here, any
            test methods with invalid signatures would be passed
            over in silence in the test run. Since we want such
            methods to be reported, the check for validity is made
            in BuildFrom rather than here.
            </summary>
        <returns>True if the builder can create a test case from this method</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBuildFrom">
      <MemberSignature Language="C#" Value="public bool CanBuildFrom (System.Reflection.MethodInfo method, NUnit.Framework.Internal.Test parentSuite);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanBuildFrom(class System.Reflection.MethodInfo method, class NUnit.Framework.Internal.Test parentSuite) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public bool CanBuildFrom (System.Reflection.MethodInfo method, Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.Test parentSuite);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanBuildFrom(class System.Reflection.MethodInfo method, class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.Test parentSuite) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="parentSuite" Type="NUnit.Framework.Internal.Test" apistyle="classic" />
        <Parameter Name="parentSuite" Type="Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.Test" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="method">A MethodInfo for the method being used as a test method</param>
        <param name="parentSuite">The test suite being built, to which the new test would be added</param>
        <summary>
            Determines if the method can be used to build an NUnit test
            test method of some kind. The method must normally be marked
            with an identifying attriute for this to be true.
            Note that this method does not check that the signature
            of the method for validity. If we did that here, any
            test methods with invalid signatures would be passed
            over in silence in the test run. Since we want such
            methods to be reported, the check for validity is made
            in BuildFrom rather than here.
            </summary>
        <returns>True if the builder can create a test case from this method</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
