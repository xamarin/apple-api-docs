<Type Name="CombinatorialTestCaseProvider" FullName="NUnit.Framework.Builders.CombinatorialTestCaseProvider">
  <TypeSignature Language="C#" Value="public class CombinatorialTestCaseProvider : NUnit.Framework.Extensibility.ITestCaseProvider" apistyle="classic" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CombinatorialTestCaseProvider extends System.Object implements class NUnit.Framework.Extensibility.ITestCaseProvider" apistyle="classic" />
  <TypeSignature Language="C#" Value="public class CombinatorialTestCaseProvider : Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Extensibility.ITestCaseProvider" apistyle="unified" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CombinatorialTestCaseProvider extends System.Object implements class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Extensibility.ITestCaseProvider" apistyle="unified" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.7.0.0</AssemblyVersion>
    <AssemblyVersion>0.8.0.0</AssemblyVersion>
    <AssemblyVersion>0.9.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>NUnit.Framework.Extensibility.ITestCaseProvider</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            CombinatorialTestCaseProvider creates test cases from individual
            parameter data values, combining them using the CombiningStrategy
            indicated by an Attribute used on the test method.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CombinatorialTestCaseProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTestCasesFor" apistyle="classic">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;NUnit.Framework.Api.ITestCaseData&gt; GetTestCasesFor (System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class NUnit.Framework.Api.ITestCaseData&gt; GetTestCasesFor(class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;NUnit.Framework.Api.ITestCaseData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="method">
        </param>
        <summary>
            Return an IEnumerable providing test cases for use in
            running a paramterized test.
            </summary>
        <returns />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasTestCasesFor">
      <MemberSignature Language="C#" Value="public bool HasTestCasesFor (System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasTestCasesFor(class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="method">A MethodInfo representing a parameterized test</param>
        <summary>
            Determine whether any test cases are available for a parameterized method.
            </summary>
        <returns>
            True if any cases are available, otherwise false.
            </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
