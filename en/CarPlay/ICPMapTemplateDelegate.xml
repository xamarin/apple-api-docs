<Type Name="ICPMapTemplateDelegate" FullName="CarPlay.ICPMapTemplateDelegate">
  <TypeSignature Language="C#" Value="public interface ICPMapTemplateDelegate : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICPMapTemplateDelegate implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:CarPlay.ICPMapTemplateDelegate" />
  <TypeSignature Language="F#" Value="type ICPMapTemplateDelegate = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="CPMapTemplateDelegate", WrapperType=typeof(CarPlay.CPMapTemplateDelegateWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldShowNotificationForManeuver", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPManeuver) }, ReturnType=typeof(System.Boolean), Selector="mapTemplate:shouldShowNotificationForManeuver:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldUpdateNotificationForManeuver", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPManeuver), typeof(CarPlay.CPTravelEstimates) }, ReturnType=typeof(System.Boolean), Selector="mapTemplate:shouldUpdateNotificationForManeuver:withTravelEstimates:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldShowNotificationForNavigationAlert", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPNavigationAlert) }, ReturnType=typeof(System.Boolean), Selector="mapTemplate:shouldShowNotificationForNavigationAlert:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidShowPanningInterface", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate) }, Selector="mapTemplateDidShowPanningInterface:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDismissPanningInterface", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate) }, Selector="mapTemplateWillDismissPanningInterface:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidDismissPanningInterface", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate) }, Selector="mapTemplateDidDismissPanningInterface:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PanBegan", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPPanDirection) }, Selector="mapTemplate:panBeganWithDirection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PanEnded", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPPanDirection) }, Selector="mapTemplate:panEndedWithDirection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="Pan", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPPanDirection) }, Selector="mapTemplate:panWithDirection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidBeginPanGesture", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate) }, Selector="mapTemplateDidBeginPanGesture:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidUpdatePanGesture", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CoreGraphics.CGPoint), typeof(CoreGraphics.CGPoint) }, Selector="mapTemplate:didUpdatePanGestureWithTranslation:velocity:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidEndPanGesture", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CoreGraphics.CGPoint) }, Selector="mapTemplate:didEndPanGestureWithVelocity:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillShowNavigationAlert", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPNavigationAlert) }, Selector="mapTemplate:willShowNavigationAlert:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidShowNavigationAlert", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPNavigationAlert) }, Selector="mapTemplate:didShowNavigationAlert:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDismissNavigationAlert", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPNavigationAlert), typeof(CarPlay.CPNavigationAlertDismissalContext) }, Selector="mapTemplate:willDismissNavigationAlert:dismissalContext:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidDismissNavigationAlert", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPNavigationAlert), typeof(CarPlay.CPNavigationAlertDismissalContext) }, Selector="mapTemplate:didDismissNavigationAlert:dismissalContext:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SelectedPreview", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPTrip), typeof(CarPlay.CPRouteChoice) }, Selector="mapTemplate:selectedPreviewForTrip:usingRouteChoice:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="StartedTrip", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPTrip), typeof(CarPlay.CPRouteChoice) }, Selector="mapTemplate:startedTrip:usingRouteChoice:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidCancelNavigation", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate) }, Selector="mapTemplateDidCancelNavigation:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetDisplayStyle", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CarPlay.CPMapTemplate), typeof(CarPlay.CPManeuver) }, ReturnType=typeof(CarPlay.CPManeuverDisplayStyle), Selector="mapTemplate:displayStyleForManeuver:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate object for <see cref="T:CarPlay.CPMapTemplate" /> objects.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members />
</Type>
