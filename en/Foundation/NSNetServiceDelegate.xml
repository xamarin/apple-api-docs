<Type Name="NSNetServiceDelegate" FullName="Foundation.NSNetServiceDelegate">
  <TypeSignature Language="C#" Value="public class NSNetServiceDelegate : Foundation.NSObject, Foundation.INSNetServiceDelegate, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSNetServiceDelegate extends Foundation.NSObject implements class Foundation.INSNetServiceDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSNetServiceDelegate" />
  <TypeSignature Language="F#" Value="type NSNetServiceDelegate = class&#xA;    inherit NSObject&#xA;    interface INSNetServiceDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSNetServiceDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("NSNetServiceDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate class for NSNetService.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSNetServiceDelegate_Protocol/index.html">Apple documentation for <c>NSNetServiceDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSNetServiceDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSNetServiceDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSNetServiceDelegate : Foundation.NSObjectFlag -&gt; Foundation.NSNetServiceDelegate" Usage="new Foundation.NSNetServiceDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSNetServiceDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSNetServiceDelegate : nativeint -&gt; Foundation.NSNetServiceDelegate" Usage="new Foundation.NSNetServiceDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddressResolved">
      <MemberSignature Language="C#" Value="public virtual void AddressResolved (Foundation.NSNetService sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddressResolved(class Foundation.NSNetService sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.AddressResolved(Foundation.NSNetService)" />
      <MemberSignature Language="F#" Value="abstract member AddressResolved : Foundation.NSNetService -&gt; unit&#xA;override this.AddressResolved : Foundation.NSNetService -&gt; unit" Usage="nSNetServiceDelegate.AddressResolved sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("netServiceDidResolveAddress:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSNetService" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidAcceptConnection">
      <MemberSignature Language="C#" Value="public virtual void DidAcceptConnection (Foundation.NSNetService sender, Foundation.NSInputStream inputStream, Foundation.NSOutputStream outputStream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidAcceptConnection(class Foundation.NSNetService sender, class Foundation.NSInputStream inputStream, class Foundation.NSOutputStream outputStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.DidAcceptConnection(Foundation.NSNetService,Foundation.NSInputStream,Foundation.NSOutputStream)" />
      <MemberSignature Language="F#" Value="abstract member DidAcceptConnection : Foundation.NSNetService * Foundation.NSInputStream * Foundation.NSOutputStream -&gt; unit&#xA;override this.DidAcceptConnection : Foundation.NSNetService * Foundation.NSInputStream * Foundation.NSOutputStream -&gt; unit" Usage="nSNetServiceDelegate.DidAcceptConnection (sender, inputStream, outputStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("netService:didAcceptConnectionWithInputStream:outputStream:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSNetService" />
        <Parameter Name="inputStream" Type="Foundation.NSInputStream" />
        <Parameter Name="outputStream" Type="Foundation.NSOutputStream" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <param name="inputStream">To be added.</param>
        <param name="outputStream">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Published">
      <MemberSignature Language="C#" Value="public virtual void Published (Foundation.NSNetService sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Published(class Foundation.NSNetService sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.Published(Foundation.NSNetService)" />
      <MemberSignature Language="F#" Value="abstract member Published : Foundation.NSNetService -&gt; unit&#xA;override this.Published : Foundation.NSNetService -&gt; unit" Usage="nSNetServiceDelegate.Published sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("netServiceDidPublish:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSNetService" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PublishFailure">
      <MemberSignature Language="C#" Value="public virtual void PublishFailure (Foundation.NSNetService sender, Foundation.NSDictionary errors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PublishFailure(class Foundation.NSNetService sender, class Foundation.NSDictionary errors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.PublishFailure(Foundation.NSNetService,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member PublishFailure : Foundation.NSNetService * Foundation.NSDictionary -&gt; unit&#xA;override this.PublishFailure : Foundation.NSNetService * Foundation.NSDictionary -&gt; unit" Usage="nSNetServiceDelegate.PublishFailure (sender, errors)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("netService:didNotPublish:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSNetService" />
        <Parameter Name="errors" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <param name="errors">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveFailure">
      <MemberSignature Language="C#" Value="public virtual void ResolveFailure (Foundation.NSNetService sender, Foundation.NSDictionary errors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResolveFailure(class Foundation.NSNetService sender, class Foundation.NSDictionary errors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.ResolveFailure(Foundation.NSNetService,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="abstract member ResolveFailure : Foundation.NSNetService * Foundation.NSDictionary -&gt; unit&#xA;override this.ResolveFailure : Foundation.NSNetService * Foundation.NSDictionary -&gt; unit" Usage="nSNetServiceDelegate.ResolveFailure (sender, errors)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("netService:didNotResolve:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSNetService" />
        <Parameter Name="errors" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <param name="errors">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stopped">
      <MemberSignature Language="C#" Value="public virtual void Stopped (Foundation.NSNetService sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Stopped(class Foundation.NSNetService sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.Stopped(Foundation.NSNetService)" />
      <MemberSignature Language="F#" Value="abstract member Stopped : Foundation.NSNetService -&gt; unit&#xA;override this.Stopped : Foundation.NSNetService -&gt; unit" Usage="nSNetServiceDelegate.Stopped sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("netServiceDidStop:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSNetService" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatedTxtRecordData">
      <MemberSignature Language="C#" Value="public virtual void UpdatedTxtRecordData (Foundation.NSNetService sender, Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdatedTxtRecordData(class Foundation.NSNetService sender, class Foundation.NSData data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.UpdatedTxtRecordData(Foundation.NSNetService,Foundation.NSData)" />
      <MemberSignature Language="F#" Value="abstract member UpdatedTxtRecordData : Foundation.NSNetService * Foundation.NSData -&gt; unit&#xA;override this.UpdatedTxtRecordData : Foundation.NSNetService * Foundation.NSData -&gt; unit" Usage="nSNetServiceDelegate.UpdatedTxtRecordData (sender, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("netService:didUpdateTXTRecordData:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSNetService" />
        <Parameter Name="data" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <param name="data">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPublish">
      <MemberSignature Language="C#" Value="public virtual void WillPublish (Foundation.NSNetService sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillPublish(class Foundation.NSNetService sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.WillPublish(Foundation.NSNetService)" />
      <MemberSignature Language="F#" Value="abstract member WillPublish : Foundation.NSNetService -&gt; unit&#xA;override this.WillPublish : Foundation.NSNetService -&gt; unit" Usage="nSNetServiceDelegate.WillPublish sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("netServiceWillPublish:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSNetService" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillResolve">
      <MemberSignature Language="C#" Value="public virtual void WillResolve (Foundation.NSNetService sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillResolve(class Foundation.NSNetService sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSNetServiceDelegate.WillResolve(Foundation.NSNetService)" />
      <MemberSignature Language="F#" Value="abstract member WillResolve : Foundation.NSNetService -&gt; unit&#xA;override this.WillResolve : Foundation.NSNetService -&gt; unit" Usage="nSNetServiceDelegate.WillResolve sender" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("netServiceWillResolve:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sender" Type="Foundation.NSNetService" />
      </Parameters>
      <Docs>
        <param name="sender">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
