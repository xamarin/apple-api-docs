<Type Name="NSCharacterSet" FullName="Foundation.NSCharacterSet">
  <TypeSignature Language="C#" Value="public class NSCharacterSet : Foundation.NSObject, Foundation.INSMutableCopying, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSCharacterSet extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSMutableCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSCharacterSet" />
  <TypeSignature Language="F#" Value="type NSCharacterSet = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSCopying&#xA;    interface INSMutableCopying&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSMutableCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSCharacterSet", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class that encapsulates an immutable set of Unicode characters.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSCharacterSet_Class/index.html">Apple documentation for <c>NSCharacterSet</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSCharacterSet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSCharacterSet (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new Foundation.NSCharacterSet : Foundation.NSCoder -&gt; Foundation.NSCharacterSet" Usage="new Foundation.NSCharacterSet coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSCharacterSet (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSCharacterSet : Foundation.NSObjectFlag -&gt; Foundation.NSCharacterSet" Usage="new Foundation.NSCharacterSet t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSCharacterSet (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSCharacterSet : nativeint -&gt; Foundation.NSCharacterSet" Usage="new Foundation.NSCharacterSet handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Alphanumerics">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Alphanumerics { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Alphanumerics" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Alphanumerics" />
      <MemberSignature Language="F#" Value="member this.Alphanumerics : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Alphanumerics" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("alphanumericCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the characters in the categories Letters, Marks, and Numbers.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Capitalized">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Capitalized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Capitalized" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Capitalized" />
      <MemberSignature Language="F#" Value="member this.Capitalized : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Capitalized" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("capitalizedLetterCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the characters in the category of Titlecase Letters.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSCharacterSet.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (char aCharacter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(char aCharacter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.Contains(System.Char)" />
      <MemberSignature Language="F#" Value="abstract member Contains : char -&gt; bool&#xA;override this.Contains : char -&gt; bool" Usage="nSCharacterSet.Contains aCharacter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterIsMember:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aCharacter" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="aCharacter">To be added.</param>
        <summary>Whether this NSCharacterSet contains the specified char.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (uint theLongChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(unsigned int32 theLongChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.Contains(System.UInt32)" />
      <MemberSignature Language="F#" Value="abstract member Contains : uint32 -&gt; bool&#xA;override this.Contains : uint32 -&gt; bool" Usage="nSCharacterSet.Contains theLongChar" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("longCharacterIsMember:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="theLongChar" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="theLongChar">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Controls">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Controls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Controls" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Controls" />
      <MemberSignature Language="F#" Value="member this.Controls : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Controls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("controlCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the characters in the categories of Control or Format Characters.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="nSCharacterSet.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecimalDigits">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet DecimalDigits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet DecimalDigits" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.DecimalDigits" />
      <MemberSignature Language="F#" Value="member this.DecimalDigits : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.DecimalDigits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("decimalDigitCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the characters in the category of Decimal Numbers.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Decomposables">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Decomposables { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Decomposables" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Decomposables" />
      <MemberSignature Language="F#" Value="member this.Decomposables : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Decomposables" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("decomposableCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing all individual Unicode characters that can also be represented as composed character sequences.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="nSCharacterSet.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromBitmap">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet FromBitmap (Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSCharacterSet FromBitmap(class Foundation.NSData data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.FromBitmap(Foundation.NSData)" />
      <MemberSignature Language="F#" Value="static member FromBitmap : Foundation.NSData -&gt; Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.FromBitmap data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterSetWithBitmapRepresentation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <summary>A character set containing characters determined by a given bitmap representation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet FromFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSCharacterSet FromFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.FromFile(System.String)" />
      <MemberSignature Language="F#" Value="static member FromFile : string -&gt; Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.FromFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterSetWithContentsOfFile:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>A character set read from the bitmap representation stored in the file at the specified path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRange">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet FromRange (Foundation.NSRange aRange);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSCharacterSet FromRange(valuetype Foundation.NSRange aRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.FromRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="static member FromRange : Foundation.NSRange -&gt; Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.FromRange aRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterSetWithRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="aRange">To be added.</param>
        <summary>A character set of Unicode characters in the specified range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromString">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet FromString (string aString);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSCharacterSet FromString(string aString) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.FromString(System.String)" />
      <MemberSignature Language="F#" Value="static member FromString : string -&gt; Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.FromString aString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterSetWithCharactersInString:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aString">To be added.</param>
        <summary>A character set of the characters found in the specified string.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBitmapRepresentation">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData GetBitmapRepresentation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData GetBitmapRepresentation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.GetBitmapRepresentation" />
      <MemberSignature Language="F#" Value="abstract member GetBitmapRepresentation : unit -&gt; Foundation.NSData&#xA;override this.GetBitmapRepresentation : unit -&gt; Foundation.NSData" Usage="nSCharacterSet.GetBitmapRepresentation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("bitmapRepresentation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Raw bitmap of size 2^16. Bit at n indicates decimal Unicode n is present.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasMemberInPlane">
      <MemberSignature Language="C#" Value="public virtual bool HasMemberInPlane (byte thePlane);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasMemberInPlane(unsigned int8 thePlane) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.HasMemberInPlane(System.Byte)" />
      <MemberSignature Language="F#" Value="abstract member HasMemberInPlane : byte -&gt; bool&#xA;override this.HasMemberInPlane : byte -&gt; bool" Usage="nSCharacterSet.HasMemberInPlane thePlane" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("hasMemberInPlane:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="thePlane" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="thePlane">To be added.</param>
        <summary>Whether this character set has at least one member in the character plane.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Illegals">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Illegals { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Illegals" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Illegals" />
      <MemberSignature Language="F#" Value="member this.Illegals : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Illegals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("illegalCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing values in the category of Non-Characters or that have not yet been defined in version 3.2 of the Unicode standard.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvertedSet">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSCharacterSet InvertedSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSCharacterSet InvertedSet" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.InvertedSet" />
      <MemberSignature Language="F#" Value="member this.InvertedSet : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.InvertedSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("invertedSet")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing only characters that are not present in this character set.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSupersetOf">
      <MemberSignature Language="C#" Value="public virtual bool IsSupersetOf (Foundation.NSCharacterSet theOtherSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSupersetOf(class Foundation.NSCharacterSet theOtherSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.IsSupersetOf(Foundation.NSCharacterSet)" />
      <MemberSignature Language="F#" Value="abstract member IsSupersetOf : Foundation.NSCharacterSet -&gt; bool&#xA;override this.IsSupersetOf : Foundation.NSCharacterSet -&gt; bool" Usage="nSCharacterSet.IsSupersetOf theOtherSet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("isSupersetOfSet:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="theOtherSet" Type="Foundation.NSCharacterSet" />
      </Parameters>
      <Docs>
        <param name="theOtherSet">To be added.</param>
        <summary>Whether this character set is a superset of the specified other character set.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Letters">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Letters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Letters" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Letters" />
      <MemberSignature Language="F#" Value="member this.Letters : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Letters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("letterCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the characters in the categories Letters and Marks.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LowercaseLetters">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet LowercaseLetters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet LowercaseLetters" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.LowercaseLetters" />
      <MemberSignature Language="F#" Value="member this.LowercaseLetters : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.LowercaseLetters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("lowercaseLetterCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the characters in the category of Lowercase Letters.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Marks">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Marks { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Marks" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Marks" />
      <MemberSignature Language="F#" Value="member this.Marks : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Marks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("nonBaseCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the characters in the category of Marks. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableCopy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject MutableCopy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject MutableCopy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSCharacterSet.MutableCopy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.MutableCopy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="nSCharacterSet.MutableCopy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSMutableCopying.MutableCopy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("mutableCopyWithZone:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Newlines">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Newlines { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Newlines" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Newlines" />
      <MemberSignature Language="F#" Value="member this.Newlines : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Newlines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("newlineCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the newline characters.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Punctuation">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Punctuation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Punctuation" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Punctuation" />
      <MemberSignature Language="F#" Value="member this.Punctuation : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Punctuation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("punctuationCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the characters in the category of Punctuation.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Symbols">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Symbols { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Symbols" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Symbols" />
      <MemberSignature Language="F#" Value="member this.Symbols : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Symbols" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("symbolCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the characters in the category of Symbols.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UppercaseLetters">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet UppercaseLetters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet UppercaseLetters" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.UppercaseLetters" />
      <MemberSignature Language="F#" Value="member this.UppercaseLetters : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.UppercaseLetters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("uppercaseLetterCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing the characters in the categories of Uppercase Letters and Titlecase Letters.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WhitespaceAndNewlines">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet WhitespaceAndNewlines { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet WhitespaceAndNewlines" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.WhitespaceAndNewlines" />
      <MemberSignature Language="F#" Value="member this.WhitespaceAndNewlines : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.WhitespaceAndNewlines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("whitespaceAndNewlineCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing Unicode General Category Z*, U000A ~ U000D, and U0085.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Whitespaces">
      <MemberSignature Language="C#" Value="public static Foundation.NSCharacterSet Whitespaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSCharacterSet Whitespaces" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSCharacterSet.Whitespaces" />
      <MemberSignature Language="F#" Value="member this.Whitespaces : Foundation.NSCharacterSet" Usage="Foundation.NSCharacterSet.Whitespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("whitespaceCharacterSet", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A character set containing only the in-line whitespace characters space (U+0020) and tab (U+0009).</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
