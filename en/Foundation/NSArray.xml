<Type Name="NSArray" FullName="Foundation.NSArray">
  <TypeSignature Language="C#" Value="public class NSArray : Foundation.NSObject, CloudKit.ICKRecordValue, Foundation.INSMutableCopying, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSArray extends Foundation.NSObject implements class CloudKit.ICKRecordValue, class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSMutableCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSArray" />
  <TypeSignature Language="F#" Value="type NSArray = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSCopying&#xA;    interface INSMutableCopying&#xA;    interface INSSecureCoding&#xA;    interface ICKRecordValue" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>CloudKit.ICKRecordValue</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSMutableCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSArray", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An untyped Objective-C array.</summary>
    <remarks>
      <para>

	Due to the loose typed nature of NSArray, it is not generally
	used or surfaced by most APIs.  Instead, strongly typed C#
	arrays are surfaced to developers.  This type is available in
	the binding for some low-level operations that require the use
	of the type directly.

      </para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=67b46eb2-81d9-477f-a448-18e68db1227b">AppPrefs</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=c66750f5-a4dd-4ea8-b5f8-10c01098bae0">WorldCities</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSArray_Class/index.html">Apple documentation for <c>NSArray</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSArray ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSArray (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new Foundation.NSArray : Foundation.NSCoder -&gt; Foundation.NSArray" Usage="new Foundation.NSArray coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSArray (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSArray : Foundation.NSObjectFlag -&gt; Foundation.NSArray" Usage="new Foundation.NSArray t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSArray (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSArray : nativeint -&gt; Foundation.NSArray" Usage="new Foundation.NSArray handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddObserver">
      <MemberSignature Language="C#" Value="public virtual void AddObserver (Foundation.NSObject observer, Foundation.NSIndexSet indexes, string keyPath, Foundation.NSKeyValueObservingOptions options, IntPtr context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddObserver(class Foundation.NSObject observer, class Foundation.NSIndexSet indexes, string keyPath, valuetype Foundation.NSKeyValueObservingOptions options, native int context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.AddObserver(Foundation.NSObject,Foundation.NSIndexSet,System.String,Foundation.NSKeyValueObservingOptions,System.IntPtr)" />
      <MemberSignature Language="F#" Value="override this.AddObserver : Foundation.NSObject * Foundation.NSIndexSet * string * Foundation.NSKeyValueObservingOptions * nativeint -&gt; unit" Usage="nSArray.AddObserver (observer, indexes, keyPath, options, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addObserver:toObjectsAtIndexes:forKeyPath:options:context:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="Foundation.NSObject" />
        <Parameter Name="indexes" Type="Foundation.NSIndexSet" />
        <Parameter Name="keyPath" Type="System.String" />
        <Parameter Name="options" Type="Foundation.NSKeyValueObservingOptions" />
        <Parameter Name="context" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="observer">To be added.</param>
        <param name="indexes">To be added.</param>
        <param name="keyPath">To be added.</param>
        <param name="options">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayFromHandle&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] ArrayFromHandle&lt;T&gt; (IntPtr handle) where T : class, ObjCRuntime.INativeObject;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] ArrayFromHandle&lt;class (class ObjCRuntime.INativeObject) T&gt;(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.ArrayFromHandle``1(System.IntPtr)" />
      <MemberSignature Language="F#" Value="static member ArrayFromHandle : nativeint -&gt; 'T[] (requires 'T : null and 'T :&gt; ObjCRuntime.INativeObject)" Usage="Foundation.NSArray.ArrayFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parameter type, determines the kind of array returned.</typeparam>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>Returns a strongly-typed C# array of the parametrized type from a handle to an NSArray.</summary>
        <returns>An C# array with the values.</returns>
        <remarks>
          <para>Use this method to get a set of NSObject arrays from a handle to an NSArray</para>
          <example>
            <code lang="c#"><![CDATA[
IntPtr someHandle = ...;

NSString [] values = NSArray.ArrayFromHandle<NSString> (someHandle);
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayFromHandle&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] ArrayFromHandle&lt;T&gt; (IntPtr handle, Converter&lt;IntPtr,T&gt; creator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] ArrayFromHandle&lt;T&gt;(native int handle, class System.Converter`2&lt;native int, !!T&gt; creator) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.ArrayFromHandle``1(System.IntPtr,System.Converter{System.IntPtr,``0})" />
      <MemberSignature Language="F#" Value="static member ArrayFromHandle : nativeint * Converter&lt;nativeint, 'T&gt; -&gt; 'T[]" Usage="Foundation.NSArray.ArrayFromHandle (handle, creator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="creator" Type="System.Converter&lt;System.IntPtr,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parameter type, determines the kind of array returned.</typeparam>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <param name="creator">Method that can create objects of type T from a given IntPtr.</param>
        <summary>Returns a strongly-typed C# array of the parametrized type from a handle to an NSArray.</summary>
        <returns>An C# array with the values.</returns>
        <remarks>
          <para>Use this method to get a set of NSObject arrays from a handle to an NSArray.   Instead of wrapping the results in NSObjects, the code invokes your method to create the return value.</para>
          <example>
            <code lang="c#"><![CDATA[
int myCreator (IntPtr v)
{
	return (int) v;
}

int [] args = NSArray.ArrayFromHandle<int> (someHandle, myCreator);
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ArrayFromHandleFunc&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] ArrayFromHandleFunc&lt;T&gt; (IntPtr handle, Func&lt;IntPtr,T&gt; createObject);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] ArrayFromHandleFunc&lt;T&gt;(native int handle, class System.Func`2&lt;native int, !!T&gt; createObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.ArrayFromHandleFunc``1(System.IntPtr,System.Func{System.IntPtr,``0})" />
      <MemberSignature Language="F#" Value="static member ArrayFromHandleFunc : nativeint * Func&lt;nativeint, 'T&gt; -&gt; 'T[]" Usage="Foundation.NSArray.ArrayFromHandleFunc (handle, createObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="createObject" Type="System.Func&lt;System.IntPtr,T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parameter type, determines the kind of array returned.</typeparam>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <param name="createObject">To be added.</param>
        <summary>Returns a strongly-typed C# array of the parametrized type from a handle to an NSArray.</summary>
        <returns>An C# array with the values.</returns>
        <remarks>
          <para>Use this method to get a set of NSObject arrays from a handle to an NSArray.   Instead of wrapping the results in NSObjects, the code invokes your method to create the return value.</para>
          <example>
            <code lang="c#"><![CDATA[
int [] args = NSArray.ArrayFromHandle<int> (someHandle, (x) => (int) x);
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSArray.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSArray.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (Foundation.NSObject anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class Foundation.NSObject anObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.Contains(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member Contains : Foundation.NSObject -&gt; bool&#xA;override this.Contains : Foundation.NSObject -&gt; bool" Usage="nSArray.Contains anObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("containsObject:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="anObject">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="nSArray.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual nuint Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint Count" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSArray.Count" />
      <MemberSignature Language="F#" Value="member this.Count : nuint" Usage="Foundation.NSArray.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("count")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="nSArray.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumsFromHandle&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] EnumsFromHandle&lt;T&gt; (IntPtr handle) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] EnumsFromHandle&lt;struct .ctor (class System.IConvertible, class System.ValueType) T&gt;(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.EnumsFromHandle``1(System.IntPtr)" />
      <MemberSignature Language="F#" Value="static member EnumsFromHandle : nativeint -&gt; 'T[] (requires 'T : struct)" Usage="Foundation.NSArray.EnumsFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
            <InterfaceName>System.IConvertible</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSArray Filter (Foundation.NSPredicate predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSArray Filter(class Foundation.NSPredicate predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.Filter(Foundation.NSPredicate)" />
      <MemberSignature Language="F#" Value="abstract member Filter : Foundation.NSPredicate -&gt; Foundation.NSArray&#xA;override this.Filter : Foundation.NSPredicate -&gt; Foundation.NSArray" Usage="nSArray.Filter predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("filteredArrayUsingPredicate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Foundation.NSPredicate" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="From">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray From (Foundation.NSObject[][] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray From(class Foundation.NSObject[][] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.From(Foundation.NSObject[][])" />
      <MemberSignature Language="F#" Value="static member From : Foundation.NSObject[][] -&gt; Foundation.NSArray" Usage="Foundation.NSArray.From items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Foundation.NSObject[][]" />
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] FromArray&lt;T&gt; (Foundation.NSArray weakArray) where T : Foundation.NSObject;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] FromArray&lt;(class Foundation.NSObject) T&gt;(class Foundation.NSArray weakArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromArray``1(Foundation.NSArray)" />
      <MemberSignature Language="F#" Value="static member FromArray : Foundation.NSArray -&gt; 'T[] (requires 'T :&gt; Foundation.NSObject)" Usage="Foundation.NSArray.FromArray weakArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>Foundation.NSObject</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="weakArray" Type="Foundation.NSArray" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parameter type, determines the kind of
	array returned, limited to NSObject and subclasses of it.</typeparam>
        <param name="weakArray">Handle to an weakly typed NSArray.</param>
        <summary>Returns a strongly-typed C# array of the parametrized type from a weakly typed NSArray.</summary>
        <returns>An C# array with the values.</returns>
        <remarks>
          <para>Use this method to get a set of NSObject arrays from an NSArray.</para>
          <example>
            <code lang="c#"><![CDATA[
NSArray someArray = ...;

NSString [] values = NSArray.FromArray<CGImage> (someArray);
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromArrayNative&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T[] FromArrayNative&lt;T&gt; (Foundation.NSArray weakArray) where T : class, ObjCRuntime.INativeObject;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T[] FromArrayNative&lt;class (class ObjCRuntime.INativeObject) T&gt;(class Foundation.NSArray weakArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromArrayNative``1(Foundation.NSArray)" />
      <MemberSignature Language="F#" Value="static member FromArrayNative : Foundation.NSArray -&gt; 'T[] (requires 'T : null and 'T :&gt; ObjCRuntime.INativeObject)" Usage="Foundation.NSArray.FromArrayNative weakArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="weakArray" Type="Foundation.NSArray" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parameter type, determines the kind of
	array returned, can be either an NSObject, or other
	CoreGraphics data types.</typeparam>
        <param name="weakArray">Handle to an weakly typed NSArray.</param>
        <summary>Returns a strongly-typed C# array of the parametrized type from a weakly typed NSArray.</summary>
        <returns>An C# array with the values.</returns>
        <remarks>
          <para>Use this method to get a set of NSObject arrays from an NSArray.</para>
          <example>
            <code lang="c#"><![CDATA[
NSArray someArray = ...;

CGImage [] myImages = NSArray.FromArray<CGImage> (someArray);
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromArrayOfArray">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject[][] FromArrayOfArray (Foundation.NSArray weakArray);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject[][] FromArrayOfArray(class Foundation.NSArray weakArray) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromArrayOfArray(Foundation.NSArray)" />
      <MemberSignature Language="F#" Value="static member FromArrayOfArray : Foundation.NSArray -&gt; Foundation.NSObject[][]" Usage="Foundation.NSArray.FromArrayOfArray weakArray" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject[][]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="weakArray" Type="Foundation.NSArray" />
      </Parameters>
      <Docs>
        <param name="weakArray">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromFile (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromFile(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromFile(System.String)" />
      <MemberSignature Language="F#" Value="static member FromFile : string -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromFile path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("arrayWithContentsOfFile:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromIntPtrs">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromIntPtrs (IntPtr[] vals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromIntPtrs(native int[] vals) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromIntPtrs(System.IntPtr[])" />
      <MemberSignature Language="F#" Value="static member FromIntPtrs : nativeint[] -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromIntPtrs vals" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vals" Type="System.IntPtr[]" />
      </Parameters>
      <Docs>
        <param name="vals">An array with IntPtr values.</param>
        <summary>Creates an NSArray containing the elements in the specified array.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNSObjects">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromNSObjects (params Foundation.NSObject[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromNSObjects(class Foundation.NSObject[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromNSObjects(Foundation.NSObject[])" />
      <MemberSignature Language="F#" Value="static member FromNSObjects : Foundation.NSObject[] -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromNSObjects items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Foundation.NSObject[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">Strongly typed array of NSObjects.</param>
        <summary>Creates an NSArray from a C# array of NSObjects.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNSObjects">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromNSObjects (params ObjCRuntime.INativeObject[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromNSObjects(class ObjCRuntime.INativeObject[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromNSObjects(ObjCRuntime.INativeObject[])" />
      <MemberSignature Language="F#" Value="static member FromNSObjects : ObjCRuntime.INativeObject[] -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromNSObjects items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="ObjCRuntime.INativeObject[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNSObjects">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromNSObjects (int count, params Foundation.NSObject[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromNSObjects(int32 count, class Foundation.NSObject[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromNSObjects(System.Int32,Foundation.NSObject[])" />
      <MemberSignature Language="F#" Value="static member FromNSObjects : int * Foundation.NSObject[] -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromNSObjects (count, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="items" Type="Foundation.NSObject[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">Number of items to copy from the items array.</param>
        <param name="items">Strongly typed array of NSObjects.</param>
        <summary>Creates an NSArray from a C# array of NSObjects.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNSObjects">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromNSObjects (int count, params ObjCRuntime.INativeObject[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromNSObjects(int32 count, class ObjCRuntime.INativeObject[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromNSObjects(System.Int32,ObjCRuntime.INativeObject[])" />
      <MemberSignature Language="F#" Value="static member FromNSObjects : int * ObjCRuntime.INativeObject[] -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromNSObjects (count, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.Int32" />
        <Parameter Name="items" Type="ObjCRuntime.INativeObject[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">To be added.</param>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNSObjects&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromNSObjects&lt;T&gt; (Func&lt;T,Foundation.NSObject&gt; nsobjectificator, params T[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromNSObjects&lt;T&gt;(class System.Func`2&lt;!!T, class Foundation.NSObject&gt; nsobjectificator, !!T[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromNSObjects``1(System.Func{``0,Foundation.NSObject},``0[])" />
      <MemberSignature Language="F#" Value="static member FromNSObjects : Func&lt;'T, Foundation.NSObject&gt; * 'T[] -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromNSObjects (nsobjectificator, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="nsobjectificator" Type="System.Func&lt;T,Foundation.NSObject&gt;" />
        <Parameter Name="items" Type="T[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="nsobjectificator">To be added.</param>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromObjects">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromObjects (params object[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromObjects(object[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromObjects(System.Object[])" />
      <MemberSignature Language="F#" Value="static member FromObjects : obj[] -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromObjects items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">Array of C# objects.</param>
        <summary>Creates an NSArray from a C# array of NSObjects.</summary>
        <returns>
        </returns>
        <remarks>The values will be boxed into
	NSObjects using <see cref="M:Foundation.NSObject.FromObject" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromObjects">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromObjects (nint count, params object[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromObjects(valuetype System.nint count, object[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromObjects(System.nint,System.Object[])" />
      <MemberSignature Language="F#" Value="static member FromObjects : nint * obj[] -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromObjects (count, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="count" Type="System.nint" />
        <Parameter Name="items" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="count">To be added.</param>
        <param name="items">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromStrings">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromStrings (params string[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromStrings(string[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromStrings(System.String[])" />
      <MemberSignature Language="F#" Value="static member FromStrings : string[] -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromStrings items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="items">Array of C# strings.</param>
        <summary>Creates an NSArray from a C# array of strings.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray FromUrl (Foundation.NSUrl url, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSArray FromUrl(class Foundation.NSUrl url, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.FromUrl(Foundation.NSUrl,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member FromUrl : Foundation.NSUrl *  -&gt; Foundation.NSArray" Usage="Foundation.NSArray.FromUrl (url, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("arrayWithContentsOfURL:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItem&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetItem&lt;T&gt; (nuint index) where T : class, ObjCRuntime.INativeObject;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetItem&lt;class (class ObjCRuntime.INativeObject) T&gt;(valuetype System.nuint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.GetItem``1(System.nuint)" />
      <MemberSignature Language="F#" Value="member this.GetItem : nuint -&gt; 'T (requires 'T : null and 'T :&gt; ObjCRuntime.INativeObject)" Usage="nSArray.GetItem index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>ReferenceTypeConstraint</ParameterAttribute>
            <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="index" Type="System.nuint" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public virtual nuint IndexOf (Foundation.NSObject anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint IndexOf(class Foundation.NSObject anObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.IndexOf(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : Foundation.NSObject -&gt; nuint&#xA;override this.IndexOf : Foundation.NSObject -&gt; nuint" Usage="nSArray.IndexOf anObject" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexOfObject:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anObject" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="anObject">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableCopy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject MutableCopy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject MutableCopy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.MutableCopy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.MutableCopy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="nSArray.MutableCopy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSMutableCopying.MutableCopy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mutableCopyWithZone:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveObserver">
      <MemberSignature Language="C#" Value="public virtual void RemoveObserver (Foundation.NSObject observer, Foundation.NSIndexSet indexes, string keyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveObserver(class Foundation.NSObject observer, class Foundation.NSIndexSet indexes, string keyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.RemoveObserver(Foundation.NSObject,Foundation.NSIndexSet,System.String)" />
      <MemberSignature Language="F#" Value="override this.RemoveObserver : Foundation.NSObject * Foundation.NSIndexSet * string -&gt; unit" Usage="nSArray.RemoveObserver (observer, indexes, keyPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeObserver:fromObjectsAtIndexes:forKeyPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="Foundation.NSObject" />
        <Parameter Name="indexes" Type="Foundation.NSIndexSet" />
        <Parameter Name="keyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="observer">To be added.</param>
        <param name="indexes">To be added.</param>
        <param name="keyPath">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveObserver">
      <MemberSignature Language="C#" Value="public virtual void RemoveObserver (Foundation.NSObject observer, Foundation.NSIndexSet indexes, string keyPath, IntPtr context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveObserver(class Foundation.NSObject observer, class Foundation.NSIndexSet indexes, string keyPath, native int context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.RemoveObserver(Foundation.NSObject,Foundation.NSIndexSet,System.String,System.IntPtr)" />
      <MemberSignature Language="F#" Value="override this.RemoveObserver : Foundation.NSObject * Foundation.NSIndexSet * string * nativeint -&gt; unit" Usage="nSArray.RemoveObserver (observer, indexes, keyPath, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeObserver:fromObjectsAtIndexes:forKeyPath:context:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="Foundation.NSObject" />
        <Parameter Name="indexes" Type="Foundation.NSIndexSet" />
        <Parameter Name="keyPath" Type="System.String" />
        <Parameter Name="context" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="observer">To be added.</param>
        <param name="indexes">To be added.</param>
        <param name="keyPath">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValueForKey">
      <MemberSignature Language="C#" Value="public virtual void SetValueForKey (Foundation.NSObject value, Foundation.NSString key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValueForKey(class Foundation.NSObject value, class Foundation.NSString key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.SetValueForKey(Foundation.NSObject,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="override this.SetValueForKey : Foundation.NSObject * Foundation.NSString -&gt; unit" Usage="nSArray.SetValueForKey (value, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setValue:forKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Foundation.NSObject" />
        <Parameter Name="key" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Sort">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSArray Sort (Foundation.NSComparator cmptr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSArray Sort(class Foundation.NSComparator cmptr) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.Sort(Foundation.NSComparator)" />
      <MemberSignature Language="F#" Value="abstract member Sort : Foundation.NSComparator -&gt; Foundation.NSArray&#xA;override this.Sort : Foundation.NSComparator -&gt; Foundation.NSArray" Usage="nSArray.Sort cmptr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("sortedArrayUsingComparator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cmptr" Type="Foundation.NSComparator">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSComparator))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="cmptr">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StringArrayFromHandle">
      <MemberSignature Language="C#" Value="public static string[] StringArrayFromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] StringArrayFromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.StringArrayFromHandle(System.IntPtr)" />
      <MemberSignature Language="F#" Value="static member StringArrayFromHandle : nativeint -&gt; string[]" Usage="Foundation.NSArray.StringArrayFromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>Creates a string array from an NSArray handle.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueAt">
      <MemberSignature Language="C#" Value="public virtual IntPtr ValueAt (nuint idx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int ValueAt(valuetype System.nuint idx) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.ValueAt(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member ValueAt : nuint -&gt; nativeint&#xA;override this.ValueAt : nuint -&gt; nativeint" Usage="nSArray.ValueAt idx" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("objectAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="idx">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueForKey">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject ValueForKey (Foundation.NSString key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject ValueForKey(class Foundation.NSString key) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.ValueForKey(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="override this.ValueForKey : Foundation.NSString -&gt; Foundation.NSObject" Usage="nSArray.ValueForKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("valueForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Write">
      <MemberSignature Language="C#" Value="public virtual bool Write (Foundation.NSUrl url, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Write(class Foundation.NSUrl url, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.Write(Foundation.NSUrl,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member Write : Foundation.NSUrl *  -&gt; bool&#xA;override this.Write : Foundation.NSUrl *  -&gt; bool" Usage="nSArray.Write (url, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("writeToURL:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteToFile">
      <MemberSignature Language="C#" Value="public virtual bool WriteToFile (string path, bool useAuxiliaryFile);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool WriteToFile(string path, bool useAuxiliaryFile) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSArray.WriteToFile(System.String,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member WriteToFile : string * bool -&gt; bool&#xA;override this.WriteToFile : string * bool -&gt; bool" Usage="nSArray.WriteToFile (path, useAuxiliaryFile)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("writeToFile:atomically:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="useAuxiliaryFile" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <param name="useAuxiliaryFile">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
