<Type Name="RegisterAttribute" FullName="Foundation.RegisterAttribute">
  <TypeSignature Language="C#" Value="public sealed class RegisterAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit RegisterAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:Foundation.RegisterAttribute" />
  <TypeSignature Language="F#" Value="type RegisterAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Used to register a class to the Objective-C runtime.</summary>
    <remarks>
      <para>While all classes derived from the <see cref="T:Foundation.NSObject" /> class are exposed to
      the Objective-C world, in some cases you might want to expose
      the class using a different name to the runtime.</para>
      <para>
	In addition, if you want your classes to be available on the iOS designer, you need to annotate those classes with the Register attribute.
      </para>
      <example>
        <code lang="C#"><![CDATA[
// This class is never surfaced to Objective-C's runtime
class NotSurfaced {}

// This class is automatically surfaced to Objective-C's 
// runtime, since it is a subclass of NSObject, and it
// is visible by the Objective-C runtime as "AutomaticallySurfaced"
class AutomaticallySurfaced : NSObject {}

// This class is surfaced to the Objective-C runtime with
// the name 'MyName'
[Register ("MyName")]
class InternalName : NSObject {}
]]></code>
      </example>
      <example>
        <code lang="C#"><![CDATA[
// This UIView is surfaced to the iOS designer.
[Register]
public class MyView : UIView {
    public MyView (IntPtr handle) : base (handle) {}
    public MyView (CGRect rect) : base (rect) {}
}
]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegisterAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.RegisterAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegisterAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.RegisterAttribute.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new Foundation.RegisterAttribute : string -&gt; Foundation.RegisterAttribute" Usage="new Foundation.RegisterAttribute name" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">The name to use when exposing this class to the Objective-C world.</param>
        <summary>Used to specify how the ECMA class is exposed as an Objective-C class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public RegisterAttribute (string name, bool isWrapper);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, bool isWrapper) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.RegisterAttribute.#ctor(System.String,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Foundation.RegisterAttribute : string * bool -&gt; Foundation.RegisterAttribute" Usage="new Foundation.RegisterAttribute (name, isWrapper)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="isWrapper" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">The name to use when exposing this class to the Objective-C world.</param>
        <param name="isWrapper">Used to specify if the class being registered is wrapping an existing Objective-C class, or if it's a new class.</param>
        <summary>Used to specify how the ECMA class is exposed as an Objective-C class.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWrapper">
      <MemberSignature Language="C#" Value="public bool IsWrapper { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWrapper" />
      <MemberSignature Language="DocId" Value="P:Foundation.RegisterAttribute.IsWrapper" />
      <MemberSignature Language="F#" Value="member this.IsWrapper : bool with get, set" Usage="Foundation.RegisterAttribute.IsWrapper" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether the class being registered is wrapping an existing Objective-C class, or if it's a new class.</summary>
        <value>True if the class being registered is wrapping an existing Objective-C class.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Foundation.RegisterAttribute.Name" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="Foundation.RegisterAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name used to expose the class.</summary>
        <value />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SkipRegistration">
      <MemberSignature Language="C#" Value="public bool SkipRegistration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipRegistration" />
      <MemberSignature Language="DocId" Value="P:Foundation.RegisterAttribute.SkipRegistration" />
      <MemberSignature Language="F#" Value="member this.SkipRegistration : bool with get, set" Usage="Foundation.RegisterAttribute.SkipRegistration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
