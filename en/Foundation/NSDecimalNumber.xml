<Type Name="NSDecimalNumber" FullName="Foundation.NSDecimalNumber">
  <TypeSignature Language="C#" Value="public class NSDecimalNumber : Foundation.NSNumber, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSDecimalNumber extends Foundation.NSNumber implements class Foundation.INSCoding, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSDecimalNumber" />
  <TypeSignature Language="F#" Value="type NSDecimalNumber = class&#xA;    inherit NSNumber&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSNumber</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSDecimalNumber", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Objective-C Decimal number.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSDecimalNumber_Class/index.html">Apple documentation for <c>NSDecimalNumber</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSDecimalNumber ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSDecimalNumber (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new Foundation.NSDecimalNumber : Foundation.NSCoder -&gt; Foundation.NSDecimalNumber" Usage="new Foundation.NSDecimalNumber coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSDecimalNumber (Foundation.NSDecimal dec);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Foundation.NSDecimal dec) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.#ctor(Foundation.NSDecimal)" />
      <MemberSignature Language="F#" Value="new Foundation.NSDecimalNumber : Foundation.NSDecimal -&gt; Foundation.NSDecimalNumber" Usage="new Foundation.NSDecimalNumber dec" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithDecimal:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="dec" Type="Foundation.NSDecimal" />
      </Parameters>
      <Docs>
        <param name="dec">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSDecimalNumber (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSDecimalNumber : Foundation.NSObjectFlag -&gt; Foundation.NSDecimalNumber" Usage="new Foundation.NSDecimalNumber t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSDecimalNumber (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSDecimalNumber : nativeint -&gt; Foundation.NSDecimalNumber" Usage="new Foundation.NSDecimalNumber handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSDecimalNumber (string numberValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string numberValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new Foundation.NSDecimalNumber : string -&gt; Foundation.NSDecimalNumber" Usage="new Foundation.NSDecimalNumber numberValue" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithString:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="numberValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="numberValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSDecimalNumber (string numberValue, Foundation.NSObject locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string numberValue, class Foundation.NSObject locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.#ctor(System.String,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="new Foundation.NSDecimalNumber : string * Foundation.NSObject -&gt; Foundation.NSDecimalNumber" Usage="new Foundation.NSDecimalNumber (numberValue, locale)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithString:locale:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="numberValue" Type="System.String" />
        <Parameter Name="locale" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="numberValue">To be added.</param>
        <param name="locale">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSDecimalNumber (long mantissa, short exponent, bool isNegative);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int64 mantissa, int16 exponent, bool isNegative) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.#ctor(System.Int64,System.Int16,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Foundation.NSDecimalNumber : int64 * int16 * bool -&gt; Foundation.NSDecimalNumber" Usage="new Foundation.NSDecimalNumber (mantissa, exponent, isNegative)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithMantissa:exponent:isNegative:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="mantissa" Type="System.Int64" />
        <Parameter Name="exponent" Type="System.Int16" />
        <Parameter Name="isNegative" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mantissa">To be added.</param>
        <param name="exponent">To be added.</param>
        <param name="isNegative">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber Add (Foundation.NSDecimalNumber d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber Add(class Foundation.NSDecimalNumber d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.Add(Foundation.NSDecimalNumber)" />
      <MemberSignature Language="F#" Value="abstract member Add : Foundation.NSDecimalNumber -&gt; Foundation.NSDecimalNumber&#xA;override this.Add : Foundation.NSDecimalNumber -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.Add d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByAdding:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="Foundation.NSDecimalNumber" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>Adds this and the specified decimal.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber Add (Foundation.NSDecimalNumber d, Foundation.NSObject Behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber Add(class Foundation.NSDecimalNumber d, class Foundation.NSObject Behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.Add(Foundation.NSDecimalNumber,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member Add : Foundation.NSDecimalNumber * Foundation.NSObject -&gt; Foundation.NSDecimalNumber&#xA;override this.Add : Foundation.NSDecimalNumber * Foundation.NSObject -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.Add (d, Behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByAdding:withBehavior:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="Foundation.NSDecimalNumber" />
        <Parameter Name="Behavior" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <param name="Behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSDecimalNumber.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSDecimalNumber.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Compare">
      <MemberSignature Language="C#" Value="public override nint Compare (Foundation.NSNumber other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.nint Compare(class Foundation.NSNumber other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.Compare(Foundation.NSNumber)" />
      <MemberSignature Language="F#" Value="override this.Compare : Foundation.NSNumber -&gt; nint" Usage="nSDecimalNumber.Compare other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("compare:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Foundation.NSNumber" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>Compares this to the other number.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultBehavior">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject DefaultBehavior { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSObject DefaultBehavior" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSDecimalNumber.DefaultBehavior" />
      <MemberSignature Language="F#" Value="member this.DefaultBehavior : Foundation.NSObject with get, set" Usage="Foundation.NSDecimalNumber.DefaultBehavior" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("defaultBehavior", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDefaultBehavior:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The way in which arithmetic methods round off and handle error conditions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DescriptionWithLocale">
      <MemberSignature Language="C#" Value="public override string DescriptionWithLocale (Foundation.NSLocale locale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string DescriptionWithLocale(class Foundation.NSLocale locale) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.DescriptionWithLocale(Foundation.NSLocale)" />
      <MemberSignature Language="F#" Value="override this.DescriptionWithLocale : Foundation.NSLocale -&gt; string" Usage="nSDecimalNumber.DescriptionWithLocale locale" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("descriptionWithLocale:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="locale" Type="Foundation.NSLocale" />
      </Parameters>
      <Docs>
        <param name="locale">To be added.</param>
        <summary>Returns a description of this number, localized to the specified locale.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber Divide (Foundation.NSDecimalNumber d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber Divide(class Foundation.NSDecimalNumber d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.Divide(Foundation.NSDecimalNumber)" />
      <MemberSignature Language="F#" Value="abstract member Divide : Foundation.NSDecimalNumber -&gt; Foundation.NSDecimalNumber&#xA;override this.Divide : Foundation.NSDecimalNumber -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.Divide d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByDividingBy:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="Foundation.NSDecimalNumber" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>Divides this and the specified decimal.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Divide">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber Divide (Foundation.NSDecimalNumber d, Foundation.NSObject Behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber Divide(class Foundation.NSDecimalNumber d, class Foundation.NSObject Behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.Divide(Foundation.NSDecimalNumber,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member Divide : Foundation.NSDecimalNumber * Foundation.NSObject -&gt; Foundation.NSDecimalNumber&#xA;override this.Divide : Foundation.NSDecimalNumber * Foundation.NSObject -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.Divide (d, Behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByDividingBy:withBehavior:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="Foundation.NSDecimalNumber" />
        <Parameter Name="Behavior" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <param name="Behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleValue">
      <MemberSignature Language="C#" Value="public override double DoubleValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 DoubleValue" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSDecimalNumber.DoubleValue" />
      <MemberSignature Language="F#" Value="member this.DoubleValue : double" Usage="Foundation.NSDecimalNumber.DoubleValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("doubleValue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The value of this decimal as a double, rounded off.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="nSDecimalNumber.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public static Foundation.NSDecimalNumber MaxValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSDecimalNumber MaxValue" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSDecimalNumber.MaxValue" />
      <MemberSignature Language="F#" Value="member this.MaxValue : Foundation.NSDecimalNumber" Usage="Foundation.NSDecimalNumber.MaxValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("maximumDecimalNumber", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The maximum value represented by any NSDecimalNumber.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public static Foundation.NSDecimalNumber MinValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSDecimalNumber MinValue" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSDecimalNumber.MinValue" />
      <MemberSignature Language="F#" Value="member this.MinValue : Foundation.NSDecimalNumber" Usage="Foundation.NSDecimalNumber.MinValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("minimumDecimalNumber", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The minimum value representable by NSDecimalNumber.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber Multiply (Foundation.NSDecimalNumber d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber Multiply(class Foundation.NSDecimalNumber d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.Multiply(Foundation.NSDecimalNumber)" />
      <MemberSignature Language="F#" Value="abstract member Multiply : Foundation.NSDecimalNumber -&gt; Foundation.NSDecimalNumber&#xA;override this.Multiply : Foundation.NSDecimalNumber -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.Multiply d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByMultiplyingBy:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="Foundation.NSDecimalNumber" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>Multiples two NSDecimalNumbers.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber Multiply (Foundation.NSDecimalNumber d, Foundation.NSObject Behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber Multiply(class Foundation.NSDecimalNumber d, class Foundation.NSObject Behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.Multiply(Foundation.NSDecimalNumber,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member Multiply : Foundation.NSDecimalNumber * Foundation.NSObject -&gt; Foundation.NSDecimalNumber&#xA;override this.Multiply : Foundation.NSDecimalNumber * Foundation.NSObject -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.Multiply (d, Behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByMultiplyingBy:withBehavior:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="Foundation.NSDecimalNumber" />
        <Parameter Name="Behavior" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <param name="Behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyPowerOf10">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber MultiplyPowerOf10 (short power);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber MultiplyPowerOf10(int16 power) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.MultiplyPowerOf10(System.Int16)" />
      <MemberSignature Language="F#" Value="abstract member MultiplyPowerOf10 : int16 -&gt; Foundation.NSDecimalNumber&#xA;override this.MultiplyPowerOf10 : int16 -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.MultiplyPowerOf10 power" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByMultiplyingByPowerOf10:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="power" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="power">To be added.</param>
        <summary>Raises this number by the specified order of magnitude.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyPowerOf10">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber MultiplyPowerOf10 (short power, Foundation.NSObject Behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber MultiplyPowerOf10(int16 power, class Foundation.NSObject Behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.MultiplyPowerOf10(System.Int16,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member MultiplyPowerOf10 : int16 * Foundation.NSObject -&gt; Foundation.NSDecimalNumber&#xA;override this.MultiplyPowerOf10 : int16 * Foundation.NSObject -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.MultiplyPowerOf10 (power, Behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByMultiplyingByPowerOf10:withBehavior:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="power" Type="System.Int16" />
        <Parameter Name="Behavior" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="power">To be added.</param>
        <param name="Behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NaN">
      <MemberSignature Language="C#" Value="public static Foundation.NSDecimalNumber NaN { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSDecimalNumber NaN" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSDecimalNumber.NaN" />
      <MemberSignature Language="F#" Value="member this.NaN : Foundation.NSDecimalNumber" Usage="Foundation.NSDecimalNumber.NaN" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("notANumber", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Factory method returning the reference "Not a Number".</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NSDecimalValue">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimal NSDecimalValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSDecimal NSDecimalValue" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSDecimalNumber.NSDecimalValue" />
      <MemberSignature Language="F#" Value="member this.NSDecimalValue : Foundation.NSDecimal" Usage="Foundation.NSDecimalNumber.NSDecimalValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("decimalValue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Converts this NSDecimalNumber into an NSDecimal.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="One">
      <MemberSignature Language="C#" Value="public static Foundation.NSDecimalNumber One { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSDecimalNumber One" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSDecimalNumber.One" />
      <MemberSignature Language="F#" Value="member this.One : Foundation.NSDecimalNumber" Usage="Foundation.NSDecimalNumber.One" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("one", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Factory method returning a reference to the NSDecimalNumber 1.0.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseTo">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber RaiseTo (nuint power);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber RaiseTo(valuetype System.nuint power) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.RaiseTo(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member RaiseTo : nuint -&gt; Foundation.NSDecimalNumber&#xA;override this.RaiseTo : nuint -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.RaiseTo power" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByRaisingToPower:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="power" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="power">To be added.</param>
        <summary>Raises this number to the specified power.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RaiseTo">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber RaiseTo (nuint power, Foundation.NSObject Behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber RaiseTo(valuetype System.nuint power, class Foundation.NSObject Behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.RaiseTo(System.nuint,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member RaiseTo : nuint * Foundation.NSObject -&gt; Foundation.NSDecimalNumber&#xA;override this.RaiseTo : nuint * Foundation.NSObject -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.RaiseTo (power, Behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByRaisingToPower:withBehavior:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="power" Type="System.nuint" />
        <Parameter Name="Behavior" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="power">To be added.</param>
        <param name="Behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Rounding">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber Rounding (Foundation.NSObject behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber Rounding(class Foundation.NSObject behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.Rounding(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member Rounding : Foundation.NSObject -&gt; Foundation.NSDecimalNumber&#xA;override this.Rounding : Foundation.NSObject -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.Rounding behavior" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberByRoundingAccordingToBehavior:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>Returns a number by rounding this according to the specified behavior.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Application developers who wish to specify a value other than NSDecimalNumber.DefaultBehavior must manually bind the iOS NSDecimalNumberBehaviors protocol.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber Subtract (Foundation.NSDecimalNumber d);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber Subtract(class Foundation.NSDecimalNumber d) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.Subtract(Foundation.NSDecimalNumber)" />
      <MemberSignature Language="F#" Value="abstract member Subtract : Foundation.NSDecimalNumber -&gt; Foundation.NSDecimalNumber&#xA;override this.Subtract : Foundation.NSDecimalNumber -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.Subtract d" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberBySubtracting:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="Foundation.NSDecimalNumber" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Subtract">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDecimalNumber Subtract (Foundation.NSDecimalNumber d, Foundation.NSObject Behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDecimalNumber Subtract(class Foundation.NSDecimalNumber d, class Foundation.NSObject Behavior) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSDecimalNumber.Subtract(Foundation.NSDecimalNumber,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member Subtract : Foundation.NSDecimalNumber * Foundation.NSObject -&gt; Foundation.NSDecimalNumber&#xA;override this.Subtract : Foundation.NSDecimalNumber * Foundation.NSObject -&gt; Foundation.NSDecimalNumber" Usage="nSDecimalNumber.Subtract (d, Behavior)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("decimalNumberBySubtracting:withBehavior:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="d" Type="Foundation.NSDecimalNumber" />
        <Parameter Name="Behavior" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="d">To be added.</param>
        <param name="Behavior">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zero">
      <MemberSignature Language="C#" Value="public static Foundation.NSDecimalNumber Zero { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSDecimalNumber Zero" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSDecimalNumber.Zero" />
      <MemberSignature Language="F#" Value="member this.Zero : Foundation.NSDecimalNumber" Usage="Foundation.NSDecimalNumber.Zero" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("zero", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDecimalNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
