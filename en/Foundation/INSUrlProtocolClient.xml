<Type Name="INSUrlProtocolClient" FullName="Foundation.INSUrlProtocolClient">
  <TypeSignature Language="C#" Value="public interface INSUrlProtocolClient : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INSUrlProtocolClient implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="NSURLProtocolClient", WrapperType=typeof(Foundation.NSUrlProtocolClientWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="Redirected", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="URLProtocol:wasRedirectedToRequest:redirectResponse:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CachedResponseIsValid", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="URLProtocol:cachedResponseIsValid:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ReceivedResponse", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="URLProtocol:didReceiveResponse:cacheStoragePolicy:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="DataLoaded", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="URLProtocol:didLoadData:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="FinishedLoading", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="URLProtocolDidFinishLoading:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="FailedWithError", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="URLProtocol:didFailWithError:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ReceivedAuthenticationChallenge", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="URLProtocol:didReceiveAuthenticationChallenge:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CancelledAuthenticationChallenge", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="URLProtocol:didCancelAuthenticationChallenge:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The URL protocol client category.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CachedResponseIsValid">
      <MemberSignature Language="C#" Value="public void CachedResponseIsValid (Foundation.NSUrlProtocol protocol, Foundation.NSCachedUrlResponse cachedResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CachedResponseIsValid(class Foundation.NSUrlProtocol protocol, class Foundation.NSCachedUrlResponse cachedResponse) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("URLProtocol:cachedResponseIsValid:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="Foundation.NSUrlProtocol" />
        <Parameter Name="cachedResponse" Type="Foundation.NSCachedUrlResponse" />
      </Parameters>
      <Docs>
        <param name="protocol">To be added.</param>
        <param name="cachedResponse">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelledAuthenticationChallenge">
      <MemberSignature Language="C#" Value="public void CancelledAuthenticationChallenge (Foundation.NSUrlProtocol protocol, Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelledAuthenticationChallenge(class Foundation.NSUrlProtocol protocol, class Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("URLProtocol:didCancelAuthenticationChallenge:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="Foundation.NSUrlProtocol" />
        <Parameter Name="challenge" Type="Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="protocol">To be added.</param>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataLoaded">
      <MemberSignature Language="C#" Value="public void DataLoaded (Foundation.NSUrlProtocol protocol, Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DataLoaded(class Foundation.NSUrlProtocol protocol, class Foundation.NSData data) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("URLProtocol:didLoadData:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="Foundation.NSUrlProtocol" />
        <Parameter Name="data" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="protocol">To be added.</param>
        <param name="data">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FailedWithError">
      <MemberSignature Language="C#" Value="public void FailedWithError (Foundation.NSUrlProtocol protocol, Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FailedWithError(class Foundation.NSUrlProtocol protocol, class Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("URLProtocol:didFailWithError:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="Foundation.NSUrlProtocol" />
        <Parameter Name="error" Type="Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="protocol">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishedLoading">
      <MemberSignature Language="C#" Value="public void FinishedLoading (Foundation.NSUrlProtocol protocol);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishedLoading(class Foundation.NSUrlProtocol protocol) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("URLProtocolDidFinishLoading:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="Foundation.NSUrlProtocol" />
      </Parameters>
      <Docs>
        <param name="protocol">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedAuthenticationChallenge">
      <MemberSignature Language="C#" Value="public void ReceivedAuthenticationChallenge (Foundation.NSUrlProtocol protocol, Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReceivedAuthenticationChallenge(class Foundation.NSUrlProtocol protocol, class Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("URLProtocol:didReceiveAuthenticationChallenge:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="Foundation.NSUrlProtocol" />
        <Parameter Name="challenge" Type="Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="protocol">To be added.</param>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReceivedResponse">
      <MemberSignature Language="C#" Value="public void ReceivedResponse (Foundation.NSUrlProtocol protocol, Foundation.NSUrlResponse response, Foundation.NSUrlCacheStoragePolicy policy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReceivedResponse(class Foundation.NSUrlProtocol protocol, class Foundation.NSUrlResponse response, valuetype Foundation.NSUrlCacheStoragePolicy policy) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("URLProtocol:didReceiveResponse:cacheStoragePolicy:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="Foundation.NSUrlProtocol" />
        <Parameter Name="response" Type="Foundation.NSUrlResponse" />
        <Parameter Name="policy" Type="Foundation.NSUrlCacheStoragePolicy" />
      </Parameters>
      <Docs>
        <param name="protocol">To be added.</param>
        <param name="response">To be added.</param>
        <param name="policy">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Redirected">
      <MemberSignature Language="C#" Value="public void Redirected (Foundation.NSUrlProtocol protocol, Foundation.NSUrlRequest redirectedToEequest, Foundation.NSUrlResponse redirectResponse);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Redirected(class Foundation.NSUrlProtocol protocol, class Foundation.NSUrlRequest redirectedToEequest, class Foundation.NSUrlResponse redirectResponse) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("URLProtocol:wasRedirectedToRequest:redirectResponse:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protocol" Type="Foundation.NSUrlProtocol" />
        <Parameter Name="redirectedToEequest" Type="Foundation.NSUrlRequest" />
        <Parameter Name="redirectResponse" Type="Foundation.NSUrlResponse" />
      </Parameters>
      <Docs>
        <param name="protocol">To be added.</param>
        <param name="redirectedToEequest">To be added.</param>
        <param name="redirectResponse">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
