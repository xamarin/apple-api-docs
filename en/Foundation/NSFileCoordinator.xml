<Type Name="NSFileCoordinator" FullName="Foundation.NSFileCoordinator">
  <TypeSignature Language="C#" Value="public class NSFileCoordinator : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSFileCoordinator extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSFileCoordinator" />
  <TypeSignature Language="F#" Value="type NSFileCoordinator = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSFileCoordinator", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class that helps coordinate simultaneous reading and writing to files among multiple processes and multiple objects.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSFileCoordinator_class/index.html">Apple documentation for <c>NSFileCoordinator</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileCoordinator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileCoordinator (Foundation.INSFilePresenter filePresenterOrNil);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.INSFilePresenter filePresenterOrNil) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.#ctor(Foundation.INSFilePresenter)" />
      <MemberSignature Language="F#" Value="new Foundation.NSFileCoordinator : Foundation.INSFilePresenter -&gt; Foundation.NSFileCoordinator" Usage="new Foundation.NSFileCoordinator filePresenterOrNil" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithFilePresenter:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="filePresenterOrNil" Type="Foundation.INSFilePresenter" />
      </Parameters>
      <Docs>
        <param name="filePresenterOrNil">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileCoordinator (Foundation.NSFilePresenter filePresenterOrNil);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSFilePresenter filePresenterOrNil) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.#ctor(Foundation.NSFilePresenter)" />
      <MemberSignature Language="F#" Value="new Foundation.NSFileCoordinator : Foundation.NSFilePresenter -&gt; Foundation.NSFileCoordinator" Usage="new Foundation.NSFileCoordinator filePresenterOrNil" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("Use '.ctor(INSFilePresenter)' instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="filePresenterOrNil" Type="Foundation.NSFilePresenter" />
      </Parameters>
      <Docs>
        <param name="filePresenterOrNil">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSFileCoordinator (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSFileCoordinator : Foundation.NSObjectFlag -&gt; Foundation.NSFileCoordinator" Usage="new Foundation.NSFileCoordinator t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSFileCoordinator (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSFileCoordinator : nativeint -&gt; Foundation.NSFileCoordinator" Usage="new Foundation.NSFileCoordinator handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilePresenter">
      <MemberSignature Language="C#" Value="public static void AddFilePresenter (Foundation.INSFilePresenter filePresenter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddFilePresenter(class Foundation.INSFilePresenter filePresenter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.AddFilePresenter(Foundation.INSFilePresenter)" />
      <MemberSignature Language="F#" Value="static member AddFilePresenter : Foundation.INSFilePresenter -&gt; unit" Usage="Foundation.NSFileCoordinator.AddFilePresenter filePresenter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addFilePresenter:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePresenter" Type="Foundation.INSFilePresenter" />
      </Parameters>
      <Docs>
        <param name="filePresenter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.Cancel" />
      <MemberSignature Language="F#" Value="abstract member Cancel : unit -&gt; unit&#xA;override this.Cancel : unit -&gt; unit" Usage="nSFileCoordinator.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("cancel")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSFileCoordinator.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSFileCoordinator.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateAccess">
      <MemberSignature Language="C#" Value="public virtual void CoordinateAccess (Foundation.NSFileAccessIntent[] intents, Foundation.NSOperationQueue executionQueue, Action&lt;Foundation.NSError&gt; accessor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateAccess(class Foundation.NSFileAccessIntent[] intents, class Foundation.NSOperationQueue executionQueue, class System.Action`1&lt;class Foundation.NSError&gt; accessor) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.CoordinateAccess(Foundation.NSFileAccessIntent[],Foundation.NSOperationQueue,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member CoordinateAccess : Foundation.NSFileAccessIntent[] * Foundation.NSOperationQueue * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.CoordinateAccess : Foundation.NSFileAccessIntent[] * Foundation.NSOperationQueue * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="nSFileCoordinator.CoordinateAccess (intents, executionQueue, accessor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("coordinateAccessWithIntents:queue:byAccessor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intents" Type="Foundation.NSFileAccessIntent[]" />
        <Parameter Name="executionQueue" Type="Foundation.NSOperationQueue" />
        <Parameter Name="accessor" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="intents">To be added.</param>
        <param name="executionQueue">To be added.</param>
        <param name="accessor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateBatc">
      <MemberSignature Language="C#" Value="public virtual void CoordinateBatc (Foundation.NSUrl[] readingURLs, Foundation.NSFileCoordinatorReadingOptions readingOptions, Foundation.NSUrl[] writingURLs, Foundation.NSFileCoordinatorWritingOptions writingOptions, out Foundation.NSError error, Action batchHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateBatc(class Foundation.NSUrl[] readingURLs, valuetype Foundation.NSFileCoordinatorReadingOptions readingOptions, class Foundation.NSUrl[] writingURLs, valuetype Foundation.NSFileCoordinatorWritingOptions writingOptions, [out] class Foundation.NSError&amp; error, class System.Action batchHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.CoordinateBatc(Foundation.NSUrl[],Foundation.NSFileCoordinatorReadingOptions,Foundation.NSUrl[],Foundation.NSFileCoordinatorWritingOptions,Foundation.NSError@,System.Action)" />
      <MemberSignature Language="F#" Value="abstract member CoordinateBatc : Foundation.NSUrl[] * Foundation.NSFileCoordinatorReadingOptions * Foundation.NSUrl[] * Foundation.NSFileCoordinatorWritingOptions *  * Action -&gt; unit&#xA;override this.CoordinateBatc : Foundation.NSUrl[] * Foundation.NSFileCoordinatorReadingOptions * Foundation.NSUrl[] * Foundation.NSFileCoordinatorWritingOptions *  * Action -&gt; unit" Usage="nSFileCoordinator.CoordinateBatc (readingURLs, readingOptions, writingURLs, writingOptions, error, batchHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readingURLs" Type="Foundation.NSUrl[]" />
        <Parameter Name="readingOptions" Type="Foundation.NSFileCoordinatorReadingOptions" />
        <Parameter Name="writingURLs" Type="Foundation.NSUrl[]" />
        <Parameter Name="writingOptions" Type="Foundation.NSFileCoordinatorWritingOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
        <Parameter Name="batchHandler" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="readingURLs">To be added.</param>
        <param name="readingOptions">To be added.</param>
        <param name="writingURLs">To be added.</param>
        <param name="writingOptions">To be added.</param>
        <param name="error">To be added.</param>
        <param name="batchHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateRead">
      <MemberSignature Language="C#" Value="public virtual void CoordinateRead (Foundation.NSUrl itemUrl, Foundation.NSFileCoordinatorReadingOptions options, out Foundation.NSError error, Action&lt;Foundation.NSUrl&gt; worker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateRead(class Foundation.NSUrl itemUrl, valuetype Foundation.NSFileCoordinatorReadingOptions options, [out] class Foundation.NSError&amp; error, class System.Action`1&lt;class Foundation.NSUrl&gt; worker) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.CoordinateRead(Foundation.NSUrl,Foundation.NSFileCoordinatorReadingOptions,Foundation.NSError@,System.Action{Foundation.NSUrl})" />
      <MemberSignature Language="F#" Value="abstract member CoordinateRead : Foundation.NSUrl * Foundation.NSFileCoordinatorReadingOptions *  * Action&lt;Foundation.NSUrl&gt; -&gt; unit&#xA;override this.CoordinateRead : Foundation.NSUrl * Foundation.NSFileCoordinatorReadingOptions *  * Action&lt;Foundation.NSUrl&gt; -&gt; unit" Usage="nSFileCoordinator.CoordinateRead (itemUrl, options, error, worker)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("coordinateReadingItemAtURL:options:error:byAccessor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemUrl" Type="Foundation.NSUrl" />
        <Parameter Name="options" Type="Foundation.NSFileCoordinatorReadingOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
        <Parameter Name="worker" Type="System.Action&lt;Foundation.NSUrl&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V19))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemUrl">To be added.</param>
        <param name="options">To be added.</param>
        <param name="error">To be added.</param>
        <param name="worker">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateReadWrite">
      <MemberSignature Language="C#" Value="public virtual void CoordinateReadWrite (Foundation.NSUrl readingURL, Foundation.NSFileCoordinatorReadingOptions readingOptions, Foundation.NSUrl writingURL, Foundation.NSFileCoordinatorWritingOptions writingOptions, out Foundation.NSError error, Foundation.NSFileCoordinatorWorkerRW readWriteWorker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateReadWrite(class Foundation.NSUrl readingURL, valuetype Foundation.NSFileCoordinatorReadingOptions readingOptions, class Foundation.NSUrl writingURL, valuetype Foundation.NSFileCoordinatorWritingOptions writingOptions, [out] class Foundation.NSError&amp; error, class Foundation.NSFileCoordinatorWorkerRW readWriteWorker) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.CoordinateReadWrite(Foundation.NSUrl,Foundation.NSFileCoordinatorReadingOptions,Foundation.NSUrl,Foundation.NSFileCoordinatorWritingOptions,Foundation.NSError@,Foundation.NSFileCoordinatorWorkerRW)" />
      <MemberSignature Language="F#" Value="abstract member CoordinateReadWrite : Foundation.NSUrl * Foundation.NSFileCoordinatorReadingOptions * Foundation.NSUrl * Foundation.NSFileCoordinatorWritingOptions *  * Foundation.NSFileCoordinatorWorkerRW -&gt; unit&#xA;override this.CoordinateReadWrite : Foundation.NSUrl * Foundation.NSFileCoordinatorReadingOptions * Foundation.NSUrl * Foundation.NSFileCoordinatorWritingOptions *  * Foundation.NSFileCoordinatorWorkerRW -&gt; unit" Usage="nSFileCoordinator.CoordinateReadWrite (readingURL, readingOptions, writingURL, writingOptions, error, readWriteWorker)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readingURL" Type="Foundation.NSUrl" />
        <Parameter Name="readingOptions" Type="Foundation.NSFileCoordinatorReadingOptions" />
        <Parameter Name="writingURL" Type="Foundation.NSUrl" />
        <Parameter Name="writingOptions" Type="Foundation.NSFileCoordinatorWritingOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
        <Parameter Name="readWriteWorker" Type="Foundation.NSFileCoordinatorWorkerRW">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSFileCoordinatorWorkerRW))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="readingURL">To be added.</param>
        <param name="readingOptions">To be added.</param>
        <param name="writingURL">To be added.</param>
        <param name="writingOptions">To be added.</param>
        <param name="error">To be added.</param>
        <param name="readWriteWorker">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateWrite">
      <MemberSignature Language="C#" Value="public virtual void CoordinateWrite (Foundation.NSUrl url, Foundation.NSFileCoordinatorWritingOptions options, out Foundation.NSError error, Action&lt;Foundation.NSUrl&gt; worker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateWrite(class Foundation.NSUrl url, valuetype Foundation.NSFileCoordinatorWritingOptions options, [out] class Foundation.NSError&amp; error, class System.Action`1&lt;class Foundation.NSUrl&gt; worker) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.CoordinateWrite(Foundation.NSUrl,Foundation.NSFileCoordinatorWritingOptions,Foundation.NSError@,System.Action{Foundation.NSUrl})" />
      <MemberSignature Language="F#" Value="abstract member CoordinateWrite : Foundation.NSUrl * Foundation.NSFileCoordinatorWritingOptions *  * Action&lt;Foundation.NSUrl&gt; -&gt; unit&#xA;override this.CoordinateWrite : Foundation.NSUrl * Foundation.NSFileCoordinatorWritingOptions *  * Action&lt;Foundation.NSUrl&gt; -&gt; unit" Usage="nSFileCoordinator.CoordinateWrite (url, options, error, worker)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("coordinateWritingItemAtURL:options:error:byAccessor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="options" Type="Foundation.NSFileCoordinatorWritingOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
        <Parameter Name="worker" Type="System.Action&lt;Foundation.NSUrl&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V19))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="options">To be added.</param>
        <param name="error">To be added.</param>
        <param name="worker">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateWriteWrite">
      <MemberSignature Language="C#" Value="public virtual void CoordinateWriteWrite (Foundation.NSUrl writingURL, Foundation.NSFileCoordinatorWritingOptions writingOptions, Foundation.NSUrl writingURL2, Foundation.NSFileCoordinatorWritingOptions writingOptions2, out Foundation.NSError error, Foundation.NSFileCoordinatorWorkerRW writeWriteWorker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateWriteWrite(class Foundation.NSUrl writingURL, valuetype Foundation.NSFileCoordinatorWritingOptions writingOptions, class Foundation.NSUrl writingURL2, valuetype Foundation.NSFileCoordinatorWritingOptions writingOptions2, [out] class Foundation.NSError&amp; error, class Foundation.NSFileCoordinatorWorkerRW writeWriteWorker) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.CoordinateWriteWrite(Foundation.NSUrl,Foundation.NSFileCoordinatorWritingOptions,Foundation.NSUrl,Foundation.NSFileCoordinatorWritingOptions,Foundation.NSError@,Foundation.NSFileCoordinatorWorkerRW)" />
      <MemberSignature Language="F#" Value="abstract member CoordinateWriteWrite : Foundation.NSUrl * Foundation.NSFileCoordinatorWritingOptions * Foundation.NSUrl * Foundation.NSFileCoordinatorWritingOptions *  * Foundation.NSFileCoordinatorWorkerRW -&gt; unit&#xA;override this.CoordinateWriteWrite : Foundation.NSUrl * Foundation.NSFileCoordinatorWritingOptions * Foundation.NSUrl * Foundation.NSFileCoordinatorWritingOptions *  * Foundation.NSFileCoordinatorWorkerRW -&gt; unit" Usage="nSFileCoordinator.CoordinateWriteWrite (writingURL, writingOptions, writingURL2, writingOptions2, error, writeWriteWorker)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writingURL" Type="Foundation.NSUrl" />
        <Parameter Name="writingOptions" Type="Foundation.NSFileCoordinatorWritingOptions" />
        <Parameter Name="writingURL2" Type="Foundation.NSUrl" />
        <Parameter Name="writingOptions2" Type="Foundation.NSFileCoordinatorWritingOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
        <Parameter Name="writeWriteWorker" Type="Foundation.NSFileCoordinatorWorkerRW">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSFileCoordinatorWorkerRW))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="writingURL">To be added.</param>
        <param name="writingOptions">To be added.</param>
        <param name="writingURL2">To be added.</param>
        <param name="writingOptions2">To be added.</param>
        <param name="error">To be added.</param>
        <param name="writeWriteWorker">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilePresenters">
      <MemberSignature Language="C#" Value="public static Foundation.INSFilePresenter[] FilePresenters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.INSFilePresenter[] FilePresenters" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSFileCoordinator.FilePresenters" />
      <MemberSignature Language="F#" Value="member this.FilePresenters : Foundation.INSFilePresenter[]" Usage="Foundation.NSFileCoordinator.FilePresenters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("filePresenters")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("filePresenters", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.INSFilePresenter[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemMoved">
      <MemberSignature Language="C#" Value="public virtual void ItemMoved (Foundation.NSUrl fromUrl, Foundation.NSUrl toUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ItemMoved(class Foundation.NSUrl fromUrl, class Foundation.NSUrl toUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.ItemMoved(Foundation.NSUrl,Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member ItemMoved : Foundation.NSUrl * Foundation.NSUrl -&gt; unit&#xA;override this.ItemMoved : Foundation.NSUrl * Foundation.NSUrl -&gt; unit" Usage="nSFileCoordinator.ItemMoved (fromUrl, toUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("itemAtURL:didMoveToURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromUrl" Type="Foundation.NSUrl" />
        <Parameter Name="toUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="fromUrl">To be added.</param>
        <param name="toUrl">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemUbiquityAttributesChanged">
      <MemberSignature Language="C#" Value="public virtual void ItemUbiquityAttributesChanged (Foundation.NSUrl url, Foundation.NSSet&lt;Foundation.NSString&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ItemUbiquityAttributesChanged(class Foundation.NSUrl url, class Foundation.NSSet`1&lt;class Foundation.NSString&gt; attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.ItemUbiquityAttributesChanged(Foundation.NSUrl,Foundation.NSSet{Foundation.NSString})" />
      <MemberSignature Language="F#" Value="abstract member ItemUbiquityAttributesChanged : Foundation.NSUrl * Foundation.NSSet&lt;Foundation.NSString&gt; -&gt; unit&#xA;override this.ItemUbiquityAttributesChanged : Foundation.NSUrl * Foundation.NSSet&lt;Foundation.NSString&gt; -&gt; unit" Usage="nSFileCoordinator.ItemUbiquityAttributesChanged (url, attributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("itemAtURL:didChangeUbiquityAttributes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="attributes" Type="Foundation.NSSet&lt;Foundation.NSString&gt;" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PurposeIdentifier">
      <MemberSignature Language="C#" Value="public virtual string PurposeIdentifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PurposeIdentifier" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSFileCoordinator.PurposeIdentifier" />
      <MemberSignature Language="F#" Value="member this.PurposeIdentifier : string with get, set" Usage="Foundation.NSFileCoordinator.PurposeIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 7, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("purposeIdentifier")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 7, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPurposeIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 7, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFilePresenter">
      <MemberSignature Language="C#" Value="public static void RemoveFilePresenter (Foundation.INSFilePresenter filePresenter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveFilePresenter(class Foundation.INSFilePresenter filePresenter) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.RemoveFilePresenter(Foundation.INSFilePresenter)" />
      <MemberSignature Language="F#" Value="static member RemoveFilePresenter : Foundation.INSFilePresenter -&gt; unit" Usage="Foundation.NSFileCoordinator.RemoveFilePresenter filePresenter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeFilePresenter:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePresenter" Type="Foundation.INSFilePresenter" />
      </Parameters>
      <Docs>
        <param name="filePresenter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillMove">
      <MemberSignature Language="C#" Value="public virtual void WillMove (Foundation.NSUrl oldUrl, Foundation.NSUrl newUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillMove(class Foundation.NSUrl oldUrl, class Foundation.NSUrl newUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileCoordinator.WillMove(Foundation.NSUrl,Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member WillMove : Foundation.NSUrl * Foundation.NSUrl -&gt; unit&#xA;override this.WillMove : Foundation.NSUrl * Foundation.NSUrl -&gt; unit" Usage="nSFileCoordinator.WillMove (oldUrl, newUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("itemAtURL:willMoveToURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldUrl" Type="Foundation.NSUrl" />
        <Parameter Name="newUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="oldUrl">To be added.</param>
        <param name="newUrl">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
