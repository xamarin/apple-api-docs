<Type Name="NSFileCoordinator" FullName="Foundation.NSFileCoordinator">
  <TypeSignature Language="C#" Value="public class NSFileCoordinator : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSFileCoordinator extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSFileCoordinator", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class that helps coordinate simultaneous reading and writing to files among multiple processes and multiple objects.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSFileCoordinator_class/index.html">Apple documentation for <c>NSFileCoordinator</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileCoordinator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileCoordinator (MonoTouch.Foundation.INSFilePresenter filePresenterOrNil);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.INSFilePresenter filePresenterOrNil) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithFilePresenter:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="filePresenterOrNil" Type="MonoTouch.Foundation.INSFilePresenter" />
      </Parameters>
      <Docs>
        <param name="filePresenterOrNil">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileCoordinator (MonoTouch.Foundation.NSFilePresenter filePresenterOrNil);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSFilePresenter filePresenterOrNil) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use .ctor(INSFilePresenter) instead", false)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="filePresenterOrNil" Type="MonoTouch.Foundation.NSFilePresenter" />
      </Parameters>
      <Docs>
        <param name="filePresenterOrNil">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSFileCoordinator (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSFileCoordinator (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddFilePresenter">
      <MemberSignature Language="C#" Value="public static void AddFilePresenter (MonoTouch.Foundation.INSFilePresenter filePresenter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void AddFilePresenter(class MonoTouch.Foundation.INSFilePresenter filePresenter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addFilePresenter:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePresenter" Type="MonoTouch.Foundation.INSFilePresenter" />
      </Parameters>
      <Docs>
        <param name="filePresenter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("cancel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateAccess">
      <MemberSignature Language="C#" Value="public virtual void CoordinateAccess (MonoTouch.Foundation.NSFileAccessIntent[] intents, MonoTouch.Foundation.NSOperationQueue executionQueue, Action&lt;MonoTouch.Foundation.NSError&gt; accessor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateAccess(class MonoTouch.Foundation.NSFileAccessIntent[] intents, class MonoTouch.Foundation.NSOperationQueue executionQueue, class System.Action`1&lt;class MonoTouch.Foundation.NSError&gt; accessor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("coordinateAccessWithIntents:queue:byAccessor:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="intents" Type="MonoTouch.Foundation.NSFileAccessIntent[]" />
        <Parameter Name="executionQueue" Type="MonoTouch.Foundation.NSOperationQueue" />
        <Parameter Name="accessor" Type="System.Action&lt;MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="intents">To be added.</param>
        <param name="executionQueue">To be added.</param>
        <param name="accessor">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateBatc">
      <MemberSignature Language="C#" Value="public virtual void CoordinateBatc (MonoTouch.Foundation.NSUrl[] readingURLs, MonoTouch.Foundation.NSFileCoordinatorReadingOptions readingOptions, MonoTouch.Foundation.NSUrl[] writingURLs, MonoTouch.Foundation.NSFileCoordinatorWritingOptions writingOptions, out MonoTouch.Foundation.NSError error, Action batchHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateBatc(class MonoTouch.Foundation.NSUrl[] readingURLs, valuetype MonoTouch.Foundation.NSFileCoordinatorReadingOptions readingOptions, class MonoTouch.Foundation.NSUrl[] writingURLs, valuetype MonoTouch.Foundation.NSFileCoordinatorWritingOptions writingOptions, class MonoTouch.Foundation.NSError error, class System.Action batchHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("prepareForReadingItemsAtURLs:options:writingItemsAtURLs:options:error:byAccessor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readingURLs" Type="MonoTouch.Foundation.NSUrl[]" />
        <Parameter Name="readingOptions" Type="MonoTouch.Foundation.NSFileCoordinatorReadingOptions" />
        <Parameter Name="writingURLs" Type="MonoTouch.Foundation.NSUrl[]" />
        <Parameter Name="writingOptions" Type="MonoTouch.Foundation.NSFileCoordinatorWritingOptions" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
        <Parameter Name="batchHandler" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="readingURLs">To be added.</param>
        <param name="readingOptions">To be added.</param>
        <param name="writingURLs">To be added.</param>
        <param name="writingOptions">To be added.</param>
        <param name="error">To be added.</param>
        <param name="batchHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateRead">
      <MemberSignature Language="C#" Value="public virtual void CoordinateRead (MonoTouch.Foundation.NSUrl itemUrl, MonoTouch.Foundation.NSFileCoordinatorReadingOptions options, out MonoTouch.Foundation.NSError error, Action&lt;MonoTouch.Foundation.NSUrl&gt; worker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateRead(class MonoTouch.Foundation.NSUrl itemUrl, valuetype MonoTouch.Foundation.NSFileCoordinatorReadingOptions options, class MonoTouch.Foundation.NSError error, class System.Action`1&lt;class MonoTouch.Foundation.NSUrl&gt; worker) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("coordinateReadingItemAtURL:options:error:byAccessor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemUrl" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSFileCoordinatorReadingOptions" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
        <Parameter Name="worker" Type="System.Action&lt;MonoTouch.Foundation.NSUrl&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V19))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemUrl">To be added.</param>
        <param name="options">To be added.</param>
        <param name="error">To be added.</param>
        <param name="worker">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateReadWrite">
      <MemberSignature Language="C#" Value="public virtual void CoordinateReadWrite (MonoTouch.Foundation.NSUrl readingURL, MonoTouch.Foundation.NSFileCoordinatorReadingOptions readingOptions, MonoTouch.Foundation.NSUrl writingURL, MonoTouch.Foundation.NSFileCoordinatorWritingOptions writingOptions, out MonoTouch.Foundation.NSError error, MonoTouch.Foundation.NSFileCoordinatorWorkerRW readWriteWorker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateReadWrite(class MonoTouch.Foundation.NSUrl readingURL, valuetype MonoTouch.Foundation.NSFileCoordinatorReadingOptions readingOptions, class MonoTouch.Foundation.NSUrl writingURL, valuetype MonoTouch.Foundation.NSFileCoordinatorWritingOptions writingOptions, class MonoTouch.Foundation.NSError error, class MonoTouch.Foundation.NSFileCoordinatorWorkerRW readWriteWorker) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("coordinateReadingItemAtURL:options:writingItemAtURL:options:error:byAccessor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readingURL" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="readingOptions" Type="MonoTouch.Foundation.NSFileCoordinatorReadingOptions" />
        <Parameter Name="writingURL" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="writingOptions" Type="MonoTouch.Foundation.NSFileCoordinatorWritingOptions" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
        <Parameter Name="readWriteWorker" Type="MonoTouch.Foundation.NSFileCoordinatorWorkerRW">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDNSFileCoordinatorWorkerRW))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="readingURL">To be added.</param>
        <param name="readingOptions">To be added.</param>
        <param name="writingURL">To be added.</param>
        <param name="writingOptions">To be added.</param>
        <param name="error">To be added.</param>
        <param name="readWriteWorker">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateWrite">
      <MemberSignature Language="C#" Value="public virtual void CoordinateWrite (MonoTouch.Foundation.NSUrl url, MonoTouch.Foundation.NSFileCoordinatorWritingOptions options, out MonoTouch.Foundation.NSError error, Action&lt;MonoTouch.Foundation.NSUrl&gt; worker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateWrite(class MonoTouch.Foundation.NSUrl url, valuetype MonoTouch.Foundation.NSFileCoordinatorWritingOptions options, class MonoTouch.Foundation.NSError error, class System.Action`1&lt;class MonoTouch.Foundation.NSUrl&gt; worker) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("coordinateWritingItemAtURL:options:error:byAccessor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSFileCoordinatorWritingOptions" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
        <Parameter Name="worker" Type="System.Action&lt;MonoTouch.Foundation.NSUrl&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V19))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="options">To be added.</param>
        <param name="error">To be added.</param>
        <param name="worker">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CoordinateWriteWrite">
      <MemberSignature Language="C#" Value="public virtual void CoordinateWriteWrite (MonoTouch.Foundation.NSUrl writingURL, MonoTouch.Foundation.NSFileCoordinatorWritingOptions writingOptions, MonoTouch.Foundation.NSUrl writingURL2, MonoTouch.Foundation.NSFileCoordinatorWritingOptions writingOptions2, out MonoTouch.Foundation.NSError error, MonoTouch.Foundation.NSFileCoordinatorWorkerRW writeWriteWorker);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CoordinateWriteWrite(class MonoTouch.Foundation.NSUrl writingURL, valuetype MonoTouch.Foundation.NSFileCoordinatorWritingOptions writingOptions, class MonoTouch.Foundation.NSUrl writingURL2, valuetype MonoTouch.Foundation.NSFileCoordinatorWritingOptions writingOptions2, class MonoTouch.Foundation.NSError error, class MonoTouch.Foundation.NSFileCoordinatorWorkerRW writeWriteWorker) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("coordinateWritingItemAtURL:options:writingItemAtURL:options:error:byAccessor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writingURL" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="writingOptions" Type="MonoTouch.Foundation.NSFileCoordinatorWritingOptions" />
        <Parameter Name="writingURL2" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="writingOptions2" Type="MonoTouch.Foundation.NSFileCoordinatorWritingOptions" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
        <Parameter Name="writeWriteWorker" Type="MonoTouch.Foundation.NSFileCoordinatorWorkerRW">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDNSFileCoordinatorWorkerRW))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="writingURL">To be added.</param>
        <param name="writingOptions">To be added.</param>
        <param name="writingURL2">To be added.</param>
        <param name="writingOptions2">To be added.</param>
        <param name="error">To be added.</param>
        <param name="writeWriteWorker">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilePresenters">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.INSFilePresenter[] FilePresenters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.INSFilePresenter[] FilePresenters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("filePresenters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.INSFilePresenter[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemMoved">
      <MemberSignature Language="C#" Value="public virtual void ItemMoved (MonoTouch.Foundation.NSUrl fromUrl, MonoTouch.Foundation.NSUrl toUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ItemMoved(class MonoTouch.Foundation.NSUrl fromUrl, class MonoTouch.Foundation.NSUrl toUrl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("itemAtURL:didMoveToURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromUrl" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="toUrl" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="fromUrl">To be added.</param>
        <param name="toUrl">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemUbiquityAttributesChanged">
      <MemberSignature Language="C#" Value="public virtual void ItemUbiquityAttributesChanged (MonoTouch.Foundation.NSUrl url, MonoTouch.Foundation.NSSet&lt;MonoTouch.Foundation.NSString&gt; attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ItemUbiquityAttributesChanged(class MonoTouch.Foundation.NSUrl url, class MonoTouch.Foundation.NSSet`1&lt;class MonoTouch.Foundation.NSString&gt; attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("itemAtURL:didChangeUbiquityAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 13, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 11, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.WatchOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Unavailable(MonoTouch.ObjCRuntime.PlatformName.TvOS, MonoTouch.ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="attributes" Type="MonoTouch.Foundation.NSSet&lt;MonoTouch.Foundation.NSString&gt;" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PurposeIdentifier">
      <MemberSignature Language="C#" Value="public virtual string PurposeIdentifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PurposeIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 7, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("purposeIdentifier")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 7, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setPurposeIdentifier:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 7, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFilePresenter">
      <MemberSignature Language="C#" Value="public static void RemoveFilePresenter (MonoTouch.Foundation.INSFilePresenter filePresenter);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RemoveFilePresenter(class MonoTouch.Foundation.INSFilePresenter filePresenter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeFilePresenter:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filePresenter" Type="MonoTouch.Foundation.INSFilePresenter" />
      </Parameters>
      <Docs>
        <param name="filePresenter">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillMove">
      <MemberSignature Language="C#" Value="public virtual void WillMove (MonoTouch.Foundation.NSUrl oldUrl, MonoTouch.Foundation.NSUrl newUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillMove(class MonoTouch.Foundation.NSUrl oldUrl, class MonoTouch.Foundation.NSUrl newUrl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("itemAtURL:willMoveToURL:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 8, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldUrl" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="newUrl" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="oldUrl">To be added.</param>
        <param name="newUrl">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>