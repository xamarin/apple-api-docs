<Type Name="NSUbiquitousKeyValueStore" FullName="Foundation.NSUbiquitousKeyValueStore">
  <TypeSignature Language="C#" Value="public class NSUbiquitousKeyValueStore : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSUbiquitousKeyValueStore extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSUbiquitousKeyValueStore" />
  <TypeSignature Language="F#" Value="type NSUbiquitousKeyValueStore = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSUbiquitousKeyValueStore", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An iCloud-based key-value store intended for the storage of configuration and state-preservation data.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Foundation/Reference/NSUbiquitousKeyValueStore_class/index.html">Apple documentation for <c>NSUbiquitousKeyValueStore</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUbiquitousKeyValueStore ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSUbiquitousKeyValueStore (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSUbiquitousKeyValueStore : Foundation.NSObjectFlag -&gt; Foundation.NSUbiquitousKeyValueStore" Usage="new Foundation.NSUbiquitousKeyValueStore t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSUbiquitousKeyValueStore (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSUbiquitousKeyValueStore : nativeint -&gt; Foundation.NSUbiquitousKeyValueStore" Usage="new Foundation.NSUbiquitousKeyValueStore handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedKeysKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ChangedKeysKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ChangedKeysKey" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUbiquitousKeyValueStore.ChangedKeysKey" />
      <MemberSignature Language="F#" Value="member this.ChangedKeysKey : Foundation.NSString" Usage="Foundation.NSUbiquitousKeyValueStore.ChangedKeysKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUbiquitousKeyValueStoreChangedKeysKey", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant NSUbiquitousKeyValueStoreChangedKeysKey</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeReasonKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ChangeReasonKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ChangeReasonKey" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUbiquitousKeyValueStore.ChangeReasonKey" />
      <MemberSignature Language="F#" Value="member this.ChangeReasonKey : Foundation.NSString" Usage="Foundation.NSUbiquitousKeyValueStore.ChangeReasonKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUbiquitousKeyValueStoreChangeReasonKey", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant NSUbiquitousKeyValueStoreChangeReasonKey</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUbiquitousKeyValueStore.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSUbiquitousKeyValueStore.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultStore">
      <MemberSignature Language="C#" Value="public static Foundation.NSUbiquitousKeyValueStore DefaultStore { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSUbiquitousKeyValueStore DefaultStore" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUbiquitousKeyValueStore.DefaultStore" />
      <MemberSignature Language="F#" Value="member this.DefaultStore : Foundation.NSUbiquitousKeyValueStore" Usage="Foundation.NSUbiquitousKeyValueStore.DefaultStore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("defaultStore")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUbiquitousKeyValueStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Static method that retrieves the iCloud key-value store.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeExternallyNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DidChangeExternallyNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DidChangeExternallyNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUbiquitousKeyValueStore.DidChangeExternallyNotification" />
      <MemberSignature Language="F#" Value="member this.DidChangeExternallyNotification : Foundation.NSString" Usage="Foundation.NSUbiquitousKeyValueStore.DidChangeExternallyNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSUbiquitousKeyValueStore.Notifications.ObserveDidChangeExternally helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUbiquitousKeyValueStoreDidChangeExternallyNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DidChangeExternally</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="T:Foundation.NSUbiquitousKeyValueStore+Notifications" />.<see cref="M:Foundation.NSUbiquitousKeyValueStore+Notifications.ObserveDidChangeExternallyNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSUbiquitousKeyValueStore.Notifications.ObserveDidChangeExternally ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("ChangedKeys", args.ChangedKeys);
    Console.WriteLine ("ChangeReason", args.ChangeReason);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSUbiquitousKeyValueStoreChangeEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("ChangedKeys", args.ChangedKeys);
    Console.WriteLine ("ChangeReason", args.ChangeReason);
}

void Setup ()
{
    notification = NSUbiquitousKeyValueStore.Notifications.ObserveDidChangeExternally (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSUbiquitousKeyValueStore.DidChangeExternallyNotification, (notification) => {Console.WriteLine ("Received the notification NSUbiquitousKeyValueStore", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSUbiquitousKeyValueStore", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSUbiquitousKeyValueStore.DidChangeExternallyNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArray">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject[] GetArray (string aKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject[] GetArray(string aKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.GetArray(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetArray : string -&gt; Foundation.NSObject[]&#xA;override this.GetArray : string -&gt; Foundation.NSObject[]" Usage="nSUbiquitousKeyValueStore.GetArray aKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("arrayForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aKey">To be added.</param>
        <summary>The array at the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBool">
      <MemberSignature Language="C#" Value="public virtual bool GetBool (string aKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetBool(string aKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.GetBool(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetBool : string -&gt; bool&#xA;override this.GetBool : string -&gt; bool" Usage="nSUbiquitousKeyValueStore.GetBool aKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("boolForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aKey">To be added.</param>
        <summary>The bool at the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData GetData (string aKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData GetData(string aKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.GetData(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; Foundation.NSData&#xA;override this.GetData : string -&gt; Foundation.NSData" Usage="nSUbiquitousKeyValueStore.GetData aKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dataForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aKey">To be added.</param>
        <summary>The NSData at the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDictionary">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary GetDictionary (string aKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDictionary GetDictionary(string aKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.GetDictionary(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetDictionary : string -&gt; Foundation.NSDictionary&#xA;override this.GetDictionary : string -&gt; Foundation.NSDictionary" Usage="nSUbiquitousKeyValueStore.GetDictionary aKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dictionaryForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aKey">To be added.</param>
        <summary>The dictionary at the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDouble">
      <MemberSignature Language="C#" Value="public virtual double GetDouble (string aKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 GetDouble(string aKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.GetDouble(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetDouble : string -&gt; double&#xA;override this.GetDouble : string -&gt; double" Usage="nSUbiquitousKeyValueStore.GetDouble aKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("doubleForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aKey">To be added.</param>
        <summary>The double at the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLong">
      <MemberSignature Language="C#" Value="public virtual long GetLong (string aKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int64 GetLong(string aKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.GetLong(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetLong : string -&gt; int64&#xA;override this.GetLong : string -&gt; int64" Usage="nSUbiquitousKeyValueStore.GetLong aKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("longLongForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aKey">To be added.</param>
        <summary>The long at the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string aKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string aKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.GetString(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetString : string -&gt; string&#xA;override this.GetString : string -&gt; string" Usage="nSUbiquitousKeyValueStore.GetString aKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stringForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aKey">To be added.</param>
        <summary>The string at the specified key.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Foundation.NSObject this[Foundation.NSString key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject Item(class Foundation.NSString)" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUbiquitousKeyValueStore.Item(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="member this.Item(Foundation.NSString) : Foundation.NSObject with get, set" Usage="Foundation.NSUbiquitousKeyValueStore.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Foundation.NSObject this[string key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject Item(string)" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUbiquitousKeyValueStore.Item(System.String)" />
      <MemberSignature Language="F#" Value="member this.Item(string) : Foundation.NSObject with get, set" Usage="Foundation.NSUbiquitousKeyValueStore.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (string aKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(string aKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.Remove(System.String)" />
      <MemberSignature Language="F#" Value="abstract member Remove : string -&gt; unit&#xA;override this.Remove : string -&gt; unit" Usage="nSUbiquitousKeyValueStore.Remove aKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeObjectForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="aKey">To be added.</param>
        <summary>Removes the object at the specified key.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetArray">
      <MemberSignature Language="C#" Value="public void SetArray (string key, Foundation.NSObject[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetArray(string key, class Foundation.NSObject[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.SetArray(System.String,Foundation.NSObject[])" />
      <MemberSignature Language="F#" Value="member this.SetArray : string * Foundation.NSObject[] -&gt; unit" Usage="nSUbiquitousKeyValueStore.SetArray (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="Foundation.NSObject[]" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBool">
      <MemberSignature Language="C#" Value="public void SetBool (string key, bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBool(string key, bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.SetBool(System.String,System.Boolean)" />
      <MemberSignature Language="F#" Value="member this.SetBool : string * bool -&gt; unit" Usage="nSUbiquitousKeyValueStore.SetBool (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string key, Foundation.NSData value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetData(string key, class Foundation.NSData value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.SetData(System.String,Foundation.NSData)" />
      <MemberSignature Language="F#" Value="member this.SetData : string * Foundation.NSData -&gt; unit" Usage="nSUbiquitousKeyValueStore.SetData (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDictionary">
      <MemberSignature Language="C#" Value="public void SetDictionary (string key, Foundation.NSDictionary value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDictionary(string key, class Foundation.NSDictionary value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.SetDictionary(System.String,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="member this.SetDictionary : string * Foundation.NSDictionary -&gt; unit" Usage="nSUbiquitousKeyValueStore.SetDictionary (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDouble">
      <MemberSignature Language="C#" Value="public void SetDouble (string key, double value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetDouble(string key, float64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.SetDouble(System.String,System.Double)" />
      <MemberSignature Language="F#" Value="member this.SetDouble : string * double -&gt; unit" Usage="nSUbiquitousKeyValueStore.SetDouble (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLong">
      <MemberSignature Language="C#" Value="public void SetLong (string key, long value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetLong(string key, int64 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.SetLong(System.String,System.Int64)" />
      <MemberSignature Language="F#" Value="member this.SetLong : string * int64 -&gt; unit" Usage="nSUbiquitousKeyValueStore.SetLong (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.Int64" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetString">
      <MemberSignature Language="C#" Value="public void SetString (string key, string value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetString(string key, string value) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.SetString(System.String,System.String)" />
      <MemberSignature Language="F#" Value="member this.SetString : string * string -&gt; unit" Usage="nSUbiquitousKeyValueStore.SetString (key, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="value" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Synchronize">
      <MemberSignature Language="C#" Value="public virtual bool Synchronize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Synchronize() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.Synchronize" />
      <MemberSignature Language="F#" Value="abstract member Synchronize : unit -&gt; bool&#xA;override this.Synchronize : unit -&gt; bool" Usage="nSUbiquitousKeyValueStore.Synchronize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("synchronize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Synchronizes in-memory and disk keys and values.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary ToDictionary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDictionary ToDictionary() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUbiquitousKeyValueStore.ToDictionary" />
      <MemberSignature Language="F#" Value="abstract member ToDictionary : unit -&gt; Foundation.NSDictionary&#xA;override this.ToDictionary : unit -&gt; Foundation.NSDictionary" Usage="nSUbiquitousKeyValueStore.ToDictionary " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dictionaryRepresentation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
