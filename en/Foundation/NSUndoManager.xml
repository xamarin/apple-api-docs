<Type Name="NSUndoManager" FullName="Foundation.NSUndoManager">
  <TypeSignature Language="C#" Value="public class NSUndoManager : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSUndoManager extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSUndoManager" />
  <TypeSignature Language="F#" Value="type NSUndoManager = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSUndoManager", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Undo manager class.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSUndoManager_Class/index.html">Apple documentation for <c>NSUndoManager</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUndoManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSUndoManager (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSUndoManager : Foundation.NSObjectFlag -&gt; Foundation.NSUndoManager" Usage="new Foundation.NSUndoManager t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSUndoManager (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSUndoManager : nativeint -&gt; Foundation.NSUndoManager" Usage="new Foundation.NSUndoManager handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginUndoGrouping">
      <MemberSignature Language="C#" Value="public virtual void BeginUndoGrouping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginUndoGrouping() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.BeginUndoGrouping" />
      <MemberSignature Language="F#" Value="abstract member BeginUndoGrouping : unit -&gt; unit&#xA;override this.BeginUndoGrouping : unit -&gt; unit" Usage="nSUndoManager.BeginUndoGrouping " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("beginUndoGrouping")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marks the beginning of an undo group.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanRedo">
      <MemberSignature Language="C#" Value="public virtual bool CanRedo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanRedo" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.CanRedo" />
      <MemberSignature Language="F#" Value="member this.CanRedo : bool" Usage="Foundation.NSUndoManager.CanRedo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canRedo")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this NSUndoManager has any actions to redo.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public virtual bool CanUndo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUndo" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.CanUndo" />
      <MemberSignature Language="F#" Value="member this.CanUndo : bool" Usage="Foundation.NSUndoManager.CanUndo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("canUndo")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this NSUndoManager has any actions to undo.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckpointNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString CheckpointNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString CheckpointNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.CheckpointNotification" />
      <MemberSignature Language="F#" Value="member this.CheckpointNotification : Foundation.NSString" Usage="Foundation.NSUndoManager.CheckpointNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSUndoManager.Notifications.ObserveCheckpoint helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUndoManagerCheckpointNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for Checkpoint</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:Foundation.NSUndoManager.Notifications" />.<see cref="M:Foundation.NSUndoManager.Notifications.ObserveCheckpoint*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSUndoManager.Notifications.ObserveCheckpoint ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = NSUndoManager.Notifications.ObserveCheckpoint (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSUndoManager.CheckpointNotification, (notification) => {Console.WriteLine ("Received the notification NSUndoManager", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSUndoManager", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSUndoManager.CheckpointNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSUndoManager.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidCloseUndoGroupNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DidCloseUndoGroupNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DidCloseUndoGroupNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.DidCloseUndoGroupNotification" />
      <MemberSignature Language="F#" Value="member this.DidCloseUndoGroupNotification : Foundation.NSString" Usage="Foundation.NSUndoManager.DidCloseUndoGroupNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSUndoManager.Notifications.ObserveDidCloseUndoGroup helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUndoManagerDidCloseUndoGroupNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DidCloseUndoGroup</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="T:Foundation.NSUndoManager.Notifications" />.<see cref="M:Foundation.NSUndoManager.Notifications.ObserveDidCloseUndoGroup*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSUndoManager.Notifications.ObserveDidCloseUndoGroup ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("Discardable", args.Discardable);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSUndoManagerCloseUndoGroupEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("Discardable", args.Discardable);
}

void Setup ()
{
    notification = NSUndoManager.Notifications.ObserveDidCloseUndoGroup (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSUndoManager.DidCloseUndoGroupNotification, (notification) => {Console.WriteLine ("Received the notification NSUndoManager", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSUndoManager", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSUndoManager.DidCloseUndoGroupNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidOpenUndoGroupNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DidOpenUndoGroupNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DidOpenUndoGroupNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.DidOpenUndoGroupNotification" />
      <MemberSignature Language="F#" Value="member this.DidOpenUndoGroupNotification : Foundation.NSString" Usage="Foundation.NSUndoManager.DidOpenUndoGroupNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSUndoManager.Notifications.ObserveDidOpenUndoGroup helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUndoManagerDidOpenUndoGroupNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DidOpenUndoGroup</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:Foundation.NSUndoManager.Notifications" />.<see cref="M:Foundation.NSUndoManager.Notifications.ObserveDidOpenUndoGroup*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSUndoManager.Notifications.ObserveDidOpenUndoGroup ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = NSUndoManager.Notifications.ObserveDidOpenUndoGroup (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSUndoManager.DidOpenUndoGroupNotification, (notification) => {Console.WriteLine ("Received the notification NSUndoManager", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSUndoManager", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSUndoManager.DidOpenUndoGroupNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRedoChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DidRedoChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DidRedoChangeNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.DidRedoChangeNotification" />
      <MemberSignature Language="F#" Value="member this.DidRedoChangeNotification : Foundation.NSString" Usage="Foundation.NSUndoManager.DidRedoChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSUndoManager.Notifications.ObserveDidRedoChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUndoManagerDidRedoChangeNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DidRedoChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:Foundation.NSUndoManager.Notifications" />.<see cref="M:Foundation.NSUndoManager.Notifications.ObserveDidRedoChange*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSUndoManager.Notifications.ObserveDidRedoChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = NSUndoManager.Notifications.ObserveDidRedoChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSUndoManager.DidRedoChangeNotification, (notification) => {Console.WriteLine ("Received the notification NSUndoManager", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSUndoManager", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSUndoManager.DidRedoChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUndoChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DidUndoChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DidUndoChangeNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.DidUndoChangeNotification" />
      <MemberSignature Language="F#" Value="member this.DidUndoChangeNotification : Foundation.NSString" Usage="Foundation.NSUndoManager.DidUndoChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSUndoManager.Notifications.ObserveDidUndoChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUndoManagerDidUndoChangeNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DidUndoChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:Foundation.NSUndoManager.Notifications" />.<see cref="M:Foundation.NSUndoManager.Notifications.ObserveDidUndoChange*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSUndoManager.Notifications.ObserveDidUndoChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = NSUndoManager.Notifications.ObserveDidUndoChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSUndoManager.DidUndoChangeNotification, (notification) => {Console.WriteLine ("Received the notification NSUndoManager", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSUndoManager", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSUndoManager.DidUndoChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableUndoRegistration">
      <MemberSignature Language="C#" Value="public virtual void DisableUndoRegistration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DisableUndoRegistration() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.DisableUndoRegistration" />
      <MemberSignature Language="F#" Value="abstract member DisableUndoRegistration : unit -&gt; unit&#xA;override this.DisableUndoRegistration : unit -&gt; unit" Usage="nSUndoManager.DisableUndoRegistration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("disableUndoRegistration")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disables recording undo operations.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableUndoRegistration">
      <MemberSignature Language="C#" Value="public virtual void EnableUndoRegistration ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnableUndoRegistration() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.EnableUndoRegistration" />
      <MemberSignature Language="F#" Value="abstract member EnableUndoRegistration : unit -&gt; unit&#xA;override this.EnableUndoRegistration : unit -&gt; unit" Usage="nSUndoManager.EnableUndoRegistration " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enableUndoRegistration")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Enables recording undo operations.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndUndoGrouping">
      <MemberSignature Language="C#" Value="public virtual void EndUndoGrouping ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndUndoGrouping() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.EndUndoGrouping" />
      <MemberSignature Language="F#" Value="abstract member EndUndoGrouping : unit -&gt; unit&#xA;override this.EndUndoGrouping : unit -&gt; unit" Usage="nSUndoManager.EndUndoGrouping " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("endUndoGrouping")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Marks the end of an undo group.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupingLevel">
      <MemberSignature Language="C#" Value="public virtual nint GroupingLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint GroupingLevel" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.GroupingLevel" />
      <MemberSignature Language="F#" Value="member this.GroupingLevel : nint" Usage="Foundation.NSUndoManager.GroupingLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("groupingLevel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of nested undo groups (or redo groups, if Redo was last invoked) in the current event loop.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupIsDiscardableKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GroupIsDiscardableKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GroupIsDiscardableKey" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.GroupIsDiscardableKey" />
      <MemberSignature Language="F#" Value="member this.GroupIsDiscardableKey : Foundation.NSString" Usage="Foundation.NSUndoManager.GroupIsDiscardableKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUndoManagerGroupIsDiscardableKey", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant NSUndoManagerGroupIsDiscardableKey</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupsByEvent">
      <MemberSignature Language="C#" Value="public virtual bool GroupsByEvent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GroupsByEvent" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.GroupsByEvent" />
      <MemberSignature Language="F#" Value="member this.GroupsByEvent : bool with get, set" Usage="Foundation.NSUndoManager.GroupsByEvent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("groupsByEvent")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setGroupsByEvent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this NSUndoManager automatically creates undo groups around each pass of the run loop.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsRedoing">
      <MemberSignature Language="C#" Value="public virtual bool IsRedoing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsRedoing" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.IsRedoing" />
      <MemberSignature Language="F#" Value="member this.IsRedoing : bool" Usage="Foundation.NSUndoManager.IsRedoing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isRedoing")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this NSUndoManager is in the process of performing its redo method.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUndoing">
      <MemberSignature Language="C#" Value="public virtual bool IsUndoing { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUndoing" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.IsUndoing" />
      <MemberSignature Language="F#" Value="member this.IsUndoing : bool" Usage="Foundation.NSUndoManager.IsUndoing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isUndoing")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this NSUndoManager is in the process of performing its undo or UndoNestedGroup method.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUndoRegistrationEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsUndoRegistrationEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUndoRegistrationEnabled" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.IsUndoRegistrationEnabled" />
      <MemberSignature Language="F#" Value="member this.IsUndoRegistrationEnabled : bool" Usage="Foundation.NSUndoManager.IsUndoRegistrationEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isUndoRegistrationEnabled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the recording of undo operations is enabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LevelsOfUndo">
      <MemberSignature Language="C#" Value="public virtual nint LevelsOfUndo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint LevelsOfUndo" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.LevelsOfUndo" />
      <MemberSignature Language="F#" Value="member this.LevelsOfUndo : nint with get, set" Usage="Foundation.NSUndoManager.LevelsOfUndo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("levelsOfUndo")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setLevelsOfUndo:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The maximum number of top-level undo groups this NSUndoManager holds.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareWithInvocationTarget">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject PrepareWithInvocationTarget (Foundation.NSObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject PrepareWithInvocationTarget(class Foundation.NSObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.PrepareWithInvocationTarget(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member PrepareWithInvocationTarget : Foundation.NSObject -&gt; Foundation.NSObject&#xA;override this.PrepareWithInvocationTarget : Foundation.NSObject -&gt; Foundation.NSObject" Usage="nSUndoManager.PrepareWithInvocationTarget target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("prepareWithInvocationTarget:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Redo">
      <MemberSignature Language="C#" Value="public virtual void Redo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Redo() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.Redo" />
      <MemberSignature Language="F#" Value="abstract member Redo : unit -&gt; unit&#xA;override this.Redo : unit -&gt; unit" Usage="nSUndoManager.Redo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("redo")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs the last operations in the last group on the redo stack, if any, recording them on the undo stack as a single group.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedoActionIsDiscardable">
      <MemberSignature Language="C#" Value="public virtual bool RedoActionIsDiscardable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RedoActionIsDiscardable" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.RedoActionIsDiscardable" />
      <MemberSignature Language="F#" Value="member this.RedoActionIsDiscardable : bool" Usage="Foundation.NSUndoManager.RedoActionIsDiscardable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("redoActionIsDiscardable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the next redo action is discardable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedoActionName">
      <MemberSignature Language="C#" Value="public virtual string RedoActionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RedoActionName" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.RedoActionName" />
      <MemberSignature Language="F#" Value="member this.RedoActionName : string" Usage="Foundation.NSUndoManager.RedoActionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("redoActionName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name for the redo action.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedoMenuItemTitle">
      <MemberSignature Language="C#" Value="public virtual string RedoMenuItemTitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RedoMenuItemTitle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.RedoMenuItemTitle" />
      <MemberSignature Language="F#" Value="member this.RedoMenuItemTitle : string" Usage="Foundation.NSUndoManager.RedoMenuItemTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("redoMenuItemTitle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The complete title of the Redo menu command, e.g., "Redo Paste."</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RedoMenuTitleForUndoActionName">
      <MemberSignature Language="C#" Value="public virtual string RedoMenuTitleForUndoActionName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string RedoMenuTitleForUndoActionName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.RedoMenuTitleForUndoActionName(System.String)" />
      <MemberSignature Language="F#" Value="abstract member RedoMenuTitleForUndoActionName : string -&gt; string&#xA;override this.RedoMenuTitleForUndoActionName : string -&gt; string" Usage="nSUndoManager.RedoMenuTitleForUndoActionName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("redoMenuTitleForUndoActionName:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterUndo">
      <MemberSignature Language="C#" Value="public virtual void RegisterUndo (Foundation.NSObject target, Action&lt;Foundation.NSObject&gt; undoHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterUndo(class Foundation.NSObject target, class System.Action`1&lt;class Foundation.NSObject&gt; undoHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.RegisterUndo(Foundation.NSObject,System.Action{Foundation.NSObject})" />
      <MemberSignature Language="F#" Value="abstract member RegisterUndo : Foundation.NSObject * Action&lt;Foundation.NSObject&gt; -&gt; unit&#xA;override this.RegisterUndo : Foundation.NSObject * Action&lt;Foundation.NSObject&gt; -&gt; unit" Usage="nSUndoManager.RegisterUndo (target, undoHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("registerUndoWithTarget:handler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="undoHandler" Type="System.Action&lt;Foundation.NSObject&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V19))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="undoHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterUndoWithTarget">
      <MemberSignature Language="C#" Value="public virtual void RegisterUndoWithTarget (Foundation.NSObject target, ObjCRuntime.Selector selector, Foundation.NSObject anObject);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterUndoWithTarget(class Foundation.NSObject target, class ObjCRuntime.Selector selector, class Foundation.NSObject anObject) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.RegisterUndoWithTarget(Foundation.NSObject,ObjCRuntime.Selector,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member RegisterUndoWithTarget : Foundation.NSObject * ObjCRuntime.Selector * Foundation.NSObject -&gt; unit&#xA;override this.RegisterUndoWithTarget : Foundation.NSObject * ObjCRuntime.Selector * Foundation.NSObject -&gt; unit" Usage="nSUndoManager.RegisterUndoWithTarget (target, selector, anObject)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("registerUndoWithTarget:selector:object:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="selector" Type="ObjCRuntime.Selector" />
        <Parameter Name="anObject" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="selector">To be added.</param>
        <param name="anObject">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllActions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllActions ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllActions() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.RemoveAllActions" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllActions : unit -&gt; unit&#xA;override this.RemoveAllActions : unit -&gt; unit" Usage="nSUndoManager.RemoveAllActions " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeAllActions")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Clears the undo and redo stacks and re-enables this NSUndoManager.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllActions">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllActions (Foundation.NSObject target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllActions(class Foundation.NSObject target) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.RemoveAllActions(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllActions : Foundation.NSObject -&gt; unit&#xA;override this.RemoveAllActions : Foundation.NSObject -&gt; unit" Usage="nSUndoManager.RemoveAllActions target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeAllActionsWithTarget:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunLoopModes">
      <MemberSignature Language="C#" Value="public virtual string[] RunLoopModes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] RunLoopModes" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.RunLoopModes" />
      <MemberSignature Language="F#" Value="member this.RunLoopModes : string[] with get, set" Usage="Foundation.NSUndoManager.RunLoopModes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("runLoopModes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setRunLoopModes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the modes governing the types of input handled during a cycle of the run loop.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetActionIsDiscardable">
      <MemberSignature Language="C#" Value="public virtual void SetActionIsDiscardable (bool discardable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetActionIsDiscardable(bool discardable) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.SetActionIsDiscardable(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetActionIsDiscardable : bool -&gt; unit&#xA;override this.SetActionIsDiscardable : bool -&gt; unit" Usage="nSUndoManager.SetActionIsDiscardable discardable" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setActionIsDiscardable:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="discardable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="discardable">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetActionname">
      <MemberSignature Language="C#" Value="public virtual void SetActionname (string actionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetActionname(string actionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.SetActionname(System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetActionname : string -&gt; unit&#xA;override this.SetActionname : string -&gt; unit" Usage="nSUndoManager.SetActionname actionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use the correctly named method: 'SetActionName'.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setActionName:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetActionName">
      <MemberSignature Language="C#" Value="public virtual void SetActionName (string actionName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetActionName(string actionName) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.SetActionName(System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetActionName : string -&gt; unit&#xA;override this.SetActionName : string -&gt; unit" Usage="nSUndoManager.SetActionName actionName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="actionName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public virtual void Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.Undo" />
      <MemberSignature Language="F#" Value="abstract member Undo : unit -&gt; unit&#xA;override this.Undo : unit -&gt; unit" Usage="nSUndoManager.Undo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("undo")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Closes the top-level undo group, if necessary, and invokes UndoNestedGroup.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndoActionIsDiscardable">
      <MemberSignature Language="C#" Value="public virtual bool UndoActionIsDiscardable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UndoActionIsDiscardable" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.UndoActionIsDiscardable" />
      <MemberSignature Language="F#" Value="member this.UndoActionIsDiscardable : bool" Usage="Foundation.NSUndoManager.UndoActionIsDiscardable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("undoActionIsDiscardable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the next undo action is discardable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndoActionName">
      <MemberSignature Language="C#" Value="public virtual string UndoActionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UndoActionName" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.UndoActionName" />
      <MemberSignature Language="F#" Value="member this.UndoActionName : string" Usage="Foundation.NSUndoManager.UndoActionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("undoActionName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name for the undo action.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndoMenuItemTitle">
      <MemberSignature Language="C#" Value="public virtual string UndoMenuItemTitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UndoMenuItemTitle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.UndoMenuItemTitle" />
      <MemberSignature Language="F#" Value="member this.UndoMenuItemTitle : string" Usage="Foundation.NSUndoManager.UndoMenuItemTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("undoMenuItemTitle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The complete title of the Undo menu command, e.g., "Undo Paste."</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndoMenuTitleForUndoActionName">
      <MemberSignature Language="C#" Value="public virtual string UndoMenuTitleForUndoActionName (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string UndoMenuTitleForUndoActionName(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.UndoMenuTitleForUndoActionName(System.String)" />
      <MemberSignature Language="F#" Value="abstract member UndoMenuTitleForUndoActionName : string -&gt; string&#xA;override this.UndoMenuTitleForUndoActionName : string -&gt; string" Usage="nSUndoManager.UndoMenuTitleForUndoActionName name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("undoMenuTitleForUndoActionName:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UndoNestedGroup">
      <MemberSignature Language="C#" Value="public virtual void UndoNestedGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UndoNestedGroup() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUndoManager.UndoNestedGroup" />
      <MemberSignature Language="F#" Value="abstract member UndoNestedGroup : unit -&gt; unit&#xA;override this.UndoNestedGroup : unit -&gt; unit" Usage="nSUndoManager.UndoNestedGroup " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("undoNestedGroup")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Performs the undo operations in the last top-level or nested undo group, recording the operations on the redo stack as a single group.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillCloseUndoGroupNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString WillCloseUndoGroupNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString WillCloseUndoGroupNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.WillCloseUndoGroupNotification" />
      <MemberSignature Language="F#" Value="member this.WillCloseUndoGroupNotification : Foundation.NSString" Usage="Foundation.NSUndoManager.WillCloseUndoGroupNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSUndoManager.Notifications.ObserveWillCloseUndoGroup helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUndoManagerWillCloseUndoGroupNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for WillCloseUndoGroup</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="T:Foundation.NSUndoManager.Notifications" />.<see cref="M:Foundation.NSUndoManager.Notifications.ObserveWillCloseUndoGroup*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSUndoManager.Notifications.ObserveWillCloseUndoGroup ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("Discardable", args.Discardable);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSUndoManagerCloseUndoGroupEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("Discardable", args.Discardable);
}

void Setup ()
{
    notification = NSUndoManager.Notifications.ObserveWillCloseUndoGroup (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSUndoManager.WillCloseUndoGroupNotification, (notification) => {Console.WriteLine ("Received the notification NSUndoManager", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSUndoManager", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSUndoManager.WillCloseUndoGroupNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillRedoChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString WillRedoChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString WillRedoChangeNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.WillRedoChangeNotification" />
      <MemberSignature Language="F#" Value="member this.WillRedoChangeNotification : Foundation.NSString" Usage="Foundation.NSUndoManager.WillRedoChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSUndoManager.Notifications.ObserveWillRedoChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUndoManagerWillRedoChangeNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for WillRedoChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:Foundation.NSUndoManager.Notifications" />.<see cref="M:Foundation.NSUndoManager.Notifications.ObserveWillRedoChange*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSUndoManager.Notifications.ObserveWillRedoChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = NSUndoManager.Notifications.ObserveWillRedoChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSUndoManager.WillRedoChangeNotification, (notification) => {Console.WriteLine ("Received the notification NSUndoManager", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSUndoManager", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSUndoManager.WillRedoChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillUndoChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString WillUndoChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString WillUndoChangeNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUndoManager.WillUndoChangeNotification" />
      <MemberSignature Language="F#" Value="member this.WillUndoChangeNotification : Foundation.NSString" Usage="Foundation.NSUndoManager.WillUndoChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSUndoManager.Notifications.ObserveWillUndoChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSUndoManagerWillUndoChangeNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for WillUndoChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:Foundation.NSUndoManager.Notifications" />.<see cref="M:Foundation.NSUndoManager.Notifications.ObserveWillUndoChange*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSUndoManager.Notifications.ObserveWillUndoChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = NSUndoManager.Notifications.ObserveWillUndoChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSUndoManager.WillUndoChangeNotification, (notification) => {Console.WriteLine ("Received the notification NSUndoManager", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSUndoManager", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSUndoManager.WillUndoChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
