<Type Name="NSExtensionContext+Notifications" FullName="Foundation.NSExtensionContext+Notifications">
  <TypeSignature Language="C#" Value="public static class NSExtensionContext.Notifications" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract sealed beforefieldinit NSExtensionContext/Notifications extends System.Object" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Class that contains handlers for extension context notifications.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="ObserveHostDidBecomeActive">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveHostDidBecomeActive (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveHostDidBecomeActive(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <summary>Strongly typed notification for the <see cref="P:Foundation.NSExtensionContext.HostDidBecomeActiveNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:Foundation.NSExtensionContext.HostDidBecomeActiveNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = NSExtensionContext.Notifications.ObserveHostDidBecomeActive ((notification) => {
	Console.WriteLine ("Observed HostDidBecomeActiveNotification!");
};

// Listen to all notifications posted for a single object
var token = NSExtensionContext.Notifications.ObserveHostDidBecomeActive (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed HostDidBecomeActiveNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveHostDidBecomeActive">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveHostDidBecomeActive (MonoTouch.Foundation.NSObject objectToObserve, EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveHostDidBecomeActive(class MonoTouch.Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Strongly typed notification for the <see cref="P:Foundation.NSExtensionContext.HostDidBecomeActiveNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:Foundation.NSExtensionContext.HostDidBecomeActiveNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = NSExtensionContext.Notifications.ObserveHostDidBecomeActive ((notification) => {
	Console.WriteLine ("Observed HostDidBecomeActiveNotification!");
};

// Listen to all notifications posted for a single object
var token = NSExtensionContext.Notifications.ObserveHostDidBecomeActive (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed HostDidBecomeActiveNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveHostDidEnterBackground">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveHostDidEnterBackground (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveHostDidEnterBackground(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <summary>Strongly typed notification for the <see cref="P:Foundation.NSExtensionContext.HostDidEnterBackgroundNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:Foundation.NSExtensionContext.HostDidEnterBackgroundNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = NSExtensionContext.Notifications.ObserveHostDidEnterBackground ((notification) => {
	Console.WriteLine ("Observed HostDidEnterBackgroundNotification!");
};

// Listen to all notifications posted for a single object
var token = NSExtensionContext.Notifications.ObserveHostDidEnterBackground (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed HostDidEnterBackgroundNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveHostDidEnterBackground">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveHostDidEnterBackground (MonoTouch.Foundation.NSObject objectToObserve, EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveHostDidEnterBackground(class MonoTouch.Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Strongly typed notification for the <see cref="P:Foundation.NSExtensionContext.HostDidEnterBackgroundNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:Foundation.NSExtensionContext.HostDidEnterBackgroundNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = NSExtensionContext.Notifications.ObserveHostDidEnterBackground ((notification) => {
	Console.WriteLine ("Observed HostDidEnterBackgroundNotification!");
};

// Listen to all notifications posted for a single object
var token = NSExtensionContext.Notifications.ObserveHostDidEnterBackground (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed HostDidEnterBackgroundNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveHostWillEnterForeground">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveHostWillEnterForeground (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveHostWillEnterForeground(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <summary>Strongly typed notification for the <see cref="P:Foundation.NSExtensionContext.HostWillEnterForegroundNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:Foundation.NSExtensionContext.HostWillEnterForegroundNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = NSExtensionContext.Notifications.ObserveHostWillEnterForeground ((notification) => {
	Console.WriteLine ("Observed HostWillEnterForegroundNotification!");
};

// Listen to all notifications posted for a single object
var token = NSExtensionContext.Notifications.ObserveHostWillEnterForeground (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed HostWillEnterForegroundNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveHostWillEnterForeground">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveHostWillEnterForeground (MonoTouch.Foundation.NSObject objectToObserve, EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveHostWillEnterForeground(class MonoTouch.Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Strongly typed notification for the <see cref="P:Foundation.NSExtensionContext.HostWillEnterForegroundNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:Foundation.NSExtensionContext.HostWillEnterForegroundNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = NSExtensionContext.Notifications.ObserveHostWillEnterForeground ((notification) => {
	Console.WriteLine ("Observed HostWillEnterForegroundNotification!");
};

// Listen to all notifications posted for a single object
var token = NSExtensionContext.Notifications.ObserveHostWillEnterForeground (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed HostWillEnterForegroundNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveHostWillResignActive">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveHostWillResignActive (EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveHostWillResignActive(class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <summary>Strongly typed notification for the <see cref="P:Foundation.NSExtensionContext.HostWillResignActiveNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:Foundation.NSExtensionContext.HostWillResignActiveNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = NSExtensionContext.Notifications.ObserveHostWillResignActive ((notification) => {
	Console.WriteLine ("Observed HostWillResignActiveNotification!");
};

// Listen to all notifications posted for a single object
var token = NSExtensionContext.Notifications.ObserveHostWillResignActive (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed HostWillResignActiveNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveHostWillResignActive">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSObject ObserveHostWillResignActive (MonoTouch.Foundation.NSObject objectToObserve, EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSObject ObserveHostWillResignActive(class MonoTouch.Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class MonoTouch.Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;MonoTouch.Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Strongly typed notification for the <see cref="P:Foundation.NSExtensionContext.HostWillResignActiveNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:Foundation.NSExtensionContext.HostWillResignActiveNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = NSExtensionContext.Notifications.ObserveHostWillResignActive ((notification) => {
	Console.WriteLine ("Observed HostWillResignActiveNotification!");
};

// Listen to all notifications posted for a single object
var token = NSExtensionContext.Notifications.ObserveHostWillResignActive (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed HostWillResignActiveNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>