<Type Name="ExportAttribute" FullName="Foundation.ExportAttribute">
  <TypeSignature Language="C#" Value="public class ExportAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ExportAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:Foundation.ExportAttribute" />
  <TypeSignature Language="F#" Value="type ExportAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Constructor | System.AttributeTargets.Method | System.AttributeTargets.Property)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Exports a method or property to the Objective-C world.</summary>
    <remarks>
      <para>
This attribute is applied to properties and methods in classes that derive from <see cref="T:Foundation.NSObject" /> to export the value to the Objective-C world.    This can be used either to respond to messages or to override an Objective-C method.
</para>
      <example>
        <code lang="C#"><![CDATA[
public class Test : SomeBaseClass {
    [Export ("setText:withFont:")]
    public void SetText (string text, string font)
    {
    }
}
  ]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExportAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.ExportAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Use this method to expose a C# method, property or constructor as a method that can be invoked from Objective-C.</summary>
        <remarks>Use this method to expose a C# method, property or constructor as a method that can be invoked from Objective-C.   The name is derived from the actual method or property.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ExportAttribute (string selector);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.ExportAttribute.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new Foundation.ExportAttribute : string -&gt; Foundation.ExportAttribute" Usage="new Foundation.ExportAttribute selector" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selector" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="selector">The selector name.</param>
        <summary>Exports the given method or property to Objective-C land with the specified method name.</summary>
        <remarks>Use this method to expose a C# method, property or constructor as a method that can be invoked from Objective-C.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string selector, valuetype ObjCRuntime.ArgumentSemantic semantic) cil managed" />
      <MemberSignature Language="C#" Value="public ExportAttribute (string selector, ObjCRuntime.ArgumentSemantic semantic);" />
      <MemberSignature Language="DocId" Value="M:Foundation.ExportAttribute.#ctor(System.String,ObjCRuntime.ArgumentSemantic)" />
      <MemberSignature Language="F#" Value="new Foundation.ExportAttribute : string * ObjCRuntime.ArgumentSemantic -&gt; Foundation.ExportAttribute" Usage="new Foundation.ExportAttribute (selector, semantic)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selector" Type="System.String" />
        <Parameter Name="semantic" Type="ObjCRuntime.ArgumentSemantic" />
      </Parameters>
      <Docs>
        <param name="selector">The selector name.</param>
        <param name="semantic">The semantics of the setter (Assign, Copy or Retain).</param>
        <summary>Use this method to expose a C# method, property or constructor as a method that can be invoked from Objective-C.</summary>
        <remarks>Use this method to expose a C# method, property or constructor as a method that can be invoked from Objective-C.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ArgumentSemantic">
      <MemberSignature Language="C#" Value="public ObjCRuntime.ArgumentSemantic ArgumentSemantic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ObjCRuntime.ArgumentSemantic ArgumentSemantic" />
      <MemberSignature Language="DocId" Value="P:Foundation.ExportAttribute.ArgumentSemantic" />
      <MemberSignature Language="F#" Value="member this.ArgumentSemantic : ObjCRuntime.ArgumentSemantic with get, set" Usage="Foundation.ExportAttribute.ArgumentSemantic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ObjCRuntime.ArgumentSemantic</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The semantics for object ownership on setter properties or methods.</summary>
        <value>The assignment ownership semantics for setting the value.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsVariadic">
      <MemberSignature Language="C#" Value="public bool IsVariadic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsVariadic" />
      <MemberSignature Language="DocId" Value="P:Foundation.ExportAttribute.IsVariadic" />
      <MemberSignature Language="F#" Value="member this.IsVariadic : bool with get, set" Usage="Foundation.ExportAttribute.IsVariadic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Selector">
      <MemberSignature Language="C#" Value="public string Selector { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Selector" />
      <MemberSignature Language="DocId" Value="P:Foundation.ExportAttribute.Selector" />
      <MemberSignature Language="F#" Value="member this.Selector : string with get, set" Usage="Foundation.ExportAttribute.Selector" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the C# selector if specified, or null if it is derived from the property name or method.</summary>
        <value />
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToGetter">
      <MemberSignature Language="C#" Value="public Foundation.ExportAttribute ToGetter (System.Reflection.PropertyInfo prop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.ExportAttribute ToGetter(class System.Reflection.PropertyInfo prop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.ExportAttribute.ToGetter(System.Reflection.PropertyInfo)" />
      <MemberSignature Language="F#" Value="member this.ToGetter : System.Reflection.PropertyInfo -&gt; Foundation.ExportAttribute" Usage="exportAttribute.ToGetter prop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.ExportAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prop" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="prop">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToSetter">
      <MemberSignature Language="C#" Value="public Foundation.ExportAttribute ToSetter (System.Reflection.PropertyInfo prop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.ExportAttribute ToSetter(class System.Reflection.PropertyInfo prop) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.ExportAttribute.ToSetter(System.Reflection.PropertyInfo)" />
      <MemberSignature Language="F#" Value="member this.ToSetter : System.Reflection.PropertyInfo -&gt; Foundation.ExportAttribute" Usage="exportAttribute.ToSetter prop" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.ExportAttribute</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prop" Type="System.Reflection.PropertyInfo" />
      </Parameters>
      <Docs>
        <param name="prop">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
