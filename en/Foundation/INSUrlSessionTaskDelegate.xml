<Type Name="INSUrlSessionTaskDelegate" FullName="Foundation.INSUrlSessionTaskDelegate">
  <TypeSignature Language="C#" Value="public interface INSUrlSessionTaskDelegate : Foundation.INSUrlSessionDelegate, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INSUrlSessionTaskDelegate implements class Foundation.INSUrlSessionDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Foundation.INSUrlSessionTaskDelegate" />
  <TypeSignature Language="F#" Value="type INSUrlSessionTaskDelegate = interface&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSUrlSessionDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSUrlSessionDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="NSURLSessionTaskDelegate", WrapperType=typeof(Foundation.NSUrlSessionTaskDelegateWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidSendBodyData", ParameterByRef=new System.Boolean[] { false, false, false, false, false }, ParameterType=new System.Type[] { typeof(Foundation.NSUrlSession), typeof(Foundation.NSUrlSessionTask), typeof(System.Int64), typeof(System.Int64), typeof(System.Int64) }, Selector="URLSession:task:didSendBodyData:totalBytesSent:totalBytesExpectedToSend:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidCompleteWithError", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(Foundation.NSUrlSession), typeof(Foundation.NSUrlSessionTask), typeof(Foundation.NSError) }, Selector="URLSession:task:didCompleteWithError:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidFinishCollectingMetrics", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(Foundation.NSUrlSession), typeof(Foundation.NSUrlSessionTask), typeof(Foundation.NSUrlSessionTaskMetrics) }, Selector="URLSession:task:didFinishCollectingMetrics:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="TaskIsWaitingForConnectivity", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(Foundation.NSUrlSession), typeof(Foundation.NSUrlSessionTask) }, Selector="URLSession:taskIsWaitingForConnectivity:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillPerformHttpRedirection", ParameterBlockProxy=new System.Type[] { null, null, null, null, typeof(ObjCRuntime.Trampolines/NIDActionArity1V1) }, ParameterByRef=new System.Boolean[] { false, false, false, false, false }, ParameterType=new System.Type[] { typeof(Foundation.NSUrlSession), typeof(Foundation.NSUrlSessionTask), typeof(Foundation.NSHttpUrlResponse), typeof(Foundation.NSUrlRequest), typeof(System.Action`1&lt;Foundation.NSUrlRequest&gt;) }, Selector="URLSession:task:willPerformHTTPRedirection:newRequest:completionHandler:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidReceiveChallenge", ParameterBlockProxy=new System.Type[] { null, null, null, typeof(ObjCRuntime.Trampolines/NIDActionArity2V2) }, ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(Foundation.NSUrlSession), typeof(Foundation.NSUrlSessionTask), typeof(Foundation.NSUrlAuthenticationChallenge), typeof(System.Action`2&lt;Foundation.NSUrlSessionAuthChallengeDisposition,Foundation.NSUrlCredential&gt;) }, Selector="URLSession:task:didReceiveChallenge:completionHandler:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="NeedNewBodyStream", ParameterBlockProxy=new System.Type[] { null, null, typeof(ObjCRuntime.Trampolines/NIDActionArity1V0) }, ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(Foundation.NSUrlSession), typeof(Foundation.NSUrlSessionTask), typeof(System.Action`1&lt;Foundation.NSInputStream&gt;) }, Selector="URLSession:task:needNewBodyStream:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillBeginDelayedRequest", ParameterBlockProxy=new System.Type[] { null, null, null, typeof(ObjCRuntime.Trampolines/NIDActionArity2V3) }, ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(Foundation.NSUrlSession), typeof(Foundation.NSUrlSessionTask), typeof(Foundation.NSUrlRequest), typeof(System.Action`2&lt;Foundation.NSUrlSessionDelayedRequestDisposition,Foundation.NSUrlRequest&gt;) }, Selector="URLSession:task:willBeginDelayedRequest:completionHandler:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:Foundation.NSUrlSessionTaskDelegate" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:Foundation.NSUrlSessionTaskDelegate" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:Foundation.NSUrlSessionTaskDelegate" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:Foundation.NSUrlSessionTaskDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members />
</Type>
