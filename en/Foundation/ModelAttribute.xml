<Type Name="ModelAttribute" FullName="Foundation.ModelAttribute">
  <TypeSignature Language="C#" Value="public sealed class ModelAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ModelAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:Foundation.ModelAttribute" />
  <TypeSignature Language="F#" Value="type ModelAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Interface)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Flag a class as a model.</summary>
    <remarks>
      <para>Objective-C protocols are like interfaces, but they support optional methods, that is, not all of the methods need to be implemented for the protocol to work.

There are two ways of implementing a model, you can either implement it manually or use the existing strongly typed definitions. 
</para>
      <para>
MonoTouch provides already strongly typed declarations ready to use that do not require manual binding. To support this programming model, the MonoTouch runtime supports the [Model] attribute on a class declaration. This informs the runtime that it should not wire up all the methods in the class, unless the method is explicitly implemented. 
</para>
      <para>
The Model attribute is applied to a class that can have optional methods, and it is typically used for declaring Objective-C delegates or data models that have a number of optional methods.    The MonoTouch runtime treats classes with the Model attribute applied specially: only when a user overrides methods in a class, is the actual override exposed to the Objective-C world as existing.
</para>
      <para>
This attribute is used in all of the models and delegate classes to allow the user to only implement the methods that he is interested in.
</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ModelAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.ModelAttribute.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Default constructor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoGeneratedName">
      <MemberSignature Language="C#" Value="public bool AutoGeneratedName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoGeneratedName" />
      <MemberSignature Language="DocId" Value="P:Foundation.ModelAttribute.AutoGeneratedName" />
      <MemberSignature Language="F#" Value="member this.AutoGeneratedName : bool with get, set" Usage="Foundation.ModelAttribute.AutoGeneratedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies if the Objective-C type name for the model should be automatically generated (and unique).</summary>
        <value>If the Objective-C type name for the model should be automatically generated.</value>
        <remarks>
          <para>The generated name is currently based on the assembly name and full type name of the model, but this may change in the future (for instance to ensure uniqueness).</para>
          <para>This value is only taken into account when used in binding code / projects.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:Foundation.ModelAttribute.Name" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="Foundation.ModelAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies if the Objective-C type name for the model.</summary>
        <value>The Objective-C type name for the model.</value>
        <remarks>
          <para>This value is only taken into account when used in binding code / projects.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
