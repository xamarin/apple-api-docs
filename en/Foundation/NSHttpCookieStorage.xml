<Type Name="NSHttpCookieStorage" FullName="Foundation.NSHttpCookieStorage">
  <TypeSignature Language="C#" Value="public class NSHttpCookieStorage : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSHttpCookieStorage extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSHttpCookieStorage" />
  <TypeSignature Language="F#" Value="type NSHttpCookieStorage = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSHTTPCookieStorage", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A singleton object that manages a collection of <see cref="T:Foundation.NSHttpCookie" />s.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSHTTPCookieStorage_Class/index.html">Apple documentation for <c>NSHTTPCookieStorage</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSHttpCookieStorage (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSHttpCookieStorage : Foundation.NSObjectFlag -&gt; Foundation.NSHttpCookieStorage" Usage="new Foundation.NSHttpCookieStorage t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSHttpCookieStorage (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSHttpCookieStorage : nativeint -&gt; Foundation.NSHttpCookieStorage" Usage="new Foundation.NSHttpCookieStorage handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptPolicy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSHttpCookieAcceptPolicy AcceptPolicy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSHttpCookieAcceptPolicy AcceptPolicy" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSHttpCookieStorage.AcceptPolicy" />
      <MemberSignature Language="F#" Value="member this.AcceptPolicy : Foundation.NSHttpCookieAcceptPolicy with get, set" Usage="Foundation.NSHttpCookieStorage.AcceptPolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("cookieAcceptPolicy")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setCookieAcceptPolicy:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSHttpCookieAcceptPolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptPolicyChangedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString AcceptPolicyChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString AcceptPolicyChangedNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSHttpCookieStorage.AcceptPolicyChangedNotification" />
      <MemberSignature Language="F#" Value="member this.AcceptPolicyChangedNotification : Foundation.NSString" Usage="Foundation.NSHttpCookieStorage.AcceptPolicyChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSHttpCookieStorage.Notifications.ObserveAcceptPolicyChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSHTTPCookieManagerCookiesChangedNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for AcceptPolicyChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSHttpCookieStorage.AcceptPolicyChangedNotification, (notification) => {Console.WriteLine ("Received the notification NSHttpCookieStorage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSHttpCookieStorage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSHttpCookieStorage.AcceptPolicyChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSHttpCookieStorage.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSHttpCookieStorage.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cookies">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSHttpCookie[] Cookies { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSHttpCookie[] Cookies" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSHttpCookieStorage.Cookies" />
      <MemberSignature Language="F#" Value="member this.Cookies : Foundation.NSHttpCookie[]" Usage="Foundation.NSHttpCookieStorage.Cookies" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("cookies")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSHttpCookie[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiesChangedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString CookiesChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString CookiesChangedNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSHttpCookieStorage.CookiesChangedNotification" />
      <MemberSignature Language="F#" Value="member this.CookiesChangedNotification : Foundation.NSString" Usage="Foundation.NSHttpCookieStorage.CookiesChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSHttpCookieStorage.Notifications.ObserveCookiesChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSHTTPCookieManagerAcceptPolicyChangedNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for CookiesChanged</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSHttpCookieStorage.CookiesChangedNotification, (notification) => {Console.WriteLine ("Received the notification NSHttpCookieStorage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSHttpCookieStorage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSHttpCookieStorage.CookiesChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CookiesForUrl">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSHttpCookie[] CookiesForUrl (Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSHttpCookie[] CookiesForUrl(class Foundation.NSUrl url) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.CookiesForUrl(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member CookiesForUrl : Foundation.NSUrl -&gt; Foundation.NSHttpCookie[]&#xA;override this.CookiesForUrl : Foundation.NSUrl -&gt; Foundation.NSHttpCookie[]" Usage="nSHttpCookieStorage.CookiesForUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("cookiesForURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSHttpCookie[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCookie">
      <MemberSignature Language="C#" Value="public virtual void DeleteCookie (Foundation.NSHttpCookie cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteCookie(class Foundation.NSHttpCookie cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.DeleteCookie(Foundation.NSHttpCookie)" />
      <MemberSignature Language="F#" Value="abstract member DeleteCookie : Foundation.NSHttpCookie -&gt; unit&#xA;override this.DeleteCookie : Foundation.NSHttpCookie -&gt; unit" Usage="nSHttpCookieStorage.DeleteCookie cookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("deleteCookie:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="Foundation.NSHttpCookie" />
      </Parameters>
      <Docs>
        <param name="cookie">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCookiesForTask">
      <MemberSignature Language="C#" Value="public virtual void GetCookiesForTask (Foundation.NSUrlSessionTask task, Action&lt;Foundation.NSHttpCookie[]&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetCookiesForTask(class Foundation.NSUrlSessionTask task, class System.Action`1&lt;class Foundation.NSHttpCookie[]&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.GetCookiesForTask(Foundation.NSUrlSessionTask,System.Action{Foundation.NSHttpCookie[]})" />
      <MemberSignature Language="F#" Value="abstract member GetCookiesForTask : Foundation.NSUrlSessionTask * Action&lt;Foundation.NSHttpCookie[]&gt; -&gt; unit&#xA;override this.GetCookiesForTask : Foundation.NSUrlSessionTask * Action&lt;Foundation.NSHttpCookie[]&gt; -&gt; unit" Usage="nSHttpCookieStorage.GetCookiesForTask (task, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("getCookiesForTask:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSHttpCookie[]&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V26))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCookiesForTaskAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSHttpCookie[]&gt; GetCookiesForTaskAsync (Foundation.NSUrlSessionTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSHttpCookie[]&gt; GetCookiesForTaskAsync(class Foundation.NSUrlSessionTask task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.GetCookiesForTaskAsync(Foundation.NSUrlSessionTask)" />
      <MemberSignature Language="F#" Value="abstract member GetCookiesForTaskAsync : Foundation.NSUrlSessionTask -&gt; System.Threading.Tasks.Task&lt;Foundation.NSHttpCookie[]&gt;&#xA;override this.GetCookiesForTaskAsync : Foundation.NSUrlSessionTask -&gt; System.Threading.Tasks.Task&lt;Foundation.NSHttpCookie[]&gt;" Usage="nSHttpCookieStorage.GetCookiesForTaskAsync task" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSHttpCookie[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
      </Parameters>
      <Docs>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous GetCookiesForTask operation.  The value of the TResult parameter is of type System.Action&lt;Foundation.NSHttpCookie[]&gt;.</para>
        </returns>
        <remarks>
          <para copied="true">The GetCookiesForTaskAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSharedCookieStorage">
      <MemberSignature Language="C#" Value="public static Foundation.NSHttpCookieStorage GetSharedCookieStorage (string groupContainerIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSHttpCookieStorage GetSharedCookieStorage(string groupContainerIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.GetSharedCookieStorage(System.String)" />
      <MemberSignature Language="F#" Value="static member GetSharedCookieStorage : string -&gt; Foundation.NSHttpCookieStorage" Usage="Foundation.NSHttpCookieStorage.GetSharedCookieStorage groupContainerIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("sharedCookieStorageForGroupContainerIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSHttpCookieStorage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupContainerIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupContainerIdentifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSortedCookies">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSHttpCookie[] GetSortedCookies (Foundation.NSSortDescriptor[] sortDescriptors);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSHttpCookie[] GetSortedCookies(class Foundation.NSSortDescriptor[] sortDescriptors) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.GetSortedCookies(Foundation.NSSortDescriptor[])" />
      <MemberSignature Language="F#" Value="abstract member GetSortedCookies : Foundation.NSSortDescriptor[] -&gt; Foundation.NSHttpCookie[]&#xA;override this.GetSortedCookies : Foundation.NSSortDescriptor[] -&gt; Foundation.NSHttpCookie[]" Usage="nSHttpCookieStorage.GetSortedCookies sortDescriptors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("sortedCookiesUsingDescriptors:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSHttpCookie[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortDescriptors" Type="Foundation.NSSortDescriptor[]" />
      </Parameters>
      <Docs>
        <param name="sortDescriptors">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCookiesSinceDate">
      <MemberSignature Language="C#" Value="public virtual void RemoveCookiesSinceDate (Foundation.NSDate date);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCookiesSinceDate(class Foundation.NSDate date) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.RemoveCookiesSinceDate(Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member RemoveCookiesSinceDate : Foundation.NSDate -&gt; unit&#xA;override this.RemoveCookiesSinceDate : Foundation.NSDate -&gt; unit" Usage="nSHttpCookieStorage.RemoveCookiesSinceDate date" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeCookiesSinceDate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="date" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="date">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCookie">
      <MemberSignature Language="C#" Value="public virtual void SetCookie (Foundation.NSHttpCookie cookie);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCookie(class Foundation.NSHttpCookie cookie) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.SetCookie(Foundation.NSHttpCookie)" />
      <MemberSignature Language="F#" Value="abstract member SetCookie : Foundation.NSHttpCookie -&gt; unit&#xA;override this.SetCookie : Foundation.NSHttpCookie -&gt; unit" Usage="nSHttpCookieStorage.SetCookie cookie" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setCookie:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookie" Type="Foundation.NSHttpCookie" />
      </Parameters>
      <Docs>
        <param name="cookie">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCookies">
      <MemberSignature Language="C#" Value="public virtual void SetCookies (Foundation.NSHttpCookie[] cookies, Foundation.NSUrl forUrl, Foundation.NSUrl mainDocumentUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCookies(class Foundation.NSHttpCookie[] cookies, class Foundation.NSUrl forUrl, class Foundation.NSUrl mainDocumentUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.SetCookies(Foundation.NSHttpCookie[],Foundation.NSUrl,Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member SetCookies : Foundation.NSHttpCookie[] * Foundation.NSUrl * Foundation.NSUrl -&gt; unit&#xA;override this.SetCookies : Foundation.NSHttpCookie[] * Foundation.NSUrl * Foundation.NSUrl -&gt; unit" Usage="nSHttpCookieStorage.SetCookies (cookies, forUrl, mainDocumentUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setCookies:forURL:mainDocumentURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookies" Type="Foundation.NSHttpCookie[]" />
        <Parameter Name="forUrl" Type="Foundation.NSUrl" />
        <Parameter Name="mainDocumentUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="cookies">To be added.</param>
        <param name="forUrl">To be added.</param>
        <param name="mainDocumentUrl">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedStorage">
      <MemberSignature Language="C#" Value="public static Foundation.NSHttpCookieStorage SharedStorage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSHttpCookieStorage SharedStorage" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSHttpCookieStorage.SharedStorage" />
      <MemberSignature Language="F#" Value="member this.SharedStorage : Foundation.NSHttpCookieStorage" Usage="Foundation.NSHttpCookieStorage.SharedStorage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("sharedHTTPCookieStorage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("sharedHTTPCookieStorage", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSHttpCookieStorage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StoreCookies">
      <MemberSignature Language="C#" Value="public virtual void StoreCookies (Foundation.NSHttpCookie[] cookies, Foundation.NSUrlSessionTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StoreCookies(class Foundation.NSHttpCookie[] cookies, class Foundation.NSUrlSessionTask task) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSHttpCookieStorage.StoreCookies(Foundation.NSHttpCookie[],Foundation.NSUrlSessionTask)" />
      <MemberSignature Language="F#" Value="abstract member StoreCookies : Foundation.NSHttpCookie[] * Foundation.NSUrlSessionTask -&gt; unit&#xA;override this.StoreCookies : Foundation.NSHttpCookie[] * Foundation.NSUrlSessionTask -&gt; unit" Usage="nSHttpCookieStorage.StoreCookies (cookies, task)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("storeCookies:forTask:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cookies" Type="Foundation.NSHttpCookie[]" />
        <Parameter Name="task" Type="Foundation.NSUrlSessionTask" />
      </Parameters>
      <Docs>
        <param name="cookies">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
