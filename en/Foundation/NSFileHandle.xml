<Type Name="NSFileHandle" FullName="Foundation.NSFileHandle">
  <TypeSignature Language="C#" Value="public class NSFileHandle : Foundation.NSObject, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSFileHandle extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSFileHandle" />
  <TypeSignature Language="F#" Value="type NSFileHandle = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSFileHandle", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Encapsulates a file descriptor.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSFileHandle_Class/index.html">Apple documentation for <c>NSFileHandle</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileHandle (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new Foundation.NSFileHandle : Foundation.NSCoder -&gt; Foundation.NSFileHandle" Usage="new Foundation.NSFileHandle coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSFileHandle (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSFileHandle : Foundation.NSObjectFlag -&gt; Foundation.NSFileHandle" Usage="new Foundation.NSFileHandle t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileHandle (int fd);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 fd) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.#ctor(System.Int32)" />
      <MemberSignature Language="F#" Value="new Foundation.NSFileHandle : int -&gt; Foundation.NSFileHandle" Usage="new Foundation.NSFileHandle fd" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithFileDescriptor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fd" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSFileHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSFileHandle : nativeint -&gt; Foundation.NSFileHandle" Usage="new Foundation.NSFileHandle handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileHandle (int fd, bool closeOnDealloc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 fd, bool closeOnDealloc) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.#ctor(System.Int32,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Foundation.NSFileHandle : int * bool -&gt; Foundation.NSFileHandle" Usage="new Foundation.NSFileHandle (fd, closeOnDealloc)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithFileDescriptor:closeOnDealloc:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="fd" Type="System.Int32" />
        <Parameter Name="closeOnDealloc" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="fd">To be added.</param>
        <param name="closeOnDealloc">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptConnectionInBackground">
      <MemberSignature Language="C#" Value="public virtual void AcceptConnectionInBackground ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AcceptConnectionInBackground() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.AcceptConnectionInBackground" />
      <MemberSignature Language="F#" Value="abstract member AcceptConnectionInBackground : unit -&gt; unit&#xA;override this.AcceptConnectionInBackground : unit -&gt; unit" Usage="nSFileHandle.AcceptConnectionInBackground " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("acceptConnectionInBackgroundAndNotify")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Accepts a socket connection (for stream-type sockets only) in the background.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptConnectionInBackground">
      <MemberSignature Language="C#" Value="public void AcceptConnectionInBackground (Foundation.NSRunLoopMode[] notifyRunLoopModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptConnectionInBackground(valuetype Foundation.NSRunLoopMode[] notifyRunLoopModes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.AcceptConnectionInBackground(Foundation.NSRunLoopMode[])" />
      <MemberSignature Language="F#" Value="member this.AcceptConnectionInBackground : Foundation.NSRunLoopMode[] -&gt; unit" Usage="nSFileHandle.AcceptConnectionInBackground notifyRunLoopModes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyRunLoopModes" Type="Foundation.NSRunLoopMode[]" />
      </Parameters>
      <Docs>
        <param name="notifyRunLoopModes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptConnectionInBackground">
      <MemberSignature Language="C#" Value="public virtual void AcceptConnectionInBackground (Foundation.NSString[] notifyRunLoopModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AcceptConnectionInBackground(class Foundation.NSString[] notifyRunLoopModes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.AcceptConnectionInBackground(Foundation.NSString[])" />
      <MemberSignature Language="F#" Value="abstract member AcceptConnectionInBackground : Foundation.NSString[] -&gt; unit&#xA;override this.AcceptConnectionInBackground : Foundation.NSString[] -&gt; unit" Usage="nSFileHandle.AcceptConnectionInBackground notifyRunLoopModes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("acceptConnectionInBackgroundAndNotifyForModes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyRunLoopModes" Type="Foundation.NSString[]" />
      </Parameters>
      <Docs>
        <param name="notifyRunLoopModes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AvailableData">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData AvailableData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData AvailableData() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.AvailableData" />
      <MemberSignature Language="F#" Value="abstract member AvailableData : unit -&gt; Foundation.NSData&#xA;override this.AvailableData : unit -&gt; Foundation.NSData" Usage="nSFileHandle.AvailableData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("availableData")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSFileHandle.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSFileHandle.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CloseFile">
      <MemberSignature Language="C#" Value="public virtual void CloseFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CloseFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.CloseFile" />
      <MemberSignature Language="F#" Value="abstract member CloseFile : unit -&gt; unit&#xA;override this.CloseFile : unit -&gt; unit" Usage="nSFileHandle.CloseFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("closeFile")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Signals end of file on comm channels that permit writing and disallows further access to the represented file or comm channel.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectionAcceptedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ConnectionAcceptedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ConnectionAcceptedNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSFileHandle.ConnectionAcceptedNotification" />
      <MemberSignature Language="F#" Value="member this.ConnectionAcceptedNotification : Foundation.NSString" Usage="Foundation.NSFileHandle.ConnectionAcceptedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSFileHandle.Notifications.ObserveConnectionAccepted helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSFileHandleConnectionAcceptedNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ConnectionAccepted</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="T:Foundation.NSFileHandle.Notifications" />.<see cref="M:Foundation.NSFileHandle.Notifications.ObserveConnectionAccepted*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSFileHandle.Notifications.ObserveConnectionAccepted ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("NearSocketConnection", args.NearSocketConnection);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSFileHandleConnectionAcceptedEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("NearSocketConnection", args.NearSocketConnection);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
}

void Setup ()
{
    notification = NSFileHandle.Notifications.ObserveConnectionAccepted (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSFileHandle.ConnectionAcceptedNotification, (notification) => {Console.WriteLine ("Received the notification NSFileHandle", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSFileHandle", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSFileHandle.ConnectionAcceptedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataAvailableNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DataAvailableNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DataAvailableNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSFileHandle.DataAvailableNotification" />
      <MemberSignature Language="F#" Value="member this.DataAvailableNotification : Foundation.NSString" Usage="Foundation.NSFileHandle.DataAvailableNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSFileHandle.Notifications.ObserveDataAvailable helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSFileHandleDataAvailableNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DataAvailable</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:Foundation.NSFileHandle.Notifications" />.<see cref="M:Foundation.NSFileHandle.Notifications.ObserveDataAvailable*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSFileHandle.Notifications.ObserveDataAvailable ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = NSFileHandle.Notifications.ObserveDataAvailable (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSFileHandle.DataAvailableNotification, (notification) => {Console.WriteLine ("Received the notification NSFileHandle", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSFileHandle", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSFileHandle.DataAvailableNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="nSFileHandle.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileDescriptor">
      <MemberSignature Language="C#" Value="public virtual int FileDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FileDescriptor" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSFileHandle.FileDescriptor" />
      <MemberSignature Language="F#" Value="member this.FileDescriptor : int" Usage="Foundation.NSFileHandle.FileDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("fileDescriptor")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The file descriptor of this NSFileHandle.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNullDevice">
      <MemberSignature Language="C#" Value="public static Foundation.NSFileHandle FromNullDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSFileHandle FromNullDevice() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.FromNullDevice" />
      <MemberSignature Language="F#" Value="static member FromNullDevice : unit -&gt; Foundation.NSFileHandle" Usage="Foundation.NSFileHandle.FromNullDevice " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileHandleWithNullDevice")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromStandardError">
      <MemberSignature Language="C#" Value="public static Foundation.NSFileHandle FromStandardError ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSFileHandle FromStandardError() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.FromStandardError" />
      <MemberSignature Language="F#" Value="static member FromStandardError : unit -&gt; Foundation.NSFileHandle" Usage="Foundation.NSFileHandle.FromStandardError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileHandleWithStandardError")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromStandardInput">
      <MemberSignature Language="C#" Value="public static Foundation.NSFileHandle FromStandardInput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSFileHandle FromStandardInput() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.FromStandardInput" />
      <MemberSignature Language="F#" Value="static member FromStandardInput : unit -&gt; Foundation.NSFileHandle" Usage="Foundation.NSFileHandle.FromStandardInput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileHandleWithStandardInput")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromStandardOutput">
      <MemberSignature Language="C#" Value="public static Foundation.NSFileHandle FromStandardOutput ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSFileHandle FromStandardOutput() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.FromStandardOutput" />
      <MemberSignature Language="F#" Value="static member FromStandardOutput : unit -&gt; Foundation.NSFileHandle" Usage="Foundation.NSFileHandle.FromStandardOutput " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileHandleWithStandardOutput")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileHandle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetInFile">
      <MemberSignature Language="C#" Value="public virtual ulong OffsetInFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int64 OffsetInFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.OffsetInFile" />
      <MemberSignature Language="F#" Value="abstract member OffsetInFile : unit -&gt; uint64&#xA;override this.OffsetInFile : unit -&gt; uint64" Usage="nSFileHandle.OffsetInFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("offsetInFile")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The position of the file pointer within the file represented by this NSFileHandle.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenRead">
      <MemberSignature Language="C#" Value="public static Foundation.NSFileHandle OpenRead (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSFileHandle OpenRead(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.OpenRead(System.String)" />
      <MemberSignature Language="F#" Value="static member OpenRead : string -&gt; Foundation.NSFileHandle" Usage="Foundation.NSFileHandle.OpenRead path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileHandleForReadingAtPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>Static factory method to create an NSFileHandle for reading the file at the specified path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenReadUrl">
      <MemberSignature Language="C#" Value="public static Foundation.NSFileHandle OpenReadUrl (Foundation.NSUrl url, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSFileHandle OpenReadUrl(class Foundation.NSUrl url, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.OpenReadUrl(Foundation.NSUrl,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member OpenReadUrl : Foundation.NSUrl *  -&gt; Foundation.NSFileHandle" Usage="Foundation.NSFileHandle.OpenReadUrl (url, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileHandleForReadingFromURL:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Static factory method to create an NSFileHandle for reading the specified URL. Check error for failure.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenUpdate">
      <MemberSignature Language="C#" Value="public static Foundation.NSFileHandle OpenUpdate (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSFileHandle OpenUpdate(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.OpenUpdate(System.String)" />
      <MemberSignature Language="F#" Value="static member OpenUpdate : string -&gt; Foundation.NSFileHandle" Usage="Foundation.NSFileHandle.OpenUpdate path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileHandleForUpdatingAtPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>Static factory method to create an NSFileHandle for updating the file at the specified path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenUpdateUrl">
      <MemberSignature Language="C#" Value="public static Foundation.NSFileHandle OpenUpdateUrl (Foundation.NSUrl url, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSFileHandle OpenUpdateUrl(class Foundation.NSUrl url, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.OpenUpdateUrl(Foundation.NSUrl,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member OpenUpdateUrl : Foundation.NSUrl *  -&gt; Foundation.NSFileHandle" Usage="Foundation.NSFileHandle.OpenUpdateUrl (url, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileHandleForUpdatingURL:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Static factory method to create an NSFileHandle for updating the file at the specified URL. Check error for failure.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWrite">
      <MemberSignature Language="C#" Value="public static Foundation.NSFileHandle OpenWrite (string path);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSFileHandle OpenWrite(string path) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.OpenWrite(System.String)" />
      <MemberSignature Language="F#" Value="static member OpenWrite : string -&gt; Foundation.NSFileHandle" Usage="Foundation.NSFileHandle.OpenWrite path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileHandleForWritingAtPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="path">To be added.</param>
        <summary>Static factory method to create an NSFileHandle for writing a file at the specified path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenWriteUrl">
      <MemberSignature Language="C#" Value="public static Foundation.NSFileHandle OpenWriteUrl (Foundation.NSUrl url, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSFileHandle OpenWriteUrl(class Foundation.NSUrl url, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.OpenWriteUrl(Foundation.NSUrl,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member OpenWriteUrl : Foundation.NSUrl *  -&gt; Foundation.NSFileHandle" Usage="Foundation.NSFileHandle.OpenWriteUrl (url, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileHandleForWritingToURL:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileHandle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Static factory method to create an NSFileHandle for writing a file at the specified URL. Check error for failure.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OperationException">
      <MemberSignature Language="C#" Value="public static Foundation.NSString OperationException { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString OperationException" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSFileHandle.OperationException" />
      <MemberSignature Language="F#" Value="member this.OperationException : Foundation.NSString" Usage="Foundation.NSFileHandle.OperationException" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSFileHandleOperationException", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant NSFileHandleOperationException</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadCompletionNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ReadCompletionNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ReadCompletionNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSFileHandle.ReadCompletionNotification" />
      <MemberSignature Language="F#" Value="member this.ReadCompletionNotification : Foundation.NSString" Usage="Foundation.NSFileHandle.ReadCompletionNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSFileHandle.Notifications.ObserveReadCompletion helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSFileHandleReadCompletionNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ReadCompletion</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="T:Foundation.NSFileHandle.Notifications" />.<see cref="M:Foundation.NSFileHandle.Notifications.ObserveReadCompletion*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSFileHandle.Notifications.ObserveReadCompletion ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AvailableData", args.AvailableData);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSFileHandleReadEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AvailableData", args.AvailableData);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
}

void Setup ()
{
    notification = NSFileHandle.Notifications.ObserveReadCompletion (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSFileHandle.ReadCompletionNotification, (notification) => {Console.WriteLine ("Received the notification NSFileHandle", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSFileHandle", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSFileHandle.ReadCompletionNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadDataOfLength">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData ReadDataOfLength (nuint length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData ReadDataOfLength(valuetype System.nuint length) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.ReadDataOfLength(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member ReadDataOfLength : nuint -&gt; Foundation.NSData&#xA;override this.ReadDataOfLength : nuint -&gt; Foundation.NSData" Usage="nSFileHandle.ReadDataOfLength length" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("readDataOfLength:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="length">To be added.</param>
        <summary>Reads a block of data of the specified length from the file represented by this NSFileHandle.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadDataToEndOfFile">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData ReadDataToEndOfFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData ReadDataToEndOfFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.ReadDataToEndOfFile" />
      <MemberSignature Language="F#" Value="abstract member ReadDataToEndOfFile : unit -&gt; Foundation.NSData&#xA;override this.ReadDataToEndOfFile : unit -&gt; Foundation.NSData" Usage="nSFileHandle.ReadDataToEndOfFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("readDataToEndOfFile")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Synchronously reads the available data up to EOF or maximum number of bytes.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInBackground">
      <MemberSignature Language="C#" Value="public virtual void ReadInBackground ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadInBackground() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.ReadInBackground" />
      <MemberSignature Language="F#" Value="abstract member ReadInBackground : unit -&gt; unit&#xA;override this.ReadInBackground : unit -&gt; unit" Usage="nSFileHandle.ReadInBackground " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("readInBackgroundAndNotify")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInBackground">
      <MemberSignature Language="C#" Value="public void ReadInBackground (Foundation.NSRunLoopMode[] notifyRunLoopModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadInBackground(valuetype Foundation.NSRunLoopMode[] notifyRunLoopModes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.ReadInBackground(Foundation.NSRunLoopMode[])" />
      <MemberSignature Language="F#" Value="member this.ReadInBackground : Foundation.NSRunLoopMode[] -&gt; unit" Usage="nSFileHandle.ReadInBackground notifyRunLoopModes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyRunLoopModes" Type="Foundation.NSRunLoopMode[]" />
      </Parameters>
      <Docs>
        <param name="notifyRunLoopModes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadInBackground">
      <MemberSignature Language="C#" Value="public virtual void ReadInBackground (Foundation.NSString[] notifyRunLoopModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadInBackground(class Foundation.NSString[] notifyRunLoopModes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.ReadInBackground(Foundation.NSString[])" />
      <MemberSignature Language="F#" Value="abstract member ReadInBackground : Foundation.NSString[] -&gt; unit&#xA;override this.ReadInBackground : Foundation.NSString[] -&gt; unit" Usage="nSFileHandle.ReadInBackground notifyRunLoopModes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("readInBackgroundAndNotifyForModes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyRunLoopModes" Type="Foundation.NSString[]" />
      </Parameters>
      <Docs>
        <param name="notifyRunLoopModes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToEndOfFileCompletionNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ReadToEndOfFileCompletionNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ReadToEndOfFileCompletionNotification" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSFileHandle.ReadToEndOfFileCompletionNotification" />
      <MemberSignature Language="F#" Value="member this.ReadToEndOfFileCompletionNotification : Foundation.NSString" Usage="Foundation.NSFileHandle.ReadToEndOfFileCompletionNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use NSFileHandle.Notifications.ObserveReadToEndOfFileCompletion helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSFileHandleReadToEndOfFileCompletionNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ReadToEndOfFileCompletion</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="T:Foundation.NSFileHandle.Notifications" />.<see cref="M:Foundation.NSFileHandle.Notifications.ObserveReadToEndOfFileCompletion*" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSFileHandle.Notifications.ObserveReadToEndOfFileCompletion ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AvailableData", args.AvailableData);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSFileHandleReadEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("AvailableData", args.AvailableData);
    Console.WriteLine ("UnixErrorCode", args.UnixErrorCode);
}

void Setup ()
{
    notification = NSFileHandle.Notifications.ObserveReadToEndOfFileCompletion (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSFileHandle.ReadToEndOfFileCompletionNotification, (notification) => {Console.WriteLine ("Received the notification NSFileHandle", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSFileHandle", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSFileHandle.ReadToEndOfFileCompletionNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToEndOfFileInBackground">
      <MemberSignature Language="C#" Value="public virtual void ReadToEndOfFileInBackground ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadToEndOfFileInBackground() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.ReadToEndOfFileInBackground" />
      <MemberSignature Language="F#" Value="abstract member ReadToEndOfFileInBackground : unit -&gt; unit&#xA;override this.ReadToEndOfFileInBackground : unit -&gt; unit" Usage="nSFileHandle.ReadToEndOfFileInBackground " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("readToEndOfFileInBackgroundAndNotify")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToEndOfFileInBackground">
      <MemberSignature Language="C#" Value="public void ReadToEndOfFileInBackground (Foundation.NSRunLoopMode[] notifyRunLoopModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadToEndOfFileInBackground(valuetype Foundation.NSRunLoopMode[] notifyRunLoopModes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.ReadToEndOfFileInBackground(Foundation.NSRunLoopMode[])" />
      <MemberSignature Language="F#" Value="member this.ReadToEndOfFileInBackground : Foundation.NSRunLoopMode[] -&gt; unit" Usage="nSFileHandle.ReadToEndOfFileInBackground notifyRunLoopModes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyRunLoopModes" Type="Foundation.NSRunLoopMode[]" />
      </Parameters>
      <Docs>
        <param name="notifyRunLoopModes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadToEndOfFileInBackground">
      <MemberSignature Language="C#" Value="public virtual void ReadToEndOfFileInBackground (Foundation.NSString[] notifyRunLoopModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReadToEndOfFileInBackground(class Foundation.NSString[] notifyRunLoopModes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.ReadToEndOfFileInBackground(Foundation.NSString[])" />
      <MemberSignature Language="F#" Value="abstract member ReadToEndOfFileInBackground : Foundation.NSString[] -&gt; unit&#xA;override this.ReadToEndOfFileInBackground : Foundation.NSString[] -&gt; unit" Usage="nSFileHandle.ReadToEndOfFileInBackground notifyRunLoopModes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("readToEndOfFileInBackgroundAndNotifyForModes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyRunLoopModes" Type="Foundation.NSString[]" />
      </Parameters>
      <Docs>
        <param name="notifyRunLoopModes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekToEndOfFile">
      <MemberSignature Language="C#" Value="public virtual ulong SeekToEndOfFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int64 SeekToEndOfFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.SeekToEndOfFile" />
      <MemberSignature Language="F#" Value="abstract member SeekToEndOfFile : unit -&gt; uint64&#xA;override this.SeekToEndOfFile : unit -&gt; uint64" Usage="nSFileHandle.SeekToEndOfFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("seekToEndOfFile")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt64</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Puts the file pointer at the EOF of the file represented by this NSFileHandle. Returns the new file offset.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekToFileOffset">
      <MemberSignature Language="C#" Value="public virtual void SeekToFileOffset (ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SeekToFileOffset(unsigned int64 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.SeekToFileOffset(System.UInt64)" />
      <MemberSignature Language="F#" Value="abstract member SeekToFileOffset : uint64 -&gt; unit&#xA;override this.SeekToFileOffset : uint64 -&gt; unit" Usage="nSFileHandle.SeekToFileOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("seekToFileOffset:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="offset">To be added.</param>
        <summary>Moves the file pointer to the specified offset.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetReadabilityHandler">
      <MemberSignature Language="C#" Value="public virtual void SetReadabilityHandler (Action&lt;Foundation.NSFileHandle&gt; readCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetReadabilityHandler(class System.Action`1&lt;class Foundation.NSFileHandle&gt; readCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.SetReadabilityHandler(System.Action{Foundation.NSFileHandle})" />
      <MemberSignature Language="F#" Value="abstract member SetReadabilityHandler : Action&lt;Foundation.NSFileHandle&gt; -&gt; unit&#xA;override this.SetReadabilityHandler : Action&lt;Foundation.NSFileHandle&gt; -&gt; unit" Usage="nSFileHandle.SetReadabilityHandler readCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setReadabilityHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readCallback" Type="System.Action&lt;Foundation.NSFileHandle&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="readCallback">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWriteabilityHandle">
      <MemberSignature Language="C#" Value="public virtual void SetWriteabilityHandle (Action&lt;Foundation.NSFileHandle&gt; writeCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWriteabilityHandle(class System.Action`1&lt;class Foundation.NSFileHandle&gt; writeCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.SetWriteabilityHandle(System.Action{Foundation.NSFileHandle})" />
      <MemberSignature Language="F#" Value="abstract member SetWriteabilityHandle : Action&lt;Foundation.NSFileHandle&gt; -&gt; unit&#xA;override this.SetWriteabilityHandle : Action&lt;Foundation.NSFileHandle&gt; -&gt; unit" Usage="nSFileHandle.SetWriteabilityHandle writeCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setWriteabilityHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writeCallback" Type="System.Action&lt;Foundation.NSFileHandle&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="writeCallback">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SynchronizeFile">
      <MemberSignature Language="C#" Value="public virtual void SynchronizeFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SynchronizeFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.SynchronizeFile" />
      <MemberSignature Language="F#" Value="abstract member SynchronizeFile : unit -&gt; unit&#xA;override this.SynchronizeFile : unit -&gt; unit" Usage="nSFileHandle.SynchronizeFile " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("synchronizeFile")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Writes all in-memory data and attributes of the file represented by this NSFileHandle to disk.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TruncateFileAtOffset">
      <MemberSignature Language="C#" Value="public virtual void TruncateFileAtOffset (ulong offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TruncateFileAtOffset(unsigned int64 offset) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.TruncateFileAtOffset(System.UInt64)" />
      <MemberSignature Language="F#" Value="abstract member TruncateFileAtOffset : uint64 -&gt; unit&#xA;override this.TruncateFileAtOffset : uint64 -&gt; unit" Usage="nSFileHandle.TruncateFileAtOffset offset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("truncateFileAtOffset:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="System.UInt64" />
      </Parameters>
      <Docs>
        <param name="offset">To be added.</param>
        <summary>Truncates the file represented by this NSFileHandle at the specified offset.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForDataInBackground">
      <MemberSignature Language="C#" Value="public virtual void WaitForDataInBackground ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WaitForDataInBackground() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.WaitForDataInBackground" />
      <MemberSignature Language="F#" Value="abstract member WaitForDataInBackground : unit -&gt; unit&#xA;override this.WaitForDataInBackground : unit -&gt; unit" Usage="nSFileHandle.WaitForDataInBackground " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("waitForDataInBackgroundAndNotify")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForDataInBackground">
      <MemberSignature Language="C#" Value="public void WaitForDataInBackground (Foundation.NSRunLoopMode[] notifyRunLoopModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WaitForDataInBackground(valuetype Foundation.NSRunLoopMode[] notifyRunLoopModes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.WaitForDataInBackground(Foundation.NSRunLoopMode[])" />
      <MemberSignature Language="F#" Value="member this.WaitForDataInBackground : Foundation.NSRunLoopMode[] -&gt; unit" Usage="nSFileHandle.WaitForDataInBackground notifyRunLoopModes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyRunLoopModes" Type="Foundation.NSRunLoopMode[]" />
      </Parameters>
      <Docs>
        <param name="notifyRunLoopModes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WaitForDataInBackground">
      <MemberSignature Language="C#" Value="public virtual void WaitForDataInBackground (Foundation.NSString[] notifyRunLoopModes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WaitForDataInBackground(class Foundation.NSString[] notifyRunLoopModes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.WaitForDataInBackground(Foundation.NSString[])" />
      <MemberSignature Language="F#" Value="abstract member WaitForDataInBackground : Foundation.NSString[] -&gt; unit&#xA;override this.WaitForDataInBackground : Foundation.NSString[] -&gt; unit" Usage="nSFileHandle.WaitForDataInBackground notifyRunLoopModes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("waitForDataInBackgroundAndNotifyForModes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notifyRunLoopModes" Type="Foundation.NSString[]" />
      </Parameters>
      <Docs>
        <param name="notifyRunLoopModes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteData">
      <MemberSignature Language="C#" Value="public virtual void WriteData (Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteData(class Foundation.NSData data) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSFileHandle.WriteData(Foundation.NSData)" />
      <MemberSignature Language="F#" Value="abstract member WriteData : Foundation.NSData -&gt; unit&#xA;override this.WriteData : Foundation.NSData -&gt; unit" Usage="nSFileHandle.WriteData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("writeData:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <summary>Writes the specified data to the file represented by this NSFileHandle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
