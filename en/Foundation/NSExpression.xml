<Type Name="NSExpression" FullName="Foundation.NSExpression">
  <TypeSignature Language="C#" Value="public class NSExpression : Foundation.NSObject, Foundation.INSCopying, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSExpression extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSExpression" />
  <TypeSignature Language="F#" Value="type NSExpression = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSCopying&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSExpression", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Encapsulates an expression to be used with a <see cref="T:Foundation.NSComparisonPredicate" />s.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSExpression_Class/index.html">Apple documentation for <c>NSExpression</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSExpression (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new Foundation.NSExpression : Foundation.NSCoder -&gt; Foundation.NSExpression" Usage="new Foundation.NSExpression coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSExpression (Foundation.NSExpressionType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype Foundation.NSExpressionType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.#ctor(Foundation.NSExpressionType)" />
      <MemberSignature Language="F#" Value="new Foundation.NSExpression : Foundation.NSExpressionType -&gt; Foundation.NSExpression" Usage="new Foundation.NSExpression type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithExpressionType:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="Foundation.NSExpressionType" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSExpression (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSExpression : Foundation.NSObjectFlag -&gt; Foundation.NSExpression" Usage="new Foundation.NSExpression t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSExpression (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSExpression : nativeint -&gt; Foundation.NSExpression" Usage="new Foundation.NSExpression handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowEvaluation">
      <MemberSignature Language="C#" Value="public virtual void AllowEvaluation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AllowEvaluation() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.AllowEvaluation" />
      <MemberSignature Language="F#" Value="abstract member AllowEvaluation : unit -&gt; unit&#xA;override this.AllowEvaluation : unit -&gt; unit" Usage="nSExpression.AllowEvaluation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("allowEvaluation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Forces an expression to be allowed to be evaluated. Expressions read from archives are not initially trusted.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Arguments">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSExpression[] Arguments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSExpression[] Arguments" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.Arguments" />
      <MemberSignature Language="F#" Value="member this.Arguments : Foundation.NSExpression[]" Usage="Foundation.NSExpression.Arguments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("arguments")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The arguments to this expression.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Block">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSExpressionCallbackHandler Block { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSExpressionCallbackHandler Block" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.Block" />
      <MemberSignature Language="F#" Value="member this.Block : Foundation.NSExpressionCallbackHandler" Usage="Foundation.NSExpression.Block" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionBlock")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpressionCallbackHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSExpression.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Collection">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Collection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject Collection" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.Collection" />
      <MemberSignature Language="F#" Value="member this.Collection : Foundation.NSObject" Usage="Foundation.NSExpression.Collection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("collection")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The collection of expressions in an aggregate expression, or the collection element of a subquery.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstantValue">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject ConstantValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject ConstantValue" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.ConstantValue" />
      <MemberSignature Language="F#" Value="member this.ConstantValue : Foundation.NSObject" Usage="Foundation.NSExpression.ConstantValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constantValue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The constant value of this expression.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="nSExpression.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="nSExpression.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateWith">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject EvaluateWith (Foundation.NSObject obj, Foundation.NSMutableDictionary context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject EvaluateWith(class Foundation.NSObject obj, class Foundation.NSMutableDictionary context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.EvaluateWith(Foundation.NSObject,Foundation.NSMutableDictionary)" />
      <MemberSignature Language="F#" Value="abstract member EvaluateWith : Foundation.NSObject * Foundation.NSMutableDictionary -&gt; Foundation.NSObject&#xA;override this.EvaluateWith : Foundation.NSObject * Foundation.NSMutableDictionary -&gt; Foundation.NSObject" Usage="nSExpression.EvaluateWith (obj, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionValueWithObject:context:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Foundation.NSObject" />
        <Parameter Name="context" Type="Foundation.NSMutableDictionary" />
      </Parameters>
      <Docs>
        <param name="obj">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="context">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionForEvaluatedObject">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression ExpressionForEvaluatedObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSExpression ExpressionForEvaluatedObject" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.ExpressionForEvaluatedObject" />
      <MemberSignature Language="F#" Value="member this.ExpressionForEvaluatedObject : Foundation.NSExpression" Usage="Foundation.NSExpression.ExpressionForEvaluatedObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("expressionForEvaluatedObject")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A static method that creates a new expression that represents the object being evaluated.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionType">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSExpressionType ExpressionType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSExpressionType ExpressionType" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.ExpressionType" />
      <MemberSignature Language="F#" Value="member this.ExpressionType : Foundation.NSExpressionType" Usage="Foundation.NSExpression.ExpressionType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("expressionType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpressionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The expression type of this expression.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExpressionValueWithObject">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSExpression ExpressionValueWithObject (Foundation.NSObject obj, Foundation.NSMutableDictionary context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSExpression ExpressionValueWithObject(class Foundation.NSObject obj, class Foundation.NSMutableDictionary context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.ExpressionValueWithObject(Foundation.NSObject,Foundation.NSMutableDictionary)" />
      <MemberSignature Language="F#" Value="abstract member ExpressionValueWithObject : Foundation.NSObject * Foundation.NSMutableDictionary -&gt; Foundation.NSExpression&#xA;override this.ExpressionValueWithObject : Foundation.NSObject * Foundation.NSMutableDictionary -&gt; Foundation.NSExpression" Usage="nSExpression.ExpressionValueWithObject (obj, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'EvaluateWith' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Foundation.NSObject" />
        <Parameter Name="context" Type="Foundation.NSMutableDictionary" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Evaluates the expression using the specified object and context.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FalseExpression">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSExpression FalseExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSExpression FalseExpression" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.FalseExpression" />
      <MemberSignature Language="F#" Value="member this.FalseExpression : Foundation.NSExpression" Usage="Foundation.NSExpression.FalseExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("falseExpression")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAggregate">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromAggregate (Foundation.NSExpression[] subexpressions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromAggregate(class Foundation.NSExpression[] subexpressions) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromAggregate(Foundation.NSExpression[])" />
      <MemberSignature Language="F#" Value="static member FromAggregate : Foundation.NSExpression[] -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromAggregate subexpressions" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForAggregate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="subexpressions" Type="Foundation.NSExpression[]" />
      </Parameters>
      <Docs>
        <param name="subexpressions">To be added.</param>
        <summary>An aggregate expression containing the specified subexpressions.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAnyKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromAnyKey ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromAnyKey() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromAnyKey" />
      <MemberSignature Language="F#" Value="static member FromAnyKey : unit -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromAnyKey " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForAnyKey")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>An expression that represents any key for a Spotlight query.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromConditional">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromConditional (Foundation.NSPredicate predicate, Foundation.NSExpression trueExpression, Foundation.NSExpression falseExpression);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromConditional(class Foundation.NSPredicate predicate, class Foundation.NSExpression trueExpression, class Foundation.NSExpression falseExpression) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromConditional(Foundation.NSPredicate,Foundation.NSExpression,Foundation.NSExpression)" />
      <MemberSignature Language="F#" Value="static member FromConditional : Foundation.NSPredicate * Foundation.NSExpression * Foundation.NSExpression -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromConditional (predicate, trueExpression, falseExpression)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForConditional:trueExpression:falseExpression:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Foundation.NSPredicate" />
        <Parameter Name="trueExpression" Type="Foundation.NSExpression" />
        <Parameter Name="falseExpression" Type="Foundation.NSExpression" />
      </Parameters>
      <Docs>
        <param name="predicate">To be added.</param>
        <param name="trueExpression">To be added.</param>
        <param name="falseExpression">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromConstant">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromConstant (Foundation.NSObject obj);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromConstant(class Foundation.NSObject obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromConstant(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="static member FromConstant : Foundation.NSObject -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromConstant obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForConstantValue:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>An expression that represents a constant value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFormat">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromFormat (string expressionFormat);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromFormat(string expressionFormat) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromFormat(System.String)" />
      <MemberSignature Language="F#" Value="static member FromFormat : string -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromFormat expressionFormat" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionWithFormat:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expressionFormat" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="expressionFormat">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFormat">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromFormat (string format, Foundation.NSExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromFormat(string format, class Foundation.NSExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromFormat(System.String,Foundation.NSExpression[])" />
      <MemberSignature Language="F#" Value="static member FromFormat : string * Foundation.NSExpression[] -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromFormat (format, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionWithFormat:argumentArray:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'FromFormat (string, NSObject[])' instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="parameters" Type="Foundation.NSExpression[]" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>An expression from the specified expression format, with the specified parameters.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFormat">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromFormat (string format, Foundation.NSObject[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromFormat(string format, class Foundation.NSObject[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromFormat(System.String,Foundation.NSObject[])" />
      <MemberSignature Language="F#" Value="static member FromFormat : string * Foundation.NSObject[] -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromFormat (format, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionWithFormat:argumentArray:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="parameters" Type="Foundation.NSObject[]" />
      </Parameters>
      <Docs>
        <param name="format">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFunction">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromFunction (Foundation.NSExpressionCallbackHandler target, Foundation.NSExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromFunction(class Foundation.NSExpressionCallbackHandler target, class Foundation.NSExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromFunction(Foundation.NSExpressionCallbackHandler,Foundation.NSExpression[])" />
      <MemberSignature Language="F#" Value="static member FromFunction : Foundation.NSExpressionCallbackHandler * Foundation.NSExpression[] -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromFunction (target, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForBlock:arguments:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSExpressionCallbackHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSExpressionCallbackHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="parameters" Type="Foundation.NSExpression[]" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFunction">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromFunction (Foundation.NSExpressionHandler target, Foundation.NSExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromFunction(class Foundation.NSExpressionHandler target, class Foundation.NSExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromFunction(Foundation.NSExpressionHandler,Foundation.NSExpression[])" />
      <MemberSignature Language="F#" Value="static member FromFunction : Foundation.NSExpressionHandler * Foundation.NSExpression[] -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromFunction (target, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForBlock:arguments:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Use 'FromFunction (NSExpressionCallbackHandler, NSExpression[])' instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSExpressionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSExpressionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="parameters" Type="Foundation.NSExpression[]" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>An expression created by executing the specified NSExpressionHandler target with the specified parameters.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFunction">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromFunction (string name, Foundation.NSExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromFunction(string name, class Foundation.NSExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromFunction(System.String,Foundation.NSExpression[])" />
      <MemberSignature Language="F#" Value="static member FromFunction : string * Foundation.NSExpression[] -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromFunction (name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForFunction:arguments:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="Foundation.NSExpression[]" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFunction">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromFunction (Foundation.NSExpression target, string name, Foundation.NSExpression[] parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromFunction(class Foundation.NSExpression target, string name, class Foundation.NSExpression[] parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromFunction(Foundation.NSExpression,System.String,Foundation.NSExpression[])" />
      <MemberSignature Language="F#" Value="static member FromFunction : Foundation.NSExpression * string * Foundation.NSExpression[] -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromFunction (target, name, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForFunction:selectorName:arguments:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSExpression" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="parameters" Type="Foundation.NSExpression[]" />
      </Parameters>
      <Docs>
        <param name="target">To be added.</param>
        <param name="name">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromIntersectSet">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromIntersectSet (Foundation.NSExpression left, Foundation.NSExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromIntersectSet(class Foundation.NSExpression left, class Foundation.NSExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromIntersectSet(Foundation.NSExpression,Foundation.NSExpression)" />
      <MemberSignature Language="F#" Value="static member FromIntersectSet : Foundation.NSExpression * Foundation.NSExpression -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromIntersectSet (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForIntersectSet:with:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Foundation.NSExpression" />
        <Parameter Name="right" Type="Foundation.NSExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>An expression that represents the intersection of an expression that evaluates as an NSSet (left) and an expression that evaluates as a collection (right).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromKeyPath">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromKeyPath (string keyPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromKeyPath(string keyPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromKeyPath(System.String)" />
      <MemberSignature Language="F#" Value="static member FromKeyPath : string -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromKeyPath keyPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForKeyPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keyPath">To be added.</param>
        <summary>An expression generated by invoking ValueForKeyPath on the specified keyPath.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMinusSet">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromMinusSet (Foundation.NSExpression left, Foundation.NSExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromMinusSet(class Foundation.NSExpression left, class Foundation.NSExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromMinusSet(Foundation.NSExpression,Foundation.NSExpression)" />
      <MemberSignature Language="F#" Value="static member FromMinusSet : Foundation.NSExpression * Foundation.NSExpression -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromMinusSet (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForMinusSet:with:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Foundation.NSExpression" />
        <Parameter Name="right" Type="Foundation.NSExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>An expression that subtracts an expression that evaluates as a collection (right) from an expression that evaluates as a set (left).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromSubquery">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromSubquery (Foundation.NSExpression expression, string variable, Foundation.NSObject predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromSubquery(class Foundation.NSExpression expression, string variable, class Foundation.NSObject predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromSubquery(Foundation.NSExpression,System.String,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="static member FromSubquery : Foundation.NSExpression * string * Foundation.NSObject -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromSubquery (expression, variable, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForSubquery:usingIteratorVariable:predicate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="expression" Type="Foundation.NSExpression" />
        <Parameter Name="variable" Type="System.String" />
        <Parameter Name="predicate" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="expression">To be added.</param>
        <param name="variable">To be added.</param>
        <param name="predicate">To be added.</param>
        <summary>An expression that filters a given variable by applying a predicate, returning those that evaluate as true.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUnionSet">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromUnionSet (Foundation.NSExpression left, Foundation.NSExpression right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromUnionSet(class Foundation.NSExpression left, class Foundation.NSExpression right) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromUnionSet(Foundation.NSExpression,Foundation.NSExpression)" />
      <MemberSignature Language="F#" Value="static member FromUnionSet : Foundation.NSExpression * Foundation.NSExpression -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromUnionSet (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForUnionSet:with:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="Foundation.NSExpression" />
        <Parameter Name="right" Type="Foundation.NSExpression" />
      </Parameters>
      <Docs>
        <param name="left">To be added.</param>
        <param name="right">To be added.</param>
        <summary>An expression that represents the union of an expression that evaluates as an expression (left) with an expression that evaluates as a collection (right).</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromVariable">
      <MemberSignature Language="C#" Value="public static Foundation.NSExpression FromVariable (string string1);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSExpression FromVariable(string string1) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSExpression.FromVariable(System.String)" />
      <MemberSignature Language="F#" Value="static member FromVariable : string -&gt; Foundation.NSExpression" Usage="Foundation.NSExpression.FromVariable string1" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("expressionForVariable:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="string1" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="string1">To be added.</param>
        <summary>An expression that extracts the specified variable from the variable bindings dictionary.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Function">
      <MemberSignature Language="C#" Value="public virtual string Function { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Function" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.Function" />
      <MemberSignature Language="F#" Value="member this.Function : string" Usage="Foundation.NSExpression.Function" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("function")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The function for this expression. Raises an exception if not applicable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyPath">
      <MemberSignature Language="C#" Value="public virtual string KeyPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string KeyPath" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.KeyPath" />
      <MemberSignature Language="F#" Value="member this.KeyPath : string" Usage="Foundation.NSExpression.KeyPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("keyPath")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The key path for this expression. Raises an exception if not applicable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftExpression">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSExpression LeftExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSExpression LeftExpression" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.LeftExpression" />
      <MemberSignature Language="F#" Value="member this.LeftExpression : Foundation.NSExpression" Usage="Foundation.NSExpression.LeftExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("leftExpression")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The left expression of an aggregate expression. Raises an exception if not applicable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Operand">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSExpression Operand { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSExpression Operand" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.Operand" />
      <MemberSignature Language="F#" Value="member this.Operand : Foundation.NSExpression" Usage="Foundation.NSExpression.Operand" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("operand")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The operand of the expression. Raises an exception if not applicable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Predicate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSPredicate Predicate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSPredicate Predicate" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.Predicate" />
      <MemberSignature Language="F#" Value="member this.Predicate : Foundation.NSPredicate" Usage="Foundation.NSExpression.Predicate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("predicate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The predicate for a subquery expression. Raises an exception if not applicable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RightExpression">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSExpression RightExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSExpression RightExpression" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.RightExpression" />
      <MemberSignature Language="F#" Value="member this.RightExpression : Foundation.NSExpression" Usage="Foundation.NSExpression.RightExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("rightExpression")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The right expression of an aggregate expression. Raises an exception if not applicable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TrueExpression">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSExpression TrueExpression { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSExpression TrueExpression" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.TrueExpression" />
      <MemberSignature Language="F#" Value="member this.TrueExpression : Foundation.NSExpression" Usage="Foundation.NSExpression.TrueExpression" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("trueExpression")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSExpression</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Variable">
      <MemberSignature Language="C#" Value="public virtual string Variable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Variable" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSExpression.Variable" />
      <MemberSignature Language="F#" Value="member this.Variable : string" Usage="Foundation.NSExpression.Variable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("variable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The variable for the expression. Raises an exception if not applicable.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
