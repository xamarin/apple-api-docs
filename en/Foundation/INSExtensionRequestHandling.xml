<Type Name="INSExtensionRequestHandling" FullName="Foundation.INSExtensionRequestHandling">
  <TypeSignature Language="C#" Value="public interface INSExtensionRequestHandling : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract INSExtensionRequestHandling implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Foundation.INSExtensionRequestHandling" />
  <TypeSignature Language="F#" Value="type INSExtensionRequestHandling = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="NSExtensionRequestHandling", WrapperType=typeof(Foundation.NSExtensionRequestHandlingWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="BeginRequestWithExtensionContext", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Foundation.NSExtensionContext) }, Selector="beginRequestWithExtensionContext:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:Foundation.NSExtensionRequestHandling" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:Foundation.NSExtensionRequestHandling" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:Foundation.NSExtensionRequestHandling" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Foundation%20NSExtension%20Request%20Handling_%20Extensions&amp;scope=Xamarin" title="T:Foundation.NSExtensionRequestHandling_Extensions">T:Foundation.NSExtensionRequestHandling_Extensions</a></format> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginRequestWithExtensionContext">
      <MemberSignature Language="C#" Value="public void BeginRequestWithExtensionContext (Foundation.NSExtensionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BeginRequestWithExtensionContext(class Foundation.NSExtensionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.INSExtensionRequestHandling.BeginRequestWithExtensionContext(Foundation.NSExtensionContext)" />
      <MemberSignature Language="F#" Value="abstract member BeginRequestWithExtensionContext : Foundation.NSExtensionContext -&gt; unit" Usage="iNSExtensionRequestHandling.BeginRequestWithExtensionContext context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("beginRequestWithExtensionContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="Foundation.NSExtensionContext" />
      </Parameters>
      <Docs>
        <param name="context">The <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:Monotouch.Foundation.NSExtensionContext&amp;scope=Xamarin" title="T:Monotouch.Foundation.NSExtensionContext">T:Monotouch.Foundation.NSExtensionContext</a></format> containing extension-relevant data.</param>
        <summary>Developers can implement this method to prepare their extension for the host application request.</summary>
        <remarks>
          <para>Developers who implement this method must call <c>base.BeginRequestWithExtensionContext(context)</c> within their implementation.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
