<Type Name="NSAttributedString" FullName="Foundation.NSAttributedString">
  <TypeSignature Language="C#" Value="public class NSAttributedString : Foundation.NSObject, Foundation.INSItemProviderReading, Foundation.INSItemProviderWriting, Foundation.INSMutableCopying, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSAttributedString extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSItemProviderReading, class Foundation.INSItemProviderWriting, class Foundation.INSMutableCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSAttributedString" />
  <TypeSignature Language="F#" Value="type NSAttributedString = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSCopying&#xA;    interface INSItemProviderReading&#xA;    interface INSItemProviderWriting&#xA;    interface INSMutableCopying&#xA;    interface INSSecureCoding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSItemProviderReading</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSItemProviderWriting</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSMutableCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSAttributedString", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Strings that can be annotated with a set of attributes.</summary>
    <remarks>
      <para>
	The NSAttributedString type represents a string that has a
	series of attributes applied uniformly.  
      </para>
      <para>
        <img href="NSAttributedString.png" />
      </para>
      <para> The companion <see cref="T:Foundation.NSMutableAttributedString" /> type
	can be used to create attributed strings that have overlapping
	attributes and whose contents can be modified after creation.
      </para>
      <para> 
	These types typically are used to attach information to
	elements of the string that dictate the font and colors to use
	as well as rendering attributes like kerning or how to render
	ligatures on a specific run of code.
      </para>
      <para> These classes do not dictate the meaning or behavior of
	the attributes on a string, they merely keep track of the
	attributes.  The actual meaning of these attributes is
	interpreted by the consumer of these objects.   
      </para>
      <para> 
	NSAttributedStrings are created with a string and a set
	of attributes.  The default constructor takes a string and an
	NSDictionary object where the keys represent the attributes
	and the values on each element represent the value of that
	attribute. 
      </para>
      <para>To simplify many common scenarios, MonoTouch
	provides constructors with strong-types to easily create
	attributed strings for use with CoreText or UIKit.   These
	constructors provide type-safety and eliminate programming
	errors caused by accidentally creating attributes that are not
	recognized by a backend. 
      </para>
      <para>
	To create NSAttributedStrings that you can use with CoreText's
	rendering, you create an instance of the <see cref="T:CoreText.CTStringAttributes" /> class, set its
	properties to the attributes that you desire, and then invoke
	the NSAttributedString constructor with it.   
      </para>
      <para>
	To create NSAttributedStrings that you can use with UIKit's
	rendering, you create an instance of the <see cref="T:UIKit.UIStringAttributes" /> class, set its
	properties to the attributes that you desire, and then invoke
	the NSAttributedString constructor with it.   
      </para>
      <para>
	The examples below show how to use the C# object initializer
	syntax to initialize the CTStringAttributes and the
	UIStringAttributes to setup your attributes.   You can later
	use these attributes multiple times with different attributed
	strings: 
      </para>
      <example>
        <code lang="C#"><![CDATA[
// 
// Using NSAttributedString with CoreText
//
var attributedString = new NSAttributedString ("Hello, world",
       new CTStringAttributes () {
              ForegroundColorFromContext =  true,
              Font = new CTFont ("Arial", 24)
       });

// Pass the NSAttributedString to a CTLine and draw the CTLine.
using (var textLine = new CTLine (attributedString)) {
       textLine.Draw (gctx);
}

// 
// Using NSAttributedString with UIKit
//
var myText = new NSAttributedString ("Hello, world",
       new UIStringAttributes () {
              ForegroundColor =  UIColor.Red,
	      KerningAdjustment = 3
       });
label.AttributedText = myText;
	]]></code>
      </example>
      <para>
	While both <see cref="T:CoreText.CTStringAttributes" /> and <see cref="T:UIKit.UIStringAttributes" /> are useful to
	create attributes that can later be used with attributed
	strings, it is also possible to use the <see cref="C:Foundation.NSAttributedString(string,UIKit.UIFont,UIKit.UIColor,UIKit.UIColor,UIKit.UIColor,UIKit.NSParagraphStyle,Foundation.NSLigatureType,float,Foundation.NSUnderlineStyle,UIKit.NSShadow,float,Foundation.NSUnderlineStyle" /> constructor
	with C# named parameters for quickly creating attributed
	strings inline.
      </para>
      <example>
        <code lang="C#"><![CDATA[
//
// This example shows how to create an NSAttributedString for
// use with UIKit without creating the attributes separately
//
var text = new NSAttributedString (
    "Hello, World",
    font: UIFont.FromName ("HoeflerText-Regular", 24.0f),
    foregroundColor: UIColor.Red,
    strokeWidth: 4
);
	]]></code>
      </example>
      <para>
	It is also possible to create NSAttributedStrings with the
	NSDictionary API, although that does not offer any type safety
	nor prevents common errors.   To use it, you typically use
	the various NSString properties that end in "AttributedName"
	that are part of this class.
      </para>
      <example>
        <code lang="C#"><![CDATA[
//
// This example shows how to create an NSAttributedString for
// use with UIKit using NSDictionaries
//
var dict = new NSMutableDictionary () {
    { NSAttributedString.FontAttributeName, UIFont.FromName ("HoeflerText-Regular", 24.0f), },
    { NSAttributedString.ForegroundColorAttributeName, UIColor.Black }
};

var text = new NSAttributedString (
	"Hello, World", dict);
	]]></code>
      </example>
    </remarks>
    <related type="sample" href="https://developer.xamarin.com/samples/monotouch/SimpleTextInput/">SimpleTextInput</related>
    <altmember cref="T:UIKit.NSAttributedStringAttachmentConveniences" />
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSAttributedString_Class/index.html">Apple documentation for <c>NSAttributedString</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (Foundation.NSAttributedString other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSAttributedString other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSAttributedString)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSAttributedString -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString other" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithAttributedString:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="other" Type="Foundation.NSAttributedString" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSCoder -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSAttributedString (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSObjectFlag -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSAttributedString (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : nativeint -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (string str);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string str) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : string -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString str" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithString:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (Foundation.NSData data, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSData data, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSData,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSData *  -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (data, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (Foundation.NSUrl url, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSUrl url, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSUrl,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSUrl *  -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (url, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (string str, CoreText.CTStringAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string str, class CoreText.CTStringAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(System.String,CoreText.CTStringAttributes)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : string * CoreText.CTStringAttributes -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (str, attributes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="attributes" Type="CoreText.CTStringAttributes" />
      </Parameters>
      <Docs>
        <param name="str">String.</param>
        <param name="attributes">CoreText string attributes.</param>
        <summary>Creates an NSAttributedString for use with CoreText rendering functions.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (string str, Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string str, class Foundation.NSDictionary attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(System.String,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : string * Foundation.NSDictionary -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (str, attributes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithString:attributes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="attributes" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="str">Strings</param>
        <param name="attributes">
          <para>Dictionary containing the attributes
	(keys) and their values attached to the strings.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates an NSAttributedString with user defined
	attributes specified in a dictionary.</summary>
        <remarks>
          <example>
            <code lang="C#"><![CDATA[
//
// This example shows how to create an NSAttributedString for
// use with UIKit using NSDictionaries
//
var dict = new NSMutableDictionary () {
    { NSAttributedString.FontAttributeName, UIFont.FromName ("HoeflerText-Regular", 24.0f), },
    { NSAttributedString.ForegroundColorAttributeName, UIColor.Black }
};

var text = new NSAttributedString (
	"Hello, World", dict);
	]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (string str, UIKit.UIStringAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string str, class UIKit.UIStringAttributes attributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(System.String,UIKit.UIStringAttributes)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : string * UIKit.UIStringAttributes -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (str, attributes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="attributes" Type="UIKit.UIStringAttributes" />
      </Parameters>
      <Docs>
        <param name="str">To be added.</param>
        <param name="attributes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (Foundation.NSData data, Foundation.NSAttributedStringDocumentAttributes documentAttributes, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSData data, class Foundation.NSAttributedStringDocumentAttributes documentAttributes, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSData,Foundation.NSAttributedStringDocumentAttributes,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSData * Foundation.NSAttributedStringDocumentAttributes *  -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (data, documentAttributes, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="documentAttributes" Type="Foundation.NSAttributedStringDocumentAttributes" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="documentAttributes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (Foundation.NSUrl url, Foundation.NSAttributedStringDocumentAttributes documentAttributes, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSUrl url, class Foundation.NSAttributedStringDocumentAttributes documentAttributes, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSUrl,Foundation.NSAttributedStringDocumentAttributes,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSUrl * Foundation.NSAttributedStringDocumentAttributes *  -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (url, documentAttributes, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="documentAttributes" Type="Foundation.NSAttributedStringDocumentAttributes" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="documentAttributes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (Foundation.NSData data, Foundation.NSAttributedStringDocumentAttributes options, out Foundation.NSDictionary resultDocumentAttributes, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSData data, class Foundation.NSAttributedStringDocumentAttributes options, [out] class Foundation.NSDictionary&amp; resultDocumentAttributes, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSData,Foundation.NSAttributedStringDocumentAttributes,Foundation.NSDictionary@,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSData * Foundation.NSAttributedStringDocumentAttributes *  *  -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (data, options, resultDocumentAttributes, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="options" Type="Foundation.NSAttributedStringDocumentAttributes" />
        <Parameter Name="resultDocumentAttributes" Type="Foundation.NSDictionary" RefType="out" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="options">To be added.</param>
        <param name="resultDocumentAttributes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (Foundation.NSData data, Foundation.NSDictionary options, out Foundation.NSDictionary resultDocumentAttributes, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSData data, class Foundation.NSDictionary options, [out] class Foundation.NSDictionary&amp; resultDocumentAttributes, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSData,Foundation.NSDictionary,Foundation.NSDictionary@,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSData * Foundation.NSDictionary *  *  -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (data, options, resultDocumentAttributes, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithData:options:documentAttributes:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
        <Parameter Name="resultDocumentAttributes" Type="Foundation.NSDictionary" RefType="out" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="options">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="resultDocumentAttributes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (Foundation.NSUrl url, Foundation.NSAttributedStringDocumentAttributes options, out Foundation.NSDictionary resultDocumentAttributes, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSUrl url, class Foundation.NSAttributedStringDocumentAttributes options, [out] class Foundation.NSDictionary&amp; resultDocumentAttributes, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSUrl,Foundation.NSAttributedStringDocumentAttributes,Foundation.NSDictionary@,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSUrl * Foundation.NSAttributedStringDocumentAttributes *  *  -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (url, options, resultDocumentAttributes, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="options" Type="Foundation.NSAttributedStringDocumentAttributes" />
        <Parameter Name="resultDocumentAttributes" Type="Foundation.NSDictionary" RefType="out" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="options">To be added.</param>
        <param name="resultDocumentAttributes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (Foundation.NSUrl url, Foundation.NSDictionary options, out Foundation.NSDictionary resultDocumentAttributes, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSUrl url, class Foundation.NSDictionary options, [out] class Foundation.NSDictionary&amp; resultDocumentAttributes, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSDictionary@,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : Foundation.NSUrl * Foundation.NSDictionary *  *  -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (url, options, resultDocumentAttributes, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
        <Parameter Name="resultDocumentAttributes" Type="Foundation.NSDictionary" RefType="out" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <param name="options">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="resultDocumentAttributes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSAttributedString (string str, UIKit.UIFont font = null, UIKit.UIColor foregroundColor = null, UIKit.UIColor backgroundColor = null, UIKit.UIColor strokeColor = null, UIKit.NSParagraphStyle paragraphStyle = null, Foundation.NSLigatureType ligatures = Foundation.NSLigatureType.Default, float kerning = 0, Foundation.NSUnderlineStyle underlineStyle = Foundation.NSUnderlineStyle.PatternSolid, UIKit.NSShadow shadow = null, float strokeWidth = 0, Foundation.NSUnderlineStyle strikethroughStyle = Foundation.NSUnderlineStyle.PatternSolid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string str, class UIKit.UIFont font, class UIKit.UIColor foregroundColor, class UIKit.UIColor backgroundColor, class UIKit.UIColor strokeColor, class UIKit.NSParagraphStyle paragraphStyle, valuetype Foundation.NSLigatureType ligatures, float32 kerning, valuetype Foundation.NSUnderlineStyle underlineStyle, class UIKit.NSShadow shadow, float32 strokeWidth, valuetype Foundation.NSUnderlineStyle strikethroughStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.#ctor(System.String,UIKit.UIFont,UIKit.UIColor,UIKit.UIColor,UIKit.UIColor,UIKit.NSParagraphStyle,Foundation.NSLigatureType,System.Single,Foundation.NSUnderlineStyle,UIKit.NSShadow,System.Single,Foundation.NSUnderlineStyle)" />
      <MemberSignature Language="F#" Value="new Foundation.NSAttributedString : string * UIKit.UIFont * UIKit.UIColor * UIKit.UIColor * UIKit.UIColor * UIKit.NSParagraphStyle * Foundation.NSLigatureType * single * Foundation.NSUnderlineStyle * UIKit.NSShadow * single * Foundation.NSUnderlineStyle -&gt; Foundation.NSAttributedString" Usage="new Foundation.NSAttributedString (str, font, foregroundColor, backgroundColor, strokeColor, paragraphStyle, ligatures, kerning, underlineStyle, shadow, strokeWidth, strikethroughStyle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="font" Type="UIKit.UIFont" />
        <Parameter Name="foregroundColor" Type="UIKit.UIColor" />
        <Parameter Name="backgroundColor" Type="UIKit.UIColor" />
        <Parameter Name="strokeColor" Type="UIKit.UIColor" />
        <Parameter Name="paragraphStyle" Type="UIKit.NSParagraphStyle" />
        <Parameter Name="ligatures" Type="Foundation.NSLigatureType" />
        <Parameter Name="kerning" Type="System.Single" />
        <Parameter Name="underlineStyle" Type="Foundation.NSUnderlineStyle" />
        <Parameter Name="shadow" Type="UIKit.NSShadow" />
        <Parameter Name="strokeWidth" Type="System.Single" />
        <Parameter Name="strikethroughStyle" Type="Foundation.NSUnderlineStyle" />
      </Parameters>
      <Docs>
        <param name="str">String to create.</param>
        <param name="font">Desired font (or null, if none is desired).</param>
        <param name="foregroundColor">Desired foreground color (or null if none is desired).</param>
        <param name="backgroundColor">Desired background color (or null if none is desired)..</param>
        <param name="strokeColor">Desired stroke color (or null if none is desired).</param>
        <param name="paragraphStyle">To be added.</param>
        <param name="ligatures">To be added.</param>
        <param name="kerning">To be added.</param>
        <param name="underlineStyle">To be added.</param>
        <param name="shadow">Desired shadow.</param>
        <param name="strokeWidth">Desired stroked width..</param>
        <param name="strikethroughStyle">To be added.</param>
        <summary>Creates a UIKit attributed string with the specified attributes in the parameters.</summary>
        <remarks>
          <para>
	    This is the recommended constructor for NSAttributedString
	    objects that are intended to be unique.   
	  </para>
          <para>
	    The advantage of this constructor is that other than the
	    string, every parameter is optional.   It provides a
	    convenient way of creating the objects
	  </para>
          <example>
            <code lang="C#"><![CDATA[
//
// This example shows how to create an NSAttributedString for
// use with UIKit without creating the attributes separately
//
var text = new NSAttributedString (
    "Hello, World",
    font: UIFont.FromName ("HoeflerText-Regular", 24.0f),
    foregroundColor: UIColor.Red,
    strokeWidth: 4
);
	]]></code>
          </example>
          <para>
	    For cases where the same attributes will be reused across
	    multiple attributed strings, it is best to create the
	    attributes using the UIStringAttributes class as that will
	    share the same dictionary across multiple uses while this
	    constructor creates a dictionary on demand for the
	    specified attributes in the constructor.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSAttributedString.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsAttachmentsInRange">
      <MemberSignature Language="C#" Value="public virtual bool ContainsAttachmentsInRange (Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsAttachmentsInRange(valuetype Foundation.NSRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.ContainsAttachmentsInRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member ContainsAttachmentsInRange : Foundation.NSRange -&gt; bool&#xA;override this.ContainsAttachmentsInRange : Foundation.NSRange -&gt; bool" Usage="nSAttributedString.ContainsAttachmentsInRange range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("containsAttachmentsInRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="nSAttributedString.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFrom">
      <MemberSignature Language="C#" Value="public static Foundation.NSAttributedString CreateFrom (UIKit.NSTextAttachment attachment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSAttributedString CreateFrom(class UIKit.NSTextAttachment attachment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.CreateFrom(UIKit.NSTextAttachment)" />
      <MemberSignature Language="F#" Value="static member CreateFrom : UIKit.NSTextAttachment -&gt; Foundation.NSAttributedString" Usage="Foundation.NSAttributedString.CreateFrom attachment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachment" Type="UIKit.NSTextAttachment" />
      </Parameters>
      <Docs>
        <param name="attachment">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public virtual void DrawString (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawString(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.DrawString(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member DrawString : CoreGraphics.CGPoint -&gt; unit&#xA;override this.DrawString : CoreGraphics.CGPoint -&gt; unit" Usage="nSAttributedString.DrawString point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawAtPoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <summary>Draws the string at the specified point.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public virtual void DrawString (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawString(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.DrawString(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member DrawString : CoreGraphics.CGRect -&gt; unit&#xA;override this.DrawString : CoreGraphics.CGRect -&gt; unit" Usage="nSAttributedString.DrawString rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawInRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawString">
      <MemberSignature Language="C#" Value="public virtual void DrawString (CoreGraphics.CGRect rect, Foundation.NSStringDrawingOptions options, Foundation.NSStringDrawingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawString(valuetype CoreGraphics.CGRect rect, valuetype Foundation.NSStringDrawingOptions options, class Foundation.NSStringDrawingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.DrawString(CoreGraphics.CGRect,Foundation.NSStringDrawingOptions,Foundation.NSStringDrawingContext)" />
      <MemberSignature Language="F#" Value="abstract member DrawString : CoreGraphics.CGRect * Foundation.NSStringDrawingOptions * Foundation.NSStringDrawingContext -&gt; unit&#xA;override this.DrawString : CoreGraphics.CGRect * Foundation.NSStringDrawingOptions * Foundation.NSStringDrawingContext -&gt; unit" Usage="nSAttributedString.DrawString (rect, options, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawWithRect:options:context:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="options" Type="Foundation.NSStringDrawingOptions" />
        <Parameter Name="context" Type="Foundation.NSStringDrawingContext" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="options">To be added.</param>
        <param name="context">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="nSAttributedString.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateAttribute">
      <MemberSignature Language="C#" Value="public virtual void EnumerateAttribute (Foundation.NSString attributeName, Foundation.NSRange inRange, Foundation.NSAttributedStringEnumeration options, Foundation.NSAttributedStringCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateAttribute(class Foundation.NSString attributeName, valuetype Foundation.NSRange inRange, valuetype Foundation.NSAttributedStringEnumeration options, class Foundation.NSAttributedStringCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.EnumerateAttribute(Foundation.NSString,Foundation.NSRange,Foundation.NSAttributedStringEnumeration,Foundation.NSAttributedStringCallback)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateAttribute : Foundation.NSString * Foundation.NSRange * Foundation.NSAttributedStringEnumeration * Foundation.NSAttributedStringCallback -&gt; unit&#xA;override this.EnumerateAttribute : Foundation.NSString * Foundation.NSRange * Foundation.NSAttributedStringEnumeration * Foundation.NSAttributedStringCallback -&gt; unit" Usage="nSAttributedString.EnumerateAttribute (attributeName, inRange, options, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateAttribute:inRange:options:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="Foundation.NSString" />
        <Parameter Name="inRange" Type="Foundation.NSRange" />
        <Parameter Name="options" Type="Foundation.NSAttributedStringEnumeration" />
        <Parameter Name="callback" Type="Foundation.NSAttributedStringCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSAttributedStringCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="inRange">To be added.</param>
        <param name="options">To be added.</param>
        <param name="callback">To be added.</param>
        <summary>Applies the callback to the specified attribute in the specified range.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateAttributes">
      <MemberSignature Language="C#" Value="public virtual void EnumerateAttributes (Foundation.NSRange range, Foundation.NSAttributedStringEnumeration options, Foundation.NSAttributedRangeCallback callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateAttributes(valuetype Foundation.NSRange range, valuetype Foundation.NSAttributedStringEnumeration options, class Foundation.NSAttributedRangeCallback callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.EnumerateAttributes(Foundation.NSRange,Foundation.NSAttributedStringEnumeration,Foundation.NSAttributedRangeCallback)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateAttributes : Foundation.NSRange * Foundation.NSAttributedStringEnumeration * Foundation.NSAttributedRangeCallback -&gt; unit&#xA;override this.EnumerateAttributes : Foundation.NSRange * Foundation.NSAttributedStringEnumeration * Foundation.NSAttributedRangeCallback -&gt; unit" Usage="nSAttributedString.EnumerateAttributes (range, options, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateAttributesInRange:options:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="options" Type="Foundation.NSAttributedStringEnumeration" />
        <Parameter Name="callback" Type="Foundation.NSAttributedRangeCallback">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSAttributedRangeCallback))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="options">To be added.</param>
        <param name="callback">To be added.</param>
        <summary>Applies the callback to all the attributes in the specified range.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAttachment">
      <MemberSignature Language="C#" Value="public static Foundation.NSAttributedString FromAttachment (UIKit.NSTextAttachment attachment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSAttributedString FromAttachment(class UIKit.NSTextAttachment attachment) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.FromAttachment(UIKit.NSTextAttachment)" />
      <MemberSignature Language="F#" Value="static member FromAttachment : UIKit.NSTextAttachment -&gt; Foundation.NSAttributedString" Usage="Foundation.NSAttributedString.FromAttachment attachment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("attributedStringWithAttachment:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachment" Type="UIKit.NSTextAttachment" />
      </Parameters>
      <Docs>
        <param name="attachment">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject GetAttribute (string attribute, nint location, out Foundation.NSRange effectiveRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject GetAttribute(string attribute, valuetype System.nint location, [out] valuetype Foundation.NSRange&amp; effectiveRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetAttribute(System.String,System.nint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="abstract member GetAttribute : string * nint *  -&gt; Foundation.NSObject&#xA;override this.GetAttribute : string * nint *  -&gt; Foundation.NSObject" Usage="nSAttributedString.GetAttribute (attribute, location, effectiveRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("attribute:atIndex:effectiveRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
        <Parameter Name="location" Type="System.nint" />
        <Parameter Name="effectiveRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="attribute">To be added.</param>
        <param name="location">To be added.</param>
        <param name="effectiveRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject GetAttribute (string attribute, nint location, out Foundation.NSRange longestEffectiveRange, Foundation.NSRange rangeLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject GetAttribute(string attribute, valuetype System.nint location, [out] valuetype Foundation.NSRange&amp; longestEffectiveRange, valuetype Foundation.NSRange rangeLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetAttribute(System.String,System.nint,Foundation.NSRange@,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member GetAttribute : string * nint *  * Foundation.NSRange -&gt; Foundation.NSObject&#xA;override this.GetAttribute : string * nint *  * Foundation.NSRange -&gt; Foundation.NSObject" Usage="nSAttributedString.GetAttribute (attribute, location, longestEffectiveRange, rangeLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("attribute:atIndex:longestEffectiveRange:inRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attribute" Type="System.String" />
        <Parameter Name="location" Type="System.nint" />
        <Parameter Name="longestEffectiveRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="rangeLimit" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attribute">To be added.</param>
        <param name="location">To be added.</param>
        <param name="longestEffectiveRange">To be added.</param>
        <param name="rangeLimit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributes">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary GetAttributes (nint location, out Foundation.NSRange effectiveRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSDictionary GetAttributes(valuetype System.nint location, [out] valuetype Foundation.NSRange&amp; effectiveRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetAttributes(System.nint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetAttributes : nint *  -&gt; Foundation.NSDictionary" Usage="nSAttributedString.GetAttributes (location, effectiveRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.nint" />
        <Parameter Name="effectiveRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="effectiveRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary GetAttributes (nint location, out Foundation.NSRange longestEffectiveRange, Foundation.NSRange rangeLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDictionary GetAttributes(valuetype System.nint location, [out] valuetype Foundation.NSRange&amp; longestEffectiveRange, valuetype Foundation.NSRange rangeLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetAttributes(System.nint,Foundation.NSRange@,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member GetAttributes : nint *  * Foundation.NSRange -&gt; Foundation.NSDictionary&#xA;override this.GetAttributes : nint *  * Foundation.NSRange -&gt; Foundation.NSDictionary" Usage="nSAttributedString.GetAttributes (location, longestEffectiveRange, rangeLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("attributesAtIndex:longestEffectiveRange:inRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.nint" />
        <Parameter Name="longestEffectiveRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="rangeLimit" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="longestEffectiveRange">To be added.</param>
        <param name="rangeLimit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBoundingRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect GetBoundingRect (CoreGraphics.CGSize size, Foundation.NSStringDrawingOptions options, Foundation.NSStringDrawingContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetBoundingRect(valuetype CoreGraphics.CGSize size, valuetype Foundation.NSStringDrawingOptions options, class Foundation.NSStringDrawingContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetBoundingRect(CoreGraphics.CGSize,Foundation.NSStringDrawingOptions,Foundation.NSStringDrawingContext)" />
      <MemberSignature Language="F#" Value="abstract member GetBoundingRect : CoreGraphics.CGSize * Foundation.NSStringDrawingOptions * Foundation.NSStringDrawingContext -&gt; CoreGraphics.CGRect&#xA;override this.GetBoundingRect : CoreGraphics.CGSize * Foundation.NSStringDrawingOptions * Foundation.NSStringDrawingContext -&gt; CoreGraphics.CGRect" Usage="nSAttributedString.GetBoundingRect (size, options, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("boundingRectWithSize:options:context:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="CoreGraphics.CGSize" />
        <Parameter Name="options" Type="Foundation.NSStringDrawingOptions" />
        <Parameter Name="context" Type="Foundation.NSStringDrawingContext" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="options">To be added.</param>
        <param name="context">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCoreTextAttributes">
      <MemberSignature Language="C#" Value="public CoreText.CTStringAttributes GetCoreTextAttributes (nint location, out Foundation.NSRange effectiveRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreText.CTStringAttributes GetCoreTextAttributes(valuetype System.nint location, [out] valuetype Foundation.NSRange&amp; effectiveRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetCoreTextAttributes(System.nint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetCoreTextAttributes : nint *  -&gt; CoreText.CTStringAttributes" Usage="nSAttributedString.GetCoreTextAttributes (location, effectiveRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreText.CTStringAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.nint" />
        <Parameter Name="effectiveRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="effectiveRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCoreTextAttributes">
      <MemberSignature Language="C#" Value="public CoreText.CTStringAttributes GetCoreTextAttributes (nint location, out Foundation.NSRange longestEffectiveRange, Foundation.NSRange rangeLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreText.CTStringAttributes GetCoreTextAttributes(valuetype System.nint location, [out] valuetype Foundation.NSRange&amp; longestEffectiveRange, valuetype Foundation.NSRange rangeLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetCoreTextAttributes(System.nint,Foundation.NSRange@,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.GetCoreTextAttributes : nint *  * Foundation.NSRange -&gt; CoreText.CTStringAttributes" Usage="nSAttributedString.GetCoreTextAttributes (location, longestEffectiveRange, rangeLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreText.CTStringAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.nint" />
        <Parameter Name="longestEffectiveRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="rangeLimit" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="longestEffectiveRange">To be added.</param>
        <param name="rangeLimit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFromRange">
      <MemberSignature Language="C#" Value="public Foundation.NSData GetDataFromRange (Foundation.NSRange range, Foundation.NSAttributedStringDocumentAttributes documentAttributes, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSData GetDataFromRange(valuetype Foundation.NSRange range, class Foundation.NSAttributedStringDocumentAttributes documentAttributes, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetDataFromRange(Foundation.NSRange,Foundation.NSAttributedStringDocumentAttributes,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="member this.GetDataFromRange : Foundation.NSRange * Foundation.NSAttributedStringDocumentAttributes *  -&gt; Foundation.NSData" Usage="nSAttributedString.GetDataFromRange (range, documentAttributes, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="documentAttributes" Type="Foundation.NSAttributedStringDocumentAttributes" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="documentAttributes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataFromRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData GetDataFromRange (Foundation.NSRange range, Foundation.NSDictionary attributes, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData GetDataFromRange(valuetype Foundation.NSRange range, class Foundation.NSDictionary attributes, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetDataFromRange(Foundation.NSRange,Foundation.NSDictionary,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetDataFromRange : Foundation.NSRange * Foundation.NSDictionary *  -&gt; Foundation.NSData&#xA;override this.GetDataFromRange : Foundation.NSRange * Foundation.NSDictionary *  -&gt; Foundation.NSData" Usage="nSAttributedString.GetDataFromRange (range, attributes, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dataFromRange:documentAttributes:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="attributes" Type="Foundation.NSDictionary" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>d|To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileWrapperFromRange">
      <MemberSignature Language="C#" Value="public Foundation.NSFileWrapper GetFileWrapperFromRange (Foundation.NSRange range, Foundation.NSAttributedStringDocumentAttributes documentAttributes, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSFileWrapper GetFileWrapperFromRange(valuetype Foundation.NSRange range, class Foundation.NSAttributedStringDocumentAttributes documentAttributes, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetFileWrapperFromRange(Foundation.NSRange,Foundation.NSAttributedStringDocumentAttributes,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="member this.GetFileWrapperFromRange : Foundation.NSRange * Foundation.NSAttributedStringDocumentAttributes *  -&gt; Foundation.NSFileWrapper" Usage="nSAttributedString.GetFileWrapperFromRange (range, documentAttributes, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileWrapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="documentAttributes" Type="Foundation.NSAttributedStringDocumentAttributes" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="documentAttributes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFileWrapperFromRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSFileWrapper GetFileWrapperFromRange (Foundation.NSRange range, Foundation.NSDictionary attributes, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSFileWrapper GetFileWrapperFromRange(valuetype Foundation.NSRange range, class Foundation.NSDictionary attributes, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetFileWrapperFromRange(Foundation.NSRange,Foundation.NSDictionary,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetFileWrapperFromRange : Foundation.NSRange * Foundation.NSDictionary *  -&gt; Foundation.NSFileWrapper&#xA;override this.GetFileWrapperFromRange : Foundation.NSRange * Foundation.NSDictionary *  -&gt; Foundation.NSFileWrapper" Usage="nSAttributedString.GetFileWrapperFromRange (range, attributes, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fileWrapperFromRange:documentAttributes:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSFileWrapper</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="attributes" Type="Foundation.NSDictionary" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemProviderVisibilityForTypeIdentifier">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSItemProviderRepresentationVisibility GetItemProviderVisibilityForTypeIdentifier (string typeIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSItemProviderRepresentationVisibility GetItemProviderVisibilityForTypeIdentifier(string typeIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetItemProviderVisibilityForTypeIdentifier(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetItemProviderVisibilityForTypeIdentifier : string -&gt; Foundation.NSItemProviderRepresentationVisibility&#xA;override this.GetItemProviderVisibilityForTypeIdentifier : string -&gt; Foundation.NSItemProviderRepresentationVisibility" Usage="nSAttributedString.GetItemProviderVisibilityForTypeIdentifier typeIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("itemProviderVisibilityForRepresentationWithTypeIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSItemProviderRepresentationVisibility</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeIdentifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static Foundation.INSItemProviderReading GetObject (Foundation.NSData data, string typeIdentifier, out Foundation.NSError outError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.INSItemProviderReading GetObject(class Foundation.NSData data, string typeIdentifier, [out] class Foundation.NSError&amp; outError) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetObject(Foundation.NSData,System.String,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member GetObject : Foundation.NSData * string *  -&gt; Foundation.INSItemProviderReading" Usage="Foundation.NSAttributedString.GetObject (data, typeIdentifier, outError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("objectWithItemProviderData:typeIdentifier:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.INSItemProviderReading</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="typeIdentifier" Type="System.String" />
        <Parameter Name="outError" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="typeIdentifier">To be added.</param>
        <param name="outError">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUIKitAttributes">
      <MemberSignature Language="C#" Value="public UIKit.UIStringAttributes GetUIKitAttributes (nint location, out Foundation.NSRange effectiveRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UIStringAttributes GetUIKitAttributes(valuetype System.nint location, [out] valuetype Foundation.NSRange&amp; effectiveRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetUIKitAttributes(System.nint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GetUIKitAttributes : nint *  -&gt; UIKit.UIStringAttributes" Usage="nSAttributedString.GetUIKitAttributes (location, effectiveRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIStringAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.nint" />
        <Parameter Name="effectiveRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="effectiveRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUIKitAttributes">
      <MemberSignature Language="C#" Value="public UIKit.UIStringAttributes GetUIKitAttributes (nint location, out Foundation.NSRange longestEffectiveRange, Foundation.NSRange rangeLimit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UIStringAttributes GetUIKitAttributes(valuetype System.nint location, [out] valuetype Foundation.NSRange&amp; longestEffectiveRange, valuetype Foundation.NSRange rangeLimit) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.GetUIKitAttributes(System.nint,Foundation.NSRange@,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.GetUIKitAttributes : nint *  * Foundation.NSRange -&gt; UIKit.UIStringAttributes" Usage="nSAttributedString.GetUIKitAttributes (location, longestEffectiveRange, rangeLimit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIStringAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.nint" />
        <Parameter Name="longestEffectiveRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="rangeLimit" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="longestEffectiveRange">To be added.</param>
        <param name="rangeLimit">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEqual">
      <MemberSignature Language="C#" Value="public virtual bool IsEqual (Foundation.NSAttributedString other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEqual(class Foundation.NSAttributedString other) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.IsEqual(Foundation.NSAttributedString)" />
      <MemberSignature Language="F#" Value="override this.IsEqual : Foundation.NSAttributedString -&gt; bool" Usage="nSAttributedString.IsEqual other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("isEqualToAttributedString:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="Foundation.NSAttributedString" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>Whether this is equal to the other string.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public virtual nint Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint Length" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.Length" />
      <MemberSignature Language="F#" Value="member this.Length : nint" Usage="Foundation.NSAttributedString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("length")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of characters in this string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadData">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSProgress LoadData (string typeIdentifier, Action&lt;Foundation.NSData,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSProgress LoadData(string typeIdentifier, class System.Action`2&lt;class Foundation.NSData, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.LoadData(System.String,System.Action{Foundation.NSData,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member LoadData : string * Action&lt;Foundation.NSData, Foundation.NSError&gt; -&gt; Foundation.NSProgress&#xA;override this.LoadData : string * Action&lt;Foundation.NSData, Foundation.NSError&gt; -&gt; Foundation.NSProgress" Usage="nSAttributedString.LoadData (typeIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSItemProviderWriting.LoadData(System.String,System.Action{Foundation.NSData,Foundation.NSError})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("loadDataWithTypeIdentifier:forItemProviderCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSProgress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSData,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V4))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs tool="CopiedFromAncestor">
        <param name="typeIdentifier">A Universal Type Identifier (UTI) indicating the type of data to load.</param>
        <param name="completionHandler">The method called after the data is loaded.</param>
        <summary>Implement this method to customize the loading of data by an <see cref="T:Monotouch.Foundation.NSItemProvider" />.</summary>
        <returns>An <see cref="T:Monotouch.Foundation.NSProgress" /> object reflecting the data-loading operation.</returns>
        <remarks>
          <para>The <param name="typeIdentifier" /> must be in the set of values returned by <see cref="M:Monotouch.NSItemProviderWriting_Extensions.GetWritableTypeIdentifiersForItemProvider" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSData&gt; LoadDataAsync (string typeIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSData&gt; LoadDataAsync(string typeIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.LoadDataAsync(System.String)" />
      <MemberSignature Language="F#" Value="abstract member LoadDataAsync : string -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;&#xA;override this.LoadDataAsync : string -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;" Usage="nSAttributedString.LoadDataAsync typeIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeIdentifier">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSData&gt; LoadDataAsync (string typeIdentifier, out Foundation.NSProgress result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSData&gt; LoadDataAsync(string typeIdentifier, [out] class Foundation.NSProgress&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.LoadDataAsync(System.String,Foundation.NSProgress@)" />
      <MemberSignature Language="F#" Value="abstract member LoadDataAsync : string *  -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;&#xA;override this.LoadDataAsync : string *  -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;" Usage="nSAttributedString.LoadDataAsync (typeIdentifier, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
        <Parameter Name="result" Type="Foundation.NSProgress" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeIdentifier">To be added.</param>
        <param name="result">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LowLevelGetAttributes">
      <MemberSignature Language="C#" Value="public virtual IntPtr LowLevelGetAttributes (nint location, out Foundation.NSRange effectiveRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int LowLevelGetAttributes(valuetype System.nint location, [out] valuetype Foundation.NSRange&amp; effectiveRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.LowLevelGetAttributes(System.nint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="abstract member LowLevelGetAttributes : nint *  -&gt; nativeint&#xA;override this.LowLevelGetAttributes : nint *  -&gt; nativeint" Usage="nSAttributedString.LowLevelGetAttributes (location, effectiveRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("attributesAtIndex:effectiveRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="System.nint" />
        <Parameter Name="effectiveRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="location">The location to probe.</param>
        <param name="effectiveRange">The range to probe.</param>
        <summary>Low-level version that provides an NSDictionary for the attributes in the specified range.</summary>
        <returns>IntPtr handle to a native NSDictionary class.</returns>
        <remarks>
          <para>
	    In general, you should use the <see cref="M:Foundation.NSAttributedString.GetAttributes" />
	    methods, which will return a high-level NSDictionary.
	  </para>
          <para>
	    This is the low-level interface to NSAttributedString and
	    in general is only useful for subclasses.  You are
	    expected to return an IntPtr that represents a handle to
	    an NSDictionary.  This API is kept as a low-level API,
	    since it is consumed by NSTextStorage which might call
	    this method thousands of times per character insertion, so
	    it is very important that this is kept as fast as
	    possible, possibly even caching or reusing existing
	    dictionary instances.

	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LowLevelValue">
      <MemberSignature Language="C#" Value="public virtual IntPtr LowLevelValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int LowLevelValue" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.LowLevelValue" />
      <MemberSignature Language="F#" Value="member this.LowLevelValue : nativeint" Usage="Foundation.NSAttributedString.LowLevelValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("string")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Low-level version of the Value property, returns a handle to the underlying Objective-C NSString.</summary>
        <value>
        </value>
        <remarks>
          <para>
	    In general, you should use the <see cref="P:Foundation.NSAttributedString.Value" />
	    property, which will return a C# string.
	  </para>
          <para>
	    This is the low-level interface to NSAttributedString and
	    you are expected to return an IntPtr that represents a
	    handle to an NSString.  This API is kept as a low-level
	    API, since it is consumed by NSTextStorage which might
	    call this method thousands of times per character
	    insertion, so it is very important that this is kept as
	    fast as possible.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableCopy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject MutableCopy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject MutableCopy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.MutableCopy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.MutableCopy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="nSAttributedString.MutableCopy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSMutableCopying.MutableCopy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("mutableCopyWithZone:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadableTypeIdentifiers">
      <MemberSignature Language="C#" Value="public static string[] ReadableTypeIdentifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string[] ReadableTypeIdentifiers" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.ReadableTypeIdentifiers" />
      <MemberSignature Language="F#" Value="member this.ReadableTypeIdentifiers : string[]" Usage="Foundation.NSAttributedString.ReadableTypeIdentifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("readableTypeIdentifiersForItemProvider")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("readableTypeIdentifiersForItemProvider", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize Size" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.Size" />
      <MemberSignature Language="F#" Value="member this.Size : CoreGraphics.CGSize" Usage="Foundation.NSAttributedString.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("size")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Substring">
      <MemberSignature Language="C#" Value="public Foundation.NSAttributedString Substring (nint start, nint len);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSAttributedString Substring(valuetype System.nint start, valuetype System.nint len) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSAttributedString.Substring(System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="member this.Substring : nint * nint -&gt; Foundation.NSAttributedString" Usage="nSAttributedString.Substring (start, len)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.nint" />
        <Parameter Name="len" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="start">To be added.</param>
        <param name="len">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLayoutSectionOrientation">
      <MemberSignature Language="C#" Value="public static Foundation.NSString TextLayoutSectionOrientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString TextLayoutSectionOrientation" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.TextLayoutSectionOrientation" />
      <MemberSignature Language="F#" Value="member this.TextLayoutSectionOrientation : Foundation.NSString" Usage="Foundation.NSAttributedString.TextLayoutSectionOrientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSTextLayoutSectionOrientation", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLayoutSectionRange">
      <MemberSignature Language="C#" Value="public static Foundation.NSString TextLayoutSectionRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString TextLayoutSectionRange" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.TextLayoutSectionRange" />
      <MemberSignature Language="F#" Value="member this.TextLayoutSectionRange : Foundation.NSString" Usage="Foundation.NSAttributedString.TextLayoutSectionRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSTextLayoutSectionRange", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextLayoutSectionsAttribute">
      <MemberSignature Language="C#" Value="public static Foundation.NSString TextLayoutSectionsAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString TextLayoutSectionsAttribute" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.TextLayoutSectionsAttribute" />
      <MemberSignature Language="F#" Value="member this.TextLayoutSectionsAttribute : Foundation.NSString" Usage="Foundation.NSAttributedString.TextLayoutSectionsAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("NSTextLayoutSectionsAttribute", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.Value" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="Foundation.NSAttributedString.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Contents of the object as a string.</summary>
        <value>
        </value>
        <remarks>
	  Contains the string representation of the attributed string, without including any attributes in the return value.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritableTypeIdentifiers">
      <MemberSignature Language="C#" Value="public static string[] WritableTypeIdentifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string[] WritableTypeIdentifiers" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.WritableTypeIdentifiers" />
      <MemberSignature Language="F#" Value="member this.WritableTypeIdentifiers : string[]" Usage="Foundation.NSAttributedString.WritableTypeIdentifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritableTypeIdentifiersForItemProvider">
      <MemberSignature Language="C#" Value="public virtual string[] WritableTypeIdentifiersForItemProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] WritableTypeIdentifiersForItemProvider" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSAttributedString.WritableTypeIdentifiersForItemProvider" />
      <MemberSignature Language="F#" Value="member this.WritableTypeIdentifiersForItemProvider : string[]" Usage="Foundation.NSAttributedString.WritableTypeIdentifiersForItemProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
