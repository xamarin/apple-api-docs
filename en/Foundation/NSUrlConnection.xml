<Type Name="NSUrlConnection" FullName="Foundation.NSUrlConnection">
  <TypeSignature Language="C#" Value="public class NSUrlConnection : Foundation.NSObject, Foundation.INSURLAuthenticationChallengeSender, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSUrlConnection extends Foundation.NSObject implements class Foundation.INSURLAuthenticationChallengeSender, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSUrlConnection" />
  <TypeSignature Language="F#" Value="type NSUrlConnection = class&#xA;    inherit NSObject&#xA;    interface INSURLAuthenticationChallengeSender&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSURLAuthenticationChallengeSender</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSURLConnection", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A Web Client.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/HttpClient/">HttpClient</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLConnection_Class/index.html">Apple documentation for <c>NSURLConnection</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlConnection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSUrlConnection (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSUrlConnection : Foundation.NSObjectFlag -&gt; Foundation.NSUrlConnection" Usage="new Foundation.NSUrlConnection t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSUrlConnection (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSUrlConnection : nativeint -&gt; Foundation.NSUrlConnection" Usage="new Foundation.NSUrlConnection handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlConnection (Foundation.NSUrlRequest request, Foundation.INSUrlConnectionDelegate connectionDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSUrlRequest request, class Foundation.INSUrlConnectionDelegate connectionDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.#ctor(Foundation.NSUrlRequest,Foundation.INSUrlConnectionDelegate)" />
      <MemberSignature Language="F#" Value="new Foundation.NSUrlConnection : Foundation.NSUrlRequest * Foundation.INSUrlConnectionDelegate -&gt; Foundation.NSUrlConnection" Usage="new Foundation.NSUrlConnection (request, connectionDelegate)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithRequest:delegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'NSUrlSession' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, "Use 'NSUrlSession' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="request" Type="Foundation.NSUrlRequest" />
        <Parameter Name="connectionDelegate" Type="Foundation.INSUrlConnectionDelegate" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="connectionDelegate">To be added.</param>
        <summary>Developers should not use this deprecated constructor. Developers should use 'NSUrlSession' instead.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSUrlConnection (Foundation.NSUrlRequest request, Foundation.INSUrlConnectionDelegate connectionDelegate, bool startImmediately);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSUrlRequest request, class Foundation.INSUrlConnectionDelegate connectionDelegate, bool startImmediately) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.#ctor(Foundation.NSUrlRequest,Foundation.INSUrlConnectionDelegate,System.Boolean)" />
      <MemberSignature Language="F#" Value="new Foundation.NSUrlConnection : Foundation.NSUrlRequest * Foundation.INSUrlConnectionDelegate * bool -&gt; Foundation.NSUrlConnection" Usage="new Foundation.NSUrlConnection (request, connectionDelegate, startImmediately)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithRequest:delegate:startImmediately:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'NSUrlSession' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, "Use 'NSUrlSession' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="request" Type="Foundation.NSUrlRequest" />
        <Parameter Name="connectionDelegate" Type="Foundation.INSUrlConnectionDelegate" />
        <Parameter Name="startImmediately" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="connectionDelegate">To be added.</param>
        <param name="startImmediately">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.Cancel" />
      <MemberSignature Language="F#" Value="abstract member Cancel : unit -&gt; unit&#xA;override this.Cancel : unit -&gt; unit" Usage="nSUrlConnection.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("cancel")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels the asynchronous load of a request.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelAuthenticationChallenge">
      <MemberSignature Language="C#" Value="public virtual void CancelAuthenticationChallenge (Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelAuthenticationChallenge(class Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.CancelAuthenticationChallenge(Foundation.NSUrlAuthenticationChallenge)" />
      <MemberSignature Language="F#" Value="abstract member CancelAuthenticationChallenge : Foundation.NSUrlAuthenticationChallenge -&gt; unit&#xA;override this.CancelAuthenticationChallenge : Foundation.NSUrlAuthenticationChallenge -&gt; unit" Usage="nSUrlConnection.CancelAuthenticationChallenge challenge" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSURLAuthenticationChallengeSender.CancelAuthenticationChallenge(Foundation.NSUrlAuthenticationChallenge)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("cancelAuthenticationChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>Cancels the specified challenge.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHandleRequest">
      <MemberSignature Language="C#" Value="public static bool CanHandleRequest (Foundation.NSUrlRequest request);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool CanHandleRequest(class Foundation.NSUrlRequest request) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.CanHandleRequest(Foundation.NSUrlRequest)" />
      <MemberSignature Language="F#" Value="static member CanHandleRequest : Foundation.NSUrlRequest -&gt; bool" Usage="Foundation.NSUrlConnection.CanHandleRequest request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("canHandleRequest:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Foundation.NSUrlRequest" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <summary>Whether the specified request can be handled, based on a preflight evaluation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUrlConnection.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSUrlConnection.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueWithoutCredential">
      <MemberSignature Language="C#" Value="public virtual void ContinueWithoutCredential (Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ContinueWithoutCredential(class Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.ContinueWithoutCredential(Foundation.NSUrlAuthenticationChallenge)" />
      <MemberSignature Language="F#" Value="abstract member ContinueWithoutCredential : Foundation.NSUrlAuthenticationChallenge -&gt; unit&#xA;override this.ContinueWithoutCredential : Foundation.NSUrlAuthenticationChallenge -&gt; unit" Usage="nSUrlConnection.ContinueWithoutCredential challenge" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSURLAuthenticationChallengeSender.ContinueWithoutCredential(Foundation.NSUrlAuthenticationChallenge)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("continueWithoutCredentialForAuthenticationChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentRequest">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrlRequest CurrentRequest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrlRequest CurrentRequest" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUrlConnection.CurrentRequest" />
      <MemberSignature Language="F#" Value="member this.CurrentRequest : Foundation.NSUrlRequest" Usage="Foundation.NSUrlConnection.CurrentRequest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentRequest")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrlRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current connection request.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="nSUrlConnection.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NSUrlConnection object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSUrlConnection class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the NSUrlConnection ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromRequest">
      <MemberSignature Language="C#" Value="public static Foundation.NSUrlConnection FromRequest (Foundation.NSUrlRequest request, Foundation.INSUrlConnectionDelegate connectionDelegate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSUrlConnection FromRequest(class Foundation.NSUrlRequest request, class Foundation.INSUrlConnectionDelegate connectionDelegate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.FromRequest(Foundation.NSUrlRequest,Foundation.INSUrlConnectionDelegate)" />
      <MemberSignature Language="F#" Value="static member FromRequest : Foundation.NSUrlRequest * Foundation.INSUrlConnectionDelegate -&gt; Foundation.NSUrlConnection" Usage="Foundation.NSUrlConnection.FromRequest (request, connectionDelegate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("connectionWithRequest:delegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'NSUrlSession' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, "Use 'NSUrlSession' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrlConnection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Foundation.NSUrlRequest" />
        <Parameter Name="connectionDelegate" Type="Foundation.INSUrlConnectionDelegate" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="connectionDelegate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NewsstandAssetDownload">
      <MemberSignature Language="C#" Value="public virtual NewsstandKit.NKAssetDownload NewsstandAssetDownload { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class NewsstandKit.NKAssetDownload NewsstandAssetDownload" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUrlConnection.NewsstandAssetDownload" />
      <MemberSignature Language="F#" Value="member this.NewsstandAssetDownload : NewsstandKit.NKAssetDownload" Usage="Foundation.NSUrlConnection.NewsstandAssetDownload" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("newsstandAssetDownload")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("newsstandAssetDownload", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>NewsstandKit.NKAssetDownload</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieves the NKAssetDownload of this newsstand-related connection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalRequest">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrlRequest OriginalRequest { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrlRequest OriginalRequest" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSUrlConnection.OriginalRequest" />
      <MemberSignature Language="F#" Value="member this.OriginalRequest : Foundation.NSUrlRequest" Usage="Foundation.NSUrlConnection.OriginalRequest" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("originalRequest")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrlRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A deep copy of the original connection request.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformDefaultHandling">
      <MemberSignature Language="C#" Value="public virtual void PerformDefaultHandling (Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformDefaultHandling(class Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.PerformDefaultHandling(Foundation.NSUrlAuthenticationChallenge)" />
      <MemberSignature Language="F#" Value="abstract member PerformDefaultHandling : Foundation.NSUrlAuthenticationChallenge -&gt; unit&#xA;override this.PerformDefaultHandling : Foundation.NSUrlAuthenticationChallenge -&gt; unit" Usage="nSUrlConnection.PerformDefaultHandling challenge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("performDefaultHandlingForAuthenticationChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectProtectionSpaceAndContinue">
      <MemberSignature Language="C#" Value="public virtual void RejectProtectionSpaceAndContinue (Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RejectProtectionSpaceAndContinue(class Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.RejectProtectionSpaceAndContinue(Foundation.NSUrlAuthenticationChallenge)" />
      <MemberSignature Language="F#" Value="abstract member RejectProtectionSpaceAndContinue : Foundation.NSUrlAuthenticationChallenge -&gt; unit&#xA;override this.RejectProtectionSpaceAndContinue : Foundation.NSUrlAuthenticationChallenge -&gt; unit" Usage="nSUrlConnection.RejectProtectionSpaceAndContinue challenge" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rejectProtectionSpaceAndContinueWithChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="challenge" Type="Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public void Schedule (Foundation.NSRunLoop aRunLoop, Foundation.NSRunLoopMode forMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Schedule(class Foundation.NSRunLoop aRunLoop, valuetype Foundation.NSRunLoopMode forMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.Schedule(Foundation.NSRunLoop,Foundation.NSRunLoopMode)" />
      <MemberSignature Language="F#" Value="member this.Schedule : Foundation.NSRunLoop * Foundation.NSRunLoopMode -&gt; unit" Usage="nSUrlConnection.Schedule (aRunLoop, forMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aRunLoop" Type="Foundation.NSRunLoop" />
        <Parameter Name="forMode" Type="Foundation.NSRunLoopMode" />
      </Parameters>
      <Docs>
        <param name="aRunLoop">To be added.</param>
        <param name="forMode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Schedule">
      <MemberSignature Language="C#" Value="public virtual void Schedule (Foundation.NSRunLoop aRunLoop, Foundation.NSString forMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Schedule(class Foundation.NSRunLoop aRunLoop, class Foundation.NSString forMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.Schedule(Foundation.NSRunLoop,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member Schedule : Foundation.NSRunLoop * Foundation.NSString -&gt; unit&#xA;override this.Schedule : Foundation.NSRunLoop * Foundation.NSString -&gt; unit" Usage="nSUrlConnection.Schedule (aRunLoop, forMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scheduleInRunLoop:forMode:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aRunLoop" Type="Foundation.NSRunLoop" />
        <Parameter Name="forMode" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="aRunLoop">The run loop to use.</param>
        <param name="forMode">The mode to use.</param>
        <summary>Sets the run loop and mode this connection uses.</summary>
        <remarks>.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendAsynchronousRequest">
      <MemberSignature Language="C#" Value="public static void SendAsynchronousRequest (Foundation.NSUrlRequest request, Foundation.NSOperationQueue queue, Foundation.NSUrlConnectionDataResponse completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendAsynchronousRequest(class Foundation.NSUrlRequest request, class Foundation.NSOperationQueue queue, class Foundation.NSUrlConnectionDataResponse completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.SendAsynchronousRequest(Foundation.NSUrlRequest,Foundation.NSOperationQueue,Foundation.NSUrlConnectionDataResponse)" />
      <MemberSignature Language="F#" Value="static member SendAsynchronousRequest : Foundation.NSUrlRequest * Foundation.NSOperationQueue * Foundation.NSUrlConnectionDataResponse -&gt; unit" Usage="Foundation.NSUrlConnection.SendAsynchronousRequest (request, queue, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("sendAsynchronousRequest:queue:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Foundation.NSUrlRequest" />
        <Parameter Name="queue" Type="Foundation.NSOperationQueue" />
        <Parameter Name="completionHandler" Type="Foundation.NSUrlConnectionDataResponse">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSUrlConnectionDataResponse))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="request">Request to perform</param>
        <param name="queue">Operation queue to dispatch the completion to.</param>
        <param name="completionHandler">Method invoked upon completion</param>
        <summary>Loads the data and invokes a method upon completion.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendRequestAsync">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;Foundation.NSUrlAsyncResult&gt; SendRequestAsync (Foundation.NSUrlRequest request, Foundation.NSOperationQueue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;class Foundation.NSUrlAsyncResult&gt; SendRequestAsync(class Foundation.NSUrlRequest request, class Foundation.NSOperationQueue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.SendRequestAsync(Foundation.NSUrlRequest,Foundation.NSOperationQueue)" />
      <MemberSignature Language="F#" Value="static member SendRequestAsync : Foundation.NSUrlRequest * Foundation.NSOperationQueue -&gt; System.Threading.Tasks.Task&lt;Foundation.NSUrlAsyncResult&gt;" Usage="Foundation.NSUrlConnection.SendRequestAsync (request, queue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSUrlAsyncResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Foundation.NSUrlRequest" />
        <Parameter Name="queue" Type="Foundation.NSOperationQueue" />
      </Parameters>
      <Docs>
        <param name="request">Request to perform</param>
        <param name="queue">Operation queue to dispatch the completion to.</param>
        <summary>Loads the data and invokes a method upon completion.</summary>
        <returns>
          <para>A task that represents the asynchronous SendAsynchronousRequest operation. The value of the TResult parameter is of type <c>Action&lt;Foundation.NSUrlAsyncResult&gt;</c>.</para>
        </returns>
        <remarks>
          <para copied="true">The SendRequestAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SendSynchronousRequest">
      <MemberSignature Language="C#" Value="public static Foundation.NSData SendSynchronousRequest (Foundation.NSUrlRequest request, out Foundation.NSUrlResponse response, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSData SendSynchronousRequest(class Foundation.NSUrlRequest request, [out] class Foundation.NSUrlResponse&amp; response, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.SendSynchronousRequest(Foundation.NSUrlRequest,Foundation.NSUrlResponse@,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member SendSynchronousRequest : Foundation.NSUrlRequest *  *  -&gt; Foundation.NSData" Usage="Foundation.NSUrlConnection.SendSynchronousRequest (request, response, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="Foundation.NSUrlRequest" />
        <Parameter Name="response" Type="Foundation.NSUrlResponse" RefType="out" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="response">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDelegateQueue">
      <MemberSignature Language="C#" Value="public virtual void SetDelegateQueue (Foundation.NSOperationQueue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDelegateQueue(class Foundation.NSOperationQueue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.SetDelegateQueue(Foundation.NSOperationQueue)" />
      <MemberSignature Language="F#" Value="abstract member SetDelegateQueue : Foundation.NSOperationQueue -&gt; unit&#xA;override this.SetDelegateQueue : Foundation.NSOperationQueue -&gt; unit" Usage="nSUrlConnection.SetDelegateQueue queue" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setDelegateQueue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="Foundation.NSOperationQueue" />
      </Parameters>
      <Docs>
        <param name="queue">To be added.</param>
        <summary>Sets the operations queue to be used by this connection's delegate object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public virtual void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.Start" />
      <MemberSignature Language="F#" Value="abstract member Start : unit -&gt; unit&#xA;override this.Start : unit -&gt; unit" Usage="nSUrlConnection.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("start")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unschedule">
      <MemberSignature Language="C#" Value="public void Unschedule (Foundation.NSRunLoop aRunLoop, Foundation.NSRunLoopMode forMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Unschedule(class Foundation.NSRunLoop aRunLoop, valuetype Foundation.NSRunLoopMode forMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.Unschedule(Foundation.NSRunLoop,Foundation.NSRunLoopMode)" />
      <MemberSignature Language="F#" Value="member this.Unschedule : Foundation.NSRunLoop * Foundation.NSRunLoopMode -&gt; unit" Usage="nSUrlConnection.Unschedule (aRunLoop, forMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aRunLoop" Type="Foundation.NSRunLoop" />
        <Parameter Name="forMode" Type="Foundation.NSRunLoopMode" />
      </Parameters>
      <Docs>
        <param name="aRunLoop">To be added.</param>
        <param name="forMode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Unschedule">
      <MemberSignature Language="C#" Value="public virtual void Unschedule (Foundation.NSRunLoop aRunLoop, Foundation.NSString forMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Unschedule(class Foundation.NSRunLoop aRunLoop, class Foundation.NSString forMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.Unschedule(Foundation.NSRunLoop,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member Unschedule : Foundation.NSRunLoop * Foundation.NSString -&gt; unit&#xA;override this.Unschedule : Foundation.NSRunLoop * Foundation.NSString -&gt; unit" Usage="nSUrlConnection.Unschedule (aRunLoop, forMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("unscheduleFromRunLoop:forMode:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aRunLoop" Type="Foundation.NSRunLoop" />
        <Parameter Name="forMode" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="aRunLoop">The run loop to unschedule.</param>
        <param name="forMode">The mode to unschedule.</param>
        <summary>Causes the connection to not use this run loop and mode.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UseCredential">
      <MemberSignature Language="C#" Value="public virtual void UseCredential (Foundation.NSUrlCredential credential, Foundation.NSUrlAuthenticationChallenge challenge);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UseCredential(class Foundation.NSUrlCredential credential, class Foundation.NSUrlAuthenticationChallenge challenge) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSUrlConnection.UseCredential(Foundation.NSUrlCredential,Foundation.NSUrlAuthenticationChallenge)" />
      <MemberSignature Language="F#" Value="abstract member UseCredential : Foundation.NSUrlCredential * Foundation.NSUrlAuthenticationChallenge -&gt; unit&#xA;override this.UseCredential : Foundation.NSUrlCredential * Foundation.NSUrlAuthenticationChallenge -&gt; unit" Usage="nSUrlConnection.UseCredential (credential, challenge)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSURLAuthenticationChallengeSender.UseCredential(Foundation.NSUrlCredential,Foundation.NSUrlAuthenticationChallenge)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("useCredential:forAuthenticationChallenge:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="Foundation.NSUrlCredential" />
        <Parameter Name="challenge" Type="Foundation.NSUrlAuthenticationChallenge" />
      </Parameters>
      <Docs>
        <param name="credential">To be added.</param>
        <param name="challenge">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
