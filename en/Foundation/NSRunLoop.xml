<Type Name="NSRunLoop" FullName="Foundation.NSRunLoop">
  <TypeSignature Language="C#" Value="public class NSRunLoop : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSRunLoop extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSRunLoop" />
  <TypeSignature Language="F#" Value="type NSRunLoop = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSRunLoop", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Message and event dispatching loop.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSRunLoop_Class/index.html">Apple documentation for <c>NSRunLoop</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSRunLoop (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Foundation.NSRunLoop : Foundation.NSObjectFlag -&gt; Foundation.NSRunLoop" Usage="new Foundation.NSRunLoop t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSRunLoop (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Foundation.NSRunLoop : nativeint -&gt; Foundation.NSRunLoop" Usage="new Foundation.NSRunLoop handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptInputForMode">
      <MemberSignature Language="C#" Value="public void AcceptInputForMode (Foundation.NSRunLoopMode mode, Foundation.NSDate limitDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AcceptInputForMode(valuetype Foundation.NSRunLoopMode mode, class Foundation.NSDate limitDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.AcceptInputForMode(Foundation.NSRunLoopMode,Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="member this.AcceptInputForMode : Foundation.NSRunLoopMode * Foundation.NSDate -&gt; unit" Usage="nSRunLoop.AcceptInputForMode (mode, limitDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Foundation.NSRunLoopMode" />
        <Parameter Name="limitDate" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <param name="limitDate">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptInputForMode">
      <MemberSignature Language="C#" Value="public virtual void AcceptInputForMode (Foundation.NSString mode, Foundation.NSDate limitDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AcceptInputForMode(class Foundation.NSString mode, class Foundation.NSDate limitDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.AcceptInputForMode(Foundation.NSString,Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member AcceptInputForMode : Foundation.NSString * Foundation.NSDate -&gt; unit&#xA;override this.AcceptInputForMode : Foundation.NSString * Foundation.NSDate -&gt; unit" Usage="nSRunLoop.AcceptInputForMode (mode, limitDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("acceptInputForMode:beforeDate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Foundation.NSString" />
        <Parameter Name="limitDate" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="mode">The event loop to poll.   Use one of the "RunLoopMode" constants defined in this class.</param>
        <param name="limitDate">To be added.</param>
        <summary>Runs the loop once or until the specified date, accepint input only for the specified mode.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTimer">
      <MemberSignature Language="C#" Value="public void AddTimer (Foundation.NSTimer timer, Foundation.NSRunLoopMode forMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddTimer(class Foundation.NSTimer timer, valuetype Foundation.NSRunLoopMode forMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.AddTimer(Foundation.NSTimer,Foundation.NSRunLoopMode)" />
      <MemberSignature Language="F#" Value="member this.AddTimer : Foundation.NSTimer * Foundation.NSRunLoopMode -&gt; unit" Usage="nSRunLoop.AddTimer (timer, forMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timer" Type="Foundation.NSTimer" />
        <Parameter Name="forMode" Type="Foundation.NSRunLoopMode" />
      </Parameters>
      <Docs>
        <param name="timer">To be added.</param>
        <param name="forMode">The runloop to insert this into.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTimer">
      <MemberSignature Language="C#" Value="public virtual void AddTimer (Foundation.NSTimer timer, Foundation.NSString forMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTimer(class Foundation.NSTimer timer, class Foundation.NSString forMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.AddTimer(Foundation.NSTimer,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member AddTimer : Foundation.NSTimer * Foundation.NSString -&gt; unit&#xA;override this.AddTimer : Foundation.NSTimer * Foundation.NSString -&gt; unit" Usage="nSRunLoop.AddTimer (timer, forMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addTimer:forMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timer" Type="Foundation.NSTimer" />
        <Parameter Name="forMode" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="timer">To be added.</param>
        <param name="forMode">The event loop in which this event will be inserted.   Use one of the "RunLoopMode" constants defined in this class.</param>
        <summary>Registers the specified timer with the specified input mode.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSRunLoop.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Foundation.NSRunLoop.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static Foundation.NSRunLoop Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSRunLoop Current" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSRunLoop.Current" />
      <MemberSignature Language="F#" Value="member this.Current : Foundation.NSRunLoop" Usage="Foundation.NSRunLoop.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("currentRunLoop", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRunLoop</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Static method providing access to the current NSRunLoop.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentMode">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSString CurrentMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSString CurrentMode" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSRunLoop.CurrentMode" />
      <MemberSignature Language="F#" Value="member this.CurrentMode : Foundation.NSString" Usage="Foundation.NSRunLoop.CurrentMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("currentMode")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This run loop's current input mode.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentRunLoopMode">
      <MemberSignature Language="C#" Value="public Foundation.NSRunLoopMode CurrentRunLoopMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSRunLoopMode CurrentRunLoopMode" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSRunLoop.CurrentRunLoopMode" />
      <MemberSignature Language="F#" Value="member this.CurrentRunLoopMode : Foundation.NSRunLoopMode" Usage="Foundation.NSRunLoop.CurrentRunLoopMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRunLoopMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCFRunLoop">
      <MemberSignature Language="C#" Value="public virtual CoreFoundation.CFRunLoop GetCFRunLoop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CoreFoundation.CFRunLoop GetCFRunLoop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.GetCFRunLoop" />
      <MemberSignature Language="F#" Value="abstract member GetCFRunLoop : unit -&gt; CoreFoundation.CFRunLoop&#xA;override this.GetCFRunLoop : unit -&gt; CoreFoundation.CFRunLoop" Usage="nSRunLoop.GetCFRunLoop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("getCFRunLoop")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFRunLoop</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This run loop's underlying CFRunLoop object.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LimitDateForMode">
      <MemberSignature Language="C#" Value="public Foundation.NSDate LimitDateForMode (Foundation.NSRunLoopMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSDate LimitDateForMode(valuetype Foundation.NSRunLoopMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.LimitDateForMode(Foundation.NSRunLoopMode)" />
      <MemberSignature Language="F#" Value="member this.LimitDateForMode : Foundation.NSRunLoopMode -&gt; Foundation.NSDate" Usage="nSRunLoop.LimitDateForMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Foundation.NSRunLoopMode" />
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LimitDateForMode">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDate LimitDateForMode (Foundation.NSString mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSDate LimitDateForMode(class Foundation.NSString mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.LimitDateForMode(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member LimitDateForMode : Foundation.NSString -&gt; Foundation.NSDate&#xA;override this.LimitDateForMode : Foundation.NSString -&gt; Foundation.NSDate" Usage="nSRunLoop.LimitDateForMode mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("limitDateForMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <summary>Does one pass through the run loop in the specified mode and then returns the data at which the timer is scheduled to activate.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Main">
      <MemberSignature Language="C#" Value="public static Foundation.NSRunLoop Main { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSRunLoop Main" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSRunLoop.Main" />
      <MemberSignature Language="F#" Value="member this.Main : Foundation.NSRunLoop" Usage="Foundation.NSRunLoop.Main" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("mainRunLoop", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRunLoop</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The NSRunLoop for the main thread.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NSDefaultRunLoopMode">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NSDefaultRunLoopMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NSDefaultRunLoopMode" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSRunLoop.NSDefaultRunLoopMode" />
      <MemberSignature Language="F#" Value="member this.NSDefaultRunLoopMode : Foundation.NSString" Usage="Foundation.NSRunLoop.NSDefaultRunLoopMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("NSDefaultRunLoopMode", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default mode to handle input sources.   The most common run loop mode.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NSRunLoopCommonModes">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NSRunLoopCommonModes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NSRunLoopCommonModes" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSRunLoop.NSRunLoopCommonModes" />
      <MemberSignature Language="F#" Value="member this.NSRunLoopCommonModes : Foundation.NSString" Usage="Foundation.NSRunLoop.NSRunLoopCommonModes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("NSRunLoopCommonModes", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Run loop mode constant used to run handlers in any of the declared “common” modes.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Perform">
      <MemberSignature Language="C#" Value="public virtual void Perform (Action block);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Perform(class System.Action block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.Perform(System.Action)" />
      <MemberSignature Language="F#" Value="abstract member Perform : Action -&gt; unit&#xA;override this.Perform : Action -&gt; unit" Usage="nSRunLoop.Perform block" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("performBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="block" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Perform">
      <MemberSignature Language="C#" Value="public void Perform (Foundation.NSRunLoopMode[] modes, Action block);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Perform(valuetype Foundation.NSRunLoopMode[] modes, class System.Action block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.Perform(Foundation.NSRunLoopMode[],System.Action)" />
      <MemberSignature Language="F#" Value="member this.Perform : Foundation.NSRunLoopMode[] * Action -&gt; unit" Usage="nSRunLoop.Perform (modes, block)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modes" Type="Foundation.NSRunLoopMode[]" />
        <Parameter Name="block" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="modes">To be added.</param>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Perform">
      <MemberSignature Language="C#" Value="public virtual void Perform (Foundation.NSString[] modes, Action block);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Perform(class Foundation.NSString[] modes, class System.Action block) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.Perform(Foundation.NSString[],System.Action)" />
      <MemberSignature Language="F#" Value="abstract member Perform : Foundation.NSString[] * Action -&gt; unit&#xA;override this.Perform : Foundation.NSString[] * Action -&gt; unit" Usage="nSRunLoop.Perform (modes, block)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("performInModes:block:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modes" Type="Foundation.NSString[]" />
        <Parameter Name="block" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="modes">To be added.</param>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public virtual void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Run() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.Run" />
      <MemberSignature Language="F#" Value="abstract member Run : unit -&gt; unit&#xA;override this.Run : unit -&gt; unit" Usage="nSRunLoop.Run " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("run")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts a permanent loop and begins processing data from all attached inputs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunUntil">
      <MemberSignature Language="C#" Value="public virtual void RunUntil (Foundation.NSDate date);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RunUntil(class Foundation.NSDate date) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.RunUntil(Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member RunUntil : Foundation.NSDate -&gt; unit&#xA;override this.RunUntil : Foundation.NSDate -&gt; unit" Usage="nSRunLoop.RunUntil date" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("runUntilDate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="date" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="date">To be added.</param>
        <summary>Starts a loop that runs until the specified date.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunUntil">
      <MemberSignature Language="C#" Value="public bool RunUntil (Foundation.NSRunLoopMode runLoopMode, Foundation.NSDate limitDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool RunUntil(valuetype Foundation.NSRunLoopMode runLoopMode, class Foundation.NSDate limitDate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.RunUntil(Foundation.NSRunLoopMode,Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="member this.RunUntil : Foundation.NSRunLoopMode * Foundation.NSDate -&gt; bool" Usage="nSRunLoop.RunUntil (runLoopMode, limitDate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runLoopMode" Type="Foundation.NSRunLoopMode" />
        <Parameter Name="limitDate" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="runLoopMode">To be added.</param>
        <param name="limitDate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunUntil">
      <MemberSignature Language="C#" Value="public virtual bool RunUntil (Foundation.NSString runLoopMode, Foundation.NSDate limitdate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool RunUntil(class Foundation.NSString runLoopMode, class Foundation.NSDate limitdate) cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.RunUntil(Foundation.NSString,Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member RunUntil : Foundation.NSString * Foundation.NSDate -&gt; bool&#xA;override this.RunUntil : Foundation.NSString * Foundation.NSDate -&gt; bool" Usage="nSRunLoop.RunUntil (runLoopMode, limitdate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("runMode:beforeDate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runLoopMode" Type="Foundation.NSString" />
        <Parameter Name="limitdate" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="runLoopMode">The event loop which will be monitored.   Use one of the "RunLoopMode" constants defined in this class.</param>
        <param name="limitdate">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.Stop" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="nSRunLoop.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UITrackingRunLoopMode">
      <MemberSignature Language="C#" Value="public static Foundation.NSString UITrackingRunLoopMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString UITrackingRunLoopMode" />
      <MemberSignature Language="DocId" Value="P:Foundation.NSRunLoop.UITrackingRunLoopMode" />
      <MemberSignature Language="F#" Value="member this.UITrackingRunLoopMode : Foundation.NSString" Usage="Foundation.NSRunLoop.UITrackingRunLoopMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UITrackingRunLoopMode", "UIKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UITrackingRunLoopMode</summary>
        <value>
        </value>
        <remarks>The NSRunLoop mode used when tracking controls.   Use this to receive timers and events during UI tracking.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WakeUp">
      <MemberSignature Language="C#" Value="public void WakeUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WakeUp() cil managed" />
      <MemberSignature Language="DocId" Value="M:Foundation.NSRunLoop.WakeUp" />
      <MemberSignature Language="F#" Value="member this.WakeUp : unit -&gt; unit" Usage="nSRunLoop.WakeUp " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
