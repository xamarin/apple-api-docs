<Type Name="NSDataReadingOptions" FullName="Foundation.NSDataReadingOptions">
  <TypeSignature Language="C#" Value="public enum NSDataReadingOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed NSDataReadingOptions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:Foundation.NSDataReadingOptions" />
  <TypeSignature Language="F#" Value="type NSDataReadingOptions = " />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Native</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Flags that determine how NSData loads files.</summary>
    <remarks>
      <para>
	By default NSData will loads the contents of the file in memory
	by allocating a block of memory and then reading the contents of
	the file into it.
      </para>
      <para>

	The Mapped and MappedAlways parameter instruct NSData to use
	the kernel's interface to map the file into the process
	address space.  This has a few advantages: instead of
	allocating read/write memory for the process, that becomes
	real memory usage, the mapped versions map the file into
	memory which means that the data is loaded on demand instead
	of being loaded upfront.  This also allows the kernel to
	discard the data loaded from memory when the system is running
	low on memory. 
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Coordinated">
      <MemberSignature Language="C#" Value="Coordinated" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Foundation.NSDataReadingOptions Coordinated = unsigned int64(4)" />
      <MemberSignature Language="DocId" Value="F:Foundation.NSDataReadingOptions.Coordinated" />
      <MemberSignature Language="F#" Value="Coordinated = 4" Usage="Foundation.NSDataReadingOptions.Coordinated" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSDataReadingOptions</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="Mapped">
      <MemberSignature Language="C#" Value="Mapped" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Foundation.NSDataReadingOptions Mapped = unsigned int64(1)" />
      <MemberSignature Language="DocId" Value="F:Foundation.NSDataReadingOptions.Mapped" />
      <MemberSignature Language="F#" Value="Mapped = 1" Usage="Foundation.NSDataReadingOptions.Mapped" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSDataReadingOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Use the kernel's virtual memory map to load the file, if possible. If sucessful, this replaces read/write memory that can be very expensive with discardable memory that is backed by a file.</summary>
      </Docs>
    </Member>
    <Member MemberName="MappedAlways">
      <MemberSignature Language="C#" Value="MappedAlways" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Foundation.NSDataReadingOptions MappedAlways = unsigned int64(8)" />
      <MemberSignature Language="DocId" Value="F:Foundation.NSDataReadingOptions.MappedAlways" />
      <MemberSignature Language="F#" Value="MappedAlways = 8" Usage="Foundation.NSDataReadingOptions.MappedAlways" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSDataReadingOptions</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>Force NSData to try to use the kernel's mapping support to load the file.   If sucessful, this replaces read/write memory that can be very expensive with discardable memory that is backed by a file.</summary>
      </Docs>
    </Member>
    <Member MemberName="Uncached">
      <MemberSignature Language="C#" Value="Uncached" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype Foundation.NSDataReadingOptions Uncached = unsigned int64(2)" />
      <MemberSignature Language="DocId" Value="F:Foundation.NSDataReadingOptions.Uncached" />
      <MemberSignature Language="F#" Value="Uncached = 2" Usage="Foundation.NSDataReadingOptions.Uncached" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSDataReadingOptions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Notify the kernel that it should not try to cache the contents of this file in its buffer cache.</summary>
      </Docs>
    </Member>
  </Members>
</Type>
