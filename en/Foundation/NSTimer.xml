<Type Name="NSTimer" FullName="Foundation.NSTimer">
  <TypeSignature Language="C#" Value="public class NSTimer : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSTimer extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSTimer", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The timer can trigger actions at certain time intervals.</summary>
    <remarks>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSTimer_Class/index.html">Apple documentation for <c>NSTimer</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSTimer (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSTimer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (Foundation.NSDate date, double seconds, bool repeats, Action&lt;Foundation.NSTimer&gt; block);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSDate date, float64 seconds, bool repeats, class System.Action`1&lt;class Foundation.NSTimer&gt; block) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithFireDate:interval:repeats:block:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="date" Type="Foundation.NSDate" />
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="repeats" Type="System.Boolean" />
        <Parameter Name="block" Type="System.Action&lt;Foundation.NSTimer&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V22))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="date">To be added.</param>
        <param name="seconds">To be added.</param>
        <param name="repeats">To be added.</param>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (Foundation.NSDate date, TimeSpan when, Action&lt;Foundation.NSTimer&gt; action, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSDate date, valuetype System.TimeSpan when, class System.Action`1&lt;class Foundation.NSTimer&gt; action, bool repeats) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="date" Type="Foundation.NSDate" />
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="System.Action&lt;Foundation.NSTimer&gt;" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="date">To be added.</param>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <param name="repeats">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSTimer (Foundation.NSDate date, double seconds, Foundation.NSObject target, ObjCRuntime.Selector selector, Foundation.NSObject userInfo, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSDate date, float64 seconds, class Foundation.NSObject target, class ObjCRuntime.Selector selector, class Foundation.NSObject userInfo, bool repeats) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithFireDate:interval:target:selector:userInfo:repeats:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="date" Type="Foundation.NSDate" />
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="selector" Type="ObjCRuntime.Selector" />
        <Parameter Name="userInfo" Type="Foundation.NSObject" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="date">Time at which the timer will be fired.</param>
        <param name="seconds">For repeating timers, the number of seconds to wait before firing the timer again.</param>
        <param name="target">This is an object containing the method to be invoked when the timer fires.</param>
        <param name="selector">The method on <paramref name="target" /> that will be invoked.</param>
        <param name="userInfo">
          <para>User info for the timer.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingScheduledTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateRepeatingScheduledTimer (double seconds, Action&lt;Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateRepeatingScheduledTimer(float64 seconds, class System.Action`1&lt;class Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="System.Action&lt;Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="seconds">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingScheduledTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateRepeatingScheduledTimer (TimeSpan when, Action&lt;Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateRepeatingScheduledTimer(valuetype System.TimeSpan when, class System.Action`1&lt;class Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="System.Action&lt;Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateRepeatingTimer (double seconds, Action&lt;Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateRepeatingTimer(float64 seconds, class System.Action`1&lt;class Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="System.Action&lt;Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="seconds">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRepeatingTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateRepeatingTimer (TimeSpan when, Action&lt;Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateRepeatingTimer(valuetype System.TimeSpan when, class System.Action`1&lt;class Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="System.Action&lt;Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateScheduledTimer (double seconds, Action&lt;Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateScheduledTimer(float64 seconds, class System.Action`1&lt;class Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="System.Action&lt;Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="seconds">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateScheduledTimer (TimeSpan when, Action&lt;Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateScheduledTimer(valuetype System.TimeSpan when, class System.Action`1&lt;class Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="System.Action&lt;Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateScheduledTimer (double interval, bool repeats, Action&lt;Foundation.NSTimer&gt; block);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateScheduledTimer(float64 interval, bool repeats, class System.Action`1&lt;class Foundation.NSTimer&gt; block) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scheduledTimerWithTimeInterval:repeats:block:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="repeats" Type="System.Boolean" />
        <Parameter Name="block" Type="System.Action&lt;Foundation.NSTimer&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V22))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="interval">To be added.</param>
        <param name="repeats">To be added.</param>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateScheduledTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateScheduledTimer (double seconds, Foundation.NSObject target, ObjCRuntime.Selector selector, Foundation.NSObject userInfo, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateScheduledTimer(float64 seconds, class Foundation.NSObject target, class ObjCRuntime.Selector selector, class Foundation.NSObject userInfo, bool repeats) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scheduledTimerWithTimeInterval:target:selector:userInfo:repeats:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="selector" Type="ObjCRuntime.Selector" />
        <Parameter Name="userInfo" Type="Foundation.NSObject" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between firings of the timer.</param>
        <param name="target">An object that will be invoked when the timer fires.</param>
        <param name="selector">The method to invoke on <paramref name="target" />.</param>
        <param name="userInfo">
          <para>Custom user info for the timer.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>Creates a timer with the specified parameters and schedules it for execution on the current NSRunLoop in the default mode. </summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateTimer (double seconds, Action&lt;Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateTimer(float64 seconds, class System.Action`1&lt;class Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="action" Type="System.Action&lt;Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="seconds">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateTimer (TimeSpan when, Action&lt;Foundation.NSTimer&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateTimer(valuetype System.TimeSpan when, class System.Action`1&lt;class Foundation.NSTimer&gt; action) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="when" Type="System.TimeSpan" />
        <Parameter Name="action" Type="System.Action&lt;Foundation.NSTimer&gt;" />
      </Parameters>
      <Docs>
        <param name="when">To be added.</param>
        <param name="action">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateTimer (double interval, bool repeats, Action&lt;Foundation.NSTimer&gt; block);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateTimer(float64 interval, bool repeats, class System.Action`1&lt;class Foundation.NSTimer&gt; block) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("timerWithTimeInterval:repeats:block:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="System.Double" />
        <Parameter Name="repeats" Type="System.Boolean" />
        <Parameter Name="block" Type="System.Action&lt;Foundation.NSTimer&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V22))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="interval">To be added.</param>
        <param name="repeats">To be added.</param>
        <param name="block">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTimer">
      <MemberSignature Language="C#" Value="public static Foundation.NSTimer CreateTimer (double seconds, Foundation.NSObject target, ObjCRuntime.Selector selector, Foundation.NSObject userInfo, bool repeats);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSTimer CreateTimer(float64 seconds, class Foundation.NSObject target, class ObjCRuntime.Selector selector, class Foundation.NSObject userInfo, bool repeats) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("timerWithTimeInterval:target:selector:userInfo:repeats:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSTimer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="selector" Type="ObjCRuntime.Selector" />
        <Parameter Name="userInfo" Type="Foundation.NSObject" />
        <Parameter Name="repeats" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="seconds">The number of seconds between firings of the timer.</param>
        <param name="target">An object that will be invoked when the timer fires.</param>
        <param name="selector">The method that will be invoked on <paramref name="target" />.</param>
        <param name="userInfo">
          <para>Custom user information.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="repeats">Whether this timer should repeat automatically (true) or will be invalidated after firing the first time (false).</param>
        <summary>Creates a timer object that can be later added to an NSRunLoop.</summary>
        <returns>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NSTimer object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSTimer class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the NSTimer ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fire">
      <MemberSignature Language="C#" Value="public virtual void Fire ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Fire() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fire")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Causes the action to be performed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FireDate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDate FireDate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDate FireDate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("fireDate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setFireDate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The date at with the action will be performed.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>If the timer is no longer valid, then this will return the last date the action was performed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public virtual void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValid">
      <MemberSignature Language="C#" Value="public virtual bool IsValid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValid" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isValid")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <see langword="true" /> if the the timer will still fire at some point in the future.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimeInterval">
      <MemberSignature Language="C#" Value="public virtual double TimeInterval { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TimeInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("timeInterval")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The time interval for the timer.</summary>
        <value>
        </value>
        <remarks>Will return 0 for a non-repeating timer.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tolerance">
      <MemberSignature Language="C#" Value="public virtual double Tolerance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Tolerance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("tolerance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTolerance:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 9, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserInfo">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject UserInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject UserInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("userInfo")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Custom user information that has been provided to the timer.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
