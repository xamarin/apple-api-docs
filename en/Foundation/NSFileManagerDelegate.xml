<Type Name="NSFileManagerDelegate" FullName="Foundation.NSFileManagerDelegate">
  <TypeSignature Language="C#" Value="public class NSFileManagerDelegate : Foundation.NSObject, Foundation.INSFileManagerDelegate, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSFileManagerDelegate extends Foundation.NSObject implements class Foundation.INSFileManagerDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSFileManagerDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("NSFileManagerDelegate", false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A delegate that, when overridden, allows the application developer fine-grained control over events relating to common file discovery and manipulation actions.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/NSFileManagerDelegate_Protocol/index.html">Apple documentation for <c>NSFileManagerDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileManagerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSFileManagerDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSFileManagerDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldCopyItemAtPath">
      <MemberSignature Language="C#" Value="public virtual bool ShouldCopyItemAtPath (Foundation.NSFileManager fm, Foundation.NSString srcPath, Foundation.NSString dstPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldCopyItemAtPath(class Foundation.NSFileManager fm, class Foundation.NSString srcPath, class Foundation.NSString dstPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldCopyItemAtPath:toPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fm" Type="Foundation.NSFileManager" />
        <Parameter Name="srcPath" Type="Foundation.NSString" />
        <Parameter Name="dstPath" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="fm">To be added.</param>
        <param name="srcPath">To be added.</param>
        <param name="dstPath">To be added.</param>
        <summary>Creates a copy of this object, allocating memory from the specified zone or from the default zone if the argument is null.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldCopyItemAtPath">
      <MemberSignature Language="C#" Value="public virtual bool ShouldCopyItemAtPath (Foundation.NSFileManager fileManager, string srcPath, string dstPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldCopyItemAtPath(class Foundation.NSFileManager fileManager, string srcPath, string dstPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="srcPath" Type="System.String" />
        <Parameter Name="dstPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="srcPath">To be added.</param>
        <param name="dstPath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldCopyItemAtUrl">
      <MemberSignature Language="C#" Value="public virtual bool ShouldCopyItemAtUrl (Foundation.NSFileManager fm, Foundation.NSUrl srcUrl, Foundation.NSUrl dstUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldCopyItemAtUrl(class Foundation.NSFileManager fm, class Foundation.NSUrl srcUrl, class Foundation.NSUrl dstUrl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldCopyItemAtURL:toURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fm" Type="Foundation.NSFileManager" />
        <Parameter Name="srcUrl" Type="Foundation.NSUrl" />
        <Parameter Name="dstUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="fm">To be added.</param>
        <param name="srcUrl">To be added.</param>
        <param name="dstUrl">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldLinkItemAtPath">
      <MemberSignature Language="C#" Value="public virtual bool ShouldLinkItemAtPath (Foundation.NSFileManager fileManager, string srcPath, string dstPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldLinkItemAtPath(class Foundation.NSFileManager fileManager, string srcPath, string dstPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldLinkItemAtPath:toPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="srcPath" Type="System.String" />
        <Parameter Name="dstPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="srcPath">To be added.</param>
        <param name="dstPath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldLinkItemAtUrl">
      <MemberSignature Language="C#" Value="public virtual bool ShouldLinkItemAtUrl (Foundation.NSFileManager fileManager, Foundation.NSUrl srcUrl, Foundation.NSUrl dstUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldLinkItemAtUrl(class Foundation.NSFileManager fileManager, class Foundation.NSUrl srcUrl, class Foundation.NSUrl dstUrl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldLinkItemAtURL:toURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="srcUrl" Type="Foundation.NSUrl" />
        <Parameter Name="dstUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="srcUrl">To be added.</param>
        <param name="dstUrl">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldMoveItemAtPath">
      <MemberSignature Language="C#" Value="public virtual bool ShouldMoveItemAtPath (Foundation.NSFileManager fileManager, string srcPath, string dstPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldMoveItemAtPath(class Foundation.NSFileManager fileManager, string srcPath, string dstPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldMoveItemAtPath:toPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="srcPath" Type="System.String" />
        <Parameter Name="dstPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="srcPath">To be added.</param>
        <param name="dstPath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldMoveItemAtUrl">
      <MemberSignature Language="C#" Value="public virtual bool ShouldMoveItemAtUrl (Foundation.NSFileManager fileManager, Foundation.NSUrl srcUrl, Foundation.NSUrl dstUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldMoveItemAtUrl(class Foundation.NSFileManager fileManager, class Foundation.NSUrl srcUrl, class Foundation.NSUrl dstUrl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldMoveItemAtURL:toURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="srcUrl" Type="Foundation.NSUrl" />
        <Parameter Name="dstUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="srcUrl">To be added.</param>
        <param name="dstUrl">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProceedAfterError">
      <MemberSignature Language="C#" Value="public virtual bool ShouldProceedAfterError (Foundation.NSFileManager fm, Foundation.NSDictionary errorInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldProceedAfterError(class Foundation.NSFileManager fm, class Foundation.NSDictionary errorInfo) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("API removed after iOS 2.0 / macOS 10.5. It will never be called by the OS.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fm" Type="Foundation.NSFileManager" />
        <Parameter Name="errorInfo" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="fm">To be added.</param>
        <param name="errorInfo">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProceedAfterErrorCopyingItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldProceedAfterErrorCopyingItem (Foundation.NSFileManager fileManager, Foundation.NSError error, Foundation.NSUrl srcUrl, Foundation.NSUrl dstUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldProceedAfterErrorCopyingItem(class Foundation.NSFileManager fileManager, class Foundation.NSError error, class Foundation.NSUrl srcUrl, class Foundation.NSUrl dstUrl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldProceedAfterError:copyingItemAtURL:toURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="error" Type="Foundation.NSError" />
        <Parameter Name="srcUrl" Type="Foundation.NSUrl" />
        <Parameter Name="dstUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="error">To be added.</param>
        <param name="srcUrl">To be added.</param>
        <param name="dstUrl">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProceedAfterErrorCopyingItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldProceedAfterErrorCopyingItem (Foundation.NSFileManager fileManager, Foundation.NSError error, string srcPath, string dstPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldProceedAfterErrorCopyingItem(class Foundation.NSFileManager fileManager, class Foundation.NSError error, string srcPath, string dstPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldProceedAfterError:copyingItemAtPath:toPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="error" Type="Foundation.NSError" />
        <Parameter Name="srcPath" Type="System.String" />
        <Parameter Name="dstPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="error">To be added.</param>
        <param name="srcPath">To be added.</param>
        <param name="dstPath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProceedAfterErrorLinkingItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldProceedAfterErrorLinkingItem (Foundation.NSFileManager fileManager, Foundation.NSError error, Foundation.NSUrl srcUrl, Foundation.NSUrl dstUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldProceedAfterErrorLinkingItem(class Foundation.NSFileManager fileManager, class Foundation.NSError error, class Foundation.NSUrl srcUrl, class Foundation.NSUrl dstUrl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldProceedAfterError:linkingItemAtURL:toURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="error" Type="Foundation.NSError" />
        <Parameter Name="srcUrl" Type="Foundation.NSUrl" />
        <Parameter Name="dstUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="error">To be added.</param>
        <param name="srcUrl">To be added.</param>
        <param name="dstUrl">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProceedAfterErrorLinkingItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldProceedAfterErrorLinkingItem (Foundation.NSFileManager fileManager, Foundation.NSError error, string srcPath, string dstPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldProceedAfterErrorLinkingItem(class Foundation.NSFileManager fileManager, class Foundation.NSError error, string srcPath, string dstPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldProceedAfterError:linkingItemAtPath:toPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="error" Type="Foundation.NSError" />
        <Parameter Name="srcPath" Type="System.String" />
        <Parameter Name="dstPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="error">To be added.</param>
        <param name="srcPath">To be added.</param>
        <param name="dstPath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProceedAfterErrorMovingItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldProceedAfterErrorMovingItem (Foundation.NSFileManager fileManager, Foundation.NSError error, Foundation.NSUrl srcUrl, Foundation.NSUrl dstUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldProceedAfterErrorMovingItem(class Foundation.NSFileManager fileManager, class Foundation.NSError error, class Foundation.NSUrl srcUrl, class Foundation.NSUrl dstUrl) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldProceedAfterError:movingItemAtURL:toURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="error" Type="Foundation.NSError" />
        <Parameter Name="srcUrl" Type="Foundation.NSUrl" />
        <Parameter Name="dstUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="error">To be added.</param>
        <param name="srcUrl">To be added.</param>
        <param name="dstUrl">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProceedAfterErrorMovingItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldProceedAfterErrorMovingItem (Foundation.NSFileManager fileManager, Foundation.NSError error, string srcPath, string dstPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldProceedAfterErrorMovingItem(class Foundation.NSFileManager fileManager, class Foundation.NSError error, string srcPath, string dstPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldProceedAfterError:movingItemAtPath:toPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="error" Type="Foundation.NSError" />
        <Parameter Name="srcPath" Type="System.String" />
        <Parameter Name="dstPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="error">To be added.</param>
        <param name="srcPath">To be added.</param>
        <param name="dstPath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProceedAfterErrorRemovingItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldProceedAfterErrorRemovingItem (Foundation.NSFileManager fileManager, Foundation.NSError error, Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldProceedAfterErrorRemovingItem(class Foundation.NSFileManager fileManager, class Foundation.NSError error, class Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldProceedAfterError:removingItemAtURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="error" Type="Foundation.NSError" />
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="error">To be added.</param>
        <param name="url">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldProceedAfterErrorRemovingItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldProceedAfterErrorRemovingItem (Foundation.NSFileManager fileManager, Foundation.NSError error, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldProceedAfterErrorRemovingItem(class Foundation.NSFileManager fileManager, class Foundation.NSError error, string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldProceedAfterError:removingItemAtPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="error" Type="Foundation.NSError" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="error">To be added.</param>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRemoveItemAtPath">
      <MemberSignature Language="C#" Value="public virtual bool ShouldRemoveItemAtPath (Foundation.NSFileManager fileManager, string path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldRemoveItemAtPath(class Foundation.NSFileManager fileManager, string path) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldRemoveItemAtPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="path" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="path">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRemoveItemAtUrl">
      <MemberSignature Language="C#" Value="public virtual bool ShouldRemoveItemAtUrl (Foundation.NSFileManager fileManager, Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldRemoveItemAtUrl(class Foundation.NSFileManager fileManager, class Foundation.NSUrl url) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fileManager:shouldRemoveItemAtURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileManager" Type="Foundation.NSFileManager" />
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="fileManager">To be added.</param>
        <param name="url">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
