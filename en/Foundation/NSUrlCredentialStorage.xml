<Type Name="NSUrlCredentialStorage" FullName="Foundation.NSUrlCredentialStorage">
  <TypeSignature Language="C#" Value="public class NSUrlCredentialStorage : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSUrlCredentialStorage extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("NSURLCredentialStorage", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages the URL credential storage.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/Foundation/Classes/NSURLCredentialStorage_Class/index.html">Apple documentation for <c>NSURLCredentialStorage</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSUrlCredentialStorage (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSUrlCredentialStorage (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllCredentials">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary AllCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDictionary AllCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("allCredentials")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString ChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString ChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use NSUrlCredentialStorage.Notifications.ObserveChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("NSURLCredentialStorageChangedNotification", "Foundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for Changed</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:Foundation.NSUrlCredentialStorage+Notifications" />.<see cref="M:Foundation.NSUrlCredentialStorage+Notifications.ObserveChangedNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = NSUrlCredentialStorage.Notifications.ObserveChanged ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = NSUrlCredentialStorage.Notifications.ObserveChanged (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        NSUrlCredentialStorage.ChangedNotification, (notification) => {Console.WriteLine ("Received the notification NSUrlCredentialStorage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification NSUrlCredentialStorage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (NSUrlCredentialStorage.ChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCredentials">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDictionary GetCredentials (MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSDictionary GetCredentials(class MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("credentialsForProtectionSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forProtectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
      </Parameters>
      <Docs>
        <param name="forProtectionSpace">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCredentials">
      <MemberSignature Language="C#" Value="public virtual void GetCredentials (MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace, MonoTouch.Foundation.NSUrlSessionTask task, Action&lt;MonoTouch.Foundation.NSDictionary&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetCredentials(class MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace, class MonoTouch.Foundation.NSUrlSessionTask task, class System.Action`1&lt;class MonoTouch.Foundation.NSDictionary&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("getCredentialsForProtectionSpace:task:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
        <Parameter Name="task" Type="MonoTouch.Foundation.NSUrlSessionTask" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Foundation.NSDictionary&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V22))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="protectionSpace">To be added.</param>
        <param name="task">To be added.</param>
        <param name="completionHandler">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCredentialsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSDictionary&gt; GetCredentialsAsync (MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace, MonoTouch.Foundation.NSUrlSessionTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSDictionary&gt; GetCredentialsAsync(class MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace, class MonoTouch.Foundation.NSUrlSessionTask task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSDictionary&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="protectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
        <Parameter Name="task" Type="MonoTouch.Foundation.NSUrlSessionTask" />
      </Parameters>
      <Docs>
        <param name="protectionSpace">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous GetCredentials operation.  The value of the TResult parameter is of type MonoTouch.Foundation.NSDictionary.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultCredential">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSUrlCredential GetDefaultCredential (MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSUrlCredential GetDefaultCredential(class MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("defaultCredentialForProtectionSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrlCredential</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forProtectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
      </Parameters>
      <Docs>
        <param name="forProtectionSpace">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultCredential">
      <MemberSignature Language="C#" Value="public virtual void GetDefaultCredential (MonoTouch.Foundation.NSUrlProtectionSpace space, MonoTouch.Foundation.NSUrlSessionTask task, Action&lt;MonoTouch.Foundation.NSUrlCredential&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetDefaultCredential(class MonoTouch.Foundation.NSUrlProtectionSpace space, class MonoTouch.Foundation.NSUrlSessionTask task, class System.Action`1&lt;class MonoTouch.Foundation.NSUrlCredential&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("getDefaultCredentialForProtectionSpace:task:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="space" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
        <Parameter Name="task" Type="MonoTouch.Foundation.NSUrlSessionTask" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Foundation.NSUrlCredential&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V23))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="space">To be added.</param>
        <param name="task">To be added.</param>
        <param name="completionHandler">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultCredentialAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrlCredential&gt; GetDefaultCredentialAsync (MonoTouch.Foundation.NSUrlProtectionSpace space, MonoTouch.Foundation.NSUrlSessionTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSUrlCredential&gt; GetDefaultCredentialAsync(class MonoTouch.Foundation.NSUrlProtectionSpace space, class MonoTouch.Foundation.NSUrlSessionTask task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrlCredential&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="space" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
        <Parameter Name="task" Type="MonoTouch.Foundation.NSUrlSessionTask" />
      </Parameters>
      <Docs>
        <param name="space">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous GetDefaultCredential operation.  The value of the TResult parameter is of type MonoTouch.Foundation.NSUrlCredential.</para>
        </returns>
        <remarks>
          <para copied="true">The GetDefaultCredentialAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCredential">
      <MemberSignature Language="C#" Value="public virtual void RemoveCredential (MonoTouch.Foundation.NSUrlCredential credential, MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCredential(class MonoTouch.Foundation.NSUrlCredential credential, class MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeCredential:forProtectionSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="MonoTouch.Foundation.NSUrlCredential" />
        <Parameter Name="forProtectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
      </Parameters>
      <Docs>
        <param name="credential">To be added.</param>
        <param name="forProtectionSpace">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCredential">
      <MemberSignature Language="C#" Value="public virtual void RemoveCredential (MonoTouch.Foundation.NSUrlCredential credential, MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace, MonoTouch.Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCredential(class MonoTouch.Foundation.NSUrlCredential credential, class MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace, class MonoTouch.Foundation.NSDictionary options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeCredential:forProtectionSpace:options:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 9, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="MonoTouch.Foundation.NSUrlCredential" />
        <Parameter Name="forProtectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="credential">To be added.</param>
        <param name="forProtectionSpace">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCredential">
      <MemberSignature Language="C#" Value="public virtual void RemoveCredential (MonoTouch.Foundation.NSUrlCredential credential, MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace, MonoTouch.Foundation.NSDictionary options, MonoTouch.Foundation.NSUrlSessionTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveCredential(class MonoTouch.Foundation.NSUrlCredential credential, class MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace, class MonoTouch.Foundation.NSDictionary options, class MonoTouch.Foundation.NSUrlSessionTask task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeCredential:forProtectionSpace:options:task:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="MonoTouch.Foundation.NSUrlCredential" />
        <Parameter Name="protectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
        <Parameter Name="options" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="task" Type="MonoTouch.Foundation.NSUrlSessionTask" />
      </Parameters>
      <Docs>
        <param name="credential">To be added.</param>
        <param name="protectionSpace">To be added.</param>
        <param name="options">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSynchronizableCredentials">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString RemoveSynchronizableCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString RemoveSynchronizableCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("NSURLCredentialStorageRemoveSynchronizableCredentials", "Foundation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 9, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 7, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 9, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant NSURLCredentialStorageRemoveSynchronizableCredentials</summary>
        <value></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCredential">
      <MemberSignature Language="C#" Value="public virtual void SetCredential (MonoTouch.Foundation.NSUrlCredential credential, MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCredential(class MonoTouch.Foundation.NSUrlCredential credential, class MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setCredential:forProtectionSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="MonoTouch.Foundation.NSUrlCredential" />
        <Parameter Name="forProtectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
      </Parameters>
      <Docs>
        <param name="credential">To be added.</param>
        <param name="forProtectionSpace">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCredential">
      <MemberSignature Language="C#" Value="public virtual void SetCredential (MonoTouch.Foundation.NSUrlCredential credential, MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace, MonoTouch.Foundation.NSUrlSessionTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCredential(class MonoTouch.Foundation.NSUrlCredential credential, class MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace, class MonoTouch.Foundation.NSUrlSessionTask task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setCredential:forProtectionSpace:task:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="MonoTouch.Foundation.NSUrlCredential" />
        <Parameter Name="protectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
        <Parameter Name="task" Type="MonoTouch.Foundation.NSUrlSessionTask" />
      </Parameters>
      <Docs>
        <param name="credential">To be added.</param>
        <param name="protectionSpace">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefaultCredential">
      <MemberSignature Language="C#" Value="public virtual void SetDefaultCredential (MonoTouch.Foundation.NSUrlCredential credential, MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDefaultCredential(class MonoTouch.Foundation.NSUrlCredential credential, class MonoTouch.Foundation.NSUrlProtectionSpace forProtectionSpace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setDefaultCredential:forProtectionSpace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="MonoTouch.Foundation.NSUrlCredential" />
        <Parameter Name="forProtectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
      </Parameters>
      <Docs>
        <param name="credential">To be added.</param>
        <param name="forProtectionSpace">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDefaultCredential">
      <MemberSignature Language="C#" Value="public virtual void SetDefaultCredential (MonoTouch.Foundation.NSUrlCredential credential, MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace, MonoTouch.Foundation.NSUrlSessionTask task);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDefaultCredential(class MonoTouch.Foundation.NSUrlCredential credential, class MonoTouch.Foundation.NSUrlProtectionSpace protectionSpace, class MonoTouch.Foundation.NSUrlSessionTask task) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setDefaultCredential:forProtectionSpace:task:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 10, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="credential" Type="MonoTouch.Foundation.NSUrlCredential" />
        <Parameter Name="protectionSpace" Type="MonoTouch.Foundation.NSUrlProtectionSpace" />
        <Parameter Name="task" Type="MonoTouch.Foundation.NSUrlSessionTask" />
      </Parameters>
      <Docs>
        <param name="credential">To be added.</param>
        <param name="protectionSpace">To be added.</param>
        <param name="task">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SharedCredentialStorage">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSUrlCredentialStorage SharedCredentialStorage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSUrlCredentialStorage SharedCredentialStorage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("sharedCredentialStorage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSUrlCredentialStorage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>