<Namespace Name="MultipeerConnectivity">
  <Docs>
    <summary>The MultipeerConnectivity namespace provides local (WiFi/Bluetooth) peer-to-peer messaging and data connections.</summary>
    <remarks>
      <para>Introduced in iOS 7, Multipeer Connectivity (MPC) allows iOS devices to discover and communicate with other nearby iOS devices. "Nearby" devices are those within Bluetooth range, on the same WiFi network segment, or using WiFi peer connectivity. Additionally, MPC can bridge through connected peers: a WiFi-only iOS device can bridge to a Bluetooth-only iOS device via a peer that has both WiFi and Bluetooth . MPC is considerably easier to use than Zero-Configuration Networking (zeroconf), but MPC is not available for cross-platform scenarios. </para>
      <para>Multipeer Connectivity has two phases: discovery and the session. The role of the discovery phase is to associate an <see cref="T:MultipeerConnectivity.MCSession" /> object on each device with an <see cref="T:MultipeerConnectivity.MCSession" /> object on the peer devices. In the session phase, the <see cref="T:MultipeerConnectivity.MCSession" /> object is the channel through which devices communicate and its lifecycle events are associated with connections, disconnections, transmissions, and receptions.</para>
      <para>The <see cref="T:MultipeerConnectivity.MCSession" /> is instantiated by the application developer. During the discovery phase, there are two roles: advertisers that broadcast their willingness to connect to a certain protocol and browsers that discover these advertisers and invite them to sessions. </para>
      <para> Advertising is managed by either the stock <see cref="T:MultipeerConnectivity.MCAdvertiserAssistant" /> or custom controller that uses a <see cref="T:MultipeerConnectivity.MCNearbyServiceAdvertiser" />. Similarly, browsing is managed by a  <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:MultipeerConnectivity.UIViewController&amp;scope=Xamarin" title="T:MultipeerConnectivity.UIViewController">T:MultipeerConnectivity.UIViewController</a></format>, either the stock <see cref="T:MultipeerConnectivity.MCBrowserViewController" /> or a custom controller that uses a <see cref="T:MultipeerConnectivity.MCNearbyServiceBrowser" /> object to programmatically discover peers. Once a peer is discovered, an invitation is sent with <see cref="M:MultipeerConnectivity.MCNearbyServiceBrowser.InvitePeer*" />). The application user interacts with a system dialog informing them of the invitation. If they accept, the <see cref="T:MultipeerConnectivity.MCSession" /> connects.</para>
      <para>The following image shows the sequence of functions with programmatic advertising and browsing:</para>
      <para>
        <img href="~/MultipeerConnectivity/_images/MultipeerConnectivity.ProgrammaticAdvertisingAndDiscovery.png" />
      </para>
      <para>
        <list type="table">
          <listheader>
            <term>Advertiser</term>
            <description>Browser</description>
            <description>Discussion</description>
          </listheader>
          <item>
            <term>Create a new <see cref="T:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate" /> and assign it to the <see cref="P:MultipeerConnectivity.MCNearbyServiceAdvertiser.Delegate" /> property.</term>
            <description>Create a new <see cref="T:MultipeerConnectivity.MCNearbyServiceBrowserDelegate" /> and assign it to <see cref="P:MultipeerConnectivity.MCNearbyServiceBrowser.Delegate" /> property.</description>
            <description>Discovery and connection is taken care of by the delegate objects for the <see cref="T:MultipeerConnectivity.MCNearbyServiceAdvertiser" /> and <see cref="T:MultipeerConnectivity.MCNearbyServiceBrowser" />.</description>
          </item>
          <item>
            <term>The advertiser may instantiate a new <see cref="T:MultipeerConnectivity.MCSession" /> now or wait until it receives an invitation.</term>
            <description>Instantiate a new <see cref="T:MultipeerConnectivity.MCSession" />.</description>
            <description>The browser should maintain a reference to a single <see cref="T:MultipeerConnectivity.MCSession" /> object no matter how many peers ultimately connect.</description>
          </item>
          <item>
            <term>
              <format type="text/html">
                <a href="https://docs.microsoft.com/en-us/search/index?search=Multipeer%20Connectivity%20MCNearby%20Service%20Advertiser%20Start%20Advertising%20Peer&amp;scope=Xamarin" title="M:MultipeerConnectivity.MCNearbyServiceAdvertiser.StartAdvertisingPeer*">M:MultipeerConnectivity.MCNearbyServiceAdvertiser.StartAdvertisingPeer*</a>
              </format>
            </term>
            <description>
              <format type="text/html">
                <a href="https://docs.microsoft.com/en-us/search/index?search=Multipeer%20Connectivity%20MCNearby%20Service%20Browser%20Start%20Browsing%20For%20Peers&amp;scope=Xamarin" title="M:MultipeerConnectivity.MCNearbyServiceBrowser.StartBrowsingForPeers*">M:MultipeerConnectivity.MCNearbyServiceBrowser.StartBrowsingForPeers*</a>
              </format>
            </description>
            <description>Advertiser and browser must use identical <c>serviceType</c> strings to identify their protocol / application. Peer IDs should be unique to each device.</description>
          </item>
          <item>
            <term>
            </term>
            <description>The system will call <see cref="M:MultipeerConnectivity.MCNearbyServiceBrowserDelegate.FoundPeer*" />, passing in a reference to the <see cref="T:MultipeerConnectivity.MCNearbyServiceBrowser" />. The application developer calls <see cref="M:MultipeerConnectivity.MCNearbyServiceBrowser.InvitePeer*" />, passing in a reference to the previously-created <see cref="T:MultipeerConnectivity.MCSession" />.</description>
            <description>The callback is likely to occur on a background thread. If the application developer wishes to update the display, they must use <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Foundation%20NSObject%20Invoke%20On%20Main%20Thread&amp;scope=Xamarin" title="M:Foundation.NSObject.InvokeOnMainThread*">M:Foundation.NSObject.InvokeOnMainThread*</a></format>.</description>
          </item>
          <item>
            <term>The system will call <see cref="M:MultipeerConnectivity.MCNearbyServiceAdvertiserDelegate.DidReceiveInvitationFromPeer*" />. To connect the devices, the application developer must invoke the passed-in <c>invitationHandler</c> with it's <c>context</c> argument set to <see langword="true" /> and it's <c>session</c> argument set to an <see cref="T:MultipeerConnectivity.MCSession" />.</term>
            <description>
            </description>
            <description>The callback is likely to occur on a background thread. If the application developer wishes to update the display, they must use <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=Foundation%20NSObject%20Invoke%20On%20Main%20Thread&amp;scope=Xamarin" title="M:Foundation.NSObject.InvokeOnMainThread*">M:Foundation.NSObject.InvokeOnMainThread*</a></format>. </description>
          </item>
          <item>
            <term>
            </term>
            <description>
            </description>
            <description>Once the devices are connected, the <see cref="T:MultipeerConnectivity.MCSession" /> objects can be used to transmit messages and data between devices.</description>
          </item>
        </list>
      </para>
    </remarks>
    <related type="article" href="https://blog.xamarin.com/send-the-monkey-a-message-with-multipeer-connectivity" />
  </Docs>
</Namespace>
