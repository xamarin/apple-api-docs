<Type Name="ALAssetsLibrary" FullName="AssetsLibrary.ALAssetsLibrary">
  <TypeSignature Language="C#" Value="public class ALAssetsLibrary : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ALAssetsLibrary extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("ALAssetsLibrary", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Deprecated(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, "Use the 'Photos' API instead.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class that encapsulates access to the video and media of the "Photos" application.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/AssetsLibrary/Reference/ALAssetsLibrary_Class/index.html">Apple documentation for <c>ALAssetsLibrary</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ALAssetsLibrary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ALAssetsLibrary (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ALAssetsLibrary (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAssetsGroupAlbum">
      <MemberSignature Language="C#" Value="public virtual void AddAssetsGroupAlbum (string name, Action&lt;MonoTouch.AssetsLibrary.ALAssetsGroup&gt; resultBlock, Action&lt;MonoTouch.Foundation.NSError&gt; failureBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAssetsGroupAlbum(string name, class System.Action`1&lt;class MonoTouch.AssetsLibrary.ALAssetsGroup&gt; resultBlock, class System.Action`1&lt;class MonoTouch.Foundation.NSError&gt; failureBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addAssetsGroupAlbumWithName:resultBlock:failureBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="resultBlock" Type="System.Action&lt;MonoTouch.AssetsLibrary.ALAssetsGroup&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V29))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="failureBlock" Type="System.Action&lt;MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V6))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="name">The name of the asset group to be created.</param>
        <param name="resultBlock">Executed if there is no error during the asset creation.</param>
        <param name="failureBlock">Executed if there was a failure, such as from the user denying the application from accessing the library.</param>
        <summary>Creates an asset group (such as an album of photographs) to the <see cref="T:AssetsLibrary.ALAssetsLibrary" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssetForUrl">
      <MemberSignature Language="C#" Value="public virtual void AssetForUrl (MonoTouch.Foundation.NSUrl assetURL, Action&lt;MonoTouch.AssetsLibrary.ALAsset&gt; resultBlock, Action&lt;MonoTouch.Foundation.NSError&gt; failureBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AssetForUrl(class MonoTouch.Foundation.NSUrl assetURL, class System.Action`1&lt;class MonoTouch.AssetsLibrary.ALAsset&gt; resultBlock, class System.Action`1&lt;class MonoTouch.Foundation.NSError&gt; failureBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("assetForURL:resultBlock:failureBlock:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assetURL" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="resultBlock" Type="System.Action&lt;MonoTouch.AssetsLibrary.ALAsset&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V30))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="failureBlock" Type="System.Action&lt;MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V6))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="assetURL">To be added.</param>
        <param name="resultBlock">To be added.</param>
        <param name="failureBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AuthorizationStatus">
      <MemberSignature Language="C#" Value="public static MonoTouch.AssetsLibrary.ALAuthorizationStatus AuthorizationStatus { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype MonoTouch.AssetsLibrary.ALAuthorizationStatus AuthorizationStatus" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("authorizationStatus")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AssetsLibrary.ALAuthorizationStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reflects the permissions of the application to access the <see cref="T:AssetsLibrary.ALAssetsLibrary" />.</summary>
        <value>The current status of the application.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedNotification">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString ChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString ChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Advice("Use ALAssetsLibrary.Notifications.ObserveChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("ALAssetsLibraryChangedNotification", "AssetsLibrary")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for Changed</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">If you want to subscribe to this notification, you can use the convenience <see cref="T:AssetsLibrary.ALAssetsLibrary+Notifications" />.<see cref="M:AssetsLibrary.ALAssetsLibrary+Notifications.ObserveChangedNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = ALAssetsLibrary.Notifications.ObserveChanged ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("UpdatedAssets", args.UpdatedAssets);
    Console.WriteLine ("InsertedAssetGroups", args.InsertedAssetGroups);
    Console.WriteLine ("UpdatedAssetGroups", args.UpdatedAssetGroups);
    Console.WriteLine ("DeletedAssetGroupsKey", args.DeletedAssetGroupsKey);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, MonoTouch.AssetsLibrary.ALAssetLibraryChangedEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("UpdatedAssets", args.UpdatedAssets);
    Console.WriteLine ("InsertedAssetGroups", args.InsertedAssetGroups);
    Console.WriteLine ("UpdatedAssetGroups", args.UpdatedAssetGroups);
    Console.WriteLine ("DeletedAssetGroupsKey", args.DeletedAssetGroupsKey);
}

void Setup ()
{
    notification = ALAssetsLibrary.Notifications.ObserveChanged (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        ALAssetsLibrary.ChangedNotification, (notification) => {Console.WriteLine ("Received the notification ALAssetsLibrary", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification ALAssetsLibrary", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (ALAssetsLibrary.ChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeletedAssetGroupsKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString DeletedAssetGroupsKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString DeletedAssetGroupsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("ALAssetLibraryDeletedAssetGroupsKey", "AssetsLibrary")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant ALAssetLibraryDeletedAssetGroupsKey</summary>
        <value></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableSharedPhotoStreamsSupport">
      <MemberSignature Language="C#" Value="public static void DisableSharedPhotoStreamsSupport ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DisableSharedPhotoStreamsSupport() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("disableSharedPhotoStreamsSupport")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Disables notifications and asset retrieval from shared photo streams.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public virtual void Enumerate (MonoTouch.AssetsLibrary.ALAssetsGroupType types, MonoTouch.AssetsLibrary.ALAssetsLibraryGroupsEnumerationResultsDelegate enumerationBlock, Action&lt;MonoTouch.Foundation.NSError&gt; failureBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enumerate(valuetype MonoTouch.AssetsLibrary.ALAssetsGroupType types, class MonoTouch.AssetsLibrary.ALAssetsLibraryGroupsEnumerationResultsDelegate enumerationBlock, class System.Action`1&lt;class MonoTouch.Foundation.NSError&gt; failureBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("enumerateGroupsWithTypes:usingBlock:failureBlock:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="MonoTouch.AssetsLibrary.ALAssetsGroupType" />
        <Parameter Name="enumerationBlock" Type="MonoTouch.AssetsLibrary.ALAssetsLibraryGroupsEnumerationResultsDelegate">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDALAssetsLibraryGroupsEnumerationResultsDelegate))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="failureBlock" Type="System.Action&lt;MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V6))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="types">To be added.</param>
        <param name="enumerationBlock">To be added.</param>
        <param name="failureBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GroupForUrl">
      <MemberSignature Language="C#" Value="public virtual void GroupForUrl (MonoTouch.Foundation.NSUrl groupURL, Action&lt;MonoTouch.AssetsLibrary.ALAssetsGroup&gt; resultBlock, Action&lt;MonoTouch.Foundation.NSError&gt; failureBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GroupForUrl(class MonoTouch.Foundation.NSUrl groupURL, class System.Action`1&lt;class MonoTouch.AssetsLibrary.ALAssetsGroup&gt; resultBlock, class System.Action`1&lt;class MonoTouch.Foundation.NSError&gt; failureBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("groupForURL:resultBlock:failureBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 5, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupURL" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="resultBlock" Type="System.Action&lt;MonoTouch.AssetsLibrary.ALAssetsGroup&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V29))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="failureBlock" Type="System.Action&lt;MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity1V6))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="groupURL">To be added.</param>
        <param name="resultBlock">To be added.</param>
        <param name="failureBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertedAssetGroupsKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString InsertedAssetGroupsKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString InsertedAssetGroupsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("ALAssetLibraryInsertedAssetGroupsKey", "AssetsLibrary")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant ALAssetLibraryInsertedAssetGroupsKey</summary>
        <value></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatedAssetGroupsKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString UpdatedAssetGroupsKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString UpdatedAssetGroupsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("ALAssetLibraryUpdatedAssetGroupsKey", "AssetsLibrary")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant ALAssetLibraryUpdatedAssetGroupsKey</summary>
        <value></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdatedAssetsKey">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString UpdatedAssetsKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString UpdatedAssetsKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("ALAssetLibraryUpdatedAssetsKey", "AssetsLibrary")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 6, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant ALAssetLibraryUpdatedAssetsKey</summary>
        <value></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VideoAtPathIsIsCompatibleWithSavedPhotosAlbum">
      <MemberSignature Language="C#" Value="public virtual bool VideoAtPathIsIsCompatibleWithSavedPhotosAlbum (MonoTouch.Foundation.NSUrl videoPathURL);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VideoAtPathIsIsCompatibleWithSavedPhotosAlbum(class MonoTouch.Foundation.NSUrl videoPathURL) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("videoAtPathIsCompatibleWithSavedPhotosAlbum:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="videoPathURL" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="videoPathURL">A URL locating a video.</param>
        <summary>Whether the video at <paramref name="videoPathURL" /> can be saved in the Photos Album.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Application developers implementing custom Audio-Video capture or editing video files should use this method prior to attempting to add the video to the Photos Album.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteImageToSavedPhotosAlbum">
      <MemberSignature Language="C#" Value="public virtual void WriteImageToSavedPhotosAlbum (MonoTouch.CoreGraphics.CGImage imageData, MonoTouch.AssetsLibrary.ALAssetOrientation orientation, Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt; completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteImageToSavedPhotosAlbum(class MonoTouch.CoreGraphics.CGImage imageData, valuetype MonoTouch.AssetsLibrary.ALAssetOrientation orientation, class System.Action`2&lt;class MonoTouch.Foundation.NSUrl, class MonoTouch.Foundation.NSError&gt; completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("writeImageToSavedPhotosAlbum:orientation:completionBlock:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="orientation" Type="MonoTouch.AssetsLibrary.ALAssetOrientation" />
        <Parameter Name="completionBlock" Type="System.Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V38))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="imageData">To be added.</param>
        <param name="orientation">To be added.</param>
        <param name="completionBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteImageToSavedPhotosAlbum">
      <MemberSignature Language="C#" Value="public virtual void WriteImageToSavedPhotosAlbum (MonoTouch.CoreGraphics.CGImage imageData, MonoTouch.Foundation.NSDictionary metadata, Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt; completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteImageToSavedPhotosAlbum(class MonoTouch.CoreGraphics.CGImage imageData, class MonoTouch.Foundation.NSDictionary metadata, class System.Action`2&lt;class MonoTouch.Foundation.NSUrl, class MonoTouch.Foundation.NSError&gt; completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("writeImageToSavedPhotosAlbum:metadata:completionBlock:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="completionBlock" Type="System.Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V38))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="imageData">To be added.</param>
        <param name="metadata">To be added.</param>
        <param name="completionBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteImageToSavedPhotosAlbum">
      <MemberSignature Language="C#" Value="public virtual void WriteImageToSavedPhotosAlbum (MonoTouch.Foundation.NSData imageData, MonoTouch.Foundation.NSDictionary metadata, Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt; completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteImageToSavedPhotosAlbum(class MonoTouch.Foundation.NSData imageData, class MonoTouch.Foundation.NSDictionary metadata, class System.Action`2&lt;class MonoTouch.Foundation.NSUrl, class MonoTouch.Foundation.NSError&gt; completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("writeImageDataToSavedPhotosAlbum:metadata:completionBlock:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
        <Parameter Name="completionBlock" Type="System.Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V38))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="imageData">To be added.</param>
        <param name="metadata">To be added.</param>
        <param name="completionBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteImageToSavedPhotosAlbumAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt; WriteImageToSavedPhotosAlbumAsync (MonoTouch.CoreGraphics.CGImage imageData, MonoTouch.AssetsLibrary.ALAssetOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSUrl&gt; WriteImageToSavedPhotosAlbumAsync(class MonoTouch.CoreGraphics.CGImage imageData, valuetype MonoTouch.AssetsLibrary.ALAssetOrientation orientation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="orientation" Type="MonoTouch.AssetsLibrary.ALAssetOrientation" />
      </Parameters>
      <Docs>
        <param name="imageData">CGImage to write to disk.</param>
        <param name="orientation">Image orientation.</param>
        <summary>Saves the image to the user's Photos directory.</summary>
        <returns>
          <para>A task that represents the asynchronous WriteImageToSavedPhotosAlbum operation.   The value of the TResult parameter is a MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WriteImageToSavedPhotosAlbumAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt; WriteImageToSavedPhotosAlbumAsync (MonoTouch.CoreGraphics.CGImage imageData, MonoTouch.Foundation.NSDictionary metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSUrl&gt; WriteImageToSavedPhotosAlbumAsync(class MonoTouch.CoreGraphics.CGImage imageData, class MonoTouch.Foundation.NSDictionary metadata) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.CoreGraphics.CGImage" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="imageData">CGImage to write to disk.</param>
        <param name="metadata">Image metadata to store on disk.</param>
        <summary>Saves the image and the provided metadata to the user's Photos directory.</summary>
        <returns>
          <para>A task that represents the asynchronous WriteImageToSavedPhotosAlbum operation.   The value of the TResult parameter is a MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WriteImageToSavedPhotosAlbumAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt; WriteImageToSavedPhotosAlbumAsync (MonoTouch.Foundation.NSData imageData, MonoTouch.Foundation.NSDictionary metadata);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSUrl&gt; WriteImageToSavedPhotosAlbumAsync(class MonoTouch.Foundation.NSData imageData, class MonoTouch.Foundation.NSDictionary metadata) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageData" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="metadata" Type="MonoTouch.Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="imageData">Data buffer containing an encoded image.</param>
        <param name="metadata">Image metadata to store on disk.</param>
        <summary>Saves the image and the provided metadata to the user's Photos directory.</summary>
        <returns>
          <para>A task that represents the asynchronous WriteImageToSavedPhotosAlbum operation.   The value of the TResult parameter is a MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate.</para>
        </returns>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="WriteVideoToSavedPhotosAlbum">
      <MemberSignature Language="C#" Value="public virtual void WriteVideoToSavedPhotosAlbum (MonoTouch.Foundation.NSUrl videoPathURL, Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt; completionBlock);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WriteVideoToSavedPhotosAlbum(class MonoTouch.Foundation.NSUrl videoPathURL, class System.Action`2&lt;class MonoTouch.Foundation.NSUrl, class MonoTouch.Foundation.NSError&gt; completionBlock) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("writeVideoAtPathToSavedPhotosAlbum:completionBlock:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="videoPathURL" Type="MonoTouch.Foundation.NSUrl" />
        <Parameter Name="completionBlock" Type="System.Action&lt;MonoTouch.Foundation.NSUrl,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V38))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="videoPathURL">To be added.</param>
        <param name="completionBlock">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteVideoToSavedPhotosAlbumAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt; WriteVideoToSavedPhotosAlbumAsync (MonoTouch.Foundation.NSUrl videoPathURL);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class MonoTouch.Foundation.NSUrl&gt; WriteVideoToSavedPhotosAlbumAsync(class MonoTouch.Foundation.NSUrl videoPathURL) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;MonoTouch.Foundation.NSUrl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="videoPathURL" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="videoPathURL">To be added.</param>
        <summary>Writes the video at  to the user's Photos directory and executes the  if successful.</summary>
        <returns>
          <para>A task that represents the asynchronous WriteVideoToSavedPhotosAlbum operation.   The value of the TResult parameter is a MonoTouch.AssetsLibrary.ALAssetsLibraryWriteCompletionDelegate.</para>
        </returns>
        <remarks>
          <para copied="true">The WriteVideoToSavedPhotosAlbumAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>