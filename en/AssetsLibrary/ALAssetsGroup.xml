<Type Name="ALAssetsGroup" FullName="AssetsLibrary.ALAssetsGroup">
  <TypeSignature Language="C#" Value="public class ALAssetsGroup : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ALAssetsGroup extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:AssetsLibrary.ALAssetsGroup" />
  <TypeSignature Language="F#" Value="type ALAssetsGroup = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("ALAssetsGroup", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'Photos' API instead.")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, "Use the 'Photos' API instead.")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Sets of assets managed by the Photo application.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/AssetsLibrary/Reference/ALAssetsGroup_Class/index.html">Apple documentation for <c>ALAssetsGroup</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ALAssetsGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:AssetsLibrary.ALAssetsGroup.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ALAssetsGroup (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:AssetsLibrary.ALAssetsGroup.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new AssetsLibrary.ALAssetsGroup : Foundation.NSObjectFlag -&gt; AssetsLibrary.ALAssetsGroup" Usage="new AssetsLibrary.ALAssetsGroup t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal ALAssetsGroup (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:AssetsLibrary.ALAssetsGroup.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new AssetsLibrary.ALAssetsGroup : nativeint -&gt; AssetsLibrary.ALAssetsGroup" Usage="new AssetsLibrary.ALAssetsGroup handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAsset">
      <MemberSignature Language="C#" Value="public virtual bool AddAsset (AssetsLibrary.ALAsset asset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AddAsset(class AssetsLibrary.ALAsset asset) cil managed" />
      <MemberSignature Language="DocId" Value="M:AssetsLibrary.ALAssetsGroup.AddAsset(AssetsLibrary.ALAsset)" />
      <MemberSignature Language="F#" Value="abstract member AddAsset : AssetsLibrary.ALAsset -&gt; bool&#xA;override this.AddAsset : AssetsLibrary.ALAsset -&gt; bool" Usage="aLAssetsGroup.AddAsset asset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addAsset:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asset" Type="AssetsLibrary.ALAsset" />
      </Parameters>
      <Docs>
        <param name="asset">The asset being added.</param>
        <summary>Adds an asset to an existing <see cref="T:AssetsLibrary.ALAssetsGroup" />.</summary>
        <returns>
          <see langword="true" /> if the <paramref name="asset" /> was added successfully.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:AssetsLibrary.ALAssetsGroup.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="AssetsLibrary.ALAssetsGroup.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual nint Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint Count" />
      <MemberSignature Language="DocId" Value="P:AssetsLibrary.ALAssetsGroup.Count" />
      <MemberSignature Language="F#" Value="member this.Count : nint" Usage="AssetsLibrary.ALAssetsGroup.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("numberOfAssets")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of assets in this group.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Editable">
      <MemberSignature Language="C#" Value="public virtual bool Editable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Editable" />
      <MemberSignature Language="DocId" Value="P:AssetsLibrary.ALAssetsGroup.Editable" />
      <MemberSignature Language="F#" Value="member this.Editable : bool" Usage="AssetsLibrary.ALAssetsGroup.Editable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isEditable")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the app may edit the group.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public virtual void Enumerate (AssetsLibrary.ALAssetsEnumerator result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enumerate(class AssetsLibrary.ALAssetsEnumerator result) cil managed" />
      <MemberSignature Language="DocId" Value="M:AssetsLibrary.ALAssetsGroup.Enumerate(AssetsLibrary.ALAssetsEnumerator)" />
      <MemberSignature Language="F#" Value="abstract member Enumerate : AssetsLibrary.ALAssetsEnumerator -&gt; unit&#xA;override this.Enumerate : AssetsLibrary.ALAssetsEnumerator -&gt; unit" Usage="aLAssetsGroup.Enumerate result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateAssetsUsingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="AssetsLibrary.ALAssetsEnumerator">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDALAssetsEnumerator))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="result">Delegate or anonymous method to invoke with the matching asset.</param>
        <summary>Enumerates all the assets in the group.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public virtual void Enumerate (Foundation.NSEnumerationOptions options, AssetsLibrary.ALAssetsEnumerator result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enumerate(valuetype Foundation.NSEnumerationOptions options, class AssetsLibrary.ALAssetsEnumerator result) cil managed" />
      <MemberSignature Language="DocId" Value="M:AssetsLibrary.ALAssetsGroup.Enumerate(Foundation.NSEnumerationOptions,AssetsLibrary.ALAssetsEnumerator)" />
      <MemberSignature Language="F#" Value="abstract member Enumerate : Foundation.NSEnumerationOptions * AssetsLibrary.ALAssetsEnumerator -&gt; unit&#xA;override this.Enumerate : Foundation.NSEnumerationOptions * AssetsLibrary.ALAssetsEnumerator -&gt; unit" Usage="aLAssetsGroup.Enumerate (options, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateAssetsWithOptions:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="Foundation.NSEnumerationOptions" />
        <Parameter Name="result" Type="AssetsLibrary.ALAssetsEnumerator">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDALAssetsEnumerator))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="options">Enumeration options.</param>
        <param name="result">Delegate or anonymous method to invoke with the matching asset.</param>
        <summary>Enumerates all the assets in the group with the specified options.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public virtual void Enumerate (Foundation.NSIndexSet indexSet, Foundation.NSEnumerationOptions options, AssetsLibrary.ALAssetsEnumerator result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Enumerate(class Foundation.NSIndexSet indexSet, valuetype Foundation.NSEnumerationOptions options, class AssetsLibrary.ALAssetsEnumerator result) cil managed" />
      <MemberSignature Language="DocId" Value="M:AssetsLibrary.ALAssetsGroup.Enumerate(Foundation.NSIndexSet,Foundation.NSEnumerationOptions,AssetsLibrary.ALAssetsEnumerator)" />
      <MemberSignature Language="F#" Value="abstract member Enumerate : Foundation.NSIndexSet * Foundation.NSEnumerationOptions * AssetsLibrary.ALAssetsEnumerator -&gt; unit&#xA;override this.Enumerate : Foundation.NSIndexSet * Foundation.NSEnumerationOptions * AssetsLibrary.ALAssetsEnumerator -&gt; unit" Usage="aLAssetsGroup.Enumerate (indexSet, options, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateAssetsAtIndexes:options:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexSet" Type="Foundation.NSIndexSet" />
        <Parameter Name="options" Type="Foundation.NSEnumerationOptions" />
        <Parameter Name="result" Type="AssetsLibrary.ALAssetsEnumerator">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDALAssetsEnumerator))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indexSet">The index of the assets to enumerate.</param>
        <param name="options">Enumeration options.</param>
        <param name="result">Delegate or anonymous method to invoke with the matching asset.</param>
        <summary>Enumerates assets in the group with the specified options.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public Foundation.NSString Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSString Name" />
      <MemberSignature Language="DocId" Value="P:AssetsLibrary.ALAssetsGroup.Name" />
      <MemberSignature Language="F#" Value="member this.Name : Foundation.NSString" Usage="AssetsLibrary.ALAssetsGroup.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of this group.</summary>
        <value>The name of the group.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:AssetsLibrary.ALAssetsGroup.PersistentGroup" />
      </Docs>
    </Member>
    <Member MemberName="PersistentID">
      <MemberSignature Language="C#" Value="public string PersistentID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PersistentID" />
      <MemberSignature Language="DocId" Value="P:AssetsLibrary.ALAssetsGroup.PersistentID" />
      <MemberSignature Language="F#" Value="member this.PersistentID : string" Usage="AssetsLibrary.ALAssetsGroup.PersistentID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>The persistent ID of the <see cref="T:AssetsLibrary.ALAssetsGroup" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PosterImage">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGImage PosterImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGImage PosterImage" />
      <MemberSignature Language="DocId" Value="P:AssetsLibrary.ALAssetsGroup.PosterImage" />
      <MemberSignature Language="F#" Value="member this.PosterImage : CoreGraphics.CGImage" Usage="AssetsLibrary.ALAssetsGroup.PosterImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("posterImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Poster image used for this group.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyUrl">
      <MemberSignature Language="C#" Value="public Foundation.NSUrl PropertyUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl PropertyUrl" />
      <MemberSignature Language="DocId" Value="P:AssetsLibrary.ALAssetsGroup.PropertyUrl" />
      <MemberSignature Language="F#" Value="member this.PropertyUrl : Foundation.NSUrl" Usage="AssetsLibrary.ALAssetsGroup.PropertyUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A unique reference URL for the <see cref="T:AssetsLibrary.ALAssetsGroup" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAssetsFilter">
      <MemberSignature Language="C#" Value="public virtual void SetAssetsFilter (AssetsLibrary.ALAssetsFilter filter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAssetsFilter(class AssetsLibrary.ALAssetsFilter filter) cil managed" />
      <MemberSignature Language="DocId" Value="M:AssetsLibrary.ALAssetsGroup.SetAssetsFilter(AssetsLibrary.ALAssetsFilter)" />
      <MemberSignature Language="F#" Value="abstract member SetAssetsFilter : AssetsLibrary.ALAssetsFilter -&gt; unit&#xA;override this.SetAssetsFilter : AssetsLibrary.ALAssetsFilter -&gt; unit" Usage="aLAssetsGroup.SetAssetsFilter filter" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setAssetsFilter:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="AssetsLibrary.ALAssetsFilter" />
      </Parameters>
      <Docs>
        <param name="filter">
        </param>
        <summary>Sets the filter for enumerating assets on this group.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public AssetsLibrary.ALAssetsGroupType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype AssetsLibrary.ALAssetsGroupType Type" />
      <MemberSignature Language="DocId" Value="P:AssetsLibrary.ALAssetsGroup.Type" />
      <MemberSignature Language="F#" Value="member this.Type : AssetsLibrary.ALAssetsGroupType" Usage="AssetsLibrary.ALAssetsGroup.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>AssetsLibrary.ALAssetsGroupType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type of assets of this group (Library, SavedPhotos, Faces or Events).</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
