<Type Name="ITestCaseBuilder" FullName="NUnit.Framework.Extensibility.ITestCaseBuilder">
  <TypeSignature Language="C#" Value="public interface ITestCaseBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITestCaseBuilder" />
  <AssemblyInfo apistyle="unified">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            The ITestCaseBuilder interface is exposed by a class that knows how to
            build a test case from certain methods.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CanBuildFrom">
      <MemberSignature Language="C#" Value="public bool CanBuildFrom (System.Reflection.MethodInfo method);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanBuildFrom(class System.Reflection.MethodInfo method) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
      </Parameters>
      <Docs>
        <param name="method">The test method to examine</param>
        <summary>
            Examine the method and determine if it is suitable for
            this builder to use in building a TestCase.
            Note that returning false will cause the method to be ignored
            in loading the tests. If it is desired to load the method
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
        <returns>True is the builder can use this method</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>