<Type Name="ISuiteBuilder" FullName="NUnit.Framework.Extensibility.ISuiteBuilder">
  <TypeSignature Language="C#" Value="public interface ISuiteBuilder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISuiteBuilder" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.7.0.0</AssemblyVersion>
    <AssemblyVersion>0.8.0.0</AssemblyVersion>
    <AssemblyVersion>0.9.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>
            The ISuiteBuilder interface is exposed by a class that knows how to
            build a suite from one or more Types.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BuildFrom" apistyle="classic">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Internal.Test BuildFrom (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NUnit.Framework.Internal.Test BuildFrom(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Internal.Test</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type of the fixture to be used</param>
        <summary>
            Build a TestSuite from type provided.
            </summary>
        <returns>A TestSuite</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBuildFrom">
      <MemberSignature Language="C#" Value="public bool CanBuildFrom (Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanBuildFrom(class System.Type type) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="type">The type of the fixture to be used</param>
        <summary>
            Examine the type and determine if it is suitable for
            this builder to use in building a TestSuite.
            Note that returning false will cause the type to be ignored
            in loading the tests. If it is desired to load the suite
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
        <returns>True if the type can be used to build a TestSuite</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
