<Type Name="ITestCaseBuilder2" FullName="NUnit.Framework.Extensibility.ITestCaseBuilder2">
  <TypeSignature Language="C#" Value="public interface ITestCaseBuilder2 : NUnit.Framework.Extensibility.ITestCaseBuilder" apistyle="classic" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITestCaseBuilder2 implements class NUnit.Framework.Extensibility.ITestCaseBuilder" apistyle="classic" />
  <TypeSignature Language="C#" Value="public interface ITestCaseBuilder2 : Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Extensibility.ITestCaseBuilder" apistyle="unified" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ITestCaseBuilder2 implements class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Extensibility.ITestCaseBuilder" apistyle="unified" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>0.7.0.0</AssemblyVersion>
    <AssemblyVersion>0.8.0.0</AssemblyVersion>
    <AssemblyVersion>0.9.0.0</AssemblyVersion>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>NUnit.Framework.Extensibility.ITestCaseBuilder</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
            ITestCaseBuilder2 extends ITestCaseBuilder with methods
            that include the suite for which the test case is being
            built. Test case builders not needing the suite can
            continue to implement ITestCaseBuilder.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BuildFrom" apistyle="classic">
      <MemberSignature Language="C#" Value="public NUnit.Framework.Internal.Test BuildFrom (System.Reflection.MethodInfo method, NUnit.Framework.Internal.Test suite);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class NUnit.Framework.Internal.Test BuildFrom(class System.Reflection.MethodInfo method, class NUnit.Framework.Internal.Test suite) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>NUnit.Framework.Internal.Test</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="suite" Type="NUnit.Framework.Internal.Test" />
      </Parameters>
      <Docs>
        <param name="method">The method to be used as a test case</param>
        <param name="suite">The test suite being populated, or null</param>
        <summary>
            Build a TestCase from the provided MethodInfo for
            inclusion in the suite being constructed.
            </summary>
        <returns>A TestCase or null</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBuildFrom">
      <MemberSignature Language="C#" Value="public bool CanBuildFrom (System.Reflection.MethodInfo method, NUnit.Framework.Internal.Test suite);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanBuildFrom(class System.Reflection.MethodInfo method, class NUnit.Framework.Internal.Test suite) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public bool CanBuildFrom (System.Reflection.MethodInfo method, Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.Test suite);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanBuildFrom(class System.Reflection.MethodInfo method, class Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.Test suite) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.7.0.0</AssemblyVersion>
        <AssemblyVersion>0.8.0.0</AssemblyVersion>
        <AssemblyVersion>0.9.0.0</AssemblyVersion>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyName>MonoTouch.NUnitLite</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="method" Type="System.Reflection.MethodInfo" />
        <Parameter Name="suite" Type="NUnit.Framework.Internal.Test" apistyle="classic" />
        <Parameter Name="suite" Type="Xamarin.iOS.dll=MonoTouch.NUnit.Framework.Internal.Test" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="method">The test method to examine</param>
        <param name="suite">The suite being populated</param>
        <summary>
            Examine the method and determine if it is suitable for
            this builder to use in building a TestCase to be
            included in the suite being populated.
            Note that returning false will cause the method to be ignored
            in loading the tests. If it is desired to load the method
            but label it as non-runnable, ignored, etc., then this
            method must return true.
            </summary>
        <returns>True is the builder can use this method</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
