<Type Name="CLSDataStore" FullName="ClassKit.CLSDataStore">
  <TypeSignature Language="C#" Value="public class CLSDataStore : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CLSDataStore extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:ClassKit.CLSDataStore" />
  <TypeSignature Language="F#" Value="type CLSDataStore = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("CLSDataStore", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 4, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages ClassKit data by operating on hierarchical contexts, such as acts, chapters, sections, and so on.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CLSDataStore (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new ClassKit.CLSDataStore : Foundation.NSObjectFlag -&gt; ClassKit.CLSDataStore" Usage="new ClassKit.CLSDataStore t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CLSDataStore (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new ClassKit.CLSDataStore : nativeint -&gt; ClassKit.CLSDataStore" Usage="new ClassKit.CLSDataStore handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveContext">
      <MemberSignature Language="C#" Value="public virtual ClassKit.CLSContext ActiveContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ClassKit.CLSContext ActiveContext" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.ActiveContext" />
      <MemberSignature Language="F#" Value="member this.ActiveContext : ClassKit.CLSContext" Usage="ClassKit.CLSDataStore.ActiveContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("activeContext", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the context with which the student is currently engaged.</summary>
        <value>The context with which the student is currently engaged.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="ClassKit.CLSDataStore.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public ClassKit.ICLSDataStoreDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ClassKit.ICLSDataStoreDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : ClassKit.ICLSDataStoreDelegate with get, set" Usage="ClassKit.CLSDataStore.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.ICLSDataStoreDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the delegate to use to create new contexts.</summary>
        <value>The delegate to use to create new contexts.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="cLSDataStore.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextsMatching">
      <MemberSignature Language="C#" Value="public virtual void FindContextsMatching (Foundation.NSPredicate predicate, Action&lt;ClassKit.CLSContext[],Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FindContextsMatching(class Foundation.NSPredicate predicate, class System.Action`2&lt;class ClassKit.CLSContext[], class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.FindContextsMatching(Foundation.NSPredicate,System.Action{ClassKit.CLSContext[],Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member FindContextsMatching : Foundation.NSPredicate * Action&lt;ClassKit.CLSContext[], Foundation.NSError&gt; -&gt; unit&#xA;override this.FindContextsMatching : Foundation.NSPredicate * Action&lt;ClassKit.CLSContext[], Foundation.NSError&gt; -&gt; unit" Usage="cLSDataStore.FindContextsMatching (predicate, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("contextsMatchingPredicate:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Foundation.NSPredicate" />
        <Parameter Name="completion" Type="System.Action&lt;ClassKit.CLSContext[],Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V12))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="predicate">The search predicate.</param>
        <param name="completion">A handler that receives the results of the search.</param>
        <summary>Searches for a context that matches the supplied <paramref name="predicate" /> and passes it to a handler when the operation completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextsMatching">
      <MemberSignature Language="C#" Value="public virtual void FindContextsMatching (string[] identifierPath, Action&lt;ClassKit.CLSContext[],Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FindContextsMatching(string[] identifierPath, class System.Action`2&lt;class ClassKit.CLSContext[], class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.FindContextsMatching(System.String[],System.Action{ClassKit.CLSContext[],Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member FindContextsMatching : string[] * Action&lt;ClassKit.CLSContext[], Foundation.NSError&gt; -&gt; unit&#xA;override this.FindContextsMatching : string[] * Action&lt;ClassKit.CLSContext[], Foundation.NSError&gt; -&gt; unit" Usage="cLSDataStore.FindContextsMatching (identifierPath, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("contextsMatchingIdentifierPath:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifierPath" Type="System.String[]" />
        <Parameter Name="completion" Type="System.Action&lt;ClassKit.CLSContext[],Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V12))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="identifierPath">The identifier paths for the contexts to find.</param>
        <param name="completion">A handler that receives the results of the search.</param>
        <summary>Passes the contexts identifed by a set of identifier paths to a handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextsMatchingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt; FindContextsMatchingAsync (Foundation.NSPredicate predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class ClassKit.CLSContext[]&gt; FindContextsMatchingAsync(class Foundation.NSPredicate predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.FindContextsMatchingAsync(Foundation.NSPredicate)" />
      <MemberSignature Language="F#" Value="abstract member FindContextsMatchingAsync : Foundation.NSPredicate -&gt; System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;&#xA;override this.FindContextsMatchingAsync : Foundation.NSPredicate -&gt; System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;" Usage="cLSDataStore.FindContextsMatchingAsync predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Foundation.NSPredicate" />
      </Parameters>
      <Docs>
        <param name="predicate">The search predicate.</param>
        <summary>Searches for a context that matches the supplied <paramref name="predicate" /> and returns a task that contains the result.</summary>
        <returns>A task that contains the search results</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextsMatchingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt; FindContextsMatchingAsync (string[] identifierPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class ClassKit.CLSContext[]&gt; FindContextsMatchingAsync(string[] identifierPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.FindContextsMatchingAsync(System.String[])" />
      <MemberSignature Language="F#" Value="abstract member FindContextsMatchingAsync : string[] -&gt; System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;&#xA;override this.FindContextsMatchingAsync : string[] -&gt; System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;" Usage="cLSDataStore.FindContextsMatchingAsync identifierPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifierPath" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="identifierPath">The identifier paths for the contexts to find.</param>
        <summary>Finds the contexts identifed by a set of identifier paths and returns a task that contains the reults.</summary>
        <returns>A task that contains the search results</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MainAppContext">
      <MemberSignature Language="C#" Value="public virtual ClassKit.CLSContext MainAppContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ClassKit.CLSContext MainAppContext" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.MainAppContext" />
      <MemberSignature Language="F#" Value="member this.MainAppContext : ClassKit.CLSContext" Usage="ClassKit.CLSDataStore.MainAppContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("mainAppContext", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the main, or top-level, context for the data store.</summary>
        <value>The main, or top-level, context for the data store.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (ClassKit.CLSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class ClassKit.CLSContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.Remove(ClassKit.CLSContext)" />
      <MemberSignature Language="F#" Value="abstract member Remove : ClassKit.CLSContext -&gt; unit&#xA;override this.Remove : ClassKit.CLSContext -&gt; unit" Usage="cLSDataStore.Remove context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeContext:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="ClassKit.CLSContext" />
      </Parameters>
      <Docs>
        <param name="context">The context to remove.</param>
        <summary>Removes the specified context from the hierarchy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunningActivity">
      <MemberSignature Language="C#" Value="public virtual ClassKit.CLSActivity RunningActivity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ClassKit.CLSActivity RunningActivity" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.RunningActivity" />
      <MemberSignature Language="F#" Value="member this.RunningActivity : ClassKit.CLSActivity" Usage="ClassKit.CLSDataStore.RunningActivity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("runningActivity", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSActivity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the currently running activity.</summary>
        <value>The currently running activity.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.Save(System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member Save : Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.Save : Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="cLSDataStore.Save completion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("saveWithCompletion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completion">The completion handler that receives an error, if one occurred.</param>
        <summary>Saves the data store.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SaveAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SaveAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.SaveAsync" />
      <MemberSignature Language="F#" Value="abstract member SaveAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.SaveAsync : unit -&gt; System.Threading.Tasks.Task" Usage="cLSDataStore.SaveAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously saves the data store and returns a task that represents the operation.</summary>
        <returns>A task that represents the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shared">
      <MemberSignature Language="C#" Value="public static ClassKit.CLSDataStore Shared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class ClassKit.CLSDataStore Shared" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.Shared" />
      <MemberSignature Language="F#" Value="member this.Shared : ClassKit.CLSDataStore" Usage="ClassKit.CLSDataStore.Shared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("shared", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSDataStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the shared data store instance.</summary>
        <value>The shared data store instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="ClassKit.CLSDataStore.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
