<Type Name="CLSDataStore" FullName="ClassKit.CLSDataStore">
  <TypeSignature Language="C#" Value="public class CLSDataStore : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CLSDataStore extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:ClassKit.CLSDataStore" />
  <TypeSignature Language="F#" Value="type CLSDataStore = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("CLSDataStore", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 4, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages ClassKit data by operating on hierarchical contexts, such as acts, chapters, sections, and so on.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CLSDataStore (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new ClassKit.CLSDataStore : Foundation.NSObjectFlag -&gt; ClassKit.CLSDataStore" Usage="new ClassKit.CLSDataStore t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CLSDataStore (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new ClassKit.CLSDataStore : nativeint -&gt; ClassKit.CLSDataStore" Usage="new ClassKit.CLSDataStore handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActiveContext">
      <MemberSignature Language="C#" Value="public virtual ClassKit.CLSContext ActiveContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ClassKit.CLSContext ActiveContext" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.ActiveContext" />
      <MemberSignature Language="F#" Value="member this.ActiveContext : ClassKit.CLSContext" Usage="ClassKit.CLSDataStore.ActiveContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("activeContext")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("activeContext", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the context with which the student is currently engaged.</summary>
        <value>The context with which the student is currently engaged.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="ClassKit.CLSDataStore.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public ClassKit.ICLSDataStoreDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ClassKit.ICLSDataStoreDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : ClassKit.ICLSDataStoreDelegate with get, set" Usage="ClassKit.CLSDataStore.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.ICLSDataStoreDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the ClassKit.ICLSDataStoreDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the ClassKit.ICLSDataStoreDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="cLSDataStore.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CLSDataStore object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CLSDataStore class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the CLSDataStore ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextsMatching">
      <MemberSignature Language="C#" Value="public virtual void FindContextsMatching (Foundation.NSPredicate predicate, Action&lt;ClassKit.CLSContext[],Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FindContextsMatching(class Foundation.NSPredicate predicate, class System.Action`2&lt;class ClassKit.CLSContext[], class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.FindContextsMatching(Foundation.NSPredicate,System.Action{ClassKit.CLSContext[],Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member FindContextsMatching : Foundation.NSPredicate * Action&lt;ClassKit.CLSContext[], Foundation.NSError&gt; -&gt; unit&#xA;override this.FindContextsMatching : Foundation.NSPredicate * Action&lt;ClassKit.CLSContext[], Foundation.NSError&gt; -&gt; unit" Usage="cLSDataStore.FindContextsMatching (predicate, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("contextsMatchingPredicate:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Foundation.NSPredicate" />
        <Parameter Name="completion" Type="System.Action&lt;ClassKit.CLSContext[],Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V12))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="predicate">The search predicate.</param>
        <param name="completion">A handler that receives the results of the search.</param>
        <summary>Searches for a context that matches the supplied <paramref name="predicate" /> and passes it to a handler when the operation completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextsMatching">
      <MemberSignature Language="C#" Value="public virtual void FindContextsMatching (string[] identifierPath, Action&lt;ClassKit.CLSContext[],Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FindContextsMatching(string[] identifierPath, class System.Action`2&lt;class ClassKit.CLSContext[], class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.FindContextsMatching(System.String[],System.Action{ClassKit.CLSContext[],Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member FindContextsMatching : string[] * Action&lt;ClassKit.CLSContext[], Foundation.NSError&gt; -&gt; unit&#xA;override this.FindContextsMatching : string[] * Action&lt;ClassKit.CLSContext[], Foundation.NSError&gt; -&gt; unit" Usage="cLSDataStore.FindContextsMatching (identifierPath, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("contextsMatchingIdentifierPath:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifierPath" Type="System.String[]" />
        <Parameter Name="completion" Type="System.Action&lt;ClassKit.CLSContext[],Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V12))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="identifierPath">The identifier paths for the contexts to find.</param>
        <param name="completion">A handler that receives the results of the search.</param>
        <summary>Passes the contexts identifed by a set of identifier paths to a handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextsMatchingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt; FindContextsMatchingAsync (Foundation.NSPredicate predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class ClassKit.CLSContext[]&gt; FindContextsMatchingAsync(class Foundation.NSPredicate predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.FindContextsMatchingAsync(Foundation.NSPredicate)" />
      <MemberSignature Language="F#" Value="abstract member FindContextsMatchingAsync : Foundation.NSPredicate -&gt; System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;&#xA;override this.FindContextsMatchingAsync : Foundation.NSPredicate -&gt; System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;" Usage="cLSDataStore.FindContextsMatchingAsync predicate" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="predicate" Type="Foundation.NSPredicate" />
      </Parameters>
      <Docs>
        <param name="predicate">The search predicate.</param>
        <summary>Searches for a context that matches the supplied <paramref name="predicate" /> and returns a task that contains the result.</summary>
        <returns>A task that contains the search results</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindContextsMatchingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt; FindContextsMatchingAsync (string[] identifierPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class ClassKit.CLSContext[]&gt; FindContextsMatchingAsync(string[] identifierPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.FindContextsMatchingAsync(System.String[])" />
      <MemberSignature Language="F#" Value="abstract member FindContextsMatchingAsync : string[] -&gt; System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;&#xA;override this.FindContextsMatchingAsync : string[] -&gt; System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;" Usage="cLSDataStore.FindContextsMatchingAsync identifierPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;ClassKit.CLSContext[]&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifierPath" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="identifierPath">The identifier paths for the contexts to find.</param>
        <summary>Finds the contexts identifed by a set of identifier paths and returns a task that contains the reults.</summary>
        <returns>A task that contains the search results</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MainAppContext">
      <MemberSignature Language="C#" Value="public virtual ClassKit.CLSContext MainAppContext { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ClassKit.CLSContext MainAppContext" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.MainAppContext" />
      <MemberSignature Language="F#" Value="member this.MainAppContext : ClassKit.CLSContext" Usage="ClassKit.CLSDataStore.MainAppContext" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("mainAppContext")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("mainAppContext", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the main, or top-level, context for the data store.</summary>
        <value>The main, or top-level, context for the data store.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (ClassKit.CLSContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class ClassKit.CLSContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.Remove(ClassKit.CLSContext)" />
      <MemberSignature Language="F#" Value="abstract member Remove : ClassKit.CLSContext -&gt; unit&#xA;override this.Remove : ClassKit.CLSContext -&gt; unit" Usage="cLSDataStore.Remove context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeContext:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="ClassKit.CLSContext" />
      </Parameters>
      <Docs>
        <param name="context">The context to remove.</param>
        <summary>Removes the specified context from the hierarchy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RunningActivity">
      <MemberSignature Language="C#" Value="public virtual ClassKit.CLSActivity RunningActivity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ClassKit.CLSActivity RunningActivity" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.RunningActivity" />
      <MemberSignature Language="F#" Value="member this.RunningActivity : ClassKit.CLSActivity" Usage="ClassKit.CLSDataStore.RunningActivity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("runningActivity")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("runningActivity", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSActivity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the currently running activity.</summary>
        <value>The currently running activity.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Save">
      <MemberSignature Language="C#" Value="public virtual void Save (Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Save(class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.Save(System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member Save : Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.Save : Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="cLSDataStore.Save completion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("saveWithCompletion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completion">The completion handler that receives an error, if one occurred.</param>
        <summary>Saves the data store.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task SaveAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task SaveAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSDataStore.SaveAsync" />
      <MemberSignature Language="F#" Value="abstract member SaveAsync : unit -&gt; System.Threading.Tasks.Task&#xA;override this.SaveAsync : unit -&gt; System.Threading.Tasks.Task" Usage="cLSDataStore.SaveAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously saves the data store and returns a task that represents the operation.</summary>
        <returns>A task that represents the operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shared">
      <MemberSignature Language="C#" Value="public static ClassKit.CLSDataStore Shared { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class ClassKit.CLSDataStore Shared" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.Shared" />
      <MemberSignature Language="F#" Value="member this.Shared : ClassKit.CLSDataStore" Usage="ClassKit.CLSDataStore.Shared" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("shared")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("shared", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSDataStore</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the shared data store instance.</summary>
        <value>The shared data store instance.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSDataStore.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="ClassKit.CLSDataStore.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
