<Type Name="CLSContext" FullName="ClassKit.CLSContext">
  <TypeSignature Language="C#" Value="public class CLSContext : ClassKit.CLSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CLSContext extends ClassKit.CLSObject" />
  <TypeSignature Language="DocId" Value="T:ClassKit.CLSContext" />
  <TypeSignature Language="F#" Value="type CLSContext = class&#xA;    inherit CLSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>ClassKit.CLSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("CLSContext", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 4, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.MacOSX, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A node in a ClassKit context hierarchy.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CLSContext (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new ClassKit.CLSContext : Foundation.NSCoder -&gt; ClassKit.CLSContext" Usage="new ClassKit.CLSContext coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CLSContext (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new ClassKit.CLSContext : Foundation.NSObjectFlag -&gt; ClassKit.CLSContext" Usage="new ClassKit.CLSContext t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CLSContext (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new ClassKit.CLSContext : nativeint -&gt; ClassKit.CLSContext" Usage="new ClassKit.CLSContext handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CLSContext (ClassKit.CLSContextType type, string identifier, string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype ClassKit.CLSContextType type, string identifier, string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.#ctor(ClassKit.CLSContextType,System.String,System.String)" />
      <MemberSignature Language="F#" Value="new ClassKit.CLSContext : ClassKit.CLSContextType * string * string -&gt; ClassKit.CLSContext" Usage="new ClassKit.CLSContext (type, identifier, title)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithType:identifier:title:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="type" Type="ClassKit.CLSContextType" />
        <Parameter Name="identifier" Type="System.String" />
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">The context type.</param>
        <param name="identifier">A unique identifier for the context.</param>
        <param name="title">A title for the context.</param>
        <summary>Creates a new ClassKit context with the provided values.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="public virtual bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.Active" />
      <MemberSignature Language="F#" Value="member this.Active : bool" Usage="ClassKit.CLSContext.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isActive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the context is currently active.</summary>
        <value>
          <see langword="true" /> if the context is active. Otherwise, <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChild">
      <MemberSignature Language="C#" Value="public virtual void AddChild (ClassKit.CLSContext childContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddChild(class ClassKit.CLSContext childContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.AddChild(ClassKit.CLSContext)" />
      <MemberSignature Language="F#" Value="abstract member AddChild : ClassKit.CLSContext -&gt; unit&#xA;override this.AddChild : ClassKit.CLSContext -&gt; unit" Usage="cLSContext.AddChild childContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addChildContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="childContext" Type="ClassKit.CLSContext" />
      </Parameters>
      <Docs>
        <param name="childContext">The context to add.</param>
        <summary>Adds the specified context to this context's collection of child contexts.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BecomeActive">
      <MemberSignature Language="C#" Value="public virtual void BecomeActive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void BecomeActive() cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.BecomeActive" />
      <MemberSignature Language="F#" Value="abstract member BecomeActive : unit -&gt; unit&#xA;override this.BecomeActive : unit -&gt; unit" Usage="cLSContext.BecomeActive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("becomeActive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Activates the current context.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="ClassKit.CLSContext.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateNewActivity">
      <MemberSignature Language="C#" Value="public virtual ClassKit.CLSActivity CreateNewActivity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class ClassKit.CLSActivity CreateNewActivity() cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.CreateNewActivity" />
      <MemberSignature Language="F#" Value="abstract member CreateNewActivity : unit -&gt; ClassKit.CLSActivity&#xA;override this.CreateNewActivity : unit -&gt; ClassKit.CLSActivity" Usage="cLSContext.CreateNewActivity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("createNewActivity")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSActivity</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new activity in the context.</summary>
        <returns>A new activity.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentActivity">
      <MemberSignature Language="C#" Value="public virtual ClassKit.CLSActivity CurrentActivity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ClassKit.CLSActivity CurrentActivity" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.CurrentActivity" />
      <MemberSignature Language="F#" Value="member this.CurrentActivity : ClassKit.CLSActivity" Usage="ClassKit.CLSContext.CurrentActivity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("currentActivity", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSActivity</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current activity.</summary>
        <value>The current activity.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayOrder">
      <MemberSignature Language="C#" Value="public virtual nint DisplayOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint DisplayOrder" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.DisplayOrder" />
      <MemberSignature Language="F#" Value="member this.DisplayOrder : nint with get, set" Usage="ClassKit.CLSContext.DisplayOrder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("displayOrder")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDisplayOrder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the display order for this context.</summary>
        <value>An integer that represents the order, among this context's siblings, in which it is displayed.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDescendantMatching">
      <MemberSignature Language="C#" Value="public virtual void FindDescendantMatching (string[] identifierPath, Action&lt;ClassKit.CLSContext,Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FindDescendantMatching(string[] identifierPath, class System.Action`2&lt;class ClassKit.CLSContext, class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.FindDescendantMatching(System.String[],System.Action{ClassKit.CLSContext,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member FindDescendantMatching : string[] * Action&lt;ClassKit.CLSContext, Foundation.NSError&gt; -&gt; unit&#xA;override this.FindDescendantMatching : string[] * Action&lt;ClassKit.CLSContext, Foundation.NSError&gt; -&gt; unit" Usage="cLSContext.FindDescendantMatching (identifierPath, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("descendantMatchingIdentifierPath:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifierPath" Type="System.String[]" />
        <Parameter Name="completion" Type="System.Action&lt;ClassKit.CLSContext,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V11))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="identifierPath">The identifier path for the context to retrieve.</param>
        <param name="completion">A handler that receives the context, if present, and the error, if one occurred.</param>
        <summary>Passes the context that is represented by the provided identifier path to the specified handler.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindDescendantMatchingAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;ClassKit.CLSContext&gt; FindDescendantMatchingAsync (string[] identifierPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class ClassKit.CLSContext&gt; FindDescendantMatchingAsync(string[] identifierPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.FindDescendantMatchingAsync(System.String[])" />
      <MemberSignature Language="F#" Value="abstract member FindDescendantMatchingAsync : string[] -&gt; System.Threading.Tasks.Task&lt;ClassKit.CLSContext&gt;&#xA;override this.FindDescendantMatchingAsync : string[] -&gt; System.Threading.Tasks.Task&lt;ClassKit.CLSContext&gt;" Usage="cLSContext.FindDescendantMatchingAsync identifierPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;ClassKit.CLSContext&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifierPath" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="identifierPath">The identifier path for the context to retrieve.</param>
        <summary>Returns a task that contains the context that is represented by the provided identifier path.</summary>
        <returns>A task that contains the context that is represented by the provided identifier path.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public virtual string Identifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Identifier" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.Identifier" />
      <MemberSignature Language="F#" Value="member this.Identifier : string" Usage="ClassKit.CLSContext.Identifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("identifier")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the unique identifier for this context.</summary>
        <value>The unique identifier for this context.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public virtual ClassKit.CLSContext Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ClassKit.CLSContext Parent" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.Parent" />
      <MemberSignature Language="F#" Value="member this.Parent : ClassKit.CLSContext" Usage="ClassKit.CLSContext.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("parent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSContext</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent context.</summary>
        <value>The parent context</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveFromParent">
      <MemberSignature Language="C#" Value="public virtual void RemoveFromParent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveFromParent() cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.RemoveFromParent" />
      <MemberSignature Language="F#" Value="abstract member RemoveFromParent : unit -&gt; unit&#xA;override this.RemoveFromParent : unit -&gt; unit" Usage="cLSContext.RemoveFromParent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeFromParent")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes this context from its parent.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResignActive">
      <MemberSignature Language="C#" Value="public virtual void ResignActive ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ResignActive() cil managed" />
      <MemberSignature Language="DocId" Value="M:ClassKit.CLSContext.ResignActive" />
      <MemberSignature Language="F#" Value="abstract member ResignActive : unit -&gt; unit&#xA;override this.ResignActive : unit -&gt; unit" Usage="cLSContext.ResignActive " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("resignActive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resigns the active status.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public virtual string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.Title" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="ClassKit.CLSContext.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("title")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTitle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the title for the context.</summary>
        <value>The context title, such as a chapter title or lesson title.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Topic">
      <MemberSignature Language="C#" Value="public ClassKit.CLSContextTopic Topic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ClassKit.CLSContextTopic Topic" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.Topic" />
      <MemberSignature Language="F#" Value="member this.Topic : ClassKit.CLSContextTopic with get, set" Usage="ClassKit.CLSContext.Topic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ClassKit.CLSContextTopic</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the topic that the content of the context covers.</summary>
        <value>The topic that the content of the context covers.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Type">
      <MemberSignature Language="C#" Value="public virtual ClassKit.CLSContextType Type { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ClassKit.CLSContextType Type" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.Type" />
      <MemberSignature Language="F#" Value="member this.Type : ClassKit.CLSContextType" Usage="ClassKit.CLSContext.Type" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("type", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ClassKit.CLSContextType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the type for the content of the context.</summary>
        <value>The type for the content of the context.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UniversalLinkUrl">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl UniversalLinkUrl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl UniversalLinkUrl" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.UniversalLinkUrl" />
      <MemberSignature Language="F#" Value="member this.UniversalLinkUrl : Foundation.NSUrl with get, set" Usage="ClassKit.CLSContext.UniversalLinkUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("universalLinkURL", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setUniversalLinkURL:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the link to the content of the context.</summary>
        <value>The link to the content of the context.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakTopic">
      <MemberSignature Language="C#" Value="protected virtual Foundation.NSString WeakTopic { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSString WeakTopic" />
      <MemberSignature Language="DocId" Value="P:ClassKit.CLSContext.WeakTopic" />
      <MemberSignature Language="F#" Value="member this.WeakTopic : Foundation.NSString with get, set" Usage="ClassKit.CLSContext.WeakTopic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("topic")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTopic:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
