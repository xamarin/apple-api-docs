<Type Name="CTLineBoundsOptions" FullName="CoreText.CTLineBoundsOptions">
  <TypeSignature Language="C#" Value="public enum CTLineBoundsOptions" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed CTLineBoundsOptions extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:CoreText.CTLineBoundsOptions" />
  <TypeSignature Language="F#" Value="type CTLineBoundsOptions = " />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Attributes>
    <Attribute>
      <AttributeName>ObjCRuntime.Native</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Flags</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The kind of bounds computation that we want to perform on a CTLine.</summary>
    <remarks>
      <para>
	These options can be combined.   In the graphic below, you can see the different bounds that are computed based on this flag.
      </para>
      <para>
	The following image shows the effect that the options have on measuring text.
      </para>
      <para>
        <img href="~/CoreText/_images/CoreTextBoundOptions.png" />
      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ExcludeTypographicLeading">
      <MemberSignature Language="C#" Value="ExcludeTypographicLeading" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype CoreText.CTLineBoundsOptions ExcludeTypographicLeading = unsigned int64(1)" />
      <MemberSignature Language="DocId" Value="F:CoreText.CTLineBoundsOptions.ExcludeTypographicLeading" />
      <MemberSignature Language="F#" Value="ExcludeTypographicLeading = 1" Usage="CoreText.CTLineBoundsOptions.ExcludeTypographicLeading" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreText.CTLineBoundsOptions</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Use this option to exclude the typographic leading from the bounds computation (the space between baselines of different lines of text).</summary>
      </Docs>
    </Member>
    <Member MemberName="ExcludeTypographicShifts">
      <MemberSignature Language="C#" Value="ExcludeTypographicShifts" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype CoreText.CTLineBoundsOptions ExcludeTypographicShifts = unsigned int64(2)" />
      <MemberSignature Language="DocId" Value="F:CoreText.CTLineBoundsOptions.ExcludeTypographicShifts" />
      <MemberSignature Language="F#" Value="ExcludeTypographicShifts = 2" Usage="CoreText.CTLineBoundsOptions.ExcludeTypographicShifts" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreText.CTLineBoundsOptions</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Does not take into account kerning or leading information when computing bounds for</summary>
      </Docs>
    </Member>
    <Member MemberName="IncludeLanguageExtents">
      <MemberSignature Language="C#" Value="IncludeLanguageExtents" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype CoreText.CTLineBoundsOptions IncludeLanguageExtents = unsigned int64(32)" />
      <MemberSignature Language="DocId" Value="F:CoreText.CTLineBoundsOptions.IncludeLanguageExtents" />
      <MemberSignature Language="F#" Value="IncludeLanguageExtents = 32" Usage="CoreText.CTLineBoundsOptions.IncludeLanguageExtents" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreText.CTLineBoundsOptions</ReturnType>
      </ReturnValue>
      <MemberValue>32</MemberValue>
      <Docs>
        <summary>To be added.</summary>
      </Docs>
    </Member>
    <Member MemberName="UseGlyphPathBounds">
      <MemberSignature Language="C#" Value="UseGlyphPathBounds" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype CoreText.CTLineBoundsOptions UseGlyphPathBounds = unsigned int64(8)" />
      <MemberSignature Language="DocId" Value="F:CoreText.CTLineBoundsOptions.UseGlyphPathBounds" />
      <MemberSignature Language="F#" Value="UseGlyphPathBounds = 8" Usage="CoreText.CTLineBoundsOptions.UseGlyphPathBounds" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreText.CTLineBoundsOptions</ReturnType>
      </ReturnValue>
      <MemberValue>8</MemberValue>
      <Docs>
        <summary>The bounds of every glyph.   These are typographically not very interesting as they do not take into account the finer details of typography, this returns the bounding box for the actual text rendered.</summary>
      </Docs>
    </Member>
    <Member MemberName="UseHangingPunctuation">
      <MemberSignature Language="C#" Value="UseHangingPunctuation" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype CoreText.CTLineBoundsOptions UseHangingPunctuation = unsigned int64(4)" />
      <MemberSignature Language="DocId" Value="F:CoreText.CTLineBoundsOptions.UseHangingPunctuation" />
      <MemberSignature Language="F#" Value="UseHangingPunctuation = 4" Usage="CoreText.CTLineBoundsOptions.UseHangingPunctuation" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreText.CTLineBoundsOptions</ReturnType>
      </ReturnValue>
      <MemberValue>4</MemberValue>
      <Docs>
        <summary>
	    Hanging Punctuation is a way of typesetting
	    punctuation marks and bullet points, most commonly quotation
	    marks and hyphens, so that they do not disrupt the "flow" of
	    a body of text or "break" the margin of alignment.  It is so
	    called because the punctuation appears to ‘hang’ in the
	    margin of the text, and is not incorporated into the block
	    or column of text. It is commonly used when text is fully justified.
	  </summary>
      </Docs>
    </Member>
    <Member MemberName="UseOpticalBounds">
      <MemberSignature Language="C#" Value="UseOpticalBounds" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype CoreText.CTLineBoundsOptions UseOpticalBounds = unsigned int64(16)" />
      <MemberSignature Language="DocId" Value="F:CoreText.CTLineBoundsOptions.UseOpticalBounds" />
      <MemberSignature Language="F#" Value="UseOpticalBounds = 16" Usage="CoreText.CTLineBoundsOptions.UseOpticalBounds" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreText.CTLineBoundsOptions</ReturnType>
      </ReturnValue>
      <MemberValue>16</MemberValue>
      <Docs>
        <summary>

	  This uses the optical bounds.  Some fonts include
	  information about the optical perception of the font, and it
	  might not align perfectly with the bounding box of the text.

	</summary>
      </Docs>
    </Member>
  </Members>
</Type>
