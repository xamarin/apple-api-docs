<Type Name="SCNGeometrySource" FullName="MonoTouch.SceneKit.SCNGeometrySource">
  <TypeSignature Language="C#" Value="public class SCNGeometrySource : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSSecureCoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SCNGeometrySource extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSCoding, class MonoTouch.Foundation.INSSecureCoding, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("SCNGeometrySource", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 8, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 8, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides vertex data that, in conjunction with SCNGeometryElements, define a 3D object.</summary>
    <remarks>
      <para>Developers who wish to programmatically generate custom <see cref="T:Monotouch.SceneKit.SCNGeometry" /> objects use the <see cref="M:Monotouch.SceneKit.SCNGeometry.Create(MonoTouch.SceneKit.SCNGeometrySource[], MonoTouch.SceneKit.SCNGeometryElement[]" /> method. The form and number of the <see cref="T:Monotouch.SceneKit.SCNGeometrySource" /> objects varies based on the manner in which the developer is describing the geometry (for instance, whether vertex data comes as a series of triplets describing triangles or a moving series that describes a triangle strip) and whether the geometry will simply be colored or have a texture map.</para>
      <para>The following code demonstrates the custom code to create a custom four-sided pyramid. This example shows the use of vertices, defining triangles, on which a single texture is mapped. Note how specific index values within <c>locs</c> are used to define <c>indices</c> and how the ordering within <c>locs</c> affects <c>normals</c> and <c>txCoords</c>. Also, notice how the triplets in <c>indices</c> are linked to <c>SCNGeometryPrimitiveType.Triangles</c>.</para>
      <example>
        <code lang="C#"><![CDATA[
//Lower-left
var a = new SCNVector3(-1, -1, 0);
//Upper-right
var b = new SCNVector3(1, 1, 0);

var halfX = (c.X + a.X) / 2;
var halfY = (c.Y + a.Y) / 2;
var halfZ = (c.Z + a.Z) / 2;

var b = new SCNVector3(a.X, c.Y, halfZ);
var d = new SCNVector3(c.X, a.Y, halfZ);
//Elevate the midpoint so that it's clearly a pyramid
var midPoint = new SCNVector3(halfX, halfY, halfZ + 1.0);

//The vertices of the geometry
var locs = new [] {
	a, b, c, d, midPoint
};
var locSource = SCNGeometrySource.FromVertices(locs);

//Note that this relies on the ordering of locs above
//and it defines triangles (could be triangle strips, etc.)
var indices = new [] {
	//Triangles are defined counter-clockwise!
	4, 1, 0,
	1, 4, 2,
	2, 4, 3,
	3, 4, 0
};


var idxArray = new byte[indices.Length][];
for(int i = 0; i < idxArray.Length; i++)
{
	idxArray[i] = BitConverter.GetBytes(indices[i]);
}
var idxData = NSData.FromArray(idxArray.SelectMany(id => id).ToArray());

//Note that this relies on indices defining triangles
var element = SCNGeometryElement.FromData(idxData, SCNGeometryPrimitiveType.Triangles, indices.Length / 3, sizeof(int));

//Normals are relative to geometry
var normals = new [] {
	new SCNVector3(0, 0, 1),
	new SCNVector3(0, 0, 1),
	new SCNVector3(0, 0, 1),
	new SCNVector3(0, 0, 1),
	new SCNVector3(0, 0, 1),
};;
var normSource = SCNGeometrySource.FromNormals(normals);

//These texture coords will cause the texture to wrap 
var txCoords = new [] {
	new CGPoint(0, 0),
	new CGPoint(0, 1),
	new CGPoint(1, 1),
	new CGPoint(1, 0),
  new CGPoint(0.5, 0.5)
};

var txCoordsSource = SCNGeometrySource.FromTextureCoordinates(txCoords);

var geometry = SCNGeometry.Create(new [] { locSource, normSource, txCoordsSource }, new [] { element });
    ]]></code>
      </example>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/SceneKit/Reference/SCNGeometrySource_Class/index.html">Apple documentation for <c>SCNGeometrySource</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SCNGeometrySource ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SCNGeometrySource (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SCNGeometrySource (MonoTouch.Foundation.NSObjectFlag t);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected SCNGeometrySource (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SCNGeometrySource (IntPtr handle);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="protected SCNGeometrySource (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesPerComponent">
      <MemberSignature Language="C#" Value="public virtual int BytesPerComponent { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesPerComponent" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint BytesPerComponent { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint BytesPerComponent" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("bytesPerComponent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size, in bytes, of the underlying vector data.</summary>
        <value>To be added.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComponentsPerVector">
      <MemberSignature Language="C#" Value="public virtual int ComponentsPerVector { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 ComponentsPerVector" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint ComponentsPerVector { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint ComponentsPerVector" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("componentsPerVector")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of components per vector element in this source.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Data">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSData Data { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSData Data" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("data")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The underlying data buffer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataOffset">
      <MemberSignature Language="C#" Value="public virtual int DataOffset { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataOffset" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint DataOffset { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint DataOffset" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("dataOffset")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The distance, in bytes, from the beginning of <see cref="P:Monotouch.SceneKit.SCNGeometrySource.Data" /> to the first vertex element.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataStride">
      <MemberSignature Language="C#" Value="public virtual int DataStride { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 DataStride" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint DataStride { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint DataStride" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("dataStride")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of bytes between vertex elements in <see cref="P:Monotouch.SceneKit.SCNGeometrySource.Data" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:MonoTouch.Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:MonoTouch.Foundation.NSKeyedArchived" /> and then invoke the <see cref="M:MonoTouch.Foundation.NSKeyedArchived.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If you want to allow your object to be archived, you should override this method and store your state in using the provided <paramref name="encoder" /> parameter.   In addition, you should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="c#">public void override EncodeTo (NSCoder coder){
    c.Encode (1, key: "version");
    c.Encode (userName, key: "userName");
    c.Encode (hostName, key: "hostName");</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FloatComponents">
      <MemberSignature Language="C#" Value="public virtual bool FloatComponents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FloatComponents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("floatComponents")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the vertex component data is made of <see langword="nfloat" /> values.</summary>
        <value>If <see langword="false" />, the vertex component data is made of <see langword="nint" /> values.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromData (MonoTouch.Foundation.NSData data, MonoTouch.Foundation.NSString geometrySourceSemantic, int vectorCount, bool floatComponents, int componentsPerVector, int bytesPerComponent, int offset, int stride);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromData(class MonoTouch.Foundation.NSData data, class MonoTouch.Foundation.NSString geometrySourceSemantic, int32 vectorCount, bool floatComponents, int32 componentsPerVector, int32 bytesPerComponent, int32 offset, int32 stride) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromData (MonoTouch.Foundation.NSData data, MonoTouch.Foundation.NSString geometrySourceSemantic, nint vectorCount, bool floatComponents, nint componentsPerVector, nint bytesPerComponent, nint offset, nint stride);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromData(class MonoTouch.Foundation.NSData data, class MonoTouch.Foundation.NSString geometrySourceSemantic, valuetype System.nint vectorCount, bool floatComponents, valuetype System.nint componentsPerVector, valuetype System.nint bytesPerComponent, valuetype System.nint offset, valuetype System.nint stride) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("geometrySourceWithData:semantic:vectorCount:floatComponents:componentsPerVector:bytesPerComponent:dataOffset:dataStride:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SceneKit.SCNGeometrySource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="geometrySourceSemantic" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="vectorCount" Type="System.Int32" apistyle="classic" />
        <Parameter Name="floatComponents" Type="System.Boolean" />
        <Parameter Name="componentsPerVector" Type="System.Int32" apistyle="classic" />
        <Parameter Name="bytesPerComponent" Type="System.Int32" apistyle="classic" />
        <Parameter Name="offset" Type="System.Int32" apistyle="classic" />
        <Parameter Name="stride" Type="System.Int32" apistyle="classic" />
        <Parameter Name="vectorCount" Type="System.nint" apistyle="unified" />
        <Parameter Name="componentsPerVector" Type="System.nint" apistyle="unified" />
        <Parameter Name="bytesPerComponent" Type="System.nint" apistyle="unified" />
        <Parameter Name="offset" Type="System.nint" apistyle="unified" />
        <Parameter Name="stride" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="geometrySourceSemantic">To be added.</param>
        <param name="vectorCount">To be added.</param>
        <param name="floatComponents">To be added.</param>
        <param name="componentsPerVector">To be added.</param>
        <param name="bytesPerComponent">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="stride">To be added.</param>
        <summary>Factory method to create a new <see cref="T:Monotouch.SceneKit.SCNGeometrySource" /> from a data buffer.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromData">
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromData (MonoTouch.Foundation.NSData data, MonoTouch.SceneKit.SCNGeometrySourceSemantics semantic, int vectorCount, bool floatComponents, int componentsPerVector, int bytesPerComponent, int offset, int stride);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromData(class MonoTouch.Foundation.NSData data, valuetype MonoTouch.SceneKit.SCNGeometrySourceSemantics semantic, int32 vectorCount, bool floatComponents, int32 componentsPerVector, int32 bytesPerComponent, int32 offset, int32 stride) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromData (MonoTouch.Foundation.NSData data, MonoTouch.SceneKit.SCNGeometrySourceSemantics semantic, nint vectorCount, bool floatComponents, nint componentsPerVector, nint bytesPerComponent, nint offset, nint stride);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromData(class MonoTouch.Foundation.NSData data, valuetype MonoTouch.SceneKit.SCNGeometrySourceSemantics semantic, valuetype System.nint vectorCount, bool floatComponents, valuetype System.nint componentsPerVector, valuetype System.nint bytesPerComponent, valuetype System.nint offset, valuetype System.nint stride) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.SceneKit.SCNGeometrySource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSData" />
        <Parameter Name="geometrySourceSemantic" Type="MonoTouch.SceneKit.SCNGeometrySourceSemantics" />
        <Parameter Name="vectorCount" Type="System.Int32" apistyle="classic" />
        <Parameter Name="floatComponents" Type="System.Boolean" />
        <Parameter Name="componentsPerVector" Type="System.Int32" apistyle="classic" />
        <Parameter Name="bytesPerComponent" Type="System.Int32" apistyle="classic" />
        <Parameter Name="offset" Type="System.Int32" apistyle="classic" />
        <Parameter Name="stride" Type="System.Int32" apistyle="classic" />
        <Parameter Name="vectorCount" Type="System.nint" apistyle="unified" />
        <Parameter Name="componentsPerVector" Type="System.nint" apistyle="unified" />
        <Parameter Name="bytesPerComponent" Type="System.nint" apistyle="unified" />
        <Parameter Name="offset" Type="System.nint" apistyle="unified" />
        <Parameter Name="stride" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="semantic">To be added.</param>
        <param name="vectorCount">To be added.</param>
        <param name="floatComponents">To be added.</param>
        <param name="componentsPerVector">To be added.</param>
        <param name="bytesPerComponent">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="stride">To be added.</param>
        <summary>Factory method to create a new <see cref="T:Monotouch.SceneKit.SCNGeometrySource" /> from a data buffer.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMetalBuffer">
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromMetalBuffer (MonoTouch.Metal.IMTLBuffer mtlBuffer, MonoTouch.Metal.MTLVertexFormat vertexFormat, MonoTouch.Foundation.NSString geometrySourceSemantic, int vertexCount, int offset, int stride);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromMetalBuffer(class MonoTouch.Metal.IMTLBuffer mtlBuffer, valuetype MonoTouch.Metal.MTLVertexFormat vertexFormat, class MonoTouch.Foundation.NSString geometrySourceSemantic, int32 vertexCount, int32 offset, int32 stride) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromMetalBuffer (MonoTouch.Metal.IMTLBuffer mtlBuffer, MonoTouch.Metal.MTLVertexFormat vertexFormat, MonoTouch.Foundation.NSString geometrySourceSemantic, nint vertexCount, nint offset, nint stride);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromMetalBuffer(class MonoTouch.Metal.IMTLBuffer mtlBuffer, valuetype MonoTouch.Metal.MTLVertexFormat vertexFormat, class MonoTouch.Foundation.NSString geometrySourceSemantic, valuetype System.nint vertexCount, valuetype System.nint offset, valuetype System.nint stride) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("geometrySourceWithBuffer:vertexFormat:semantic:vertexCount:dataOffset:dataStride:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 11, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.SceneKit.SCNGeometrySource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mtlBuffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="vertexFormat" Type="MonoTouch.Metal.MTLVertexFormat" />
        <Parameter Name="geometrySourceSemantic" Type="MonoTouch.Foundation.NSString" />
        <Parameter Name="vertexCount" Type="System.Int32" apistyle="classic" />
        <Parameter Name="offset" Type="System.Int32" apistyle="classic" />
        <Parameter Name="stride" Type="System.Int32" apistyle="classic" />
        <Parameter Name="vertexCount" Type="System.nint" apistyle="unified" />
        <Parameter Name="offset" Type="System.nint" apistyle="unified" />
        <Parameter Name="stride" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="mtlBuffer">To be added.</param>
        <param name="vertexFormat">To be added.</param>
        <param name="geometrySourceSemantic">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="stride">To be added.</param>
        <summary>Factory method to create a new <see cref="T:Monotouch.SceneKit.SCNGeometrySource" /> from a data buffer.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromMetalBuffer">
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromMetalBuffer (MonoTouch.Metal.IMTLBuffer mtlBuffer, MonoTouch.Metal.MTLVertexFormat vertexFormat, MonoTouch.SceneKit.SCNGeometrySourceSemantics semantic, int vertexCount, int offset, int stride);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromMetalBuffer(class MonoTouch.Metal.IMTLBuffer mtlBuffer, valuetype MonoTouch.Metal.MTLVertexFormat vertexFormat, valuetype MonoTouch.SceneKit.SCNGeometrySourceSemantics semantic, int32 vertexCount, int32 offset, int32 stride) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromMetalBuffer (MonoTouch.Metal.IMTLBuffer mtlBuffer, MonoTouch.Metal.MTLVertexFormat vertexFormat, MonoTouch.SceneKit.SCNGeometrySourceSemantics semantic, nint vertexCount, nint offset, nint stride);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromMetalBuffer(class MonoTouch.Metal.IMTLBuffer mtlBuffer, valuetype MonoTouch.Metal.MTLVertexFormat vertexFormat, valuetype MonoTouch.SceneKit.SCNGeometrySourceSemantics semantic, valuetype System.nint vertexCount, valuetype System.nint offset, valuetype System.nint stride) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.SceneKit.SCNGeometrySource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mtlBuffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="vertexFormat" Type="MonoTouch.Metal.MTLVertexFormat" />
        <Parameter Name="semantic" Type="MonoTouch.SceneKit.SCNGeometrySourceSemantics" />
        <Parameter Name="vertexCount" Type="System.Int32" apistyle="classic" />
        <Parameter Name="offset" Type="System.Int32" apistyle="classic" />
        <Parameter Name="stride" Type="System.Int32" apistyle="classic" />
        <Parameter Name="vertexCount" Type="System.nint" apistyle="unified" />
        <Parameter Name="offset" Type="System.nint" apistyle="unified" />
        <Parameter Name="stride" Type="System.nint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="mtlBuffer">To be added.</param>
        <param name="vertexFormat">To be added.</param>
        <param name="semantic">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="stride">To be added.</param>
        <summary>Factory method to create a new <see cref="T:Monotouch.SceneKit.SCNGeometrySource" /> from a data buffer.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromNormals">
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromNormals (MonoTouch.SceneKit.SCNVector3[] normals);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromNormals(valuetype MonoTouch.SceneKit.SCNVector3[] normals) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.SceneKit.SCNGeometrySource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="normals" Type="MonoTouch.SceneKit.SCNVector3[]" />
      </Parameters>
      <Docs>
        <param name="normals">To be added.</param>
        <summary>Factory method that creates a source for vertex normals.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The <paramref name="normals" /> must correspond directly to their associated vertices (in another <see cref="T:Monotouch.SceneKit.SCNGeometrySource" />).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTextureCoordinates">
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromTextureCoordinates (System.Drawing.PointF[] texcoords);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromTextureCoordinates(valuetype System.Drawing.PointF[] texcoords) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromTextureCoordinates (MonoTouch.CoreGraphics.CGPoint[] texcoords);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromTextureCoordinates(valuetype MonoTouch.CoreGraphics.CGPoint[] texcoords) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.SceneKit.SCNGeometrySource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texcoords" Type="System.Drawing.PointF[]" apistyle="classic" />
        <Parameter Name="texcoords" Type="MonoTouch.CoreGraphics.CGPoint[]" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="texcoords">To be added.</param>
        <summary>Factory method that creates a source for texture coordinates.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The <paramref name="texcoords" /> must correspond directly to their associated vertices (in another <see cref="T:Monotouch.SceneKit.SCNGeometrySource" />).</para>
          <para>For non-tiling textures, texture coordinates are values between 0 and 1 that describe the mapping between a texture location and a geometry location. A value of [0,0] represents the origin of the texture while [1,1] represents the point at its furthest extent.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromVertices">
      <MemberSignature Language="C#" Value="public static MonoTouch.SceneKit.SCNGeometrySource FromVertices (MonoTouch.SceneKit.SCNVector3[] vertices);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.SceneKit.SCNGeometrySource FromVertices(valuetype MonoTouch.SceneKit.SCNVector3[] vertices) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.SceneKit.SCNGeometrySource</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vertices" Type="MonoTouch.SceneKit.SCNVector3[]" />
      </Parameters>
      <Docs>
        <param name="vertices">To be added.</param>
        <summary>Factory method to create a source for vertex data.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Semantic">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSString Semantic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSString Semantic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("semantic")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Corresponds to the <see cref="T:Monotouch.SceneKit.SCNGeometrySourceSemantic" /> value for this source.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VectorCount">
      <MemberSignature Language="C#" Value="public virtual int VectorCount { get; }" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 VectorCount" apistyle="classic" />
      <MemberSignature Language="C#" Value="public virtual nint VectorCount { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint VectorCount" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("vectorCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="classic">System.Int32</ReturnType>
        <ReturnType apistyle="unified">System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The total number of vectors in the underlying <see cref="P:Monotouch.SceneKit.SCNGeometrySource.Data" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
