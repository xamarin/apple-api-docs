<Type Name="MLMultiArray" FullName="CoreML.MLMultiArray">
  <TypeSignature Language="C#" Value="public class MLMultiArray : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MLMultiArray extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:CoreML.MLMultiArray" />
  <TypeSignature Language="F#" Value="type MLMultiArray = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("MLMultiArray", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents an efficient multi-dimensional array.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MLMultiArray (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CoreML.MLMultiArray : Foundation.NSObjectFlag -&gt; CoreML.MLMultiArray" Usage="new CoreML.MLMultiArray t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MLMultiArray (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreML.MLMultiArray : nativeint -&gt; CoreML.MLMultiArray" Usage="new CoreML.MLMultiArray handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MLMultiArray (Foundation.NSNumber[] shape, CoreML.MLMultiArrayDataType dataType, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSNumber[] shape, valuetype CoreML.MLMultiArrayDataType dataType, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.#ctor(Foundation.NSNumber[],CoreML.MLMultiArrayDataType,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new CoreML.MLMultiArray : Foundation.NSNumber[] * CoreML.MLMultiArrayDataType *  -&gt; CoreML.MLMultiArray" Usage="new CoreML.MLMultiArray (shape, dataType, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithShape:dataType:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="shape" Type="Foundation.NSNumber[]" />
        <Parameter Name="dataType" Type="CoreML.MLMultiArrayDataType" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="shape">To be added.</param>
        <param name="dataType">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Creates a new MLMultiArray with the specified shape and data type.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MLMultiArray (nint[] shape, CoreML.MLMultiArrayDataType dataType, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.nint[] shape, valuetype CoreML.MLMultiArrayDataType dataType, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.#ctor(System.nint[],CoreML.MLMultiArrayDataType,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new CoreML.MLMultiArray : nint[] * CoreML.MLMultiArrayDataType *  -&gt; CoreML.MLMultiArray" Usage="new CoreML.MLMultiArray (shape, dataType, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.TV(11, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Watch(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="shape" Type="System.nint[]" />
        <Parameter Name="dataType" Type="CoreML.MLMultiArrayDataType" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="shape">To be added.</param>
        <param name="dataType">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Creates a new MLMultiArray with the specified shape and data type.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MLMultiArray (IntPtr dataPointer, Foundation.NSNumber[] shape, CoreML.MLMultiArrayDataType dataType, Foundation.NSNumber[] strides, Action&lt;IntPtr&gt; deallocator, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int dataPointer, class Foundation.NSNumber[] shape, valuetype CoreML.MLMultiArrayDataType dataType, class Foundation.NSNumber[] strides, class System.Action`1&lt;native int&gt; deallocator, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.#ctor(System.IntPtr,Foundation.NSNumber[],CoreML.MLMultiArrayDataType,Foundation.NSNumber[],System.Action{System.IntPtr},Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new CoreML.MLMultiArray : nativeint * Foundation.NSNumber[] * CoreML.MLMultiArrayDataType * Foundation.NSNumber[] * Action&lt;nativeint&gt; *  -&gt; CoreML.MLMultiArray" Usage="new CoreML.MLMultiArray (dataPointer, shape, dataType, strides, deallocator, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithDataPointer:shape:dataType:strides:deallocator:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="dataPointer" Type="System.IntPtr" />
        <Parameter Name="shape" Type="Foundation.NSNumber[]" />
        <Parameter Name="dataType" Type="CoreML.MLMultiArrayDataType" />
        <Parameter Name="strides" Type="Foundation.NSNumber[]" />
        <Parameter Name="deallocator" Type="System.Action&lt;System.IntPtr&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V29))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dataPointer">To be added.</param>
        <param name="shape">To be added.</param>
        <param name="dataType">To be added.</param>
        <param name="strides">To be added.</param>
        <param name="deallocator">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Creates a new MLMultiArray with the specified details.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MLMultiArray (IntPtr dataPointer, nint[] shape, CoreML.MLMultiArrayDataType dataType, nint[] strides, Action&lt;IntPtr&gt; deallocator, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int dataPointer, valuetype System.nint[] shape, valuetype CoreML.MLMultiArrayDataType dataType, valuetype System.nint[] strides, class System.Action`1&lt;native int&gt; deallocator, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.#ctor(System.IntPtr,System.nint[],CoreML.MLMultiArrayDataType,System.nint[],System.Action{System.IntPtr},Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="new CoreML.MLMultiArray : nativeint * nint[] * CoreML.MLMultiArrayDataType * nint[] * Action&lt;nativeint&gt; *  -&gt; CoreML.MLMultiArray" Usage="new CoreML.MLMultiArray (dataPointer, shape, dataType, strides, deallocator, error)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.TV(11, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Watch(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="dataPointer" Type="System.IntPtr" />
        <Parameter Name="shape" Type="System.nint[]" />
        <Parameter Name="dataType" Type="CoreML.MLMultiArrayDataType" />
        <Parameter Name="strides" Type="System.nint[]" />
        <Parameter Name="deallocator" Type="System.Action&lt;System.IntPtr&gt;" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="dataPointer">To be added.</param>
        <param name="shape">To be added.</param>
        <param name="dataType">To be added.</param>
        <param name="strides">To be added.</param>
        <param name="deallocator">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Creates a new MLMultiArray with the specified details.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLMultiArray.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="CoreML.MLMultiArray.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual nint Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint Count" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLMultiArray.Count" />
      <MemberSignature Language="F#" Value="member this.Count : nint" Usage="CoreML.MLMultiArray.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("count")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The total number of elements in the array.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataPointer">
      <MemberSignature Language="C#" Value="public virtual IntPtr DataPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int DataPointer" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLMultiArray.DataPointer" />
      <MemberSignature Language="F#" Value="member this.DataPointer : nativeint" Usage="CoreML.MLMultiArray.DataPointer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("dataPointer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a pointer to the raw array data.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataType">
      <MemberSignature Language="C#" Value="public virtual CoreML.MLMultiArrayDataType DataType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreML.MLMultiArrayDataType DataType" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLMultiArray.DataType" />
      <MemberSignature Language="F#" Value="member this.DataType : CoreML.MLMultiArrayDataType" Usage="CoreML.MLMultiArray.DataType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("dataType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreML.MLMultiArrayDataType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type of the data elements stored in the array.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSNumber GetObject (Foundation.NSNumber[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSNumber GetObject(class Foundation.NSNumber[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.GetObject(Foundation.NSNumber[])" />
      <MemberSignature Language="F#" Value="abstract member GetObject : Foundation.NSNumber[] -&gt; Foundation.NSNumber&#xA;override this.GetObject : Foundation.NSNumber[] -&gt; Foundation.NSNumber" Usage="mLMultiArray.GetObject key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("objectForKeyedSubscript:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Foundation.NSNumber[]" />
      </Parameters>
      <Docs>
        <param name="key">A numeric identifier for the object to get.</param>
        <summary>Retrieves the element at the point specified by <paramref name="key" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSNumber GetObject (nint idx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSNumber GetObject(valuetype System.nint idx) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.GetObject(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetObject : nint -&gt; Foundation.NSNumber&#xA;override this.GetObject : nint -&gt; Foundation.NSNumber" Usage="mLMultiArray.GetObject idx" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("objectAtIndexedSubscript:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="idx">A numeric identifier for the object to get.</param>
        <summary>Retrieves the element at <paramref name="idx" />, as if the array were single-dimensional.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public Foundation.NSNumber GetObject (params nint[] indices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSNumber GetObject(valuetype System.nint[] indices) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.GetObject(System.nint[])" />
      <MemberSignature Language="F#" Value="member this.GetObject : nint[] -&gt; Foundation.NSNumber" Usage="mLMultiArray.GetObject indices" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.TV(11, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Watch(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="System.nint[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indices">A multidimensional coordinate for the object to get.</param>
        <summary>Retrieves the element at <paramref name="indices" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Foundation.NSNumber this[Foundation.NSNumber[] key] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSNumber Item(class Foundation.NSNumber[])" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLMultiArray.Item(Foundation.NSNumber[])" />
      <MemberSignature Language="F#" Value="member this.Item(Foundation.NSNumber[]) : Foundation.NSNumber with get, set" Usage="CoreML.MLMultiArray.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.TV(11, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Watch(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Foundation.NSNumber[]" />
      </Parameters>
      <Docs>
        <param name="key">A numeric identifier for the object to get or set.</param>
        <summary>Accesses the point in the multi-dimensional array identified by <paramref name="key" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Foundation.NSNumber this[nint idx] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSNumber Item(valuetype System.nint)" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLMultiArray.Item(System.nint)" />
      <MemberSignature Language="F#" Value="member this.Item(nint) : Foundation.NSNumber with get, set" Usage="CoreML.MLMultiArray.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.TV(11, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Watch(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idx" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="idx">A numeric identifier for the object to get or set.</param>
        <summary>Retrieves the element at <paramref name="idx" />, as if the array were single-dimensional.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public Foundation.NSNumber this[params nint[] indices] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSNumber Item(valuetype System.nint[])" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLMultiArray.Item(System.nint[])" />
      <MemberSignature Language="F#" Value="member this.Item(nint[]) : Foundation.NSNumber with get, set" Usage="CoreML.MLMultiArray.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.TV(11, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Watch(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indices" Type="System.nint[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="indices">A multidimensional coordinate for the object to get or set.</param>
        <summary>Gets or sets the element at <paramref name="indices" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (Foundation.NSNumber obj, Foundation.NSNumber[] key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class Foundation.NSNumber obj, class Foundation.NSNumber[] key) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.SetObject(Foundation.NSNumber,Foundation.NSNumber[])" />
      <MemberSignature Language="F#" Value="abstract member SetObject : Foundation.NSNumber * Foundation.NSNumber[] -&gt; unit&#xA;override this.SetObject : Foundation.NSNumber * Foundation.NSNumber[] -&gt; unit" Usage="mLMultiArray.SetObject (obj, key)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setObject:forKeyedSubscript:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Foundation.NSNumber" />
        <Parameter Name="key" Type="Foundation.NSNumber[]" />
      </Parameters>
      <Docs>
        <param name="obj">The new value.</param>
        <param name="key">A numeric identifier for the object to set.</param>
        <summary>Sets the value at <paramref name="key" /> to <paramref name="obj" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public virtual void SetObject (Foundation.NSNumber obj, nint idx);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObject(class Foundation.NSNumber obj, valuetype System.nint idx) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.SetObject(Foundation.NSNumber,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SetObject : Foundation.NSNumber * nint -&gt; unit&#xA;override this.SetObject : Foundation.NSNumber * nint -&gt; unit" Usage="mLMultiArray.SetObject (obj, idx)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setObject:atIndexedSubscript:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Foundation.NSNumber" />
        <Parameter Name="idx" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="obj">The new value.</param>
        <param name="idx">A numeric identifier for the object to set.</param>
        <summary>Sets the value at <paramref name="idx" /> to <paramref name="obj" />, as if the array were single-dimensional.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetObject">
      <MemberSignature Language="C#" Value="public void SetObject (Foundation.NSNumber obj, params nint[] indices);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetObject(class Foundation.NSNumber obj, valuetype System.nint[] indices) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLMultiArray.SetObject(Foundation.NSNumber,System.nint[])" />
      <MemberSignature Language="F#" Value="member this.SetObject : Foundation.NSNumber * nint[] -&gt; unit" Usage="mLMultiArray.SetObject (obj, indices)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.TV(11, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Watch(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="Foundation.NSNumber" />
        <Parameter Name="indices" Type="System.nint[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="obj">The new value</param>
        <param name="indices">The multidimensional coordinate of the item to set</param>
        <summary>Sets the element at <paramref name="indices" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Shape">
      <MemberSignature Language="C#" Value="public nint[] Shape { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint[] Shape" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLMultiArray.Shape" />
      <MemberSignature Language="F#" Value="member this.Shape : nint[]" Usage="CoreML.MLMultiArray.Shape" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.TV(11, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Watch(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The dimensions of the array.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Strides">
      <MemberSignature Language="C#" Value="public nint[] Strides { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint[] Strides" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLMultiArray.Strides" />
      <MemberSignature Language="F#" Value="member this.Strides : nint[]" Usage="CoreML.MLMultiArray.Strides" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.TV(11, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Watch(4, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of elements to skip to advance an index value by one in the chosen direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para>
            <see cref="T:CoreML.MLMultiArray" /> objects can be treated as one-dimensional arrays. The <see cref="P:CoreML.MLMultiArray.Strides" /> property retrieves the number of elements in a one-dimensional array that are necessary to "skip over" in order to advance by 1 in the desired dimension.</para>
          <example>
            <code lang="C#"><![CDATA[
NSError err;
var ma = new CoreML.MLMultiArray(new NSNumber[] { 3, 5, 7, 9 },CoreML.MLMultiArrayDataType.Int32, out err);
if (err != null) 
{
   HandleError(err);
   return;
}
var strides = ma.Strides;
/*
strides[0] = 315
strides[1] =  63
strides[2] =   9
strides[3] =   1
*/        
          
    ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
