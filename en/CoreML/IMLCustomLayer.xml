<Type Name="IMLCustomLayer" FullName="CoreML.IMLCustomLayer">
  <TypeSignature Language="C#" Value="public interface IMLCustomLayer : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMLCustomLayer implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:CoreML.IMLCustomLayer" />
  <TypeSignature Language="F#" Value="type IMLCustomLayer = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="MLCustomLayer", WrapperType=typeof(CoreML.MLCustomLayerWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, 2, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetWeightData", ParameterByRef=new System.Boolean[] { false, true }, ParameterType=new System.Type[] { typeof(Foundation.NSData[]), typeof(Foundation.NSError) }, ReturnType=typeof(System.Boolean), Selector="setWeightData:error:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetOutputShapes", ParameterByRef=new System.Boolean[] { false, true }, ParameterType=new System.Type[] { typeof(Foundation.NSArray[]), typeof(Foundation.NSError) }, ReturnType=typeof(Foundation.NSArray[]), Selector="outputShapesForInputShapes:error:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="EvaluateOnCpu", ParameterByRef=new System.Boolean[] { false, false, true }, ParameterType=new System.Type[] { typeof(CoreML.MLMultiArray[]), typeof(CoreML.MLMultiArray[]), typeof(Foundation.NSError) }, ReturnType=typeof(System.Boolean), Selector="evaluateOnCPUWithInputs:outputs:error:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="Encode", ParameterByRef=new System.Boolean[] { false, false, false, true }, ParameterType=new System.Type[] { typeof(Metal.IMTLCommandBuffer), typeof(Metal.IMTLTexture[]), typeof(Metal.IMTLTexture[]), typeof(Foundation.NSError) }, ReturnType=typeof(System.Boolean), Selector="encodeToCommandBuffer:inputs:outputs:error:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface defining methods necessary for a custom model layer.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="EvaluateOnCpu">
      <MemberSignature Language="C#" Value="public bool EvaluateOnCpu (CoreML.MLMultiArray[] inputs, CoreML.MLMultiArray[] outputs, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EvaluateOnCpu(class CoreML.MLMultiArray[] inputs, class CoreML.MLMultiArray[] outputs, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.IMLCustomLayer.EvaluateOnCpu(CoreML.MLMultiArray[],CoreML.MLMultiArray[],Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member EvaluateOnCpu : CoreML.MLMultiArray[] * CoreML.MLMultiArray[] *  -&gt; bool" Usage="iMLCustomLayer.EvaluateOnCpu (inputs, outputs, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("evaluateOnCPUWithInputs:outputs:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputs" Type="CoreML.MLMultiArray[]" />
        <Parameter Name="outputs" Type="CoreML.MLMultiArray[]" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="inputs">To be added.</param>
        <param name="outputs">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Sets <param name="outputs" /> based on <param name="inputs" /> using the CPU to do the calculations.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOutputShapes">
      <MemberSignature Language="C#" Value="public Foundation.NSArray[] GetOutputShapes (Foundation.NSArray[] inputShapes, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSArray[] GetOutputShapes(class Foundation.NSArray[] inputShapes, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.IMLCustomLayer.GetOutputShapes(Foundation.NSArray[],Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetOutputShapes : Foundation.NSArray[] *  -&gt; Foundation.NSArray[]" Usage="iMLCustomLayer.GetOutputShapes (inputShapes, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("outputShapesForInputShapes:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputShapes" Type="Foundation.NSArray[]" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="inputShapes">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Retrieves the output data shape, as an array of numbers describing the dimensions of the output tensor.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWeightData">
      <MemberSignature Language="C#" Value="public bool SetWeightData (Foundation.NSData[] weights, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SetWeightData(class Foundation.NSData[] weights, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.IMLCustomLayer.SetWeightData(Foundation.NSData[],Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member SetWeightData : Foundation.NSData[] *  -&gt; bool" Usage="iMLCustomLayer.SetWeightData (weights, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setWeightData:error:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="weights" Type="Foundation.NSData[]" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="weights">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Sets the internal weights of the layer.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
