<Type Name="MLModel" FullName="CoreML.MLModel">
  <TypeSignature Language="C#" Value="public class MLModel : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MLModel extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:CoreML.MLModel" />
  <TypeSignature Language="F#" Value="type MLModel = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("MLModel", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Encapsulates a trained machine-learning model.</summary>
    <remarks>
      <para>The <see cref="T:Monotouch.CoreML.MLModel" /> class encapsulates a machine-learning model that maps a predefined set of input features to a predefined set of output features. Models are generally stored as .mlmodel files but these must be "compiled" into a .mlmodelc directory prior to inferencing. This compilation step generally occurs prior to deploymenty, but may be performed on the device with the time-consuming <see cref="M:Monotouch.CoreML.MLModel.CompileModel" /> method.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MLModel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLModel.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MLModel (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLModel.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CoreML.MLModel : Foundation.NSObjectFlag -&gt; CoreML.MLModel" Usage="new CoreML.MLModel t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MLModel (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLModel.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreML.MLModel : nativeint -&gt; CoreML.MLModel" Usage="new CoreML.MLModel handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLModel.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="CoreML.MLModel.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompileModel">
      <MemberSignature Language="C#" Value="public static Foundation.NSUrl CompileModel (Foundation.NSUrl modelUrl, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSUrl CompileModel(class Foundation.NSUrl modelUrl, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLModel.CompileModel(Foundation.NSUrl,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member CompileModel : Foundation.NSUrl *  -&gt; Foundation.NSUrl" Usage="CoreML.MLModel.CompileModel (modelUrl, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("compileModelAtURL:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="modelUrl" Type="Foundation.NSUrl" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="modelUrl">A URL to a model to compile.</param>
        <param name="error">On failure, the error that occurred.</param>
        <summary>Compiles the model at <paramref name="modelUrl" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This is an expensive function. Execution time varies depending on the model size, but developers should run this method on a background thread and take steps to avoid the need to run this method repeatedly.</para>
          <para>The following example shows how a developer can download a model, compile it, and move the compiled model into the app's permanent storage:</para>
          <example>
            <code lang="C#"><![CDATA[
NSUrl CompileModel(string modelName)
{
	var downloadedFile = modelName + ".mlmodel";
	var fileUrl = NSUrl.FromFilename(downloadedFile);
	NSError err = null;
	var compiledUrl = MLModel.CompileModel(fileUrl, out err);
	if (err != null)
	{
		throw new Exception(err.ToString());
	}
	return compiledUrl;
}

NSUrl StoreModel(NSUrl sourceUrl)
{
	var fileManager = NSFileManager.DefaultManager;
	NSError err = null;
	var appSupportDirectory = fileManager.GetUrl(NSSearchPathDirectory.ApplicationSupportDirectory, NSSearchPathDomain.User, sourceUrl, true, out err);
	if (err != null)
	{
		throw new Exception(err.ToString());
	}

	// Create a permanent URL in appSupportDirectory
	var destinationUrl = appSupportDirectory.Append(sourceUrl.LastPathComponent, true);
	NSUrl resultingUrl = null;

	var destPath = destinationUrl.AbsoluteString;
	// If the compiled model directory exists, replace it
	if (System.IO.Directory.Exists(destinationUrl.Path))
	{
		fileManager.Replace(destinationUrl, sourceUrl, null, NSFileManagerItemReplacementOptions.None, out resultingUrl, out err);
	}
	else
	{
		fileManager.Copy(sourceUrl, destinationUrl, out err);
	}
	if (err != null)
	{
		throw new Exception(err.ToString());
	}
	return resultingUrl;
}

private async Task<NSUrl> DownloadAndStoryCoreMLModelAsync()
{
  var modelName = "SomeModel";
	var sourceUrl ="http://Contoso.org/SomeModel.mlmodel";
	using (var wc = new WebClient())
	{
		await wc.DownloadFileTaskAsync(sourceUrl, modelName +".mlmodel");
		var compiledModelPath = CompileModel(modelName);
		var finalPath = StoreModel(compiledModelPath);
    return finalPath;
	}
}
    ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static CoreML.MLModel Create (Foundation.NSUrl url, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreML.MLModel Create(class Foundation.NSUrl url, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLModel.Create(Foundation.NSUrl,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member Create : Foundation.NSUrl *  -&gt; CoreML.MLModel" Usage="CoreML.MLModel.Create (url, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("modelWithContentsOfURL:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreML.MLModel</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="url">The URL of the model resource.</param>
        <param name="error">On failure, the error that occurred.</param>
        <summary>Creates and returns a CoreML model with the data that is stored at the specified <paramref name="url" />, reporting any errors in <paramref name="error" />.</summary>
        <returns>The new model, or <see langword="null" /> if an error occurred.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrediction">
      <MemberSignature Language="C#" Value="public virtual CoreML.IMLFeatureProvider GetPrediction (CoreML.IMLFeatureProvider input, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CoreML.IMLFeatureProvider GetPrediction(class CoreML.IMLFeatureProvider input, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLModel.GetPrediction(CoreML.IMLFeatureProvider,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetPrediction : CoreML.IMLFeatureProvider *  -&gt; CoreML.IMLFeatureProvider&#xA;override this.GetPrediction : CoreML.IMLFeatureProvider *  -&gt; CoreML.IMLFeatureProvider" Usage="mLModel.GetPrediction (input, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predictionFromFeatures:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreML.IMLFeatureProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="CoreML.IMLFeatureProvider" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">The feature from which to make a prediction.</param>
        <param name="error">On failure, the error that occurred.</param>
        <summary>Makes a prediction on <paramref name="input" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrediction">
      <MemberSignature Language="C#" Value="public virtual CoreML.IMLFeatureProvider GetPrediction (CoreML.IMLFeatureProvider input, CoreML.MLPredictionOptions options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CoreML.IMLFeatureProvider GetPrediction(class CoreML.IMLFeatureProvider input, class CoreML.MLPredictionOptions options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLModel.GetPrediction(CoreML.IMLFeatureProvider,CoreML.MLPredictionOptions,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetPrediction : CoreML.IMLFeatureProvider * CoreML.MLPredictionOptions *  -&gt; CoreML.IMLFeatureProvider&#xA;override this.GetPrediction : CoreML.IMLFeatureProvider * CoreML.MLPredictionOptions *  -&gt; CoreML.IMLFeatureProvider" Usage="mLModel.GetPrediction (input, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predictionFromFeatures:options:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreML.IMLFeatureProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="CoreML.IMLFeatureProvider" />
        <Parameter Name="options" Type="CoreML.MLPredictionOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="input">The feature from which to make a prediction.</param>
        <param name="options">Options about resources to use for the prediction.</param>
        <param name="error">On failure, the error that occurred.</param>
        <summary>Makes a prediction on <paramref name="input" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredictions">
      <MemberSignature Language="C#" Value="public virtual CoreML.IMLBatchProvider GetPredictions (CoreML.IMLBatchProvider inputBatch, CoreML.MLPredictionOptions options, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CoreML.IMLBatchProvider GetPredictions(class CoreML.IMLBatchProvider inputBatch, class CoreML.MLPredictionOptions options, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreML.MLModel.GetPredictions(CoreML.IMLBatchProvider,CoreML.MLPredictionOptions,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetPredictions : CoreML.IMLBatchProvider * CoreML.MLPredictionOptions *  -&gt; CoreML.IMLBatchProvider&#xA;override this.GetPredictions : CoreML.IMLBatchProvider * CoreML.MLPredictionOptions *  -&gt; CoreML.IMLBatchProvider" Usage="mLModel.GetPredictions (inputBatch, options, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("predictionsFromBatch:options:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 5, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 14, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreML.IMLBatchProvider</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inputBatch" Type="CoreML.IMLBatchProvider" />
        <Parameter Name="options" Type="CoreML.MLPredictionOptions" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="inputBatch">To be added.</param>
        <param name="options">To be added.</param>
        <param name="error">To be added.</param>
        <summary>Gets the <see cref="T:CoreML.IMLBatchProvider" /> describing the outputs for the <param name="inputBatch" /> and <param name="options" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModelDescription">
      <MemberSignature Language="C#" Value="public virtual CoreML.MLModelDescription ModelDescription { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreML.MLModelDescription ModelDescription" />
      <MemberSignature Language="DocId" Value="P:CoreML.MLModel.ModelDescription" />
      <MemberSignature Language="F#" Value="member this.ModelDescription : CoreML.MLModelDescription" Usage="CoreML.MLModel.ModelDescription" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("modelDescription")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreML.MLModelDescription</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A developer-meaningful description of this <see cref="T:CoreML.Model" />.</summary>
        <value>To be added.</value>
        <remarks>A properly-specified <see cref="T:Monotouch.CoreML.MLModelDescription" /> contains all the detail necessary for a user of the model to properly create inputs and interpret outputs. For instance, image resolution, column- vs. row-major matrix forms, etc.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
