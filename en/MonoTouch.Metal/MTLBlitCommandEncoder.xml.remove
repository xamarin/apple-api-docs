<Type Name="MTLBlitCommandEncoder" FullName="MonoTouch.Metal.MTLBlitCommandEncoder">
  <TypeSignature Language="C#" Value="public abstract class MTLBlitCommandEncoder : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Metal.IMTLBlitCommandEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MTLBlitCommandEncoder extends MonoTouch.Foundation.NSObject implements class MonoTouch.Metal.IMTLBlitCommandEncoder, class MonoTouch.Metal.IMTLCommandEncoder, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Metal.IMTLBlitCommandEncoder</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("MTLBlitCommandEncoder", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface definition for objects that can issue resource-copying commands to a frame buffer.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Metal/Reference/MTLBlitCommandEncoder_Ref/index.html">Apple documentation for <c>MTLBlitCommandEncoder</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MTLBlitCommandEncoder ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MTLBlitCommandEncoder (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MTLBlitCommandEncoder (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFromBuffer">
      <MemberSignature Language="C#" Value="public abstract void CopyFromBuffer (MonoTouch.Metal.IMTLBuffer sourceBuffer, nuint sourceOffset, MonoTouch.Metal.IMTLBuffer destinationBuffer, nuint destinationOffset, nuint size);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyFromBuffer(class MonoTouch.Metal.IMTLBuffer sourceBuffer, valuetype System.nuint sourceOffset, class MonoTouch.Metal.IMTLBuffer destinationBuffer, valuetype System.nuint destinationOffset, valuetype System.nuint size) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyFromBuffer:sourceOffset:toBuffer:destinationOffset:size:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceBuffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="destinationBuffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="sourceOffset" Type="System.nuint" apistyle="unified" />
        <Parameter Name="destinationOffset" Type="System.nuint" apistyle="unified" />
        <Parameter Name="size" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="sourceBuffer">To be added.</param>
        <param name="sourceOffset">To be added.</param>
        <param name="destinationBuffer">To be added.</param>
        <param name="destinationOffset">To be added.</param>
        <param name="size">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFromBuffer">
      <MemberSignature Language="C#" Value="public abstract void CopyFromBuffer (MonoTouch.Metal.IMTLBuffer sourceBuffer, nuint sourceOffset, nuint sourceBytesPerRow, nuint sourceBytesPerImage, MonoTouch.Metal.MTLSize sourceSize, MonoTouch.Metal.IMTLTexture destinationTexture, nuint destinationSlice, nuint destinationLevel, MonoTouch.Metal.MTLOrigin destinationOrigin);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyFromBuffer(class MonoTouch.Metal.IMTLBuffer sourceBuffer, valuetype System.nuint sourceOffset, valuetype System.nuint sourceBytesPerRow, valuetype System.nuint sourceBytesPerImage, valuetype MonoTouch.Metal.MTLSize sourceSize, class MonoTouch.Metal.IMTLTexture destinationTexture, valuetype System.nuint destinationSlice, valuetype System.nuint destinationLevel, valuetype MonoTouch.Metal.MTLOrigin destinationOrigin) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyFromBuffer:sourceOffset:sourceBytesPerRow:sourceBytesPerImage:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceBuffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="sourceSize" Type="MonoTouch.Metal.MTLSize" />
        <Parameter Name="destinationTexture" Type="MonoTouch.Metal.IMTLTexture" />
        <Parameter Name="destinationOrigin" Type="MonoTouch.Metal.MTLOrigin" />
        <Parameter Name="sourceOffset" Type="System.nuint" apistyle="unified" />
        <Parameter Name="sourceBytesPerRow" Type="System.nuint" apistyle="unified" />
        <Parameter Name="sourceBytesPerImage" Type="System.nuint" apistyle="unified" />
        <Parameter Name="destinationSlice" Type="System.nuint" apistyle="unified" />
        <Parameter Name="destinationLevel" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="sourceBuffer">To be added.</param>
        <param name="sourceOffset">To be added.</param>
        <param name="sourceBytesPerRow">To be added.</param>
        <param name="sourceBytesPerImage">To be added.</param>
        <param name="sourceSize">To be added.</param>
        <param name="destinationTexture">To be added.</param>
        <param name="destinationSlice">To be added.</param>
        <param name="destinationLevel">To be added.</param>
        <param name="destinationOrigin">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFromTexture">
      <MemberSignature Language="C#" Value="public abstract void CopyFromTexture (MonoTouch.Metal.IMTLTexture sourceTexture, nuint sourceSlice, nuint sourceLevel, MonoTouch.Metal.MTLOrigin sourceOrigin, MonoTouch.Metal.MTLSize sourceSize, MonoTouch.Metal.IMTLTexture destinationTexture, nuint destinationSlice, nuint destinationLevel, MonoTouch.Metal.MTLOrigin destinationOrigin);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyFromTexture(class MonoTouch.Metal.IMTLTexture sourceTexture, valuetype System.nuint sourceSlice, valuetype System.nuint sourceLevel, valuetype MonoTouch.Metal.MTLOrigin sourceOrigin, valuetype MonoTouch.Metal.MTLSize sourceSize, class MonoTouch.Metal.IMTLTexture destinationTexture, valuetype System.nuint destinationSlice, valuetype System.nuint destinationLevel, valuetype MonoTouch.Metal.MTLOrigin destinationOrigin) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toTexture:destinationSlice:destinationLevel:destinationOrigin:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceTexture" Type="MonoTouch.Metal.IMTLTexture" />
        <Parameter Name="sourceOrigin" Type="MonoTouch.Metal.MTLOrigin" />
        <Parameter Name="sourceSize" Type="MonoTouch.Metal.MTLSize" />
        <Parameter Name="destinationTexture" Type="MonoTouch.Metal.IMTLTexture" />
        <Parameter Name="destinationOrigin" Type="MonoTouch.Metal.MTLOrigin" />
        <Parameter Name="sourceSlice" Type="System.nuint" apistyle="unified" />
        <Parameter Name="sourceLevel" Type="System.nuint" apistyle="unified" />
        <Parameter Name="destinationSlice" Type="System.nuint" apistyle="unified" />
        <Parameter Name="destinationLevel" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="sourceTexture">To be added.</param>
        <param name="sourceSlice">To be added.</param>
        <param name="sourceLevel">To be added.</param>
        <param name="sourceOrigin">To be added.</param>
        <param name="sourceSize">To be added.</param>
        <param name="destinationTexture">To be added.</param>
        <param name="destinationSlice">To be added.</param>
        <param name="destinationLevel">To be added.</param>
        <param name="destinationOrigin">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyFromTexture">
      <MemberSignature Language="C#" Value="public abstract void CopyFromTexture (MonoTouch.Metal.IMTLTexture sourceTexture, nuint sourceSlice, nuint sourceLevel, MonoTouch.Metal.MTLOrigin sourceOrigin, MonoTouch.Metal.MTLSize sourceSize, MonoTouch.Metal.IMTLBuffer destinationBuffer, nuint destinationOffset, nuint destinatinBytesPerRow, nuint destinationBytesPerImage);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyFromTexture(class MonoTouch.Metal.IMTLTexture sourceTexture, valuetype System.nuint sourceSlice, valuetype System.nuint sourceLevel, valuetype MonoTouch.Metal.MTLOrigin sourceOrigin, valuetype MonoTouch.Metal.MTLSize sourceSize, class MonoTouch.Metal.IMTLBuffer destinationBuffer, valuetype System.nuint destinationOffset, valuetype System.nuint destinatinBytesPerRow, valuetype System.nuint destinationBytesPerImage) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyFromTexture:sourceSlice:sourceLevel:sourceOrigin:sourceSize:toBuffer:destinationOffset:destinationBytesPerRow:destinationBytesPerImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sourceTexture" Type="MonoTouch.Metal.IMTLTexture" />
        <Parameter Name="sourceOrigin" Type="MonoTouch.Metal.MTLOrigin" />
        <Parameter Name="sourceSize" Type="MonoTouch.Metal.MTLSize" />
        <Parameter Name="destinationBuffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="sourceSlice" Type="System.nuint" apistyle="unified" />
        <Parameter Name="sourceLevel" Type="System.nuint" apistyle="unified" />
        <Parameter Name="destinationOffset" Type="System.nuint" apistyle="unified" />
        <Parameter Name="destinatinBytesPerRow" Type="System.nuint" apistyle="unified" />
        <Parameter Name="destinationBytesPerImage" Type="System.nuint" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="sourceTexture">To be added.</param>
        <param name="sourceSlice">To be added.</param>
        <param name="sourceLevel">To be added.</param>
        <param name="sourceOrigin">To be added.</param>
        <param name="sourceSize">To be added.</param>
        <param name="destinationBuffer">To be added.</param>
        <param name="destinationOffset">To be added.</param>
        <param name="destinatinBytesPerRow">To be added.</param>
        <param name="destinationBytesPerImage">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Device">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Metal.IMTLDevice Device { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Metal.IMTLDevice Device" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("device")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndEncoding">
      <MemberSignature Language="C#" Value="public virtual void EndEncoding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndEncoding() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("endEncoding")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FillBuffer">
      <MemberSignature Language="C#" Value="public abstract void FillBuffer (MonoTouch.Metal.IMTLBuffer buffer, MonoTouch.Foundation.NSRange range, byte value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FillBuffer(class MonoTouch.Metal.IMTLBuffer buffer, valuetype MonoTouch.Foundation.NSRange range, unsigned int8 value) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("fillBuffer:range:value:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
        <Parameter Name="value" Type="System.Byte" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="range">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateMipmapsForTexture">
      <MemberSignature Language="C#" Value="public abstract void GenerateMipmapsForTexture (MonoTouch.Metal.IMTLTexture texture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateMipmapsForTexture(class MonoTouch.Metal.IMTLTexture texture) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("generateMipmapsForTexture:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="MonoTouch.Metal.IMTLTexture" />
      </Parameters>
      <Docs>
        <param name="texture">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertDebugSignpost">
      <MemberSignature Language="C#" Value="public virtual void InsertDebugSignpost (string signpost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertDebugSignpost(string signpost) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("insertDebugSignpost:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="signpost" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="signpost">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public virtual string Label { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("label")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setLabel:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopDebugGroup">
      <MemberSignature Language="C#" Value="public virtual void PopDebugGroup ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopDebugGroup() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("popDebugGroup")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushDebugGroup">
      <MemberSignature Language="C#" Value="public virtual void PushDebugGroup (string debugGroup);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushDebugGroup(string debugGroup) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pushDebugGroup:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="debugGroup" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="debugGroup">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
