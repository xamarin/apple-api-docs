<Type Name="IMTLRenderCommandEncoder" FullName="MonoTouch.Metal.IMTLRenderCommandEncoder">
  <TypeSignature Language="C#" Value="public interface IMTLRenderCommandEncoder : IDisposable, MonoTouch.Metal.IMTLCommandEncoder" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IMTLRenderCommandEncoder implements class MonoTouch.Metal.IMTLCommandEncoder, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Metal.IMTLCommandEncoder</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol(Name="MTLRenderCommandEncoder", WrapperType=typeof(MonoTouch.Metal.MTLRenderCommandEncoderWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="DrawIndexedPrimitives">
      <MemberSignature Language="C#" Value="public void DrawIndexedPrimitives (MonoTouch.Metal.MTLPrimitiveType primitiveType, uint indexCount, MonoTouch.Metal.MTLIndexType indexType, MonoTouch.Metal.IMTLBuffer indexBuffer, uint indexBufferOffset);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawIndexedPrimitives(valuetype MonoTouch.Metal.MTLPrimitiveType primitiveType, unsigned int32 indexCount, valuetype MonoTouch.Metal.MTLIndexType indexType, class MonoTouch.Metal.IMTLBuffer indexBuffer, unsigned int32 indexBufferOffset) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void DrawIndexedPrimitives (MonoTouch.Metal.MTLPrimitiveType primitiveType, nuint indexCount, MonoTouch.Metal.MTLIndexType indexType, MonoTouch.Metal.IMTLBuffer indexBuffer, nuint indexBufferOffset);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawIndexedPrimitives(valuetype MonoTouch.Metal.MTLPrimitiveType primitiveType, valuetype System.nuint indexCount, valuetype MonoTouch.Metal.MTLIndexType indexType, class MonoTouch.Metal.IMTLBuffer indexBuffer, valuetype System.nuint indexBufferOffset) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primitiveType" Type="MonoTouch.Metal.MTLPrimitiveType" />
        <Parameter Name="indexCount" Type="System.UInt32" apistyle="old" />
        <Parameter Name="indexType" Type="MonoTouch.Metal.MTLIndexType" />
        <Parameter Name="indexBuffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="indexBufferOffset" Type="System.UInt32" apistyle="old" />
        <Parameter Name="indexCount" Type="System.nuint" apistyle="new" />
        <Parameter Name="indexBufferOffset" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="primitiveType">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="indexBuffer">To be added.</param>
        <param name="indexBufferOffset">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawIndexedPrimitives">
      <MemberSignature Language="C#" Value="public void DrawIndexedPrimitives (MonoTouch.Metal.MTLPrimitiveType primitiveType, uint indexCount, MonoTouch.Metal.MTLIndexType indexType, MonoTouch.Metal.IMTLBuffer indexBuffer, uint indexBufferOffset, uint instanceCount);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawIndexedPrimitives(valuetype MonoTouch.Metal.MTLPrimitiveType primitiveType, unsigned int32 indexCount, valuetype MonoTouch.Metal.MTLIndexType indexType, class MonoTouch.Metal.IMTLBuffer indexBuffer, unsigned int32 indexBufferOffset, unsigned int32 instanceCount) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void DrawIndexedPrimitives (MonoTouch.Metal.MTLPrimitiveType primitiveType, nuint indexCount, MonoTouch.Metal.MTLIndexType indexType, MonoTouch.Metal.IMTLBuffer indexBuffer, nuint indexBufferOffset, nuint instanceCount);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawIndexedPrimitives(valuetype MonoTouch.Metal.MTLPrimitiveType primitiveType, valuetype System.nuint indexCount, valuetype MonoTouch.Metal.MTLIndexType indexType, class MonoTouch.Metal.IMTLBuffer indexBuffer, valuetype System.nuint indexBufferOffset, valuetype System.nuint instanceCount) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawIndexedPrimitives:indexCount:indexType:indexBuffer:indexBufferOffset:instanceCount:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primitiveType" Type="MonoTouch.Metal.MTLPrimitiveType" />
        <Parameter Name="indexCount" Type="System.UInt32" apistyle="old" />
        <Parameter Name="indexType" Type="MonoTouch.Metal.MTLIndexType" />
        <Parameter Name="indexBuffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="indexBufferOffset" Type="System.UInt32" apistyle="old" />
        <Parameter Name="instanceCount" Type="System.UInt32" apistyle="old" />
        <Parameter Name="indexCount" Type="System.nuint" apistyle="new" />
        <Parameter Name="indexBufferOffset" Type="System.nuint" apistyle="new" />
        <Parameter Name="instanceCount" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="primitiveType">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="indexBuffer">To be added.</param>
        <param name="indexBufferOffset">To be added.</param>
        <param name="instanceCount">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPrimitives">
      <MemberSignature Language="C#" Value="public void DrawPrimitives (MonoTouch.Metal.MTLPrimitiveType primitiveType, uint vertexStart, uint vertexCount);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPrimitives(valuetype MonoTouch.Metal.MTLPrimitiveType primitiveType, unsigned int32 vertexStart, unsigned int32 vertexCount) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void DrawPrimitives (MonoTouch.Metal.MTLPrimitiveType primitiveType, nuint vertexStart, nuint vertexCount);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPrimitives(valuetype MonoTouch.Metal.MTLPrimitiveType primitiveType, valuetype System.nuint vertexStart, valuetype System.nuint vertexCount) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawPrimitives:vertexStart:vertexCount:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primitiveType" Type="MonoTouch.Metal.MTLPrimitiveType" />
        <Parameter Name="vertexStart" Type="System.UInt32" apistyle="old" />
        <Parameter Name="vertexCount" Type="System.UInt32" apistyle="old" />
        <Parameter Name="vertexStart" Type="System.nuint" apistyle="new" />
        <Parameter Name="vertexCount" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="primitiveType">To be added.</param>
        <param name="vertexStart">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPrimitives">
      <MemberSignature Language="C#" Value="public void DrawPrimitives (MonoTouch.Metal.MTLPrimitiveType primitiveType, uint vertexStart, uint vertexCount, uint instanceCount);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPrimitives(valuetype MonoTouch.Metal.MTLPrimitiveType primitiveType, unsigned int32 vertexStart, unsigned int32 vertexCount, unsigned int32 instanceCount) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void DrawPrimitives (MonoTouch.Metal.MTLPrimitiveType primitiveType, nuint vertexStart, nuint vertexCount, nuint instanceCount);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPrimitives(valuetype MonoTouch.Metal.MTLPrimitiveType primitiveType, valuetype System.nuint vertexStart, valuetype System.nuint vertexCount, valuetype System.nuint instanceCount) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("drawPrimitives:vertexStart:vertexCount:instanceCount:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="primitiveType" Type="MonoTouch.Metal.MTLPrimitiveType" />
        <Parameter Name="vertexStart" Type="System.UInt32" apistyle="old" />
        <Parameter Name="vertexCount" Type="System.UInt32" apistyle="old" />
        <Parameter Name="instanceCount" Type="System.UInt32" apistyle="old" />
        <Parameter Name="vertexStart" Type="System.nuint" apistyle="new" />
        <Parameter Name="vertexCount" Type="System.nuint" apistyle="new" />
        <Parameter Name="instanceCount" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="primitiveType">To be added.</param>
        <param name="vertexStart">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <param name="instanceCount">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBlendColor">
      <MemberSignature Language="C#" Value="public void SetBlendColor (float red, float green, float blue, float alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBlendColor(float32 red, float32 green, float32 blue, float32 alpha) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setBlendColorRed:green:blue:alpha:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="red" Type="System.Single" />
        <Parameter Name="green" Type="System.Single" />
        <Parameter Name="blue" Type="System.Single" />
        <Parameter Name="alpha" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="red">To be added.</param>
        <param name="green">To be added.</param>
        <param name="blue">To be added.</param>
        <param name="alpha">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCullMode">
      <MemberSignature Language="C#" Value="public void SetCullMode (MonoTouch.Metal.MTLCullMode cullMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCullMode(valuetype MonoTouch.Metal.MTLCullMode cullMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setCullMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cullMode" Type="MonoTouch.Metal.MTLCullMode" />
      </Parameters>
      <Docs>
        <param name="cullMode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDepthBias">
      <MemberSignature Language="C#" Value="public void SetDepthBias (float depthBias, float slopeScale, float clamp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDepthBias(float32 depthBias, float32 slopeScale, float32 clamp) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setDepthBias:slopeScale:clamp:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="depthBias" Type="System.Single" />
        <Parameter Name="slopeScale" Type="System.Single" />
        <Parameter Name="clamp" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="depthBias">To be added.</param>
        <param name="slopeScale">To be added.</param>
        <param name="clamp">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDepthClipMode">
      <MemberSignature Language="C#" Value="public void SetDepthClipMode (MonoTouch.Metal.MTLDepthClipMode depthClipMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDepthClipMode(valuetype MonoTouch.Metal.MTLDepthClipMode depthClipMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setDepthClipMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="depthClipMode" Type="MonoTouch.Metal.MTLDepthClipMode" />
      </Parameters>
      <Docs>
        <param name="depthClipMode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDepthStencilState">
      <MemberSignature Language="C#" Value="public void SetDepthStencilState (MonoTouch.Metal.IMTLDepthStencilState depthStencilState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDepthStencilState(class MonoTouch.Metal.IMTLDepthStencilState depthStencilState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setDepthStencilState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="depthStencilState" Type="MonoTouch.Metal.IMTLDepthStencilState" />
      </Parameters>
      <Docs>
        <param name="depthStencilState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentBuffer">
      <MemberSignature Language="C#" Value="public void SetFragmentBuffer (MonoTouch.Metal.IMTLBuffer buffer, uint offset, uint index);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentBuffer(class MonoTouch.Metal.IMTLBuffer buffer, unsigned int32 offset, unsigned int32 index) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void SetFragmentBuffer (MonoTouch.Metal.IMTLBuffer buffer, nuint offset, nuint index);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentBuffer(class MonoTouch.Metal.IMTLBuffer buffer, valuetype System.nuint offset, valuetype System.nuint index) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFragmentBuffer:offset:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="offset" Type="System.UInt32" apistyle="old" />
        <Parameter Name="index" Type="System.UInt32" apistyle="old" />
        <Parameter Name="offset" Type="System.nuint" apistyle="new" />
        <Parameter Name="index" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentBuffers">
      <MemberSignature Language="C#" Value="public void SetFragmentBuffers (MonoTouch.Metal.IMTLBuffer buffers, IntPtr IntPtrOffsets, MonoTouch.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentBuffers(class MonoTouch.Metal.IMTLBuffer buffers, native int IntPtrOffsets, valuetype MonoTouch.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFragmentBuffers:offsets:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="IntPtrOffsets" Type="System.IntPtr" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="buffers">To be added.</param>
        <param name="IntPtrOffsets">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentSamplerState">
      <MemberSignature Language="C#" Value="public void SetFragmentSamplerState (MonoTouch.Metal.IMTLSamplerState sampler, uint index);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentSamplerState(class MonoTouch.Metal.IMTLSamplerState sampler, unsigned int32 index) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void SetFragmentSamplerState (MonoTouch.Metal.IMTLSamplerState sampler, nuint index);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentSamplerState(class MonoTouch.Metal.IMTLSamplerState sampler, valuetype System.nuint index) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFragmentSamplerState:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampler" Type="MonoTouch.Metal.IMTLSamplerState" />
        <Parameter Name="index" Type="System.UInt32" apistyle="old" />
        <Parameter Name="index" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="sampler">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentSamplerState">
      <MemberSignature Language="C#" Value="public void SetFragmentSamplerState (MonoTouch.Metal.IMTLSamplerState sampler, float lodMinClamp, float lodMaxClamp, uint index);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentSamplerState(class MonoTouch.Metal.IMTLSamplerState sampler, float32 lodMinClamp, float32 lodMaxClamp, unsigned int32 index) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void SetFragmentSamplerState (MonoTouch.Metal.IMTLSamplerState sampler, float lodMinClamp, float lodMaxClamp, nuint index);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentSamplerState(class MonoTouch.Metal.IMTLSamplerState sampler, float32 lodMinClamp, float32 lodMaxClamp, valuetype System.nuint index) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFragmentSamplerState:lodMinClamp:lodMaxClamp:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampler" Type="MonoTouch.Metal.IMTLSamplerState" />
        <Parameter Name="lodMinClamp" Type="System.Single" />
        <Parameter Name="lodMaxClamp" Type="System.Single" />
        <Parameter Name="index" Type="System.UInt32" apistyle="old" />
        <Parameter Name="index" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="sampler">To be added.</param>
        <param name="lodMinClamp">To be added.</param>
        <param name="lodMaxClamp">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentSamplerStates">
      <MemberSignature Language="C#" Value="public void SetFragmentSamplerStates (MonoTouch.Metal.IMTLSamplerState[] samplers, MonoTouch.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentSamplerStates(class MonoTouch.Metal.IMTLSamplerState[] samplers, valuetype MonoTouch.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFragmentSamplerStates:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplers" Type="MonoTouch.Metal.IMTLSamplerState[]" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="samplers">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentSamplerStates">
      <MemberSignature Language="C#" Value="public void SetFragmentSamplerStates (MonoTouch.Metal.IMTLSamplerState[] samplers, IntPtr floatArrayPtrLodMinClamps, IntPtr floatArrayPtrLodMaxClamps, MonoTouch.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentSamplerStates(class MonoTouch.Metal.IMTLSamplerState[] samplers, native int floatArrayPtrLodMinClamps, native int floatArrayPtrLodMaxClamps, valuetype MonoTouch.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFragmentSamplerStates:lodMinClamps:lodMaxClamps:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplers" Type="MonoTouch.Metal.IMTLSamplerState[]" />
        <Parameter Name="floatArrayPtrLodMinClamps" Type="System.IntPtr" />
        <Parameter Name="floatArrayPtrLodMaxClamps" Type="System.IntPtr" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="samplers">To be added.</param>
        <param name="floatArrayPtrLodMinClamps">To be added.</param>
        <param name="floatArrayPtrLodMaxClamps">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentTexture">
      <MemberSignature Language="C#" Value="public void SetFragmentTexture (MonoTouch.Metal.IMTLTexture texture, uint index);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentTexture(class MonoTouch.Metal.IMTLTexture texture, unsigned int32 index) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void SetFragmentTexture (MonoTouch.Metal.IMTLTexture texture, nuint index);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentTexture(class MonoTouch.Metal.IMTLTexture texture, valuetype System.nuint index) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFragmentTexture:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="MonoTouch.Metal.IMTLTexture" />
        <Parameter Name="index" Type="System.UInt32" apistyle="old" />
        <Parameter Name="index" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="texture">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFragmentTextures">
      <MemberSignature Language="C#" Value="public void SetFragmentTextures (MonoTouch.Metal.IMTLTexture[] textures, MonoTouch.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFragmentTextures(class MonoTouch.Metal.IMTLTexture[] textures, valuetype MonoTouch.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFragmentTextures:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textures" Type="MonoTouch.Metal.IMTLTexture[]" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="textures">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFrontFacingWinding">
      <MemberSignature Language="C#" Value="public void SetFrontFacingWinding (MonoTouch.Metal.MTLWinding frontFacingWinding);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFrontFacingWinding(valuetype MonoTouch.Metal.MTLWinding frontFacingWinding) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setFrontFacingWinding:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="frontFacingWinding" Type="MonoTouch.Metal.MTLWinding" />
      </Parameters>
      <Docs>
        <param name="frontFacingWinding">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRenderPipelineState">
      <MemberSignature Language="C#" Value="public void SetRenderPipelineState (MonoTouch.Metal.IMTLRenderPipelineState pipelineState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRenderPipelineState(class MonoTouch.Metal.IMTLRenderPipelineState pipelineState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setRenderPipelineState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pipelineState" Type="MonoTouch.Metal.IMTLRenderPipelineState" />
      </Parameters>
      <Docs>
        <param name="pipelineState">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetScissorRect">
      <MemberSignature Language="C#" Value="public void SetScissorRect (MonoTouch.Metal.MTLScissorRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScissorRect(valuetype MonoTouch.Metal.MTLScissorRect rect) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setScissorRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="MonoTouch.Metal.MTLScissorRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetStencilReferenceValue">
      <MemberSignature Language="C#" Value="public void SetStencilReferenceValue (uint referenceValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetStencilReferenceValue(unsigned int32 referenceValue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setStencilReferenceValue:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="referenceValue" Type="System.UInt32" />
      </Parameters>
      <Docs>
        <param name="referenceValue">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTriangleFillMode">
      <MemberSignature Language="C#" Value="public void SetTriangleFillMode (MonoTouch.Metal.MTLTriangleFillMode fillMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTriangleFillMode(valuetype MonoTouch.Metal.MTLTriangleFillMode fillMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setTriangleFillMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fillMode" Type="MonoTouch.Metal.MTLTriangleFillMode" />
      </Parameters>
      <Docs>
        <param name="fillMode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexBuffer">
      <MemberSignature Language="C#" Value="public void SetVertexBuffer (MonoTouch.Metal.IMTLBuffer buffer, uint offset, uint index);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexBuffer(class MonoTouch.Metal.IMTLBuffer buffer, unsigned int32 offset, unsigned int32 index) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void SetVertexBuffer (MonoTouch.Metal.IMTLBuffer buffer, nuint offset, nuint index);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexBuffer(class MonoTouch.Metal.IMTLBuffer buffer, valuetype System.nuint offset, valuetype System.nuint index) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVertexBuffer:offset:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="MonoTouch.Metal.IMTLBuffer" />
        <Parameter Name="offset" Type="System.UInt32" apistyle="old" />
        <Parameter Name="index" Type="System.UInt32" apistyle="old" />
        <Parameter Name="offset" Type="System.nuint" apistyle="new" />
        <Parameter Name="index" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="buffer">To be added.</param>
        <param name="offset">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexBuffers">
      <MemberSignature Language="C#" Value="public void SetVertexBuffers (MonoTouch.Metal.IMTLBuffer[] buffers, IntPtr uintArrayPtrOffsets, MonoTouch.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexBuffers(class MonoTouch.Metal.IMTLBuffer[] buffers, native int uintArrayPtrOffsets, valuetype MonoTouch.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVertexBuffers:offsets:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffers" Type="MonoTouch.Metal.IMTLBuffer[]" />
        <Parameter Name="uintArrayPtrOffsets" Type="System.IntPtr" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="buffers">To be added.</param>
        <param name="uintArrayPtrOffsets">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexSamplerState">
      <MemberSignature Language="C#" Value="public void SetVertexSamplerState (MonoTouch.Metal.IMTLSamplerState sampler, uint index);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexSamplerState(class MonoTouch.Metal.IMTLSamplerState sampler, unsigned int32 index) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void SetVertexSamplerState (MonoTouch.Metal.IMTLSamplerState sampler, nuint index);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexSamplerState(class MonoTouch.Metal.IMTLSamplerState sampler, valuetype System.nuint index) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVertexSamplerState:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampler" Type="MonoTouch.Metal.IMTLSamplerState" />
        <Parameter Name="index" Type="System.UInt32" apistyle="old" />
        <Parameter Name="index" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="sampler">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexSamplerState">
      <MemberSignature Language="C#" Value="public void SetVertexSamplerState (MonoTouch.Metal.IMTLSamplerState sampler, float lodMinClamp, float lodMaxClamp, uint index);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexSamplerState(class MonoTouch.Metal.IMTLSamplerState sampler, float32 lodMinClamp, float32 lodMaxClamp, unsigned int32 index) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void SetVertexSamplerState (MonoTouch.Metal.IMTLSamplerState sampler, float lodMinClamp, float lodMaxClamp, nuint index);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexSamplerState(class MonoTouch.Metal.IMTLSamplerState sampler, float32 lodMinClamp, float32 lodMaxClamp, valuetype System.nuint index) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVertexSamplerState:lodMinClamp:lodMaxClamp:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sampler" Type="MonoTouch.Metal.IMTLSamplerState" />
        <Parameter Name="lodMinClamp" Type="System.Single" />
        <Parameter Name="lodMaxClamp" Type="System.Single" />
        <Parameter Name="index" Type="System.UInt32" apistyle="old" />
        <Parameter Name="index" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="sampler">To be added.</param>
        <param name="lodMinClamp">To be added.</param>
        <param name="lodMaxClamp">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexSamplerStates">
      <MemberSignature Language="C#" Value="public void SetVertexSamplerStates (MonoTouch.Metal.IMTLSamplerState[] samplers, MonoTouch.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexSamplerStates(class MonoTouch.Metal.IMTLSamplerState[] samplers, valuetype MonoTouch.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVertexSamplerStates:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplers" Type="MonoTouch.Metal.IMTLSamplerState[]" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="samplers">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexSamplerStates">
      <MemberSignature Language="C#" Value="public void SetVertexSamplerStates (MonoTouch.Metal.IMTLSamplerState[] samplers, IntPtr floatArrayPtrLodMinClamps, IntPtr floatArrayPtrLodMaxClamps, MonoTouch.Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexSamplerStates(class MonoTouch.Metal.IMTLSamplerState[] samplers, native int floatArrayPtrLodMinClamps, native int floatArrayPtrLodMaxClamps, valuetype MonoTouch.Foundation.NSRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVertexSamplerStates:lodMinClamps:lodMaxClamps:withRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="samplers" Type="MonoTouch.Metal.IMTLSamplerState[]" />
        <Parameter Name="floatArrayPtrLodMinClamps" Type="System.IntPtr" />
        <Parameter Name="floatArrayPtrLodMaxClamps" Type="System.IntPtr" />
        <Parameter Name="range" Type="MonoTouch.Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="samplers">To be added.</param>
        <param name="floatArrayPtrLodMinClamps">To be added.</param>
        <param name="floatArrayPtrLodMaxClamps">To be added.</param>
        <param name="range">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVertexTexture">
      <MemberSignature Language="C#" Value="public void SetVertexTexture (MonoTouch.Metal.IMTLTexture texture, uint index);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexTexture(class MonoTouch.Metal.IMTLTexture texture, unsigned int32 index) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void SetVertexTexture (MonoTouch.Metal.IMTLTexture texture, nuint index);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVertexTexture(class MonoTouch.Metal.IMTLTexture texture, valuetype System.nuint index) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVertexTexture:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="texture" Type="MonoTouch.Metal.IMTLTexture" />
        <Parameter Name="index" Type="System.UInt32" apistyle="old" />
        <Parameter Name="index" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="texture">To be added.</param>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetViewport">
      <MemberSignature Language="C#" Value="public void SetViewport (MonoTouch.Metal.MTLViewport viewport);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetViewport(valuetype MonoTouch.Metal.MTLViewport viewport) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setViewport:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewport" Type="MonoTouch.Metal.MTLViewport" />
      </Parameters>
      <Docs>
        <param name="viewport">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVisibilityResultMode">
      <MemberSignature Language="C#" Value="public void SetVisibilityResultMode (MonoTouch.Metal.MTLVisibilityResultMode mode, uint offset);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisibilityResultMode(valuetype MonoTouch.Metal.MTLVisibilityResultMode mode, unsigned int32 offset) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public void SetVisibilityResultMode (MonoTouch.Metal.MTLVisibilityResultMode mode, nuint offset);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVisibilityResultMode(valuetype MonoTouch.Metal.MTLVisibilityResultMode mode, valuetype System.nuint offset) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setVisibilityResultMode:offset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="MonoTouch.Metal.MTLVisibilityResultMode" />
        <Parameter Name="offset" Type="System.UInt32" apistyle="old" />
        <Parameter Name="offset" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <param name="offset">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
