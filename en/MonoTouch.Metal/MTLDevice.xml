<Type Name="MTLDevice" FullName="MonoTouch.Metal.MTLDevice">
  <TypeSignature Language="C#" Value="public abstract class MTLDevice : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Metal.IMTLDevice" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MTLDevice extends MonoTouch.Foundation.NSObject implements class MonoTouch.Metal.IMTLDevice, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="old">
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="new">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Metal.IMTLDevice</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("MTLDevice", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Availability(Introduced=MonoTouch.ObjCRuntime.Platform.iOS_8_0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MTLDevice ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MTLDevice (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MTLDevice (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MTLDevice (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBuffer">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLBuffer CreateBuffer (uint length, MonoTouch.Metal.MTLResourceOptions options);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLBuffer CreateBuffer(unsigned int32 length, valuetype MonoTouch.Metal.MTLResourceOptions options) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLBuffer CreateBuffer (nuint length, MonoTouch.Metal.MTLResourceOptions options);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLBuffer CreateBuffer(valuetype System.nuint length, valuetype MonoTouch.Metal.MTLResourceOptions options) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newBufferWithLength:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="length" Type="System.UInt32" apistyle="old" />
        <Parameter Name="options" Type="MonoTouch.Metal.MTLResourceOptions" />
        <Parameter Name="length" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="length">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBuffer">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLBuffer CreateBuffer (IntPtr pointer, uint length, MonoTouch.Metal.MTLResourceOptions options);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLBuffer CreateBuffer(native int pointer, unsigned int32 length, valuetype MonoTouch.Metal.MTLResourceOptions options) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLBuffer CreateBuffer (IntPtr pointer, nuint length, MonoTouch.Metal.MTLResourceOptions options);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLBuffer CreateBuffer(native int pointer, valuetype System.nuint length, valuetype MonoTouch.Metal.MTLResourceOptions options) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newBufferWithBytes:length:options:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointer" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.UInt32" apistyle="old" />
        <Parameter Name="options" Type="MonoTouch.Metal.MTLResourceOptions" />
        <Parameter Name="length" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="pointer">To be added.</param>
        <param name="length">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBufferNoCopy">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLBuffer CreateBufferNoCopy (IntPtr pointer, uint length, MonoTouch.Metal.MTLResourceOptions options, MonoTouch.Metal.MTLDeallocator deallocator);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLBuffer CreateBufferNoCopy(native int pointer, unsigned int32 length, valuetype MonoTouch.Metal.MTLResourceOptions options, class MonoTouch.Metal.MTLDeallocator deallocator) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLBuffer CreateBufferNoCopy (IntPtr pointer, nuint length, MonoTouch.Metal.MTLResourceOptions options, MonoTouch.Metal.MTLDeallocator deallocator);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLBuffer CreateBufferNoCopy(native int pointer, valuetype System.nuint length, valuetype MonoTouch.Metal.MTLResourceOptions options, class MonoTouch.Metal.MTLDeallocator deallocator) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newBufferWithBytesNoCopy:length:options:deallocator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pointer" Type="System.IntPtr" />
        <Parameter Name="length" Type="System.UInt32" apistyle="old" />
        <Parameter Name="options" Type="MonoTouch.Metal.MTLResourceOptions" />
        <Parameter Name="deallocator" Type="MonoTouch.Metal.MTLDeallocator">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDMTLDeallocator))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="length" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="pointer">To be added.</param>
        <param name="length">To be added.</param>
        <param name="options">To be added.</param>
        <param name="deallocator">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommandQueue">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLCommandQueue CreateCommandQueue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLCommandQueue CreateCommandQueue() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newCommandQueue")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLCommandQueue</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCommandQueue">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLCommandQueue CreateCommandQueue (uint maxCommandBufferCount);" apistyle="old" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLCommandQueue CreateCommandQueue(unsigned int32 maxCommandBufferCount) cil managed" apistyle="old" />
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLCommandQueue CreateCommandQueue (nuint maxCommandBufferCount);" apistyle="new" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLCommandQueue CreateCommandQueue(valuetype System.nuint maxCommandBufferCount) cil managed" apistyle="new" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newCommandQueueWithMaxCommandBufferCount:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLCommandQueue</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxCommandBufferCount" Type="System.UInt32" apistyle="old" />
        <Parameter Name="maxCommandBufferCount" Type="System.nuint" apistyle="new" />
      </Parameters>
      <Docs>
        <param name="maxCommandBufferCount">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateComputePipelineState">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLComputePipelineState CreateComputePipelineState (MonoTouch.Metal.IMTLFunction computeFunction, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLComputePipelineState CreateComputePipelineState(class MonoTouch.Metal.IMTLFunction computeFunction, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newComputePipelineStateWithFunction:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLComputePipelineState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="computeFunction" Type="MonoTouch.Metal.IMTLFunction" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="computeFunction">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateComputePipelineState">
      <MemberSignature Language="C#" Value="public abstract void CreateComputePipelineState (MonoTouch.Metal.IMTLFunction computeFunction, Action&lt;MonoTouch.Metal.IMTLComputePipelineState,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateComputePipelineState(class MonoTouch.Metal.IMTLFunction computeFunction, class System.Action`2&lt;class MonoTouch.Metal.IMTLComputePipelineState, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newComputePipelineStateWithFunction:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="computeFunction" Type="MonoTouch.Metal.IMTLFunction" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Metal.IMTLComputePipelineState,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V11))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="computeFunction">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateComputePipelineState">
      <MemberSignature Language="C#" Value="public virtual void CreateComputePipelineState (MonoTouch.Metal.MTLFunction computeFunction, Action&lt;MonoTouch.Metal.MTLComputePipelineState,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateComputePipelineState(class MonoTouch.Metal.MTLFunction computeFunction, class System.Action`2&lt;class MonoTouch.Metal.MTLComputePipelineState, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newComputePipelineStateWithFunction:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="computeFunction" Type="MonoTouch.Metal.MTLFunction" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Metal.MTLComputePipelineState,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V12))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="computeFunction">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateComputePipelineState">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Metal.MTLComputePipelineState CreateComputePipelineState (MonoTouch.Metal.MTLFunction computeFunction, MonoTouch.Metal.MTLPipelineOption options, out MonoTouch.Metal.MTLComputePipelineReflection reflection, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.MTLComputePipelineState CreateComputePipelineState(class MonoTouch.Metal.MTLFunction computeFunction, valuetype MonoTouch.Metal.MTLPipelineOption options, class MonoTouch.Metal.MTLComputePipelineReflection reflection, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newComputePipelineStateWithFunction:options:reflection:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.MTLComputePipelineState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="computeFunction" Type="MonoTouch.Metal.MTLFunction" />
        <Parameter Name="options" Type="MonoTouch.Metal.MTLPipelineOption" />
        <Parameter Name="reflection" Type="MonoTouch.Metal.MTLComputePipelineReflection&amp;" RefType="out" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="computeFunction">To be added.</param>
        <param name="options">To be added.</param>
        <param name="reflection">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDefaultLibrary">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLLibrary CreateDefaultLibrary ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLLibrary CreateDefaultLibrary() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newDefaultLibrary")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLLibrary</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDepthStencilState">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLDepthStencilState CreateDepthStencilState (MonoTouch.Metal.MTLDepthStencilDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLDepthStencilState CreateDepthStencilState(class MonoTouch.Metal.MTLDepthStencilDescriptor descriptor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newDepthStencilStateWithDescriptor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLDepthStencilState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="MonoTouch.Metal.MTLDepthStencilDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLibrary">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLLibrary CreateLibrary (MonoTouch.Foundation.NSObject data, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLLibrary CreateLibrary(class MonoTouch.Foundation.NSObject data, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newLibraryWithData:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLLibrary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLibrary">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLLibrary CreateLibrary (string filepath, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLLibrary CreateLibrary(string filepath, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newLibraryWithFile:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLLibrary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filepath" Type="System.String" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="filepath">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLibrary">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLLibrary CreateLibrary (string source, MonoTouch.Metal.MTLCompileOptions options, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLLibrary CreateLibrary(string source, class MonoTouch.Metal.MTLCompileOptions options, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newLibraryWithSource:options:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLLibrary</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="MonoTouch.Metal.MTLCompileOptions" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="options">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLibrary">
      <MemberSignature Language="C#" Value="public abstract void CreateLibrary (string source, MonoTouch.Metal.MTLCompileOptions options, Action&lt;MonoTouch.Metal.IMTLLibrary,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateLibrary(string source, class MonoTouch.Metal.MTLCompileOptions options, class System.Action`2&lt;class MonoTouch.Metal.IMTLLibrary, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newLibraryWithSource:options:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.String" />
        <Parameter Name="options" Type="MonoTouch.Metal.MTLCompileOptions" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Metal.IMTLLibrary,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="source">To be added.</param>
        <param name="options">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRenderPipelineState">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLRenderPipelineState CreateRenderPipelineState (MonoTouch.Metal.MTLRenderPipelineDescriptor descriptor, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLRenderPipelineState CreateRenderPipelineState(class MonoTouch.Metal.MTLRenderPipelineDescriptor descriptor, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newRenderPipelineStateWithDescriptor:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLRenderPipelineState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="MonoTouch.Metal.MTLRenderPipelineDescriptor" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="descriptor">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRenderPipelineState">
      <MemberSignature Language="C#" Value="public abstract void CreateRenderPipelineState (MonoTouch.Metal.MTLRenderPipelineDescriptor descriptor, Action&lt;MonoTouch.Metal.IMTLRenderPipelineState,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateRenderPipelineState(class MonoTouch.Metal.MTLRenderPipelineDescriptor descriptor, class System.Action`2&lt;class MonoTouch.Metal.IMTLRenderPipelineState, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newRenderPipelineStateWithDescriptor:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="MonoTouch.Metal.MTLRenderPipelineDescriptor" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Metal.IMTLRenderPipelineState,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity2V10))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="descriptor">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRenderPipelineState">
      <MemberSignature Language="C#" Value="public virtual void CreateRenderPipelineState (MonoTouch.Metal.MTLRenderPipelineDescriptor descriptor, MonoTouch.Metal.MTLPipelineOption options, Action&lt;MonoTouch.Metal.IMTLRenderPipelineState,MonoTouch.Metal.MTLRenderPipelineReflection,MonoTouch.Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateRenderPipelineState(class MonoTouch.Metal.MTLRenderPipelineDescriptor descriptor, valuetype MonoTouch.Metal.MTLPipelineOption options, class System.Action`3&lt;class MonoTouch.Metal.IMTLRenderPipelineState, class MonoTouch.Metal.MTLRenderPipelineReflection, class MonoTouch.Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newRenderPipelineStateWithDescriptor:options:completionHandler:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="MonoTouch.Metal.MTLRenderPipelineDescriptor" />
        <Parameter Name="options" Type="MonoTouch.Metal.MTLPipelineOption" />
        <Parameter Name="completionHandler" Type="System.Action&lt;MonoTouch.Metal.IMTLRenderPipelineState,MonoTouch.Metal.MTLRenderPipelineReflection,MonoTouch.Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDActionArity3V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="descriptor">To be added.</param>
        <param name="options">To be added.</param>
        <param name="completionHandler">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRenderPipelineState">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Metal.MTLRenderPipelineState CreateRenderPipelineState (MonoTouch.Metal.MTLRenderPipelineDescriptor descriptor, MonoTouch.Metal.MTLPipelineOption options, out MonoTouch.Metal.MTLRenderPipelineReflection reflection, out MonoTouch.Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.MTLRenderPipelineState CreateRenderPipelineState(class MonoTouch.Metal.MTLRenderPipelineDescriptor descriptor, valuetype MonoTouch.Metal.MTLPipelineOption options, class MonoTouch.Metal.MTLRenderPipelineReflection reflection, class MonoTouch.Foundation.NSError error) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newRenderPipelineStateWithDescriptor:options:reflection:error:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.MTLRenderPipelineState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="MonoTouch.Metal.MTLRenderPipelineDescriptor" />
        <Parameter Name="options" Type="MonoTouch.Metal.MTLPipelineOption" />
        <Parameter Name="reflection" Type="MonoTouch.Metal.MTLRenderPipelineReflection&amp;" RefType="out" />
        <Parameter Name="error" Type="MonoTouch.Foundation.NSError&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="descriptor">To be added.</param>
        <param name="options">To be added.</param>
        <param name="reflection">To be added.</param>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSamplerState">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLSamplerState CreateSamplerState (MonoTouch.Metal.MTLSamplerDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLSamplerState CreateSamplerState(class MonoTouch.Metal.MTLSamplerDescriptor descriptor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newSamplerStateWithDescriptor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLSamplerState</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="MonoTouch.Metal.MTLSamplerDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateTexture">
      <MemberSignature Language="C#" Value="public abstract MonoTouch.Metal.IMTLTexture CreateTexture (MonoTouch.Metal.MTLTextureDescriptor descriptor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Metal.IMTLTexture CreateTexture(class MonoTouch.Metal.MTLTextureDescriptor descriptor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("newTextureWithDescriptor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="MonoTouch.Metal.MTLTextureDescriptor" />
      </Parameters>
      <Docs>
        <param name="descriptor">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public abstract string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemDefault">
      <MemberSignature Language="C#" Value="public static MonoTouch.Metal.IMTLDevice SystemDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Metal.IMTLDevice SystemDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="old">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo apistyle="new">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.Metal.IMTLDevice</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
