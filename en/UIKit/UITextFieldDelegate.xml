<Type Name="UITextFieldDelegate" FullName="UIKit.UITextFieldDelegate">
  <TypeSignature Language="C#" Value="public class UITextFieldDelegate : Foundation.NSObject, IDisposable, UIKit.IUITextFieldDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UITextFieldDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUITextFieldDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UITextFieldDelegate" />
  <TypeSignature Language="F#" Value="type UITextFieldDelegate = class&#xA;    inherit NSObject&#xA;    interface IUITextFieldDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUITextFieldDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UITextFieldDelegate", false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class that receives notifications from a UITextField.</summary>
    <remarks>
A strongly typed implementation of a class that can be used to respond to events raised by the <see cref="T:UIKit.UITextField" />.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextFieldDelegate_Protocol/index.html">Apple documentation for <c>UITextFieldDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextFieldDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITextFieldDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UITextFieldDelegate : Foundation.NSObjectFlag -&gt; UIKit.UITextFieldDelegate" Usage="new UIKit.UITextFieldDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UITextFieldDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UITextFieldDelegate : nativeint -&gt; UIKit.UITextFieldDelegate" Usage="new UIKit.UITextFieldDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingEnded">
      <MemberSignature Language="C#" Value="public virtual void EditingEnded (UIKit.UITextField textField);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EditingEnded(class UIKit.UITextField textField) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.EditingEnded(UIKit.UITextField)" />
      <MemberSignature Language="F#" Value="abstract member EditingEnded : UIKit.UITextField -&gt; unit&#xA;override this.EditingEnded : UIKit.UITextField -&gt; unit" Usage="uITextFieldDelegate.EditingEnded textField" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textFieldDidEndEditing:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textField" Type="UIKit.UITextField" />
      </Parameters>
      <Docs>
        <param name="textField">The text field for which editing ended.</param>
        <summary>Indicates that editing has ended in the specified text field.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingEnded">
      <MemberSignature Language="C#" Value="public virtual void EditingEnded (UIKit.UITextField textField, UIKit.UITextFieldDidEndEditingReason reason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EditingEnded(class UIKit.UITextField textField, valuetype UIKit.UITextFieldDidEndEditingReason reason) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.EditingEnded(UIKit.UITextField,UIKit.UITextFieldDidEndEditingReason)" />
      <MemberSignature Language="F#" Value="abstract member EditingEnded : UIKit.UITextField * UIKit.UITextFieldDidEndEditingReason -&gt; unit&#xA;override this.EditingEnded : UIKit.UITextField * UIKit.UITextFieldDidEndEditingReason -&gt; unit" Usage="uITextFieldDelegate.EditingEnded (textField, reason)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textFieldDidEndEditing:reason:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textField" Type="UIKit.UITextField" />
        <Parameter Name="reason" Type="UIKit.UITextFieldDidEndEditingReason" />
      </Parameters>
      <Docs>
        <param name="textField">The text field for which editing ended.</param>
        <param name="reason">The reason that editing ended.</param>
        <summary>Indicates that editing has ended in the specified text field for the specified reason.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingStarted">
      <MemberSignature Language="C#" Value="public virtual void EditingStarted (UIKit.UITextField textField);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EditingStarted(class UIKit.UITextField textField) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.EditingStarted(UIKit.UITextField)" />
      <MemberSignature Language="F#" Value="abstract member EditingStarted : UIKit.UITextField -&gt; unit&#xA;override this.EditingStarted : UIKit.UITextField -&gt; unit" Usage="uITextFieldDelegate.EditingStarted textField" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textFieldDidBeginEditing:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textField" Type="UIKit.UITextField" />
      </Parameters>
      <Docs>
        <param name="textField">To be added.</param>
        <summary>Indicates that editing has begun on the specified text field.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeginEditing">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBeginEditing (UIKit.UITextField textField);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBeginEditing(class UIKit.UITextField textField) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.ShouldBeginEditing(UIKit.UITextField)" />
      <MemberSignature Language="F#" Value="abstract member ShouldBeginEditing : UIKit.UITextField -&gt; bool&#xA;override this.ShouldBeginEditing : UIKit.UITextField -&gt; bool" Usage="uITextFieldDelegate.ShouldBeginEditing textField" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textFieldShouldBeginEditing:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textField" Type="UIKit.UITextField" />
      </Parameters>
      <Docs>
        <param name="textField">To be added.</param>
        <summary>Whether editing should begin in the specified text field.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldChangeCharacters">
      <MemberSignature Language="C#" Value="public virtual bool ShouldChangeCharacters (UIKit.UITextField textField, Foundation.NSRange range, string replacementString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldChangeCharacters(class UIKit.UITextField textField, valuetype Foundation.NSRange range, string replacementString) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.ShouldChangeCharacters(UIKit.UITextField,Foundation.NSRange,System.String)" />
      <MemberSignature Language="F#" Value="abstract member ShouldChangeCharacters : UIKit.UITextField * Foundation.NSRange * string -&gt; bool&#xA;override this.ShouldChangeCharacters : UIKit.UITextField * Foundation.NSRange * string -&gt; bool" Usage="uITextFieldDelegate.ShouldChangeCharacters (textField, range, replacementString)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textField:shouldChangeCharactersInRange:replacementString:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textField" Type="UIKit.UITextField" />
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="replacementString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textField">To be added.</param>
        <param name="range">To be added.</param>
        <param name="replacementString">To be added.</param>
        <summary>Whether the specified text should be changed.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldClear">
      <MemberSignature Language="C#" Value="public virtual bool ShouldClear (UIKit.UITextField textField);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldClear(class UIKit.UITextField textField) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.ShouldClear(UIKit.UITextField)" />
      <MemberSignature Language="F#" Value="abstract member ShouldClear : UIKit.UITextField -&gt; bool&#xA;override this.ShouldClear : UIKit.UITextField -&gt; bool" Usage="uITextFieldDelegate.ShouldClear textField" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textFieldShouldClear:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textField" Type="UIKit.UITextField" />
      </Parameters>
      <Docs>
        <param name="textField">To be added.</param>
        <summary>Whether the specified text field's current contents should be removed.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldEndEditing">
      <MemberSignature Language="C#" Value="public virtual bool ShouldEndEditing (UIKit.UITextField textField);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldEndEditing(class UIKit.UITextField textField) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.ShouldEndEditing(UIKit.UITextField)" />
      <MemberSignature Language="F#" Value="abstract member ShouldEndEditing : UIKit.UITextField -&gt; bool&#xA;override this.ShouldEndEditing : UIKit.UITextField -&gt; bool" Usage="uITextFieldDelegate.ShouldEndEditing textField" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textFieldShouldEndEditing:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textField" Type="UIKit.UITextField" />
      </Parameters>
      <Docs>
        <param name="textField">To be added.</param>
        <summary>Whether editing should stop in the specified text field.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReturn">
      <MemberSignature Language="C#" Value="public virtual bool ShouldReturn (UIKit.UITextField textField);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldReturn(class UIKit.UITextField textField) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextFieldDelegate.ShouldReturn(UIKit.UITextField)" />
      <MemberSignature Language="F#" Value="abstract member ShouldReturn : UIKit.UITextField -&gt; bool&#xA;override this.ShouldReturn : UIKit.UITextField -&gt; bool" Usage="uITextFieldDelegate.ShouldReturn textField" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textFieldShouldReturn:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textField" Type="UIKit.UITextField" />
      </Parameters>
      <Docs>
        <param name="textField">To be added.</param>
        <summary>Whether the text field should process the pressing of the return button.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
