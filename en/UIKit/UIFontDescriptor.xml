<Type Name="UIFontDescriptor" FullName="UIKit.UIFontDescriptor">
  <TypeSignature Language="C#" Value="public class UIFontDescriptor : Foundation.NSObject, Foundation.INSCopying, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIFontDescriptor extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIFontDescriptor", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Describes properties of a font, use to create fonts with certain features.   Provides ways of finding fonts matching a description as well.</summary>
    <remarks>
      <para> Developers create UIFontDescriptors with a set of
	parameters they are interested in (font faces, font families,
	font attributes, fallbacks).  You can consider these
	descriptors queries, which you can later use to create a
	concrete UIFont wit by using the <see cref="M:UIKit.UIFont.FromDescriptor" /> method.
      </para>
      <para>

	These objects are immutable, once created, they can not be
	changed.  But given a UIFontDescriptor, you can create a more
	precise font descriptor instance with new information.  You
	can create a new UIFontDescriptor with more detailed font
	attributes using the <see cref="M:UIKit.UIFontDescriptor.CreateWithAttributes" />
	method, extend one by explicitly setting a font face or font family using the <see cref="M:UIKit.UIFontDescriptor.CreateWithFace" /> and <see cref="M:UIKit.UIFontDescriptor.CreateWithFamily" /> methods, specify a desired font size or a transformation matrix with the <see cref="M:UIKit.UIFontDescriptor.CreateWithSize" /> and <see cref="M:UIKit.UIFontDescriptor.CreateWithMatrix" /> methods, or request that certain stylistic traits be present with <see cref="M:UIKit.UIFontDescriptor.CreateWithTraits" />.

      </para>
      <para>
	
	This class exposes various static properties that return the
	UIFontDescriptor that matches the user's global preferences
	(font sizes) as well as the system font.   These properties are: 
	<see cref="P:UIKit.UIFontDescriptor.PreferredHeadline" />,
	<see cref="P:UIKit.UIFontDescriptor.PreferredBody" />,
	<see cref="P:UIKit.UIFontDescriptor.PreferredSubheadline" />,
	<see cref="P:UIKit.UIFontDescriptor.PreferredFootnote" />,
	<see cref="P:UIKit.UIFontDescriptor.PreferredCaption1" /> and
	<see cref="P:UIKit.UIFontDescriptor.PreferredCaption2" />.
      </para>
      <para> You can use the <see cref="M:UIKit.UIFontDescriptor.GetMatchingFontDescriptors" /> method to get a set of UIFontDescriptors that match your
	font explicitly, or you can use <see cref="M:UIKit.UIFontDescriptor.CreateWithTraits" />
	and <see cref="M:UIKit.UIFont.FromDescriptor" />
	methods to match implicitly.
      </para>
      <para>
	The following example shows how to create two fonts: one with
	the preferred font for body text, and then a bold version of
	the same font:
      </para>
      <example>
        <code lang="C#"><![CDATA[

// Creates a UIFont for the body text
var bodyDescriptor = UIFontDescriptor.PreferredBody;
UIFont bodyFont = UIFont.FromDescriptor (bodyDescriptor, 0);
	  
// Creates a bold version of it:
var boldDescriptor = bodyDescriptor.CreateWithTraits (UIFontDescriptorSymbolicTraits.Bold);
UIFont boldBodyFont = UIFont.FromDescriptor (boldDescriptor, 0);

]]></code>
      </example>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIFontDescriptor_Class/index.html">Apple documentation for <c>UIFontDescriptor</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSDictionary attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithFontAttributes:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attributes" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Weak dictionary of font attributes.</param>
        <summary>Creates a UIFontDescriptor using a set of attributes contained in the dictionary.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIFontDescriptor (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIFontDescriptor (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIFontDescriptor (UIKit.UIFontAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.UIFontAttributes attributes) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="attributes" Type="UIKit.UIFontAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">List of desired font attributes.</param>
        <summary>Creates a font descriptor using the specified font attributes.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CascadeList">
      <MemberSignature Language="C#" Value="public UIKit.UIFontDescriptor[] CascadeList { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIFontDescriptor[] CascadeList" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies the list of sub descriptors to be used before the system default fallbacks.</summary>
        <value>The default is the list of descriptors based on the user locale.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterSet">
      <MemberSignature Language="C#" Value="public Foundation.NSCharacterSet CharacterSet { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSCharacterSet CharacterSet" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSCharacterSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Describes the character set supported by the specified font.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.This can be used from a background thread.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>
          <para>Implementation of the INSCopyable interface.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithAttributes">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFontDescriptor CreateWithAttributes (Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIFontDescriptor CreateWithAttributes(class Foundation.NSDictionary attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fontDescriptorByAddingAttributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">dictionary containing the attributes.</param>
        <summary>Creates a new UIFontDescriptor based on adding the provided attributes to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added attributes.</returns>
        <remarks>
          <para>Use the strongly typed version instead.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithAttributes">
      <MemberSignature Language="C#" Value="public UIKit.UIFontDescriptor CreateWithAttributes (UIKit.UIFontAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UIFontDescriptor CreateWithAttributes(class UIKit.UIFontAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="UIKit.UIFontAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">dictionary containing the attributes.</param>
        <summary>Creates a new UIFontDescriptor based on adding the provided attributes to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added attributes.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithFace">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFontDescriptor CreateWithFace (string newFace);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIFontDescriptor CreateWithFace(string newFace) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fontDescriptorWithFace:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newFace" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newFace">New font face to use.</param>
        <summary>Creates a new UIFontDescriptor based on setting a font face to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added font face.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithFamily">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFontDescriptor CreateWithFamily (string newFamily);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIFontDescriptor CreateWithFamily(string newFamily) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fontDescriptorWithFamily:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newFamily" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="newFamily">New font family to use.</param>
        <summary>Creates a new UIFontDescriptor based on setting a font family to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added font family.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithMatrix">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFontDescriptor CreateWithMatrix (CoreGraphics.CGAffineTransform matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIFontDescriptor CreateWithMatrix(valuetype CoreGraphics.CGAffineTransform matrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fontDescriptorWithMatrix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="matrix">New transofmration matrix to use.</param>
        <summary>Creates a new UIFontDescriptor based on setting a new transformation matrix to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added transformation matrix.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithSize">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFontDescriptor CreateWithSize (nfloat newPointSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIFontDescriptor CreateWithSize(valuetype System.nfloat newPointSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fontDescriptorWithSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newPointSize" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="newPointSize">New desired font size for the descriptor.</param>
        <summary>Creates a new UIFontDescriptor based on setting a new font size to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added font size.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateWithTraits">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFontDescriptor CreateWithTraits (UIKit.UIFontDescriptorSymbolicTraits symbolicTraits);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIFontDescriptor CreateWithTraits(valuetype UIKit.UIFontDescriptorSymbolicTraits symbolicTraits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fontDescriptorWithSymbolicTraits:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="symbolicTraits" Type="UIKit.UIFontDescriptorSymbolicTraits" />
      </Parameters>
      <Docs>
        <param name="symbolicTraits">New desired stylistic traits for the descriptor.</param>
        <summary>Creates a new UIFontDescriptor based on setting a new symbolic traits to the current descriptor.</summary>
        <returns>New UIFontDescriptor containing the added symbolic traits.</returns>
        <remarks>
          <para>Traits include attributes like bold, italic, condensed, monospace, vertical, optimized for the UI, </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Face">
      <MemberSignature Language="C#" Value="public string Face { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Face" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font face.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Family">
      <MemberSignature Language="C#" Value="public string Family { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Family" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font family.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FeatureSettings">
      <MemberSignature Language="C#" Value="public UIKit.UIFontFeature[] FeatureSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIFontFeature[] FeatureSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontFeature[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Typographic and layout feature settings.</summary>
        <value>
        </value>
        <remarks>
          <para>

	    This property is an array of UIFontFeature objects, each
	    representing a font-specific typograph or layout feature
	    that can be enabled in the font.  For background on Font
	    Features, you can read
	    https://developer.apple.com/fonts/registry

	  </para>
          <para>

	    The following example shows how to configure the font to
	    use proportional numbers as well as informing the
	    rendering engine to use the 1st Character Alternatives available in this font. 
	  </para>
          <example>
            <code lang="C#"><![CDATA[
UIFont CustomizeFont (UIFont font)
{
    var originalDescriptor = font.FontDescriptor;
    var attributes = new UIFontAttributes (
        new UIFontFeature (CTFontFeatureNumberSpacing.Selector.ProportionalNumbers),
	new UIFontFeature ((CTFontFeatureCharacterAlternatives.Selector)1));

    var newDesc = originalDescriptor.CreateWithAttributes (attributes);
    return UIFont.FromDescriptor (newDesc, 80);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FixedAdvance">
      <MemberSignature Language="C#" Value="public Nullable&lt;float&gt; FixedAdvance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float32&gt; FixedAdvance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Override for font's fixed advance for individual glyphs.</summary>
        <value>Default value is 0, null if not set.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontAttributes">
      <MemberSignature Language="C#" Value="public UIKit.UIFontAttributes FontAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIFontAttributes FontAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font attributes.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAttributes">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor FromAttributes (Foundation.NSDictionary attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFontDescriptor FromAttributes(class Foundation.NSDictionary attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fontDescriptorWithFontAttributes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="attributes">Weak dictionary of font attributes.</param>
        <summary>(Weak) Creates a UIFontDescriptor using a set of attributes contained in the dictionary.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromAttributes">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor FromAttributes (UIKit.UIFontAttributes attributes);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFontDescriptor FromAttributes(class UIKit.UIFontAttributes attributes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="UIKit.UIFontAttributes" />
      </Parameters>
      <Docs>
        <param name="attributes">Weak dictionary of font attributes.</param>
        <summary>Creates a UIFontDescriptor using a set of attributes contained in the dictionary.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor FromName (string fontName, CoreGraphics.CGAffineTransform matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFontDescriptor FromName(string fontName, valuetype CoreGraphics.CGAffineTransform matrix) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fontDescriptorWithName:matrix:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fontName" Type="System.String" />
        <Parameter Name="matrix" Type="CoreGraphics.CGAffineTransform" />
      </Parameters>
      <Docs>
        <param name="fontName">Font name.</param>
        <param name="matrix">Transformation matrix.</param>
        <summary>Creates a UIFontDescriptor using the specified name and transformation matrix.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor FromName (string fontName, nfloat size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFontDescriptor FromName(string fontName, valuetype System.nfloat size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fontDescriptorWithName:size:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fontName" Type="System.String" />
        <Parameter Name="size" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="fontName">Font name.</param>
        <param name="size">Font size.</param>
        <summary>Creates a UIFontDescriptor using the specified name and font size.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatchingFontDescriptors">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFontDescriptor[] GetMatchingFontDescriptors (Foundation.NSSet mandatoryKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIFontDescriptor[] GetMatchingFontDescriptors(class Foundation.NSSet mandatoryKeys) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("matchingFontDescriptorsWithMandatoryKeys:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mandatoryKeys" Type="Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="mandatoryKeys">
          <para>Mandatory keys that must be present.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Retrieve a UIFontDescriptor with an explicit set of features.</summary>
        <returns>
        </returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMatchingFontDescriptors">
      <MemberSignature Language="C#" Value="public UIKit.UIFontDescriptor[] GetMatchingFontDescriptors (UIKit.UIFontDescriptorAttribute[] mandatoryKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UIFontDescriptor[] GetMatchingFontDescriptors(valuetype UIKit.UIFontDescriptorAttribute[] mandatoryKeys) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mandatoryKeys" Type="UIKit.UIFontDescriptorAttribute[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="mandatoryKeys">The list of mandatory keys that you desire on the font descriptor.</param>
        <summary>Retrieve a UIFontDescriptor with an explicit set of features.</summary>
        <returns>
        </returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject GetObject (Foundation.NSString anAttribute);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject GetObject(class Foundation.NSString anAttribute) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("objectForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anAttribute" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="anAttribute">Attribute to retrieve.</param>
        <summary>Low-level/weak API to retrieve properties from the UIFontDescriptor.</summary>
        <returns>
        </returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredDescriptorForTextStyle">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor GetPreferredDescriptorForTextStyle (Foundation.NSString uiFontTextStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFontDescriptor GetPreferredDescriptorForTextStyle(class Foundation.NSString uiFontTextStyle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("preferredFontDescriptorWithTextStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiFontTextStyle" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="uiFontTextStyle">Name of one of the built-in system text styles.</param>
        <summary>Weakly-typed version of an API used to retrieve the user's desired font size.</summary>
        <returns>UIFontDescriptor</returns>
        <remarks>
          <para>
	    
	  You can instead use the 
	    <see cref="P:UIKit.UIFontDescriptor.PreferredHeadline" />,
	    <see cref="P:UIKit.UIFontDescriptor.PreferredBody" />,
	    <see cref="P:UIKit.UIFontDescriptor.PreferredSubheadline" />,
	    <see cref="P:UIKit.UIFontDescriptor.PreferredFootnote" />,
	    <see cref="P:UIKit.UIFontDescriptor.PreferredCaption1" /> and
	    <see cref="P:UIKit.UIFontDescriptor.PreferredCaption2" /> properties to get this information.
	  </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredDescriptorForTextStyle">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor GetPreferredDescriptorForTextStyle (UIKit.UIFontTextStyle uiFontTextStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFontDescriptor GetPreferredDescriptorForTextStyle(valuetype UIKit.UIFontTextStyle uiFontTextStyle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiFontTextStyle" Type="UIKit.UIFontTextStyle" />
      </Parameters>
      <Docs>
        <param name="uiFontTextStyle">Name of one of the built-in system text styles.</param>
        <summary>Weakly-typed version of an API used to retrieve the user's desired font size.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredDescriptorForTextStyle">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor GetPreferredDescriptorForTextStyle (Foundation.NSString uiFontTextStyle, UIKit.UITraitCollection traitCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFontDescriptor GetPreferredDescriptorForTextStyle(class Foundation.NSString uiFontTextStyle, class UIKit.UITraitCollection traitCollection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("preferredFontDescriptorWithTextStyle:compatibleWithTraitCollection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiFontTextStyle" Type="Foundation.NSString" />
        <Parameter Name="traitCollection" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="uiFontTextStyle">Name of one of the built-in system text styles.</param>
        <param name="traitCollection">
          <para>The trait collection for which to get the preferred font descriptor.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Returns the preferred font descriptor for the specified style and trait collection.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredDescriptorForTextStyle">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor GetPreferredDescriptorForTextStyle (UIKit.UIFontTextStyle uiFontTextStyle, UIKit.UITraitCollection traitCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFontDescriptor GetPreferredDescriptorForTextStyle(valuetype UIKit.UIFontTextStyle uiFontTextStyle, class UIKit.UITraitCollection traitCollection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiFontTextStyle" Type="UIKit.UIFontTextStyle" />
        <Parameter Name="traitCollection" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="uiFontTextStyle">Name of one of the built-in system text styles.</param>
        <param name="traitCollection">
          <para>The trait collection for which to get the preferred font descriptor.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Returns the preferred font descriptor for the specified style and trait collection.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Matrix">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGAffineTransform Matrix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGAffineTransform Matrix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("matrix")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Transformation matrix for the descriptor.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of the descriptor.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PointSize">
      <MemberSignature Language="C#" Value="public virtual nfloat PointSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat PointSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("pointSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Point size in the descriptor.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PostscriptName">
      <MemberSignature Language="C#" Value="public virtual string PostscriptName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PostscriptName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("postscriptName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The font's PostScript name.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredBody">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor PreferredBody { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFontDescriptor PreferredBody" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIFontDescriptor" /> describing the preferred font for body text.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredCallout">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor PreferredCallout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFontDescriptor PreferredCallout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIFontDescriptor" /> describing the preferred font for callouts.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredCaption1">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor PreferredCaption1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFontDescriptor PreferredCaption1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIFontDescriptor" /> describing the preferred font for captions.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredCaption2">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor PreferredCaption2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFontDescriptor PreferredCaption2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIFontDescriptor" /> describing the preferred font for 'caption 2'.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredFootnote">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor PreferredFootnote { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFontDescriptor PreferredFootnote" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIFontDescriptor" /> describing the preferred font for footnotes.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeadline">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor PreferredHeadline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFontDescriptor PreferredHeadline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIFontDescriptor" /> describing the preferred font for headlines.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredSubheadline">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor PreferredSubheadline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFontDescriptor PreferredSubheadline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIFontDescriptor" /> describing the preferred font for subheadings.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredTitle1">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor PreferredTitle1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFontDescriptor PreferredTitle1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIFontDescriptor" /> describing the preferred font for titles ('Title 1').</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredTitle2">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor PreferredTitle2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFontDescriptor PreferredTitle2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIFontDescriptor" /> describing the preferred font for level 2 titles ('Title 2').</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredTitle3">
      <MemberSignature Language="C#" Value="public static UIKit.UIFontDescriptor PreferredTitle3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFontDescriptor PreferredTitle3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIFontDescriptor" /> describing the preferred font for level 3 titles ('Title 3').</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public Nullable&lt;float&gt; Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;float32&gt; Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Font size (if set).</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SymbolicTraits">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFontDescriptorSymbolicTraits SymbolicTraits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIFontDescriptorSymbolicTraits SymbolicTraits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("symbolicTraits")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptorSymbolicTraits</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Font's Symbolic traits</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStyle">
      <MemberSignature Language="C#" Value="public Foundation.NSString TextStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSString TextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Name of the style to use for text.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Traits">
      <MemberSignature Language="C#" Value="public UIKit.UIFontTraits Traits { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIFontTraits Traits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFontTraits</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Font's traits.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleName">
      <MemberSignature Language="C#" Value="public string VisibleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string VisibleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The visible name for this descriptor.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakFeatureSettings">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary[] WeakFeatureSettings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary[] WeakFeatureSettings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Weakly typed version of the feature settings.</summary>
        <value>
        </value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakFontAttributes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary WeakFontAttributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary WeakFontAttributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("fontAttributes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>(Weak) font attributes.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
