<Type Name="UITextField+Notifications" FullName="UIKit.UITextField+Notifications">
  <TypeSignature Language="C#" Value="public static class UITextField.Notifications" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract sealed beforefieldinit UITextField/Notifications extends System.Object" />
  <TypeSignature Language="DocId" Value="T:UIKit.UITextField.Notifications" />
  <TypeSignature Language="F#" Value="type UITextField.Notifications = class" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Notification posted by the <see cref="T:UIKit.UITextField" /> class.</summary>
    <remarks>
      <para>This is a static class which contains various helper methods that allow developers to observe events posted in the iOS notification hub (<see cref="T:Foundation.NSNotificationCenter" />).</para>
      <para>The methods defined in this class post events invoke the provided method or lambda with a <see cref="T:Foundation.NSNotificationEventArgs" /> parameter which contains strongly typed properties for the notification arguments.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ObserveCurrentInputModeDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveCurrentInputModeDidChange (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveCurrentInputModeDidChange(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextField.Notifications.ObserveCurrentInputModeDidChange(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveCurrentInputModeDidChange : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="UIKit.UITextField.Notifications.ObserveCurrentInputModeDidChange handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:UIKit.UITextField.CurrentInputModeDidChangeNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:UIKit.UITextField.CurrentInputModeDidChangeNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = UITextField.Notifications.ObserveCurrentInputModeDidChange ((notification) => {
	Console.WriteLine ("Observed CurrentInputModeDidChangeNotification!");
};

// Listen to all notifications posted for a single object
var token = UITextField.Notifications.ObserveCurrentInputModeDidChange (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed CurrentInputModeDidChangeNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveCurrentInputModeDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveCurrentInputModeDidChange (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveCurrentInputModeDidChange(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextField.Notifications.ObserveCurrentInputModeDidChange(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveCurrentInputModeDidChange : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="UIKit.UITextField.Notifications.ObserveCurrentInputModeDidChange (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:UIKit.UITextField.CurrentInputModeDidChangeNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:UIKit.UITextField.CurrentInputModeDidChangeNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = UITextField.Notifications.ObserveCurrentInputModeDidChange ((notification) => {
	Console.WriteLine ("Observed CurrentInputModeDidChangeNotification!");
};

// Listen to all notifications posted for a single object
var token = UITextField.Notifications.ObserveCurrentInputModeDidChange (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed CurrentInputModeDidChangeNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveTextDidBeginEditing">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveTextDidBeginEditing (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveTextDidBeginEditing(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextField.Notifications.ObserveTextDidBeginEditing(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveTextDidBeginEditing : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="UIKit.UITextField.Notifications.ObserveTextDidBeginEditing handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:UIKit.UITextField.TextDidBeginEditingNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = UITextField.Notifications.ObserveTextDidBeginEditing ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextField.Notifications.ObserveTextDidBeginEditing (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveTextDidBeginEditing">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveTextDidBeginEditing (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveTextDidBeginEditing(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextField.Notifications.ObserveTextDidBeginEditing(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveTextDidBeginEditing : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="UIKit.UITextField.Notifications.ObserveTextDidBeginEditing (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:UIKit.UITextField.TextDidBeginEditingNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:UIKit.UITextField.TextDidBeginEditingNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = UITextField.Notifications.ObserveTextDidBeginEditing ((notification) => {
	Console.WriteLine ("Observed TextDidBeginEditingNotification!");
};

// Listen to all notifications posted for a single object
var token = UITextField.Notifications.ObserveTextDidBeginEditing (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed TextDidBeginEditingNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveTextDidEndEditing">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveTextDidEndEditing (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveTextDidEndEditing(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextField.Notifications.ObserveTextDidEndEditing(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveTextDidEndEditing : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="UIKit.UITextField.Notifications.ObserveTextDidEndEditing handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:UIKit.UITextField.TextDidEndEditingNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = UITextField.Notifications.ObserveTextDidEndEditing ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextField.Notifications.ObserveTextDidEndEditing (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveTextDidEndEditing">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveTextDidEndEditing (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveTextDidEndEditing(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextField.Notifications.ObserveTextDidEndEditing(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveTextDidEndEditing : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="UIKit.UITextField.Notifications.ObserveTextDidEndEditing (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:UIKit.UITextField.TextDidEndEditingNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:UIKit.UITextField.TextDidEndEditingNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = UITextField.Notifications.ObserveTextDidEndEditing ((notification) => {
	Console.WriteLine ("Observed TextDidEndEditingNotification!");
};

// Listen to all notifications posted for a single object
var token = UITextField.Notifications.ObserveTextDidEndEditing (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed TextDidEndEditingNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveTextFieldTextDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveTextFieldTextDidChange (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveTextFieldTextDidChange(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextField.Notifications.ObserveTextFieldTextDidChange(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveTextFieldTextDidChange : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="UIKit.UITextField.Notifications.ObserveTextFieldTextDidChange handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:UIKit.UITextField.TextFieldTextDidChangeNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = UITextField.Notifications.ObserveTextFieldTextDidChange ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = UITextField.Notifications.ObserveTextFieldTextDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveTextFieldTextDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveTextFieldTextDidChange (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveTextFieldTextDidChange(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextField.Notifications.ObserveTextFieldTextDidChange(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveTextFieldTextDidChange : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="UIKit.UITextField.Notifications.ObserveTextFieldTextDidChange (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:UIKit.UITextField.TextFieldTextDidChangeNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:UIKit.UITextField.TextFieldTextDidChangeNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = UITextField.Notifications.ObserveTextFieldTextDidChange ((notification) => {
	Console.WriteLine ("Observed TextFieldTextDidChangeNotification!");
};

// Listen to all notifications posted for a single object
var token = UITextField.Notifications.ObserveTextFieldTextDidChange (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed TextFieldTextDidChangeNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
