<Type Name="NSFileProviderExtension" FullName="UIKit.NSFileProviderExtension">
  <TypeSignature Language="C#" Value="public class NSFileProviderExtension : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSFileProviderExtension extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:UIKit.NSFileProviderExtension" />
  <TypeSignature Language="F#" Value="type NSFileProviderExtension = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSFileProviderExtension", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Subclasses of <see cref="T:UIKit.NSFileProviderExtension" /> implement the move and open functionality for extensions of type <see cref="T:UIKit.UIDocumentPickerViewController" />.</summary>
    <remarks>
      <para>(More documentation for this node is coming)</para>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/NSFileProviderExtension_Class/index.html">Apple documentation for <c>NSFileProviderExtension</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSFileProviderExtension ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSFileProviderExtension (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.NSFileProviderExtension : Foundation.NSObjectFlag -&gt; UIKit.NSFileProviderExtension" Usage="new UIKit.NSFileProviderExtension t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSFileProviderExtension (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.NSFileProviderExtension : nativeint -&gt; UIKit.NSFileProviderExtension" Usage="new UIKit.NSFileProviderExtension handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSFileProviderExtension.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.NSFileProviderExtension.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectory">
      <MemberSignature Language="C#" Value="public virtual void CreateDirectory (string directoryName, string parentItemIdentifier, Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateDirectory(string directoryName, string parentItemIdentifier, class System.Action`2&lt;class FileProvider.INSFileProviderItem, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.CreateDirectory(System.String,System.String,System.Action{FileProvider.INSFileProviderItem,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member CreateDirectory : string * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit&#xA;override this.CreateDirectory : string * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.CreateDirectory (directoryName, parentItemIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("createDirectoryWithName:inParentItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryName" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="directoryName">The directory name.</param>
        <param name="parentItemIdentifier">The parent directory's persistent identifier.</param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, creates a new directory in the specified location and runs a handler when the operation is complete.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateDirectoryAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt; CreateDirectoryAsync (string directoryName, string parentItemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class FileProvider.INSFileProviderItem&gt; CreateDirectoryAsync(string directoryName, string parentItemIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.CreateDirectoryAsync(System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member CreateDirectoryAsync : string * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;&#xA;override this.CreateDirectoryAsync : string * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;" Usage="nSFileProviderExtension.CreateDirectoryAsync (directoryName, parentItemIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="directoryName" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="directoryName">The directory name.</param>
        <param name="parentItemIdentifier">The parent directory's persistent identifier.</param>
        <summary>When implemented by the developer, creates a new directory in the specified location and runs a handler when the operation is complete.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous CreateDirectory operation.  The value of the TResult parameter is of type System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItem">
      <MemberSignature Language="C#" Value="public virtual void DeleteItem (string itemIdentifier, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteItem(string itemIdentifier, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.DeleteItem(System.String,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member DeleteItem : string * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.DeleteItem : string * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.DeleteItem (itemIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("deleteItemWithIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V8))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, deletes the identified item and runs a handler when the operation is complete.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task DeleteItemAsync (string itemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task DeleteItemAsync(string itemIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.DeleteItemAsync(System.String)" />
      <MemberSignature Language="F#" Value="abstract member DeleteItemAsync : string -&gt; System.Threading.Tasks.Task&#xA;override this.DeleteItemAsync : string -&gt; System.Threading.Tasks.Task" Usage="nSFileProviderExtension.DeleteItemAsync itemIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <summary>When implemented by the developer, deletes the identified item and runs a handler when the operation is complete.</summary>
        <returns>A task that represents the asynchronous DeleteItem operation</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentStorageUrl">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl DocumentStorageUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl DocumentStorageUrl" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSFileProviderExtension.DocumentStorageUrl" />
      <MemberSignature Language="F#" Value="member this.DocumentStorageUrl : Foundation.NSUrl" Usage="UIKit.NSFileProviderExtension.DocumentStorageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'FileProvider::NSFileProviderManager.DocumentStorageUrl' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("documentStorageURL")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'FileProvider::NSFileProviderManager.DocumentStorageUrl' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property. Developers should use 'FileProvider::NSFileProviderManager.DocumentStorageUrl' instead.</summary>
        <value>URL that resides inside the shared container of the document picker.</value>
        <remarks>
          <para>The specified URL needs to be accessible by the File Provider extension. Ordinarily it resides in a container that is shared by the containing app AND the view controller extension.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Domain">
      <MemberSignature Language="C#" Value="public virtual FileProvider.NSFileProviderDomain Domain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class FileProvider.NSFileProviderDomain Domain" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSFileProviderExtension.Domain" />
      <MemberSignature Language="F#" Value="member this.Domain : FileProvider.NSFileProviderDomain" Usage="UIKit.NSFileProviderExtension.Domain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("domain")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>FileProvider.NSFileProviderDomain</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When implemented by the developer, gets the domain that this file provider manages.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FetchThumbnails">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSProgress FetchThumbnails (Foundation.NSString[] itemIdentifiers, CoreGraphics.CGSize size, UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSProgress FetchThumbnails(class Foundation.NSString[] itemIdentifiers, valuetype CoreGraphics.CGSize size, class UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.FetchThumbnails(Foundation.NSString[],CoreGraphics.CGSize,UIKit.NSFileProviderExtensionFetchThumbnailsHandler,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member FetchThumbnails : Foundation.NSString[] * CoreGraphics.CGSize * UIKit.NSFileProviderExtensionFetchThumbnailsHandler * Action&lt;Foundation.NSError&gt; -&gt; Foundation.NSProgress&#xA;override this.FetchThumbnails : Foundation.NSString[] * CoreGraphics.CGSize * UIKit.NSFileProviderExtensionFetchThumbnailsHandler * Action&lt;Foundation.NSError&gt; -&gt; Foundation.NSProgress" Usage="nSFileProviderExtension.FetchThumbnails (itemIdentifiers, size, perThumbnailCompletionHandler, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fetchThumbnailsForItemIdentifiers:requestedSize:perThumbnailCompletionHandler:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSProgress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifiers" Type="Foundation.NSString[]" />
        <Parameter Name="size" Type="CoreGraphics.CGSize" />
        <Parameter Name="perThumbnailCompletionHandler" Type="UIKit.NSFileProviderExtensionFetchThumbnailsHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSFileProviderExtensionFetchThumbnailsHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V8))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifiers">The persistent identifiers for the items.</param>
        <param name="size">The size, in pixels, of the thumbnails.</param>
        <param name="perThumbnailCompletionHandler">A handler to run for each thumbnail.</param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, fetches thumbnails for the specified item identifiers, runs the specified <paramref name="perThumbnailCompletionHandler" /> for each thumbnail, and runs <paramref name="completionHandler" /> when the entire operation is complete</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FetchThumbnailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FetchThumbnailsAsync (Foundation.NSString[] itemIdentifiers, CoreGraphics.CGSize size, UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FetchThumbnailsAsync(class Foundation.NSString[] itemIdentifiers, valuetype CoreGraphics.CGSize size, class UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.FetchThumbnailsAsync(Foundation.NSString[],CoreGraphics.CGSize,UIKit.NSFileProviderExtensionFetchThumbnailsHandler)" />
      <MemberSignature Language="F#" Value="abstract member FetchThumbnailsAsync : Foundation.NSString[] * CoreGraphics.CGSize * UIKit.NSFileProviderExtensionFetchThumbnailsHandler -&gt; System.Threading.Tasks.Task&#xA;override this.FetchThumbnailsAsync : Foundation.NSString[] * CoreGraphics.CGSize * UIKit.NSFileProviderExtensionFetchThumbnailsHandler -&gt; System.Threading.Tasks.Task" Usage="nSFileProviderExtension.FetchThumbnailsAsync (itemIdentifiers, size, perThumbnailCompletionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifiers" Type="Foundation.NSString[]" />
        <Parameter Name="size" Type="CoreGraphics.CGSize" />
        <Parameter Name="perThumbnailCompletionHandler" Type="UIKit.NSFileProviderExtensionFetchThumbnailsHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSFileProviderExtensionFetchThumbnailsHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifiers">The persistent identifiers for the items.</param>
        <param name="size">The size, in pixels, of the thumbnails.</param>
        <param name="perThumbnailCompletionHandler">A handler to run for each thumbnail.</param>
        <summary>When implemented by the developer, fetches thumbnails for the specified item identifiers, runs the specified <paramref name="perThumbnailCompletionHandler" /> for each thumbnail, and runs <paramref name="completionHandler" /> when the entire operation is complete</summary>
        <returns>A task that represents the asynchronous FetchThumbnails operation</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
          <para copied="true">The FetchThumbnailsAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">(More documentation for this node is coming)</para>
          <para tool="threads" copied="true">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FetchThumbnailsAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task FetchThumbnailsAsync (Foundation.NSString[] itemIdentifiers, CoreGraphics.CGSize size, UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler, out Foundation.NSProgress result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task FetchThumbnailsAsync(class Foundation.NSString[] itemIdentifiers, valuetype CoreGraphics.CGSize size, class UIKit.NSFileProviderExtensionFetchThumbnailsHandler perThumbnailCompletionHandler, [out] class Foundation.NSProgress&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.FetchThumbnailsAsync(Foundation.NSString[],CoreGraphics.CGSize,UIKit.NSFileProviderExtensionFetchThumbnailsHandler,Foundation.NSProgress@)" />
      <MemberSignature Language="F#" Value="abstract member FetchThumbnailsAsync : Foundation.NSString[] * CoreGraphics.CGSize * UIKit.NSFileProviderExtensionFetchThumbnailsHandler *  -&gt; System.Threading.Tasks.Task&#xA;override this.FetchThumbnailsAsync : Foundation.NSString[] * CoreGraphics.CGSize * UIKit.NSFileProviderExtensionFetchThumbnailsHandler *  -&gt; System.Threading.Tasks.Task" Usage="nSFileProviderExtension.FetchThumbnailsAsync (itemIdentifiers, size, perThumbnailCompletionHandler, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifiers" Type="Foundation.NSString[]" />
        <Parameter Name="size" Type="CoreGraphics.CGSize" />
        <Parameter Name="perThumbnailCompletionHandler" Type="UIKit.NSFileProviderExtensionFetchThumbnailsHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSFileProviderExtensionFetchThumbnailsHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="result" Type="Foundation.NSProgress" RefType="out" />
      </Parameters>
      <Docs>
        <param name="itemIdentifiers">The persistent identifiers for the items.</param>
        <param name="size">The size, in pixels, of the thumbnails.</param>
        <param name="perThumbnailCompletionHandler">A handler to run for each thumbnail.</param>
        <param name="result">To be added.</param>
        <summary>When implemented by the developer, asynchronously fetches thumbnails for the specified item identifiers, runs the specified <paramref name="perThumbnailCompletionHandler" /> for each thumbnail, and updates the progress result, returning a task that represents the operation.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual FileProvider.INSFileProviderEnumerator GetEnumerator (string containerItemIdentifier, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class FileProvider.INSFileProviderEnumerator GetEnumerator(string containerItemIdentifier, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.GetEnumerator(System.String,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : string *  -&gt; FileProvider.INSFileProviderEnumerator&#xA;override this.GetEnumerator : string *  -&gt; FileProvider.INSFileProviderEnumerator" Usage="nSFileProviderExtension.GetEnumerator (containerItemIdentifier, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumeratorForContainerItemIdentifier:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>FileProvider.INSFileProviderEnumerator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerItemIdentifier" Type="System.String" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="containerItemIdentifier">The persistent identifiers for the container.</param>
        <param name="error">The error that occurred, if one occurred.</param>
        <summary>When implemented by the developer, returns an enumerator for the contents of the container.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItem">
      <MemberSignature Language="C#" Value="public virtual FileProvider.INSFileProviderItem GetItem (Foundation.NSString identifier, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class FileProvider.INSFileProviderItem GetItem(class Foundation.NSString identifier, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.GetItem(Foundation.NSString,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetItem : Foundation.NSString *  -&gt; FileProvider.INSFileProviderItem&#xA;override this.GetItem : Foundation.NSString *  -&gt; FileProvider.INSFileProviderItem" Usage="nSFileProviderExtension.GetItem (identifier, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("itemForIdentifier:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>FileProvider.INSFileProviderItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifier" Type="Foundation.NSString" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="identifier">The persistent identifier for the item to get.</param>
        <param name="error">The error that occurred, if one occurred.</param>
        <summary>When implemented by the developer, returns the item for the identifier.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPersistentIdentifier">
      <MemberSignature Language="C#" Value="public virtual string GetPersistentIdentifier (Foundation.NSUrl itemUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetPersistentIdentifier(class Foundation.NSUrl itemUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.GetPersistentIdentifier(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member GetPersistentIdentifier : Foundation.NSUrl -&gt; string&#xA;override this.GetPersistentIdentifier : Foundation.NSUrl -&gt; string" Usage="nSFileProviderExtension.GetPersistentIdentifier itemUrl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("persistentIdentifierForItemAtURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="itemUrl">The URL for the shared document.</param>
        <summary>When implemented by the developer, returns a specified identifier for a given URL.</summary>
        <returns>String that specifically identifies a document with reference to its URL.</returns>
        <remarks>
          <para>The identifier is defined by relative path of the document from the root URL address that was returned by the DocumentStorageURL method.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlaceholderUrl">
      <MemberSignature Language="C#" Value="public static Foundation.NSUrl GetPlaceholderUrl (Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSUrl GetPlaceholderUrl(class Foundation.NSUrl url) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.GetPlaceholderUrl(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="static member GetPlaceholderUrl : Foundation.NSUrl -&gt; Foundation.NSUrl" Usage="UIKit.NSFileProviderExtension.GetPlaceholderUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("placeholderURLForURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'FileProvider::NSFileProviderManager.GetPlaceholderUrl (NSUrl)' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The URL for the shared document.</param>
        <summary>Returns the placeholder URL.</summary>
        <returns>The placeholder URL.</returns>
        <remarks>
          <para>Do not override this method.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupportedServiceSources">
      <MemberSignature Language="C#" Value="public virtual FileProvider.INSFileProviderServiceSource[] GetSupportedServiceSources (string itemIdentifier, out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class FileProvider.INSFileProviderServiceSource[] GetSupportedServiceSources(string itemIdentifier, [out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.GetSupportedServiceSources(System.String,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member GetSupportedServiceSources : string *  -&gt; FileProvider.INSFileProviderServiceSource[]&#xA;override this.GetSupportedServiceSources : string *  -&gt; FileProvider.INSFileProviderServiceSource[]" Usage="nSFileProviderExtension.GetSupportedServiceSources (itemIdentifier, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("supportedServiceSourcesForItemIdentifier:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>FileProvider.INSFileProviderServiceSource[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="error">The error that occurred, if one occurred.</param>
        <summary>When implemented by the developer, returns an array that contains the service sources that the app can use to perform actions on the identified item.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUrlForItem">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl GetUrlForItem (string persistentIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSUrl GetUrlForItem(string persistentIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.GetUrlForItem(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetUrlForItem : string -&gt; Foundation.NSUrl&#xA;override this.GetUrlForItem : string -&gt; Foundation.NSUrl" Usage="nSFileProviderExtension.GetUrlForItem persistentIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("URLForItemWithPersistentIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="persistentIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="persistentIdentifier">Persistent identifier for a document that is shared .</param>
        <summary>When implemented by the developer, returns the URL for a specified persistent identifier.</summary>
        <returns>The shared document's URL.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDocument">
      <MemberSignature Language="C#" Value="public virtual void ImportDocument (Foundation.NSUrl fileUrl, string parentItemIdentifier, Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportDocument(class Foundation.NSUrl fileUrl, string parentItemIdentifier, class System.Action`2&lt;class FileProvider.INSFileProviderItem, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.ImportDocument(Foundation.NSUrl,System.String,System.Action{FileProvider.INSFileProviderItem,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member ImportDocument : Foundation.NSUrl * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit&#xA;override this.ImportDocument : Foundation.NSUrl * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.ImportDocument (fileUrl, parentItemIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("importDocumentAtURL:toParentItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileUrl" Type="Foundation.NSUrl" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="fileUrl">The URL for the file.</param>
        <param name="parentItemIdentifier">The parent directory's persistent identifier.</param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, imports the resource at the specified <paramref name="fileURL" /> into the directory that is identified by <paramref name="parentItemIdentifier" />.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt; ImportDocumentAsync (Foundation.NSUrl fileUrl, string parentItemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class FileProvider.INSFileProviderItem&gt; ImportDocumentAsync(class Foundation.NSUrl fileUrl, string parentItemIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.ImportDocumentAsync(Foundation.NSUrl,System.String)" />
      <MemberSignature Language="F#" Value="abstract member ImportDocumentAsync : Foundation.NSUrl * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;&#xA;override this.ImportDocumentAsync : Foundation.NSUrl * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;" Usage="nSFileProviderExtension.ImportDocumentAsync (fileUrl, parentItemIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fileUrl" Type="Foundation.NSUrl" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileUrl">The URL for the file.</param>
        <param name="parentItemIdentifier">The parent directory's persistent identifier.</param>
        <summary>When implemented by the developer, imports the resource at the specified <paramref name="fileURL" /> into the directory that is identified by <paramref name="parentItemIdentifier" />.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous ImportDocument operation.  The value of the TResult parameter is of type System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemChangedAtUrl">
      <MemberSignature Language="C#" Value="public virtual void ItemChangedAtUrl (Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ItemChangedAtUrl(class Foundation.NSUrl url) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.ItemChangedAtUrl(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member ItemChangedAtUrl : Foundation.NSUrl -&gt; unit&#xA;override this.ItemChangedAtUrl : Foundation.NSUrl -&gt; unit" Usage="nSFileProviderExtension.ItemChangedAtUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("itemChangedAtURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <summary>When implemented by the developer, informs a file provider extension that there has been a change in a document.</summary>
        <remarks>
          <para>You must override this method.Do not call super.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvidePlaceholderAtUrl">
      <MemberSignature Language="C#" Value="public virtual void ProvidePlaceholderAtUrl (Foundation.NSUrl url, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProvidePlaceholderAtUrl(class Foundation.NSUrl url, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.ProvidePlaceholderAtUrl(Foundation.NSUrl,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member ProvidePlaceholderAtUrl : Foundation.NSUrl * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.ProvidePlaceholderAtUrl : Foundation.NSUrl * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.ProvidePlaceholderAtUrl (url, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("providePlaceholderAtURL:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <param name="completionHandler">
          <para>An action the system calls subseqent to the creation of a placeholder.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>When implemented by the developer, creates a specified placeholder for a previously defined URL.</summary>
        <remarks>
          <para>The developer must override this method. This method is called to provide a placeholder for documents that are returned by the Document Picker but that are not locally stored.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProvidePlaceholderAtUrlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ProvidePlaceholderAtUrlAsync (Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ProvidePlaceholderAtUrlAsync(class Foundation.NSUrl url) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.ProvidePlaceholderAtUrlAsync(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member ProvidePlaceholderAtUrlAsync : Foundation.NSUrl -&gt; System.Threading.Tasks.Task&#xA;override this.ProvidePlaceholderAtUrlAsync : Foundation.NSUrl -&gt; System.Threading.Tasks.Task" Usage="nSFileProviderExtension.ProvidePlaceholderAtUrlAsync url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <summary>When implemented by the developer, creates a specified placeholder for a previously defined URL.</summary>
        <returns>A task that represents the asynchronous ProvidePlaceholderAtUrl operation</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderIdentifier">
      <MemberSignature Language="C#" Value="public virtual string ProviderIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderIdentifier" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSFileProviderExtension.ProviderIdentifier" />
      <MemberSignature Language="F#" Value="member this.ProviderIdentifier : string" Usage="UIKit.NSFileProviderExtension.ProviderIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'FileProvider::NSFileProviderManager.ProviderIdentifier' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("providerIdentifier")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'FileProvider::NSFileProviderManager.ProviderIdentifier' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>When implemented by the developer, provides an identifier for reads and writes that are coordinated. </summary>
        <value>A string uniquely identifying the purpose identifier. By default, the bundle identifier for the containing app.</value>
        <remarks>
          <para>You can override this method to provide a different identifier for the provider.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameItem">
      <MemberSignature Language="C#" Value="public virtual void RenameItem (string itemIdentifier, string itemName, Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RenameItem(string itemIdentifier, string itemName, class System.Action`2&lt;class FileProvider.INSFileProviderItem, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.RenameItem(System.String,System.String,System.Action{FileProvider.INSFileProviderItem,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member RenameItem : string * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit&#xA;override this.RenameItem : string * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.RenameItem (itemIdentifier, itemName, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("renameItemWithIdentifier:toName:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="itemName" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="itemName">The new name for the item.</param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, changes the name of the identified item.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenameItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt; RenameItemAsync (string itemIdentifier, string itemName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class FileProvider.INSFileProviderItem&gt; RenameItemAsync(string itemIdentifier, string itemName) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.RenameItemAsync(System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member RenameItemAsync : string * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;&#xA;override this.RenameItemAsync : string * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;" Usage="nSFileProviderExtension.RenameItemAsync (itemIdentifier, itemName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="itemName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="itemName">The new name for the item.</param>
        <summary>When implemented by the developer, changes the name of the identified item.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous RenameItem operation.  The value of the TResult parameter is of type System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReparentItem">
      <MemberSignature Language="C#" Value="public virtual void ReparentItem (string itemIdentifier, string parentItemIdentifier, string newName, Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReparentItem(string itemIdentifier, string parentItemIdentifier, string newName, class System.Action`2&lt;class FileProvider.INSFileProviderItem, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.ReparentItem(System.String,System.String,System.String,System.Action{FileProvider.INSFileProviderItem,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member ReparentItem : string * string * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit&#xA;override this.ReparentItem : string * string * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.ReparentItem (itemIdentifier, parentItemIdentifier, newName, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("reparentItemWithIdentifier:toParentItemWithIdentifier:newName:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V86))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="parentItemIdentifier">The parent directory's persistent identifier.</param>
        <param name="newName">
          <para>The new name for the item.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, moves the identified item to a new name under a new parent.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReparentItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt; ReparentItemAsync (string itemIdentifier, string parentItemIdentifier, string newName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class FileProvider.INSFileProviderItem&gt; ReparentItemAsync(string itemIdentifier, string parentItemIdentifier, string newName) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.ReparentItemAsync(System.String,System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member ReparentItemAsync : string * string * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;&#xA;override this.ReparentItemAsync : string * string * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;" Usage="nSFileProviderExtension.ReparentItemAsync (itemIdentifier, parentItemIdentifier, newName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
        <Parameter Name="newName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="parentItemIdentifier">The parent directory's persistent identifier.</param>
        <param name="newName">The new name for the item.</param>
        <summary>When implemented by the developer, moves the identified item to a new name under a new parent.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous ReparentItem operation.  The value of the TResult parameter is of type System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFavoriteRank">
      <MemberSignature Language="C#" Value="public virtual void SetFavoriteRank (Foundation.NSNumber favoriteRank, string itemIdentifier, Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetFavoriteRank(class Foundation.NSNumber favoriteRank, string itemIdentifier, class System.Action`2&lt;class FileProvider.INSFileProviderItem, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.SetFavoriteRank(Foundation.NSNumber,System.String,System.Action{FileProvider.INSFileProviderItem,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member SetFavoriteRank : Foundation.NSNumber * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit&#xA;override this.SetFavoriteRank : Foundation.NSNumber * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.SetFavoriteRank (favoriteRank, itemIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setFavoriteRank:forItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="favoriteRank" Type="Foundation.NSNumber" />
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="favoriteRank">
          <para>The new favorite rank for the item.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, sets the favorite rank of the identified directory.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetFavoriteRankAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt; SetFavoriteRankAsync (Foundation.NSNumber favoriteRank, string itemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class FileProvider.INSFileProviderItem&gt; SetFavoriteRankAsync(class Foundation.NSNumber favoriteRank, string itemIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.SetFavoriteRankAsync(Foundation.NSNumber,System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetFavoriteRankAsync : Foundation.NSNumber * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;&#xA;override this.SetFavoriteRankAsync : Foundation.NSNumber * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;" Usage="nSFileProviderExtension.SetFavoriteRankAsync (favoriteRank, itemIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="favoriteRank" Type="Foundation.NSNumber" />
        <Parameter Name="itemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="favoriteRank">The new favorite rank for the item.</param>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <summary>When implemented by the developer, sets the favorite rank of the identified directory.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous SetFavoriteRank operation.  The value of the TResult parameter is of type System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLastUsedDate">
      <MemberSignature Language="C#" Value="public virtual void SetLastUsedDate (Foundation.NSDate lastUsedDate, string itemIdentifier, Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLastUsedDate(class Foundation.NSDate lastUsedDate, string itemIdentifier, class System.Action`2&lt;class FileProvider.INSFileProviderItem, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.SetLastUsedDate(Foundation.NSDate,System.String,System.Action{FileProvider.INSFileProviderItem,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member SetLastUsedDate : Foundation.NSDate * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit&#xA;override this.SetLastUsedDate : Foundation.NSDate * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.SetLastUsedDate (lastUsedDate, itemIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setLastUsedDate:forItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lastUsedDate" Type="Foundation.NSDate" />
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="lastUsedDate">
          <para>The new last used date value for the item.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, sets the last used date for the identified item.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLastUsedDateAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt; SetLastUsedDateAsync (Foundation.NSDate lastUsedDate, string itemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class FileProvider.INSFileProviderItem&gt; SetLastUsedDateAsync(class Foundation.NSDate lastUsedDate, string itemIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.SetLastUsedDateAsync(Foundation.NSDate,System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetLastUsedDateAsync : Foundation.NSDate * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;&#xA;override this.SetLastUsedDateAsync : Foundation.NSDate * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;" Usage="nSFileProviderExtension.SetLastUsedDateAsync (lastUsedDate, itemIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lastUsedDate" Type="Foundation.NSDate" />
        <Parameter Name="itemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="lastUsedDate">The new last used date value for the item.</param>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <summary>When implemented by the developer, sets the last used date for the identified item.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous SetLastUsedDate operation.  The value of the TResult parameter is of type System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTagData">
      <MemberSignature Language="C#" Value="public virtual void SetTagData (Foundation.NSData tagData, string itemIdentifier, Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTagData(class Foundation.NSData tagData, string itemIdentifier, class System.Action`2&lt;class FileProvider.INSFileProviderItem, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.SetTagData(Foundation.NSData,System.String,System.Action{FileProvider.INSFileProviderItem,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member SetTagData : Foundation.NSData * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit&#xA;override this.SetTagData : Foundation.NSData * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.SetTagData (tagData, itemIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTagData:forItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagData" Type="Foundation.NSData" />
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="tagData">
          <para>The new tag data for the item.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, sets the tag data on an item.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTagDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt; SetTagDataAsync (Foundation.NSData tagData, string itemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class FileProvider.INSFileProviderItem&gt; SetTagDataAsync(class Foundation.NSData tagData, string itemIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.SetTagDataAsync(Foundation.NSData,System.String)" />
      <MemberSignature Language="F#" Value="abstract member SetTagDataAsync : Foundation.NSData * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;&#xA;override this.SetTagDataAsync : Foundation.NSData * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;" Usage="nSFileProviderExtension.SetTagDataAsync (tagData, itemIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tagData" Type="Foundation.NSData" />
        <Parameter Name="itemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="tagData">The new tag data for the item.</param>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <summary>When implemented by the developer, sets the tag data on an item.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous SetTagData operation.  The value of the TResult parameter is of type System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartProvidingItemAtUrl">
      <MemberSignature Language="C#" Value="public virtual void StartProvidingItemAtUrl (Foundation.NSUrl url, Action&lt;Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartProvidingItemAtUrl(class Foundation.NSUrl url, class System.Action`1&lt;class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.StartProvidingItemAtUrl(Foundation.NSUrl,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member StartProvidingItemAtUrl : Foundation.NSUrl * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.StartProvidingItemAtUrl : Foundation.NSUrl * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.StartProvidingItemAtUrl (url, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startProvidingItemAtURL:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V0))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <param name="completionHandler">
          <para>An action the system calls when the refernced file becomes available.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>When implemented by the developer, supplies an actual file on a disk in place of a placeholder.</summary>
        <remarks>
          <para>You have to override this method. Do not call super in an implementation.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StartProvidingItemAtUrlAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task StartProvidingItemAtUrlAsync (Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task StartProvidingItemAtUrlAsync(class Foundation.NSUrl url) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.StartProvidingItemAtUrlAsync(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member StartProvidingItemAtUrlAsync : Foundation.NSUrl -&gt; System.Threading.Tasks.Task&#xA;override this.StartProvidingItemAtUrlAsync : Foundation.NSUrl -&gt; System.Threading.Tasks.Task" Usage="nSFileProviderExtension.StartProvidingItemAtUrlAsync url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <summary>When implemented by the developer, supplies an actual file on a disk in place of a placeholder.</summary>
        <returns>A task that represents the asynchronous StartProvidingItemAtUrl operation</returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="StopProvidingItemAtUrl">
      <MemberSignature Language="C#" Value="public virtual void StopProvidingItemAtUrl (Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopProvidingItemAtUrl(class Foundation.NSUrl url) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.StopProvidingItemAtUrl(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member StopProvidingItemAtUrl : Foundation.NSUrl -&gt; unit&#xA;override this.StopProvidingItemAtUrl : Foundation.NSUrl -&gt; unit" Usage="nSFileProviderExtension.StopProvidingItemAtUrl url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stopProvidingItemAtURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">The shared document's URL.</param>
        <summary>When implemented by the developer, informs a file provider extension when a specified document is no longer being accessed</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrashItem">
      <MemberSignature Language="C#" Value="public virtual void TrashItem (string itemIdentifier, Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TrashItem(string itemIdentifier, class System.Action`2&lt;class FileProvider.INSFileProviderItem, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.TrashItem(System.String,System.Action{FileProvider.INSFileProviderItem,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member TrashItem : string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit&#xA;override this.TrashItem : string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.TrashItem (itemIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("trashItemWithIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, moves the identified item into the trash.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrashItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt; TrashItemAsync (string itemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class FileProvider.INSFileProviderItem&gt; TrashItemAsync(string itemIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.TrashItemAsync(System.String)" />
      <MemberSignature Language="F#" Value="abstract member TrashItemAsync : string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;&#xA;override this.TrashItemAsync : string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;" Usage="nSFileProviderExtension.TrashItemAsync itemIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <summary>When implemented by the developer, moves the identified item into the trash.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous TrashItem operation.  The value of the TResult parameter is of type System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UntrashItem">
      <MemberSignature Language="C#" Value="public virtual void UntrashItem (string itemIdentifier, string parentItemIdentifier, Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UntrashItem(string itemIdentifier, string parentItemIdentifier, class System.Action`2&lt;class FileProvider.INSFileProviderItem, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.UntrashItem(System.String,System.String,System.Action{FileProvider.INSFileProviderItem,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member UntrashItem : string * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit&#xA;override this.UntrashItem : string * string * Action&lt;FileProvider.INSFileProviderItem, Foundation.NSError&gt; -&gt; unit" Usage="nSFileProviderExtension.UntrashItem (itemIdentifier, parentItemIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("untrashItemWithIdentifier:toParentItemIdentifier:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V85))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="parentItemIdentifier">
          <para>The parent directory's persistent identifier.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="completionHandler">A handler to run after the operation completes.</param>
        <summary>When implemented by the developer, restores the identified item from the trash.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UntrashItemAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt; UntrashItemAsync (string itemIdentifier, string parentItemIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class FileProvider.INSFileProviderItem&gt; UntrashItemAsync(string itemIdentifier, string parentItemIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.UntrashItemAsync(System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member UntrashItemAsync : string * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;&#xA;override this.UntrashItemAsync : string * string -&gt; System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;" Usage="nSFileProviderExtension.UntrashItemAsync (itemIdentifier, parentItemIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;FileProvider.INSFileProviderItem&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIdentifier" Type="System.String" />
        <Parameter Name="parentItemIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="itemIdentifier">The persistent identifier for the item.</param>
        <param name="parentItemIdentifier">The parent directory's persistent identifier.</param>
        <summary>When implemented by the developer, restores the identified item from the trash.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous UntrashItem operation.  The value of the TResult parameter is of type System.Action&lt;FileProvider.INSFileProviderItem,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WritePlaceholder">
      <MemberSignature Language="C#" Value="public static bool WritePlaceholder (Foundation.NSUrl placeholderUrl, Foundation.NSDictionary metadata, ref Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool WritePlaceholder(class Foundation.NSUrl placeholderUrl, class Foundation.NSDictionary metadata, class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSFileProviderExtension.WritePlaceholder(Foundation.NSUrl,Foundation.NSDictionary,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member WritePlaceholder : Foundation.NSUrl * Foundation.NSDictionary *  -&gt; bool" Usage="UIKit.NSFileProviderExtension.WritePlaceholder (placeholderUrl, metadata, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("writePlaceholderAtURL:withMetadata:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'NSFileProviderManager' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="placeholderUrl" Type="Foundation.NSUrl" />
        <Parameter Name="metadata" Type="Foundation.NSDictionary" />
        <Parameter Name="error" Type="Foundation.NSError" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="placeholderUrl">Pleaceholder URL related to the specified document.</param>
        <param name="metadata">The document's metadata.</param>
        <param name="error">If an error were to occur during the execution, the parameter is set to an error object describing the issue. If no error is to occur, you may pass in Null.</param>
        <summary>Writes a placeholder using provided metadata.</summary>
        <returns>Yes if written successfully, otherwise no.</returns>
        <remarks>
          <para>Use whenever you need a placeholder for a document. You must not override this method.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
