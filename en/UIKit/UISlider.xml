<Type Name="UISlider" FullName="UIKit.UISlider">
  <TypeSignature Language="C#" Value="public class UISlider : UIKit.UIControl" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UISlider extends UIKit.UIControl" />
  <TypeSignature Language="DocId" Value="T:UIKit.UISlider" />
  <TypeSignature Language="F#" Value="type UISlider = class&#xA;    inherit UIControl" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIControl</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UISlider", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:UIKit.UIControl" /> that displays a slider.</summary>
    <remarks>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=23a2571b-45eb-4889-bb67-d88937cb68c1">monocatalog</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISlider_Class/index.html">Apple documentation for <c>UISlider</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISlider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISlider (CoreGraphics.CGRect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.#ctor(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="new UIKit.UISlider : CoreGraphics.CGRect -&gt; UIKit.UISlider" Usage="new UIKit.UISlider frame" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UISlider with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of UISlider with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISlider (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UISlider : Foundation.NSCoder -&gt; UIKit.UISlider" Usage="new UIKit.UISlider coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UISlider (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UISlider : Foundation.NSObjectFlag -&gt; UIKit.UISlider" Usage="new UIKit.UISlider t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UISlider (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UISlider : nativeint -&gt; UIKit.UISlider" Usage="new UIKit.UISlider handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static UIKit.UISlider.UISliderAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UISlider/UISliderAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : UIKit.UISlider.UISliderAppearance" Usage="UIKit.UISlider.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISlider+UISliderAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UISlider.</para>
          <para>If developers want to control the appearance of subclasses of UISlider, they should use the <see cref="M:UIKit.UISlider.GetAppearance" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static UIKit.UISlider.UISliderAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISlider/UISliderAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; UIKit.UISlider.UISliderAppearance" Usage="UIKit.UISlider.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISlider+UISliderAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UISlider when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of UISlider, they should use the <see cref="M:UIKit.UISlider.GetAppearance" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UISlider.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Continuous">
      <MemberSignature Language="C#" Value="public virtual bool Continuous { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Continuous" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.Continuous" />
      <MemberSignature Language="F#" Value="member this.Continuous : bool with get, set" Usage="UIKit.UISlider.Continuous" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isContinuous")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setContinuous:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If set to <see langword="true" /> then update events are continuously sent as the slider is updated. If set to <see langword="false" />, then an update event is only sent when the slider is finally updated</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentMaxTrackImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage CurrentMaxTrackImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage CurrentMaxTrackImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.CurrentMaxTrackImage" />
      <MemberSignature Language="F#" Value="member this.CurrentMaxTrackImage : UIKit.UIImage" Usage="UIKit.UISlider.CurrentMaxTrackImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentMaximumTrackImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the maximum track <see cref="T:UIKit.UIImage" /> that is being displayed for the value of the control.</summary>
        <value>
        </value>
        <remarks>If there are no custom track images, then this property will return <see langword="null" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentMinTrackImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage CurrentMinTrackImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage CurrentMinTrackImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.CurrentMinTrackImage" />
      <MemberSignature Language="F#" Value="member this.CurrentMinTrackImage : UIKit.UIImage" Usage="UIKit.UISlider.CurrentMinTrackImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentMinimumTrackImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the minimum track <see cref="T:UIKit.UIImage" /> that is being displayed for the value of the control.</summary>
        <value>
        </value>
        <remarks>If there are no custom track images, then this property will return <see langword="null" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentThumbImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage CurrentThumbImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage CurrentThumbImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.CurrentThumbImage" />
      <MemberSignature Language="F#" Value="member this.CurrentThumbImage : UIKit.UIImage" Usage="UIKit.UISlider.CurrentThumbImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentThumbImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property returns the <see cref="T:UIKit.UIImage" /> that is being used as the thumb image for the control.</summary>
        <value>
        </value>
        <remarks>If there are no custom thumb images set for the control, then this property will return <see langword="null" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UISlider.UISliderAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISlider/UISliderAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UISlider.UISliderAppearance" Usage="UIKit.UISlider.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISlider+UISliderAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UISlider.UISliderAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISlider/UISliderAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UISlider.UISliderAppearance" Usage="UIKit.UISlider.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISlider+UISliderAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" /> when found in the <paramref name="containers" /> containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UISlider.UISliderAppearance GetAppearance&lt;T&gt; () where T : UIKit.UISlider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISlider/UISliderAppearance GetAppearance&lt;(class UIKit.UISlider) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; UIKit.UISlider.UISliderAppearance (requires 'T :&gt; UIKit.UISlider)" Usage="UIKit.UISlider.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISlider+UISliderAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UISlider.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UISlider.UISliderAppearance" /> for the subclass of UISlider.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UISlider.Appearance" /> property, or the <see cref="M:UIKit.UISliderAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UISlider.GetAppearance<MyUISliderSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UISlider.UISliderAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : UIKit.UISlider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISlider/UISliderAppearance GetAppearance&lt;(class UIKit.UISlider) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UISlider.UISliderAppearance (requires 'T :&gt; UIKit.UISlider)" Usage="UIKit.UISlider.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISlider+UISliderAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UISlider</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UISlider.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UISlider.UISliderAppearance" /> for the subclass of UISlider.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UISlider.</para>
          <para>Unlike the <see cref="P:UIKit.UISlider.Appearance" /> property, or the <see cref="M:UIKit.UISliderAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UISlider.GetAppearance<MyUISliderSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UISlider.UISliderAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : UIKit.UISlider;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISlider/UISliderAppearance GetAppearance&lt;(class UIKit.UISlider) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UISlider.UISliderAppearance (requires 'T :&gt; UIKit.UISlider)" Usage="UIKit.UISlider.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISlider+UISliderAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UISlider</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UISlider.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UISlider.UISliderAppearance" /> for the subclass of UISlider that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UISlider that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UISlider.Appearance" /> property, or the <see cref="M:UIKit.UISliderAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UISlider.GetAppearance<MyUISliderSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumTrackTintColor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor MaximumTrackTintColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor MaximumTrackTintColor" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.MaximumTrackTintColor" />
      <MemberSignature Language="F#" Value="member this.MaximumTrackTintColor : UIKit.UIColor with get, set" Usage="UIKit.UISlider.MaximumTrackTintColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("maximumTrackTintColor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setMaximumTrackTintColor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("maximumTrackTintColor", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMaximumTrackTintColor:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is the tint color that is used for the maximum track images.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>The tint #2 color.</para>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxTrackImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage MaxTrackImage (UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage MaxTrackImage(valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.MaxTrackImage(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member MaxTrackImage : UIKit.UIControlState -&gt; UIKit.UIImage&#xA;override this.MaxTrackImage : UIKit.UIControlState -&gt; UIKit.UIImage" Usage="uISlider.MaxTrackImage forState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("maximumTrackImageForState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="forState">The control state for the maximum track image.</param>
        <summary>Returns the maximum track <see cref="T:UIKit.UIImage" /> that is used for the provided control state.</summary>
        <returns>
        </returns>
        <remarks>
          <para>Will return <see langword="null" /> if there are no track images for the control state.</para>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValue">
      <MemberSignature Language="C#" Value="public virtual float MaxValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MaxValue" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.MaxValue" />
      <MemberSignature Language="F#" Value="member this.MaxValue : single with get, set" Usage="UIKit.UISlider.MaxValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("maximumValue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMaximumValue:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property holds the maximum value of the the control.</summary>
        <value>
        </value>
        <remarks>If this property is changed to a value that is less than the current value of the control, then value of the control will be changed to be equal to the new maximum value.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValueImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage MaxValueImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage MaxValueImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.MaxValueImage" />
      <MemberSignature Language="F#" Value="member this.MaxValueImage : UIKit.UIImage with get, set" Usage="UIKit.UISlider.MaxValueImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("maximumValueImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setMaximumValueImage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("maximumValueImage", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMaximumValueImage:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is the image that will be renderd by the slider on the maximum value size of the control.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>This image should fit in the rectangle specified by <see cref="M:UIKit.UISlider.MaxValueImageRectForBounds" />.</para>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxValueImageRectForBounds">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect MaxValueImageRectForBounds (CoreGraphics.CGRect forBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect MaxValueImageRectForBounds(valuetype CoreGraphics.CGRect forBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.MaxValueImageRectForBounds(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member MaxValueImageRectForBounds : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect&#xA;override this.MaxValueImageRectForBounds : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect" Usage="uISlider.MaxValueImageRectForBounds forBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("maximumValueImageRectForBounds:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBounds" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="forBounds">The bounding rectangle of the <see cref="T:UIKit.UISlider" />.</param>
        <summary>Returns the rectangle that the <see cref="P:UIKit.UISlider.MaxValueImage" /> will occupy.</summary>
        <returns>
        </returns>
        <remarks>Do not call this method directly. It exists so that customizations can be performed by subclassing <see cref="T:UIKit.UISlider" /> and overriding this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumTrackTintColor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor MinimumTrackTintColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor MinimumTrackTintColor" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.MinimumTrackTintColor" />
      <MemberSignature Language="F#" Value="member this.MinimumTrackTintColor : UIKit.UIColor with get, set" Usage="UIKit.UISlider.MinimumTrackTintColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("minimumTrackTintColor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setMinimumTrackTintColor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("minimumTrackTintColor", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMinimumTrackTintColor:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The tint color user for the minimum track images.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinTrackImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage MinTrackImage (UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage MinTrackImage(valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.MinTrackImage(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member MinTrackImage : UIKit.UIControlState -&gt; UIKit.UIImage&#xA;override this.MinTrackImage : UIKit.UIControlState -&gt; UIKit.UIImage" Usage="uISlider.MinTrackImage forState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("minimumTrackImageForState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="forState">The control state for the minumum track image.</param>
        <summary>Returns the minimum track <see cref="T:UIKit.UIImage" /> that is used for the provided control state.</summary>
        <returns>
        </returns>
        <remarks>
          <para>Will return <see langword="null" /> if there are no track images for the control state.</para>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValue">
      <MemberSignature Language="C#" Value="public virtual float MinValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 MinValue" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.MinValue" />
      <MemberSignature Language="F#" Value="member this.MinValue : single with get, set" Usage="UIKit.UISlider.MinValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("minimumValue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMinimumValue:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property holds the minimum value of the control.</summary>
        <value>To be added.</value>
        <remarks>If this property is changed to a value that is greater than the current value of the control, then value of the control will be changed to be equal to the new minimum value.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValueImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage MinValueImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage MinValueImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.MinValueImage" />
      <MemberSignature Language="F#" Value="member this.MinValueImage : UIKit.UIImage with get, set" Usage="UIKit.UISlider.MinValueImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("minimumValueImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setMinimumValueImage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("minimumValueImage", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMinimumValueImage:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is the image that will be renderd by the slider on the minimum value size of the control.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>This image should fit in the rectangle specified by <see cref="M:UIKit.UISlider.MinValueImageRectForBounds" />.</para>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinValueImageRectForBounds">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect MinValueImageRectForBounds (CoreGraphics.CGRect forBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect MinValueImageRectForBounds(valuetype CoreGraphics.CGRect forBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.MinValueImageRectForBounds(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member MinValueImageRectForBounds : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect&#xA;override this.MinValueImageRectForBounds : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect" Usage="uISlider.MinValueImageRectForBounds forBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("minimumValueImageRectForBounds:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBounds" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="forBounds">The bounding rectangle of the <see cref="T:UIKit.UISlider" />.</param>
        <summary>Returns the rectangle that the <see cref="P:UIKit.UISlider.MinValueImage" /> will occupy.</summary>
        <returns>
        </returns>
        <remarks>Do not call this method directly. It exists so that customizations can be performed by subclassing <see cref="T:UIKit.UISlider" /> and overriding this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMaxTrackImage">
      <MemberSignature Language="C#" Value="public virtual void SetMaxTrackImage (UIKit.UIImage image, UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMaxTrackImage(class UIKit.UIImage image, valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.SetMaxTrackImage(UIKit.UIImage,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetMaxTrackImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit&#xA;override this.SetMaxTrackImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit" Usage="uISlider.SetMaxTrackImage (image, forState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setMaximumTrackImage:forState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="image">
          <para>The image to use for the maximum track for the specified state.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="forState">The control state for the <paramref name="image" />.</param>
        <summary>Will specify the a maximum track image for a given control state.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMinTrackImage">
      <MemberSignature Language="C#" Value="public virtual void SetMinTrackImage (UIKit.UIImage image, UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMinTrackImage(class UIKit.UIImage image, valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.SetMinTrackImage(UIKit.UIImage,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetMinTrackImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit&#xA;override this.SetMinTrackImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit" Usage="uISlider.SetMinTrackImage (image, forState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setMinimumTrackImage:forState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="image">
          <para>The image to use for the minimum track for the specified state.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="forState">The control state for the <paramref name="image" />.</param>
        <summary>Sets <param name="image" /> as the minimum track image for the state.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetThumbImage">
      <MemberSignature Language="C#" Value="public virtual void SetThumbImage (UIKit.UIImage image, UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetThumbImage(class UIKit.UIImage image, valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.SetThumbImage(UIKit.UIImage,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetThumbImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit&#xA;override this.SetThumbImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit" Usage="uISlider.SetThumbImage (image, forState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setThumbImage:forState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="image">
          <para>The thumb image to use for the specified state.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="forState">The control state for the <paramref name="image" />.</param>
        <summary>Specifies the image to be used for the thumb in the specified UIControlState.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (float value, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(float32 value, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.SetValue(System.Single,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetValue : single * bool -&gt; unit&#xA;override this.SetValue : single * bool -&gt; unit" Usage="uISlider.SetValue (value, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setValue:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Single" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value">A new value for the control.</param>
        <param name="animated">If <see langword="true" /> then change will be animated in the control.</param>
        <summary>Assign a new value to the control - optionally animating the change.</summary>
        <remarks>If <paramref name="value" /> is less than the value of <see cref="P:UIKit.UISlider.MinValue" /> or greater than the value of <see cref="P:UIKit.UISlider.MaxValue" />, the value of the control will be set to the mininum value or maximum value respectively.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThumbImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage ThumbImage (UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage ThumbImage(valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.ThumbImage(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member ThumbImage : UIKit.UIControlState -&gt; UIKit.UIImage&#xA;override this.ThumbImage : UIKit.UIControlState -&gt; UIKit.UIImage" Usage="uISlider.ThumbImage forState" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("thumbImageForState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="forState">The control state of the thumb image to retrieve.</param>
        <summary>This method will return the thumb image for the specified state.</summary>
        <returns>
        </returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ThumbRectForBounds">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ThumbRectForBounds (CoreGraphics.CGRect bounds, CoreGraphics.CGRect trackRect, float value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect ThumbRectForBounds(valuetype CoreGraphics.CGRect bounds, valuetype CoreGraphics.CGRect trackRect, float32 value) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.ThumbRectForBounds(CoreGraphics.CGRect,CoreGraphics.CGRect,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member ThumbRectForBounds : CoreGraphics.CGRect * CoreGraphics.CGRect * single -&gt; CoreGraphics.CGRect&#xA;override this.ThumbRectForBounds : CoreGraphics.CGRect * CoreGraphics.CGRect * single -&gt; CoreGraphics.CGRect" Usage="uISlider.ThumbRectForBounds (bounds, trackRect, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("thumbRectForBounds:trackRect:value:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="CoreGraphics.CGRect" />
        <Parameter Name="trackRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="value" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="bounds">To be added.</param>
        <param name="trackRect">To be added.</param>
        <param name="value">To be added.</param>
        <summary>Gets the drawing <see cref="T:CoreGraphics.CGRect" /> for the thumb image.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThumbTintColor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor ThumbTintColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor ThumbTintColor" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.ThumbTintColor" />
      <MemberSignature Language="F#" Value="member this.ThumbTintColor : UIKit.UIColor with get, set" Usage="UIKit.UISlider.ThumbTintColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("thumbTintColor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setThumbTintColor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("thumbTintColor", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setThumbTintColor:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is the color that will be used to tint the thumb images.</summary>
        <value>
          <para>
          </para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISlider.Appearance" /> property and the <see cref="M:UIKit.UISlider.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TrackRectForBounds">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect TrackRectForBounds (CoreGraphics.CGRect forBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect TrackRectForBounds(valuetype CoreGraphics.CGRect forBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISlider.TrackRectForBounds(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member TrackRectForBounds : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect&#xA;override this.TrackRectForBounds : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect" Usage="uISlider.TrackRectForBounds forBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("trackRectForBounds:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBounds" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="forBounds">The bounding rectangle of the control.</param>
        <summary>Returns the rectangle that will be used for the drawing the slider's track.</summary>
        <returns>
        </returns>
        <remarks>Do not call this method directly. It exists so that customizations can be performed by subclassing <see cref="T:UIKit.UISlider" /> and overriding this method.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public virtual float Value { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Value" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISlider.Value" />
      <MemberSignature Language="F#" Value="member this.Value : single with get, set" Usage="UIKit.UISlider.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("value")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setValue:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The value of the current control.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
