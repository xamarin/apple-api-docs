<Type Name="UITextChecker" FullName="UIKit.UITextChecker">
  <TypeSignature Language="C#" Value="public class UITextChecker : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UITextChecker extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:UIKit.UITextChecker" />
  <TypeSignature Language="F#" Value="type UITextChecker = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UITextChecker", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Speller and word-completion class.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITextChecker_Class/index.html">Apple documentation for <c>UITextChecker</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextChecker ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextChecker.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITextChecker (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextChecker.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UITextChecker : Foundation.NSObjectFlag -&gt; UIKit.UITextChecker" Usage="new UIKit.UITextChecker t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UITextChecker (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextChecker.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UITextChecker : nativeint -&gt; UIKit.UITextChecker" Usage="new UIKit.UITextChecker handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AvailableLangauges">
      <MemberSignature Language="C#" Value="public static string AvailableLangauges { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string AvailableLangauges" />
      <MemberSignature Language="DocId" Value="P:UIKit.UITextChecker.AvailableLangauges" />
      <MemberSignature Language="F#" Value="member this.AvailableLangauges : string" Usage="UIKit.UITextChecker.AvailableLangauges" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("availableLanguages")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The languages supported by the spell checker.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UITextChecker.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UITextChecker.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletionsForPartialWordRange">
      <MemberSignature Language="C#" Value="public virtual string[] CompletionsForPartialWordRange (Foundation.NSRange range, string str, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] CompletionsForPartialWordRange(valuetype Foundation.NSRange range, string str, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextChecker.CompletionsForPartialWordRange(Foundation.NSRange,System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member CompletionsForPartialWordRange : Foundation.NSRange * string * string -&gt; string[]&#xA;override this.CompletionsForPartialWordRange : Foundation.NSRange * string * string -&gt; string[]" Usage="uITextChecker.CompletionsForPartialWordRange (range, str, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("completionsForPartialWordRange:inString:language:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="str">To be added.</param>
        <param name="language">To be added.</param>
        <summary>An array of strings that represent the possible completions for a partially-entered word.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GuessesForWordRange">
      <MemberSignature Language="C#" Value="public virtual string[] GuessesForWordRange (Foundation.NSRange range, string str, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GuessesForWordRange(valuetype Foundation.NSRange range, string str, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextChecker.GuessesForWordRange(Foundation.NSRange,System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member GuessesForWordRange : Foundation.NSRange * string * string -&gt; string[]&#xA;override this.GuessesForWordRange : Foundation.NSRange * string * string -&gt; string[]" Usage="uITextChecker.GuessesForWordRange (range, str, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("guessesForWordRange:inString:language:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="str" Type="System.String" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <param name="str">To be added.</param>
        <param name="language">To be added.</param>
        <summary>The list of words that are suggestions for a misspelled word.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasLearnedWord">
      <MemberSignature Language="C#" Value="public static bool HasLearnedWord (string word);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool HasLearnedWord(string word) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextChecker.HasLearnedWord(System.String)" />
      <MemberSignature Language="F#" Value="static member HasLearnedWord : string -&gt; bool" Usage="UIKit.UITextChecker.HasLearnedWord word" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("hasLearnedWord:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="word" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="word">To be added.</param>
        <summary>Whether the spell checker has learned the specified word.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoredWords">
      <MemberSignature Language="C#" Value="public virtual string[] IgnoredWords { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] IgnoredWords" />
      <MemberSignature Language="DocId" Value="P:UIKit.UITextChecker.IgnoredWords" />
      <MemberSignature Language="F#" Value="member this.IgnoredWords : string[] with get, set" Usage="UIKit.UITextChecker.IgnoredWords" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("ignoredWords")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setIgnoredWords:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The words that are ignored during spell checking.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreWord">
      <MemberSignature Language="C#" Value="public virtual void IgnoreWord (string wordToIgnore);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IgnoreWord(string wordToIgnore) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextChecker.IgnoreWord(System.String)" />
      <MemberSignature Language="F#" Value="abstract member IgnoreWord : string -&gt; unit&#xA;override this.IgnoreWord : string -&gt; unit" Usage="uITextChecker.IgnoreWord wordToIgnore" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("ignoreWord:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="wordToIgnore" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="wordToIgnore">To be added.</param>
        <summary>Ignores the specified word during spell checking.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LearnWord">
      <MemberSignature Language="C#" Value="public static void LearnWord (string word);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void LearnWord(string word) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextChecker.LearnWord(System.String)" />
      <MemberSignature Language="F#" Value="static member LearnWord : string -&gt; unit" Usage="UIKit.UITextChecker.LearnWord word" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("learnWord:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="word" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="word">To be added.</param>
        <summary>Learns the specified word so that it no longer identified as misspelled.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeOfMisspelledWordInString">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange RangeOfMisspelledWordInString (string stringToCheck, Foundation.NSRange range, nint startingOffset, bool wrapFlag, string language);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange RangeOfMisspelledWordInString(string stringToCheck, valuetype Foundation.NSRange range, valuetype System.nint startingOffset, bool wrapFlag, string language) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextChecker.RangeOfMisspelledWordInString(System.String,Foundation.NSRange,System.nint,System.Boolean,System.String)" />
      <MemberSignature Language="F#" Value="abstract member RangeOfMisspelledWordInString : string * Foundation.NSRange * nint * bool * string -&gt; Foundation.NSRange&#xA;override this.RangeOfMisspelledWordInString : string * Foundation.NSRange * nint * bool * string -&gt; Foundation.NSRange" Usage="uITextChecker.RangeOfMisspelledWordInString (stringToCheck, range, startingOffset, wrapFlag, language)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rangeOfMisspelledWordInString:range:startingAt:wrap:language:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="stringToCheck" Type="System.String" />
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="startingOffset" Type="System.nint" />
        <Parameter Name="wrapFlag" Type="System.Boolean" />
        <Parameter Name="language" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="stringToCheck">To be added.</param>
        <param name="range">To be added.</param>
        <param name="startingOffset">To be added.</param>
        <param name="wrapFlag">To be added.</param>
        <param name="language">To be added.</param>
        <summary>Gets the <see cref="T:Foundation.NSRange" /> of the first misspelled word in <param name="stringToCheck" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnlearnWord">
      <MemberSignature Language="C#" Value="public static void UnlearnWord (string word);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UnlearnWord(string word) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITextChecker.UnlearnWord(System.String)" />
      <MemberSignature Language="F#" Value="static member UnlearnWord : string -&gt; unit" Usage="UIKit.UITextChecker.UnlearnWord word" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("unlearnWord:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="word" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="word">To be added.</param>
        <summary>Tells the spell checked to forget the specified spelling.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
