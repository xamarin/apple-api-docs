<Type Name="UIPrintPageRenderer" FullName="UIKit.UIPrintPageRenderer">
  <TypeSignature Language="C#" Value="public class UIPrintPageRenderer : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIPrintPageRenderer extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIPrintPageRenderer" />
  <TypeSignature Language="F#" Value="type UIPrintPageRenderer = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIPrintPageRenderer", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Draws pages for printing.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/RecipesAndPrinting/">RecipesAndPrinting</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/iPhone/Reference/UIPrintPageRenderer_Class/index.html">Apple documentation for <c>UIPrintPageRenderer</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPrintPageRenderer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIPrintPageRenderer (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPrintPageRenderer : Foundation.NSObjectFlag -&gt; UIKit.UIPrintPageRenderer" Usage="new UIKit.UIPrintPageRenderer t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIPrintPageRenderer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPrintPageRenderer : nativeint -&gt; UIKit.UIPrintPageRenderer" Usage="new UIKit.UIPrintPageRenderer handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddPrintFormatter">
      <MemberSignature Language="C#" Value="public virtual void AddPrintFormatter (UIKit.UIPrintFormatter formatter, nint pageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddPrintFormatter(class UIKit.UIPrintFormatter formatter, valuetype System.nint pageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.AddPrintFormatter(UIKit.UIPrintFormatter,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member AddPrintFormatter : UIKit.UIPrintFormatter * nint -&gt; unit&#xA;override this.AddPrintFormatter : UIKit.UIPrintFormatter * nint -&gt; unit" Usage="uIPrintPageRenderer.AddPrintFormatter (formatter, pageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addPrintFormatter:startingAtPageAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="formatter" Type="UIKit.UIPrintFormatter" />
        <Parameter Name="pageIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="formatter">To be added.</param>
        <param name="pageIndex">To be added.</param>
        <summary>Adds a UIPrintFormatter to those associated with this UIPrintPageRenderer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPrintPageRenderer.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIPrintPageRenderer.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawContentForPage">
      <MemberSignature Language="C#" Value="public virtual void DrawContentForPage (nint index, CoreGraphics.CGRect contentRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawContentForPage(valuetype System.nint index, valuetype CoreGraphics.CGRect contentRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.DrawContentForPage(System.nint,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member DrawContentForPage : nint * CoreGraphics.CGRect -&gt; unit&#xA;override this.DrawContentForPage : nint * CoreGraphics.CGRect -&gt; unit" Usage="uIPrintPageRenderer.DrawContentForPage (index, contentRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawContentForPageAtIndex:inRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nint" />
        <Parameter Name="contentRect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="contentRect">To be added.</param>
        <summary>Renders the page in the specified contentRect.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawFooterForPage">
      <MemberSignature Language="C#" Value="public virtual void DrawFooterForPage (nint index, CoreGraphics.CGRect footerRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawFooterForPage(valuetype System.nint index, valuetype CoreGraphics.CGRect footerRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.DrawFooterForPage(System.nint,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member DrawFooterForPage : nint * CoreGraphics.CGRect -&gt; unit&#xA;override this.DrawFooterForPage : nint * CoreGraphics.CGRect -&gt; unit" Usage="uIPrintPageRenderer.DrawFooterForPage (index, footerRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawFooterForPageAtIndex:inRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nint" />
        <Parameter Name="footerRect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="footerRect">To be added.</param>
        <summary>Draws the footer of the page.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawHeaderForPage">
      <MemberSignature Language="C#" Value="public virtual void DrawHeaderForPage (nint index, CoreGraphics.CGRect headerRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawHeaderForPage(valuetype System.nint index, valuetype CoreGraphics.CGRect headerRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.DrawHeaderForPage(System.nint,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member DrawHeaderForPage : nint * CoreGraphics.CGRect -&gt; unit&#xA;override this.DrawHeaderForPage : nint * CoreGraphics.CGRect -&gt; unit" Usage="uIPrintPageRenderer.DrawHeaderForPage (index, headerRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawHeaderForPageAtIndex:inRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nint" />
        <Parameter Name="headerRect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="headerRect">To be added.</param>
        <summary>Draws the header of the page.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPage">
      <MemberSignature Language="C#" Value="public virtual void DrawPage (nint index, CoreGraphics.CGRect pageRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPage(valuetype System.nint index, valuetype CoreGraphics.CGRect pageRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.DrawPage(System.nint,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member DrawPage : nint * CoreGraphics.CGRect -&gt; unit&#xA;override this.DrawPage : nint * CoreGraphics.CGRect -&gt; unit" Usage="uIPrintPageRenderer.DrawPage (index, pageRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawPageAtIndex:inRect:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nint" />
        <Parameter Name="pageRect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <param name="pageRect">To be added.</param>
        <summary>Draws the entire page.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawPrintFormatterForPage">
      <MemberSignature Language="C#" Value="public virtual void DrawPrintFormatterForPage (UIKit.UIPrintFormatter printFormatter, nint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawPrintFormatterForPage(class UIKit.UIPrintFormatter printFormatter, valuetype System.nint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.DrawPrintFormatterForPage(UIKit.UIPrintFormatter,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member DrawPrintFormatterForPage : UIKit.UIPrintFormatter * nint -&gt; unit&#xA;override this.DrawPrintFormatterForPage : UIKit.UIPrintFormatter * nint -&gt; unit" Usage="uIPrintPageRenderer.DrawPrintFormatterForPage (printFormatter, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("drawPrintFormatter:forPageAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printFormatter" Type="UIKit.UIPrintFormatter" />
        <Parameter Name="index" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="printFormatter">To be added.</param>
        <param name="index">To be added.</param>
        <summary>Called once for each formatter assigned to the page. When overridden, can add custom drawing to the formatters' drawing.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterHeight">
      <MemberSignature Language="C#" Value="public virtual nfloat FooterHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat FooterHeight" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPrintPageRenderer.FooterHeight" />
      <MemberSignature Language="F#" Value="member this.FooterHeight : nfloat with get, set" Usage="UIKit.UIPrintPageRenderer.FooterHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("footerHeight")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setFooterHeight:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The height of the footer for the specified page.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderHeight">
      <MemberSignature Language="C#" Value="public virtual nfloat HeaderHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat HeaderHeight" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPrintPageRenderer.HeaderHeight" />
      <MemberSignature Language="F#" Value="member this.HeaderHeight : nfloat with get, set" Usage="UIKit.UIPrintPageRenderer.HeaderHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("headerHeight")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setHeaderHeight:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The height of the header for the specified page.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfPages">
      <MemberSignature Language="C#" Value="public virtual nint NumberOfPages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint NumberOfPages" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPrintPageRenderer.NumberOfPages" />
      <MemberSignature Language="F#" Value="member this.NumberOfPages : nint" Usage="UIKit.UIPrintPageRenderer.NumberOfPages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("numberOfPages")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of pages to render.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PaperRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect PaperRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect PaperRect" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPrintPageRenderer.PaperRect" />
      <MemberSignature Language="F#" Value="member this.PaperRect : CoreGraphics.CGRect" Usage="UIKit.UIPrintPageRenderer.PaperRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("paperRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the paper size for the print job.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForDrawingPages">
      <MemberSignature Language="C#" Value="public virtual void PrepareForDrawingPages (Foundation.NSRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForDrawingPages(valuetype Foundation.NSRange range) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.PrepareForDrawingPages(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member PrepareForDrawingPages : Foundation.NSRange -&gt; unit&#xA;override this.PrepareForDrawingPages : Foundation.NSRange -&gt; unit" Usage="uIPrintPageRenderer.PrepareForDrawingPages range" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("prepareForDrawingPages:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="range">To be added.</param>
        <summary>Called prior to printing.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintableRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect PrintableRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect PrintableRect" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPrintPageRenderer.PrintableRect" />
      <MemberSignature Language="F#" Value="member this.PrintableRect : CoreGraphics.CGRect" Usage="UIKit.UIPrintPageRenderer.PrintableRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("printableRect")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The area in which printing can occur. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormatters">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIPrintFormatter[] PrintFormatters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIPrintFormatter[] PrintFormatters" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPrintPageRenderer.PrintFormatters" />
      <MemberSignature Language="F#" Value="member this.PrintFormatters : UIKit.UIPrintFormatter[] with get, set" Usage="UIKit.UIPrintPageRenderer.PrintFormatters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("printFormatters", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPrintFormatters:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIPrintFormatter[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The set of formatters for the renderer.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrintFormattersForPage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIPrintFormatter[] PrintFormattersForPage (nint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIPrintFormatter[] PrintFormattersForPage(valuetype System.nint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrintPageRenderer.PrintFormattersForPage(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member PrintFormattersForPage : nint -&gt; UIKit.UIPrintFormatter[]&#xA;override this.PrintFormattersForPage : nint -&gt; UIKit.UIPrintFormatter[]" Usage="uIPrintPageRenderer.PrintFormattersForPage index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("printFormattersForPageAtIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIPrintFormatter[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>The set of formatters for the specified page.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
