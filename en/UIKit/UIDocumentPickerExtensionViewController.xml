<Type Name="UIDocumentPickerExtensionViewController" FullName="UIKit.UIDocumentPickerExtensionViewController">
  <TypeSignature Language="C#" Value="public class UIDocumentPickerExtensionViewController : UIKit.UIViewController" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIDocumentPickerExtensionViewController extends UIKit.UIViewController" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIDocumentPickerExtensionViewController" />
  <TypeSignature Language="F#" Value="type UIDocumentPickerExtensionViewController = class&#xA;    inherit UIViewController" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIViewController</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIDocumentPickerExtensionViewController", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Subclasses of <see cref="T:UIKit.UIDocumentPickerExtensionViewController" /> extend the Document Picker, allowing the user to import, export, open, and move documents outside of the local sandbox.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDocumentPickerExtensionViewController_Class/index.html">Apple documentation for <c>UIDocumentPickerExtensionViewController</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIDocumentPickerExtensionViewController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentPickerExtensionViewController.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIDocumentPickerExtensionViewController (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentPickerExtensionViewController.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDocumentPickerExtensionViewController : Foundation.NSCoder -&gt; UIKit.UIDocumentPickerExtensionViewController" Usage="new UIKit.UIDocumentPickerExtensionViewController coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIDocumentPickerExtensionViewController (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentPickerExtensionViewController.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDocumentPickerExtensionViewController : Foundation.NSObjectFlag -&gt; UIKit.UIDocumentPickerExtensionViewController" Usage="new UIKit.UIDocumentPickerExtensionViewController t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIDocumentPickerExtensionViewController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentPickerExtensionViewController.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDocumentPickerExtensionViewController : nativeint -&gt; UIKit.UIDocumentPickerExtensionViewController" Usage="new UIKit.UIDocumentPickerExtensionViewController handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIDocumentPickerExtensionViewController (string nibName, Foundation.NSBundle bundle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string nibName, class Foundation.NSBundle bundle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentPickerExtensionViewController.#ctor(System.String,Foundation.NSBundle)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDocumentPickerExtensionViewController : string * Foundation.NSBundle -&gt; UIKit.UIDocumentPickerExtensionViewController" Usage="new UIKit.UIDocumentPickerExtensionViewController (nibName, bundle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithNibName:bundle:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nibName" Type="System.String" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
      </Parameters>
      <Docs>
        <param name="nibName">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="bundle">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new document picker extension view controller from the named NIB in the provided <paramref name="bundle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentPickerExtensionViewController.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIDocumentPickerExtensionViewController.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DismissGrantingAccess">
      <MemberSignature Language="C#" Value="public virtual void DismissGrantingAccess (Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DismissGrantingAccess(class Foundation.NSUrl url) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentPickerExtensionViewController.DismissGrantingAccess(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member DismissGrantingAccess : Foundation.NSUrl -&gt; unit&#xA;override this.DismissGrantingAccess : Foundation.NSUrl -&gt; unit" Usage="uIDocumentPickerExtensionViewController.DismissGrantingAccess url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dismissGrantingAccessToURL:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Initiates a transfer of the <paramref name="url" /> file and then dismisses <c>this</c> <see cref="T:UIKit.UIDocumentPickerExtensionViewController" /> controller.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentPickerMode">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDocumentPickerMode DocumentPickerMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIDocumentPickerMode DocumentPickerMode" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentPickerExtensionViewController.DocumentPickerMode" />
      <MemberSignature Language="F#" Value="member this.DocumentPickerMode : UIKit.UIDocumentPickerMode" Usage="UIKit.UIDocumentPickerExtensionViewController.DocumentPickerMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("documentPickerMode", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDocumentPickerMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the file transfer operation as a value of the <see cref="T:UIKit.UIDocumentPickerMode" /> enumeration for <c>this</c> <see cref="T:UIKit.UIDocumentPickerExtensionViewController" /> controller.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DocumentStorageUrl">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl DocumentStorageUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl DocumentStorageUrl" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentPickerExtensionViewController.DocumentStorageUrl" />
      <MemberSignature Language="F#" Value="member this.DocumentStorageUrl : Foundation.NSUrl" Usage="UIKit.UIDocumentPickerExtensionViewController.DocumentStorageUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("documentStorageURL", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the root URL for documents provided by the file provider associated with <c>this</c> <see cref="T:UIKit.UIDocumentPickerExtensionViewController" /> controller.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OriginalUrl">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl OriginalUrl { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl OriginalUrl" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentPickerExtensionViewController.OriginalUrl" />
      <MemberSignature Language="F#" Value="member this.OriginalUrl : Foundation.NSUrl" Usage="UIKit.UIDocumentPickerExtensionViewController.OriginalUrl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("originalURL", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the URL of the file that the app exports, or <see langword="null" /> if <c>this</c> <see cref="T:UIKit.UIDocumentPickerExtensionViewController" /> is not in export mode.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForPresentation">
      <MemberSignature Language="C#" Value="public virtual void PrepareForPresentation (UIKit.UIDocumentPickerMode mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForPresentation(valuetype UIKit.UIDocumentPickerMode mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentPickerExtensionViewController.PrepareForPresentation(UIKit.UIDocumentPickerMode)" />
      <MemberSignature Language="F#" Value="abstract member PrepareForPresentation : UIKit.UIDocumentPickerMode -&gt; unit&#xA;override this.PrepareForPresentation : UIKit.UIDocumentPickerMode -&gt; unit" Usage="uIDocumentPickerExtensionViewController.PrepareForPresentation mode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("prepareForPresentationInMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="UIKit.UIDocumentPickerMode" />
      </Parameters>
      <Docs>
        <param name="mode">To be added.</param>
        <summary>Performs custom configuration of <c>this</c> <see cref="T:UIKit.UIDocumentPickerExtensionViewController" /> controller based on the <paramref name="mode" /> that is specified.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProviderIdentifier">
      <MemberSignature Language="C#" Value="public virtual string ProviderIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ProviderIdentifier" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentPickerExtensionViewController.ProviderIdentifier" />
      <MemberSignature Language="F#" Value="member this.ProviderIdentifier : string" Usage="UIKit.UIDocumentPickerExtensionViewController.ProviderIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("providerIdentifier")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an identifier shared by <c>this</c> <see cref="T:UIKit.UIDocumentPickerExtensionViewController" /> controller and an associated file provider.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidTypes">
      <MemberSignature Language="C#" Value="public virtual string[] ValidTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ValidTypes" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentPickerExtensionViewController.ValidTypes" />
      <MemberSignature Language="F#" Value="member this.ValidTypes : string[]" Usage="UIKit.UIDocumentPickerExtensionViewController.ValidTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("validTypes", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array of uniform type identifiers for valid types if <c>this</c> <see cref="T:UIKit.UIDocumentPickerExtensionViewController" /> controller is in import or open mode, or <see langword="null" /> for other modes.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
