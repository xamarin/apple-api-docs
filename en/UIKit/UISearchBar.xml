<Type Name="UISearchBar" FullName="UIKit.UISearchBar">
  <TypeSignature Language="C#" Value="public class UISearchBar : UIKit.UIView, IDisposable, UIKit.IUIBarPositioning, UIKit.IUITextInputTraits" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UISearchBar extends UIKit.UIView implements class Foundation.INSCoding, class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIBarPositioning, class UIKit.IUITextInputTraits" />
  <TypeSignature Language="DocId" Value="T:UIKit.UISearchBar" />
  <TypeSignature Language="F#" Value="type UISearchBar = class&#xA;    inherit UIView&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUIBarPositioning&#xA;    interface IUITextInputTraits" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIBarPositioning</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUITextInputTraits</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UISearchBar", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:UIKit.UIView" /> that displays a search bar.</summary>
    <remarks>
      <para>
   The Xamarin API supports two styles of event notification: the Objective-C style that uses a delegate class or the C# style using event notifications.  
</para>
      <para>
   The C# style allows the user to add or remove event handlers at runtime by assigning to the events of properties of this class.    Event handlers can be anyone of a method, an anonymous methods or a lambda expression.  Using the C# style events or properties will override any manual settings to the Objective-C Delegate or WeakDelegate settings.
</para>
      <para>The Objective-C style requires the user to create a new class derived from <see cref="T:UIKit.UISearchBarDelegate" /> class and assign it to the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=UIKit%20Delegate&amp;scope=Xamarin" title="P:UIKit.Delegate">P:UIKit.Delegate</a></format> property.   Alternatively, for low-level control, by creating a class derived from <see cref="T:Foundation.NSObject" /> which has every entry point properly decorated with an [Export] attribute.   The instance of this object can then be assigned to the <see cref="P:UIKit.UISearchBar.WeakDelegate" /> property.   
</para>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MapDemo">Example_ContentControls</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MonoCatalog-MonoDevelop/">monocatalog</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchBar_Class/index.html">Apple documentation for <c>UISearchBar</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISearchBar ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISearchBar (CoreGraphics.CGRect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.#ctor(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="new UIKit.UISearchBar : CoreGraphics.CGRect -&gt; UIKit.UISearchBar" Usage="new UIKit.UISearchBar frame" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UISearchBar with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of UISearchBar with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISearchBar (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UISearchBar : Foundation.NSCoder -&gt; UIKit.UISearchBar" Usage="new UIKit.UISearchBar coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UISearchBar (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UISearchBar : Foundation.NSObjectFlag -&gt; UIKit.UISearchBar" Usage="new UIKit.UISearchBar t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UISearchBar (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UISearchBar : nativeint -&gt; UIKit.UISearchBar" Usage="new UIKit.UISearchBar handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static UIKit.UISearchBar.UISearchBarAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UISearchBar/UISearchBarAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : UIKit.UISearchBar.UISearchBarAppearance" Usage="UIKit.UISearchBar.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBar+UISearchBarAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UISearchBar.</para>
          <para>If developers want to control the appearance of subclasses of UISearchBar, they should use the <see cref="M:UIKit.UISearchBar.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static UIKit.UISearchBar.UISearchBarAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISearchBar/UISearchBarAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; UIKit.UISearchBar.UISearchBarAppearance" Usage="UIKit.UISearchBar.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBar+UISearchBarAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UISearchBar when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of UISearchBar, they should use the <see cref="M:UIKit.UISearchBar.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutocapitalizationType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextAutocapitalizationType AutocapitalizationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UITextAutocapitalizationType AutocapitalizationType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.AutocapitalizationType" />
      <MemberSignature Language="F#" Value="member this.AutocapitalizationType : UIKit.UITextAutocapitalizationType with get, set" Usage="UIKit.UISearchBar.AutocapitalizationType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUITextInputTraits.AutocapitalizationType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("autocapitalizationType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAutocapitalizationType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextAutocapitalizationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The autocapitalization style used on the text.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutocorrectionType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextAutocorrectionType AutocorrectionType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UITextAutocorrectionType AutocorrectionType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.AutocorrectionType" />
      <MemberSignature Language="F#" Value="member this.AutocorrectionType : UIKit.UITextAutocorrectionType with get, set" Usage="UIKit.UISearchBar.AutocorrectionType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUITextInputTraits.AutocorrectionType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("autocorrectionType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAutocorrectionType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextAutocorrectionType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The autocorrection style used on the text.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage BackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage BackgroundImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.BackgroundImage" />
      <MemberSignature Language="F#" Value="member this.BackgroundImage : UIKit.UIImage with get, set" Usage="UIKit.UISearchBar.BackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("backgroundImage", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBackgroundImage:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIImage shown in the background of the search bar.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageForBarPosition">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage BackgroundImageForBarPosition (UIKit.UIBarPosition barPosition, UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage BackgroundImageForBarPosition(valuetype UIKit.UIBarPosition barPosition, valuetype UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.BackgroundImageForBarPosition(UIKit.UIBarPosition,UIKit.UIBarMetrics)" />
      <MemberSignature Language="F#" Value="abstract member BackgroundImageForBarPosition : UIKit.UIBarPosition * UIKit.UIBarMetrics -&gt; UIKit.UIImage&#xA;override this.BackgroundImageForBarPosition : UIKit.UIBarPosition * UIKit.UIBarMetrics -&gt; UIKit.UIImage" Usage="uISearchBar.BackgroundImageForBarPosition (barPosition, barMetrics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("backgroundImageForBarPosition:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="barPosition" Type="UIKit.UIBarPosition" />
        <Parameter Name="barMetrics" Type="UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="barPosition">To be added.</param>
        <param name="barMetrics">To be added.</param>
        <summary>The UIImage used for the background for the specified position and metrics.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BarPosition">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIBarPosition BarPosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIBarPosition BarPosition" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.BarPosition" />
      <MemberSignature Language="F#" Value="member this.BarPosition : UIKit.UIBarPosition" Usage="UIKit.UISearchBar.BarPosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUIBarPositioning.BarPosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("barPosition")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIBarPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIBarPosition" /> of <c>this</c> <see cref="T:UIKit.UISearchBar" /> view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BarStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIBarStyle BarStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIBarStyle BarStyle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.BarStyle" />
      <MemberSignature Language="F#" Value="member this.BarStyle : UIKit.UIBarStyle with get, set" Usage="UIKit.UISearchBar.BarStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("barStyle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBarStyle:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIBarStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The appearance of this UISearchBar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BarTintColor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor BarTintColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor BarTintColor" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.BarTintColor" />
      <MemberSignature Language="F#" Value="member this.BarTintColor : UIKit.UIColor with get, set" Usage="UIKit.UISearchBar.BarTintColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("barTintColor", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBarTintColor:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The tint applied to the background of this UISearchBar.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BookmarkButtonClicked">
      <MemberSignature Language="C#" Value="public event EventHandler BookmarkButtonClicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler BookmarkButtonClicked" />
      <MemberSignature Language="DocId" Value="E:UIKit.UISearchBar.BookmarkButtonClicked" />
      <MemberSignature Language="F#" Value="member this.BookmarkButtonClicked : EventHandler " Usage="member this.BookmarkButtonClicked : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelButtonClicked">
      <MemberSignature Language="C#" Value="public event EventHandler CancelButtonClicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CancelButtonClicked" />
      <MemberSignature Language="DocId" Value="E:UIKit.UISearchBar.CancelButtonClicked" />
      <MemberSignature Language="F#" Value="member this.CancelButtonClicked : EventHandler " Usage="member this.CancelButtonClicked : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UISearchBar.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public UIKit.IUISearchBarDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUISearchBarDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UIKit.IUISearchBarDelegate with get, set" Usage="UIKit.UISearchBar.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUISearchBarDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UIKit.IUISearchBarDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UIKit.IUISearchBarDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="uISearchBar.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UISearchBar object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UISearchBar class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UISearchBar ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnablesReturnKeyAutomatically">
      <MemberSignature Language="C#" Value="public virtual bool EnablesReturnKeyAutomatically { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EnablesReturnKeyAutomatically" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.EnablesReturnKeyAutomatically" />
      <MemberSignature Language="F#" Value="member this.EnablesReturnKeyAutomatically : bool with get, set" Usage="UIKit.UISearchBar.EnablesReturnKeyAutomatically" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUITextInputTraits.EnablesReturnKeyAutomatically</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("enablesReturnKeyAutomatically")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEnablesReturnKeyAutomatically:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether to enable the return key when a user enters text.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="uISearchBar.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UISearchBar.UISearchBarAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISearchBar/UISearchBarAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UISearchBar.UISearchBarAppearance" Usage="UIKit.UISearchBar.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBar+UISearchBarAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UISearchBar.UISearchBarAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISearchBar/UISearchBarAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UISearchBar.UISearchBarAppearance" Usage="UIKit.UISearchBar.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBar+UISearchBarAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" /> when found in the <paramref name="containers" /> containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UISearchBar.UISearchBarAppearance GetAppearance&lt;T&gt; () where T : UIKit.UISearchBar;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISearchBar/UISearchBarAppearance GetAppearance&lt;(class UIKit.UISearchBar) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; UIKit.UISearchBar.UISearchBarAppearance (requires 'T :&gt; UIKit.UISearchBar)" Usage="UIKit.UISearchBar.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBar+UISearchBarAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UISearchBar.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UISearchBar.UISearchBarAppearance" /> for the subclass of UISearchBar.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UISearchBar.Appearance" /> property, or the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UISearchBar.GetAppearance<MyUISearchBarSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UISearchBar.UISearchBarAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : UIKit.UISearchBar;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISearchBar/UISearchBarAppearance GetAppearance&lt;(class UIKit.UISearchBar) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UISearchBar.UISearchBarAppearance (requires 'T :&gt; UIKit.UISearchBar)" Usage="UIKit.UISearchBar.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBar+UISearchBarAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UISearchBar</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UISearchBar.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UISearchBar.UISearchBarAppearance" /> for the subclass of UISearchBar.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UISearchBar.</para>
          <para>Unlike the <see cref="P:UIKit.UISearchBar.Appearance" /> property, or the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UISearchBar.GetAppearance<MyUISearchBarSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UISearchBar.UISearchBarAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : UIKit.UISearchBar;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISearchBar/UISearchBarAppearance GetAppearance&lt;(class UIKit.UISearchBar) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UISearchBar.UISearchBarAppearance (requires 'T :&gt; UIKit.UISearchBar)" Usage="UIKit.UISearchBar.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBar+UISearchBarAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UISearchBar</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UISearchBar.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UISearchBar.UISearchBarAppearance" /> for the subclass of UISearchBar that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UISearchBar that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UISearchBar.Appearance" /> property, or the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UISearchBar.GetAppearance<MyUISearchBarSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImageForSearchBarIcon">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage GetImageForSearchBarIcon (UIKit.UISearchBarIcon icon, UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage GetImageForSearchBarIcon(valuetype UIKit.UISearchBarIcon icon, valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetImageForSearchBarIcon(UIKit.UISearchBarIcon,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member GetImageForSearchBarIcon : UIKit.UISearchBarIcon * UIKit.UIControlState -&gt; UIKit.UIImage&#xA;override this.GetImageForSearchBarIcon : UIKit.UISearchBarIcon * UIKit.UIControlState -&gt; UIKit.UIImage" Usage="uISearchBar.GetImageForSearchBarIcon (icon, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("imageForSearchBarIcon:state:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="UIKit.UISearchBarIcon" />
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="icon">To be added.</param>
        <param name="state">To be added.</param>
        <summary>The UIImage used for the specified search bar icon type and control state.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionAdjustmentForSearchBarIcon">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIOffset GetPositionAdjustmentForSearchBarIcon (UIKit.UISearchBarIcon icon);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UIOffset GetPositionAdjustmentForSearchBarIcon(valuetype UIKit.UISearchBarIcon icon) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetPositionAdjustmentForSearchBarIcon(UIKit.UISearchBarIcon)" />
      <MemberSignature Language="F#" Value="abstract member GetPositionAdjustmentForSearchBarIcon : UIKit.UISearchBarIcon -&gt; UIKit.UIOffset&#xA;override this.GetPositionAdjustmentForSearchBarIcon : UIKit.UISearchBarIcon -&gt; UIKit.UIOffset" Usage="uISearchBar.GetPositionAdjustmentForSearchBarIcon icon" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("positionAdjustmentForSearchBarIcon:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="icon" Type="UIKit.UISearchBarIcon" />
      </Parameters>
      <Docs>
        <param name="icon">To be added.</param>
        <summary>The position adjustment for the specified icon.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScopeBarButtonBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage GetScopeBarButtonBackgroundImage (UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage GetScopeBarButtonBackgroundImage(valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetScopeBarButtonBackgroundImage(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member GetScopeBarButtonBackgroundImage : UIKit.UIControlState -&gt; UIKit.UIImage&#xA;override this.GetScopeBarButtonBackgroundImage : UIKit.UIControlState -&gt; UIKit.UIImage" Usage="uISearchBar.GetScopeBarButtonBackgroundImage state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scopeBarButtonBackgroundImageForState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>The UIImage used for the background for the specified scope bar button and state.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScopeBarButtonDividerImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage GetScopeBarButtonDividerImage (UIKit.UIControlState leftState, UIKit.UIControlState rightState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage GetScopeBarButtonDividerImage(valuetype UIKit.UIControlState leftState, valuetype UIKit.UIControlState rightState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetScopeBarButtonDividerImage(UIKit.UIControlState,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member GetScopeBarButtonDividerImage : UIKit.UIControlState * UIKit.UIControlState -&gt; UIKit.UIImage&#xA;override this.GetScopeBarButtonDividerImage : UIKit.UIControlState * UIKit.UIControlState -&gt; UIKit.UIImage" Usage="uISearchBar.GetScopeBarButtonDividerImage (leftState, rightState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scopeBarButtonDividerImageForLeftSegmentState:rightSegmentState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftState" Type="UIKit.UIControlState" />
        <Parameter Name="rightState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="leftState">To be added.</param>
        <param name="rightState">To be added.</param>
        <summary>The UIImage used for the divider for the specified combination of left and right segment states.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetScopeBarButtonTitleTextAttributes">
      <MemberSignature Language="C#" Value="public UIKit.UITextAttributes GetScopeBarButtonTitleTextAttributes (UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UITextAttributes GetScopeBarButtonTitleTextAttributes(valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetScopeBarButtonTitleTextAttributes(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="member this.GetScopeBarButtonTitleTextAttributes : UIKit.UIControlState -&gt; UIKit.UITextAttributes" Usage="uISearchBar.GetScopeBarButtonTitleTextAttributes state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UITextAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>The text attributes of the scope bar button's title for the specified UIControlState.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSearchFieldBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage GetSearchFieldBackgroundImage (UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage GetSearchFieldBackgroundImage(valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.GetSearchFieldBackgroundImage(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member GetSearchFieldBackgroundImage : UIKit.UIControlState -&gt; UIKit.UIImage&#xA;override this.GetSearchFieldBackgroundImage : UIKit.UIControlState -&gt; UIKit.UIImage" Usage="uISearchBar.GetSearchFieldBackgroundImage state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("searchFieldBackgroundImageForState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>The UIImage used for the background of the search text field for the specified state.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InputAccessoryView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView InputAccessoryView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView InputAccessoryView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.InputAccessoryView" />
      <MemberSignature Language="F#" Value="member this.InputAccessoryView : UIKit.UIView with get, set" Usage="UIKit.UISearchBar.InputAccessoryView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("inputAccessoryView", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setInputAccessoryView:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The custom input accessory for the keyboard of this UISearchBar.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InputAssistantItem">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextInputAssistantItem InputAssistantItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITextInputAssistantItem InputAssistantItem" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.InputAssistantItem" />
      <MemberSignature Language="F#" Value="member this.InputAssistantItem : UIKit.UITextInputAssistantItem" Usage="UIKit.UISearchBar.InputAssistantItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("inputAssistantItem", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextInputAssistantItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the assistant that will be used to configure the shortcut bar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardAppearance">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIKeyboardAppearance KeyboardAppearance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIKeyboardAppearance KeyboardAppearance" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.KeyboardAppearance" />
      <MemberSignature Language="F#" Value="member this.KeyboardAppearance : UIKit.UIKeyboardAppearance with get, set" Usage="UIKit.UISearchBar.KeyboardAppearance" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUITextInputTraits.KeyboardAppearance</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("keyboardAppearance")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setKeyboardAppearance:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIKeyboardAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the appearance of the keyboard that is associated with <c>this</c> <see cref="T:UIKit.UISearchBar" /> bar, as a <see cref="T:UIKit.UIKeyboardAppearance" /> object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIKeyboardType KeyboardType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIKeyboardType KeyboardType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.KeyboardType" />
      <MemberSignature Language="F#" Value="member this.KeyboardType : UIKit.UIKeyboardType with get, set" Usage="UIKit.UISearchBar.KeyboardType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUITextInputTraits.KeyboardType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("keyboardType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setKeyboardType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIKeyboardType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The keyboard style used for the text.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ListButtonClicked">
      <MemberSignature Language="C#" Value="public event EventHandler ListButtonClicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ListButtonClicked" />
      <MemberSignature Language="DocId" Value="E:UIKit.UISearchBar.ListButtonClicked" />
      <MemberSignature Language="F#" Value="member this.ListButtonClicked : EventHandler " Usage="member this.ListButtonClicked : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEditingStarted">
      <MemberSignature Language="C#" Value="public event EventHandler OnEditingStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler OnEditingStarted" />
      <MemberSignature Language="DocId" Value="E:UIKit.UISearchBar.OnEditingStarted" />
      <MemberSignature Language="F#" Value="member this.OnEditingStarted : EventHandler " Usage="member this.OnEditingStarted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEditingStopped">
      <MemberSignature Language="C#" Value="public event EventHandler OnEditingStopped;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler OnEditingStopped" />
      <MemberSignature Language="DocId" Value="E:UIKit.UISearchBar.OnEditingStopped" />
      <MemberSignature Language="F#" Value="member this.OnEditingStopped : EventHandler " Usage="member this.OnEditingStopped : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PasswordRules">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextInputPasswordRules PasswordRules { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITextInputPasswordRules PasswordRules" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.PasswordRules" />
      <MemberSignature Language="F#" Value="member this.PasswordRules : UIKit.UITextInputPasswordRules with get, set" Usage="UIKit.UISearchBar.PasswordRules" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("passwordRules", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPasswordRules:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextInputPasswordRules</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the password rules for entering passwords in the UITextView.</summary>
        <value>The password rules for entering passwords in the UITextView.</value>
        <remarks>To be added.</remarks>
        <related type="externalDocumentation" href="https://developer.apple.com/documentation/security/password_autofill/customizing_password_autofill_rules?language=objc">Apple documentation: <c>Customizing Password AutoFill Rules</c></related>
      </Docs>
    </Member>
    <Member MemberName="Placeholder">
      <MemberSignature Language="C#" Value="public virtual string Placeholder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Placeholder" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.Placeholder" />
      <MemberSignature Language="F#" Value="member this.Placeholder : string with get, set" Usage="UIKit.UISearchBar.Placeholder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("placeholder", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPlaceholder:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A string that is displayed when there is no other text in the text field.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public virtual string Prompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prompt" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.Prompt" />
      <MemberSignature Language="F#" Value="member this.Prompt : string with get, set" Usage="UIKit.UISearchBar.Prompt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("prompt", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPrompt:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A line of text displayed at the top of this UISearchBar.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReturnKeyType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIReturnKeyType ReturnKeyType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIReturnKeyType ReturnKeyType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ReturnKeyType" />
      <MemberSignature Language="F#" Value="member this.ReturnKeyType : UIKit.UIReturnKeyType with get, set" Usage="UIKit.UISearchBar.ReturnKeyType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUITextInputTraits.ReturnKeyType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("returnKeyType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setReturnKeyType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIReturnKeyType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:UIKit.UIReturnKeyType" /> value for the return key that is associated with <c>this</c> <see cref="T:UIKit.UISearchBar" /> bar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScopeBarBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage ScopeBarBackgroundImage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage ScopeBarBackgroundImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ScopeBarBackgroundImage" />
      <MemberSignature Language="F#" Value="member this.ScopeBarBackgroundImage : UIKit.UIImage with get, set" Usage="UIKit.UISearchBar.ScopeBarBackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("scopeBarBackgroundImage", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setScopeBarBackgroundImage:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIImage used for the background of the scope bar.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScopeButtonTitles">
      <MemberSignature Language="C#" Value="public virtual string[] ScopeButtonTitles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] ScopeButtonTitles" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ScopeButtonTitles" />
      <MemberSignature Language="F#" Value="member this.ScopeButtonTitles : string[] with get, set" Usage="UIKit.UISearchBar.ScopeButtonTitles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("scopeButtonTitles", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setScopeButtonTitles:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The titles of the scope buttons.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchBarStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UISearchBarStyle SearchBarStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UISearchBarStyle SearchBarStyle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.SearchBarStyle" />
      <MemberSignature Language="F#" Value="member this.SearchBarStyle : UIKit.UISearchBarStyle with get, set" Usage="UIKit.UISearchBar.SearchBarStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("searchBarStyle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSearchBarStyle:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBarStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The style used for this UISearchBar's appearance.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchButtonClicked">
      <MemberSignature Language="C#" Value="public event EventHandler SearchButtonClicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler SearchButtonClicked" />
      <MemberSignature Language="DocId" Value="E:UIKit.UISearchBar.SearchButtonClicked" />
      <MemberSignature Language="F#" Value="member this.SearchButtonClicked : EventHandler " Usage="member this.SearchButtonClicked : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchFieldBackgroundPositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIOffset SearchFieldBackgroundPositionAdjustment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIOffset SearchFieldBackgroundPositionAdjustment" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.SearchFieldBackgroundPositionAdjustment" />
      <MemberSignature Language="F#" Value="member this.SearchFieldBackgroundPositionAdjustment : UIKit.UIOffset with get, set" Usage="UIKit.UISearchBar.SearchFieldBackgroundPositionAdjustment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("searchFieldBackgroundPositionAdjustment")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSearchFieldBackgroundPositionAdjustment:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The offset of the search text field background in this UISearchBar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchResultsButtonSelected">
      <MemberSignature Language="C#" Value="public virtual bool SearchResultsButtonSelected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SearchResultsButtonSelected" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.SearchResultsButtonSelected" />
      <MemberSignature Language="F#" Value="member this.SearchResultsButtonSelected : bool with get, set" Usage="UIKit.UISearchBar.SearchResultsButtonSelected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isSearchResultsButtonSelected")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSearchResultsButtonSelected:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the search results button is selected.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchTextPositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIOffset SearchTextPositionAdjustment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIOffset SearchTextPositionAdjustment" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.SearchTextPositionAdjustment" />
      <MemberSignature Language="F#" Value="member this.SearchTextPositionAdjustment : UIKit.UIOffset with get, set" Usage="UIKit.UISearchBar.SearchTextPositionAdjustment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("searchTextPositionAdjustment")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSearchTextPositionAdjustment:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The offset of the text in the search text field background.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecureTextEntry">
      <MemberSignature Language="C#" Value="public virtual bool SecureTextEntry { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SecureTextEntry" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.SecureTextEntry" />
      <MemberSignature Language="F#" Value="member this.SecureTextEntry : bool with get, set" Usage="UIKit.UISearchBar.SecureTextEntry" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUITextInputTraits.SecureTextEntry</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isSecureTextEntry")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSecureTextEntry:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether <c>this</c> <see cref="T:UIKit.UISearchBar" /> bar hides the text that a user enters.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedScopeButtonIndex">
      <MemberSignature Language="C#" Value="public virtual nint SelectedScopeButtonIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint SelectedScopeButtonIndex" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.SelectedScopeButtonIndex" />
      <MemberSignature Language="F#" Value="member this.SelectedScopeButtonIndex : nint with get, set" Usage="UIKit.UISearchBar.SelectedScopeButtonIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("selectedScopeButtonIndex")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSelectedScopeButtonIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The index of the selected scope button.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedScopeButtonIndexChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;UIKit.UISearchBarButtonIndexEventArgs&gt; SelectedScopeButtonIndexChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class UIKit.UISearchBarButtonIndexEventArgs&gt; SelectedScopeButtonIndexChanged" />
      <MemberSignature Language="DocId" Value="E:UIKit.UISearchBar.SelectedScopeButtonIndexChanged" />
      <MemberSignature Language="F#" Value="member this.SelectedScopeButtonIndexChanged : EventHandler&lt;UIKit.UISearchBarButtonIndexEventArgs&gt; " Usage="member this.SelectedScopeButtonIndexChanged : System.EventHandler&lt;UIKit.UISearchBarButtonIndexEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;UIKit.UISearchBarButtonIndexEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundImage (UIKit.UIImage backgroundImage, UIKit.UIBarPosition barPosition, UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundImage(class UIKit.UIImage backgroundImage, valuetype UIKit.UIBarPosition barPosition, valuetype UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.SetBackgroundImage(UIKit.UIImage,UIKit.UIBarPosition,UIKit.UIBarMetrics)" />
      <MemberSignature Language="F#" Value="abstract member SetBackgroundImage : UIKit.UIImage * UIKit.UIBarPosition * UIKit.UIBarMetrics -&gt; unit&#xA;override this.SetBackgroundImage : UIKit.UIImage * UIKit.UIBarPosition * UIKit.UIBarMetrics -&gt; unit" Usage="uISearchBar.SetBackgroundImage (backgroundImage, barPosition, barMetrics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBackgroundImage:forBarPosition:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backgroundImage" Type="UIKit.UIImage" />
        <Parameter Name="barPosition" Type="UIKit.UIBarPosition" />
        <Parameter Name="barMetrics" Type="UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="backgroundImage">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="barPosition">To be added.</param>
        <param name="barMetrics">To be added.</param>
        <summary>Sets the UIImage used for the background for the specified position and metrics.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImageforSearchBarIcon">
      <MemberSignature Language="C#" Value="public virtual void SetImageforSearchBarIcon (UIKit.UIImage iconImage, UIKit.UISearchBarIcon icon, UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImageforSearchBarIcon(class UIKit.UIImage iconImage, valuetype UIKit.UISearchBarIcon icon, valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.SetImageforSearchBarIcon(UIKit.UIImage,UIKit.UISearchBarIcon,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetImageforSearchBarIcon : UIKit.UIImage * UIKit.UISearchBarIcon * UIKit.UIControlState -&gt; unit&#xA;override this.SetImageforSearchBarIcon : UIKit.UIImage * UIKit.UISearchBarIcon * UIKit.UIControlState -&gt; unit" Usage="uISearchBar.SetImageforSearchBarIcon (iconImage, icon, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setImage:forSearchBarIcon:state:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iconImage" Type="UIKit.UIImage" />
        <Parameter Name="icon" Type="UIKit.UISearchBarIcon" />
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="iconImage">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="icon">To be added.</param>
        <param name="state">To be added.</param>
        <summary>Sets the icon for the specified search bar icon type and control state.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPositionAdjustmentforSearchBarIcon">
      <MemberSignature Language="C#" Value="public virtual void SetPositionAdjustmentforSearchBarIcon (UIKit.UIOffset adjustment, UIKit.UISearchBarIcon icon);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPositionAdjustmentforSearchBarIcon(valuetype UIKit.UIOffset adjustment, valuetype UIKit.UISearchBarIcon icon) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.SetPositionAdjustmentforSearchBarIcon(UIKit.UIOffset,UIKit.UISearchBarIcon)" />
      <MemberSignature Language="F#" Value="abstract member SetPositionAdjustmentforSearchBarIcon : UIKit.UIOffset * UIKit.UISearchBarIcon -&gt; unit&#xA;override this.SetPositionAdjustmentforSearchBarIcon : UIKit.UIOffset * UIKit.UISearchBarIcon -&gt; unit" Usage="uISearchBar.SetPositionAdjustmentforSearchBarIcon (adjustment, icon)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setPositionAdjustment:forSearchBarIcon:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adjustment" Type="UIKit.UIOffset" />
        <Parameter Name="icon" Type="UIKit.UISearchBarIcon" />
      </Parameters>
      <Docs>
        <param name="adjustment">To be added.</param>
        <param name="icon">To be added.</param>
        <summary>Sets the position adjustment for the specified icon.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetScopeBarButtonBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetScopeBarButtonBackgroundImage (UIKit.UIImage backgroundImage, UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScopeBarButtonBackgroundImage(class UIKit.UIImage backgroundImage, valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.SetScopeBarButtonBackgroundImage(UIKit.UIImage,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetScopeBarButtonBackgroundImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit&#xA;override this.SetScopeBarButtonBackgroundImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit" Usage="uISearchBar.SetScopeBarButtonBackgroundImage (backgroundImage, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setScopeBarButtonBackgroundImage:forState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backgroundImage" Type="UIKit.UIImage" />
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="backgroundImage">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="state">To be added.</param>
        <summary>Sets the UIImage used as the background image for the specified scope bar button and state.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetScopeBarButtonDividerImage">
      <MemberSignature Language="C#" Value="public virtual void SetScopeBarButtonDividerImage (UIKit.UIImage dividerImage, UIKit.UIControlState leftState, UIKit.UIControlState rightState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetScopeBarButtonDividerImage(class UIKit.UIImage dividerImage, valuetype UIKit.UIControlState leftState, valuetype UIKit.UIControlState rightState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.SetScopeBarButtonDividerImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetScopeBarButtonDividerImage : UIKit.UIImage * UIKit.UIControlState * UIKit.UIControlState -&gt; unit&#xA;override this.SetScopeBarButtonDividerImage : UIKit.UIImage * UIKit.UIControlState * UIKit.UIControlState -&gt; unit" Usage="uISearchBar.SetScopeBarButtonDividerImage (dividerImage, leftState, rightState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setScopeBarButtonDividerImage:forLeftSegmentState:rightSegmentState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividerImage" Type="UIKit.UIImage" />
        <Parameter Name="leftState" Type="UIKit.UIControlState" />
        <Parameter Name="rightState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="dividerImage">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="leftState">To be added.</param>
        <param name="rightState">To be added.</param>
        <summary>Sets the UIImage used as the divider for the specified combination of left and right segment states.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetScopeBarButtonTitle">
      <MemberSignature Language="C#" Value="public void SetScopeBarButtonTitle (UIKit.UITextAttributes attributes, UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetScopeBarButtonTitle(class UIKit.UITextAttributes attributes, valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.SetScopeBarButtonTitle(UIKit.UITextAttributes,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="member this.SetScopeBarButtonTitle : UIKit.UITextAttributes * UIKit.UIControlState -&gt; unit" Usage="uISearchBar.SetScopeBarButtonTitle (attributes, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="UIKit.UITextAttributes" />
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="attributes">To be added.</param>
        <param name="state">To be added.</param>
        <summary>The title and attributes of the scope bar button for the specified UIControlState.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSearchFieldBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetSearchFieldBackgroundImage (UIKit.UIImage backgroundImage, UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetSearchFieldBackgroundImage(class UIKit.UIImage backgroundImage, valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.SetSearchFieldBackgroundImage(UIKit.UIImage,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetSearchFieldBackgroundImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit&#xA;override this.SetSearchFieldBackgroundImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit" Usage="uISearchBar.SetSearchFieldBackgroundImage (backgroundImage, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setSearchFieldBackgroundImage:forState:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backgroundImage" Type="UIKit.UIImage" />
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="backgroundImage">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="state">To be added.</param>
        <summary>Sets the UIImage used as the background for the search text field for the specified state.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISearchBar.Appearance" /> property and the <see cref="M:UIKit.UISearchBar.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetShowsCancelButton">
      <MemberSignature Language="C#" Value="public virtual void SetShowsCancelButton (bool showsCancelButton, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetShowsCancelButton(bool showsCancelButton, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchBar.SetShowsCancelButton(System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetShowsCancelButton : bool * bool -&gt; unit&#xA;override this.SetShowsCancelButton : bool * bool -&gt; unit" Usage="uISearchBar.SetShowsCancelButton (showsCancelButton, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setShowsCancelButton:animated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="showsCancelButton" Type="System.Boolean" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="showsCancelButton">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Sets the display state of the cancel button, optionally animating the change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeginEditing">
      <MemberSignature Language="C#" Value="public UIKit.UISearchBarPredicate ShouldBeginEditing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UISearchBarPredicate ShouldBeginEditing" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ShouldBeginEditing" />
      <MemberSignature Language="F#" Value="member this.ShouldBeginEditing : UIKit.UISearchBarPredicate with get, set" Usage="UIKit.UISearchBar.ShouldBeginEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBarPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldChangeTextInRange">
      <MemberSignature Language="C#" Value="public UIKit.UISearchBarRangeEventArgs ShouldChangeTextInRange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UISearchBarRangeEventArgs ShouldChangeTextInRange" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ShouldChangeTextInRange" />
      <MemberSignature Language="F#" Value="member this.ShouldChangeTextInRange : UIKit.UISearchBarRangeEventArgs with get, set" Usage="UIKit.UISearchBar.ShouldChangeTextInRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBarRangeEventArgs</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldEndEditing">
      <MemberSignature Language="C#" Value="public UIKit.UISearchBarPredicate ShouldEndEditing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UISearchBarPredicate ShouldEndEditing" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ShouldEndEditing" />
      <MemberSignature Language="F#" Value="member this.ShouldEndEditing : UIKit.UISearchBarPredicate with get, set" Usage="UIKit.UISearchBar.ShouldEndEditing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBarPredicate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsBookmarkButton">
      <MemberSignature Language="C#" Value="public virtual bool ShowsBookmarkButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsBookmarkButton" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ShowsBookmarkButton" />
      <MemberSignature Language="F#" Value="member this.ShowsBookmarkButton : bool with get, set" Usage="UIKit.UISearchBar.ShowsBookmarkButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsBookmarkButton")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsBookmarkButton:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the bookmark button is displayed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsCancelButton">
      <MemberSignature Language="C#" Value="public virtual bool ShowsCancelButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsCancelButton" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ShowsCancelButton" />
      <MemberSignature Language="F#" Value="member this.ShowsCancelButton : bool with get, set" Usage="UIKit.UISearchBar.ShowsCancelButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsCancelButton")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsCancelButton:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the cancel button is displayed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsScopeBar">
      <MemberSignature Language="C#" Value="public virtual bool ShowsScopeBar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsScopeBar" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ShowsScopeBar" />
      <MemberSignature Language="F#" Value="member this.ShowsScopeBar : bool with get, set" Usage="UIKit.UISearchBar.ShowsScopeBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsScopeBar")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsScopeBar:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the scope bar is displayed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsSearchResultsButton">
      <MemberSignature Language="C#" Value="public virtual bool ShowsSearchResultsButton { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsSearchResultsButton" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.ShowsSearchResultsButton" />
      <MemberSignature Language="F#" Value="member this.ShowsSearchResultsButton : bool with get, set" Usage="UIKit.UISearchBar.ShowsSearchResultsButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("showsSearchResultsButton")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShowsSearchResultsButton:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the search results button is displayed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartDashesType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextSmartDashesType SmartDashesType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UITextSmartDashesType SmartDashesType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.SmartDashesType" />
      <MemberSignature Language="F#" Value="member this.SmartDashesType : UIKit.UITextSmartDashesType with get, set" Usage="UIKit.UISearchBar.SmartDashesType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("smartDashesType", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSmartDashesType:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextSmartDashesType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the style for smart dashes.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartInsertDeleteType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextSmartInsertDeleteType SmartInsertDeleteType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UITextSmartInsertDeleteType SmartInsertDeleteType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.SmartInsertDeleteType" />
      <MemberSignature Language="F#" Value="member this.SmartInsertDeleteType : UIKit.UITextSmartInsertDeleteType with get, set" Usage="UIKit.UISearchBar.SmartInsertDeleteType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("smartInsertDeleteType", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSmartInsertDeleteType:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextSmartInsertDeleteType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the strategy for smart insertions and deletions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SmartQuotesType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextSmartQuotesType SmartQuotesType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UITextSmartQuotesType SmartQuotesType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.SmartQuotesType" />
      <MemberSignature Language="F#" Value="member this.SmartQuotesType : UIKit.UITextSmartQuotesType with get, set" Usage="UIKit.UISearchBar.SmartQuotesType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("smartQuotesType", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSmartQuotesType:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextSmartQuotesType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the strategy for smart quotes.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpellCheckingType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextSpellCheckingType SpellCheckingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UITextSpellCheckingType SpellCheckingType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.SpellCheckingType" />
      <MemberSignature Language="F#" Value="member this.SpellCheckingType : UIKit.UITextSpellCheckingType with get, set" Usage="UIKit.UISearchBar.SpellCheckingType" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUITextInputTraits.SpellCheckingType</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("spellCheckingType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSpellCheckingType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextSpellCheckingType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:UIKit.UITextSpellCheckingType" /> used on this <see cref="T:UIKit.UISearchBar" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public virtual string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.Text" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="UIKit.UISearchBar.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("text", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setText:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current or starting search text.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;UIKit.UISearchBarTextChangedEventArgs&gt; TextChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class UIKit.UISearchBarTextChangedEventArgs&gt; TextChanged" />
      <MemberSignature Language="DocId" Value="E:UIKit.UISearchBar.TextChanged" />
      <MemberSignature Language="F#" Value="member this.TextChanged : EventHandler&lt;UIKit.UISearchBarTextChangedEventArgs&gt; " Usage="member this.TextChanged : System.EventHandler&lt;UIKit.UISearchBarTextChangedEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;UIKit.UISearchBarTextChangedEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContentType">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSString TextContentType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSString TextContentType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.TextContentType" />
      <MemberSignature Language="F#" Value="member this.TextContentType : Foundation.NSString with get, set" Usage="UIKit.UISearchBar.TextContentType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("textContentType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTextContentType:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A hint of the type of data the field should contain (must be value from <see cref="T:UIKit.UITextContentType" />).</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Translucent">
      <MemberSignature Language="C#" Value="public virtual bool Translucent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Translucent" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.Translucent" />
      <MemberSignature Language="F#" Value="member this.Translucent : bool with get, set" Usage="UIKit.UISearchBar.Translucent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isTranslucent")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTranslucent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>True if the search bar is translucent.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchBar.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="UIKit.UISearchBar.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
