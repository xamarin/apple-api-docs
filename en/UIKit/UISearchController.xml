<Type Name="UISearchController" FullName="UIKit.UISearchController">
  <TypeSignature Language="C#" Value="public class UISearchController : UIKit.UIViewController, IDisposable, UIKit.IUIViewControllerAnimatedTransitioning, UIKit.IUIViewControllerTransitioningDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UISearchController extends UIKit.UIViewController implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIViewControllerAnimatedTransitioning, class UIKit.IUIViewControllerTransitioningDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UISearchController" />
  <TypeSignature Language="F#" Value="type UISearchController = class&#xA;    inherit UIViewController&#xA;    interface IUIViewControllerAnimatedTransitioning&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUIViewControllerTransitioningDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIViewController</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIViewControllerAnimatedTransitioning</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIViewControllerTransitioningDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UISearchController", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:UIKit.UIViewController" /> that manages the user experience of a search bar (<see cref="T:UIKit.UISearchBar" />) and associated results (see <see cref="T:UIKit.UISearchResultsUpdating" />).</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISearchController/index.html">Apple documentation for <c>UISearchController</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISearchController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISearchController (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UISearchController : Foundation.NSCoder -&gt; UIKit.UISearchController" Usage="new UIKit.UISearchController coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UISearchController (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UISearchController : Foundation.NSObjectFlag -&gt; UIKit.UISearchController" Usage="new UIKit.UISearchController t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UISearchController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UISearchController : nativeint -&gt; UIKit.UISearchController" Usage="new UIKit.UISearchController handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISearchController (UIKit.UIViewController searchResultsController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.UIViewController searchResultsController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.#ctor(UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="new UIKit.UISearchController : UIKit.UIViewController -&gt; UIKit.UISearchController" Usage="new UIKit.UISearchController searchResultsController" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithSearchResultsController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="searchResultsController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="searchResultsController">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a search controller by using a <see cref="T:UIKit.UIViewController" /> that manages the results of searches.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISearchController (string nibName, Foundation.NSBundle bundle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string nibName, class Foundation.NSBundle bundle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.#ctor(System.String,Foundation.NSBundle)" />
      <MemberSignature Language="F#" Value="new UIKit.UISearchController : string * Foundation.NSBundle -&gt; UIKit.UISearchController" Usage="new UIKit.UISearchController (nibName, bundle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithNibName:bundle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nibName" Type="System.String" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
      </Parameters>
      <Docs>
        <param name="nibName">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="bundle">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new search controller from the named NIB in the specified <paramref name="bundle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="public virtual bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.Active" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="UIKit.UISearchController.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isActive")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setActive:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether to display the search interface by default. The default is <see langword="true" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimateTransition">
      <MemberSignature Language="C#" Value="public virtual void AnimateTransition (UIKit.IUIViewControllerContextTransitioning transitionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AnimateTransition(class UIKit.IUIViewControllerContextTransitioning transitionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.AnimateTransition(UIKit.IUIViewControllerContextTransitioning)" />
      <MemberSignature Language="F#" Value="abstract member AnimateTransition : UIKit.IUIViewControllerContextTransitioning -&gt; unit&#xA;override this.AnimateTransition : UIKit.IUIViewControllerContextTransitioning -&gt; unit" Usage="uISearchController.AnimateTransition transitionContext" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIViewControllerAnimatedTransitioning.AnimateTransition(UIKit.IUIViewControllerContextTransitioning)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("animateTransition:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionContext" Type="UIKit.IUIViewControllerContextTransitioning" />
      </Parameters>
      <Docs>
        <param name="transitionContext">To be added.</param>
        <summary>Causes the animator object to perform transition animations.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimationEnded">
      <MemberSignature Language="C#" Value="public virtual void AnimationEnded (bool transitionCompleted);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AnimationEnded(bool transitionCompleted) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.AnimationEnded(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member AnimationEnded : bool -&gt; unit&#xA;override this.AnimationEnded : bool -&gt; unit" Usage="uISearchController.AnimationEnded transitionCompleted" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("animationEnded:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionCompleted" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="transitionCompleted">To be added.</param>
        <summary>Informs the animator object whether transition animations finished successfully.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UISearchController.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public UIKit.IUISearchControllerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUISearchControllerDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UIKit.IUISearchControllerDelegate with get, set" Usage="UIKit.UISearchController.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUISearchControllerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UIKit.IUISearchControllerDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UIKit.IUISearchControllerDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DimsBackgroundDuringPresentation">
      <MemberSignature Language="C#" Value="public virtual bool DimsBackgroundDuringPresentation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DimsBackgroundDuringPresentation" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.DimsBackgroundDuringPresentation" />
      <MemberSignature Language="F#" Value="member this.DimsBackgroundDuringPresentation : bool with get, set" Usage="UIKit.UISearchController.DimsBackgroundDuringPresentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("dimsBackgroundDuringPresentation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDimsBackgroundDuringPresentation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether to dim contents during a search. The default is <see langword="true" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="uISearchController.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UISearchController object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UISearchController class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UISearchController ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationControllerForDismissedController">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIViewControllerAnimatedTransitioning GetAnimationControllerForDismissedController (UIKit.UIViewController dismissed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.IUIViewControllerAnimatedTransitioning GetAnimationControllerForDismissedController(class UIKit.UIViewController dismissed) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.GetAnimationControllerForDismissedController(UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationControllerForDismissedController : UIKit.UIViewController -&gt; UIKit.IUIViewControllerAnimatedTransitioning&#xA;override this.GetAnimationControllerForDismissedController : UIKit.UIViewController -&gt; UIKit.IUIViewControllerAnimatedTransitioning" Usage="uISearchController.GetAnimationControllerForDismissedController dismissed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("animationControllerForDismissedController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIViewControllerAnimatedTransitioning</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dismissed" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="dismissed">To be added.</param>
        <summary>Gets the transition animation object to use when the app dismisses this controller.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationControllerForPresentedController">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIViewControllerAnimatedTransitioning GetAnimationControllerForPresentedController (UIKit.UIViewController presented, UIKit.UIViewController presenting, UIKit.UIViewController source);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.IUIViewControllerAnimatedTransitioning GetAnimationControllerForPresentedController(class UIKit.UIViewController presented, class UIKit.UIViewController presenting, class UIKit.UIViewController source) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.GetAnimationControllerForPresentedController(UIKit.UIViewController,UIKit.UIViewController,UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationControllerForPresentedController : UIKit.UIViewController * UIKit.UIViewController * UIKit.UIViewController -&gt; UIKit.IUIViewControllerAnimatedTransitioning&#xA;override this.GetAnimationControllerForPresentedController : UIKit.UIViewController * UIKit.UIViewController * UIKit.UIViewController -&gt; UIKit.IUIViewControllerAnimatedTransitioning" Usage="uISearchController.GetAnimationControllerForPresentedController (presented, presenting, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("animationControllerForPresentedController:presentingController:sourceController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIViewControllerAnimatedTransitioning</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presented" Type="UIKit.UIViewController" />
        <Parameter Name="presenting" Type="UIKit.UIViewController" />
        <Parameter Name="source" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="presented">To be added.</param>
        <param name="presenting">To be added.</param>
        <param name="source">To be added.</param>
        <summary>Returns the transition animator to use when the <paramref name="presenting" /> view controller presents the <paramref name="presented" /> view controller in response to a request that was made to the <paramref name="source" /> view controller.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInteractionControllerForDismissal">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIViewControllerInteractiveTransitioning GetInteractionControllerForDismissal (UIKit.IUIViewControllerAnimatedTransitioning animator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.IUIViewControllerInteractiveTransitioning GetInteractionControllerForDismissal(class UIKit.IUIViewControllerAnimatedTransitioning animator) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.GetInteractionControllerForDismissal(UIKit.IUIViewControllerAnimatedTransitioning)" />
      <MemberSignature Language="F#" Value="abstract member GetInteractionControllerForDismissal : UIKit.IUIViewControllerAnimatedTransitioning -&gt; UIKit.IUIViewControllerInteractiveTransitioning&#xA;override this.GetInteractionControllerForDismissal : UIKit.IUIViewControllerAnimatedTransitioning -&gt; UIKit.IUIViewControllerInteractiveTransitioning" Usage="uISearchController.GetInteractionControllerForDismissal animator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("interactionControllerForDismissal:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIViewControllerInteractiveTransitioning</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animator" Type="UIKit.IUIViewControllerAnimatedTransitioning" />
      </Parameters>
      <Docs>
        <param name="animator">To be added.</param>
        <summary>Gets the interactive animator object to use when the app dismisses this controller.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInteractionControllerForPresentation">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIViewControllerInteractiveTransitioning GetInteractionControllerForPresentation (UIKit.IUIViewControllerAnimatedTransitioning animator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.IUIViewControllerInteractiveTransitioning GetInteractionControllerForPresentation(class UIKit.IUIViewControllerAnimatedTransitioning animator) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.GetInteractionControllerForPresentation(UIKit.IUIViewControllerAnimatedTransitioning)" />
      <MemberSignature Language="F#" Value="abstract member GetInteractionControllerForPresentation : UIKit.IUIViewControllerAnimatedTransitioning -&gt; UIKit.IUIViewControllerInteractiveTransitioning&#xA;override this.GetInteractionControllerForPresentation : UIKit.IUIViewControllerAnimatedTransitioning -&gt; UIKit.IUIViewControllerInteractiveTransitioning" Usage="uISearchController.GetInteractionControllerForPresentation animator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("interactionControllerForPresentation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIViewControllerInteractiveTransitioning</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animator" Type="UIKit.IUIViewControllerAnimatedTransitioning" />
      </Parameters>
      <Docs>
        <param name="animator">To be added.</param>
        <summary>Gets the interactive animator object to use when the app presents this controller.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterruptibleAnimator">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIViewImplicitlyAnimating GetInterruptibleAnimator (UIKit.IUIViewControllerContextTransitioning transitionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.IUIViewImplicitlyAnimating GetInterruptibleAnimator(class UIKit.IUIViewControllerContextTransitioning transitionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.GetInterruptibleAnimator(UIKit.IUIViewControllerContextTransitioning)" />
      <MemberSignature Language="F#" Value="abstract member GetInterruptibleAnimator : UIKit.IUIViewControllerContextTransitioning -&gt; UIKit.IUIViewImplicitlyAnimating&#xA;override this.GetInterruptibleAnimator : UIKit.IUIViewControllerContextTransitioning -&gt; UIKit.IUIViewImplicitlyAnimating" Usage="uISearchController.GetInterruptibleAnimator transitionContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("interruptibleAnimatorForTransition:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIViewImplicitlyAnimating</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionContext" Type="UIKit.IUIViewControllerContextTransitioning" />
      </Parameters>
      <Docs>
        <param name="transitionContext">To be added.</param>
        <summary>Gets the <see cref="T:UIKit.IUIViewImplicitlyAnimating" /> animator to use during the transition associated with <param name="transitionContext" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPresentationControllerForPresentedViewController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIPresentationController GetPresentationControllerForPresentedViewController (UIKit.UIViewController presentedViewController, UIKit.UIViewController presentingViewController, UIKit.UIViewController sourceViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIPresentationController GetPresentationControllerForPresentedViewController(class UIKit.UIViewController presentedViewController, class UIKit.UIViewController presentingViewController, class UIKit.UIViewController sourceViewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.GetPresentationControllerForPresentedViewController(UIKit.UIViewController,UIKit.UIViewController,UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="abstract member GetPresentationControllerForPresentedViewController : UIKit.UIViewController * UIKit.UIViewController * UIKit.UIViewController -&gt; UIKit.UIPresentationController&#xA;override this.GetPresentationControllerForPresentedViewController : UIKit.UIViewController * UIKit.UIViewController * UIKit.UIViewController -&gt; UIKit.UIPresentationController" Usage="uISearchController.GetPresentationControllerForPresentedViewController (presentedViewController, presentingViewController, sourceViewController)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentationControllerForPresentedViewController:presentingViewController:sourceViewController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIPresentationController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presentedViewController" Type="UIKit.UIViewController" />
        <Parameter Name="presentingViewController" Type="UIKit.UIViewController" />
        <Parameter Name="sourceViewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="presentedViewController">To be added.</param>
        <param name="presentingViewController">To be added.</param>
        <param name="sourceViewController">To be added.</param>
        <summary>Gets the presentation controller to use to manage the view hierarchy when the app presents this controller.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HidesNavigationBarDuringPresentation">
      <MemberSignature Language="C#" Value="public virtual bool HidesNavigationBarDuringPresentation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidesNavigationBarDuringPresentation" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.HidesNavigationBarDuringPresentation" />
      <MemberSignature Language="F#" Value="member this.HidesNavigationBarDuringPresentation : bool with get, set" Usage="UIKit.UISearchController.HidesNavigationBarDuringPresentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("hidesNavigationBarDuringPresentation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setHidesNavigationBarDuringPresentation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether to hide the navigation bar while searching. The default is <see langword="true" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObscuresBackgroundDuringPresentation">
      <MemberSignature Language="C#" Value="public virtual bool ObscuresBackgroundDuringPresentation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ObscuresBackgroundDuringPresentation" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.ObscuresBackgroundDuringPresentation" />
      <MemberSignature Language="F#" Value="member this.ObscuresBackgroundDuringPresentation : bool with get, set" Usage="UIKit.UISearchController.ObscuresBackgroundDuringPresentation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("obscuresBackgroundDuringPresentation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setObscuresBackgroundDuringPresentation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that controls whether the controller obscures content while performing a search.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchBar">
      <MemberSignature Language="C#" Value="public virtual UIKit.UISearchBar SearchBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UISearchBar SearchBar" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.SearchBar" />
      <MemberSignature Language="F#" Value="member this.SearchBar : UIKit.UISearchBar" Usage="UIKit.UISearchController.SearchBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("searchBar")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("searchBar", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UISearchBar</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the search bar object used by this <see cref="T:UIKit.UISearchController" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchResultsController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController SearchResultsController { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIViewController SearchResultsController" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.SearchResultsController" />
      <MemberSignature Language="F#" Value="member this.SearchResultsController : UIKit.UIViewController" Usage="UIKit.UISearchController.SearchResultsController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("searchResultsController")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("searchResultsController", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIViewController" /> that manages search results.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SearchResultsUpdater">
      <MemberSignature Language="C#" Value="public UIKit.IUISearchResultsUpdating SearchResultsUpdater { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUISearchResultsUpdating SearchResultsUpdater" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.SearchResultsUpdater" />
      <MemberSignature Language="F#" Value="member this.SearchResultsUpdater : UIKit.IUISearchResultsUpdating with get, set" Usage="UIKit.UISearchController.SearchResultsUpdater" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUISearchResultsUpdating</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:UIKit.UISearchResultsUpdating" /> object that updates the contents of the <see cref="T:UIKit.UIViewController" />.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSearchResultsUpdater">
      <MemberSignature Language="C#" Value="public void SetSearchResultsUpdater (Action&lt;UIKit.UISearchController&gt; updateSearchResults);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSearchResultsUpdater(class System.Action`1&lt;class UIKit.UISearchController&gt; updateSearchResults) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.SetSearchResultsUpdater(System.Action{UIKit.UISearchController})" />
      <MemberSignature Language="F#" Value="member this.SetSearchResultsUpdater : Action&lt;UIKit.UISearchController&gt; -&gt; unit" Usage="uISearchController.SetSearchResultsUpdater updateSearchResults" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updateSearchResults" Type="System.Action&lt;UIKit.UISearchController&gt;" />
      </Parameters>
      <Docs>
        <param name="updateSearchResults">To be added.</param>
        <summary>Assigns the <paramref name="updateSearchResults" /> search controller to update the search results.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionDuration">
      <MemberSignature Language="C#" Value="public virtual double TransitionDuration (UIKit.IUIViewControllerContextTransitioning transitionContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance float64 TransitionDuration(class UIKit.IUIViewControllerContextTransitioning transitionContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISearchController.TransitionDuration(UIKit.IUIViewControllerContextTransitioning)" />
      <MemberSignature Language="F#" Value="abstract member TransitionDuration : UIKit.IUIViewControllerContextTransitioning -&gt; double&#xA;override this.TransitionDuration : UIKit.IUIViewControllerContextTransitioning -&gt; double" Usage="uISearchController.TransitionDuration transitionContext" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIViewControllerAnimatedTransitioning.TransitionDuration(UIKit.IUIViewControllerContextTransitioning)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("transitionDuration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="transitionContext" Type="UIKit.IUIViewControllerContextTransitioning" />
      </Parameters>
      <Docs>
        <param name="transitionContext">To be added.</param>
        <summary>Obtains the duration, in seconds, of the transition animation from the animator object.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="UIKit.UISearchController.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakSearchResultsUpdater">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakSearchResultsUpdater { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakSearchResultsUpdater" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISearchController.WeakSearchResultsUpdater" />
      <MemberSignature Language="F#" Value="member this.WeakSearchResultsUpdater : Foundation.NSObject with get, set" Usage="UIKit.UISearchController.WeakSearchResultsUpdater" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("searchResultsUpdater")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setSearchResultsUpdater:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("searchResultsUpdater", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSearchResultsUpdater:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the search controller that updates the search results.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
