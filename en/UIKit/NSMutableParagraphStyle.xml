<Type Name="NSMutableParagraphStyle" FullName="UIKit.NSMutableParagraphStyle">
  <TypeSignature Language="C#" Value="public class NSMutableParagraphStyle : UIKit.NSParagraphStyle" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSMutableParagraphStyle extends UIKit.NSParagraphStyle" />
  <TypeSignature Language="DocId" Value="T:UIKit.NSMutableParagraphStyle" />
  <TypeSignature Language="F#" Value="type NSMutableParagraphStyle = class&#xA;    inherit NSParagraphStyle" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.NSParagraphStyle</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSMutableParagraphStyle", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class that extends <see cref="T:UIKit.NSParagraphStyle" /> to allow changing subattributes.</summary>
    <remarks>
      <para>
      </para>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Cocoa/Reference/ApplicationKit/Classes/NSMutableParagraphStyle_Class/index.html">Apple documentation for <c>NSMutableParagraphStyle</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableParagraphStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSMutableParagraphStyle.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSMutableParagraphStyle (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSMutableParagraphStyle.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.NSMutableParagraphStyle : Foundation.NSCoder -&gt; UIKit.NSMutableParagraphStyle" Usage="new UIKit.NSMutableParagraphStyle coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSMutableParagraphStyle (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSMutableParagraphStyle.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.NSMutableParagraphStyle : Foundation.NSObjectFlag -&gt; UIKit.NSMutableParagraphStyle" Usage="new UIKit.NSMutableParagraphStyle t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSMutableParagraphStyle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSMutableParagraphStyle.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.NSMutableParagraphStyle : nativeint -&gt; UIKit.NSMutableParagraphStyle" Usage="new UIKit.NSMutableParagraphStyle handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTabStop">
      <MemberSignature Language="C#" Value="public virtual void AddTabStop (UIKit.NSTextTab textTab);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTabStop(class UIKit.NSTextTab textTab) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSMutableParagraphStyle.AddTabStop(UIKit.NSTextTab)" />
      <MemberSignature Language="F#" Value="abstract member AddTabStop : UIKit.NSTextTab -&gt; unit&#xA;override this.AddTabStop : UIKit.NSTextTab -&gt; unit" Usage="nSMutableParagraphStyle.AddTabStop textTab" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addTabStop:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textTab" Type="UIKit.NSTextTab" />
      </Parameters>
      <Docs>
        <param name="textTab">To be added.</param>
        <summary>Adds the specified <see cref="T:UIKit.NSTextTab" /> to the pargraph style.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Alignment">
      <MemberSignature Language="C#" Value="public override UIKit.UITextAlignment Alignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UITextAlignment Alignment" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.Alignment" />
      <MemberSignature Language="F#" Value="member this.Alignment : UIKit.UITextAlignment with get, set" Usage="UIKit.NSMutableParagraphStyle.Alignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("alignment")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAlignment:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Text alignment.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsDefaultTighteningForTruncation">
      <MemberSignature Language="C#" Value="public override bool AllowsDefaultTighteningForTruncation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsDefaultTighteningForTruncation" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.AllowsDefaultTighteningForTruncation" />
      <MemberSignature Language="F#" Value="member this.AllowsDefaultTighteningForTruncation : bool with get, set" Usage="UIKit.NSMutableParagraphStyle.AllowsDefaultTighteningForTruncation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("allowsDefaultTighteningForTruncation")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAllowsDefaultTighteningForTruncation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the system can try to tighten the text prior to truncating it.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseWritingDirection">
      <MemberSignature Language="C#" Value="public override Foundation.NSWritingDirection BaseWritingDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Foundation.NSWritingDirection BaseWritingDirection" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.BaseWritingDirection" />
      <MemberSignature Language="F#" Value="member this.BaseWritingDirection : Foundation.NSWritingDirection with get, set" Usage="UIKit.NSMutableParagraphStyle.BaseWritingDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("baseWritingDirection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBaseWritingDirection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSWritingDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The norml writing direction.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.NSMutableParagraphStyle.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultTabInterval">
      <MemberSignature Language="C#" Value="public override nfloat DefaultTabInterval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat DefaultTabInterval" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.DefaultTabInterval" />
      <MemberSignature Language="F#" Value="member this.DefaultTabInterval : nfloat with get, set" Usage="UIKit.NSMutableParagraphStyle.DefaultTabInterval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("defaultTabInterval")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDefaultTabInterval:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The value, in points, of tab intervals.</summary>
        <value>The default is 0.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstLineHeadIndent">
      <MemberSignature Language="C#" Value="public override nfloat FirstLineHeadIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat FirstLineHeadIndent" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.FirstLineHeadIndent" />
      <MemberSignature Language="F#" Value="member this.FirstLineHeadIndent : nfloat with get, set" Usage="UIKit.NSMutableParagraphStyle.FirstLineHeadIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("firstLineHeadIndent")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setFirstLineHeadIndent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The indentation of the paragraph's first line.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HeadIndent">
      <MemberSignature Language="C#" Value="public override nfloat HeadIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat HeadIndent" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.HeadIndent" />
      <MemberSignature Language="F#" Value="member this.HeadIndent : nfloat with get, set" Usage="UIKit.NSMutableParagraphStyle.HeadIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("headIndent")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setHeadIndent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The indentation of the paragraph's lines, other than the first. (See <see cref="P:UIKit.NSMutableParagraphStyle.FirstLineHeadIndent" />.)</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HyphenationFactor">
      <MemberSignature Language="C#" Value="public override float HyphenationFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 HyphenationFactor" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.HyphenationFactor" />
      <MemberSignature Language="F#" Value="member this.HyphenationFactor : single with get, set" Usage="UIKit.NSMutableParagraphStyle.HyphenationFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("hyphenationFactor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setHyphenationFactor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The paragraph's threshold for hyphenation.</summary>
        <value>Ranges from 0 to 1, indicating ratio of text width to the width of line fragment. Default is 0, indicating that the layout manager's hyphenation factor is used.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineBreakMode">
      <MemberSignature Language="C#" Value="public override UIKit.UILineBreakMode LineBreakMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UILineBreakMode LineBreakMode" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.LineBreakMode" />
      <MemberSignature Language="F#" Value="member this.LineBreakMode : UIKit.UILineBreakMode with get, set" Usage="UIKit.NSMutableParagraphStyle.LineBreakMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("lineBreakMode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setLineBreakMode:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UILineBreakMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:UIKit.UILineBreakMode" /> used by the paragraph.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineHeightMultiple">
      <MemberSignature Language="C#" Value="public override nfloat LineHeightMultiple { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat LineHeightMultiple" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.LineHeightMultiple" />
      <MemberSignature Language="F#" Value="member this.LineHeightMultiple : nfloat with get, set" Usage="UIKit.NSMutableParagraphStyle.LineHeightMultiple" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("lineHeightMultiple")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setLineHeightMultiple:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The natural line height of the paragraph is multiplied by this factor before constraint to minimum and maximum.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineSpacing">
      <MemberSignature Language="C#" Value="public override nfloat LineSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat LineSpacing" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.LineSpacing" />
      <MemberSignature Language="F#" Value="member this.LineSpacing : nfloat with get, set" Usage="UIKit.NSMutableParagraphStyle.LineSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("lineSpacing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setLineSpacing:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The distance, in points, between the bottom of one line fragment and the top of the next.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaximumLineHeight">
      <MemberSignature Language="C#" Value="public override nfloat MaximumLineHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat MaximumLineHeight" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.MaximumLineHeight" />
      <MemberSignature Language="F#" Value="member this.MaximumLineHeight : nfloat with get, set" Usage="UIKit.NSMutableParagraphStyle.MaximumLineHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("maximumLineHeight")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMaximumLineHeight:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The paragraph's maximum line height, in points.</summary>
        <value>The default of 0 indicates no limit.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MinimumLineHeight">
      <MemberSignature Language="C#" Value="public override nfloat MinimumLineHeight { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat MinimumLineHeight" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.MinimumLineHeight" />
      <MemberSignature Language="F#" Value="member this.MinimumLineHeight : nfloat with get, set" Usage="UIKit.NSMutableParagraphStyle.MinimumLineHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("minimumLineHeight")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMinimumLineHeight:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The minimum height, in points, of lines in the paragraph.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphSpacing">
      <MemberSignature Language="C#" Value="public override nfloat ParagraphSpacing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat ParagraphSpacing" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.ParagraphSpacing" />
      <MemberSignature Language="F#" Value="member this.ParagraphSpacing : nfloat with get, set" Usage="UIKit.NSMutableParagraphStyle.ParagraphSpacing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("paragraphSpacing")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setParagraphSpacing:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Distance, in points, after the paragraph.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ParagraphSpacingBefore">
      <MemberSignature Language="C#" Value="public override nfloat ParagraphSpacingBefore { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat ParagraphSpacingBefore" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.ParagraphSpacingBefore" />
      <MemberSignature Language="F#" Value="member this.ParagraphSpacingBefore : nfloat with get, set" Usage="UIKit.NSMutableParagraphStyle.ParagraphSpacingBefore" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("paragraphSpacingBefore")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setParagraphSpacingBefore:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Distance, in points, between a paragraph's top and its first line.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTabStop">
      <MemberSignature Language="C#" Value="public virtual void RemoveTabStop (UIKit.NSTextTab textTab);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTabStop(class UIKit.NSTextTab textTab) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSMutableParagraphStyle.RemoveTabStop(UIKit.NSTextTab)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTabStop : UIKit.NSTextTab -&gt; unit&#xA;override this.RemoveTabStop : UIKit.NSTextTab -&gt; unit" Usage="nSMutableParagraphStyle.RemoveTabStop textTab" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeTabStop:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textTab" Type="UIKit.NSTextTab" />
      </Parameters>
      <Docs>
        <param name="textTab">To be added.</param>
        <summary>Removes the tab stop <paramref name="textTab" />.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetParagraphStyle">
      <MemberSignature Language="C#" Value="public virtual void SetParagraphStyle (UIKit.NSParagraphStyle paragraphStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetParagraphStyle(class UIKit.NSParagraphStyle paragraphStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSMutableParagraphStyle.SetParagraphStyle(UIKit.NSParagraphStyle)" />
      <MemberSignature Language="F#" Value="abstract member SetParagraphStyle : UIKit.NSParagraphStyle -&gt; unit&#xA;override this.SetParagraphStyle : UIKit.NSParagraphStyle -&gt; unit" Usage="nSMutableParagraphStyle.SetParagraphStyle paragraphStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setParagraphStyle:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="paragraphStyle" Type="UIKit.NSParagraphStyle" />
      </Parameters>
      <Docs>
        <param name="paragraphStyle">To be added.</param>
        <summary>Replaces the existing style with <paramref name="paragraphStyle" />.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TabStops">
      <MemberSignature Language="C#" Value="public override UIKit.NSTextTab[] TabStops { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.NSTextTab[] TabStops" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.TabStops" />
      <MemberSignature Language="F#" Value="member this.TabStops : UIKit.NSTextTab[] with get, set" Usage="UIKit.NSMutableParagraphStyle.TabStops" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("tabStops", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTabStops:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSTextTab[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The paragraph's tab stops, sorted by location.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TailIndent">
      <MemberSignature Language="C#" Value="public override nfloat TailIndent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat TailIndent" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSMutableParagraphStyle.TailIndent" />
      <MemberSignature Language="F#" Value="member this.TailIndent : nfloat with get, set" Usage="UIKit.NSMutableParagraphStyle.TailIndent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("tailIndent")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTailIndent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The distance, in points, from the margin of a text container to the end of lines.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
