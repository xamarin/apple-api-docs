<Type Name="UIActionSheetDelegate" FullName="UIKit.UIActionSheetDelegate">
  <TypeSignature Language="C#" Value="public class UIActionSheetDelegate : Foundation.NSObject, IDisposable, UIKit.IUIActionSheetDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIActionSheetDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIActionSheetDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIActionSheetDelegate" />
  <TypeSignature Language="F#" Value="type UIActionSheetDelegate = class&#xA;    inherit NSObject&#xA;    interface IUIActionSheetDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIActionSheetDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIActionSheetDelegate", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class used to receive notifications from a <see cref="T:UIKit.UIActionSheet" />.</summary>
    <remarks>A strongly typed implementation of a class that can be used to respond to events raised by the <see cref="T:UIKit.UIActionSheet" />.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIModalViewDelegate_Protocol/index.html">Apple documentation for <c>UIActionSheetDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActionSheetDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheetDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIActionSheetDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheetDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheetDelegate : Foundation.NSObjectFlag -&gt; UIKit.UIActionSheetDelegate" Usage="new UIKit.UIActionSheetDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIActionSheetDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheetDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheetDelegate : nativeint -&gt; UIKit.UIActionSheetDelegate" Usage="new UIKit.UIActionSheetDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Canceled">
      <MemberSignature Language="C#" Value="public virtual void Canceled (UIKit.UIActionSheet actionSheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Canceled(class UIKit.UIActionSheet actionSheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheetDelegate.Canceled(UIKit.UIActionSheet)" />
      <MemberSignature Language="F#" Value="abstract member Canceled : UIKit.UIActionSheet -&gt; unit&#xA;override this.Canceled : UIKit.UIActionSheet -&gt; unit" Usage="uIActionSheetDelegate.Canceled actionSheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("actionSheetCancel:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSheet" Type="UIKit.UIActionSheet" />
      </Parameters>
      <Docs>
        <param name="actionSheet">To be added.</param>
        <summary>Indicates that the UIActionSheet was canceled.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clicked">
      <MemberSignature Language="C#" Value="public virtual void Clicked (UIKit.UIActionSheet actionSheet, nint buttonIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clicked(class UIKit.UIActionSheet actionSheet, valuetype System.nint buttonIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheetDelegate.Clicked(UIKit.UIActionSheet,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member Clicked : UIKit.UIActionSheet * nint -&gt; unit&#xA;override this.Clicked : UIKit.UIActionSheet * nint -&gt; unit" Usage="uIActionSheetDelegate.Clicked (actionSheet, buttonIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("actionSheet:clickedButtonAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSheet" Type="UIKit.UIActionSheet" />
        <Parameter Name="buttonIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="actionSheet">To be added.</param>
        <param name="buttonIndex">To be added.</param>
        <summary>Indicates that the button at the buttonIndex was clicked.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dismissed">
      <MemberSignature Language="C#" Value="public virtual void Dismissed (UIKit.UIActionSheet actionSheet, nint buttonIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dismissed(class UIKit.UIActionSheet actionSheet, valuetype System.nint buttonIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheetDelegate.Dismissed(UIKit.UIActionSheet,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member Dismissed : UIKit.UIActionSheet * nint -&gt; unit&#xA;override this.Dismissed : UIKit.UIActionSheet * nint -&gt; unit" Usage="uIActionSheetDelegate.Dismissed (actionSheet, buttonIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("actionSheet:didDismissWithButtonIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSheet" Type="UIKit.UIActionSheet" />
        <Parameter Name="buttonIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="actionSheet">To be added.</param>
        <param name="buttonIndex">To be added.</param>
        <summary>Indicates that the action was dismissed from the screen due to pushing of the button at buttonIndex.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Presented">
      <MemberSignature Language="C#" Value="public virtual void Presented (UIKit.UIActionSheet actionSheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Presented(class UIKit.UIActionSheet actionSheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheetDelegate.Presented(UIKit.UIActionSheet)" />
      <MemberSignature Language="F#" Value="abstract member Presented : UIKit.UIActionSheet -&gt; unit&#xA;override this.Presented : UIKit.UIActionSheet -&gt; unit" Usage="uIActionSheetDelegate.Presented actionSheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("didPresentActionSheet:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSheet" Type="UIKit.UIActionSheet" />
      </Parameters>
      <Docs>
        <param name="actionSheet">To be added.</param>
        <summary>Indicates that the action sheet was presented to the user.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDismiss">
      <MemberSignature Language="C#" Value="public virtual void WillDismiss (UIKit.UIActionSheet actionSheet, nint buttonIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDismiss(class UIKit.UIActionSheet actionSheet, valuetype System.nint buttonIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheetDelegate.WillDismiss(UIKit.UIActionSheet,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member WillDismiss : UIKit.UIActionSheet * nint -&gt; unit&#xA;override this.WillDismiss : UIKit.UIActionSheet * nint -&gt; unit" Usage="uIActionSheetDelegate.WillDismiss (actionSheet, buttonIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("actionSheet:willDismissWithButtonIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSheet" Type="UIKit.UIActionSheet" />
        <Parameter Name="buttonIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="actionSheet">To be added.</param>
        <param name="buttonIndex">To be added.</param>
        <summary>Indicates that the action sheet will shortly be dismissed due to pushing of the button at buttonIndex.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPresent">
      <MemberSignature Language="C#" Value="public virtual void WillPresent (UIKit.UIActionSheet actionSheet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillPresent(class UIKit.UIActionSheet actionSheet) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheetDelegate.WillPresent(UIKit.UIActionSheet)" />
      <MemberSignature Language="F#" Value="abstract member WillPresent : UIKit.UIActionSheet -&gt; unit&#xA;override this.WillPresent : UIKit.UIActionSheet -&gt; unit" Usage="uIActionSheetDelegate.WillPresent actionSheet" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("willPresentActionSheet:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionSheet" Type="UIKit.UIActionSheet" />
      </Parameters>
      <Docs>
        <param name="actionSheet">To be added.</param>
        <summary>Indicates that the action sheet is about to be presented.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
