<Type Name="UITabBarControllerDelegate" FullName="UIKit.UITabBarControllerDelegate">
  <TypeSignature Language="C#" Value="public class UITabBarControllerDelegate : Foundation.NSObject, IDisposable, UIKit.IUITabBarControllerDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UITabBarControllerDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUITabBarControllerDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UITabBarControllerDelegate" />
  <TypeSignature Language="F#" Value="type UITabBarControllerDelegate = class&#xA;    inherit NSObject&#xA;    interface IUITabBarControllerDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUITabBarControllerDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("UITabBarControllerDelegate", false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A class used to receive notifications from a UITabBarController.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITabBarControllerDelegate_Protocol/index.html">Apple documentation for <c>UITabBarControllerDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITabBarControllerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITabBarControllerDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UITabBarControllerDelegate : Foundation.NSObjectFlag -&gt; UIKit.UITabBarControllerDelegate" Usage="new UIKit.UITabBarControllerDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UITabBarControllerDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UITabBarControllerDelegate : nativeint -&gt; UIKit.UITabBarControllerDelegate" Usage="new UIKit.UITabBarControllerDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishedCustomizingViewControllers">
      <MemberSignature Language="C#" Value="public virtual void FinishedCustomizingViewControllers (UIKit.UITabBarController tabBarController, UIKit.UIViewController[] viewControllers, bool changed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishedCustomizingViewControllers(class UIKit.UITabBarController tabBarController, class UIKit.UIViewController[] viewControllers, bool changed) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.FinishedCustomizingViewControllers(UIKit.UITabBarController,UIKit.UIViewController[],System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member FinishedCustomizingViewControllers : UIKit.UITabBarController * UIKit.UIViewController[] * bool -&gt; unit&#xA;override this.FinishedCustomizingViewControllers : UIKit.UITabBarController * UIKit.UIViewController[] * bool -&gt; unit" Usage="uITabBarControllerDelegate.FinishedCustomizingViewControllers (tabBarController, viewControllers, changed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tabBarController:didEndCustomizingViewControllers:changed:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tabBarController" Type="UIKit.UITabBarController" />
        <Parameter Name="viewControllers" Type="UIKit.UIViewController[]" />
        <Parameter Name="changed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tabBarController">To be added.</param>
        <param name="viewControllers">To be added.</param>
        <param name="changed">To be added.</param>
        <summary>Indicates that the customization sheet was dismissed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAnimationControllerForTransition">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIViewControllerAnimatedTransitioning GetAnimationControllerForTransition (UIKit.UITabBarController tabBarController, UIKit.UIViewController fromViewController, UIKit.UIViewController toViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.IUIViewControllerAnimatedTransitioning GetAnimationControllerForTransition(class UIKit.UITabBarController tabBarController, class UIKit.UIViewController fromViewController, class UIKit.UIViewController toViewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.GetAnimationControllerForTransition(UIKit.UITabBarController,UIKit.UIViewController,UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="abstract member GetAnimationControllerForTransition : UIKit.UITabBarController * UIKit.UIViewController * UIKit.UIViewController -&gt; UIKit.IUIViewControllerAnimatedTransitioning&#xA;override this.GetAnimationControllerForTransition : UIKit.UITabBarController * UIKit.UIViewController * UIKit.UIViewController -&gt; UIKit.IUIViewControllerAnimatedTransitioning" Usage="uITabBarControllerDelegate.GetAnimationControllerForTransition (tabBarController, fromViewController, toViewController)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tabBarController:animationControllerForTransitionFromViewController:toViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIViewControllerAnimatedTransitioning</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tabBarController" Type="UIKit.UITabBarController" />
        <Parameter Name="fromViewController" Type="UIKit.UIViewController" />
        <Parameter Name="toViewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="tabBarController">To be added.</param>
        <param name="fromViewController">To be added.</param>
        <param name="toViewController">To be added.</param>
        <summary>Retrieves the UIViewControllerAnimatedTransitioning used during a non-interactive transition.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInteractionControllerForAnimationController">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIViewControllerInteractiveTransitioning GetInteractionControllerForAnimationController (UIKit.UITabBarController tabBarController, UIKit.IUIViewControllerAnimatedTransitioning animationController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.IUIViewControllerInteractiveTransitioning GetInteractionControllerForAnimationController(class UIKit.UITabBarController tabBarController, class UIKit.IUIViewControllerAnimatedTransitioning animationController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.GetInteractionControllerForAnimationController(UIKit.UITabBarController,UIKit.IUIViewControllerAnimatedTransitioning)" />
      <MemberSignature Language="F#" Value="abstract member GetInteractionControllerForAnimationController : UIKit.UITabBarController * UIKit.IUIViewControllerAnimatedTransitioning -&gt; UIKit.IUIViewControllerInteractiveTransitioning&#xA;override this.GetInteractionControllerForAnimationController : UIKit.UITabBarController * UIKit.IUIViewControllerAnimatedTransitioning -&gt; UIKit.IUIViewControllerInteractiveTransitioning" Usage="uITabBarControllerDelegate.GetInteractionControllerForAnimationController (tabBarController, animationController)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tabBarController:interactionControllerForAnimationController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIViewControllerInteractiveTransitioning</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tabBarController" Type="UIKit.UITabBarController" />
        <Parameter Name="animationController" Type="UIKit.IUIViewControllerAnimatedTransitioning" />
      </Parameters>
      <Docs>
        <param name="tabBarController">To be added.</param>
        <param name="animationController">To be added.</param>
        <summary>Retrieves the UIViewControllerInteractiveTransitioning used during an interactive transition.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredInterfaceOrientation">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIInterfaceOrientation GetPreferredInterfaceOrientation (UIKit.UITabBarController tabBarController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UIInterfaceOrientation GetPreferredInterfaceOrientation(class UIKit.UITabBarController tabBarController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.GetPreferredInterfaceOrientation(UIKit.UITabBarController)" />
      <MemberSignature Language="F#" Value="abstract member GetPreferredInterfaceOrientation : UIKit.UITabBarController -&gt; UIKit.UIInterfaceOrientation&#xA;override this.GetPreferredInterfaceOrientation : UIKit.UITabBarController -&gt; UIKit.UIInterfaceOrientation" Usage="uITabBarControllerDelegate.GetPreferredInterfaceOrientation tabBarController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tabBarControllerPreferredInterfaceOrientationForPresentation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIInterfaceOrientation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tabBarController" Type="UIKit.UITabBarController" />
      </Parameters>
      <Docs>
        <param name="tabBarController">To be added.</param>
        <summary>The preferred orientation for presentation of the tab bar controller.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCustomizingViewControllers">
      <MemberSignature Language="C#" Value="public virtual void OnCustomizingViewControllers (UIKit.UITabBarController tabBarController, UIKit.UIViewController[] viewControllers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnCustomizingViewControllers(class UIKit.UITabBarController tabBarController, class UIKit.UIViewController[] viewControllers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.OnCustomizingViewControllers(UIKit.UITabBarController,UIKit.UIViewController[])" />
      <MemberSignature Language="F#" Value="abstract member OnCustomizingViewControllers : UIKit.UITabBarController * UIKit.UIViewController[] -&gt; unit&#xA;override this.OnCustomizingViewControllers : UIKit.UITabBarController * UIKit.UIViewController[] -&gt; unit" Usage="uITabBarControllerDelegate.OnCustomizingViewControllers (tabBarController, viewControllers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tabBarController:willBeginCustomizingViewControllers:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tabBarController" Type="UIKit.UITabBarController" />
        <Parameter Name="viewControllers" Type="UIKit.UIViewController[]" />
      </Parameters>
      <Docs>
        <param name="tabBarController">To be added.</param>
        <param name="viewControllers">To be added.</param>
        <summary>Indicates that the tab bar customization sheet is about to be displayed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnEndCustomizingViewControllers">
      <MemberSignature Language="C#" Value="public virtual void OnEndCustomizingViewControllers (UIKit.UITabBarController tabBarController, UIKit.UIViewController[] viewControllers, bool changed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnEndCustomizingViewControllers(class UIKit.UITabBarController tabBarController, class UIKit.UIViewController[] viewControllers, bool changed) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.OnEndCustomizingViewControllers(UIKit.UITabBarController,UIKit.UIViewController[],System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member OnEndCustomizingViewControllers : UIKit.UITabBarController * UIKit.UIViewController[] * bool -&gt; unit&#xA;override this.OnEndCustomizingViewControllers : UIKit.UITabBarController * UIKit.UIViewController[] * bool -&gt; unit" Usage="uITabBarControllerDelegate.OnEndCustomizingViewControllers (tabBarController, viewControllers, changed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tabBarController:willEndCustomizingViewControllers:changed:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tabBarController" Type="UIKit.UITabBarController" />
        <Parameter Name="viewControllers" Type="UIKit.UIViewController[]" />
        <Parameter Name="changed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="tabBarController">To be added.</param>
        <param name="viewControllers">To be added.</param>
        <param name="changed">To be added.</param>
        <summary>Indicates that the tab bar customization sheet is about to be dismissed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSelectViewController">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSelectViewController (UIKit.UITabBarController tabBarController, UIKit.UIViewController viewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSelectViewController(class UIKit.UITabBarController tabBarController, class UIKit.UIViewController viewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.ShouldSelectViewController(UIKit.UITabBarController,UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="abstract member ShouldSelectViewController : UIKit.UITabBarController * UIKit.UIViewController -&gt; bool&#xA;override this.ShouldSelectViewController : UIKit.UITabBarController * UIKit.UIViewController -&gt; bool" Usage="uITabBarControllerDelegate.ShouldSelectViewController (tabBarController, viewController)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tabBarController:shouldSelectViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tabBarController" Type="UIKit.UITabBarController" />
        <Parameter Name="viewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="tabBarController">To be added.</param>
        <param name="viewController">To be added.</param>
        <summary>Whether the specified UIViewController should be made active.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportedInterfaceOrientations">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIInterfaceOrientationMask SupportedInterfaceOrientations (UIKit.UITabBarController tabBarController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UIInterfaceOrientationMask SupportedInterfaceOrientations(class UIKit.UITabBarController tabBarController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.SupportedInterfaceOrientations(UIKit.UITabBarController)" />
      <MemberSignature Language="F#" Value="abstract member SupportedInterfaceOrientations : UIKit.UITabBarController -&gt; UIKit.UIInterfaceOrientationMask&#xA;override this.SupportedInterfaceOrientations : UIKit.UITabBarController -&gt; UIKit.UIInterfaceOrientationMask" Usage="uITabBarControllerDelegate.SupportedInterfaceOrientations tabBarController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tabBarControllerSupportedInterfaceOrientations:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIInterfaceOrientationMask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tabBarController" Type="UIKit.UITabBarController" />
      </Parameters>
      <Docs>
        <param name="tabBarController">To be added.</param>
        <summary>The supported orientations for presentation of the tab bar controller.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewControllerSelected">
      <MemberSignature Language="C#" Value="public virtual void ViewControllerSelected (UIKit.UITabBarController tabBarController, UIKit.UIViewController viewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ViewControllerSelected(class UIKit.UITabBarController tabBarController, class UIKit.UIViewController viewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITabBarControllerDelegate.ViewControllerSelected(UIKit.UITabBarController,UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="abstract member ViewControllerSelected : UIKit.UITabBarController * UIKit.UIViewController -&gt; unit&#xA;override this.ViewControllerSelected : UIKit.UITabBarController * UIKit.UIViewController -&gt; unit" Usage="uITabBarControllerDelegate.ViewControllerSelected (tabBarController, viewController)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tabBarController:didSelectViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tabBarController" Type="UIKit.UITabBarController" />
        <Parameter Name="viewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="tabBarController">To be added.</param>
        <param name="viewController">To be added.</param>
        <summary>Indicates that the app user selected an item from the tab bar.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
