<Type Name="UIAttachmentBehavior" FullName="UIKit.UIAttachmentBehavior">
  <TypeSignature Language="C#" Value="public class UIAttachmentBehavior : UIKit.UIDynamicBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIAttachmentBehavior extends UIKit.UIDynamicBehavior" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIAttachmentBehavior" />
  <TypeSignature Language="F#" Value="type UIAttachmentBehavior = class&#xA;    inherit UIDynamicBehavior" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIDynamicBehavior</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIAttachmentBehavior", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies a <see cref="T:UIKit.IUIDynamicItem" />'s attachment to a reference point or to another <see cref="T:UIKit.IUIDynamicItem" />.</summary>
    <remarks>
      <para>The <see cref="P:UIKit.UIAttachmentBehavior.AnchorPoint" /> can be moved after creation.</para>
      <para>Application developers can specify a spring-based attachment using the <see cref="P:UIKit.UIAttachmentBehavior.Frequency" /> and <see cref="P:UIKit.UIAttachmentBehavior.Damping" /> properties. </para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAttachmentBehavior_Class/index.html">Apple documentation for <c>UIAttachmentBehavior</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIAttachmentBehavior (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIAttachmentBehavior : Foundation.NSObjectFlag -&gt; UIKit.UIAttachmentBehavior" Usage="new UIKit.UIAttachmentBehavior t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIAttachmentBehavior (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIAttachmentBehavior : nativeint -&gt; UIKit.UIAttachmentBehavior" Usage="new UIKit.UIAttachmentBehavior handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIAttachmentBehavior (UIKit.IUIDynamicItem item, CoreGraphics.CGPoint anchorPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.IUIDynamicItem item, valuetype CoreGraphics.CGPoint anchorPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.#ctor(UIKit.IUIDynamicItem,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="new UIKit.UIAttachmentBehavior : UIKit.IUIDynamicItem * CoreGraphics.CGPoint -&gt; UIKit.UIAttachmentBehavior" Usage="new UIKit.UIAttachmentBehavior (item, anchorPoint)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithItem:attachedToAnchor:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="item" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="anchorPoint" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="item">Dynamic item to which an attachment behavior is being applied.</param>
        <param name="anchorPoint">Anchor point for the specified attachment behavior.</param>
        <summary>Constructs an attachment behavior connecting a specific point in one dynamic item to an anchor point of a second dynamic item.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIAttachmentBehavior (UIKit.IUIDynamicItem item, UIKit.IUIDynamicItem attachedToItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.IUIDynamicItem item, class UIKit.IUIDynamicItem attachedToItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.#ctor(UIKit.IUIDynamicItem,UIKit.IUIDynamicItem)" />
      <MemberSignature Language="F#" Value="new UIKit.UIAttachmentBehavior : UIKit.IUIDynamicItem * UIKit.IUIDynamicItem -&gt; UIKit.UIAttachmentBehavior" Usage="new UIKit.UIAttachmentBehavior (item, attachedToItem)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithItem:attachedToItem:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="item" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="attachedToItem" Type="UIKit.IUIDynamicItem" />
      </Parameters>
      <Docs>
        <param name="item">Initial dynamic item that is connected by the attachment behavior.</param>
        <param name="attachedToItem">Subsequent dynamic item that is connected by the attachment behavior.</param>
        <summary>Constructs an attachment behavior connecting the center point of one dynamic item to the center point of a second dynamic item.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIAttachmentBehavior (UIKit.IUIDynamicItem item, UIKit.UIOffset offset, CoreGraphics.CGPoint anchorPoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.IUIDynamicItem item, valuetype UIKit.UIOffset offset, valuetype CoreGraphics.CGPoint anchorPoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.#ctor(UIKit.IUIDynamicItem,UIKit.UIOffset,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="new UIKit.UIAttachmentBehavior : UIKit.IUIDynamicItem * UIKit.UIOffset * CoreGraphics.CGPoint -&gt; UIKit.UIAttachmentBehavior" Usage="new UIKit.UIAttachmentBehavior (item, offset, anchorPoint)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithItem:offsetFromCenter:attachedToAnchor:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="item" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="offset" Type="UIKit.UIOffset" />
        <Parameter Name="anchorPoint" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="item">Initial dynamic item to which an attachment behavior is being applied.</param>
        <param name="offset">Specified point, inside the initial dynamic item and described as an offset from the initial item's center point, for the attachment.</param>
        <param name="anchorPoint">Anchor point for the specified attachment behavior.</param>
        <summary>Constructs an attachment behavior connecting a specific point in one dynamic item to an anchor point of a second dynamic item.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIAttachmentBehavior (UIKit.IUIDynamicItem item, UIKit.UIOffset offsetFromCenter, UIKit.IUIDynamicItem attachedToItem, UIKit.UIOffset attachOffsetFromCenter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.IUIDynamicItem item, valuetype UIKit.UIOffset offsetFromCenter, class UIKit.IUIDynamicItem attachedToItem, valuetype UIKit.UIOffset attachOffsetFromCenter) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.#ctor(UIKit.IUIDynamicItem,UIKit.UIOffset,UIKit.IUIDynamicItem,UIKit.UIOffset)" />
      <MemberSignature Language="F#" Value="new UIKit.UIAttachmentBehavior : UIKit.IUIDynamicItem * UIKit.UIOffset * UIKit.IUIDynamicItem * UIKit.UIOffset -&gt; UIKit.UIAttachmentBehavior" Usage="new UIKit.UIAttachmentBehavior (item, offsetFromCenter, attachedToItem, attachOffsetFromCenter)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="item" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="offsetFromCenter" Type="UIKit.UIOffset" />
        <Parameter Name="attachedToItem" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="attachOffsetFromCenter" Type="UIKit.UIOffset" />
      </Parameters>
      <Docs>
        <param name="item">Initial dynamic item to which an attachment behavior is being applied.</param>
        <param name="offsetFromCenter">Specified point, inside the initial dynamic item and described as an offset from the initial item's center point, for the attachment.</param>
        <param name="attachedToItem">Subsequent dynamic item that is connected by the attachment behavior.</param>
        <param name="attachOffsetFromCenter">Specified point, inside the ssecond dynamic item and described as an offset from the second item's center point, for the attachment.</param>
        <summary>Constructs an attachment behavior connecting a specific point in one dynamic item to a specific point in a second dynamic item.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnchorPoint">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint AnchorPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint AnchorPoint" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIAttachmentBehavior.AnchorPoint" />
      <MemberSignature Language="F#" Value="member this.AnchorPoint : CoreGraphics.CGPoint with get, set" Usage="UIKit.UIAttachmentBehavior.AnchorPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("anchorPoint")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAnchorPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The anchor point for an attached UIAttachmentBehaviorTypeAnchor.</summary>
        <value>The anchor point.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachedBehaviorType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIAttachmentBehaviorType AttachedBehaviorType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIAttachmentBehaviorType AttachedBehaviorType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIAttachmentBehavior.AttachedBehaviorType" />
      <MemberSignature Language="F#" Value="member this.AttachedBehaviorType : UIKit.UIAttachmentBehaviorType" Usage="UIKit.UIAttachmentBehavior.AttachedBehaviorType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("attachedBehaviorType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIAttachmentBehaviorType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The type of the attachment behavior. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AttachmentRange">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFloatRange AttachmentRange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIFloatRange AttachmentRange" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIAttachmentBehavior.AttachmentRange" />
      <MemberSignature Language="F#" Value="member this.AttachmentRange : UIKit.UIFloatRange with get, set" Usage="UIKit.UIAttachmentBehavior.AttachmentRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("attachmentRange")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAttachmentRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFloatRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The attachment area for a sliding attachment.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIAttachmentBehavior.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIAttachmentBehavior.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateFixedAttachment">
      <MemberSignature Language="C#" Value="public static UIKit.UIAttachmentBehavior CreateFixedAttachment (UIKit.IUIDynamicItem item1, UIKit.IUIDynamicItem item2, CoreGraphics.CGPoint attachmentAnchor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIAttachmentBehavior CreateFixedAttachment(class UIKit.IUIDynamicItem item1, class UIKit.IUIDynamicItem item2, valuetype CoreGraphics.CGPoint attachmentAnchor) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.CreateFixedAttachment(UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="static member CreateFixedAttachment : UIKit.IUIDynamicItem * UIKit.IUIDynamicItem * CoreGraphics.CGPoint -&gt; UIKit.UIAttachmentBehavior" Usage="UIKit.UIAttachmentBehavior.CreateFixedAttachment (item1, item2, attachmentAnchor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fixedAttachmentWithItem:attachedToItem:attachmentAnchor:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIAttachmentBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item1" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="item2" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="attachmentAnchor" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="item1">The item to attach to <paramref name="item2" />.</param>
        <param name="item2">The item to which <paramref name="item1" /> is attached.</param>
        <param name="attachmentAnchor">The point at which the items are attached.</param>
        <summary>Static factory method to create a fixed attachment.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateLimitAttachment">
      <MemberSignature Language="C#" Value="public static UIKit.UIAttachmentBehavior CreateLimitAttachment (UIKit.IUIDynamicItem item1, UIKit.UIOffset offsetFromCenter, UIKit.IUIDynamicItem item2, UIKit.UIOffset offsetFromCenter2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIAttachmentBehavior CreateLimitAttachment(class UIKit.IUIDynamicItem item1, valuetype UIKit.UIOffset offsetFromCenter, class UIKit.IUIDynamicItem item2, valuetype UIKit.UIOffset offsetFromCenter2) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.CreateLimitAttachment(UIKit.IUIDynamicItem,UIKit.UIOffset,UIKit.IUIDynamicItem,UIKit.UIOffset)" />
      <MemberSignature Language="F#" Value="static member CreateLimitAttachment : UIKit.IUIDynamicItem * UIKit.UIOffset * UIKit.IUIDynamicItem * UIKit.UIOffset -&gt; UIKit.UIAttachmentBehavior" Usage="UIKit.UIAttachmentBehavior.CreateLimitAttachment (item1, offsetFromCenter, item2, offsetFromCenter2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("limitAttachmentWithItem:offsetFromCenter:attachedToItem:offsetFromCenter:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIAttachmentBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item1" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="offsetFromCenter" Type="UIKit.UIOffset" />
        <Parameter Name="item2" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="offsetFromCenter2" Type="UIKit.UIOffset" />
      </Parameters>
      <Docs>
        <param name="item1">An item.</param>
        <param name="offsetFromCenter">The attachment point for <paramref name="item1" />. Values other than 0 create torque.</param>
        <param name="item2">An item.</param>
        <param name="offsetFromCenter2">he attachment point for <paramref name="item2" />. Values other than 0 create torque.</param>
        <summary>Static factory method to create attachments that limit how far two items can be from each other.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePinAttachment">
      <MemberSignature Language="C#" Value="public static UIKit.UIAttachmentBehavior CreatePinAttachment (UIKit.IUIDynamicItem item1, UIKit.IUIDynamicItem item2, CoreGraphics.CGPoint attachmentAnchor);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIAttachmentBehavior CreatePinAttachment(class UIKit.IUIDynamicItem item1, class UIKit.IUIDynamicItem item2, valuetype CoreGraphics.CGPoint attachmentAnchor) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.CreatePinAttachment(UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="static member CreatePinAttachment : UIKit.IUIDynamicItem * UIKit.IUIDynamicItem * CoreGraphics.CGPoint -&gt; UIKit.UIAttachmentBehavior" Usage="UIKit.UIAttachmentBehavior.CreatePinAttachment (item1, item2, attachmentAnchor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pinAttachmentWithItem:attachedToItem:attachmentAnchor:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIAttachmentBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item1" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="item2" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="attachmentAnchor" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="item1">An item.</param>
        <param name="item2">An item.</param>
        <param name="attachmentAnchor">The attachment point.</param>
        <summary>Static factory method to create a fixed-point attachment.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSlidingAttachment">
      <MemberSignature Language="C#" Value="public static UIKit.UIAttachmentBehavior CreateSlidingAttachment (UIKit.IUIDynamicItem item, CoreGraphics.CGPoint attachmentAnchor, CoreGraphics.CGVector translationAxis);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIAttachmentBehavior CreateSlidingAttachment(class UIKit.IUIDynamicItem item, valuetype CoreGraphics.CGPoint attachmentAnchor, valuetype CoreGraphics.CGVector translationAxis) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.CreateSlidingAttachment(UIKit.IUIDynamicItem,CoreGraphics.CGPoint,CoreGraphics.CGVector)" />
      <MemberSignature Language="F#" Value="static member CreateSlidingAttachment : UIKit.IUIDynamicItem * CoreGraphics.CGPoint * CoreGraphics.CGVector -&gt; UIKit.UIAttachmentBehavior" Usage="UIKit.UIAttachmentBehavior.CreateSlidingAttachment (item, attachmentAnchor, translationAxis)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("slidingAttachmentWithItem:attachmentAnchor:axisOfTranslation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIAttachmentBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="attachmentAnchor" Type="CoreGraphics.CGPoint" />
        <Parameter Name="translationAxis" Type="CoreGraphics.CGVector" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <param name="attachmentAnchor">To be added.</param>
        <param name="translationAxis">To be added.</param>
        <summary>Static factory method to create a <see cref="T:UIKit.UIAttachmentBehavior" /> that slides along the <param name="translationAxis" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSlidingAttachment">
      <MemberSignature Language="C#" Value="public static UIKit.UIAttachmentBehavior CreateSlidingAttachment (UIKit.IUIDynamicItem item1, UIKit.IUIDynamicItem item2, CoreGraphics.CGPoint attachmentAnchor, CoreGraphics.CGVector translationAxis);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIAttachmentBehavior CreateSlidingAttachment(class UIKit.IUIDynamicItem item1, class UIKit.IUIDynamicItem item2, valuetype CoreGraphics.CGPoint attachmentAnchor, valuetype CoreGraphics.CGVector translationAxis) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAttachmentBehavior.CreateSlidingAttachment(UIKit.IUIDynamicItem,UIKit.IUIDynamicItem,CoreGraphics.CGPoint,CoreGraphics.CGVector)" />
      <MemberSignature Language="F#" Value="static member CreateSlidingAttachment : UIKit.IUIDynamicItem * UIKit.IUIDynamicItem * CoreGraphics.CGPoint * CoreGraphics.CGVector -&gt; UIKit.UIAttachmentBehavior" Usage="UIKit.UIAttachmentBehavior.CreateSlidingAttachment (item1, item2, attachmentAnchor, translationAxis)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("slidingAttachmentWithItem:attachedToItem:attachmentAnchor:axisOfTranslation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIAttachmentBehavior</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item1" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="item2" Type="UIKit.IUIDynamicItem" />
        <Parameter Name="attachmentAnchor" Type="CoreGraphics.CGPoint" />
        <Parameter Name="translationAxis" Type="CoreGraphics.CGVector" />
      </Parameters>
      <Docs>
        <param name="item1">To be added.</param>
        <param name="item2">To be added.</param>
        <param name="attachmentAnchor">To be added.</param>
        <param name="translationAxis">To be added.</param>
        <summary>Static factory method to create a r<see cref="T:UIKit.UIAttachmentBehavior" /> that slides along <param name="translationAxis" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Damping">
      <MemberSignature Language="C#" Value="public virtual nfloat Damping { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Damping" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIAttachmentBehavior.Damping" />
      <MemberSignature Language="F#" Value="member this.Damping : nfloat with get, set" Usage="UIKit.UIAttachmentBehavior.Damping" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("damping")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDamping:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Amount of damping for application to the attachment behavior.</summary>
        <value>Damping amount, expressed as a float.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Frequency">
      <MemberSignature Language="C#" Value="public virtual nfloat Frequency { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Frequency" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIAttachmentBehavior.Frequency" />
      <MemberSignature Language="F#" Value="member this.Frequency : nfloat with get, set" Usage="UIKit.UIAttachmentBehavior.Frequency" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("frequency")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setFrequency:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The oscillation frequency of the attachment behavior.</summary>
        <value>Oscillation frequency expressed as a float.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FrictionTorque">
      <MemberSignature Language="C#" Value="public virtual nfloat FrictionTorque { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat FrictionTorque" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIAttachmentBehavior.FrictionTorque" />
      <MemberSignature Language="F#" Value="member this.FrictionTorque : nfloat with get, set" Usage="UIKit.UIAttachmentBehavior.FrictionTorque" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("frictionTorque")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setFrictionTorque:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The resistance to rotation, in arbitrary units.</summary>
        <value>The default value is 0.0.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIDynamicItem[] Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUIDynamicItem[] Items" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIAttachmentBehavior.Items" />
      <MemberSignature Language="F#" Value="member this.Items : UIKit.IUIDynamicItem[]" Usage="UIKit.UIAttachmentBehavior.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("items", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIDynamicItem[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The IUIDynamicItems that are affected by this UIAttachmentBehavior.</summary>
        <value>The <see cref="T:UIKit.IUIDynamicItem" /> array affected by this behavior.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public virtual nfloat Length { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Length" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIAttachmentBehavior.Length" />
      <MemberSignature Language="F#" Value="member this.Length : nfloat with get, set" Usage="UIKit.UIAttachmentBehavior.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("length")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setLength:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The distance, in points, between the two attachment points of the attachment behavior.</summary>
        <value>Distance length expressed either as a floating point value.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
