<Type Name="UIGestureRecognizer" FullName="UIKit.UIGestureRecognizer">
  <TypeSignature Language="C#" Value="public class UIGestureRecognizer : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIGestureRecognizer extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIGestureRecognizer" />
  <TypeSignature Language="F#" Value="type UIGestureRecognizer = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIGestureRecognizer", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for gesture recognizers.</summary>
    <remarks>
      <para>This abstract base class provides features common to recognizers of touch-oriented user gestures.</para>
    </remarks>
    <altmember cref="T:UIKit.UITapGestureRecognizer" />
    <altmember cref="T:UIKit.UIPinchGestureRecognizer" />
    <altmember cref="T:UIKit.UIRotationGestureRecognizer" />
    <altmember cref="T:UIKit.UISwipeGestureRecognizer" />
    <altmember cref="T:UIKit.UIPanGestureRecognizer" />
    <altmember cref="T:UIKit.UILongPressGestureRecognizer" />
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/Touch/">Example_Touch</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/Touches_GestureRecognizers/">Touches_Classic</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/SimpleTextInput/">SimpleTextInput</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIGestureRecognizer_Class/index.html">Apple documentation for <c>UIGestureRecognizer</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
          To add methods that will be invoked upon recognition, you can use the AddTarget method.
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIGestureRecognizer (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIGestureRecognizer : Foundation.NSObjectFlag -&gt; UIKit.UIGestureRecognizer" Usage="new UIKit.UIGestureRecognizer t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.#ctor(System.Action)" />
      <MemberSignature Language="F#" Value="new UIKit.UIGestureRecognizer : Action -&gt; UIKit.UIGestureRecognizer" Usage="new UIKit.UIGestureRecognizer action" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">Code to invoke when the gesture is recognized.</param>
        <summary>Initalizes a gesture recognizer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIGestureRecognizer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIGestureRecognizer : nativeint -&gt; UIKit.UIGestureRecognizer" Usage="new UIKit.UIGestureRecognizer handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer (Foundation.NSObject target, ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObject target, class ObjCRuntime.Selector action) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.#ctor(Foundation.NSObject,ObjCRuntime.Selector)" />
      <MemberSignature Language="F#" Value="new UIKit.UIGestureRecognizer : Foundation.NSObject * ObjCRuntime.Selector -&gt; UIKit.UIGestureRecognizer" Usage="new UIKit.UIGestureRecognizer (target, action)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithTarget:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="target">Recipient for action messages that are sent by the receiver.</param>
        <param name="action">Code to invoke when the gesture is recognized.</param>
        <summary>Initializes a designated gesture-recognizer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIGestureRecognizer (ObjCRuntime.Selector sel, UIKit.UIGestureRecognizer.Token token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ObjCRuntime.Selector sel, class UIKit.UIGestureRecognizer/Token token) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.#ctor(ObjCRuntime.Selector,UIKit.UIGestureRecognizer.Token)" />
      <MemberSignature Language="F#" Value="new UIKit.UIGestureRecognizer : ObjCRuntime.Selector * UIKit.UIGestureRecognizer.Token -&gt; UIKit.UIGestureRecognizer" Usage="new UIKit.UIGestureRecognizer (sel, token)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="sel" Type="ObjCRuntime.Selector" />
        <Parameter Name="token" Type="UIKit.UIGestureRecognizer+Token" />
      </Parameters>
      <Docs>
        <param name="sel">A selector that specifies the method that is implemented by the target to handle the gesture that is recognized by the receiver.</param>
        <param name="token">String constant to be used as a token.</param>
        <summary>Initalizes a gesture recognizer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public UIKit.UIGestureRecognizer.Token AddTarget (Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UIGestureRecognizer/Token AddTarget(class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.AddTarget(System.Action)" />
      <MemberSignature Language="F#" Value="member this.AddTarget : Action -&gt; UIKit.UIGestureRecognizer.Token" Usage="uIGestureRecognizer.AddTarget action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIGestureRecognizer+Token</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="action">The method to invoke when the gesture has been recognized.</param>
        <summary>Registers a new callback for when the gesture has been recognized.</summary>
        <returns>The returned token can be used later to remove this particular action from being invoked by the gesture recognizer.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public UIKit.UIGestureRecognizer.Token AddTarget (Action&lt;Foundation.NSObject&gt; action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UIGestureRecognizer/Token AddTarget(class System.Action`1&lt;class Foundation.NSObject&gt; action) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.AddTarget(System.Action{Foundation.NSObject})" />
      <MemberSignature Language="F#" Value="member this.AddTarget : Action&lt;Foundation.NSObject&gt; -&gt; UIKit.UIGestureRecognizer.Token" Usage="uIGestureRecognizer.AddTarget action" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIGestureRecognizer+Token</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="System.Action&lt;Foundation.NSObject&gt;" />
      </Parameters>
      <Docs>
        <param name="action">The method to invoke when the gesture has been recognized.</param>
        <summary>Registers a new callback for when the gesture has been recognized.</summary>
        <returns>The returned token can be used later to remove this particular action from being invoked by the gesture recognizer using the <see cref="M:UIKit.UIGestureRecognizer.RemoveTarget(Foundation.NSObject,ObjCRuntime.Selector)" /> method.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public virtual void AddTarget (Foundation.NSObject target, ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTarget(class Foundation.NSObject target, class ObjCRuntime.Selector action) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.AddTarget(Foundation.NSObject,ObjCRuntime.Selector)" />
      <MemberSignature Language="F#" Value="abstract member AddTarget : Foundation.NSObject * ObjCRuntime.Selector -&gt; unit&#xA;override this.AddTarget : Foundation.NSObject * ObjCRuntime.Selector -&gt; unit" Usage="uIGestureRecognizer.AddTarget (target, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addTarget:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="target">An instance of NSObject that holds a method flagged with the specified selector.</param>
        <param name="action">The selector to invoke on the specified NSObject instance.</param>
        <summary>Low-level version of AddTarget.</summary>
        <remarks>Unlike the C#-based AddTarget method, this version of AddTarget requires both an NSObject instance plus a selector to invoke when the gesture is recognized.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowedPressTypes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSNumber[] AllowedPressTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSNumber[] AllowedPressTypes" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.AllowedPressTypes" />
      <MemberSignature Language="F#" Value="member this.AllowedPressTypes : Foundation.NSNumber[] with get, set" Usage="UIKit.UIGestureRecognizer.AllowedPressTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("allowedPressTypes", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAllowedPressTypes:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:UIKit.UIPressType" /> that the gesture recognizer responds to.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowedTouchTypes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSNumber[] AllowedTouchTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSNumber[] AllowedTouchTypes" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.AllowedTouchTypes" />
      <MemberSignature Language="F#" Value="member this.AllowedTouchTypes : Foundation.NSNumber[] with get, set" Usage="UIKit.UIGestureRecognizer.AllowedTouchTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("allowedTouchTypes", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAllowedTouchTypes:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:UIKit.UITouchType" /> that the gesture recognizer responds to.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanBePreventedByGestureRecognizer">
      <MemberSignature Language="C#" Value="public virtual bool CanBePreventedByGestureRecognizer (UIKit.UIGestureRecognizer preventingGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanBePreventedByGestureRecognizer(class UIKit.UIGestureRecognizer preventingGestureRecognizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.CanBePreventedByGestureRecognizer(UIKit.UIGestureRecognizer)" />
      <MemberSignature Language="F#" Value="abstract member CanBePreventedByGestureRecognizer : UIKit.UIGestureRecognizer -&gt; bool&#xA;override this.CanBePreventedByGestureRecognizer : UIKit.UIGestureRecognizer -&gt; bool" Usage="uIGestureRecognizer.CanBePreventedByGestureRecognizer preventingGestureRecognizer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("canBePreventedByGestureRecognizer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preventingGestureRecognizer" Type="UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="preventingGestureRecognizer">To be added.</param>
        <summary>When overridden, allows the specified UIGestureRecognizer to prevent this UIGestureRecognizer from recognizing a gesture. </summary>
        <returns>If set to <see langword="true" />, this indicates that preventingGestureRecognizer can block the receiver from recognizing its gesture. Otherwise set to <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelsTouchesInView">
      <MemberSignature Language="C#" Value="public virtual bool CancelsTouchesInView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelsTouchesInView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.CancelsTouchesInView" />
      <MemberSignature Language="F#" Value="member this.CancelsTouchesInView : bool with get, set" Usage="UIKit.UIGestureRecognizer.CancelsTouchesInView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("cancelsTouchesInView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setCancelsTouchesInView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether touches recognized as part of a gesture should be delivered to the underlying UIView.</summary>
        <value>If set to <see langword="true" />, the receiver recognizes its gesture. Otherwise set to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanPreventGestureRecognizer">
      <MemberSignature Language="C#" Value="public virtual bool CanPreventGestureRecognizer (UIKit.UIGestureRecognizer preventedGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanPreventGestureRecognizer(class UIKit.UIGestureRecognizer preventedGestureRecognizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.CanPreventGestureRecognizer(UIKit.UIGestureRecognizer)" />
      <MemberSignature Language="F#" Value="abstract member CanPreventGestureRecognizer : UIKit.UIGestureRecognizer -&gt; bool&#xA;override this.CanPreventGestureRecognizer : UIKit.UIGestureRecognizer -&gt; bool" Usage="uIGestureRecognizer.CanPreventGestureRecognizer preventedGestureRecognizer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("canPreventGestureRecognizer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preventedGestureRecognizer" Type="UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="preventedGestureRecognizer">To be added.</param>
        <summary>When overridden, indicates that this UIGestureRecognizer can prevent the specified UIGestureRecognizer from recognizing a gesture.</summary>
        <returns>If set to <see langword="true" />, the receiver can block preventedGestureRecognizer from recognizing its gesture. Otherwise set to <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIGestureRecognizer.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelaysTouchesBegan">
      <MemberSignature Language="C#" Value="public virtual bool DelaysTouchesBegan { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelaysTouchesBegan" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.DelaysTouchesBegan" />
      <MemberSignature Language="F#" Value="member this.DelaysTouchesBegan : bool with get, set" Usage="UIKit.UIGestureRecognizer.DelaysTouchesBegan" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delaysTouchesBegan")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelaysTouchesBegan:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UIGestureRecognizer should delay sending touches to the underlying UIVew during the gesture's begin phase.</summary>
        <value>If set to <see langword="true" />, then the receiver delays sending touches in a begin phase to its view. Otherwise set to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DelaysTouchesEnded">
      <MemberSignature Language="C#" Value="public virtual bool DelaysTouchesEnded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DelaysTouchesEnded" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.DelaysTouchesEnded" />
      <MemberSignature Language="F#" Value="member this.DelaysTouchesEnded : bool with get, set" Usage="UIKit.UIGestureRecognizer.DelaysTouchesEnded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delaysTouchesEnded")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelaysTouchesEnded:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UIGestureRecgonizer should delay sending touches to the underlying UIView during the gesture's end phase.</summary>
        <value>If set to <see langword="true" />, then the receiver delays sending touches in an end phase to its view. Otherwise set to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public UIKit.IUIGestureRecognizerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUIGestureRecognizerDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UIKit.IUIGestureRecognizerDelegate with get, set" Usage="UIKit.UIGestureRecognizer.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIGestureRecognizerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UIKit.IUIGestureRecognizerDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UIKit.IUIGestureRecognizerDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="uIGestureRecognizer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIGestureRecognizer object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIGestureRecognizer class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UIGestureRecognizer ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.Enabled" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="UIKit.UIGestureRecognizer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the UIGestureRecognizer is enabled.</summary>
        <value>If set to <see langword="true" />, indicates whether the gesture recognizer is enabled. Otherwise set to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnorePress">
      <MemberSignature Language="C#" Value="public void IgnorePress (UIKit.UIPress button, UIKit.UIPressesEvent event);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void IgnorePress(class UIKit.UIPress button, class UIKit.UIPressesEvent event) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.IgnorePress(UIKit.UIPress,UIKit.UIPressesEvent)" />
      <MemberSignature Language="F#" Value="member this.IgnorePress : UIKit.UIPress * UIKit.UIPressesEvent -&gt; unit" Usage="uIGestureRecognizer.IgnorePress (button, event)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="button" Type="UIKit.UIPress" />
        <Parameter Name="event" Type="UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="button">To be added.</param>
        <param name="event">To be added.</param>
        <summary>Developers may override this method to tell the gesture recognizer to ignore specific presses.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreTouch">
      <MemberSignature Language="C#" Value="public virtual void IgnoreTouch (UIKit.UITouch touch, UIKit.UIEvent forEvent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IgnoreTouch(class UIKit.UITouch touch, class UIKit.UIEvent forEvent) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.IgnoreTouch(UIKit.UITouch,UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member IgnoreTouch : UIKit.UITouch * UIKit.UIEvent -&gt; unit&#xA;override this.IgnoreTouch : UIKit.UITouch * UIKit.UIEvent -&gt; unit" Usage="uIGestureRecognizer.IgnoreTouch (touch, forEvent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("ignoreTouch:forEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touch" Type="UIKit.UITouch" />
        <Parameter Name="forEvent" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="touch">The part of the current multi-touch sequence and associated that is associated with the specified event.</param>
        <param name="forEvent">Event that includes a reference to touch.</param>
        <summary>Ignores a specific touch of the given event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationInView">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint LocationInView (UIKit.UIView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint LocationInView(class UIKit.UIView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.LocationInView(UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member LocationInView : UIKit.UIView -&gt; CoreGraphics.CGPoint&#xA;override this.LocationInView : UIKit.UIView -&gt; CoreGraphics.CGPoint" Usage="uIGestureRecognizer.LocationInView view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("locationInView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="view">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>The PointF in the given UIView of the gesture represented by this UIGestureRecognizer.</summary>
        <returns>A point in the views's local coordinate system identifying the location of the gesture.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationOfTouch">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint LocationOfTouch (nint touchIndex, UIKit.UIView inView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint LocationOfTouch(valuetype System.nint touchIndex, class UIKit.UIView inView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.LocationOfTouch(System.nint,UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member LocationOfTouch : nint * UIKit.UIView -&gt; CoreGraphics.CGPoint&#xA;override this.LocationOfTouch : nint * UIKit.UIView -&gt; CoreGraphics.CGPoint" Usage="uIGestureRecognizer.LocationOfTouch (touchIndex, inView)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("locationOfTouch:inView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touchIndex" Type="System.nint" />
        <Parameter Name="inView" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="touchIndex">To be added.</param>
        <param name="inView">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Gets the location, in the coordinate system of <param name="inView" />, of one of the touches in the gesture.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.Name" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="UIKit.UIGestureRecognizer.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("name")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setName:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or set the name of the recognizer.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfTouches">
      <MemberSignature Language="C#" Value="public virtual nint NumberOfTouches { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint NumberOfTouches" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.NumberOfTouches" />
      <MemberSignature Language="F#" Value="member this.NumberOfTouches : nint" Usage="UIKit.UIGestureRecognizer.NumberOfTouches" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("numberOfTouches")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of touches involved in the gesture.</summary>
        <value>The number of touches in a private array that is maintained by the receiver.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesBegan">
      <MemberSignature Language="C#" Value="public virtual void PressesBegan (Foundation.NSSet&lt;UIKit.UIPress&gt; presses, UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesBegan(class Foundation.NSSet`1&lt;class UIKit.UIPress&gt; presses, class UIKit.UIPressesEvent evt) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.PressesBegan(Foundation.NSSet{UIKit.UIPress},UIKit.UIPressesEvent)" />
      <MemberSignature Language="F#" Value="abstract member PressesBegan : Foundation.NSSet&lt;UIKit.UIPress&gt; * UIKit.UIPressesEvent -&gt; unit&#xA;override this.PressesBegan : Foundation.NSSet&lt;UIKit.UIPress&gt; * UIKit.UIPressesEvent -&gt; unit" Usage="uIGestureRecognizer.PressesBegan (presses, evt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pressesBegan:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="Foundation.NSSet&lt;UIKit.UIPress&gt;" />
        <Parameter Name="evt" Type="UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates that a physical button has been pressed on a remote or game controller.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesCancelled">
      <MemberSignature Language="C#" Value="public virtual void PressesCancelled (Foundation.NSSet&lt;UIKit.UIPress&gt; presses, UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesCancelled(class Foundation.NSSet`1&lt;class UIKit.UIPress&gt; presses, class UIKit.UIPressesEvent evt) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.PressesCancelled(Foundation.NSSet{UIKit.UIPress},UIKit.UIPressesEvent)" />
      <MemberSignature Language="F#" Value="abstract member PressesCancelled : Foundation.NSSet&lt;UIKit.UIPress&gt; * UIKit.UIPressesEvent -&gt; unit&#xA;override this.PressesCancelled : Foundation.NSSet&lt;UIKit.UIPress&gt; * UIKit.UIPressesEvent -&gt; unit" Usage="uIGestureRecognizer.PressesCancelled (presses, evt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pressesCancelled:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="Foundation.NSSet&lt;UIKit.UIPress&gt;" />
        <Parameter Name="evt" Type="UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates a physical button-press event has been cancelled due to a system event.</summary>
        <remarks>
          <para>Developers who handle press events must implement this method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesChanged">
      <MemberSignature Language="C#" Value="public virtual void PressesChanged (Foundation.NSSet&lt;UIKit.UIPress&gt; presses, UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesChanged(class Foundation.NSSet`1&lt;class UIKit.UIPress&gt; presses, class UIKit.UIPressesEvent evt) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.PressesChanged(Foundation.NSSet{UIKit.UIPress},UIKit.UIPressesEvent)" />
      <MemberSignature Language="F#" Value="abstract member PressesChanged : Foundation.NSSet&lt;UIKit.UIPress&gt; * UIKit.UIPressesEvent -&gt; unit&#xA;override this.PressesChanged : Foundation.NSSet&lt;UIKit.UIPress&gt; * UIKit.UIPressesEvent -&gt; unit" Usage="uIGestureRecognizer.PressesChanged (presses, evt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pressesChanged:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="Foundation.NSSet&lt;UIKit.UIPress&gt;" />
        <Parameter Name="evt" Type="UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates that the <see cref="P:UIKit.UIPress.Force" /> value of the <paramref name="evt" /> has changed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PressesEnded">
      <MemberSignature Language="C#" Value="public virtual void PressesEnded (Foundation.NSSet&lt;UIKit.UIPress&gt; presses, UIKit.UIPressesEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PressesEnded(class Foundation.NSSet`1&lt;class UIKit.UIPress&gt; presses, class UIKit.UIPressesEvent evt) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.PressesEnded(Foundation.NSSet{UIKit.UIPress},UIKit.UIPressesEvent)" />
      <MemberSignature Language="F#" Value="abstract member PressesEnded : Foundation.NSSet&lt;UIKit.UIPress&gt; * UIKit.UIPressesEvent -&gt; unit&#xA;override this.PressesEnded : Foundation.NSSet&lt;UIKit.UIPress&gt; * UIKit.UIPressesEvent -&gt; unit" Usage="uIGestureRecognizer.PressesEnded (presses, evt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pressesEnded:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presses" Type="Foundation.NSSet&lt;UIKit.UIPress&gt;" />
        <Parameter Name="evt" Type="UIKit.UIPressesEvent" />
      </Parameters>
      <Docs>
        <param name="presses">The set of <see cref="T:UIKit.UIPress" /> objects involved in the event.</param>
        <param name="evt">The <see cref="T:UIKit.UIPressesEvent" /> describing the event.</param>
        <summary>Indicates the ending of a press of a physical button on a remote or game controller.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTarget">
      <MemberSignature Language="C#" Value="public void RemoveTarget (UIKit.UIGestureRecognizer.Token token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveTarget(class UIKit.UIGestureRecognizer/Token token) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.RemoveTarget(UIKit.UIGestureRecognizer.Token)" />
      <MemberSignature Language="F#" Value="member this.RemoveTarget : UIKit.UIGestureRecognizer.Token -&gt; unit" Usage="uIGestureRecognizer.RemoveTarget token" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="UIKit.UIGestureRecognizer+Token" />
      </Parameters>
      <Docs>
        <param name="token">A Token returned by the AddTarget method.</param>
        <summary>Removes the callback method for the specified gesture being recognized, based on the token that was returned by AddTarget.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTarget">
      <MemberSignature Language="C#" Value="public virtual void RemoveTarget (Foundation.NSObject target, ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTarget(class Foundation.NSObject target, class ObjCRuntime.Selector action) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.RemoveTarget(Foundation.NSObject,ObjCRuntime.Selector)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTarget : Foundation.NSObject * ObjCRuntime.Selector -&gt; unit&#xA;override this.RemoveTarget : Foundation.NSObject * ObjCRuntime.Selector -&gt; unit" Usage="uIGestureRecognizer.RemoveTarget (target, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeTarget:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="target">
          <para>The NSObject instance where the method will be invoked.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="action">
          <para>The name of the selector in the target object that was registered with AddTarget.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Low-level counterpart to the low-level AddTarget method.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequireGestureRecognizerToFail">
      <MemberSignature Language="C#" Value="public virtual void RequireGestureRecognizerToFail (UIKit.UIGestureRecognizer otherGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RequireGestureRecognizerToFail(class UIKit.UIGestureRecognizer otherGestureRecognizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.RequireGestureRecognizerToFail(UIKit.UIGestureRecognizer)" />
      <MemberSignature Language="F#" Value="abstract member RequireGestureRecognizerToFail : UIKit.UIGestureRecognizer -&gt; unit&#xA;override this.RequireGestureRecognizerToFail : UIKit.UIGestureRecognizer -&gt; unit" Usage="uIGestureRecognizer.RequireGestureRecognizerToFail otherGestureRecognizer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("requireGestureRecognizerToFail:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherGestureRecognizer" Type="UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="otherGestureRecognizer">To be added.</param>
        <summary>Causes this UIGestureRecognizer to only work if the specified UIGestureRecognizer fails (e.g., a single-tap gesture might require that a double-tap gesture fail).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RequiresExclusiveTouchType">
      <MemberSignature Language="C#" Value="public virtual bool RequiresExclusiveTouchType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RequiresExclusiveTouchType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.RequiresExclusiveTouchType" />
      <MemberSignature Language="F#" Value="member this.RequiresExclusiveTouchType : bool with get, set" Usage="UIKit.UIGestureRecognizer.RequiresExclusiveTouchType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 9, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("requiresExclusiveTouchType")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 9, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRequiresExclusiveTouchType:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 9, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether the <see cref="T:UIKit.UIGestureRecognizer" /> is only considering a single type of touch.</summary>
        <value>
          <see langword="true" /> indicates the recognizer will ignore new touches that do not match the type of the initial touch.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public virtual void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.Reset" />
      <MemberSignature Language="F#" Value="abstract member Reset : unit -&gt; unit&#xA;override this.Reset : unit -&gt; unit" Usage="uIGestureRecognizer.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reset")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden, allows the application developer to reset internal state when a gesture is recognized.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBegin">
      <MemberSignature Language="C#" Value="public UIKit.UIGestureProbe ShouldBegin { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIGestureProbe ShouldBegin" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.ShouldBegin" />
      <MemberSignature Language="F#" Value="member this.ShouldBegin : UIKit.UIGestureProbe with get, set" Usage="UIKit.UIGestureRecognizer.ShouldBegin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIGestureProbe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>
        </value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeRequiredToFailBy">
      <MemberSignature Language="C#" Value="public UIKit.UIGesturesProbe ShouldBeRequiredToFailBy { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIGesturesProbe ShouldBeRequiredToFailBy" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.ShouldBeRequiredToFailBy" />
      <MemberSignature Language="F#" Value="member this.ShouldBeRequiredToFailBy : UIKit.UIGesturesProbe with get, set" Usage="UIKit.UIGestureRecognizer.ShouldBeRequiredToFailBy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIGesturesProbe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>If set to <see langword="true" />, sets up the failure requirement. Otherwise set to <see langword="false" />.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeRequiredToFailByGestureRecognizer">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBeRequiredToFailByGestureRecognizer (UIKit.UIGestureRecognizer otherGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBeRequiredToFailByGestureRecognizer(class UIKit.UIGestureRecognizer otherGestureRecognizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.ShouldBeRequiredToFailByGestureRecognizer(UIKit.UIGestureRecognizer)" />
      <MemberSignature Language="F#" Value="abstract member ShouldBeRequiredToFailByGestureRecognizer : UIKit.UIGestureRecognizer -&gt; bool&#xA;override this.ShouldBeRequiredToFailByGestureRecognizer : UIKit.UIGestureRecognizer -&gt; bool" Usage="uIGestureRecognizer.ShouldBeRequiredToFailByGestureRecognizer otherGestureRecognizer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("shouldBeRequiredToFailByGestureRecognizer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherGestureRecognizer" Type="UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="otherGestureRecognizer">A subclass instance of UIGestureRecognizer.</param>
        <summary>Specifically overridden to indicate that a receiver requires the specified gesture recognizer to fail. </summary>
        <returns>If set to <see langword="true" />, sets up the failure requirement. Otherwise set to <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReceivePress">
      <MemberSignature Language="C#" Value="public UIKit.UIGesturesPress ShouldReceivePress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIGesturesPress ShouldReceivePress" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.ShouldReceivePress" />
      <MemberSignature Language="F#" Value="member this.ShouldReceivePress : UIKit.UIGesturesPress with get, set" Usage="UIKit.UIGestureRecognizer.ShouldReceivePress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIGesturesPress</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldReceiveTouch">
      <MemberSignature Language="C#" Value="public UIKit.UITouchEventArgs ShouldReceiveTouch { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITouchEventArgs ShouldReceiveTouch" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.ShouldReceiveTouch" />
      <MemberSignature Language="F#" Value="member this.ShouldReceiveTouch : UIKit.UITouchEventArgs with get, set" Usage="UIKit.UIGestureRecognizer.ShouldReceiveTouch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UITouchEventArgs</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>
        </value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRecognizeSimultaneously">
      <MemberSignature Language="C#" Value="public UIKit.UIGesturesProbe ShouldRecognizeSimultaneously { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIGesturesProbe ShouldRecognizeSimultaneously" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.ShouldRecognizeSimultaneously" />
      <MemberSignature Language="F#" Value="member this.ShouldRecognizeSimultaneously : UIKit.UIGesturesProbe with get, set" Usage="UIKit.UIGestureRecognizer.ShouldRecognizeSimultaneously" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIGesturesProbe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>
        </value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRequireFailureOf">
      <MemberSignature Language="C#" Value="public UIKit.UIGesturesProbe ShouldRequireFailureOf { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIGesturesProbe ShouldRequireFailureOf" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.ShouldRequireFailureOf" />
      <MemberSignature Language="F#" Value="member this.ShouldRequireFailureOf : UIKit.UIGesturesProbe with get, set" Usage="UIKit.UIGestureRecognizer.ShouldRequireFailureOf" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIGesturesProbe</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>
        </value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRequireFailureOfGestureRecognizer">
      <MemberSignature Language="C#" Value="public virtual bool ShouldRequireFailureOfGestureRecognizer (UIKit.UIGestureRecognizer otherGestureRecognizer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldRequireFailureOfGestureRecognizer(class UIKit.UIGestureRecognizer otherGestureRecognizer) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.ShouldRequireFailureOfGestureRecognizer(UIKit.UIGestureRecognizer)" />
      <MemberSignature Language="F#" Value="abstract member ShouldRequireFailureOfGestureRecognizer : UIKit.UIGestureRecognizer -&gt; bool&#xA;override this.ShouldRequireFailureOfGestureRecognizer : UIKit.UIGestureRecognizer -&gt; bool" Usage="uIGestureRecognizer.ShouldRequireFailureOfGestureRecognizer otherGestureRecognizer" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("shouldRequireFailureOfGestureRecognizer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="otherGestureRecognizer" Type="UIKit.UIGestureRecognizer" />
      </Parameters>
      <Docs>
        <param name="otherGestureRecognizer">To be added.</param>
        <summary>Returns a value that tells whether the receiver requires <paramref name="otherGestureRecognizer" /> to fail.</summary>
        <returns>If set to <see langword="true" />, it sets up the failure requirement. Otherwise set to <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIGestureRecognizerState State { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIGestureRecognizerState State" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.State" />
      <MemberSignature Language="F#" Value="member this.State : UIKit.UIGestureRecognizerState with get, set" Usage="UIKit.UIGestureRecognizer.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("state")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Advice("Only subclasses of 'UIGestureRecognizer' can set this property.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setState:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIGestureRecognizerState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current state of this UIGestureRecognizer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesBegan">
      <MemberSignature Language="C#" Value="public virtual void TouchesBegan (Foundation.NSSet touches, UIKit.UIEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TouchesBegan(class Foundation.NSSet touches, class UIKit.UIEvent evt) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.TouchesBegan(Foundation.NSSet,UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member TouchesBegan : Foundation.NSSet * UIKit.UIEvent -&gt; unit&#xA;override this.TouchesBegan : Foundation.NSSet * UIKit.UIEvent -&gt; unit" Usage="uIGestureRecognizer.TouchesBegan (touches, evt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("touchesBegan:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="Foundation.NSSet" />
        <Parameter Name="evt" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="touches">The set of UITouch instances in the event that is represented by the event that represents the touches in the UITouchPhaseBegan phase.</param>
        <param name="evt">Represents the event that the touches belong to.</param>
        <summary>Indicates that one or more fingers have touched down in the associated UIView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesCancelled">
      <MemberSignature Language="C#" Value="public virtual void TouchesCancelled (Foundation.NSSet touches, UIKit.UIEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TouchesCancelled(class Foundation.NSSet touches, class UIKit.UIEvent evt) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.TouchesCancelled(Foundation.NSSet,UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member TouchesCancelled : Foundation.NSSet * UIKit.UIEvent -&gt; unit&#xA;override this.TouchesCancelled : Foundation.NSSet * UIKit.UIEvent -&gt; unit" Usage="uIGestureRecognizer.TouchesCancelled (touches, evt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("touchesCancelled:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="Foundation.NSSet" />
        <Parameter Name="evt" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="touches">The set of UITouch instances in the event that is represented by the event that represents the touches in the UITouchPhaseCancelled phase.</param>
        <param name="evt">Represents the event that the touches belong to.</param>
        <summary>Indicates that a system event (e.g., a low-memory warning) has cancelled the touch event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesEnded">
      <MemberSignature Language="C#" Value="public virtual void TouchesEnded (Foundation.NSSet touches, UIKit.UIEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TouchesEnded(class Foundation.NSSet touches, class UIKit.UIEvent evt) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.TouchesEnded(Foundation.NSSet,UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member TouchesEnded : Foundation.NSSet * UIKit.UIEvent -&gt; unit&#xA;override this.TouchesEnded : Foundation.NSSet * UIKit.UIEvent -&gt; unit" Usage="uIGestureRecognizer.TouchesEnded (touches, evt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("touchesEnded:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="Foundation.NSSet" />
        <Parameter Name="evt" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="touches">The set of UITouch instances in the event that is represented by the event that represents the touches in the UITouchPhaseEnded phase.</param>
        <param name="evt">Represents the event that the touches belong to.</param>
        <summary>Indicates that one or more fingers have lifted in the associated UIView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesEstimatedPropertiesUpdated">
      <MemberSignature Language="C#" Value="public virtual void TouchesEstimatedPropertiesUpdated (Foundation.NSSet touches);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TouchesEstimatedPropertiesUpdated(class Foundation.NSSet touches) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.TouchesEstimatedPropertiesUpdated(Foundation.NSSet)" />
      <MemberSignature Language="F#" Value="abstract member TouchesEstimatedPropertiesUpdated : Foundation.NSSet -&gt; unit&#xA;override this.TouchesEstimatedPropertiesUpdated : Foundation.NSSet -&gt; unit" Usage="uIGestureRecognizer.TouchesEstimatedPropertiesUpdated touches" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("touchesEstimatedPropertiesUpdated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="Foundation.NSSet" />
      </Parameters>
      <Docs>
        <param name="touches">To be added.</param>
        <summary>Called when the estimated properties of <paramref name="touches" /> have been updated.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchesMoved">
      <MemberSignature Language="C#" Value="public virtual void TouchesMoved (Foundation.NSSet touches, UIKit.UIEvent evt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TouchesMoved(class Foundation.NSSet touches, class UIKit.UIEvent evt) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIGestureRecognizer.TouchesMoved(Foundation.NSSet,UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member TouchesMoved : Foundation.NSSet * UIKit.UIEvent -&gt; unit&#xA;override this.TouchesMoved : Foundation.NSSet * UIKit.UIEvent -&gt; unit" Usage="uIGestureRecognizer.TouchesMoved (touches, evt)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("touchesMoved:withEvent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="touches" Type="Foundation.NSSet" />
        <Parameter Name="evt" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="touches">The set of UITouch instances in the event that is represented by the event that represents the touches in the UITouchPhaseMoved phase.</param>
        <param name="evt">Represents the event that the touches belong to.</param>
        <summary>Indicates that one or more fingers have moved in the associated UIView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="View">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView View { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView View" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.View" />
      <MemberSignature Language="F#" Value="member this.View : UIKit.UIView" Usage="UIKit.UIGestureRecognizer.View" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("view")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIView to which this UIGestureRecognizer is attached. Read-only.</summary>
        <value>A point in the coordinate system of the view identifying the location of the gesture.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIGestureRecognizer.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="UIKit.UIGestureRecognizer.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
