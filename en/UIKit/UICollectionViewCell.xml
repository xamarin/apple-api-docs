<Type Name="UICollectionViewCell" FullName="UIKit.UICollectionViewCell">
  <TypeSignature Language="C#" Value="public class UICollectionViewCell : UIKit.UICollectionReusableView" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UICollectionViewCell extends UIKit.UICollectionReusableView" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UICollectionReusableView</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UICollectionViewCell", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a reusable content view in the set being presented by the <see cref="T:UIKit.UICollectionView" />.</summary>
    <remarks>
      <para>
        <see cref="T:UIKit.UICollectionViewCell" />s are reusable views that present a single item in the data set that is being presented by the collection view. As subtypes of <see cref="T:UIKit.UICollectionReusableView" />, they are expected to be managed by their containing <see cref="T:UIKit.UICollectionView" />.</para>
      <para>The <see cref="T:UIKit.UICollectionView" /> class is designed to work with large datasets while respecting the resource limitations of iOS devices. To do this, the <see cref="T:UIKit.UICollectionView" /> maintains a reuse queue of component views of type <see cref="T:UIKit.UICollectionReusableView" />, instantiating only as many as are strictly necessary and replacing values in <see cref="T:UIKit.UICollectionViewCell" />s that are no longer visible with values appropriate to <see cref="T:UIKit.UICollectionViewCell" />s that are about to scroll onto the screen. </para>
      <para>The reuse queue implies an unusual lifecycle for <see cref="T:UIKit.UICollectionViewCell" />s (and other subtypes of <see cref="T:UIKit.UICollectionReusableView" />). Rather than the application developer allocating them and allowing the garbage collector to scavenge them appropriately, <see cref="T:UIKit.UICollectionReusableView" />s are allocated by a <see cref="T:UIKit.UICollectionView" /> and those that are no longer on-screen are reused without deallocation. (See <see cref="T:UIKit.UICollectionView" /> for more discussion.)</para>
      <para>
        Each cell is an instance of the <see cref="T:UIKit.UICollectionViewCell" /> class, which is comprised of three different views, as shown in the figure below, taken from the "Introduction to Collection Views" guide:
      </para>
      <para>
        <img href="UIKit.UICollectionViewCell.png" />
      </para>
      <para>
        The Cells in the screenshot above are created by inheriting from <see cref="T:UIKit.UICollectionView" /> and setting the <see cref="P:UIKit.UICollectionView.ContentView" />, <see cref="P:UIKit.UICollectionView.ContentView" />, and <see cref="P:UIKit.UICollectionView.BackgroundView" /> properties as shown in the following code:
      </para>
      <example>
        <code lang="C#"><![CDATA[
          BackgroundView = new UIView{BackgroundColor = UIColor.Orange};
          
          SelectedBackgroundView = new UIView{BackgroundColor = UIColor.Green};
          
          ContentView.Layer.BorderColor = UIColor.LightGray.CGColor;
          ContentView.Layer.BorderWidth = 2.0f;
          ContentView.BackgroundColor = UIColor.White;
          ContentView.Transform = CGAffineTransform.MakeScale (0.8f, 0.8f);
          
          imageView = new UIImageView (UIImage.FromBundle ("placeholder.png"));
          imageView.Center = ContentView.Center;
          imageView.Transform = CGAffineTransform.MakeScale (0.7f, 0.7f);
          
          ContentView.AddSubview (imageView);          
        ]]></code>
      </example>
      <para>Since an individual instance of <see cref="T:UIKit.UICollectionViewCell" /> may be reused without being re-allocated, the application developer may also have to adjust aspects dynamically using the <see cref="M:UIKit.UICollectionViewSource.GetCell" /> method, as shown in the following code, taken from the "Introduction to Collection Views" sample. The <c>animalCell</c> is an instance of a subtype of <see cref="T:UIKit.UICollectionViewCell" /> while the <c>animal</c> variable refers to an instance of a model class. The <see cref="M:UIKit.UICollectionViewSource.GetCell" /> method sets visual aspects of the <see cref="T:UIKit.UICollectionViewCell" /> to conform to the <c>animal</c> data, in this case, setting an <c>Image</c> property appropriately.</para>
      <example>
        <code lang="C#"><![CDATA[
public override UICollectionViewCell GetCell (UICollectionView collectionView, MonoTouch.Foundation.NSIndexPath indexPath)
{
  var animalCell = (AnimalCell) collectionView.DequeueReusableCell (animalCellId, indexPath);

  var animal = animals [indexPath.Section * (animals.Count / SectionCount) + indexPath.Row];

  animalCell.Image = animal.Image;

  return animalCell;
}          
        ]]></code>
      </example>
    </remarks>
    <altmember cref="T:UIKit.UICollectionView" />
    <related type="article" href="http://docs.xamarin.com/ios/Guides/User_Interface/Introduction_to_Collection_Views">Introduction to Collection Views</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewCell_class/index.html">Apple documentation for <c>UICollectionViewCell</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewCell ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewCell (CoreGraphics.CGRect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UICollectionViewCell with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of UICollectionViewCell with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewCell (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UICollectionViewCell (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UICollectionViewCell (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewCell.UICollectionViewCellAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UICollectionViewCell/UICollectionViewCellAppearance Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell+UICollectionViewCellAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UICollectionViewCell.</para>
          <para>If developers want to control the appearance of subclasses of UICollectionViewCell, they should use the <see cref="M:UIKit.UICollectionViewCell.GetAppearance" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewCell.UICollectionViewCellAppearance AppearanceWhenContainedIn (Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionViewCell/UICollectionViewCellAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell+UICollectionViewCellAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UICollectionViewCell when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of UICollectionViewCell, they should use the <see cref="M:UIKit.UICollectionViewCell.GetAppearance" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView BackgroundView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView BackgroundView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("backgroundView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setBackgroundView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIView that is displayed behind the cell's ContentView.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView ContentView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView ContentView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("contentView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The main UIView displayed by the cell.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragStateDidChange">
      <MemberSignature Language="C#" Value="public virtual void DragStateDidChange (UIKit.UICollectionViewCellDragState dragState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DragStateDidChange(valuetype UIKit.UICollectionViewCellDragState dragState) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dragStateDidChange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dragState" Type="UIKit.UICollectionViewCellDragState" />
      </Parameters>
      <Docs>
        <param name="dragState">The drag state that changed.</param>
        <summary>Method that is called when the cell's drag state changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewCell.UICollectionViewCellAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionViewCell/UICollectionViewCellAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell+UICollectionViewCellAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewCell.UICollectionViewCellAppearance GetAppearance (UIKit.UITraitCollection traits, Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionViewCell/UICollectionViewCellAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell+UICollectionViewCellAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" /> when found in the <paramref name="containers" /> containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewCell.UICollectionViewCellAppearance GetAppearance&lt;T&gt; () where T : UIKit.UICollectionViewCell;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionViewCell/UICollectionViewCellAppearance GetAppearance&lt;(class UIKit.UICollectionViewCell) T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell+UICollectionViewCellAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UICollectionViewCell.</typeparam>
        <summary>
          <para>Obtains the appearance proxy <see cref="T:UIKit.UICollectionViewCell.UICollectionViewCellAppearance" /> for the subclass of UICollectionViewCell.</para>
        </summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UICollectionViewCell.Appearance" /> property, or the <see cref="M:UIKit.UICollectionViewCellAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UICollectionViewCell.GetAppearance<MyUICollectionViewCellSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewCell.UICollectionViewCellAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : UIKit.UICollectionViewCell;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionViewCell/UICollectionViewCellAppearance GetAppearance&lt;(class UIKit.UICollectionViewCell) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell+UICollectionViewCellAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UICollectionViewCell</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UICollectionViewCell.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>
          <para>Obtains the appearance proxy <see cref="T:UIKit.UICollectionViewCell.UICollectionViewCellAppearance" /> for the subclass of UICollectionViewCell.</para>
        </summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UICollectionViewCell.</para>
          <para>Unlike the <see cref="P:UIKit.UICollectionViewCell.Appearance" /> property, or the <see cref="M:UIKit.UICollectionViewCellAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UICollectionViewCell.GetAppearance<MyUICollectionViewCellSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewCell.UICollectionViewCellAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, Type[] containers) where T : UIKit.UICollectionViewCell;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionViewCell/UICollectionViewCellAppearance GetAppearance&lt;(class UIKit.UICollectionViewCell) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell+UICollectionViewCellAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UICollectionViewCell</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UICollectionViewCell.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>
          <para>Obtains the appearance proxy <see cref="T:UIKit.UICollectionViewCell.UICollectionViewCellAppearance" /> for the subclass of UICollectionViewCell that has the specified trait collection when the view is hosted in the specified hierarchy.</para>
        </summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UICollectionViewCell that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UICollectionViewCell.Appearance" /> property, or the <see cref="M:UIKit.UICollectionViewCellAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UICollectionViewCell.GetAppearance<MyUICollectionViewCellSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Highlighted">
      <MemberSignature Language="C#" Value="public virtual bool Highlighted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Highlighted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isHighlighted")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setHighlighted:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The highlight state of this UICollectionViewCell.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public virtual bool Selected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isSelected")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSelected:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The selection state of this UICollectionViewCell.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedBackgroundView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView SelectedBackgroundView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView SelectedBackgroundView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("selectedBackgroundView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSelectedBackgroundView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIView that is displayed, above the BackgroundView, when the cell is selected.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
