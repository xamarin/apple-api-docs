<Type Name="UIViewControllerPreviewingDelegate" FullName="UIKit.UIViewControllerPreviewingDelegate">
  <TypeSignature Language="C#" Value="public abstract class UIViewControllerPreviewingDelegate : Foundation.NSObject, IDisposable, UIKit.IUIViewControllerPreviewingDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UIViewControllerPreviewingDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIViewControllerPreviewingDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIViewControllerPreviewingDelegate" />
  <TypeSignature Language="F#" Value="type UIViewControllerPreviewingDelegate = class&#xA;    inherit NSObject&#xA;    interface IUIViewControllerPreviewingDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIViewControllerPreviewingDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIViewControllerPreviewingDelegate", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate object whose methods are called in reaction to "3D Touch" on supported hardware</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIViewControllerPreviewingDelegate_Protocol/index.html">Apple documentation for <c>UIViewControllerPreviewingDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIViewControllerPreviewingDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIViewControllerPreviewingDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIViewControllerPreviewingDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIViewControllerPreviewingDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIViewControllerPreviewingDelegate : Foundation.NSObjectFlag -&gt; UIKit.UIViewControllerPreviewingDelegate" Usage="new UIKit.UIViewControllerPreviewingDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIViewControllerPreviewingDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIViewControllerPreviewingDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIViewControllerPreviewingDelegate : nativeint -&gt; UIKit.UIViewControllerPreviewingDelegate" Usage="new UIKit.UIViewControllerPreviewingDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitViewController">
      <MemberSignature Language="C#" Value="public abstract void CommitViewController (UIKit.IUIViewControllerPreviewing previewingContext, UIKit.UIViewController viewControllerToCommit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitViewController(class UIKit.IUIViewControllerPreviewing previewingContext, class UIKit.UIViewController viewControllerToCommit) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIViewControllerPreviewingDelegate.CommitViewController(UIKit.IUIViewControllerPreviewing,UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="abstract member CommitViewController : UIKit.IUIViewControllerPreviewing * UIKit.UIViewController -&gt; unit" Usage="uIViewControllerPreviewingDelegate.CommitViewController (previewingContext, viewControllerToCommit)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIViewControllerPreviewingDelegate.CommitViewController(UIKit.IUIViewControllerPreviewing,UIKit.UIViewController)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("previewingContext:commitViewController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previewingContext" Type="UIKit.IUIViewControllerPreviewing" />
        <Parameter Name="viewControllerToCommit" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="previewingContext">The context in which the 3D Touch is occurring.</param>
        <param name="viewControllerToCommit">The <see cref="T:UIKit.UIViewController" /> to which the app should transfer control.</param>
        <summary>Called when the user performs the 3D Touch "Pop" pressure gesture that begins the transfer to the final UX, which is typically contained in the <paramref name="viewControllerToCommit" />.</summary>
        <remarks>
          <para>On hardware that supports 3D Touch (see <see cref="P:UIKit.TraitCollection.ForceTouchCapability" />), a strong push activates the transfer to the new UI, which is typically specified by <paramref name="viewControllerToCommit" />. However, the application developer can provide custom UX (for example, to provide a more in-depth editing experience) by passing their desired view controller to <see cref="M:UIKit.ViewController.ShowViewController" /> inside this method.</para>
          <example>
            <code lang="C#"><![CDATA[
public void CommitViewController (IUIViewControllerPreviewing previewingContext, UIViewController viewControllerToCommit)
{
			ShowViewController (viewControllerToCommit, this);
}
    ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewControllerForPreview">
      <MemberSignature Language="C#" Value="public abstract UIKit.UIViewController GetViewControllerForPreview (UIKit.IUIViewControllerPreviewing previewingContext, CoreGraphics.CGPoint location);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIViewController GetViewControllerForPreview(class UIKit.IUIViewControllerPreviewing previewingContext, valuetype CoreGraphics.CGPoint location) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIViewControllerPreviewingDelegate.GetViewControllerForPreview(UIKit.IUIViewControllerPreviewing,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetViewControllerForPreview : UIKit.IUIViewControllerPreviewing * CoreGraphics.CGPoint -&gt; UIKit.UIViewController" Usage="uIViewControllerPreviewingDelegate.GetViewControllerForPreview (previewingContext, location)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIViewControllerPreviewingDelegate.GetViewControllerForPreview(UIKit.IUIViewControllerPreviewing,CoreGraphics.CGPoint)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("previewingContext:viewControllerForLocation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previewingContext" Type="UIKit.IUIViewControllerPreviewing" />
        <Parameter Name="location" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="previewingContext">The context in which the 3D Touch is occurring..</param>
        <param name="location">The location where the 3D touch is occurring.</param>
        <summary>Called when the user performs the 3D Touch "Peek" pressure gesture.</summary>
        <returns>The <see cref="T:UIKit.UIViewController" /> that provides the 3D Touch "Peek" UX.</returns>
        <remarks>
          <para>On hardware that supports 3D Touch (see <see cref="P:UIKit.TraitCollection.ForceTouchCapability" />), this method is called when the 3D Touch triggers the "Peek" action. </para>
          <para>One feature of 3D Touch is the ability to blur the background except for the element that is the subject of the touch. Application developers control this behavior by to setting the <see cref="P:UIKit.IUIViewControllingPreviewing.SourceRect" /> to the control that should not be blurred. For instance, in a table, one can prevent the selected cell from blurring by retrieving the cell at the <paramref name="location" /> at which the 3D Touch is occurring and then setting the <see cref="P:UIKit.IUIViewControllerPreviewing.SourceRect" /> to the <see cref="P:UIKit.UIView.Frame" /> of the cell:</para>
          <example>
            <code lang="C#"><![CDATA[
// Obtain the index path and the cell that was pressed. (Checks for null not shown.)
var indexPath = TableView.IndexPathForRowAtPoint (location);
var cell = TableView.CellAt (indexPath);
previewingContext.SourceRect = cell.Frame;
    ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
