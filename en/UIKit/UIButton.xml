<Type Name="UIButton" FullName="UIKit.UIButton">
  <TypeSignature Language="C#" Value="public class UIButton : UIKit.UIControl, IDisposable, UIKit.IUIAccessibilityContentSizeCategoryImageAdjusting, UIKit.IUISpringLoadedInteractionSupporting" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIButton extends UIKit.UIControl implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIAccessibilityContentSizeCategoryImageAdjusting, class UIKit.IUISpringLoadedInteractionSupporting" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIButton" />
  <TypeSignature Language="F#" Value="type UIButton = class&#xA;    inherit UIControl&#xA;    interface IUIAccessibilityContentSizeCategoryImageAdjusting&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUISpringLoadedInteractionSupporting" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIAccessibilityContentSizeCategoryImageAdjusting</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUISpringLoadedInteractionSupporting</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIButton", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Button control.</summary>
    <remarks>A <see cref="T:UIKit.UIControl" /> that receives touch events. <see cref="T:UIKit.UIButton" />s are generally visible and often have a text <see cref="M:UIKit.UIButton.Title(UIKit.UIControlState)" />. </remarks>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Standard_Controls/Buttons/Create_Different_Types_of_Buttons">Create Different Types of Buttons</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Standard_Controls/Buttons/Handle_Clicks">Handle Clicks</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Standard_Controls/Buttons/Set_Button_Text">Set Button Text</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Standard_Controls/Buttons/Use_an_Image_for_a_Button">Use an Image for a Button</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIButton_Class/index.html">Apple documentation for <c>UIButton</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIButton ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIButton (CoreGraphics.CGRect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.#ctor(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="new UIKit.UIButton : CoreGraphics.CGRect -&gt; UIKit.UIButton" Usage="new UIKit.UIButton frame" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UIButton with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of UIButton with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIButton (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UIButton : Foundation.NSCoder -&gt; UIKit.UIButton" Usage="new UIKit.UIButton coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIButton (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIButton : Foundation.NSObjectFlag -&gt; UIKit.UIButton" Usage="new UIKit.UIButton t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIButton (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIButton : nativeint -&gt; UIKit.UIButton" Usage="new UIKit.UIButton handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIButton (UIKit.UIButtonType type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype UIKit.UIButtonType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.#ctor(UIKit.UIButtonType)" />
      <MemberSignature Language="F#" Value="new UIKit.UIButton : UIKit.UIButtonType -&gt; UIKit.UIButton" Usage="new UIKit.UIButton type" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="type" Type="UIKit.UIButtonType" />
      </Parameters>
      <Docs>
        <param name="type">Button type to create.</param>
        <summary>Preferred constructor for UIButtons, but can not be used when subclassing.</summary>
        <remarks>
          <para>
	    This constructor should only be used in user code when you plan on using the C# syntax to initialize properties after the object has been created, like this:
	  </para>
          <example>
            <code lang="C#"><![CDATA[
var b = new UIButton (UIButtonType.Custom) {
    AdjustsImageWhenHighlighted = true,
    ContentEdgeInsets = myInsets;
};
	    ]]></code>
          </example>
          <para>

	    This constructor can not be used when subclassing as it is
	    not a real constructor, but instead a convenience
	    constructor that calls the static <see cref="M:UIKit.UIButton.FromType(UIKit.UIButtonType)" /> method and
	    then wraps the result into this object.  So you should
	    avoid subclassing UIButton and then calling into this
	    constructor from your subclass constructor.

	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustsImageSizeForAccessibilityContentSizeCategory">
      <MemberSignature Language="C#" Value="public virtual bool AdjustsImageSizeForAccessibilityContentSizeCategory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AdjustsImageSizeForAccessibilityContentSizeCategory" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.AdjustsImageSizeForAccessibilityContentSizeCategory" />
      <MemberSignature Language="F#" Value="member this.AdjustsImageSizeForAccessibilityContentSizeCategory : bool with get, set" Usage="UIKit.UIButton.AdjustsImageSizeForAccessibilityContentSizeCategory" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUIAccessibilityContentSizeCategoryImageAdjusting.AdjustsImageSizeForAccessibilityContentSizeCategory</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("adjustsImageSizeForAccessibilityContentSizeCategory")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAdjustsImageSizeForAccessibilityContentSizeCategory:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs tool="CopiedFromAncestor">
        <summary>Returns <see langword="true" /> if the image can adjust size in reaction to accessibility requirements.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustsImageWhenDisabled">
      <MemberSignature Language="C#" Value="public virtual bool AdjustsImageWhenDisabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AdjustsImageWhenDisabled" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.AdjustsImageWhenDisabled" />
      <MemberSignature Language="F#" Value="member this.AdjustsImageWhenDisabled : bool with get, set" Usage="UIKit.UIButton.AdjustsImageWhenDisabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("adjustsImageWhenDisabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAdjustsImageWhenDisabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the image changes when this UIButton is disabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdjustsImageWhenHighlighted">
      <MemberSignature Language="C#" Value="public virtual bool AdjustsImageWhenHighlighted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AdjustsImageWhenHighlighted" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.AdjustsImageWhenHighlighted" />
      <MemberSignature Language="F#" Value="member this.AdjustsImageWhenHighlighted : bool with get, set" Usage="UIKit.UIButton.AdjustsImageWhenHighlighted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("adjustsImageWhenHighlighted")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAdjustsImageWhenHighlighted:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the image changes when this UIButton is highlighted.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIButton.UIButtonAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIButton/UIButtonAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : UIKit.UIButton.UIButtonAppearance" Usage="UIKit.UIButton.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIButton+UIButtonAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UIButton.</para>
          <para>If developers want to control the appearance of subclasses of UIButton, they should use the <see cref="M:UIKit.UIButton.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static UIKit.UIButton.UIButtonAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIButton/UIButtonAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; UIKit.UIButton.UIButtonAppearance" Usage="UIKit.UIButton.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIButton+UIButtonAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIButton when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of UIButton, they should use the <see cref="M:UIKit.UIButton.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundImageForState">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage BackgroundImageForState (UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage BackgroundImageForState(valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.BackgroundImageForState(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member BackgroundImageForState : UIKit.UIControlState -&gt; UIKit.UIImage&#xA;override this.BackgroundImageForState : UIKit.UIControlState -&gt; UIKit.UIImage" Usage="uIButton.BackgroundImageForState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("backgroundImageForState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>The background image used for the specified state.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundRectForBounds">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect BackgroundRectForBounds (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect BackgroundRectForBounds(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.BackgroundRectForBounds(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member BackgroundRectForBounds : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect&#xA;override this.BackgroundRectForBounds : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect" Usage="uIButton.BackgroundRectForBounds rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("backgroundRectForBounds:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>The RectangleF in which this UIButton draws its background.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ButtonType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIButtonType ButtonType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIButtonType ButtonType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.ButtonType" />
      <MemberSignature Language="F#" Value="member this.ButtonType : UIKit.UIButtonType" Usage="UIKit.UIButton.ButtonType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("buttonType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIButtonType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIButtonType of this UIButton.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIButton.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentEdgeInsets">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIEdgeInsets ContentEdgeInsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIEdgeInsets ContentEdgeInsets" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.ContentEdgeInsets" />
      <MemberSignature Language="F#" Value="member this.ContentEdgeInsets : UIKit.UIEdgeInsets with get, set" Usage="UIKit.UIButton.ContentEdgeInsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("contentEdgeInsets")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setContentEdgeInsets:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The insets or outsets for the RectangleF surrounding this UIButton's contents.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentRectForBounds">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ContentRectForBounds (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect ContentRectForBounds(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.ContentRectForBounds(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member ContentRectForBounds : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect&#xA;override this.ContentRectForBounds : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect" Usage="uIButton.ContentRectForBounds rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("contentRectForBounds:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>The RectangleF in which this UIButton draws its entire content.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentAttributedTitle">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString CurrentAttributedTitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSAttributedString CurrentAttributedTitle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.CurrentAttributedTitle" />
      <MemberSignature Language="F#" Value="member this.CurrentAttributedTitle : Foundation.NSAttributedString" Usage="UIKit.UIButton.CurrentAttributedTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("currentAttributedTitle")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentAttributedTitle", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The title currently being displayed by this UIButton, with attributes. Read-only.</summary>
        <value>Null if it is not set.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage CurrentBackgroundImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage CurrentBackgroundImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.CurrentBackgroundImage" />
      <MemberSignature Language="F#" Value="member this.CurrentBackgroundImage : UIKit.UIImage" Usage="UIKit.UIButton.CurrentBackgroundImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("currentBackgroundImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentBackgroundImage", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIImage that is displayed in the background of this UIButton. Read-only.</summary>
        <value>To be added.</value>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage CurrentImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage CurrentImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.CurrentImage" />
      <MemberSignature Language="F#" Value="member this.CurrentImage : UIKit.UIImage" Usage="UIKit.UIButton.CurrentImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("currentImage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentImage", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIImage that is displayed on this UIButton. Read-only.</summary>
        <value>To be added.</value>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTitle">
      <MemberSignature Language="C#" Value="public virtual string CurrentTitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string CurrentTitle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.CurrentTitle" />
      <MemberSignature Language="F#" Value="member this.CurrentTitle : string" Usage="UIKit.UIButton.CurrentTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("currentTitle")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentTitle", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The title currently being displayed by this UIButton. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTitleColor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor CurrentTitleColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor CurrentTitleColor" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.CurrentTitleColor" />
      <MemberSignature Language="F#" Value="member this.CurrentTitleColor : UIKit.UIColor" Usage="UIKit.UIButton.CurrentTitleColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("currentTitleColor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentTitleColor", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The color used to display this UIButton's CurrentTitle. Read-only.</summary>
        <value>To be added.</value>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTitleShadowColor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor CurrentTitleShadowColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor CurrentTitleShadowColor" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.CurrentTitleShadowColor" />
      <MemberSignature Language="F#" Value="member this.CurrentTitleShadowColor : UIKit.UIColor" Usage="UIKit.UIButton.CurrentTitleShadowColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("currentTitleShadowColor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("currentTitleShadowColor", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The color being used for this UIButton's title's shadow. Read-only.</summary>
        <value>To be added.</value>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Font">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFont Font { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIFont Font" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.Font" />
      <MemberSignature Language="F#" Value="member this.Font : UIKit.UIFont with get, set" Usage="UIKit.UIButton.Font" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("font")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setFont:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("font", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setFont:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromType">
      <MemberSignature Language="C#" Value="public static UIKit.UIButton FromType (UIKit.UIButtonType type);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIButton FromType(valuetype UIKit.UIButtonType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.FromType(UIKit.UIButtonType)" />
      <MemberSignature Language="F#" Value="static member FromType : UIKit.UIButtonType -&gt; UIKit.UIButton" Usage="UIKit.UIButton.FromType type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("buttonWithType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIButton</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="UIKit.UIButtonType" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>Creates a new UIButton of the specified type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIButton.UIButtonAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIButton/UIButtonAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UIButton.UIButtonAppearance" Usage="UIKit.UIButton.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIButton+UIButtonAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIButton.UIButtonAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIButton/UIButtonAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UIButton.UIButtonAppearance" Usage="UIKit.UIButton.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIButton+UIButtonAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" /> when found in the <paramref name="containers" /> containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIButton.UIButtonAppearance GetAppearance&lt;T&gt; () where T : UIKit.UIButton;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIButton/UIButtonAppearance GetAppearance&lt;(class UIKit.UIButton) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; UIKit.UIButton.UIButtonAppearance (requires 'T :&gt; UIKit.UIButton)" Usage="UIKit.UIButton.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIButton+UIButtonAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIButton.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIButton.UIButtonAppearance" /> for the subclass of UIButton.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UIButton.Appearance" /> property, or the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIButton.GetAppearance<MyUIButtonSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIButton.UIButtonAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : UIKit.UIButton;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIButton/UIButtonAppearance GetAppearance&lt;(class UIKit.UIButton) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UIButton.UIButtonAppearance (requires 'T :&gt; UIKit.UIButton)" Usage="UIKit.UIButton.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIButton+UIButtonAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UIButton</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIButton.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIButton.UIButtonAppearance" /> for the subclass of UIButton.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIButton.</para>
          <para>Unlike the <see cref="P:UIKit.UIButton.Appearance" /> property, or the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIButton.GetAppearance<MyUIButtonSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIButton.UIButtonAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : UIKit.UIButton;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIButton/UIButtonAppearance GetAppearance&lt;(class UIKit.UIButton) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UIButton.UIButtonAppearance (requires 'T :&gt; UIKit.UIButton)" Usage="UIKit.UIButton.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIButton+UIButtonAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UIButton</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIButton.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIButton.UIButtonAppearance" /> for the subclass of UIButton that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIButton that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UIButton.Appearance" /> property, or the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIButton.GetAppearance<MyUIButtonSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAttributedTitle">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString GetAttributedTitle (UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSAttributedString GetAttributedTitle(valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.GetAttributedTitle(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member GetAttributedTitle : UIKit.UIControlState -&gt; Foundation.NSAttributedString&#xA;override this.GetAttributedTitle : UIKit.UIControlState -&gt; Foundation.NSAttributedString" Usage="uIButton.GetAttributedTitle state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("attributedTitleForState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="state">The control state.</param>
        <summary>The title, with style attributes, for the specified state.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageEdgeInsets">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIEdgeInsets ImageEdgeInsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIEdgeInsets ImageEdgeInsets" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.ImageEdgeInsets" />
      <MemberSignature Language="F#" Value="member this.ImageEdgeInsets : UIKit.UIEdgeInsets with get, set" Usage="UIKit.UIButton.ImageEdgeInsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("imageEdgeInsets")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setImageEdgeInsets:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The insets or outsets for the RectangleF around this UIButton's CurrentImage.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageForState">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage ImageForState (UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage ImageForState(valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.ImageForState(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member ImageForState : UIKit.UIControlState -&gt; UIKit.UIImage&#xA;override this.ImageForState : UIKit.UIControlState -&gt; UIKit.UIImage" Usage="uIButton.ImageForState state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageForState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>The UIImage used for the specified state.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageRectForContentRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ImageRectForContentRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect ImageRectForContentRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.ImageRectForContentRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member ImageRectForContentRect : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect&#xA;override this.ImageRectForContentRect : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect" Usage="uIButton.ImageRectForContentRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageRectForContentRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>The RectangleF in which this UIButton draws its CurrentImage.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImageView ImageView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImageView ImageView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.ImageView" />
      <MemberSignature Language="F#" Value="member this.ImageView : UIKit.UIImageView" Usage="UIKit.UIButton.ImageView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("imageView")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("imageView", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImageView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This UIButton's UIImageView. Read-ony.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineBreakMode">
      <MemberSignature Language="C#" Value="public virtual UIKit.UILineBreakMode LineBreakMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UILineBreakMode LineBreakMode" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.LineBreakMode" />
      <MemberSignature Language="F#" Value="member this.LineBreakMode : UIKit.UILineBreakMode with get, set" Usage="UIKit.UIButton.LineBreakMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("lineBreakMode")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setLineBreakMode:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UILineBreakMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The line-break mode of the button.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReverseTitleShadowWhenHighlighted">
      <MemberSignature Language="C#" Value="public virtual bool ReverseTitleShadowWhenHighlighted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReverseTitleShadowWhenHighlighted" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.ReverseTitleShadowWhenHighlighted" />
      <MemberSignature Language="F#" Value="member this.ReverseTitleShadowWhenHighlighted : bool with get, set" Usage="UIKit.UIButton.ReverseTitleShadowWhenHighlighted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("reversesTitleShadowWhenHighlighted")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setReversesTitleShadowWhenHighlighted:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the title shadow should change when this UIButton is highlighted.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttributedTitle">
      <MemberSignature Language="C#" Value="public virtual void SetAttributedTitle (Foundation.NSAttributedString title, UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttributedTitle(class Foundation.NSAttributedString title, valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.SetAttributedTitle(Foundation.NSAttributedString,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetAttributedTitle : Foundation.NSAttributedString * UIKit.UIControlState -&gt; unit&#xA;override this.SetAttributedTitle : Foundation.NSAttributedString * UIKit.UIControlState -&gt; unit" Usage="uIButton.SetAttributedTitle (title, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setAttributedTitle:forState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="Foundation.NSAttributedString" />
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="title">The attributed string to set.</param>
        <param name="state">The scope for the text.</param>
        <summary>Sets the button title with an attributed string for a particular control state.</summary>
        <remarks>
          <example>
            <code lang="C#"><![CDATA[
var title = new NSAttributedString (
    "Hello, World",
    font: UIFont.FromName ("HoeflerText-Regular", 24.0f),
    foregroundColor: UIColor.Red,
    strokeWidth: 4
);
myButton.SetAttributedTitle (title, UIControlState.Normal);
	    ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundImage (UIKit.UIImage image, UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundImage(class UIKit.UIImage image, valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetBackgroundImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit&#xA;override this.SetBackgroundImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit" Usage="uIButton.SetBackgroundImage (image, forState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setBackgroundImage:forState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="image">
          <para>The background image to set, use null to clear it.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="forState">To be added.</param>
        <summary>Sets the background image for the specified button state.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImage">
      <MemberSignature Language="C#" Value="public virtual void SetImage (UIKit.UIImage image, UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImage(class UIKit.UIImage image, valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.SetImage(UIKit.UIImage,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit&#xA;override this.SetImage : UIKit.UIImage * UIKit.UIControlState -&gt; unit" Usage="uIButton.SetImage (image, forState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setImage:forState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="image">
          <para>The image to set, pass null to clear it.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="forState">To be added.</param>
        <summary>Sets the image for the specified button state.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTitle">
      <MemberSignature Language="C#" Value="public virtual void SetTitle (string title, UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitle(string title, valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.SetTitle(System.String,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetTitle : string * UIKit.UIControlState -&gt; unit&#xA;override this.SetTitle : string * UIKit.UIControlState -&gt; unit" Usage="uIButton.SetTitle (title, forState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTitle:forState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="title">
          <para>The title to set, pass null to clear it.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="forState">To be added.</param>
        <summary>Sets the title for the specified button state.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTitleColor">
      <MemberSignature Language="C#" Value="public virtual void SetTitleColor (UIKit.UIColor color, UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitleColor(class UIKit.UIColor color, valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.SetTitleColor(UIKit.UIColor,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetTitleColor : UIKit.UIColor * UIKit.UIControlState -&gt; unit&#xA;override this.SetTitleColor : UIKit.UIColor * UIKit.UIControlState -&gt; unit" Usage="uIButton.SetTitleColor (color, forState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTitleColor:forState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="UIKit.UIColor" />
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="color">
          <para>The color to set, pass null to clear it.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="forState">To be added.</param>
        <summary>Sets the title color for the specified button state.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTitleShadowColor">
      <MemberSignature Language="C#" Value="public virtual void SetTitleShadowColor (UIKit.UIColor color, UIKit.UIControlState forState);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitleShadowColor(class UIKit.UIColor color, valuetype UIKit.UIControlState forState) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.SetTitleShadowColor(UIKit.UIColor,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member SetTitleShadowColor : UIKit.UIColor * UIKit.UIControlState -&gt; unit&#xA;override this.SetTitleShadowColor : UIKit.UIColor * UIKit.UIControlState -&gt; unit" Usage="uIButton.SetTitleShadowColor (color, forState)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTitleShadowColor:forState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="color" Type="UIKit.UIColor" />
        <Parameter Name="forState" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="color">
          <para>The shadow color to set, pass null to clear it.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="forState">To be added.</param>
        <summary>Sets the title shadow color for the specified button state.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsTouchWhenHighlighted">
      <MemberSignature Language="C#" Value="public virtual bool ShowsTouchWhenHighlighted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsTouchWhenHighlighted" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.ShowsTouchWhenHighlighted" />
      <MemberSignature Language="F#" Value="member this.ShowsTouchWhenHighlighted : bool with get, set" Usage="UIKit.UIButton.ShowsTouchWhenHighlighted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("showsTouchWhenHighlighted")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setShowsTouchWhenHighlighted:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UIButton should glow when tapped.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpringLoaded">
      <MemberSignature Language="C#" Value="public virtual bool SpringLoaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SpringLoaded" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.SpringLoaded" />
      <MemberSignature Language="F#" Value="member this.SpringLoaded : bool with get, set" Usage="UIKit.UIButton.SpringLoaded" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUISpringLoadedInteractionSupporting.SpringLoaded</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isSpringLoaded")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSpringLoaded:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs tool="CopiedFromAncestor">
        <summary>Gets or sets a Boolean value that controls whether the object participates in spring-loaded interactions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public virtual string Title (UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string Title(valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.Title(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member Title : UIKit.UIControlState -&gt; string&#xA;override this.Title : UIKit.UIControlState -&gt; string" Usage="uIButton.Title state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("titleForState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>The title for the specified button state.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleColor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor TitleColor (UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIColor TitleColor(valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.TitleColor(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member TitleColor : UIKit.UIControlState -&gt; UIKit.UIColor&#xA;override this.TitleColor : UIKit.UIControlState -&gt; UIKit.UIColor" Usage="uIButton.TitleColor state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("titleColorForState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>The title color for the specified button state.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleEdgeInsets">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIEdgeInsets TitleEdgeInsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIEdgeInsets TitleEdgeInsets" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.TitleEdgeInsets" />
      <MemberSignature Language="F#" Value="member this.TitleEdgeInsets : UIKit.UIEdgeInsets with get, set" Usage="UIKit.UIButton.TitleEdgeInsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("titleEdgeInsets")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setTitleEdgeInsets:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The insets or outsets for the RectangleF around this UIButton's CurrentTitle.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleLabel">
      <MemberSignature Language="C#" Value="public virtual UIKit.UILabel TitleLabel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UILabel TitleLabel" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.TitleLabel" />
      <MemberSignature Language="F#" Value="member this.TitleLabel : UIKit.UILabel" Usage="UIKit.UIButton.TitleLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("titleLabel")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("titleLabel", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UILabel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIView that displays the value of this UIButton's CurrentTitle. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleRectForContentRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect TitleRectForContentRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect TitleRectForContentRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.TitleRectForContentRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member TitleRectForContentRect : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect&#xA;override this.TitleRectForContentRect : CoreGraphics.CGRect -&gt; CoreGraphics.CGRect" Usage="uIButton.TitleRectForContentRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("titleRectForContentRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>The RectangleF in which this UIButton draws its title.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleShadowColor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor TitleShadowColor (UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIColor TitleShadowColor(valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIButton.TitleShadowColor(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="abstract member TitleShadowColor : UIKit.UIControlState -&gt; UIKit.UIColor&#xA;override this.TitleShadowColor : UIKit.UIControlState -&gt; UIKit.UIColor" Usage="uIButton.TitleShadowColor state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("titleShadowColorForState:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <summary>The shadow color of the title for the specified button state.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIButton.Appearance" /> property and the <see cref="M:UIKit.UIButton.AppearanceWhenContainedIn(System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleShadowOffset">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize TitleShadowOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize TitleShadowOffset" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIButton.TitleShadowOffset" />
      <MemberSignature Language="F#" Value="member this.TitleShadowOffset : CoreGraphics.CGSize with get, set" Usage="UIKit.UIButton.TitleShadowOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("titleShadowOffset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setTitleShadowOffset:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 3, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The offset used for creating the title's shadow.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
