<Type Name="IUITextInputTokenizer" FullName="UIKit.IUITextInputTokenizer">
  <TypeSignature Language="C#" Value="public interface IUITextInputTokenizer : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUITextInputTokenizer implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="UITextInputTokenizer", WrapperType=typeof(UIKit.UITextInputTokenizerWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetRangeEnclosingPosition", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextRange), Selector="rangeEnclosingPosition:withGranularity:inDirection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ProbeDirection", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="isPosition:atBoundary:inDirection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetPosition", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextPosition), Selector="positionFromPosition:toBoundary:inDirection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ProbeDirectionWithinTextUnit", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="isPosition:withinTextUnit:inDirection:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <para>Interface representing the required methods (if any) of the protocol <see cref="T:UIKit.UITextInputTokenizer" />.</para>
    </summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:UIKit.UITextInputTokenizer" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:UIKit.UITextInputTokenizer" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:UIKit.UITextInputTokenizer_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public UIKit.UITextPosition GetPosition (UIKit.UITextPosition fromPosition, UIKit.UITextGranularity toBoundary, UIKit.UITextDirection inDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextPosition GetPosition(class UIKit.UITextPosition fromPosition, valuetype UIKit.UITextGranularity toBoundary, valuetype UIKit.UITextDirection inDirection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("positionFromPosition:toBoundary:inDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="UIKit.UITextPosition" />
        <Parameter Name="toBoundary" Type="UIKit.UITextGranularity" />
        <Parameter Name="inDirection" Type="UIKit.UITextDirection" />
      </Parameters>
      <Docs>
        <param name="fromPosition">To be added.</param>
        <param name="toBoundary">To be added.</param>
        <param name="inDirection">To be added.</param>
        <summary>Returns the next <paramref name="toBoundary" /> type of boundary in the <paramref name="inDirection" /> direction from <paramref name="fromPosition" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetRangeEnclosingPosition">
      <MemberSignature Language="C#" Value="public UIKit.UITextRange GetRangeEnclosingPosition (UIKit.UITextPosition position, UIKit.UITextGranularity granularity, UIKit.UITextDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextRange GetRangeEnclosingPosition(class UIKit.UITextPosition position, valuetype UIKit.UITextGranularity granularity, valuetype UIKit.UITextDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("rangeEnclosingPosition:withGranularity:inDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="UIKit.UITextPosition" />
        <Parameter Name="granularity" Type="UIKit.UITextGranularity" />
        <Parameter Name="direction" Type="UIKit.UITextDirection" />
      </Parameters>
      <Docs>
        <param name="position">To be added.</param>
        <param name="granularity">To be added.</param>
        <param name="direction">To be added.</param>
        <summary>The range for the text enclosing a text position in a text unit of the specified granularity in the specified direction.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProbeDirection">
      <MemberSignature Language="C#" Value="public bool ProbeDirection (UIKit.UITextPosition probePosition, UIKit.UITextGranularity atBoundary, UIKit.UITextDirection inDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ProbeDirection(class UIKit.UITextPosition probePosition, valuetype UIKit.UITextGranularity atBoundary, valuetype UIKit.UITextDirection inDirection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("isPosition:atBoundary:inDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probePosition" Type="UIKit.UITextPosition" />
        <Parameter Name="atBoundary" Type="UIKit.UITextGranularity" />
        <Parameter Name="inDirection" Type="UIKit.UITextDirection" />
      </Parameters>
      <Docs>
        <param name="probePosition">To be added.</param>
        <param name="atBoundary">To be added.</param>
        <param name="inDirection">To be added.</param>
        <summary>Returns whether the <paramref name="probePosition" /> position is at a <paramref name="toBoundary" /> type of boundary taken from the <paramref name="inDirection" /> direction.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProbeDirectionWithinTextUnit">
      <MemberSignature Language="C#" Value="public bool ProbeDirectionWithinTextUnit (UIKit.UITextPosition probePosition, UIKit.UITextGranularity withinTextUnit, UIKit.UITextDirection inDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ProbeDirectionWithinTextUnit(class UIKit.UITextPosition probePosition, valuetype UIKit.UITextGranularity withinTextUnit, valuetype UIKit.UITextDirection inDirection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("isPosition:withinTextUnit:inDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="probePosition" Type="UIKit.UITextPosition" />
        <Parameter Name="withinTextUnit" Type="UIKit.UITextGranularity" />
        <Parameter Name="inDirection" Type="UIKit.UITextDirection" />
      </Parameters>
      <Docs>
        <param name="probePosition">To be added.</param>
        <param name="withinTextUnit">To be added.</param>
        <param name="inDirection">To be added.</param>
        <summary>Returns whether the <paramref name="probePosition" /> position is within a <paramref name="withinTextUnit" /> type of text unit taken from the <paramref name="inDirection" /> direction.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
