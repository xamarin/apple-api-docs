<Type Name="IUIViewControllerTransitionCoordinator" FullName="UIKit.IUIViewControllerTransitionCoordinator">
  <TypeSignature Language="C#" Value="public interface IUIViewControllerTransitionCoordinator : IDisposable, UIKit.IUIViewControllerTransitionCoordinatorContext" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUIViewControllerTransitionCoordinator implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIViewControllerTransitionCoordinatorContext" />
  <TypeSignature Language="DocId" Value="T:UIKit.IUIViewControllerTransitionCoordinator" />
  <TypeSignature Language="F#" Value="type IUIViewControllerTransitionCoordinator = interface&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUIViewControllerTransitionCoordinatorContext" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIViewControllerTransitionCoordinatorContext</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="UIViewControllerTransitionCoordinator", WrapperType=typeof(UIKit.UIViewControllerTransitionCoordinatorWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="AnimateAlongsideTransition", ParameterBlockProxy=new System.Type[] { typeof(ObjCRuntime.Trampolines/NIDActionArity1V198), typeof(ObjCRuntime.Trampolines/NIDActionArity1V198) }, ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(System.Action`1&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;), typeof(System.Action`1&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;) }, ReturnType=typeof(System.Boolean), Selector="animateAlongsideTransition:completion:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="AnimateAlongsideTransitionInView", ParameterBlockProxy=new System.Type[] { null, typeof(ObjCRuntime.Trampolines/NIDActionArity1V198), typeof(ObjCRuntime.Trampolines/NIDActionArity1V198) }, ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UIView), typeof(System.Action`1&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;), typeof(System.Action`1&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;) }, ReturnType=typeof(System.Boolean), Selector="animateAlongsideTransitionInView:animation:completion:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="NotifyWhenInteractionEndsUsingBlock", ParameterBlockProxy=new System.Type[] { typeof(ObjCRuntime.Trampolines/NIDActionArity1V198) }, ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.Action`1&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;) }, Selector="notifyWhenInteractionEndsUsingBlock:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="NotifyWhenInteractionChanges", ParameterBlockProxy=new System.Type[] { typeof(ObjCRuntime.Trampolines/NIDActionArity1V198) }, ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.Action`1&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;) }, Selector="notifyWhenInteractionChangesUsingBlock:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface that, together with the <see cref="T:UIKit.UIViewControllerTransitionCoordinator_Extensions" /> class, comprise the UIViewControllerTransitionCoordinator protocol.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AnimateAlongsideTransition">
      <MemberSignature Language="C#" Value="public bool AnimateAlongsideTransition (Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt; animate, Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AnimateAlongsideTransition(class System.Action`1&lt;class UIKit.IUIViewControllerTransitionCoordinatorContext&gt; animate, class System.Action`1&lt;class UIKit.IUIViewControllerTransitionCoordinatorContext&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerTransitionCoordinator.AnimateAlongsideTransition(System.Action{UIKit.IUIViewControllerTransitionCoordinatorContext},System.Action{UIKit.IUIViewControllerTransitionCoordinatorContext})" />
      <MemberSignature Language="F#" Value="abstract member AnimateAlongsideTransition : Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt; * Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt; -&gt; bool" Usage="iUIViewControllerTransitionCoordinator.AnimateAlongsideTransition (animate, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("animateAlongsideTransition:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animate" Type="System.Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V198))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="completion" Type="System.Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V198))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="animate">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Runs the <paramref name="animate" /> animation simultaneously with the animated view controller transition, and runs <paramref name="completion" /> when it is finished.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnimateAlongsideTransitionInView">
      <MemberSignature Language="C#" Value="public bool AnimateAlongsideTransitionInView (UIKit.UIView view, Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt; animation, Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AnimateAlongsideTransitionInView(class UIKit.UIView view, class System.Action`1&lt;class UIKit.IUIViewControllerTransitionCoordinatorContext&gt; animation, class System.Action`1&lt;class UIKit.IUIViewControllerTransitionCoordinatorContext&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerTransitionCoordinator.AnimateAlongsideTransitionInView(UIKit.UIView,System.Action{UIKit.IUIViewControllerTransitionCoordinatorContext},System.Action{UIKit.IUIViewControllerTransitionCoordinatorContext})" />
      <MemberSignature Language="F#" Value="abstract member AnimateAlongsideTransitionInView : UIKit.UIView * Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt; * Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt; -&gt; bool" Usage="iUIViewControllerTransitionCoordinator.AnimateAlongsideTransitionInView (view, animation, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("animateAlongsideTransitionInView:animation:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="UIKit.UIView" />
        <Parameter Name="animation" Type="System.Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V198))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="completion" Type="System.Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V198))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <param name="animation">To be added.</param>
        <param name="completion">To be added.</param>
        <summary>Runs the <paramref name="animate" /> animation inside of <paramref name="view" />, and runs <paramref name="completion" /> when it is finished.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyWhenInteractionEndsUsingBlock">
      <MemberSignature Language="C#" Value="public void NotifyWhenInteractionEndsUsingBlock (Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyWhenInteractionEndsUsingBlock(class System.Action`1&lt;class UIKit.IUIViewControllerTransitionCoordinatorContext&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerTransitionCoordinator.NotifyWhenInteractionEndsUsingBlock(System.Action{UIKit.IUIViewControllerTransitionCoordinatorContext})" />
      <MemberSignature Language="F#" Value="abstract member NotifyWhenInteractionEndsUsingBlock : Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt; -&gt; unit" Usage="iUIViewControllerTransitionCoordinator.NotifyWhenInteractionEndsUsingBlock handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("notifyWhenInteractionEndsUsingBlock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'NotifyWhenInteractionChanges' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'NotifyWhenInteractionChanges' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;UIKit.IUIViewControllerTransitionCoordinatorContext&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V198))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <summary>Developers should not use this deprecated method. Developers should use 'NotifyWhenInteractionChanges' instead.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
