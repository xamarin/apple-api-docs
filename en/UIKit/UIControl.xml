<Type Name="UIControl" FullName="UIKit.UIControl">
  <TypeSignature Language="C#" Value="public class UIControl : UIKit.UIView" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIControl extends UIKit.UIView" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIControl" />
  <TypeSignature Language="F#" Value="type UIControl = class&#xA;    inherit UIView" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIView</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIControl", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The base class for controls in MonoTouch.UIKit.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MapDemo">Example_ContentControls</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/Drawing/">Example_Drawing</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MonoCatalog-MonoDevelop/">monocatalog</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIControl_Class/index.html">Apple documentation for <c>UIControl</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIControl (CoreGraphics.CGRect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.#ctor(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="new UIKit.UIControl : CoreGraphics.CGRect -&gt; UIKit.UIControl" Usage="new UIKit.UIControl frame" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UIControl with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of UIControl with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIControl (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UIControl : Foundation.NSCoder -&gt; UIKit.UIControl" Usage="new UIKit.UIControl coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIControl (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIControl : Foundation.NSObjectFlag -&gt; UIKit.UIControl" Usage="new UIKit.UIControl t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIControl (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIControl : nativeint -&gt; UIKit.UIControl" Usage="new UIKit.UIControl handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public void AddTarget (EventHandler notification, UIKit.UIControlEvent events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddTarget(class System.EventHandler notification, valuetype UIKit.UIControlEvent events) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.AddTarget(System.EventHandler,UIKit.UIControlEvent)" />
      <MemberSignature Language="F#" Value="member this.AddTarget : EventHandler * UIKit.UIControlEvent -&gt; unit" Usage="uIControl.AddTarget (notification, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notification" Type="System.EventHandler" />
        <Parameter Name="events" Type="UIKit.UIControlEvent" />
      </Parameters>
      <Docs>
        <param name="notification">EventHandler to invoke.</param>
        <param name="events">Event mask that will trigger the event to be invoked.</param>
        <summary>Adds an event handler for the specified set of events.</summary>
        <remarks>The <paramref name="notification" /> handler will be invoked when the control receives any of the events listed in the <paramref name="events" /> mask.   The </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTarget">
      <MemberSignature Language="C#" Value="public virtual void AddTarget (Foundation.NSObject target, ObjCRuntime.Selector sel, UIKit.UIControlEvent events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTarget(class Foundation.NSObject target, class ObjCRuntime.Selector sel, valuetype UIKit.UIControlEvent events) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.AddTarget(Foundation.NSObject,ObjCRuntime.Selector,UIKit.UIControlEvent)" />
      <MemberSignature Language="F#" Value="abstract member AddTarget : Foundation.NSObject * ObjCRuntime.Selector * UIKit.UIControlEvent -&gt; unit&#xA;override this.AddTarget : Foundation.NSObject * ObjCRuntime.Selector * UIKit.UIControlEvent -&gt; unit" Usage="uIControl.AddTarget (target, sel, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addTarget:action:forControlEvents:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="sel" Type="ObjCRuntime.Selector" />
        <Parameter Name="events" Type="UIKit.UIControlEvent" />
      </Parameters>
      <Docs>
        <param name="target">
          <para>The target object, or null the responder chain is scanned for an object that responds to the specified selector.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="sel">The action to look for</param>
        <param name="events">To be added.</param>
        <summary>Adds a target and control event(s) to this UIControl's internal dispatch table.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllControlEvents">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIControlEvent AllControlEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIControlEvent AllControlEvents" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.AllControlEvents" />
      <MemberSignature Language="F#" Value="member this.AllControlEvents : UIKit.UIControlEvent" Usage="UIKit.UIControl.AllControlEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allControlEvents")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIControlEvent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The control events associated with this UIControl.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllEditingEvents">
      <MemberSignature Language="C#" Value="public event EventHandler AllEditingEvents;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllEditingEvents" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.AllEditingEvents" />
      <MemberSignature Language="F#" Value="member this.AllEditingEvents : EventHandler " Usage="member this.AllEditingEvents : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised on any editing events produced.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllEvents">
      <MemberSignature Language="C#" Value="public event EventHandler AllEvents;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllEvents" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.AllEvents" />
      <MemberSignature Language="F#" Value="member this.AllEvents : EventHandler " Usage="member this.AllEvents : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised for any event produced.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllTargets">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSSet AllTargets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSSet AllTargets" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.AllTargets" />
      <MemberSignature Language="F#" Value="member this.AllTargets : Foundation.NSSet" Usage="UIKit.UIControl.AllTargets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allTargets")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The target objects associated with this UIControl.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllTouchEvents">
      <MemberSignature Language="C#" Value="public event EventHandler AllTouchEvents;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AllTouchEvents" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.AllTouchEvents" />
      <MemberSignature Language="F#" Value="member this.AllTouchEvents : EventHandler " Usage="member this.AllTouchEvents : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised for any touch event produced.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIControl.UIControlAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIControl/UIControlAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : UIKit.UIControl.UIControlAppearance" Usage="UIKit.UIControl.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIControl+UIControlAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UIControl.</para>
          <para>If developers want to control the appearance of subclasses of UIControl, they should use the <see cref="M:UIKit.UISegmentedControl.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static UIKit.UIControl.UIControlAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIControl/UIControlAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; UIKit.UIControl.UIControlAppearance" Usage="UIKit.UIControl.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIControl+UIControlAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIControl when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of UIControl, they should use the <see cref="M:UIKit.UISegmentedControl.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginTracking">
      <MemberSignature Language="C#" Value="public virtual bool BeginTracking (UIKit.UITouch uitouch, UIKit.UIEvent uievent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BeginTracking(class UIKit.UITouch uitouch, class UIKit.UIEvent uievent) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.BeginTracking(UIKit.UITouch,UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member BeginTracking : UIKit.UITouch * UIKit.UIEvent -&gt; bool&#xA;override this.BeginTracking : UIKit.UITouch * UIKit.UIEvent -&gt; bool" Usage="uIControl.BeginTracking (uitouch, uievent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("beginTrackingWithTouch:withEvent:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uitouch" Type="UIKit.UITouch" />
        <Parameter Name="uievent" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="uitouch">To be added.</param>
        <param name="uievent">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Indicates that a touch related to the specified event has entered the UIControl's bounds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelTracking">
      <MemberSignature Language="C#" Value="public virtual void CancelTracking (UIKit.UIEvent uievent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelTracking(class UIKit.UIEvent uievent) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.CancelTracking(UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member CancelTracking : UIKit.UIEvent -&gt; unit&#xA;override this.CancelTracking : UIKit.UIEvent -&gt; unit" Usage="uIControl.CancelTracking uievent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("cancelTrackingWithEvent:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uievent" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="uievent">
          <para>The event, or null if the cancellation happened due to some other non-event source.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Stops tracking related to the specified event.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIControl.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContinueTracking">
      <MemberSignature Language="C#" Value="public virtual bool ContinueTracking (UIKit.UITouch uitouch, UIKit.UIEvent uievent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContinueTracking(class UIKit.UITouch uitouch, class UIKit.UIEvent uievent) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.ContinueTracking(UIKit.UITouch,UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member ContinueTracking : UIKit.UITouch * UIKit.UIEvent -&gt; bool&#xA;override this.ContinueTracking : UIKit.UITouch * UIKit.UIEvent -&gt; bool" Usage="uIControl.ContinueTracking (uitouch, uievent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("continueTrackingWithTouch:withEvent:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uitouch" Type="UIKit.UITouch" />
        <Parameter Name="uievent" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="uitouch">To be added.</param>
        <param name="uievent">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Called repeatedly as the UIControl tracks a touch within its bounds, related to the specified event.|Called repeatedly as the UIControl tracks a touch within its bounds, related to the givespecified event.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingChanged">
      <MemberSignature Language="C#" Value="public event EventHandler EditingChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EditingChanged" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.EditingChanged" />
      <MemberSignature Language="F#" Value="member this.EditingChanged : EventHandler " Usage="member this.EditingChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The component changed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingDidBegin">
      <MemberSignature Language="C#" Value="public event EventHandler EditingDidBegin;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EditingDidBegin" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.EditingDidBegin" />
      <MemberSignature Language="F#" Value="member this.EditingDidBegin : EventHandler " Usage="member this.EditingDidBegin : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when editing has started.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingDidEnd">
      <MemberSignature Language="C#" Value="public event EventHandler EditingDidEnd;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EditingDidEnd" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.EditingDidEnd" />
      <MemberSignature Language="F#" Value="member this.EditingDidEnd : EventHandler " Usage="member this.EditingDidEnd : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when editing ended.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingDidEndOnExit">
      <MemberSignature Language="C#" Value="public event EventHandler EditingDidEndOnExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler EditingDidEndOnExit" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.EditingDidEndOnExit" />
      <MemberSignature Language="F#" Value="member this.EditingDidEndOnExit : EventHandler " Usage="member this.EditingDidEndOnExit : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised on didEndOnexit</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EffectiveContentHorizontalAlignment">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIControlContentHorizontalAlignment EffectiveContentHorizontalAlignment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIControlContentHorizontalAlignment EffectiveContentHorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.EffectiveContentHorizontalAlignment" />
      <MemberSignature Language="F#" Value="member this.EffectiveContentHorizontalAlignment : UIKit.UIControlContentHorizontalAlignment" Usage="UIKit.UIControl.EffectiveContentHorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("effectiveContentHorizontalAlignment")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIControlContentHorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the current horizontal alignment.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.Enabled" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="UIKit.UIControl.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UIControl is enabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndTracking">
      <MemberSignature Language="C#" Value="public virtual void EndTracking (UIKit.UITouch uitouch, UIKit.UIEvent uievent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndTracking(class UIKit.UITouch uitouch, class UIKit.UIEvent uievent) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.EndTracking(UIKit.UITouch,UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member EndTracking : UIKit.UITouch * UIKit.UIEvent -&gt; unit&#xA;override this.EndTracking : UIKit.UITouch * UIKit.UIEvent -&gt; unit" Usage="uIControl.EndTracking (uitouch, uievent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("endTrackingWithTouch:withEvent:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uitouch" Type="UIKit.UITouch" />
        <Parameter Name="uievent" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="uitouch">To be added.</param>
        <param name="uievent">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Indicates that the last touch for the given event has completed, indicating that tracking should stop.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetActions">
      <MemberSignature Language="C#" Value="public virtual string[] GetActions (Foundation.NSObject target, UIKit.UIControlEvent events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetActions(class Foundation.NSObject target, valuetype UIKit.UIControlEvent events) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.GetActions(Foundation.NSObject,UIKit.UIControlEvent)" />
      <MemberSignature Language="F#" Value="abstract member GetActions : Foundation.NSObject * UIKit.UIControlEvent -&gt; string[]&#xA;override this.GetActions : Foundation.NSObject * UIKit.UIControlEvent -&gt; string[]" Usage="uIControl.GetActions (target, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("actionsForTarget:forControlEvent:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="events" Type="UIKit.UIControlEvent" />
      </Parameters>
      <Docs>
        <param name="target">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="events">To be added.</param>
        <summary>The actions associated with a target and control event.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIControl.UIControlAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIControl/UIControlAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UIControl.UIControlAppearance" Usage="UIKit.UIControl.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIControl+UIControlAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIControl.UIControlAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIControl/UIControlAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UIControl.UIControlAppearance" Usage="UIKit.UIControl.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIControl+UIControlAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" /> when found in the <paramref name="containers" /> containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIControl.UIControlAppearance GetAppearance&lt;T&gt; () where T : UIKit.UIControl;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIControl/UIControlAppearance GetAppearance&lt;(class UIKit.UIControl) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; UIKit.UIControl.UIControlAppearance (requires 'T :&gt; UIKit.UIControl)" Usage="UIKit.UIControl.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIControl+UIControlAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIControl.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIControl.UIControlAppearance" /> for the subclass of UIControl.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UIControl.Appearance" /> property, or the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIControl.GetAppearance<MyUIControlSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIControl.UIControlAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : UIKit.UIControl;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIControl/UIControlAppearance GetAppearance&lt;(class UIKit.UIControl) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UIControl.UIControlAppearance (requires 'T :&gt; UIKit.UIControl)" Usage="UIKit.UIControl.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIControl+UIControlAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UIControl</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIControl.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIControl.UIControlAppearance" /> for the subclass of UIControl.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIControl.</para>
          <para>Unlike the <see cref="P:UIKit.UIControl.Appearance" /> property, or the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIControl.GetAppearance<MyUIControlSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIControl.UIControlAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : UIKit.UIControl;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIControl/UIControlAppearance GetAppearance&lt;(class UIKit.UIControl) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UIControl.UIControlAppearance (requires 'T :&gt; UIKit.UIControl)" Usage="UIKit.UIControl.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIControl+UIControlAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UIControl</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIControl.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIControl.UIControlAppearance" /> for the subclass of UIControl that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIControl that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UIControl.Appearance" /> property, or the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIControl.GetAppearance<MyUIControlSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Highlighted">
      <MemberSignature Language="C#" Value="public virtual bool Highlighted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Highlighted" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.Highlighted" />
      <MemberSignature Language="F#" Value="member this.Highlighted : bool with get, set" Usage="UIKit.UIControl.Highlighted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isHighlighted")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setHighlighted:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UIControl is highlighted.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalAlignment">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIControlContentHorizontalAlignment HorizontalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIControlContentHorizontalAlignment HorizontalAlignment" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.HorizontalAlignment" />
      <MemberSignature Language="F#" Value="member this.HorizontalAlignment : UIKit.UIControlContentHorizontalAlignment with get, set" Usage="UIKit.UIControl.HorizontalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("contentHorizontalAlignment")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setContentHorizontalAlignment:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIControlContentHorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The horizontal alignment of this UIControl's content.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrimaryActionTriggered">
      <MemberSignature Language="C#" Value="public event EventHandler PrimaryActionTriggered;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler PrimaryActionTriggered" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.PrimaryActionTriggered" />
      <MemberSignature Language="F#" Value="member this.PrimaryActionTriggered : EventHandler " Usage="member this.PrimaryActionTriggered : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event associated with the most-likely behavior of the <see cref="T:UIKit.UIControl" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTarget">
      <MemberSignature Language="C#" Value="public void RemoveTarget (EventHandler notification, UIKit.UIControlEvent events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveTarget(class System.EventHandler notification, valuetype UIKit.UIControlEvent events) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.RemoveTarget(System.EventHandler,UIKit.UIControlEvent)" />
      <MemberSignature Language="F#" Value="member this.RemoveTarget : EventHandler * UIKit.UIControlEvent -&gt; unit" Usage="uIControl.RemoveTarget (notification, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notification" Type="System.EventHandler" />
        <Parameter Name="events" Type="UIKit.UIControlEvent" />
      </Parameters>
      <Docs>
        <param name="notification">The event handler previously specified in AddTarget.</param>
        <param name="events">The event mask to remove.</param>
        <summary>Removes a previously installed event handler for the specified event list.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTarget">
      <MemberSignature Language="C#" Value="public virtual void RemoveTarget (Foundation.NSObject target, ObjCRuntime.Selector sel, UIKit.UIControlEvent events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTarget(class Foundation.NSObject target, class ObjCRuntime.Selector sel, valuetype UIKit.UIControlEvent events) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.RemoveTarget(Foundation.NSObject,ObjCRuntime.Selector,UIKit.UIControlEvent)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTarget : Foundation.NSObject * ObjCRuntime.Selector * UIKit.UIControlEvent -&gt; unit&#xA;override this.RemoveTarget : Foundation.NSObject * ObjCRuntime.Selector * UIKit.UIControlEvent -&gt; unit" Usage="uIControl.RemoveTarget (target, sel, events)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeTarget:action:forControlEvents:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="sel" Type="ObjCRuntime.Selector" />
        <Parameter Name="events" Type="UIKit.UIControlEvent" />
      </Parameters>
      <Docs>
        <param name="target">
          <para>The target object, or null.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="sel">
          <para>The action.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="events">To be added.</param>
        <summary>Removes a target and action for a particular event or events.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Selected">
      <MemberSignature Language="C#" Value="public virtual bool Selected { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Selected" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.Selected" />
      <MemberSignature Language="F#" Value="member this.Selected : bool with get, set" Usage="UIKit.UIControl.Selected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isSelected")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSelected:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UIControl is selected.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendAction">
      <MemberSignature Language="C#" Value="public virtual void SendAction (ObjCRuntime.Selector action, Foundation.NSObject target, UIKit.UIEvent uievent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendAction(class ObjCRuntime.Selector action, class Foundation.NSObject target, class UIKit.UIEvent uievent) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.SendAction(ObjCRuntime.Selector,Foundation.NSObject,UIKit.UIEvent)" />
      <MemberSignature Language="F#" Value="abstract member SendAction : ObjCRuntime.Selector * Foundation.NSObject * UIKit.UIEvent -&gt; unit&#xA;override this.SendAction : ObjCRuntime.Selector * Foundation.NSObject * UIKit.UIEvent -&gt; unit" Usage="uIControl.SendAction (action, target, uievent)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("sendAction:to:forEvent:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
        <Parameter Name="target" Type="Foundation.NSObject" />
        <Parameter Name="uievent" Type="UIKit.UIEvent" />
      </Parameters>
      <Docs>
        <param name="action">To be added.</param>
        <param name="target">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="uievent">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Indicates that an event has occurred and sends an action message to the application for dispatch to a target.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendActionForControlEvents">
      <MemberSignature Language="C#" Value="public virtual void SendActionForControlEvents (UIKit.UIControlEvent events);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SendActionForControlEvents(valuetype UIKit.UIControlEvent events) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIControl.SendActionForControlEvents(UIKit.UIControlEvent)" />
      <MemberSignature Language="F#" Value="abstract member SendActionForControlEvents : UIKit.UIControlEvent -&gt; unit&#xA;override this.SendActionForControlEvents : UIKit.UIControlEvent -&gt; unit" Usage="uIControl.SendActionForControlEvents events" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("sendActionsForControlEvents:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="events" Type="UIKit.UIControlEvent" />
      </Parameters>
      <Docs>
        <param name="events">To be added.</param>
        <summary>Sends action messages for the specified control events.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIControlState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIControlState State" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.State" />
      <MemberSignature Language="F#" Value="member this.State : UIKit.UIControlState" Usage="UIKit.UIControl.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("state")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIControlState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A bitmask that indicates the state of this UIControl. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchCancel">
      <MemberSignature Language="C#" Value="public event EventHandler TouchCancel;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TouchCancel" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.TouchCancel" />
      <MemberSignature Language="F#" Value="member this.TouchCancel : EventHandler " Usage="member this.TouchCancel : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The touch event has been canceled.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDown">
      <MemberSignature Language="C#" Value="public event EventHandler TouchDown;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TouchDown" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.TouchDown" />
      <MemberSignature Language="F#" Value="member this.TouchDown : EventHandler " Usage="member this.TouchDown : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when the user touches the control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDownRepeat">
      <MemberSignature Language="C#" Value="public event EventHandler TouchDownRepeat;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TouchDownRepeat" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.TouchDownRepeat" />
      <MemberSignature Language="F#" Value="member this.TouchDownRepeat : EventHandler " Usage="member this.TouchDownRepeat : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised when the user double taps the control.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDragEnter">
      <MemberSignature Language="C#" Value="public event EventHandler TouchDragEnter;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TouchDragEnter" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.TouchDragEnter" />
      <MemberSignature Language="F#" Value="member this.TouchDragEnter : EventHandler " Usage="member this.TouchDragEnter : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised on TouchDragEnter events.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDragExit">
      <MemberSignature Language="C#" Value="public event EventHandler TouchDragExit;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TouchDragExit" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.TouchDragExit" />
      <MemberSignature Language="F#" Value="member this.TouchDragExit : EventHandler " Usage="member this.TouchDragExit : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised on TouchDragExit events.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDragInside">
      <MemberSignature Language="C#" Value="public event EventHandler TouchDragInside;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TouchDragInside" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.TouchDragInside" />
      <MemberSignature Language="F#" Value="member this.TouchDragInside : EventHandler " Usage="member this.TouchDragInside : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised oN TouchDragInside events.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchDragOutside">
      <MemberSignature Language="C#" Value="public event EventHandler TouchDragOutside;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TouchDragOutside" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.TouchDragOutside" />
      <MemberSignature Language="F#" Value="member this.TouchDragOutside : EventHandler " Usage="member this.TouchDragOutside : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised on TouchDragOutside events.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchInside">
      <MemberSignature Language="C#" Value="public virtual bool TouchInside { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TouchInside" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.TouchInside" />
      <MemberSignature Language="F#" Value="member this.TouchInside : bool" Usage="UIKit.UIControl.TouchInside" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isTouchInside")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether a touch is inside this UIControl. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpInside">
      <MemberSignature Language="C#" Value="public event EventHandler TouchUpInside;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TouchUpInside" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.TouchUpInside" />
      <MemberSignature Language="F#" Value="member this.TouchUpInside : EventHandler " Usage="member this.TouchUpInside : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised on TouchUpInside events.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TouchUpOutside">
      <MemberSignature Language="C#" Value="public event EventHandler TouchUpOutside;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TouchUpOutside" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.TouchUpOutside" />
      <MemberSignature Language="F#" Value="member this.TouchUpOutside : EventHandler " Usage="member this.TouchUpOutside : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Raised on TouchUpOutside events.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tracking">
      <MemberSignature Language="C#" Value="public virtual bool Tracking { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Tracking" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.Tracking" />
      <MemberSignature Language="F#" Value="member this.Tracking : bool" Usage="UIKit.UIControl.Tracking" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isTracking")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UIControl is tracking touches related to an event. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValueChanged">
      <MemberSignature Language="C#" Value="public event EventHandler ValueChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler ValueChanged" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIControl.ValueChanged" />
      <MemberSignature Language="F#" Value="member this.ValueChanged : EventHandler " Usage="member this.ValueChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The value has changed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalAlignment">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIControlContentVerticalAlignment VerticalAlignment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIControlContentVerticalAlignment VerticalAlignment" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIControl.VerticalAlignment" />
      <MemberSignature Language="F#" Value="member this.VerticalAlignment : UIKit.UIControlContentVerticalAlignment with get, set" Usage="UIKit.UIControl.VerticalAlignment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("contentVerticalAlignment")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setContentVerticalAlignment:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIControlContentVerticalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The vertical alignment of this UIControl's content.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
