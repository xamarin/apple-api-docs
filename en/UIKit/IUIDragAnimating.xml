<Type Name="IUIDragAnimating" FullName="UIKit.IUIDragAnimating">
  <TypeSignature Language="C#" Value="public interface IUIDragAnimating : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUIDragAnimating implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:UIKit.IUIDragAnimating" />
  <TypeSignature Language="F#" Value="type IUIDragAnimating = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="UIDragAnimating", WrapperType=typeof(UIKit.UIDragAnimatingWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="AddAnimations", ParameterBlockProxy=new System.Type[] { typeof(ObjCRuntime.Trampolines/NIDAction) }, ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.Action) }, Selector="addAnimations:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="AddCompletion", ParameterBlockProxy=new System.Type[] { typeof(ObjCRuntime.Trampolines/NIDActionArity1V188) }, ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.Action`1&lt;UIKit.UIViewAnimatingPosition&gt;) }, Selector="addCompletion:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface for adding custom preview animations for lift, drop, and cancellation, along with the standard drag and drop animations.</summary>
    <remarks>
      <para>For example, developers can use this class to dim out or highlight other UI elements during a drag and drop operation.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddAnimations">
      <MemberSignature Language="C#" Value="public void AddAnimations (Action animations);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAnimations(class System.Action animations) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIDragAnimating.AddAnimations(System.Action)" />
      <MemberSignature Language="F#" Value="abstract member AddAnimations : Action -&gt; unit" Usage="iUIDragAnimating.AddAnimations animations" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addAnimations:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animations" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="animations">An action that animates UI elements.</param>
        <summary>Adds the specified animation action.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCompletion">
      <MemberSignature Language="C#" Value="public void AddCompletion (Action&lt;UIKit.UIViewAnimatingPosition&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddCompletion(class System.Action`1&lt;valuetype UIKit.UIViewAnimatingPosition&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIDragAnimating.AddCompletion(System.Action{UIKit.UIViewAnimatingPosition})" />
      <MemberSignature Language="F#" Value="abstract member AddCompletion : Action&lt;UIKit.UIViewAnimatingPosition&gt; -&gt; unit" Usage="iUIDragAnimating.AddCompletion completion" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addCompletion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completion" Type="System.Action&lt;UIKit.UIViewAnimatingPosition&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V188))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="completion">The completion handler to add.</param>
        <summary>Adds the specified <paramref name="completion" /> block to run when the animation ends.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
