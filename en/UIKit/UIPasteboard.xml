<Type Name="UIPasteboard" FullName="UIKit.UIPasteboard">
  <TypeSignature Language="C#" Value="public class UIPasteboard : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIPasteboard extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIPasteboard", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Support for the system pasteboard  for cut, copy and paste.</summary>
    <remarks>
      <format type="text/html">
        <h2>Pasteboards</h2>
      </format>
      <para>
	Pasteboards allow information to be shared across
	applications.  The general pasteboard (accessible via the <see cref="P:UIKit.UIPasteboard.General" /> property) is
	the system-wide pasteboard that applications use by default.
	Developers can also transfer information across their own
	applications (those that share their team ID) by creating
	their own pasteboards.
      </para>
      <format type="text/html">
        <h2>Setting Pasteboard Data</h2>
      </format>
      <para>
	All operations that set the contents of the pasteboard clear any data
	that is currently stored there.
      </para>
      <para>
	To set the pasteboard contents to <see cref="T:Foundation.NSString" />, <see cref="T:Foundation.NSArray" />, <see cref="T:Foundation.NSDictionary" />, <see cref="T:Foundation.NSDate" />, <see cref="T:Foundation.NSNumber" />, <see cref="T:UIKit.UIImage" /> or <see cref="T:Foundation.NSUrl" /> use
	the <see cref="M:UIKit.UIPasteBoard.SetValue" /> method.
      </para>
      <para>
	To set the pasteboard contents to an image, use the
	<see cref="P:UIKit.UIPasteBoard.Image" />.  
	property.
      </para>
      <para>
	To set the pasteboard contents to a set of images, use the
	<see cref="P:UIKit.UIPasteBoard.Images" />.  
	property.
      </para>
      <para>
	To set the values to arbitrary data types, use the
	<see cref="M:UIKit.UIPasteBoard.SetData" /> method.
      </para>
      <para>
	You can use the convenience properties <see cref="P:UIKit.UIPasteboard.String" />, <see cref="P:UIKit.UIPasteboard.Strings" />, <see cref="P:UIKit.UIPasteboard.Image" />, <see cref="P:UIKit.UIPasteboard.Images" />, <see cref="P:UIKit.UIPasteboard.Url" />, <see cref="P:UIKit.UIPasteboard.Urls" />, <see cref="P:UIKit.UIPasteboard.Color" /> and <see cref="P:UIKit.UIPasteboard.Colors" /> to set and get
	strings, images, Urls or Colors on the pasteboard.
      </para>
      <example>
        <code lang="C#"><![CDATA[
//
// Setting the contents of the pasteboard to "Hello World"
// by specifying the UTI type for text.
//
var text = new NSString ("Hello world")
UIPasteboard.General.SetValue (text, MonoTouch.MobileCoreServices.UTType.Text);

// 
// Setting the contents of the pasteboard to "So hello"
// using the convenience property:
//
UIPasteboard.General.String = "So hello";
	]]></code>
      </example>
      <format type="text/html">
        <h2>Pasteboard Types</h2>
      </format>
      <para>

	Whenever possible, you should use an UTI type to set the type
	of the information that is being stored on the pasteboard.
	You can find a list of common iOS/Mac UTI types on the <see cref="T:MobileCoreServices.UTType" /> type.

      </para>
      <para>
	UTI types are merely strings separated by dots.  For example
	the UTI type for an image is "public.image".  Apple maintains
	the "public.*" directory of UTI types.  	
      </para>
      <para>

	Apple recommends that if you need to use your own data type to
	use an inverse domain to name them.   For example, "com.xamarin.t-shirt-application.sales-information". 

      </para>
    </remarks>
    <related type="article" href="https://developer.apple.com/library/mac/documentation/FileManagement/Conceptual/understanding_utis/understand_utis_intro/understand_utis_intro.html">Introduction to Uniform Type Identifiers Overview</related>
    <related type="article" href="http://en.wikipedia.org/wiki/Uniform_Type_Identifier">"Uniform Type Identifier" on Wikipedia</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPasteboard_Class/index.html">Apple documentation for <c>UIPasteboard</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIPasteboard (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIPasteboard (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddItems">
      <MemberSignature Language="C#" Value="public virtual void AddItems (Foundation.NSDictionary[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddItems(class Foundation.NSDictionary[] items) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addItems:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Foundation.NSDictionary[]" />
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>Appends items to the content of this UIPasteBoard.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Automatic">
      <MemberSignature Language="C#" Value="public static Foundation.NSString Automatic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString Automatic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIPasteboardTypeAutomatic", "UIKit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangeCount">
      <MemberSignature Language="C#" Value="public virtual nint ChangeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint ChangeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("changeCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of times this UIPasteBoard's contents have changed. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use UIPasteboard.Notifications.ObserveChanged helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIPasteboardChangedNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for Changed</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="T:UIKit.UIPasteboard+Notifications" />.<see cref="M:UIKit.UIPasteboard+Notifications.ObserveChangedNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = UIPasteboard.Notifications.ObserveChanged ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("TypesAdded", args.TypesAdded);
    Console.WriteLine ("TypesRemoved", args.TypesRemoved);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, UIKit.UIPasteboardChangeEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("TypesAdded", args.TypesAdded);
    Console.WriteLine ("TypesRemoved", args.TypesRemoved);
}

void Setup ()
{
    notification = UIPasteboard.Notifications.ObserveChanged (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIPasteboard.ChangedNotification, (notification) => {Console.WriteLine ("Received the notification UIPasteboard", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIPasteboard", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIPasteboard.ChangedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedTypesAddedKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ChangedTypesAddedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ChangedTypesAddedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIPasteboardChangedTypesAddedKey", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIPasteboardChangedTypesAddedKey</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChangedTypesRemovedKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ChangedTypesRemovedKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ChangedTypesRemovedKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIPasteboardChangedTypesRemovedKey", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIPasteboardChangedTypesRemovedKey</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor Color" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("color")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setColor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The color of the first pasteboard item.</summary>
        <value>
          <para>The first value when fetching, or sets all the values when setting to the single specified value.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Colors">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor[] Colors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor[] Colors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("colors")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setColors:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The colors used by all pasteboard items.</summary>
        <value>
          <para>The first value when fetching, or sets all the values when setting to the single specified value.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (string[] pasteboardTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(string[] pasteboardTypes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("containsPasteboardTypes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pasteboardTypes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="pasteboardTypes">Pasteboard types that you will be probing for.</param>
        <summary>Whether this UIPasteBoard holds data of the specified type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (string[] pasteboardTypes, Foundation.NSIndexSet itemSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(string[] pasteboardTypes, class Foundation.NSIndexSet itemSet) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("containsPasteboardTypes:inItemSet:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pasteboadTypes" Type="System.String[]" />
        <Parameter Name="itemSet" Type="Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="pasteboardTypes">To be added.</param>
        <param name="itemSet">
          <para>Indexes of the elements on the pasteboard that you want to probe, or null to probe all of them.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Whether the pasteboard elements specified by itemSet contain data of the specified pasteboardTypes.</summary>
        <returns>True if any of the elements of the pasteboard have one of the specified pasteboard types.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual nint Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("numberOfItems")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of items on this UIPasteBoard. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataForPasteboardType">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData DataForPasteboardType (string pasteboardType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData DataForPasteboardType(string pasteboardType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dataForPasteboardType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pasteboardType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pasteboardType">To be added.</param>
        <summary>The data on this UIPasteBoard for the specified representation type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static UIKit.UIPasteboard FromName (string name, bool create);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIPasteboard FromName(string name, bool create) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pasteboardWithName:create:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIPasteboard</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="create" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="create">To be added.</param>
        <summary>Returns the UIPasteBoard for the specified name, optionally creating one if it doesn't exist.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="General">
      <MemberSignature Language="C#" Value="public static UIKit.UIPasteboard General { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIPasteboard General" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("generalPasteboard")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIPasteboard</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The general pasteboard, used for copy-paste operations.</summary>
        <value>
        </value>
        <remarks>
          <para>
	    The General pasteboard can be used to share information
	    information across processes.  While it can be used for
	    sharing information with other processes, you can also use
	    it to share hold information for your own application.
	  </para>
          <para>
	    You should put information into this pasteboard in
	    response to user requests.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataForPasteboardType">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData[] GetDataForPasteboardType (string pasteboardType, Foundation.NSIndexSet itemSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData[] GetDataForPasteboardType(string pasteboardType, class Foundation.NSIndexSet itemSet) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dataForPasteboardType:inItemSet:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pasteboardType" Type="System.String" />
        <Parameter Name="itemSet" Type="Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="pasteboardType">To be added.</param>
        <param name="itemSet">To be added.</param>
        <summary>The data objects in the specified pasteboard items that have the specified representation type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUnique">
      <MemberSignature Language="C#" Value="public static UIKit.UIPasteboard GetUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIPasteboard GetUnique() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pasteboardWithUniqueName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIPasteboard</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The application pasteboard identified by the unique system-generated name.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValue">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject GetValue (string pasteboardType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject GetValue(string pasteboardType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valueForPasteboardType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pasteboardType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="pasteboardType">To be added.</param>
        <summary>Retrieves data of the specified type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetValuesForPasteboardType">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData[] GetValuesForPasteboardType (string pasteboardType, Foundation.NSIndexSet itemSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData[] GetValuesForPasteboardType(string pasteboardType, class Foundation.NSIndexSet itemSet) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("valuesForPasteboardType:inItemSet:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pasteboardType" Type="System.String" />
        <Parameter Name="itemSet" Type="Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="pasteboardType">To be added.</param>
        <param name="itemSet">To be added.</param>
        <summary>Returns the objects on this UIPasteBoard that have the specified representation type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasColors">
      <MemberSignature Language="C#" Value="public virtual bool HasColors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasColors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("hasColors")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether the <see cref="P:UIKit.UIPasteboard.Colors" /> array is non-empty.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasImages">
      <MemberSignature Language="C#" Value="public virtual bool HasImages { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasImages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("hasImages")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether the <see cref="P:UIKit.UIPasteboard.Images" /> array is non-empty.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasStrings">
      <MemberSignature Language="C#" Value="public virtual bool HasStrings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasStrings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("hasStrings")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether the <see cref="P:UIKit.UIPasteboard.Strings" /> array is non-empty.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasUrls">
      <MemberSignature Language="C#" Value="public virtual bool HasUrls { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasUrls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("hasURLs")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage Image { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage Image" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("image")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Retrieves or sets the image of the first pasteboard item.</summary>
        <value>
          <para>Image on the pasteboard.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>
	  Use this to set the pasteboard content to be an UIImage.
	  </para>
          <para>
	    To set the pasteboard contents to a set of images, use the
	    <see cref="P:UIKit.UIPasteBoard.Images" />.  
	    property.
	  </para>
          <para>
	    To set the pasteboard contents to <see cref="T:Foundation.NSString" />, <see cref="T:Foundation.NSArray" />, <see cref="T:Foundation.NSDictionary" />, <see cref="T:Foundation.NSDate" />, <see cref="T:Foundation.NSNumber" />, <see cref="T:UIKit.UIImage" /> or <see cref="T:Foundation.NSUrl" /> use
	    the <see cref="M:UIKit.UIPasteBoard.SetValue" />.
	  </para>
          <para>
	    To set the values to arbitrary data types, use
	    <see cref="M:UIKit.UIPasteBoard.SetData" />.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Images">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage[] Images { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage[] Images" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("images")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setImages:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The images of all the pasteboard items.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemProviders">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSItemProvider[] ItemProviders { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSItemProvider[] ItemProviders" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("itemProviders")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setItemProviders:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSItemProvider[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an array of all the item providers for the pasteboard.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary[] Items { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary[] Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("items")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setItems:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The pasteboard items on this UIPasteBoard.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemSetWithPasteboardTypes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexSet ItemSetWithPasteboardTypes (string[] pasteboardTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexSet ItemSetWithPasteboardTypes(string[] pasteboardTypes) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("itemSetWithPasteboardTypes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexSet</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pasteboardTypes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="pasteboardTypes">To be added.</param>
        <summary>A set whose values are the indices of those pasteboard items that have the specified representation type.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("name")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of this UIPasteBoard. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PasteBoardTypesForSet">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSArray[] PasteBoardTypesForSet (Foundation.NSIndexSet itemSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSArray[] PasteBoardTypesForSet(class Foundation.NSIndexSet itemSet) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pasteboardTypesForItemSet:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSet" Type="Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="itemSet">To be added.</param>
        <summary>The representation types for all the items in the specified set.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Persistent">
      <MemberSignature Language="C#" Value="public virtual bool Persistent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Persistent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isPersistent")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPersistent:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public static void Remove (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Remove(string name) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removePasteboardWithName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>Removes the specified application pasteboard.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemovedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString RemovedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString RemovedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Advice("Use UIPasteboard.Notifications.ObserveRemoved helper method instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Field("UIPasteboardRemovedNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for Removed</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <para id="tool-remark">To subscribe to this notification, developers can use the convenience <see cref="T:UIKit.UIPasteboard+Notifications" />.<see cref="M:UIKit.UIPasteboard+Notifications.ObserveRemovedNotification" /> method which offers strongly typed access to the parameters of the notification.</para>
          <para>The following example shows how to use the strongly typed Notifications class, to take the guesswork out of the available properties in the notification:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = UIPasteboard.Notifications.ObserveRemoved ((sender, args) => {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("TypesAdded", args.TypesAdded);
    Console.WriteLine ("TypesRemoved", args.TypesRemoved);
});

// To stop listening:
notification.Dispose ();

//
// Method style
//
NSObject notification;
void Callback (object sender, UIKit.UIPasteboardChangeEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);

    Console.WriteLine ("TypesAdded", args.TypesAdded);
    Console.WriteLine ("TypesRemoved", args.TypesRemoved);
}

void Setup ()
{
    notification = UIPasteboard.Notifications.ObserveRemoved (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
          <para>The following example shows how to use the notification with the DefaultCenter API:</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIPasteboard.RemovedNotification, (notification) => {Console.WriteLine ("Received the notification UIPasteboard", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIPasteboard", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIPasteboard.RemovedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public virtual void SetData (Foundation.NSData data, string forPasteboardType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class Foundation.NSData data, string forPasteboardType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setData:forPasteboardType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="forPasteboardType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">Data to be set on the pasteboard.</param>
        <param name="forPasteboardType">To be added.</param>
        <summary>Sets the data for the specified representation type in this UIPasteBoard.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItemProviders">
      <MemberSignature Language="C#" Value="public virtual void SetItemProviders (Foundation.NSItemProvider[] itemProviders, bool localOnly, Foundation.NSDate expirationDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetItemProviders(class Foundation.NSItemProvider[] itemProviders, bool localOnly, class Foundation.NSDate expirationDate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setItemProviders:localOnly:expirationDate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemProviders" Type="Foundation.NSItemProvider[]" />
        <Parameter Name="localOnly" Type="System.Boolean" />
        <Parameter Name="expirationDate" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="itemProviders">The array of item providers to set.</param>
        <param name="localOnly">To be added.</param>
        <param name="expirationDate">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sets the item providers using the specified details.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItems">
      <MemberSignature Language="C#" Value="public virtual void SetItems (Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;[] items, Foundation.NSDictionary options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetItems(class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt;[] items, class Foundation.NSDictionary options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setItems:options:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;[]" />
        <Parameter Name="options" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <param name="options">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetItems">
      <MemberSignature Language="C#" Value="public void SetItems (Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;[] items, UIKit.UIPasteboardOptions pasteboardOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetItems(class Foundation.NSDictionary`2&lt;class Foundation.NSString, class Foundation.NSObject&gt;[] items, class UIKit.UIPasteboardOptions pasteboardOptions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="Foundation.NSDictionary&lt;Foundation.NSString,Foundation.NSObject&gt;[]" />
        <Parameter Name="pasteboardOptions" Type="UIKit.UIPasteboardOptions" />
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <param name="pasteboardOptions">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetObjects">
      <MemberSignature Language="C#" Value="public virtual void SetObjects (Foundation.INSItemProviderWriting[] objects);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObjects(class Foundation.INSItemProviderWriting[] objects) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setObjects:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objects" Type="Foundation.INSItemProviderWriting[]" />
      </Parameters>
      <Docs>
        <param name="objects">To be added.</param>
        <summary>Sets the item provider array to the specified <paramref name="objects" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetObjects">
      <MemberSignature Language="C#" Value="public virtual void SetObjects (Foundation.INSItemProviderWriting[] objects, bool localOnly, Foundation.NSDate expirationDate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetObjects(class Foundation.INSItemProviderWriting[] objects, bool localOnly, class Foundation.NSDate expirationDate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setObjects:localOnly:expirationDate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objects" Type="Foundation.INSItemProviderWriting[]" />
        <Parameter Name="localOnly" Type="System.Boolean" />
        <Parameter Name="expirationDate" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="objects">To be added.</param>
        <param name="localOnly">To be added.</param>
        <param name="expirationDate">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sets the item provider array to the specified <paramref name="objects" /> with the specified details.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetValue">
      <MemberSignature Language="C#" Value="public virtual void SetValue (Foundation.NSObject value, string pasteboardType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetValue(class Foundation.NSObject value, string pasteboardType) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setValue:forPasteboardType:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="Foundation.NSObject" />
        <Parameter Name="pasteboardType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <param name="pasteboardType">The pasteboard type, one of the constants in <see cref="T:MobileCoreServices.UTType" /> constants.</param>
        <summary>Sets the value for the specified representation type in this UIPasteBoard.</summary>
        <remarks>
          <para>
	    This method can be used to set the pasteboard contents to an
	    <see cref="T:Foundation.NSString" />, <see cref="T:Foundation.NSArray" />, <see cref="T:Foundation.NSDictionary" />, <see cref="T:Foundation.NSDate" />, <see cref="T:Foundation.NSNumber" />, <see cref="T:UIKit.UIImage" /> or <see cref="T:Foundation.NSUrl" />.
	  </para>
          <para>
	    To set an image use the <see cref="P:UIKit.UIPasteBoard.Image" /> property.
	    To set the pasteboard contents to a set of images, use the
	    <see cref="P:UIKit.UIPasteBoard.Images" />
	    property.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="String">
      <MemberSignature Language="C#" Value="public virtual string String { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string String" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("string")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setString:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The string value of the first pasteboard item.</summary>
        <value>
          <para>The first value when fetching, or sets all the values when setting to the single specified value.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Strings">
      <MemberSignature Language="C#" Value="public virtual string[] Strings { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Strings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("strings")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setStrings:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The string values of all the pasteboard items.</summary>
        <value>
          <para>The first value when fetching, or sets all the values when setting to the single specified value.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeListColor">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray TypeListColor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSArray TypeListColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIPasteboardTypeListColor", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIPasteboardTypeListColor</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeListImage">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray TypeListImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSArray TypeListImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIPasteboardTypeListImage", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIPasteboardTypeListImage</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeListString">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray TypeListString { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSArray TypeListString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIPasteboardTypeListString", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIPasteboardTypeListString</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeListURL">
      <MemberSignature Language="C#" Value="public static Foundation.NSArray TypeListURL { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSArray TypeListURL" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("UIPasteboardTypeListURL", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSArray</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant UIPasteboardTypeListURL</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Types">
      <MemberSignature Language="C#" Value="public virtual string[] Types { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Types" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("pasteboardTypes")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The representations types of the first item on the pasteboard.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl Url { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("URL")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The URL of the first pasteboard item.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Urls">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl[] Urls { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl[] Urls" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("URLs")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setURLs:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The URLs of all the pasteboard items.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
