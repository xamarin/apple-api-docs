<Type Name="UIPresentationController" FullName="UIKit.UIPresentationController">
  <TypeSignature Language="C#" Value="public class UIPresentationController : Foundation.NSObject, IDisposable, UIKit.IUIAppearanceContainer, UIKit.IUIContentContainer, UIKit.IUIFocusEnvironment, UIKit.IUITraitEnvironment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIPresentationController extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIAppearanceContainer, class UIKit.IUIContentContainer, class UIKit.IUIFocusEnvironment, class UIKit.IUITraitEnvironment" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIPresentationController" />
  <TypeSignature Language="F#" Value="type UIPresentationController = class&#xA;    inherit NSObject&#xA;    interface IUIAppearanceContainer&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUIContentContainer&#xA;    interface IUIFocusEnvironment&#xA;    interface IUITraitEnvironment" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIAppearanceContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIContentContainer</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIFocusEnvironment</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUITraitEnvironment</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIPresentationController", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages the user experience for advanced transitions and presentation of <see cref="T:UIKit.UIViewController" />s whose <see cref="P:UIKit.UIViewController.ModalPresentationStyle" /> is <see cref="F:UIKit.UIModalPresentationStyle.Custom" />.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPresentationController_class/index.html">Apple documentation for <c>UIPresentationController</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPresentationController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Removed in iOS10. Use '.ctor (UIViewController,UIViewController)'.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIPresentationController (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPresentationController : Foundation.NSObjectFlag -&gt; UIKit.UIPresentationController" Usage="new UIKit.UIPresentationController t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIPresentationController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPresentationController : nativeint -&gt; UIKit.UIPresentationController" Usage="new UIKit.UIPresentationController handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPresentationController (UIKit.UIViewController presentedViewController, UIKit.UIViewController presentingViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.UIViewController presentedViewController, class UIKit.UIViewController presentingViewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.#ctor(UIKit.UIViewController,UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPresentationController : UIKit.UIViewController * UIKit.UIViewController -&gt; UIKit.UIPresentationController" Usage="new UIKit.UIPresentationController (presentedViewController, presentingViewController)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithPresentedViewController:presentingViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="presentedViewController" Type="UIKit.UIViewController" />
        <Parameter Name="presentingViewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="presentedViewController">To be added.</param>
        <param name="presentingViewController">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdaptivePresentationStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIModalPresentationStyle AdaptivePresentationStyle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UIModalPresentationStyle AdaptivePresentationStyle() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.AdaptivePresentationStyle" />
      <MemberSignature Language="F#" Value="abstract member AdaptivePresentationStyle : unit -&gt; UIKit.UIModalPresentationStyle&#xA;override this.AdaptivePresentationStyle : unit -&gt; UIKit.UIModalPresentationStyle" Usage="uIPresentationController.AdaptivePresentationStyle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("adaptivePresentationStyle")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIModalPresentationStyle</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets the presentation style to use when the app changes in size.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdaptivePresentationStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIModalPresentationStyle AdaptivePresentationStyle (UIKit.UITraitCollection traitCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UIModalPresentationStyle AdaptivePresentationStyle(class UIKit.UITraitCollection traitCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.AdaptivePresentationStyle(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="abstract member AdaptivePresentationStyle : UIKit.UITraitCollection -&gt; UIKit.UIModalPresentationStyle&#xA;override this.AdaptivePresentationStyle : UIKit.UITraitCollection -&gt; UIKit.UIModalPresentationStyle" Usage="uIPresentationController.AdaptivePresentationStyle traitCollection" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("adaptivePresentationStyleForTraitCollection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIModalPresentationStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traitCollection" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traitCollection">To be added.</param>
        <summary>Gets the <see cref="T:UIKit.UIModalPresentationStyle" /> associated with the <param name="traitCollection" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIPresentationController.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainerView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView ContainerView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView ContainerView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.ContainerView" />
      <MemberSignature Language="F#" Value="member this.ContainerView : UIKit.UIView" Usage="UIKit.UIPresentationController.ContainerView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("containerView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIView" /> in which a presentation occurs.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainerViewDidLayoutSubviews">
      <MemberSignature Language="C#" Value="public virtual void ContainerViewDidLayoutSubviews ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ContainerViewDidLayoutSubviews() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.ContainerViewDidLayoutSubviews" />
      <MemberSignature Language="F#" Value="abstract member ContainerViewDidLayoutSubviews : unit -&gt; unit&#xA;override this.ContainerViewDidLayoutSubviews : unit -&gt; unit" Usage="uIPresentationController.ContainerViewDidLayoutSubviews " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("containerViewDidLayoutSubviews")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies this presentation controller that layout has ended on the views in the container view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainerViewWillLayoutSubviews">
      <MemberSignature Language="C#" Value="public virtual void ContainerViewWillLayoutSubviews ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ContainerViewWillLayoutSubviews() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.ContainerViewWillLayoutSubviews" />
      <MemberSignature Language="F#" Value="abstract member ContainerViewWillLayoutSubviews : unit -&gt; unit&#xA;override this.ContainerViewWillLayoutSubviews : unit -&gt; unit" Usage="uIPresentationController.ContainerViewWillLayoutSubviews " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("containerViewWillLayoutSubviews")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies this presentation controller that layout will begin on the views in the container view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public UIKit.IUIAdaptivePresentationControllerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUIAdaptivePresentationControllerDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UIKit.IUIAdaptivePresentationControllerDelegate with get, set" Usage="UIKit.UIPresentationController.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIAdaptivePresentationControllerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UIKit.IUIAdaptivePresentationControllerDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UIKit.IUIAdaptivePresentationControllerDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateFocus">
      <MemberSignature Language="C#" Value="public virtual void DidUpdateFocus (UIKit.UIFocusUpdateContext context, UIKit.UIFocusAnimationCoordinator coordinator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidUpdateFocus(class UIKit.UIFocusUpdateContext context, class UIKit.UIFocusAnimationCoordinator coordinator) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.DidUpdateFocus(UIKit.UIFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)" />
      <MemberSignature Language="F#" Value="abstract member DidUpdateFocus : UIKit.UIFocusUpdateContext * UIKit.UIFocusAnimationCoordinator -&gt; unit&#xA;override this.DidUpdateFocus : UIKit.UIFocusUpdateContext * UIKit.UIFocusAnimationCoordinator -&gt; unit" Usage="uIPresentationController.DidUpdateFocus (context, coordinator)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIFocusEnvironment.DidUpdateFocus(UIKit.UIFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("didUpdateFocusInContext:withAnimationCoordinator:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="UIKit.UIFocusUpdateContext" />
        <Parameter Name="coordinator" Type="UIKit.UIFocusAnimationCoordinator" />
      </Parameters>
      <Docs>
        <param name="context">A <see cref="T:UIKit.UICollectionViewFocusUpdateContext" /> object containing metadata.</param>
        <param name="coordinator">A <see cref="T:UIKit.UIFocusAnimationCoordinator" /> object containing metadata.</param>
        <summary>Indicates that the focus changed as detailed in the <paramref name="context" />.</summary>
        <remarks>
          <para>The values of <see cref="P:UIKit.UICollectionViewFocusUpdateContext.PreviouslyFocusedIndexPath" /> and <see cref="P:UIKit.UICollectionViewFocusUpdateContext.NextFocusedIndexPath" /> may be <see langword="null" /> if focus was previously not within, or just departed, the <paramref name="collectionView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DismissalTransitionDidEnd">
      <MemberSignature Language="C#" Value="public virtual void DismissalTransitionDidEnd (bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DismissalTransitionDidEnd(bool completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.DismissalTransitionDidEnd(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DismissalTransitionDidEnd : bool -&gt; unit&#xA;override this.DismissalTransitionDidEnd : bool -&gt; unit" Usage="uIPresentationController.DismissalTransitionDidEnd completed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dismissalTransitionDidEnd:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="completed">To be added.</param>
        <summary>Notifies this presentation controller that dismissal animations are finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DismissalTransitionWillBegin">
      <MemberSignature Language="C#" Value="public virtual void DismissalTransitionWillBegin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DismissalTransitionWillBegin() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.DismissalTransitionWillBegin" />
      <MemberSignature Language="F#" Value="abstract member DismissalTransitionWillBegin : unit -&gt; unit&#xA;override this.DismissalTransitionWillBegin : unit -&gt; unit" Usage="uIPresentationController.DismissalTransitionWillBegin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dismissalTransitionWillBegin")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies this presentation controller that dismissal animations will begin.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="uIPresentationController.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIPresentationController object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIPresentationController class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UIPresentationController ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusItemContainer">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIFocusItemContainer FocusItemContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUIFocusItemContainer FocusItemContainer" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.FocusItemContainer" />
      <MemberSignature Language="F#" Value="member this.FocusItemContainer : UIKit.IUIFocusItemContainer" Usage="UIKit.UIPresentationController.FocusItemContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("focusItemContainer")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIFocusItemContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the focus container that provides spatial information to child focus items.</summary>
        <value>The focus container that provides spatial information to child focus items.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FrameOfPresentedViewInContainerView">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect FrameOfPresentedViewInContainerView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect FrameOfPresentedViewInContainerView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.FrameOfPresentedViewInContainerView" />
      <MemberSignature Language="F#" Value="member this.FrameOfPresentedViewInContainerView : CoreGraphics.CGRect" Usage="UIKit.UIPresentationController.FrameOfPresentedViewInContainerView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("frameOfPresentedViewInContainerView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the frame rectangle that the controller assigns to the presented view at the end of animations.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSizeForChildContentContainer">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize GetSizeForChildContentContainer (UIKit.IUIContentContainer contentContainer, CoreGraphics.CGSize parentContainerSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGSize GetSizeForChildContentContainer(class UIKit.IUIContentContainer contentContainer, valuetype CoreGraphics.CGSize parentContainerSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.GetSizeForChildContentContainer(UIKit.IUIContentContainer,CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="abstract member GetSizeForChildContentContainer : UIKit.IUIContentContainer * CoreGraphics.CGSize -&gt; CoreGraphics.CGSize&#xA;override this.GetSizeForChildContentContainer : UIKit.IUIContentContainer * CoreGraphics.CGSize -&gt; CoreGraphics.CGSize" Usage="uIPresentationController.GetSizeForChildContentContainer (contentContainer, parentContainerSize)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIContentContainer.GetSizeForChildContentContainer(UIKit.IUIContentContainer,CoreGraphics.CGSize)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("sizeForChildContentContainer:withParentContainerSize:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contentContainer" Type="UIKit.IUIContentContainer" />
        <Parameter Name="parentContainerSize" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="contentContainer">The child container whose size is being request.</param>
        <param name="parentContainerSize">The <see cref="T:System.Drawing.SizeF" /> of the <paramref name="contentContainer" />.</param>
        <summary>Gets the size of the content of the specified child <see cref="T:UIKit.IUIContentContainer" /> by using the size of the parent container.</summary>
        <returns>The <see cref="T:System.Drawing.SizeF" /> of the content of the <paramref name="contentContainer" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OverrideTraitCollection">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITraitCollection OverrideTraitCollection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITraitCollection OverrideTraitCollection" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.OverrideTraitCollection" />
      <MemberSignature Language="F#" Value="member this.OverrideTraitCollection : UIKit.UITraitCollection with get, set" Usage="UIKit.UIPresentationController.OverrideTraitCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("overrideTraitCollection", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setOverrideTraitCollection:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets and sets additional traits for managed view controllers.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ParentFocusEnvironment">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIFocusEnvironment ParentFocusEnvironment { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUIFocusEnvironment ParentFocusEnvironment" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.ParentFocusEnvironment" />
      <MemberSignature Language="F#" Value="member this.ParentFocusEnvironment : UIKit.IUIFocusEnvironment" Usage="UIKit.UIPresentationController.ParentFocusEnvironment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("parentFocusEnvironment", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIFocusEnvironment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the parent focus environment.</summary>
        <value>The parent focus environment.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredContentSize">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize PreferredContentSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize PreferredContentSize" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.PreferredContentSize" />
      <MemberSignature Language="F#" Value="member this.PreferredContentSize : CoreGraphics.CGSize" Usage="UIKit.UIPresentationController.PreferredContentSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUIContentContainer.PreferredContentSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("preferredContentSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the preferred size for the content of the container.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredContentSizeDidChangeForChildContentContainer">
      <MemberSignature Language="C#" Value="public virtual void PreferredContentSizeDidChangeForChildContentContainer (UIKit.IUIContentContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PreferredContentSizeDidChangeForChildContentContainer(class UIKit.IUIContentContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.PreferredContentSizeDidChangeForChildContentContainer(UIKit.IUIContentContainer)" />
      <MemberSignature Language="F#" Value="abstract member PreferredContentSizeDidChangeForChildContentContainer : UIKit.IUIContentContainer -&gt; unit&#xA;override this.PreferredContentSizeDidChangeForChildContentContainer : UIKit.IUIContentContainer -&gt; unit" Usage="uIPresentationController.PreferredContentSizeDidChangeForChildContentContainer container" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIContentContainer.PreferredContentSizeDidChangeForChildContentContainer(UIKit.IUIContentContainer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("preferredContentSizeDidChangeForChildContentContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="UIKit.IUIContentContainer" />
      </Parameters>
      <Docs>
        <param name="container">The child <see cref="T:UIKit.IUIContentContainer" />.</param>
        <summary>Notifies this controller that the preferred size for content for a specified child container has changed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredFocusedView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView PreferredFocusedView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView PreferredFocusedView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.PreferredFocusedView" />
      <MemberSignature Language="F#" Value="member this.PreferredFocusedView : UIKit.UIView" Usage="UIKit.UIPresentationController.PreferredFocusedView" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUIFocusEnvironment.PreferredFocusedView</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, "Use 'PreferredFocusEnvironments' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, "Use 'PreferredFocusEnvironments' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("preferredFocusedView", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property. Developers should use 'PreferredFocusEnvironments' instead.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredFocusEnvironments">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIFocusEnvironment[] PreferredFocusEnvironments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUIFocusEnvironment[] PreferredFocusEnvironments" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.PreferredFocusEnvironments" />
      <MemberSignature Language="F#" Value="member this.PreferredFocusEnvironments : UIKit.IUIFocusEnvironment[]" Usage="UIKit.UIPresentationController.PreferredFocusEnvironments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("preferredFocusEnvironments", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIFocusEnvironment[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:UIKit.IUIFocusEnvironment" />s that are recursively searched by the system to find the default focused view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentationStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIModalPresentationStyle PresentationStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIModalPresentationStyle PresentationStyle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.PresentationStyle" />
      <MemberSignature Language="F#" Value="member this.PresentationStyle : UIKit.UIModalPresentationStyle" Usage="UIKit.UIPresentationController.PresentationStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("presentationStyle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIModalPresentationStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the preferred presentation style for this controller.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentationTransitionDidEnd">
      <MemberSignature Language="C#" Value="public virtual void PresentationTransitionDidEnd (bool completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentationTransitionDidEnd(bool completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.PresentationTransitionDidEnd(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member PresentationTransitionDidEnd : bool -&gt; unit&#xA;override this.PresentationTransitionDidEnd : bool -&gt; unit" Usage="uIPresentationController.PresentationTransitionDidEnd completed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("presentationTransitionDidEnd:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="completed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="completed">To be added.</param>
        <summary>Notifies this presentation controller that presentation animations have finished.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentationTransitionWillBegin">
      <MemberSignature Language="C#" Value="public virtual void PresentationTransitionWillBegin ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentationTransitionWillBegin() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.PresentationTransitionWillBegin" />
      <MemberSignature Language="F#" Value="abstract member PresentationTransitionWillBegin : unit -&gt; unit&#xA;override this.PresentationTransitionWillBegin : unit -&gt; unit" Usage="uIPresentationController.PresentationTransitionWillBegin " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("presentationTransitionWillBegin")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Notifies this presentation contoller that layout will begin on the views in the container.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentedView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView PresentedView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView PresentedView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.PresentedView" />
      <MemberSignature Language="F#" Value="member this.PresentedView : UIKit.UIView" Usage="UIKit.UIPresentationController.PresentedView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("presentedView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the view to present.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentedViewController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController PresentedViewController { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIViewController PresentedViewController" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.PresentedViewController" />
      <MemberSignature Language="F#" Value="member this.PresentedViewController : UIKit.UIViewController" Usage="UIKit.UIPresentationController.PresentedViewController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("presentedViewController", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the view controller being presented.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentingViewController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController PresentingViewController { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIViewController PresentingViewController" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.PresentingViewController" />
      <MemberSignature Language="F#" Value="member this.PresentingViewController : UIKit.UIViewController" Usage="UIKit.UIPresentationController.PresentingViewController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("presentingViewController", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the view controller that is the presentation starting point.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNeedsFocusUpdate">
      <MemberSignature Language="C#" Value="public virtual void SetNeedsFocusUpdate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNeedsFocusUpdate() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.SetNeedsFocusUpdate" />
      <MemberSignature Language="F#" Value="abstract member SetNeedsFocusUpdate : unit -&gt; unit&#xA;override this.SetNeedsFocusUpdate : unit -&gt; unit" Usage="uIPresentationController.SetNeedsFocusUpdate " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIFocusEnvironment.SetNeedsFocusUpdate</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setNeedsFocusUpdate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When <c>this</c> is the active focus environment, requests a focus update, which can potentially change the <see cref="P:UIKit.UIViewController.PreferredFocusedView" />. (See also <see cref="M:UIKit.UIViewController.UpdateFocusIfNeeded" />.)</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldPresentInFullscreen">
      <MemberSignature Language="C#" Value="public virtual bool ShouldPresentInFullscreen { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldPresentInFullscreen" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.ShouldPresentInFullscreen" />
      <MemberSignature Language="F#" Value="member this.ShouldPresentInFullscreen : bool" Usage="UIKit.UIPresentationController.ShouldPresentInFullscreen" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shouldPresentInFullscreen")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether the presentation covers the whole screen.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldRemovePresentersView">
      <MemberSignature Language="C#" Value="public virtual bool ShouldRemovePresentersView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldRemovePresentersView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.ShouldRemovePresentersView" />
      <MemberSignature Language="F#" Value="member this.ShouldRemovePresentersView : bool" Usage="UIKit.UIPresentationController.ShouldRemovePresentersView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shouldRemovePresentersView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets whether to remove the presenting view controller view when the presentation animations finish.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldUpdateFocus">
      <MemberSignature Language="C#" Value="public virtual bool ShouldUpdateFocus (UIKit.UIFocusUpdateContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldUpdateFocus(class UIKit.UIFocusUpdateContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.ShouldUpdateFocus(UIKit.UIFocusUpdateContext)" />
      <MemberSignature Language="F#" Value="abstract member ShouldUpdateFocus : UIKit.UIFocusUpdateContext -&gt; bool&#xA;override this.ShouldUpdateFocus : UIKit.UIFocusUpdateContext -&gt; bool" Usage="uIPresentationController.ShouldUpdateFocus context" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIFocusEnvironment.ShouldUpdateFocus(UIKit.UIFocusUpdateContext)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("shouldUpdateFocusInContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="UIKit.UIFocusUpdateContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Called prior to the <see cref="P:UIKit.UIPresentationController.ContainerView" /> either losing or receiving focus. If either focus environment returns <see langword="false" />, the focus update is canceled.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemLayoutFittingSizeDidChangeForChildContentContainer">
      <MemberSignature Language="C#" Value="public virtual void SystemLayoutFittingSizeDidChangeForChildContentContainer (UIKit.IUIContentContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SystemLayoutFittingSizeDidChangeForChildContentContainer(class UIKit.IUIContentContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.SystemLayoutFittingSizeDidChangeForChildContentContainer(UIKit.IUIContentContainer)" />
      <MemberSignature Language="F#" Value="abstract member SystemLayoutFittingSizeDidChangeForChildContentContainer : UIKit.IUIContentContainer -&gt; unit&#xA;override this.SystemLayoutFittingSizeDidChangeForChildContentContainer : UIKit.IUIContentContainer -&gt; unit" Usage="uIPresentationController.SystemLayoutFittingSizeDidChangeForChildContentContainer container" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIContentContainer.SystemLayoutFittingSizeDidChangeForChildContentContainer(UIKit.IUIContentContainer)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("systemLayoutFittingSizeDidChangeForChildContentContainer:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="UIKit.IUIContentContainer" />
      </Parameters>
      <Docs>
        <param name="container">The child <see cref="T:UIKit.IUIContentContainer" />.</param>
        <summary>Notifies this container that auto layout resized a specified child container.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitCollection">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITraitCollection TraitCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITraitCollection TraitCollection" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.TraitCollection" />
      <MemberSignature Language="F#" Value="member this.TraitCollection : UIKit.UITraitCollection" Usage="UIKit.UIPresentationController.TraitCollection" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUITraitEnvironment.TraitCollection</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("traitCollection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the collection of traits for this presentation controller.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitCollectionDidChange">
      <MemberSignature Language="C#" Value="public virtual void TraitCollectionDidChange (UIKit.UITraitCollection previousTraitCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TraitCollectionDidChange(class UIKit.UITraitCollection previousTraitCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.TraitCollectionDidChange(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="abstract member TraitCollectionDidChange : UIKit.UITraitCollection -&gt; unit&#xA;override this.TraitCollectionDidChange : UIKit.UITraitCollection -&gt; unit" Usage="uIPresentationController.TraitCollectionDidChange previousTraitCollection" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUITraitEnvironment.TraitCollectionDidChange(UIKit.UITraitCollection)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("traitCollectionDidChange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousTraitCollection" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="previousTraitCollection">To be added.</param>
        <summary>Performs custom behavior when the specified current trait collection changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateFocusIfNeeded">
      <MemberSignature Language="C#" Value="public virtual void UpdateFocusIfNeeded ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateFocusIfNeeded() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.UpdateFocusIfNeeded" />
      <MemberSignature Language="F#" Value="abstract member UpdateFocusIfNeeded : unit -&gt; unit&#xA;override this.UpdateFocusIfNeeded : unit -&gt; unit" Usage="uIPresentationController.UpdateFocusIfNeeded " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIFocusEnvironment.UpdateFocusIfNeeded</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("updateFocusIfNeeded")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>If any focus environment has a pending update, this method forces an immediate focus update. Unlike <see cref="M:UIKit.UIPresentationController.SetNeedsFocusUpdate" />, this method may be called by any <see cref="T:UIKit.UIPresentationController" />, whether it currently contains focus or not.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewWillTransitionToSize">
      <MemberSignature Language="C#" Value="public virtual void ViewWillTransitionToSize (CoreGraphics.CGSize toSize, UIKit.IUIViewControllerTransitionCoordinator coordinator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ViewWillTransitionToSize(valuetype CoreGraphics.CGSize toSize, class UIKit.IUIViewControllerTransitionCoordinator coordinator) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.ViewWillTransitionToSize(CoreGraphics.CGSize,UIKit.IUIViewControllerTransitionCoordinator)" />
      <MemberSignature Language="F#" Value="abstract member ViewWillTransitionToSize : CoreGraphics.CGSize * UIKit.IUIViewControllerTransitionCoordinator -&gt; unit&#xA;override this.ViewWillTransitionToSize : CoreGraphics.CGSize * UIKit.IUIViewControllerTransitionCoordinator -&gt; unit" Usage="uIPresentationController.ViewWillTransitionToSize (toSize, coordinator)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIContentContainer.ViewWillTransitionToSize(CoreGraphics.CGSize,UIKit.IUIViewControllerTransitionCoordinator)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("viewWillTransitionToSize:withTransitionCoordinator:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="coordinator" Type="UIKit.IUIViewControllerTransitionCoordinator" />
      </Parameters>
      <Docs>
        <param name="toSize">To be added.</param>
        <param name="coordinator">To be added.</param>
        <summary>Called shortly before the view will change size to <param name="toSize" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPresentationController.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="UIKit.UIPresentationController.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillTransitionToTraitCollection">
      <MemberSignature Language="C#" Value="public virtual void WillTransitionToTraitCollection (UIKit.UITraitCollection traitCollection, UIKit.IUIViewControllerTransitionCoordinator coordinator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillTransitionToTraitCollection(class UIKit.UITraitCollection traitCollection, class UIKit.IUIViewControllerTransitionCoordinator coordinator) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPresentationController.WillTransitionToTraitCollection(UIKit.UITraitCollection,UIKit.IUIViewControllerTransitionCoordinator)" />
      <MemberSignature Language="F#" Value="abstract member WillTransitionToTraitCollection : UIKit.UITraitCollection * UIKit.IUIViewControllerTransitionCoordinator -&gt; unit&#xA;override this.WillTransitionToTraitCollection : UIKit.UITraitCollection * UIKit.IUIViewControllerTransitionCoordinator -&gt; unit" Usage="uIPresentationController.WillTransitionToTraitCollection (traitCollection, coordinator)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIContentContainer.WillTransitionToTraitCollection(UIKit.UITraitCollection,UIKit.IUIViewControllerTransitionCoordinator)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("willTransitionToTraitCollection:withTransitionCoordinator:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traitCollection" Type="UIKit.UITraitCollection" />
        <Parameter Name="coordinator" Type="UIKit.IUIViewControllerTransitionCoordinator" />
      </Parameters>
      <Docs>
        <param name="traitCollection">The new trait collection.</param>
        <param name="coordinator">The <see cref="T:UIKit.IUIViewControllerTransitionCoordinator" /> coordinating the transition.</param>
        <summary>Notifies <c>this</c> that its trait collection will change to <paramref name="traitCollection" />, as coordinated by <paramref name="coordinator" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
