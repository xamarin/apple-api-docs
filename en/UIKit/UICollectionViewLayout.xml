<Type Name="UICollectionViewLayout" FullName="UIKit.UICollectionViewLayout">
  <TypeSignature Language="C#" Value="public class UICollectionViewLayout : Foundation.NSObject, Foundation.INSCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UICollectionViewLayout extends Foundation.NSObject implements class Foundation.INSCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:UIKit.UICollectionViewLayout" />
  <TypeSignature Language="F#" Value="type UICollectionViewLayout = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UICollectionViewLayout", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Base class for specifying the layout of a <see cref="T:UIKit.UICollectionView" />.</summary>
    <remarks>
      <para>
        Collection Views allow content to be displayed using arbitrary layouts. Grid-like layouts can use the <see cref="T:UIKit.UICollectionViewFlowLayout" /> or application developers can subtype <see cref="T:UIKit.UICollectionViewLayout" /> to create their own flexible pattern.
      </para>
      <para>The layout of the <see cref="T:UIKit.UICollectionViewCell" />s in a <see cref="T:UIKit.UICollectionView" /> is controlled by a <see cref="T:UIKit.UICollectionViewLayout" />, which can be passed in to the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=C:UIKit.UICollectionView(UICollectionViewLayout)&amp;scope=Xamarin" title="C:UIKit.UICollectionView(UICollectionViewLayout)">C:UIKit.UICollectionView(UICollectionViewLayout)</a></format> constructor or can changed with <see cref="M:UIKit.UICollectionView.SetCollectionViewLayout*" />. </para>
      <para>Application developers can create fully custom layouts by subclassing either <see cref="T:UIKit.UICollectionViewFlowLayout" /> or <see cref="T:UIKit.UICollectionViewLayout" />. </para>
      <para>
        The key methods to override are:
      </para>
      <para>
        <list type="table">
          <listheader>
            <term>Method</term>
            <description>Description</description>
          </listheader>
          <item>
            <term>
              <see cref="M:UIKit.UICollectionViewLayout.PrepareLayout" />
            </term>
            <description>Used for performing initial geometric calculations that will be used throughout the layout process.</description>
          </item>
          <item>
            <term>
              <see cref="P:UIKit.UICollectionViewLayout.CollectionViewContentSize" />
            </term>
            <description>
              Returns the size of the area used to display content.
            </description>
          </item>
          <item>
            <term>
              <see cref="M:UIKit.UICollectionViewLayout.LayoutAttributesForElementsInRect(CoreGraphics.CGRect)" />
            </term>
            <description>Returns the layout attributes for all the cells and views within the specified rectangle.
            </description>
          </item>
          <item>
            <term>
              <see cref="M:UIKit.UICollectionViewLayout.LayoutAttributesForItem(Foundation.NSIndexPath)" />
            </term>
            <description>The layout attributes of a specific cell
            </description>
          </item>
          <item>
            <term>
              <see cref="M:UIKit.UICollectionViewLayout.ShouldInvalidateLayoutForBoundsChange(CoreGraphics.CGRect)" />
            </term>
            <description>Returns <see langword="true" /> if the new bounds require an update of the layout.</description>
          </item>
        </list>
      </para>
      <para>The following code, taken from the "Introduction to Collection Views" class, creates a circular layout, as shown in the following image:</para>
      <example>
        <code lang="C#"><![CDATA[
          public override UICollectionViewLayoutAttributes LayoutAttributesForItem (NSIndexPath path)
          {
            UICollectionViewLayoutAttributes attributes = UICollectionViewLayoutAttributes.CreateForCell (path);
            attributes.Size = new SizeF (ItemSize, ItemSize);
          
            attributes.Center = new PointF (center.X + radius * (float)Math.Cos (2 * path.Row * Math.PI / cellCount),
              center.Y + radius * (float)Math.Sin (2 * path.Row * Math.PI / cellCount));
            return attributes;
          }
        ]]></code>
      </example>
      <para>
        <img href="xamarin-media/UIKit/_images/UIKit.UICollectionView.CircleLayout.png" />
      </para>
    </remarks>
    <altmember cref="T:UIKit.UICollectionView" />
    <altmember cref="T:UIKit.UICollectionViewController" />
    <altmember cref="T:UIKit.UICollectionViewFlowLayout" />
    <related type="article" href="http://docs.xamarin.com/ios/Guides/User_Interface/Introduction_to_Collection_Views">Introduction to Collection Views</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewLayout_class/index.html">Apple documentation for <c>UICollectionViewLayout</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewLayout (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewLayout : Foundation.NSCoder -&gt; UIKit.UICollectionViewLayout" Usage="new UIKit.UICollectionViewLayout coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UICollectionViewLayout (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewLayout : Foundation.NSObjectFlag -&gt; UIKit.UICollectionViewLayout" Usage="new UIKit.UICollectionViewLayout t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UICollectionViewLayout (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewLayout : nativeint -&gt; UIKit.UICollectionViewLayout" Usage="new UIKit.UICollectionViewLayout handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayout.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UICollectionViewLayout.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionView CollectionView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UICollectionView CollectionView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayout.CollectionView" />
      <MemberSignature Language="F#" Value="member this.CollectionView : UIKit.UICollectionView" Usage="UIKit.UICollectionViewLayout.CollectionView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("collectionView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:UIKit.UICollectionView" /> which this <see cref="T:UIKit.UICollectionViewLayout" /> is laying out.</summary>
        <value>The default value is <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionViewContentSize">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize CollectionViewContentSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize CollectionViewContentSize" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayout.CollectionViewContentSize" />
      <MemberSignature Language="F#" Value="member this.CollectionViewContentSize : CoreGraphics.CGSize" Usage="UIKit.UICollectionViewLayout.CollectionViewContentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("collectionViewContentSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The SizeF of this UICollectionViewLayout's content.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DevelopmentLayoutDirection">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIUserInterfaceLayoutDirection DevelopmentLayoutDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIUserInterfaceLayoutDirection DevelopmentLayoutDirection" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayout.DevelopmentLayoutDirection" />
      <MemberSignature Language="F#" Value="member this.DevelopmentLayoutDirection : UIKit.UIUserInterfaceLayoutDirection" Usage="UIKit.UICollectionViewLayout.DevelopmentLayoutDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("developmentLayoutDirection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIUserInterfaceLayoutDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the language direction that was used during development.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="uICollectionViewLayout.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalizeAnimatedBoundsChange">
      <MemberSignature Language="C#" Value="public virtual void FinalizeAnimatedBoundsChange ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalizeAnimatedBoundsChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.FinalizeAnimatedBoundsChange" />
      <MemberSignature Language="F#" Value="abstract member FinalizeAnimatedBoundsChange : unit -&gt; unit&#xA;override this.FinalizeAnimatedBoundsChange : unit -&gt; unit" Usage="uICollectionViewLayout.FinalizeAnimatedBoundsChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("finalizeAnimatedBoundsChange")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden, performs custom cleanup after animated changes to the bounds or after items have been inserted or deleted.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalizeCollectionViewUpdates">
      <MemberSignature Language="C#" Value="public virtual void FinalizeCollectionViewUpdates ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalizeCollectionViewUpdates() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.FinalizeCollectionViewUpdates" />
      <MemberSignature Language="F#" Value="abstract member FinalizeCollectionViewUpdates : unit -&gt; unit&#xA;override this.FinalizeCollectionViewUpdates : unit -&gt; unit" Usage="uICollectionViewLayout.FinalizeCollectionViewUpdates " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("finalizeCollectionViewUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>When overridden, allows additional animations or clean up during an update.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalizeLayoutTransition">
      <MemberSignature Language="C#" Value="public virtual void FinalizeLayoutTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinalizeLayoutTransition() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.FinalizeLayoutTransition" />
      <MemberSignature Language="F#" Value="abstract member FinalizeLayoutTransition : unit -&gt; unit&#xA;override this.FinalizeLayoutTransition : unit -&gt; unit" Usage="uICollectionViewLayout.FinalizeLayoutTransition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("finalizeLayoutTransition")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Called prior to transition animations, informs the layout object to perform any steps necessary before the animations.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalLayoutAttributesForDisappearingDecorationElement">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingDecorationElement (Foundation.NSString elementKind, Foundation.NSIndexPath decorationIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingDecorationElement(class Foundation.NSString elementKind, class Foundation.NSIndexPath decorationIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.FinalLayoutAttributesForDisappearingDecorationElement(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member FinalLayoutAttributesForDisappearingDecorationElement : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.FinalLayoutAttributesForDisappearingDecorationElement : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.FinalLayoutAttributesForDisappearingDecorationElement (elementKind, decorationIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("finalLayoutAttributesForDisappearingDecorationElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="Foundation.NSString" />
        <Parameter Name="decorationIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="elementKind">To be added.</param>
        <param name="decorationIndexPath">To be added.</param>
        <summary>The final layout information for a decoration element that is about to be removed from this UICollectionViewLayout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalLayoutAttributesForDisappearingItem">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingItem (Foundation.NSIndexPath itemIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingItem(class Foundation.NSIndexPath itemIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.FinalLayoutAttributesForDisappearingItem(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member FinalLayoutAttributesForDisappearingItem : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.FinalLayoutAttributesForDisappearingItem : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.FinalLayoutAttributesForDisappearingItem itemIndexPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("finalLayoutAttributesForDisappearingItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="itemIndexPath">To be added.</param>
        <summary>The final layout information for an item that is about to be removed from the UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinalLayoutAttributesForDisappearingSupplementaryElement">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingSupplementaryElement (Foundation.NSString elementKind, Foundation.NSIndexPath elementIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes FinalLayoutAttributesForDisappearingSupplementaryElement(class Foundation.NSString elementKind, class Foundation.NSIndexPath elementIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.FinalLayoutAttributesForDisappearingSupplementaryElement(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member FinalLayoutAttributesForDisappearingSupplementaryElement : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.FinalLayoutAttributesForDisappearingSupplementaryElement : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.FinalLayoutAttributesForDisappearingSupplementaryElement (elementKind, elementIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("finalLayoutAttributesForDisappearingSupplementaryElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="Foundation.NSString" />
        <Parameter Name="elementIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="elementKind">To be added.</param>
        <param name="elementIndexPath">To be added.</param>
        <summary>The final layout information for a supplementary view that is about to be removed from the collection view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlipsHorizontallyInOppositeLayoutDirection">
      <MemberSignature Language="C#" Value="public virtual bool FlipsHorizontallyInOppositeLayoutDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FlipsHorizontallyInOppositeLayoutDirection" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayout.FlipsHorizontallyInOppositeLayoutDirection" />
      <MemberSignature Language="F#" Value="member this.FlipsHorizontallyInOppositeLayoutDirection : bool" Usage="UIKit.UICollectionViewLayout.FlipsHorizontallyInOppositeLayoutDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("flipsHorizontallyInOppositeLayoutDirection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean that tells whether the coordinate system horizontally reverses for reversed layout directions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathsToDeleteForDecorationViewOfKind">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath[] GetIndexPathsToDeleteForDecorationViewOfKind (Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath[] GetIndexPathsToDeleteForDecorationViewOfKind(class Foundation.NSString kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.GetIndexPathsToDeleteForDecorationViewOfKind(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexPathsToDeleteForDecorationViewOfKind : Foundation.NSString -&gt; Foundation.NSIndexPath[]&#xA;override this.GetIndexPathsToDeleteForDecorationViewOfKind : Foundation.NSString -&gt; Foundation.NSIndexPath[]" Usage="uICollectionViewLayout.GetIndexPathsToDeleteForDecorationViewOfKind kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexPathsToDeleteForDecorationViewOfKind:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>An array of NSIndexPaths indicating the decoration views to remove.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathsToDeleteForSupplementaryView">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath[] GetIndexPathsToDeleteForSupplementaryView (Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath[] GetIndexPathsToDeleteForSupplementaryView(class Foundation.NSString kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.GetIndexPathsToDeleteForSupplementaryView(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexPathsToDeleteForSupplementaryView : Foundation.NSString -&gt; Foundation.NSIndexPath[]&#xA;override this.GetIndexPathsToDeleteForSupplementaryView : Foundation.NSString -&gt; Foundation.NSIndexPath[]" Usage="uICollectionViewLayout.GetIndexPathsToDeleteForSupplementaryView kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexPathsToDeleteForSupplementaryViewOfKind:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>An array of NSIndexPaths indicating the supplementary views to remove.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathsToInsertForDecorationView">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath[] GetIndexPathsToInsertForDecorationView (Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath[] GetIndexPathsToInsertForDecorationView(class Foundation.NSString kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.GetIndexPathsToInsertForDecorationView(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexPathsToInsertForDecorationView : Foundation.NSString -&gt; Foundation.NSIndexPath[]&#xA;override this.GetIndexPathsToInsertForDecorationView : Foundation.NSString -&gt; Foundation.NSIndexPath[]" Usage="uICollectionViewLayout.GetIndexPathsToInsertForDecorationView kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexPathsToInsertForDecorationViewOfKind:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>An array of NSIndexPaths indicating the decoration views to add.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathsToInsertForSupplementaryView">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath[] GetIndexPathsToInsertForSupplementaryView (Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath[] GetIndexPathsToInsertForSupplementaryView(class Foundation.NSString kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.GetIndexPathsToInsertForSupplementaryView(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexPathsToInsertForSupplementaryView : Foundation.NSString -&gt; Foundation.NSIndexPath[]&#xA;override this.GetIndexPathsToInsertForSupplementaryView : Foundation.NSString -&gt; Foundation.NSIndexPath[]" Usage="uICollectionViewLayout.GetIndexPathsToInsertForSupplementaryView kind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexPathsToInsertForSupplementaryViewOfKind:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <summary>An array of index paths indicating the supplementary views to add.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidationContext">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContext (UIKit.UICollectionViewLayoutAttributes preferredAttributes, UIKit.UICollectionViewLayoutAttributes originalAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContext(class UIKit.UICollectionViewLayoutAttributes preferredAttributes, class UIKit.UICollectionViewLayoutAttributes originalAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.GetInvalidationContext(UIKit.UICollectionViewLayoutAttributes,UIKit.UICollectionViewLayoutAttributes)" />
      <MemberSignature Language="F#" Value="abstract member GetInvalidationContext : UIKit.UICollectionViewLayoutAttributes * UIKit.UICollectionViewLayoutAttributes -&gt; UIKit.UICollectionViewLayoutInvalidationContext&#xA;override this.GetInvalidationContext : UIKit.UICollectionViewLayoutAttributes * UIKit.UICollectionViewLayoutAttributes -&gt; UIKit.UICollectionViewLayoutInvalidationContext" Usage="uICollectionViewLayout.GetInvalidationContext (preferredAttributes, originalAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidationContextForPreferredLayoutAttributes:withOriginalAttributes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutInvalidationContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferredAttributes" Type="UIKit.UICollectionViewLayoutAttributes" />
        <Parameter Name="originalAttributes" Type="UIKit.UICollectionViewLayoutAttributes" />
      </Parameters>
      <Docs>
        <param name="preferredAttributes">To be added.</param>
        <param name="originalAttributes">To be added.</param>
        <summary>Gets the invalidated areas for a change from <paramref name="originalAttributes" /> to <paramref name="preferredAttributes" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidationContextForBoundsChange">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForBoundsChange (CoreGraphics.CGRect newBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForBoundsChange(valuetype CoreGraphics.CGRect newBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.GetInvalidationContextForBoundsChange(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member GetInvalidationContextForBoundsChange : CoreGraphics.CGRect -&gt; UIKit.UICollectionViewLayoutInvalidationContext&#xA;override this.GetInvalidationContextForBoundsChange : CoreGraphics.CGRect -&gt; UIKit.UICollectionViewLayoutInvalidationContext" Usage="uICollectionViewLayout.GetInvalidationContextForBoundsChange newBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidationContextForBoundsChange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutInvalidationContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBounds" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="newBounds">To be added.</param>
        <summary>Returns a UICollectionViewLayoutInvalidationContext that specifies the portions of the layout that change in response to a change in bounds.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidationContextForEndingInteractiveMovementOfItems">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForEndingInteractiveMovementOfItems (Foundation.NSIndexPath[] finalIndexPaths, Foundation.NSIndexPath[] previousIndexPaths, bool movementCancelled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForEndingInteractiveMovementOfItems(class Foundation.NSIndexPath[] finalIndexPaths, class Foundation.NSIndexPath[] previousIndexPaths, bool movementCancelled) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.GetInvalidationContextForEndingInteractiveMovementOfItems(Foundation.NSIndexPath[],Foundation.NSIndexPath[],System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetInvalidationContextForEndingInteractiveMovementOfItems : Foundation.NSIndexPath[] * Foundation.NSIndexPath[] * bool -&gt; UIKit.UICollectionViewLayoutInvalidationContext&#xA;override this.GetInvalidationContextForEndingInteractiveMovementOfItems : Foundation.NSIndexPath[] * Foundation.NSIndexPath[] * bool -&gt; UIKit.UICollectionViewLayoutInvalidationContext" Usage="uICollectionViewLayout.GetInvalidationContextForEndingInteractiveMovementOfItems (finalIndexPaths, previousIndexPaths, movementCancelled)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidationContextForEndingInteractiveMovementOfItemsToFinalIndexPaths:previousIndexPaths:movementCancelled:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutInvalidationContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalIndexPaths" Type="Foundation.NSIndexPath[]" />
        <Parameter Name="previousIndexPaths" Type="Foundation.NSIndexPath[]" />
        <Parameter Name="movementCancelled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="finalIndexPaths">To be added.</param>
        <param name="previousIndexPaths">To be added.</param>
        <param name="movementCancelled">To be added.</param>
        <summary>Returns a validation context for the moved items.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInvalidationContextForInteractivelyMovingItems">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForInteractivelyMovingItems (Foundation.NSIndexPath[] targetIndexPaths, CoreGraphics.CGPoint targetPosition, Foundation.NSIndexPath[] previousIndexPaths, CoreGraphics.CGPoint previousPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutInvalidationContext GetInvalidationContextForInteractivelyMovingItems(class Foundation.NSIndexPath[] targetIndexPaths, valuetype CoreGraphics.CGPoint targetPosition, class Foundation.NSIndexPath[] previousIndexPaths, valuetype CoreGraphics.CGPoint previousPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.GetInvalidationContextForInteractivelyMovingItems(Foundation.NSIndexPath[],CoreGraphics.CGPoint,Foundation.NSIndexPath[],CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetInvalidationContextForInteractivelyMovingItems : Foundation.NSIndexPath[] * CoreGraphics.CGPoint * Foundation.NSIndexPath[] * CoreGraphics.CGPoint -&gt; UIKit.UICollectionViewLayoutInvalidationContext&#xA;override this.GetInvalidationContextForInteractivelyMovingItems : Foundation.NSIndexPath[] * CoreGraphics.CGPoint * Foundation.NSIndexPath[] * CoreGraphics.CGPoint -&gt; UIKit.UICollectionViewLayoutInvalidationContext" Usage="uICollectionViewLayout.GetInvalidationContextForInteractivelyMovingItems (targetIndexPaths, targetPosition, previousIndexPaths, previousPosition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidationContextForInteractivelyMovingItems:withTargetPosition:previousIndexPaths:previousPosition:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutInvalidationContext</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetIndexPaths" Type="Foundation.NSIndexPath[]" />
        <Parameter Name="targetPosition" Type="CoreGraphics.CGPoint" />
        <Parameter Name="previousIndexPaths" Type="Foundation.NSIndexPath[]" />
        <Parameter Name="previousPosition" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="targetIndexPaths">To be added.</param>
        <param name="targetPosition">To be added.</param>
        <param name="previousIndexPaths">To be added.</param>
        <param name="previousPosition">To be added.</param>
        <summary>Gets a <see cref="T:UIKit.UICollectionViewLayoutInvalidationContext" /> that identifies the items being moved.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLayoutAttributesForInteractivelyMovingItem">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes GetLayoutAttributesForInteractivelyMovingItem (Foundation.NSIndexPath indexPath, CoreGraphics.CGPoint targetPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes GetLayoutAttributesForInteractivelyMovingItem(class Foundation.NSIndexPath indexPath, valuetype CoreGraphics.CGPoint targetPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.GetLayoutAttributesForInteractivelyMovingItem(Foundation.NSIndexPath,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutAttributesForInteractivelyMovingItem : Foundation.NSIndexPath * CoreGraphics.CGPoint -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.GetLayoutAttributesForInteractivelyMovingItem : Foundation.NSIndexPath * CoreGraphics.CGPoint -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.GetLayoutAttributesForInteractivelyMovingItem (indexPath, targetPosition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutAttributesForInteractivelyMovingItemAtIndexPath:withTargetPosition:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="targetPosition" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="indexPath">To be added.</param>
        <param name="targetPosition">To be added.</param>
        <summary>Returns the layout attributes for items that the user is moving.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetIndexPathForInteractivelyMovingItem">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath GetTargetIndexPathForInteractivelyMovingItem (Foundation.NSIndexPath previousIndexPath, CoreGraphics.CGPoint position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath GetTargetIndexPathForInteractivelyMovingItem(class Foundation.NSIndexPath previousIndexPath, valuetype CoreGraphics.CGPoint position) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.GetTargetIndexPathForInteractivelyMovingItem(Foundation.NSIndexPath,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetTargetIndexPathForInteractivelyMovingItem : Foundation.NSIndexPath * CoreGraphics.CGPoint -&gt; Foundation.NSIndexPath&#xA;override this.GetTargetIndexPathForInteractivelyMovingItem : Foundation.NSIndexPath * CoreGraphics.CGPoint -&gt; Foundation.NSIndexPath" Usage="uICollectionViewLayout.GetTargetIndexPathForInteractivelyMovingItem (previousIndexPath, position)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("targetIndexPathForInteractivelyMovingItem:withPosition:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="previousIndexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="position" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="previousIndexPath">To be added.</param>
        <param name="position">To be added.</param>
        <summary>Returns the target index path for items that the user is moving.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialLayoutAttributesForAppearingDecorationElement">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingDecorationElement (Foundation.NSString elementKind, Foundation.NSIndexPath decorationIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingDecorationElement(class Foundation.NSString elementKind, class Foundation.NSIndexPath decorationIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.InitialLayoutAttributesForAppearingDecorationElement(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member InitialLayoutAttributesForAppearingDecorationElement : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.InitialLayoutAttributesForAppearingDecorationElement : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.InitialLayoutAttributesForAppearingDecorationElement (elementKind, decorationIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initialLayoutAttributesForAppearingDecorationElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="Foundation.NSString" />
        <Parameter Name="decorationIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="elementKind">To be added.</param>
        <param name="decorationIndexPath">To be added.</param>
        <summary>Information on the starting layout of a decoration view that is being inserted into the UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialLayoutAttributesForAppearingItem">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingItem (Foundation.NSIndexPath itemIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingItem(class Foundation.NSIndexPath itemIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.InitialLayoutAttributesForAppearingItem(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member InitialLayoutAttributesForAppearingItem : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.InitialLayoutAttributesForAppearingItem : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.InitialLayoutAttributesForAppearingItem itemIndexPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initialLayoutAttributesForAppearingItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="itemIndexPath">To be added.</param>
        <summary>Information on the starting layout of an item that is being inserted into the UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitialLayoutAttributesForAppearingSupplementaryElement">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingSupplementaryElement (Foundation.NSString elementKind, Foundation.NSIndexPath elementIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes InitialLayoutAttributesForAppearingSupplementaryElement(class Foundation.NSString elementKind, class Foundation.NSIndexPath elementIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.InitialLayoutAttributesForAppearingSupplementaryElement(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member InitialLayoutAttributesForAppearingSupplementaryElement : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.InitialLayoutAttributesForAppearingSupplementaryElement : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.InitialLayoutAttributesForAppearingSupplementaryElement (elementKind, elementIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initialLayoutAttributesForAppearingSupplementaryElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="Foundation.NSString" />
        <Parameter Name="elementIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="elementKind">To be added.</param>
        <param name="elementIndexPath">To be added.</param>
        <summary>Information on the starting layout of a supplementary view that is being inserted into the UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLayout">
      <MemberSignature Language="C#" Value="public virtual void InvalidateLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.InvalidateLayout" />
      <MemberSignature Language="F#" Value="abstract member InvalidateLayout : unit -&gt; unit&#xA;override this.InvalidateLayout : unit -&gt; unit" Usage="uICollectionViewLayout.InvalidateLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidateLayout")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the current layout and initiates an update.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLayout">
      <MemberSignature Language="C#" Value="public virtual void InvalidateLayout (UIKit.UICollectionViewLayoutInvalidationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateLayout(class UIKit.UICollectionViewLayoutInvalidationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.InvalidateLayout(UIKit.UICollectionViewLayoutInvalidationContext)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateLayout : UIKit.UICollectionViewLayoutInvalidationContext -&gt; unit&#xA;override this.InvalidateLayout : UIKit.UICollectionViewLayoutInvalidationContext -&gt; unit" Usage="uICollectionViewLayout.InvalidateLayout context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidateLayoutWithContext:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="UIKit.UICollectionViewLayoutInvalidationContext" />
      </Parameters>
      <Docs>
        <param name="context">To be added.</param>
        <summary>Forces recomputation and application of the collection view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidationContextClass">
      <MemberSignature Language="C#" Value="public static ObjCRuntime.Class InvalidationContextClass ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ObjCRuntime.Class InvalidationContextClass() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.InvalidationContextClass" />
      <MemberSignature Language="F#" Value="static member InvalidationContextClass : unit -&gt; ObjCRuntime.Class" Usage="UIKit.UICollectionViewLayout.InvalidationContextClass " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidationContextClass")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>The custom UICollectionViewLayoutInvalidationContext used for this UICollectionViewLayout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesClass">
      <MemberSignature Language="C#" Value="public static ObjCRuntime.Class LayoutAttributesClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class ObjCRuntime.Class LayoutAttributesClass" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayout.LayoutAttributesClass" />
      <MemberSignature Language="F#" Value="member this.LayoutAttributesClass : ObjCRuntime.Class" Usage="UIKit.UICollectionViewLayout.LayoutAttributesClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("layoutAttributesClass")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ObjCRuntime.Class</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UICollectionViewLayoutAttributes used for layout attributes for this UICollectionViewLayout.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesForDecorationView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes LayoutAttributesForDecorationView (Foundation.NSString kind, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes LayoutAttributesForDecorationView(class Foundation.NSString kind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.LayoutAttributesForDecorationView(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member LayoutAttributesForDecorationView : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.LayoutAttributesForDecorationView : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.LayoutAttributesForDecorationView (kind, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutAttributesForDecorationViewOfKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The UICollectionViewLayoutAttributes for the specified decoration view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesForElementsInRect">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes[] LayoutAttributesForElementsInRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.LayoutAttributesForElementsInRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member LayoutAttributesForElementsInRect : CoreGraphics.CGRect -&gt; UIKit.UICollectionViewLayoutAttributes[]&#xA;override this.LayoutAttributesForElementsInRect : CoreGraphics.CGRect -&gt; UIKit.UICollectionViewLayoutAttributes[]" Usage="uICollectionViewLayout.LayoutAttributesForElementsInRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutAttributesForElementsInRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <summary>The UICollectionViewLayoutAttributes for all the cells and views in the specified <see cref="T:System.Drawing.RectangleF" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesForItem">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes LayoutAttributesForItem (Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes LayoutAttributesForItem(class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.LayoutAttributesForItem(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member LayoutAttributesForItem : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.LayoutAttributesForItem : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.LayoutAttributesForItem indexPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutAttributesForItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="indexPath">To be added.</param>
        <summary>The UICollectionViewLayoutAttributes for the specified NSIndexPath.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesForSupplementaryView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryView (Foundation.NSString kind, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryView(class Foundation.NSString kind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.LayoutAttributesForSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member LayoutAttributesForSupplementaryView : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.LayoutAttributesForSupplementaryView : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.LayoutAttributesForSupplementaryView (kind, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutAttributesForSupplementaryViewOfKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The UICollectionViewLayoutAttributes for the specified supplementary view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutAttributesForSupplementaryView">
      <MemberSignature Language="C#" Value="public UIKit.UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryView (UIKit.UICollectionElementKindSection section, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UICollectionViewLayoutAttributes LayoutAttributesForSupplementaryView(valuetype UIKit.UICollectionElementKindSection section, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.LayoutAttributesForSupplementaryView(UIKit.UICollectionElementKindSection,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="member this.LayoutAttributesForSupplementaryView : UIKit.UICollectionElementKindSection * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionViewLayout.LayoutAttributesForSupplementaryView (section, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="section" Type="UIKit.UICollectionElementKindSection" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="section">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The attributes for the supplementary view at the specified indexPath.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForAnimatedBoundsChange">
      <MemberSignature Language="C#" Value="public virtual void PrepareForAnimatedBoundsChange (CoreGraphics.CGRect oldBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForAnimatedBoundsChange(valuetype CoreGraphics.CGRect oldBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.PrepareForAnimatedBoundsChange(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member PrepareForAnimatedBoundsChange : CoreGraphics.CGRect -&gt; unit&#xA;override this.PrepareForAnimatedBoundsChange : CoreGraphics.CGRect -&gt; unit" Usage="uICollectionViewLayout.PrepareForAnimatedBoundsChange oldBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("prepareForAnimatedBoundsChange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldBounds" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="oldBounds">To be added.</param>
        <summary>Called prior to animated changes to the bounds or before insertion or deletion of items.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForCollectionViewUpdates">
      <MemberSignature Language="C#" Value="public virtual void PrepareForCollectionViewUpdates (UIKit.UICollectionViewUpdateItem[] updateItems);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForCollectionViewUpdates(class UIKit.UICollectionViewUpdateItem[] updateItems) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.PrepareForCollectionViewUpdates(UIKit.UICollectionViewUpdateItem[])" />
      <MemberSignature Language="F#" Value="abstract member PrepareForCollectionViewUpdates : UIKit.UICollectionViewUpdateItem[] -&gt; unit&#xA;override this.PrepareForCollectionViewUpdates : UIKit.UICollectionViewUpdateItem[] -&gt; unit" Usage="uICollectionViewLayout.PrepareForCollectionViewUpdates updateItems" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("prepareForCollectionViewUpdates:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updateItems" Type="UIKit.UICollectionViewUpdateItem[]" />
      </Parameters>
      <Docs>
        <param name="updateItems">To be added.</param>
        <summary>Notifies the layout object that the contents of the UICollectionView are about to change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForTransitionFromLayout">
      <MemberSignature Language="C#" Value="public virtual void PrepareForTransitionFromLayout (UIKit.UICollectionViewLayout oldLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForTransitionFromLayout(class UIKit.UICollectionViewLayout oldLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.PrepareForTransitionFromLayout(UIKit.UICollectionViewLayout)" />
      <MemberSignature Language="F#" Value="abstract member PrepareForTransitionFromLayout : UIKit.UICollectionViewLayout -&gt; unit&#xA;override this.PrepareForTransitionFromLayout : UIKit.UICollectionViewLayout -&gt; unit" Usage="uICollectionViewLayout.PrepareForTransitionFromLayout oldLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("prepareForTransitionFromLayout:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="oldLayout" Type="UIKit.UICollectionViewLayout" />
      </Parameters>
      <Docs>
        <param name="oldLayout">To be added.</param>
        <summary>Notifies the layout object that it will shortly be installed as the layout for the UICollectionView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForTransitionToLayout">
      <MemberSignature Language="C#" Value="public virtual void PrepareForTransitionToLayout (UIKit.UICollectionViewLayout newLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForTransitionToLayout(class UIKit.UICollectionViewLayout newLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.PrepareForTransitionToLayout(UIKit.UICollectionViewLayout)" />
      <MemberSignature Language="F#" Value="abstract member PrepareForTransitionToLayout : UIKit.UICollectionViewLayout -&gt; unit&#xA;override this.PrepareForTransitionToLayout : UIKit.UICollectionViewLayout -&gt; unit" Usage="uICollectionViewLayout.PrepareForTransitionToLayout newLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("prepareForTransitionToLayout:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newLayout" Type="UIKit.UICollectionViewLayout" />
      </Parameters>
      <Docs>
        <param name="newLayout">To be added.</param>
        <summary>Tells the layout object that it will shortly be removed as the layout for the UICollectionView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareLayout">
      <MemberSignature Language="C#" Value="public virtual void PrepareLayout ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareLayout() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.PrepareLayout" />
      <MemberSignature Language="F#" Value="abstract member PrepareLayout : unit -&gt; unit&#xA;override this.PrepareLayout : unit -&gt; unit" Usage="uICollectionViewLayout.PrepareLayout " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("prepareLayout")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tells the layout object to update the layout.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassForDecorationView">
      <MemberSignature Language="C#" Value="public void RegisterClassForDecorationView (Type viewType, Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClassForDecorationView(class System.Type viewType, class Foundation.NSString kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.RegisterClassForDecorationView(System.Type,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="member this.RegisterClassForDecorationView : Type * Foundation.NSString -&gt; unit" Usage="uICollectionViewLayout.RegisterClassForDecorationView (viewType, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewType" Type="System.Type" />
        <Parameter Name="kind" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="viewType">The type of the class that will provide the decoration.   Use null to unregister the previous.</param>
        <param name="kind">The element kind for which the registered type will be used.</param>
        <summary>Registers the class identified by kind as a decoration view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNibForDecorationView">
      <MemberSignature Language="C#" Value="public virtual void RegisterNibForDecorationView (UIKit.UINib nib, Foundation.NSString kind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterNibForDecorationView(class UIKit.UINib nib, class Foundation.NSString kind) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.RegisterNibForDecorationView(UIKit.UINib,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member RegisterNibForDecorationView : UIKit.UINib * Foundation.NSString -&gt; unit&#xA;override this.RegisterNibForDecorationView : UIKit.UINib * Foundation.NSString -&gt; unit" Usage="uICollectionViewLayout.RegisterNibForDecorationView (nib, kind)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("registerNib:forDecorationViewOfKind:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nib" Type="UIKit.UINib" />
        <Parameter Name="kind" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="nib">
          <para>The object containing the cell definition, the nib file should contain a single UICollectionReusableView object.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="kind">The element kind for which the registered type will be used.</param>
        <summary>Registers the UINib for use as a template for decoration views.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInvalidateLayout">
      <MemberSignature Language="C#" Value="public virtual bool ShouldInvalidateLayout (UIKit.UICollectionViewLayoutAttributes preferredAttributes, UIKit.UICollectionViewLayoutAttributes originalAttributes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldInvalidateLayout(class UIKit.UICollectionViewLayoutAttributes preferredAttributes, class UIKit.UICollectionViewLayoutAttributes originalAttributes) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.ShouldInvalidateLayout(UIKit.UICollectionViewLayoutAttributes,UIKit.UICollectionViewLayoutAttributes)" />
      <MemberSignature Language="F#" Value="abstract member ShouldInvalidateLayout : UIKit.UICollectionViewLayoutAttributes * UIKit.UICollectionViewLayoutAttributes -&gt; bool&#xA;override this.ShouldInvalidateLayout : UIKit.UICollectionViewLayoutAttributes * UIKit.UICollectionViewLayoutAttributes -&gt; bool" Usage="uICollectionViewLayout.ShouldInvalidateLayout (preferredAttributes, originalAttributes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("shouldInvalidateLayoutForPreferredLayoutAttributes:withOriginalAttributes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="preferredAttributes" Type="UIKit.UICollectionViewLayoutAttributes" />
        <Parameter Name="originalAttributes" Type="UIKit.UICollectionViewLayoutAttributes" />
      </Parameters>
      <Docs>
        <param name="preferredAttributes">To be added.</param>
        <param name="originalAttributes">To be added.</param>
        <summary>Returns true if the collection view needs to invalidate for a change from <paramref name="preferredAttributes" /> to <paramref name="originalAttributes" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInvalidateLayoutForBoundsChange">
      <MemberSignature Language="C#" Value="public virtual bool ShouldInvalidateLayoutForBoundsChange (CoreGraphics.CGRect newBounds);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldInvalidateLayoutForBoundsChange(valuetype CoreGraphics.CGRect newBounds) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.ShouldInvalidateLayoutForBoundsChange(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member ShouldInvalidateLayoutForBoundsChange : CoreGraphics.CGRect -&gt; bool&#xA;override this.ShouldInvalidateLayoutForBoundsChange : CoreGraphics.CGRect -&gt; bool" Usage="uICollectionViewLayout.ShouldInvalidateLayoutForBoundsChange newBounds" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("shouldInvalidateLayoutForBoundsChange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBounds" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="newBounds">To be added.</param>
        <summary>Whether the new bounds requires a layout update.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetContentOffset">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint TargetContentOffset (CoreGraphics.CGPoint proposedContentOffset, CoreGraphics.CGPoint scrollingVelocity);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint TargetContentOffset(valuetype CoreGraphics.CGPoint proposedContentOffset, valuetype CoreGraphics.CGPoint scrollingVelocity) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.TargetContentOffset(CoreGraphics.CGPoint,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member TargetContentOffset : CoreGraphics.CGPoint * CoreGraphics.CGPoint -&gt; CoreGraphics.CGPoint&#xA;override this.TargetContentOffset : CoreGraphics.CGPoint * CoreGraphics.CGPoint -&gt; CoreGraphics.CGPoint" Usage="uICollectionViewLayout.TargetContentOffset (proposedContentOffset, scrollingVelocity)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("targetContentOffsetForProposedContentOffset:withScrollingVelocity:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedContentOffset" Type="CoreGraphics.CGPoint" />
        <Parameter Name="scrollingVelocity" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="proposedContentOffset">To be added.</param>
        <param name="scrollingVelocity">To be added.</param>
        <summary>The PointF at which to stop scrolling.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetContentOffsetForProposedContentOffset">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint TargetContentOffsetForProposedContentOffset (CoreGraphics.CGPoint proposedContentOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint TargetContentOffsetForProposedContentOffset(valuetype CoreGraphics.CGPoint proposedContentOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayout.TargetContentOffsetForProposedContentOffset(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member TargetContentOffsetForProposedContentOffset : CoreGraphics.CGPoint -&gt; CoreGraphics.CGPoint&#xA;override this.TargetContentOffsetForProposedContentOffset : CoreGraphics.CGPoint -&gt; CoreGraphics.CGPoint" Usage="uICollectionViewLayout.TargetContentOffsetForProposedContentOffset proposedContentOffset" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("targetContentOffsetForProposedContentOffset:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="proposedContentOffset" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="proposedContentOffset">To be added.</param>
        <summary>The content offset to use after an animated layout change.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
