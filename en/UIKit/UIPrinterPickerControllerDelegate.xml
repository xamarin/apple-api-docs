<Type Name="UIPrinterPickerControllerDelegate" FullName="UIKit.UIPrinterPickerControllerDelegate">
  <TypeSignature Language="C#" Value="public class UIPrinterPickerControllerDelegate : Foundation.NSObject, IDisposable, UIKit.IUIPrinterPickerControllerDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIPrinterPickerControllerDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIPrinterPickerControllerDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIPrinterPickerControllerDelegate" />
  <TypeSignature Language="F#" Value="type UIPrinterPickerControllerDelegate = class&#xA;    inherit NSObject&#xA;    interface IUIPrinterPickerControllerDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIPrinterPickerControllerDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIPrinterPickerControllerDelegate", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate object for a <see cref="T:UIKit.UIPrinterPickerController" />. Defines events relating to the presentation and dismissal of the controller, and a method for when a printer has been selected.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPrinterPickerControllerDelegate_protocol/index.html">Apple documentation for <c>UIPrinterPickerControllerDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPrinterPickerControllerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrinterPickerControllerDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIPrinterPickerControllerDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrinterPickerControllerDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPrinterPickerControllerDelegate : Foundation.NSObjectFlag -&gt; UIKit.UIPrinterPickerControllerDelegate" Usage="new UIKit.UIPrinterPickerControllerDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIPrinterPickerControllerDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrinterPickerControllerDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPrinterPickerControllerDelegate : nativeint -&gt; UIKit.UIPrinterPickerControllerDelegate" Usage="new UIKit.UIPrinterPickerControllerDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDismiss">
      <MemberSignature Language="C#" Value="public virtual void DidDismiss (UIKit.UIPrinterPickerController printerPickerController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidDismiss(class UIKit.UIPrinterPickerController printerPickerController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrinterPickerControllerDelegate.DidDismiss(UIKit.UIPrinterPickerController)" />
      <MemberSignature Language="F#" Value="abstract member DidDismiss : UIKit.UIPrinterPickerController -&gt; unit&#xA;override this.DidDismiss : UIKit.UIPrinterPickerController -&gt; unit" Usage="uIPrinterPickerControllerDelegate.DidDismiss printerPickerController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("printerPickerControllerDidDismiss:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printerPickerController" Type="UIKit.UIPrinterPickerController" />
      </Parameters>
      <Docs>
        <param name="printerPickerController">The printer picker controller that is being displayed.</param>
        <summary>Informs the delegate that the specified printer picker was dismissed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidPresent">
      <MemberSignature Language="C#" Value="public virtual void DidPresent (UIKit.UIPrinterPickerController printerPickerController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidPresent(class UIKit.UIPrinterPickerController printerPickerController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrinterPickerControllerDelegate.DidPresent(UIKit.UIPrinterPickerController)" />
      <MemberSignature Language="F#" Value="abstract member DidPresent : UIKit.UIPrinterPickerController -&gt; unit&#xA;override this.DidPresent : UIKit.UIPrinterPickerController -&gt; unit" Usage="uIPrinterPickerControllerDelegate.DidPresent printerPickerController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("printerPickerControllerDidPresent:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printerPickerController" Type="UIKit.UIPrinterPickerController" />
      </Parameters>
      <Docs>
        <param name="printerPickerController">The printer picker controller that is being displayed.</param>
        <summary>Informs the delegate that the specified printer picker was displayed and that it is now visible.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectPrinter">
      <MemberSignature Language="C#" Value="public virtual void DidSelectPrinter (UIKit.UIPrinterPickerController printerPickerController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSelectPrinter(class UIKit.UIPrinterPickerController printerPickerController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrinterPickerControllerDelegate.DidSelectPrinter(UIKit.UIPrinterPickerController)" />
      <MemberSignature Language="F#" Value="abstract member DidSelectPrinter : UIKit.UIPrinterPickerController -&gt; unit&#xA;override this.DidSelectPrinter : UIKit.UIPrinterPickerController -&gt; unit" Usage="uIPrinterPickerControllerDelegate.DidSelectPrinter printerPickerController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("printerPickerControllerDidSelectPrinter:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printerPickerController" Type="UIKit.UIPrinterPickerController" />
      </Parameters>
      <Docs>
        <param name="printerPickerController">The printer picker controller that is being displayed.</param>
        <summary>Informs the delegate that a specified printer was selected.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetParentViewController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController GetParentViewController (UIKit.UIPrinterPickerController printerPickerController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIViewController GetParentViewController(class UIKit.UIPrinterPickerController printerPickerController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrinterPickerControllerDelegate.GetParentViewController(UIKit.UIPrinterPickerController)" />
      <MemberSignature Language="F#" Value="abstract member GetParentViewController : UIKit.UIPrinterPickerController -&gt; UIKit.UIViewController&#xA;override this.GetParentViewController : UIKit.UIPrinterPickerController -&gt; UIKit.UIViewController" Usage="uIPrinterPickerControllerDelegate.GetParentViewController printerPickerController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("printerPickerControllerParentViewController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printerPickerController" Type="UIKit.UIPrinterPickerController" />
      </Parameters>
      <Docs>
        <param name="printerPickerController">The printer picker controller that is being displayed.</param>
        <summary>Gets the view controller that is to act as the parent for the printer picker.</summary>
        <returns>A view controller from the interface of your app.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldShowPrinter">
      <MemberSignature Language="C#" Value="public virtual bool ShouldShowPrinter (UIKit.UIPrinterPickerController printerPickerController, UIKit.UIPrinter printer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldShowPrinter(class UIKit.UIPrinterPickerController printerPickerController, class UIKit.UIPrinter printer) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrinterPickerControllerDelegate.ShouldShowPrinter(UIKit.UIPrinterPickerController,UIKit.UIPrinter)" />
      <MemberSignature Language="F#" Value="abstract member ShouldShowPrinter : UIKit.UIPrinterPickerController * UIKit.UIPrinter -&gt; bool&#xA;override this.ShouldShowPrinter : UIKit.UIPrinterPickerController * UIKit.UIPrinter -&gt; bool" Usage="uIPrinterPickerControllerDelegate.ShouldShowPrinter (printerPickerController, printer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("printerPickerController:shouldShowPrinter:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printerPickerController" Type="UIKit.UIPrinterPickerController" />
        <Parameter Name="printer" Type="UIKit.UIPrinter" />
      </Parameters>
      <Docs>
        <param name="printerPickerController">The printer picker controller that is being displayed.</param>
        <param name="printer">Designated printer for consideration by the delegate.</param>
        <summary>Asks the delegate whether the specified printer should be included in the picker.</summary>
        <returns>If set to <see langword="true" />, this indicates that the printer should be displayed. Otherwise set to <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDismiss">
      <MemberSignature Language="C#" Value="public virtual void WillDismiss (UIKit.UIPrinterPickerController printerPickerController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDismiss(class UIKit.UIPrinterPickerController printerPickerController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrinterPickerControllerDelegate.WillDismiss(UIKit.UIPrinterPickerController)" />
      <MemberSignature Language="F#" Value="abstract member WillDismiss : UIKit.UIPrinterPickerController -&gt; unit&#xA;override this.WillDismiss : UIKit.UIPrinterPickerController -&gt; unit" Usage="uIPrinterPickerControllerDelegate.WillDismiss printerPickerController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("printerPickerControllerWillDismiss:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printerPickerController" Type="UIKit.UIPrinterPickerController" />
      </Parameters>
      <Docs>
        <param name="printerPickerController">The printer picker controller that is being displayed.</param>
        <summary>Informs the delegate that the designated printer picker is about to be dismissed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPresent">
      <MemberSignature Language="C#" Value="public virtual void WillPresent (UIKit.UIPrinterPickerController printerPickerController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillPresent(class UIKit.UIPrinterPickerController printerPickerController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPrinterPickerControllerDelegate.WillPresent(UIKit.UIPrinterPickerController)" />
      <MemberSignature Language="F#" Value="abstract member WillPresent : UIKit.UIPrinterPickerController -&gt; unit&#xA;override this.WillPresent : UIKit.UIPrinterPickerController -&gt; unit" Usage="uIPrinterPickerControllerDelegate.WillPresent printerPickerController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("printerPickerControllerWillPresent:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="printerPickerController" Type="UIKit.UIPrinterPickerController" />
      </Parameters>
      <Docs>
        <param name="printerPickerController">The printer picker controller that is being displayed.</param>
        <summary>Informs the delegate that the designated printer picker is about to be displayed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
