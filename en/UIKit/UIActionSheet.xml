<Type Name="UIActionSheet" FullName="UIKit.UIActionSheet">
  <TypeSignature Language="C#" Value="public class UIActionSheet : UIKit.UIView, System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIActionSheet extends UIKit.UIView implements class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIActionSheet" />
  <TypeSignature Language="F#" Value="type UIActionSheet = class&#xA;    inherit UIView&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIActionSheet", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:UIKit.UIView" /> that displays an action sheet with one or more buttons. (As of iOS 8, devs should use <see cref="T:UIKit.UIAlertController" /> rather than this class.)</summary>
    <remarks>
      <para>As of iOS 8, app devs should use <see cref="T:UIKit.UIAlertController" /> rather than this class. Extensions may not use this class at all.</para>
      <para>
        The <see cref="T:UIKit.UIActionSheet" /> control is a convenient way to allow the application user to choose among alternative actions. The following code and diagram are taken from the "Action Sheets" section of the "iOS Standard Controls" sample.
      </para>
      <example>
        <code lang="C#"><![CDATA[
protected void HandleBtnActionSheetWithOtherButtonsTouchUpInside (object sender, EventArgs e)
{
	actionSheet = new UIActionSheet ("action sheet with other buttons");
	actionSheet.AddButton ("delete");
	actionSheet.AddButton ("cancel");
	actionSheet.AddButton ("a different option!");
	actionSheet.AddButton ("another option");
	actionSheet.DestructiveButtonIndex = 0;
	actionSheet.CancelButtonIndex = 1;
	//actionSheet.FirstOtherButtonIndex = 2;
	actionSheet.Clicked += delegate(object a, UIButtonEventArgs b) {
		Console.WriteLine ("Button " + b.ButtonIndex.ToString () + " clicked");
	};
	actionSheet.ShowInView (View);
	
}
          ]]></code>
      </example>
      <para>
        <img href="xamarin-media/UIKit/_images/UIKit.UIActionSheet.png" />
      </para>
      <para>
   The Xamarin API supports two styles of event notification: the Objective-C style that uses a delegate class or the C# style using event notifications.  
</para>
      <para>
   The C# style allows the user to add or remove event handlers at runtime by assigning to the events of properties of this class.    Event handlers can be anyone of a method, an anonymous methods or a lambda expression.  Using the C# style events or properties will override any manual settings to the Objective-C Delegate or WeakDelegate settings.
</para>
      <para>The Objective-C style requires the user to create a new class derived from <see cref="T:UIKit.UIActionSheetDelegate" /> class and assign it to the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=UIKit%20Delegate&amp;scope=Xamarin" title="P:UIKit.Delegate">P:UIKit.Delegate</a></format> property.   Alternatively, for low-level control, by creating a class derived from <see cref="T:Foundation.NSObject" /> which has every entry point properly decorated with an [Export] attribute.   The instance of this object can then be assigned to the <see cref="P:UIKit.UIActionSheet.WeakDelegate" /> property.   
</para>
    </remarks>
    <altmember cref="T:UIKit.UIAlertView" />
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/FrogScroller">iOS Standard Controls</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MonoCatalog-MonoDevelop/">monocatalog</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActionSheet_Class/index.html">Apple documentation for <c>UIActionSheet</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActionSheet ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActionSheet (CoreGraphics.CGRect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.#ctor(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheet : CoreGraphics.CGRect -&gt; UIKit.UIActionSheet" Usage="new UIKit.UIActionSheet frame" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UIActionSheet with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of UIActionSheet with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActionSheet (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheet : Foundation.NSCoder -&gt; UIKit.UIActionSheet" Usage="new UIKit.UIActionSheet coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIActionSheet (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheet : Foundation.NSObjectFlag -&gt; UIKit.UIActionSheet" Usage="new UIKit.UIActionSheet t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIActionSheet (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheet : nativeint -&gt; UIKit.UIActionSheet" Usage="new UIKit.UIActionSheet handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActionSheet (string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheet : string -&gt; UIKit.UIActionSheet" Usage="new UIKit.UIActionSheet title" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="title">A title to be displayed in the title area of the action sheet.</param>
        <summary>Initialize an <see cref="T:UIKit.UIActionSheet" /> with a title.</summary>
        <remarks>Pass <see langword="null" /> to <paramref name="title" /> if there is no text to display in the title area.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActionSheet (string title, UIKit.IUIActionSheetDelegate del);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string title, class UIKit.IUIActionSheetDelegate del) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.#ctor(System.String,UIKit.IUIActionSheetDelegate)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheet : string * UIKit.IUIActionSheetDelegate -&gt; UIKit.UIActionSheet" Usage="new UIKit.UIActionSheet (title, del)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="del" Type="UIKit.IUIActionSheetDelegate" />
      </Parameters>
      <Docs>
        <param name="title">To be added.</param>
        <param name="del">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActionSheet (string title, UIKit.UIActionSheetDelegate del);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string title, class UIKit.UIActionSheetDelegate del) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.#ctor(System.String,UIKit.UIActionSheetDelegate)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheet : string * UIKit.UIActionSheetDelegate -&gt; UIKit.UIActionSheet" Usage="new UIKit.UIActionSheet (title, del)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("Use overload with a IUIActionSheetDelegate parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="del" Type="UIKit.UIActionSheetDelegate" />
      </Parameters>
      <Docs>
        <param name="title">A title to be displayed in the title area of the action sheet.</param>
        <param name="del">A delegate that will respond to taps in the action sheet.</param>
        <summary>Initialize an <see cref="T:UIKit.UIActionSheet" /> with a title and a delegate that will handle taps.</summary>
        <remarks>Pass <see langword="null" /> to <paramref name="title" /> if there is no text to display in the title area.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActionSheet (string title, UIKit.IUIActionSheetDelegate del, string cancelTitle, string destroy, params string[] other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string title, class UIKit.IUIActionSheetDelegate del, string cancelTitle, string destroy, string[] other) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.#ctor(System.String,UIKit.IUIActionSheetDelegate,System.String,System.String,System.String[])" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheet : string * UIKit.IUIActionSheetDelegate * string * string * string[] -&gt; UIKit.UIActionSheet" Usage="new UIKit.UIActionSheet (title, del, cancelTitle, destroy, other)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="del" Type="UIKit.IUIActionSheetDelegate" />
        <Parameter Name="cancelTitle" Type="System.String" />
        <Parameter Name="destroy" Type="System.String" />
        <Parameter Name="other" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="title">A title to be displayed in the title area of the action sheet.</param>
        <param name="del">A delegate that will respond to taps in the action sheet.</param>
        <param name="cancelTitle">The title of the Cancel button. This will be displayed in a black button.</param>
        <param name="destroy">The title of the destructive button. This will be displayed in a red button.</param>
        <param name="other">An array of <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=System%20String&amp;scope=Xamarin" title="T:System.String">T:System.String</a></format> to use for other buttons in the <see cref="T:UIKit.UIActionSheet" />.</param>
        <summary>Initializes a <see cref="T:UIKit.UIActionSheet" /> instance.</summary>
        <remarks>
          <para>Pass <see langword="null" /> to <paramref name="title" /> if there is no text to display in the title area.</para>
          <para>If the action sheet is being presented on an iPad, then the <paramref name="cancelTitle" /> should be set to <see langword="null" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActionSheet (string title, UIKit.UIActionSheetDelegate del, string cancelTitle, string destroy, params string[] other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string title, class UIKit.UIActionSheetDelegate del, string cancelTitle, string destroy, string[] other) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.#ctor(System.String,UIKit.UIActionSheetDelegate,System.String,System.String,System.String[])" />
      <MemberSignature Language="F#" Value="new UIKit.UIActionSheet : string * UIKit.UIActionSheetDelegate * string * string * string[] -&gt; UIKit.UIActionSheet" Usage="new UIKit.UIActionSheet (title, del, cancelTitle, destroy, other)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("Use overload with a IUIActionSheetDelegate parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="del" Type="UIKit.UIActionSheetDelegate" />
        <Parameter Name="cancelTitle" Type="System.String" />
        <Parameter Name="destroy" Type="System.String" />
        <Parameter Name="other" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="title">A title to be displayed in the title area of the action sheet.</param>
        <param name="del">A delegate that will respond to taps in the action sheet.</param>
        <param name="cancelTitle">The title of the Cancel button. This will be displayed in a black button.</param>
        <param name="destroy">The title of the destructive button. This will be displayed in a red button.</param>
        <param name="other">An array of <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=System%20String&amp;scope=Xamarin" title="T:System.String">T:System.String</a></format> to use for other buttons in the <see cref="T:UIKit.UIActionSheet" />.</param>
        <summary>Initializes a <see cref="T:UIKit.UIActionSheet" /> instance.</summary>
        <remarks>
          <para>Pass <see langword="null" /> to <paramref name="title" /> if there is no text to display in the title area.</para>
          <para>If the action sheet is being presented on an iPad, then the <paramref name="cancelTitle" /> should be set to <see langword="null" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public void Add (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Add(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.Add(System.String)" />
      <MemberSignature Language="F#" Value="override this.Add : string -&gt; unit" Usage="uIActionSheet.Add name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Text for the button.</param>
        <summary>Adds a button with the specified text.</summary>
        <remarks>This method exists to allow the class to be initialized with C# 3.0 object initializers.   This is equivalent to calling AddButton (name).</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddButton">
      <MemberSignature Language="C#" Value="public virtual nint AddButton (string title);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint AddButton(string title) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.AddButton(System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddButton : string -&gt; nint&#xA;override this.AddButton : string -&gt; nint" Usage="uIActionSheet.AddButton title" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addButtonWithTitle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="title">The title of a button to add to an action sheet.</param>
        <summary>This method will add a custom button to an action sheet.</summary>
        <returns>The index of the button that was added.</returns>
        <remarks>Button indices on an action sheet are zero-based; they will start at zero and increment for each button added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIActionSheet.UIActionSheetAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIActionSheet/UIActionSheetAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : UIKit.UIActionSheet.UIActionSheetAppearance" Usage="UIKit.UIActionSheet.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIActionSheet+UIActionSheetAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UIActionSheet.</para>
          <para>If developers want to control the appearance of subclasses of UIActionSheet, they should use the <see cref="M:UIKit.UIActionSheet.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static UIKit.UIActionSheet.UIActionSheetAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIActionSheet/UIActionSheetAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; UIKit.UIActionSheet.UIActionSheetAppearance" Usage="UIKit.UIActionSheet.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIActionSheet+UIActionSheetAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIActionSheet when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of UIActionSheet, they should use the <see cref="M:UIKit.UIActionSheet.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ButtonCount">
      <MemberSignature Language="C#" Value="public virtual nint ButtonCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint ButtonCount" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.ButtonCount" />
      <MemberSignature Language="F#" Value="member this.ButtonCount : nint" Usage="UIKit.UIActionSheet.ButtonCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("numberOfButtons")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of buttons on an action sheet. (read only)</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ButtonTitle">
      <MemberSignature Language="C#" Value="public virtual string ButtonTitle (nint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ButtonTitle(valuetype System.nint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.ButtonTitle(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member ButtonTitle : nint -&gt; string&#xA;override this.ButtonTitle : nint -&gt; string" Usage="uIActionSheet.ButtonTitle index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("buttonTitleAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="index">The index of a button to retrieve the title of.</param>
        <summary>Retrieves the title of a button at a specified index.</summary>
        <returns>The title of a button at a given index.</returns>
        <remarks>Button indices are zero based. They start at zero and increment by one for each button that is added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelButtonIndex">
      <MemberSignature Language="C#" Value="public virtual nint CancelButtonIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint CancelButtonIndex" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.CancelButtonIndex" />
      <MemberSignature Language="F#" Value="member this.CancelButtonIndex : nint with get, set" Usage="UIKit.UIActionSheet.CancelButtonIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("cancelButtonIndex")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setCancelButtonIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the index of the cancel button.</summary>
        <value>The index of the cancel button.</value>
        <remarks>
          <para>Will return -1 if no cancel button has been set.</para>
          <para>Button indices are zero based. They start at zero and increment by one for each button that is added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Canceled">
      <MemberSignature Language="C#" Value="public event EventHandler Canceled;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Canceled" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIActionSheet.Canceled" />
      <MemberSignature Language="F#" Value="member this.Canceled : EventHandler " Usage="member this.Canceled : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIActionSheet.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clicked">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;UIKit.UIButtonEventArgs&gt; Clicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class UIKit.UIButtonEventArgs&gt; Clicked" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIActionSheet.Clicked" />
      <MemberSignature Language="F#" Value="member this.Clicked : EventHandler&lt;UIKit.UIButtonEventArgs&gt; " Usage="member this.Clicked : System.EventHandler&lt;UIKit.UIButtonEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;UIKit.UIButtonEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public UIKit.IUIActionSheetDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUIActionSheetDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UIKit.IUIActionSheetDelegate with get, set" Usage="UIKit.UIActionSheet.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIActionSheetDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UIKit.IUIActionSheetDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UIKit.IUIActionSheetDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DestructiveButtonIndex">
      <MemberSignature Language="C#" Value="public virtual nint DestructiveButtonIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint DestructiveButtonIndex" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.DestructiveButtonIndex" />
      <MemberSignature Language="F#" Value="member this.DestructiveButtonIndex : nint with get, set" Usage="UIKit.UIActionSheet.DestructiveButtonIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("destructiveButtonIndex")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDestructiveButtonIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the index of the destructive button.</summary>
        <value>The index of the destructive button.</value>
        <remarks>
          <para>Will return -1 if no cancel button has been set.</para>
          <para>Button indices are zero based. They start at zero and increment by one for each button that is added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dismissed">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;UIKit.UIButtonEventArgs&gt; Dismissed;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class UIKit.UIButtonEventArgs&gt; Dismissed" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIActionSheet.Dismissed" />
      <MemberSignature Language="F#" Value="member this.Dismissed : EventHandler&lt;UIKit.UIButtonEventArgs&gt; " Usage="member this.Dismissed : System.EventHandler&lt;UIKit.UIButtonEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;UIKit.UIButtonEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DismissWithClickedButtonIndex">
      <MemberSignature Language="C#" Value="public virtual void DismissWithClickedButtonIndex (nint buttonIndex, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DismissWithClickedButtonIndex(valuetype System.nint buttonIndex, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.DismissWithClickedButtonIndex(System.nint,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DismissWithClickedButtonIndex : nint * bool -&gt; unit&#xA;override this.DismissWithClickedButtonIndex : nint * bool -&gt; unit" Usage="uIActionSheet.DismissWithClickedButtonIndex (buttonIndex, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dismissWithClickedButtonIndex:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buttonIndex" Type="System.nint" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="buttonIndex">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="uIActionSheet.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIActionSheet object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIActionSheet class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UIActionSheet ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstOtherButtonIndex">
      <MemberSignature Language="C#" Value="public virtual nint FirstOtherButtonIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint FirstOtherButtonIndex" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.FirstOtherButtonIndex" />
      <MemberSignature Language="F#" Value="member this.FirstOtherButtonIndex : nint" Usage="UIKit.UIActionSheet.FirstOtherButtonIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("firstOtherButtonIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The index of the first custom button. Read-only.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Will return -1 if no custom buttons have been set.</para>
          <para>Button indices are zero based. They start at zero and increment by one for each button that is added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIActionSheet.UIActionSheetAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIActionSheet/UIActionSheetAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UIActionSheet.UIActionSheetAppearance" Usage="UIKit.UIActionSheet.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIActionSheet+UIActionSheetAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIActionSheet.UIActionSheetAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIActionSheet/UIActionSheetAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UIActionSheet.UIActionSheetAppearance" Usage="UIKit.UIActionSheet.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIActionSheet+UIActionSheetAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" /> when found in the <paramref name="containers" /> containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIActionSheet.UIActionSheetAppearance GetAppearance&lt;T&gt; () where T : UIKit.UIActionSheet;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIActionSheet/UIActionSheetAppearance GetAppearance&lt;(class UIKit.UIActionSheet) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; UIKit.UIActionSheet.UIActionSheetAppearance (requires 'T :&gt; UIKit.UIActionSheet)" Usage="UIKit.UIActionSheet.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIActionSheet+UIActionSheetAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIActionSheet.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIActionSheet.UIActionSheetAppearance" /> for the subclass of UIActionSheet.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UIActionSheet.Appearance" /> property, or the <see cref="M:UIKit.UIActionSheet.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIActionSheet.GetAppearance<MyUIActionSheetSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIActionSheet.UIActionSheetAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : UIKit.UIActionSheet;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIActionSheet/UIActionSheetAppearance GetAppearance&lt;(class UIKit.UIActionSheet) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UIActionSheet.UIActionSheetAppearance (requires 'T :&gt; UIKit.UIActionSheet)" Usage="UIKit.UIActionSheet.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIActionSheet+UIActionSheetAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UIActionSheet</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIActionSheet.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIActionSheet.UIActionSheetAppearance" /> for the subclass of UIActionSheet.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIActionSheet.</para>
          <para>Unlike the <see cref="P:UIKit.UIActionSheet.Appearance" /> property, or the <see cref="M:UIKit.UIActionSheet.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIActionSheet.GetAppearance<MyUIActionSheetSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIActionSheet.UIActionSheetAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : UIKit.UIActionSheet;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIActionSheet/UIActionSheetAppearance GetAppearance&lt;(class UIKit.UIActionSheet) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UIActionSheet.UIActionSheetAppearance (requires 'T :&gt; UIKit.UIActionSheet)" Usage="UIKit.UIActionSheet.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIActionSheet+UIActionSheetAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UIActionSheet</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIActionSheet.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIActionSheet.UIActionSheetAppearance" /> for the subclass of UIActionSheet that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIActionSheet that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UIActionSheet.Appearance" /> property, or the <see cref="M:UIKit.UIActionSheet.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIActionSheet.GetAppearance<MyUIActionSheetSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.GetEnumerator" />
      <MemberSignature Language="F#" Value="override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="uIActionSheet.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Runtime.CompilerServices.IteratorStateMachine(typeof(UIKit.UIActionSheet/&lt;GetEnumerator&gt;d__6))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Obtains an enumerator that returns the button titles.</summary>
        <returns>An IEnumerator.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Presented">
      <MemberSignature Language="C#" Value="public event EventHandler Presented;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Presented" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIActionSheet.Presented" />
      <MemberSignature Language="F#" Value="member this.Presented : EventHandler " Usage="member this.Presented : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowFrom">
      <MemberSignature Language="C#" Value="public virtual void ShowFrom (UIKit.UIBarButtonItem item, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowFrom(class UIKit.UIBarButtonItem item, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.ShowFrom(UIKit.UIBarButtonItem,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ShowFrom : UIKit.UIBarButtonItem * bool -&gt; unit&#xA;override this.ShowFrom : UIKit.UIBarButtonItem * bool -&gt; unit" Usage="uIActionSheet.ShowFrom (item, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("showFromBarButtonItem:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="UIKit.UIBarButtonItem" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="item">The <see cref="T:UIKit.UIBarButtonItem" /> that the action sheet originated from.</param>
        <param name="animated">If <see langword="true" />, then the display of the action sheet will be animated.</param>
        <summary>Displays an action sheet from a bar button.</summary>
        <remarks>This will display an action sheet from a button bar.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowFrom">
      <MemberSignature Language="C#" Value="public virtual void ShowFrom (CoreGraphics.CGRect rect, UIKit.UIView inView, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowFrom(valuetype CoreGraphics.CGRect rect, class UIKit.UIView inView, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.ShowFrom(CoreGraphics.CGRect,UIKit.UIView,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ShowFrom : CoreGraphics.CGRect * UIKit.UIView * bool -&gt; unit&#xA;override this.ShowFrom : CoreGraphics.CGRect * UIKit.UIView * bool -&gt; unit" Usage="uIActionSheet.ShowFrom (rect, inView, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("showFromRect:inView:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="inView" Type="UIKit.UIView" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="inView">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowFromTabBar">
      <MemberSignature Language="C#" Value="public virtual void ShowFromTabBar (UIKit.UITabBar view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowFromTabBar(class UIKit.UITabBar view) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.ShowFromTabBar(UIKit.UITabBar)" />
      <MemberSignature Language="F#" Value="abstract member ShowFromTabBar : UIKit.UITabBar -&gt; unit&#xA;override this.ShowFromTabBar : UIKit.UITabBar -&gt; unit" Usage="uIActionSheet.ShowFromTabBar view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("showFromTabBar:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="UIKit.UITabBar" />
      </Parameters>
      <Docs>
        <param name="view">To be added.</param>
        <summary>Shows the UIActionSheet from the specified UITabBar.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowFromToolbar">
      <MemberSignature Language="C#" Value="public virtual void ShowFromToolbar (UIKit.UIToolbar view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowFromToolbar(class UIKit.UIToolbar view) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.ShowFromToolbar(UIKit.UIToolbar)" />
      <MemberSignature Language="F#" Value="abstract member ShowFromToolbar : UIKit.UIToolbar -&gt; unit&#xA;override this.ShowFromToolbar : UIKit.UIToolbar -&gt; unit" Usage="uIActionSheet.ShowFromToolbar view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("showFromToolbar:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="UIKit.UIToolbar" />
      </Parameters>
      <Docs>
        <param name="view">This is the tab bar from which the action sheet will originate.</param>
        <summary>This will display an action sheet, originate from the specified tab bar.</summary>
        <remarks>The appearance of the action sheet will be animated. When used on an iPad, the action sheet will appear in the middle of the screen.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowInView">
      <MemberSignature Language="C#" Value="public virtual void ShowInView (UIKit.UIView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ShowInView(class UIKit.UIView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActionSheet.ShowInView(UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member ShowInView : UIKit.UIView -&gt; unit&#xA;override this.ShowInView : UIKit.UIView -&gt; unit" Usage="uIActionSheet.ShowInView view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("showInView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="view">The view to originate the action sheet in.</param>
        <summary>Displays an action sheet in a specified view.</summary>
        <remarks>The appearance of the action sheet will be animated. When used on an iPad, the action sheet will appear in the middle of the screen.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIActionSheetStyle Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIActionSheetStyle Style" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.Style" />
      <MemberSignature Language="F#" Value="member this.Style : UIKit.UIActionSheetStyle with get, set" Usage="UIKit.UIActionSheet.Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("actionSheetStyle")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setActionSheetStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIActionSheetStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The presentation style of this UIActionSheet.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public virtual string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.Title" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="UIKit.UIActionSheet.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("title")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setTitle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("title", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setTitle:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The title that will be displayed in the action sheet.</summary>
        <value>
          <para>The title that will be displayed in the action sheet.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>The title that will be displayed in the action sheet.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public virtual bool Visible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.Visible" />
      <MemberSignature Language="F#" Value="member this.Visible : bool" Usage="UIKit.UIActionSheet.Visible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isVisible")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A property indicating if the action sheet is displayed.</summary>
        <value>If <see langword="true" /> then the action sheet is displayed. Read-only.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActionSheet.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="UIKit.UIActionSheet.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDismiss">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;UIKit.UIButtonEventArgs&gt; WillDismiss;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class UIKit.UIButtonEventArgs&gt; WillDismiss" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIActionSheet.WillDismiss" />
      <MemberSignature Language="F#" Value="member this.WillDismiss : EventHandler&lt;UIKit.UIButtonEventArgs&gt; " Usage="member this.WillDismiss : System.EventHandler&lt;UIKit.UIButtonEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;UIKit.UIButtonEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPresent">
      <MemberSignature Language="C#" Value="public event EventHandler WillPresent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler WillPresent" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIActionSheet.WillPresent" />
      <MemberSignature Language="F#" Value="member this.WillPresent : EventHandler " Usage="member this.WillPresent : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
