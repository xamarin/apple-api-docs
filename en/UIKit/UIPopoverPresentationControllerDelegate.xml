<Type Name="UIPopoverPresentationControllerDelegate" FullName="UIKit.UIPopoverPresentationControllerDelegate">
  <TypeSignature Language="C#" Value="public class UIPopoverPresentationControllerDelegate : UIKit.UIAdaptivePresentationControllerDelegate, IDisposable, UIKit.IUIPopoverPresentationControllerDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIPopoverPresentationControllerDelegate extends UIKit.UIAdaptivePresentationControllerDelegate implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIAdaptivePresentationControllerDelegate, class UIKit.IUIPopoverPresentationControllerDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIPopoverPresentationControllerDelegate" />
  <TypeSignature Language="F#" Value="type UIPopoverPresentationControllerDelegate = class&#xA;    inherit UIAdaptivePresentationControllerDelegate&#xA;    interface IUIPopoverPresentationControllerDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUIAdaptivePresentationControllerDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIAdaptivePresentationControllerDelegate</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIAdaptivePresentationControllerDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIPopoverPresentationControllerDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("UIPopoverPresentationControllerDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate object for <see cref="T:UIKit.UIPopoverPresentationController" /> objects. Provides methods relating to presentation and dismissal events and allows fine-grained control for adaptive presentations.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPopoverPresentationControllerDelegate_protocol/index.html">Apple documentation for <c>UIPopoverPresentationControllerDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPopoverPresentationControllerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverPresentationControllerDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIPopoverPresentationControllerDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverPresentationControllerDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPopoverPresentationControllerDelegate : Foundation.NSObjectFlag -&gt; UIKit.UIPopoverPresentationControllerDelegate" Usage="new UIKit.UIPopoverPresentationControllerDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIPopoverPresentationControllerDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverPresentationControllerDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPopoverPresentationControllerDelegate : nativeint -&gt; UIKit.UIPopoverPresentationControllerDelegate" Usage="new UIKit.UIPopoverPresentationControllerDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDismissPopover">
      <MemberSignature Language="C#" Value="public virtual void DidDismissPopover (UIKit.UIPopoverPresentationController popoverPresentationController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidDismissPopover(class UIKit.UIPopoverPresentationController popoverPresentationController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverPresentationControllerDelegate.DidDismissPopover(UIKit.UIPopoverPresentationController)" />
      <MemberSignature Language="F#" Value="abstract member DidDismissPopover : UIKit.UIPopoverPresentationController -&gt; unit&#xA;override this.DidDismissPopover : UIKit.UIPopoverPresentationController -&gt; unit" Usage="uIPopoverPresentationControllerDelegate.DidDismissPopover popoverPresentationController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("popoverPresentationControllerDidDismissPopover:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="popoverPresentationController" Type="UIKit.UIPopoverPresentationController" />
      </Parameters>
      <Docs>
        <param name="popoverPresentationController">To be added.</param>
        <summary>Informs <c>this</c> <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:UIPopoverPresentationControllerDelegate&amp;scope=Xamarin" title="T:UIPopoverPresentationControllerDelegate">T:UIPopoverPresentationControllerDelegate</a></format> object that the user has dismissed the popover.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrepareForPopoverPresentation">
      <MemberSignature Language="C#" Value="public virtual void PrepareForPopoverPresentation (UIKit.UIPopoverPresentationController popoverPresentationController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareForPopoverPresentation(class UIKit.UIPopoverPresentationController popoverPresentationController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverPresentationControllerDelegate.PrepareForPopoverPresentation(UIKit.UIPopoverPresentationController)" />
      <MemberSignature Language="F#" Value="abstract member PrepareForPopoverPresentation : UIKit.UIPopoverPresentationController -&gt; unit&#xA;override this.PrepareForPopoverPresentation : UIKit.UIPopoverPresentationController -&gt; unit" Usage="uIPopoverPresentationControllerDelegate.PrepareForPopoverPresentation popoverPresentationController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("prepareForPopoverPresentation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="popoverPresentationController" Type="UIKit.UIPopoverPresentationController" />
      </Parameters>
      <Docs>
        <param name="popoverPresentationController">To be added.</param>
        <summary>Informs <c>this</c> <see cref="T:UIKit.UIPopoverPresentationControllerDelegate" /> object that the app is about to display the popover.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldDismissPopover">
      <MemberSignature Language="C#" Value="public virtual bool ShouldDismissPopover (UIKit.UIPopoverPresentationController popoverPresentationController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldDismissPopover(class UIKit.UIPopoverPresentationController popoverPresentationController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverPresentationControllerDelegate.ShouldDismissPopover(UIKit.UIPopoverPresentationController)" />
      <MemberSignature Language="F#" Value="abstract member ShouldDismissPopover : UIKit.UIPopoverPresentationController -&gt; bool&#xA;override this.ShouldDismissPopover : UIKit.UIPopoverPresentationController -&gt; bool" Usage="uIPopoverPresentationControllerDelegate.ShouldDismissPopover popoverPresentationController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("popoverPresentationControllerShouldDismissPopover:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="popoverPresentationController" Type="UIKit.UIPopoverPresentationController" />
      </Parameters>
      <Docs>
        <param name="popoverPresentationController">To be added.</param>
        <summary>Requests whether the <paramref name="popoverPresentationController" /> controller should dismissed the popover based on user actions.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillRepositionPopover">
      <MemberSignature Language="C#" Value="public virtual void WillRepositionPopover (UIKit.UIPopoverPresentationController popoverPresentationController, CoreGraphics.CGRect targetRect, UIKit.UIView inView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillRepositionPopover(class UIKit.UIPopoverPresentationController popoverPresentationController, valuetype CoreGraphics.CGRect targetRect, class UIKit.UIView inView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverPresentationControllerDelegate.WillRepositionPopover(UIKit.UIPopoverPresentationController,CoreGraphics.CGRect,UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member WillRepositionPopover : UIKit.UIPopoverPresentationController * CoreGraphics.CGRect * UIKit.UIView -&gt; unit&#xA;override this.WillRepositionPopover : UIKit.UIPopoverPresentationController * CoreGraphics.CGRect * UIKit.UIView -&gt; unit" Usage="uIPopoverPresentationControllerDelegate.WillRepositionPopover (popoverPresentationController, targetRect, inView)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use the overload with 'ref' parameters for 'targetRect' and 'inView'.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="popoverPresentationController" Type="UIKit.UIPopoverPresentationController" />
        <Parameter Name="targetRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="inView" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="popoverPresentationController">To be added.</param>
        <param name="targetRect">To be added.</param>
        <param name="inView">To be added.</param>
        <summary>Developers should not use this deprecated method. Insteady, they should use <see cref="M:UIKit.UIPopoverPresentationControllerDelegate.WillRepositionPopover(UIKit.UIPopoverPresentationController,CoreGraphics.CGRect@,UIKit.UIView@)" /></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillRepositionPopover">
      <MemberSignature Language="C#" Value="public virtual void WillRepositionPopover (UIKit.UIPopoverPresentationController popoverPresentationController, ref CoreGraphics.CGRect targetRect, ref UIKit.UIView inView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillRepositionPopover(class UIKit.UIPopoverPresentationController popoverPresentationController, valuetype CoreGraphics.CGRect&amp; targetRect, class UIKit.UIView&amp; inView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverPresentationControllerDelegate.WillRepositionPopover(UIKit.UIPopoverPresentationController,CoreGraphics.CGRect@,UIKit.UIView@)" />
      <MemberSignature Language="F#" Value="abstract member WillRepositionPopover : UIKit.UIPopoverPresentationController *  *  -&gt; unit&#xA;override this.WillRepositionPopover : UIKit.UIPopoverPresentationController *  *  -&gt; unit" Usage="uIPopoverPresentationControllerDelegate.WillRepositionPopover (popoverPresentationController, targetRect, inView)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("popoverPresentationController:willRepositionPopoverToRect:inView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="popoverPresentationController" Type="UIKit.UIPopoverPresentationController" />
        <Parameter Name="targetRect" Type="CoreGraphics.CGRect" RefType="ref" />
        <Parameter Name="inView" Type="UIKit.UIView" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="popoverPresentationController">To be added.</param>
        <param name="targetRect">To be added.</param>
        <param name="inView">To be added.</param>
        <summary>The system calls this method shortly before repositioning the popover.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
