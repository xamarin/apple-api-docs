<Type Name="UIActivityItemProvider" FullName="UIKit.UIActivityItemProvider">
  <TypeSignature Language="C#" Value="public class UIActivityItemProvider : Foundation.NSOperation, IDisposable, UIKit.IUIActivityItemSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIActivityItemProvider extends Foundation.NSOperation implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIActivityItemSource" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIActivityItemProvider" />
  <TypeSignature Language="F#" Value="type UIActivityItemProvider = class&#xA;    inherit NSOperation&#xA;    interface IUIActivityItemSource&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSOperation</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIActivityItemSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIActivityItemProvider", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Abstract class that, when subtyped, can be a proxy for the data of a <see cref="T:UIKit.UIActivity" />.</summary>
    <remarks>
      <para>This class can be used to provide lightweight proxy data to a <see cref="T:UIKit.UIActivityViewController" />. Difference services represented by <see cref="T:UIKit.UIActivity" /> classes might require additional processing of the data being sent (for example, one service might take text wrapped in HTML tags while another might require straight text, a service might require images to be converted to a certain format or size, etc.). Rather than perform all that potentially expensive processing for every possible service, a <see cref="T:UIKit.UIActivityItemProvider" /> can be used. Once a the particular service is chosen, the <see cref="P:UIKit.UIActivityItemProvider.Item" /> property is accessed and the needed processing can be performed by the application.</para>
      <para>If processing is minimal, application developers may choose to implement <see cref="T:UIKit.UIActivityItemSource" /> rather than subclass <see cref="T:UIKit.UIActivityItemProvider" />.</para>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <!-- TODO: Hmm.... Typically, "expensive processing" and property don't go together -->
    <altmember cref="T:UIKit.UIActivity" />
    <altmember cref="T:UIKit.UIActivityViewController" />
    <altmember cref="T:UIKit.UIActivityItemSource" />
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActivityItemProvider_Class/index.html">Apple documentation for <c>UIActivityItemProvider</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActivityItemProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemProvider.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("iOS9 does not allow creating an empty instance")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIActivityItemProvider (Foundation.NSObject placeholderItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObject placeholderItem) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemProvider.#ctor(Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActivityItemProvider : Foundation.NSObject -&gt; UIKit.UIActivityItemProvider" Usage="new UIKit.UIActivityItemProvider placeholderItem" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithPlaceholderItem:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="placeholderItem" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="placeholderItem">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIActivityItemProvider (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemProvider.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActivityItemProvider : Foundation.NSObjectFlag -&gt; UIKit.UIActivityItemProvider" Usage="new UIKit.UIActivityItemProvider t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIActivityItemProvider (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemProvider.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActivityItemProvider : nativeint -&gt; UIKit.UIActivityItemProvider" Usage="new UIKit.UIActivityItemProvider handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivityType">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSString ActivityType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSString ActivityType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActivityItemProvider.ActivityType" />
      <MemberSignature Language="F#" Value="member this.ActivityType : Foundation.NSString" Usage="UIKit.UIActivityItemProvider.ActivityType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("activityType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A string identifying the type of activity.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActivityItemProvider.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIActivityItemProvider.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataTypeIdentifierForActivity">
      <MemberSignature Language="C#" Value="public virtual string GetDataTypeIdentifierForActivity (UIKit.UIActivityViewController activityViewController, Foundation.NSString activityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetDataTypeIdentifierForActivity(class UIKit.UIActivityViewController activityViewController, class Foundation.NSString activityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemProvider.GetDataTypeIdentifierForActivity(UIKit.UIActivityViewController,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetDataTypeIdentifierForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; string&#xA;override this.GetDataTypeIdentifierForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; string" Usage="uIActivityItemProvider.GetDataTypeIdentifierForActivity (activityViewController, activityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("activityViewController:dataTypeIdentifierForActivityType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
        <Parameter Name="activityType" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="activityViewController">To be added.</param>
        <param name="activityType">To be added.</param>
        <summary>If the specified  provides NSData, this method returns the Uniform Type Identifier (UTI) of the item.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemForActivity">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject GetItemForActivity (UIKit.UIActivityViewController activityViewController, Foundation.NSString activityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject GetItemForActivity(class UIKit.UIActivityViewController activityViewController, class Foundation.NSString activityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemProvider.GetItemForActivity(UIKit.UIActivityViewController,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetItemForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; Foundation.NSObject&#xA;override this.GetItemForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; Foundation.NSObject" Usage="uIActivityItemProvider.GetItemForActivity (activityViewController, activityType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIActivityItemSource.GetItemForActivity(UIKit.UIActivityViewController,Foundation.NSString)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("activityViewController:itemForActivityType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
        <Parameter Name="activityType" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="activityViewController">To be added.</param>
        <param name="activityType">To be added.</param>
        <summary>Retrieves the data object on which to act.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlaceholderData">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject GetPlaceholderData (UIKit.UIActivityViewController activityViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject GetPlaceholderData(class UIKit.UIActivityViewController activityViewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemProvider.GetPlaceholderData(UIKit.UIActivityViewController)" />
      <MemberSignature Language="F#" Value="abstract member GetPlaceholderData : UIKit.UIActivityViewController -&gt; Foundation.NSObject&#xA;override this.GetPlaceholderData : UIKit.UIActivityViewController -&gt; Foundation.NSObject" Usage="uIActivityItemProvider.GetPlaceholderData activityViewController" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIActivityItemSource.GetPlaceholderData(UIKit.UIActivityViewController)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("activityViewControllerPlaceholderItem:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
      </Parameters>
      <Docs>
        <param name="activityViewController">To be added.</param>
        <summary>Retrieves the placeholder data.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubjectForActivity">
      <MemberSignature Language="C#" Value="public virtual string GetSubjectForActivity (UIKit.UIActivityViewController activityViewController, Foundation.NSString activityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetSubjectForActivity(class UIKit.UIActivityViewController activityViewController, class Foundation.NSString activityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemProvider.GetSubjectForActivity(UIKit.UIActivityViewController,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetSubjectForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; string&#xA;override this.GetSubjectForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; string" Usage="uIActivityItemProvider.GetSubjectForActivity (activityViewController, activityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("activityViewController:subjectForActivityType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
        <Parameter Name="activityType" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="activityViewController">To be added.</param>
        <param name="activityType">To be added.</param>
        <summary>Returns the subject field for activities that have a subject.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetThumbnailImageForActivity">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage GetThumbnailImageForActivity (UIKit.UIActivityViewController activityViewController, Foundation.NSString activityType, CoreGraphics.CGSize suggestedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage GetThumbnailImageForActivity(class UIKit.UIActivityViewController activityViewController, class Foundation.NSString activityType, valuetype CoreGraphics.CGSize suggestedSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemProvider.GetThumbnailImageForActivity(UIKit.UIActivityViewController,Foundation.NSString,CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="abstract member GetThumbnailImageForActivity : UIKit.UIActivityViewController * Foundation.NSString * CoreGraphics.CGSize -&gt; UIKit.UIImage&#xA;override this.GetThumbnailImageForActivity : UIKit.UIActivityViewController * Foundation.NSString * CoreGraphics.CGSize -&gt; UIKit.UIImage" Usage="uIActivityItemProvider.GetThumbnailImageForActivity (activityViewController, activityType, suggestedSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("activityViewController:thumbnailImageForActivityType:suggestedSize:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
        <Parameter Name="activityType" Type="Foundation.NSString" />
        <Parameter Name="suggestedSize" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="activityViewController">To be added.</param>
        <param name="activityType">To be added.</param>
        <param name="suggestedSize">To be added.</param>
        <summary>Returns a thumbnail for activities that support preview images.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject Item" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActivityItemProvider.Item" />
      <MemberSignature Language="F#" Value="member this.Item : Foundation.NSObject" Usage="UIKit.UIActivityItemProvider.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("item")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>App devs must override this method, which is called on a background thread, as a factory method for the data-bearing object.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PlaceholderItem">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject PlaceholderItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject PlaceholderItem" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIActivityItemProvider.PlaceholderItem" />
      <MemberSignature Language="F#" Value="member this.PlaceholderItem : Foundation.NSObject" Usage="UIKit.UIActivityItemProvider.PlaceholderItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("placeholderItem")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("placeholderItem", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A placeholder item specified at initialization.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
