<Type Name="IUIViewControllerTransitionCoordinatorContext" FullName="UIKit.IUIViewControllerTransitionCoordinatorContext">
  <TypeSignature Language="C#" Value="public interface IUIViewControllerTransitionCoordinatorContext : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUIViewControllerTransitionCoordinatorContext implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:UIKit.IUIViewControllerTransitionCoordinatorContext" />
  <TypeSignature Language="F#" Value="type IUIViewControllerTransitionCoordinatorContext = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol(Name="UIViewControllerTransitionCoordinatorContext", WrapperType=typeof(UIKit.UIViewControllerTransitionCoordinatorContextWrapper))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetViewControllerForKey", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UIViewController), Selector="viewControllerForKey:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="TargetTransform", ReturnType=typeof(CoreGraphics.CGAffineTransform), Selector="targetTransform")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetTransitionViewControllerForKey", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UIView), Selector="viewForKey:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isAnimated", IsProperty=true, IsRequired=true, IsStatic=false, Name="IsAnimated", PropertyType=typeof(System.Boolean), Selector="isAnimated")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="presentationStyle", IsProperty=true, IsRequired=true, IsStatic=false, Name="PresentationStyle", PropertyType=typeof(UIKit.UIModalPresentationStyle), Selector="presentationStyle")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="initiallyInteractive", IsProperty=true, IsRequired=true, IsStatic=false, Name="InitiallyInteractive", PropertyType=typeof(System.Boolean), Selector="initiallyInteractive")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isInteractive", IsProperty=true, IsRequired=true, IsStatic=false, Name="IsInteractive", PropertyType=typeof(System.Boolean), Selector="isInteractive")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isCancelled", IsProperty=true, IsRequired=true, IsStatic=false, Name="IsCancelled", PropertyType=typeof(System.Boolean), Selector="isCancelled")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="transitionDuration", IsProperty=true, IsRequired=true, IsStatic=false, Name="TransitionDuration", PropertyType=typeof(System.Double), Selector="transitionDuration")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="percentComplete", IsProperty=true, IsRequired=true, IsStatic=false, Name="PercentComplete", PropertyType=typeof(System.nfloat), Selector="percentComplete")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="completionVelocity", IsProperty=true, IsRequired=true, IsStatic=false, Name="CompletionVelocity", PropertyType=typeof(System.nfloat), Selector="completionVelocity")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="completionCurve", IsProperty=true, IsRequired=true, IsStatic=false, Name="CompletionCurve", PropertyType=typeof(UIKit.UIViewAnimationCurve), Selector="completionCurve")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="containerView", IsProperty=true, IsRequired=true, IsStatic=false, Name="ContainerView", PropertyType=typeof(UIKit.UIView), Selector="containerView")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isInterruptible", IsProperty=true, IsRequired=false, IsStatic=false, Name="IsInterruptible", PropertyType=typeof(System.Boolean), Selector="isInterruptible")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetViewControllerForKey", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Foundation.NSString) }, ReturnType=typeof(UIKit.UIViewController), Selector="viewControllerForKey:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetTransitionViewControllerForKey", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Foundation.NSString) }, ReturnType=typeof(UIKit.UIView), Selector="viewForKey:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface that defines the context for coordination of a transition.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="CompletionCurve">
      <MemberSignature Language="C#" Value="public UIKit.UIViewAnimationCurve CompletionCurve { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIViewAnimationCurve CompletionCurve" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerTransitionCoordinatorContext.CompletionCurve" />
      <MemberSignature Language="F#" Value="member this.CompletionCurve : UIKit.UIViewAnimationCurve" Usage="UIKit.IUIViewControllerTransitionCoordinatorContext.CompletionCurve" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("completionCurve")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewAnimationCurve</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIViewAnimationCurve for the view controller transition.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompletionVelocity">
      <MemberSignature Language="C#" Value="public nfloat CompletionVelocity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat CompletionVelocity" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerTransitionCoordinatorContext.CompletionVelocity" />
      <MemberSignature Language="F#" Value="member this.CompletionVelocity : nfloat" Usage="UIKit.IUIViewControllerTransitionCoordinatorContext.CompletionVelocity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("completionVelocity")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The completion velocity for the view controller transition.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainerView">
      <MemberSignature Language="C#" Value="public UIKit.UIView ContainerView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView ContainerView" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerTransitionCoordinatorContext.ContainerView" />
      <MemberSignature Language="F#" Value="member this.ContainerView : UIKit.UIView" Usage="UIKit.IUIViewControllerTransitionCoordinatorContext.ContainerView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("containerView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The container UIView for the view controller transition animation.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransitionViewControllerForKey">
      <MemberSignature Language="C#" Value="public UIKit.UIView GetTransitionViewControllerForKey (Foundation.NSString key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIView GetTransitionViewControllerForKey(class Foundation.NSString key) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerTransitionCoordinatorContext.GetTransitionViewControllerForKey(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetTransitionViewControllerForKey : Foundation.NSString -&gt; UIKit.UIView" Usage="iUIViewControllerTransitionCoordinatorContext.GetTransitionViewControllerForKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("viewForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="key">To be added.</param>
        <summary>Gets the transition that is specified by <paramref name="key" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewControllerForKey">
      <MemberSignature Language="C#" Value="public UIKit.UIViewController GetViewControllerForKey (Foundation.NSString uiTransitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIViewController GetViewControllerForKey(class Foundation.NSString uiTransitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerTransitionCoordinatorContext.GetViewControllerForKey(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetViewControllerForKey : Foundation.NSString -&gt; UIKit.UIViewController" Usage="iUIViewControllerTransitionCoordinatorContext.GetViewControllerForKey uiTransitionKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("viewControllerForKey:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiTransitionKey" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="uiTransitionKey">To be added.</param>
        <summary>The UIViewController for the specified uiTransitionKey.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InitiallyInteractive">
      <MemberSignature Language="C#" Value="public bool InitiallyInteractive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InitiallyInteractive" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerTransitionCoordinatorContext.InitiallyInteractive" />
      <MemberSignature Language="F#" Value="member this.InitiallyInteractive : bool" Usage="UIKit.IUIViewControllerTransitionCoordinatorContext.InitiallyInteractive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("initiallyInteractive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> iff <see cref="P:UIKit.IUIViewControllerTransitionCoordinatorContext.IsAnimated" /> is <see langword="true" /> and the transition was initiated interactively.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnimated">
      <MemberSignature Language="C#" Value="public bool IsAnimated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnimated" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerTransitionCoordinatorContext.IsAnimated" />
      <MemberSignature Language="F#" Value="member this.IsAnimated : bool" Usage="UIKit.IUIViewControllerTransitionCoordinatorContext.IsAnimated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isAnimated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> if the transition is explicitly animated or uses <see cref="F:UIKit.UIModalPresentationStyle.Custom" /> presentation.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCancelled">
      <MemberSignature Language="C#" Value="public bool IsCancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCancelled" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerTransitionCoordinatorContext.IsCancelled" />
      <MemberSignature Language="F#" Value="member this.IsCancelled : bool" Usage="UIKit.IUIViewControllerTransitionCoordinatorContext.IsCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isCancelled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> if the interactive transition is ending and the user canceled the transition.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInteractive">
      <MemberSignature Language="C#" Value="public bool IsInteractive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInteractive" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerTransitionCoordinatorContext.IsInteractive" />
      <MemberSignature Language="F#" Value="member this.IsInteractive : bool" Usage="UIKit.IUIViewControllerTransitionCoordinatorContext.IsInteractive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isInteractive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="true" /> if the transition is currently interactive.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PercentComplete">
      <MemberSignature Language="C#" Value="public nfloat PercentComplete { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat PercentComplete" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerTransitionCoordinatorContext.PercentComplete" />
      <MemberSignature Language="F#" Value="member this.PercentComplete : nfloat" Usage="UIKit.IUIViewControllerTransitionCoordinatorContext.PercentComplete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("percentComplete")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The percent of completion of a transition when it moves to the noninteractive completion phase.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentationStyle">
      <MemberSignature Language="C#" Value="public UIKit.UIModalPresentationStyle PresentationStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIModalPresentationStyle PresentationStyle" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerTransitionCoordinatorContext.PresentationStyle" />
      <MemberSignature Language="F#" Value="member this.PresentationStyle : UIKit.UIModalPresentationStyle" Usage="UIKit.IUIViewControllerTransitionCoordinatorContext.PresentationStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("presentationStyle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIModalPresentationStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The presentation style whose transition is being modified.</summary>
        <value>Use <see cref="F:UIKit.UIModalPresentationStyle.None" /> if the transition is not a modal presentation or dismissal.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetTransform">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGAffineTransform TargetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGAffineTransform TargetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerTransitionCoordinatorContext.TargetTransform" />
      <MemberSignature Language="F#" Value="abstract member TargetTransform : unit -&gt; CoreGraphics.CGAffineTransform" Usage="iUIViewControllerTransitionCoordinatorContext.TargetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("targetTransform")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the transform that describes the rotation of the transition.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionDuration">
      <MemberSignature Language="C#" Value="public double TransitionDuration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 TransitionDuration" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerTransitionCoordinatorContext.TransitionDuration" />
      <MemberSignature Language="F#" Value="member this.TransitionDuration : double" Usage="UIKit.IUIViewControllerTransitionCoordinatorContext.TransitionDuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("transitionDuration")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The expected duration, in seconds, of the transition, if it is noninteractive.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
