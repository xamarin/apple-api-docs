<Type Name="UISplitViewControllerDelegate" FullName="UIKit.UISplitViewControllerDelegate">
  <TypeSignature Language="C#" Value="public class UISplitViewControllerDelegate : Foundation.NSObject, IDisposable, UIKit.IUISplitViewControllerDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UISplitViewControllerDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUISplitViewControllerDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUISplitViewControllerDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("UISplitViewControllerDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 3, 2, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The delegate associated with <see cref="T:UIKit.UISplitViewController" /> events.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=08f52114-da41-447b-92a4-b86981b03c21">Popovers</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISplitViewControllerDelegate_protocol/index.html">Apple documentation for <c>UISplitViewControllerDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISplitViewControllerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UISplitViewControllerDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UISplitViewControllerDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CollapseSecondViewController">
      <MemberSignature Language="C#" Value="public virtual bool CollapseSecondViewController (UIKit.UISplitViewController splitViewController, UIKit.UIViewController secondaryViewController, UIKit.UIViewController primaryViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CollapseSecondViewController(class UIKit.UISplitViewController splitViewController, class UIKit.UIViewController secondaryViewController, class UIKit.UIViewController primaryViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewController:collapseSecondaryViewController:ontoPrimaryViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="UIKit.UISplitViewController" />
        <Parameter Name="secondaryViewController" Type="UIKit.UIViewController" />
        <Parameter Name="primaryViewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">Designates the split view controller with the collapsing interface.</param>
        <param name="secondaryViewController">Designates the secondary view controller for the split view interface.</param>
        <param name="primaryViewController">Designates the primary view controller for the split view interface.</param>
        <summary>Requests that the delegate adjust their primary view controller and  incorporate their secondary view controller into the collapsed interface.</summary>
        <returns>Returns <see langword="true" /> if the developer does not want the split view controller to do anything with the secondary view controller, and <see langword="false" /> to enable the split view controller to attempt to incorporate the secondary view controller’s content into the collapsed interface.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventShowDetailViewController">
      <MemberSignature Language="C#" Value="public virtual bool EventShowDetailViewController (UIKit.UISplitViewController splitViewController, UIKit.UIViewController vc, Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EventShowDetailViewController(class UIKit.UISplitViewController splitViewController, class UIKit.UIViewController vc, class Foundation.NSObject sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewController:showDetailViewController:sender:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="UIKit.UISplitViewController" />
        <Parameter Name="vc" Type="UIKit.UIViewController" />
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="splitViewController">Designates the split view controller that has its secondary view being updated.</param>
        <param name="vc">The view controller that is being displayed in the secondary position.</param>
        <param name="sender">The action making the request.</param>
        <summary>Queries the delegate to see if it wants to do the work of displaying a view controller in the secondary position of the split view interface.</summary>
        <returns>Returns <see langword="true" /> if the developer handled the presentation of the specified view controller, and <see langword="false" /> if they wanted the split view controller to perform that action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EventShowViewController">
      <MemberSignature Language="C#" Value="public virtual bool EventShowViewController (UIKit.UISplitViewController splitViewController, UIKit.UIViewController vc, Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EventShowViewController(class UIKit.UISplitViewController splitViewController, class UIKit.UIViewController vc, class Foundation.NSObject sender) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewController:showViewController:sender:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="UIKit.UISplitViewController" />
        <Parameter Name="vc" Type="UIKit.UIViewController" />
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="splitViewController">Designates the split view controller that has its primary view being updated.</param>
        <param name="vc">The view controller that is being displayed in the primary position.</param>
        <param name="sender">The action making the request.</param>
        <summary>Queries the delegate to see if it wants to perform the work of displaying a view controller in the primary position of the split view interface.</summary>
        <returns>Returns <see langword="true" /> if the developer handled the presentation of the specified view controller, and <see langword="false" /> if they wanted the split view controller to perform that action.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredInterfaceOrientationForPresentation">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIInterfaceOrientation GetPreferredInterfaceOrientationForPresentation (UIKit.UISplitViewController splitViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UIInterfaceOrientation GetPreferredInterfaceOrientationForPresentation(class UIKit.UISplitViewController splitViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewControllerPreferredInterfaceOrientationForPresentation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIInterfaceOrientation</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="UIKit.UISplitViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">Designates the split view controller that will be presented onscreen.</param>
        <summary>Requests the delegate for an orientation to use when presenting the split view controller.</summary>
        <returns>Returns the orientation that will be be used  when the split view controller will first be displayed..</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrimaryViewControllerForCollapsingSplitViewController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController GetPrimaryViewControllerForCollapsingSplitViewController (UIKit.UISplitViewController splitViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIViewController GetPrimaryViewControllerForCollapsingSplitViewController(class UIKit.UISplitViewController splitViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("primaryViewControllerForCollapsingSplitViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="UIKit.UISplitViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">Designates the split view controller whose interface is collapsing.</param>
        <summary>Requests that the delegate provide the single view controller to display after the split view interface collapses.</summary>
        <returns>New primary controller that will be displayed onscreen.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPrimaryViewControllerForExpandingSplitViewController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController GetPrimaryViewControllerForExpandingSplitViewController (UIKit.UISplitViewController splitViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIViewController GetPrimaryViewControllerForExpandingSplitViewController(class UIKit.UISplitViewController splitViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("primaryViewControllerForExpandingSplitViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="UIKit.UISplitViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">To be added.</param>
        <summary>Requests that the delegate provide the single view controller to display after the split view interface expands.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetDisplayModeForAction">
      <MemberSignature Language="C#" Value="public virtual UIKit.UISplitViewControllerDisplayMode GetTargetDisplayModeForAction (UIKit.UISplitViewController svc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UISplitViewControllerDisplayMode GetTargetDisplayModeForAction(class UIKit.UISplitViewController svc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("targetDisplayModeForActionInSplitViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UISplitViewControllerDisplayMode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="UIKit.UISplitViewController" />
      </Parameters>
      <Docs>
        <param name="svc">Split view controller whose action might be triggered.</param>
        <summary>Requests that the delegate  provide the display mode to apply when a split view controller action occurs.</summary>
        <returns>Returns the  display mode to be applied to the split view controller when the user performs specific actions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeparateSecondaryViewController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController SeparateSecondaryViewController (UIKit.UISplitViewController splitViewController, UIKit.UIViewController primaryViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIViewController SeparateSecondaryViewController(class UIKit.UISplitViewController splitViewController, class UIKit.UIViewController primaryViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewController:separateSecondaryViewControllerFromPrimaryViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="UIKit.UISplitViewController" />
        <Parameter Name="primaryViewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">The split view controller with the expanding interface.</param>
        <param name="primaryViewController">Primary view controller specified for the expanded split view interface.</param>
        <summary>Requests that the delegate provide a new secondary view controller for the split view interface.</summary>
        <returns>Returns view controller to be used as the secondary view controller in the expanded split view interface or <see langword="null" /> to enable the split view controller to choose an appropriate secondary view controller.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldHideViewController">
      <MemberSignature Language="C#" Value="public virtual bool ShouldHideViewController (UIKit.UISplitViewController svc, UIKit.UIViewController viewController, UIKit.UIInterfaceOrientation inOrientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldHideViewController(class UIKit.UISplitViewController svc, class UIKit.UIViewController viewController, valuetype UIKit.UIInterfaceOrientation inOrientation) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewController:shouldHideViewController:inOrientation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'UISearchController' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="UIKit.UISplitViewController" />
        <Parameter Name="viewController" Type="UIKit.UIViewController" />
        <Parameter Name="inOrientation" Type="UIKit.UIInterfaceOrientation" />
      </Parameters>
      <Docs>
        <param name="svc">The designated split view controller whose action might be triggered.</param>
        <param name="viewController">The specified view controller.</param>
        <param name="inOrientation">The specified orientation.</param>
        <summary>Whether the specified viewController should be hidden in the specified orientation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportedInterfaceOrientations">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIInterfaceOrientationMask SupportedInterfaceOrientations (UIKit.UISplitViewController splitViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UIInterfaceOrientationMask SupportedInterfaceOrientations(class UIKit.UISplitViewController splitViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewControllerSupportedInterfaceOrientations:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIInterfaceOrientationMask</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="splitViewController" Type="UIKit.UISplitViewController" />
      </Parameters>
      <Docs>
        <param name="splitViewController">The split view controller.</param>
        <summary>Queries the delegate for specification of the interface orientations that the split view controller supports.</summary>
        <returns>Returns the orientations requested for the specified split view controller to support.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillChangeDisplayMode">
      <MemberSignature Language="C#" Value="public virtual void WillChangeDisplayMode (UIKit.UISplitViewController svc, UIKit.UISplitViewControllerDisplayMode displayMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillChangeDisplayMode(class UIKit.UISplitViewController svc, valuetype UIKit.UISplitViewControllerDisplayMode displayMode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewController:willChangeToDisplayMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="UIKit.UISplitViewController" />
        <Parameter Name="displayMode" Type="UIKit.UISplitViewControllerDisplayMode" />
      </Parameters>
      <Docs>
        <param name="svc">The split view controller whose display mode is changing.</param>
        <param name="displayMode">TThe new display mode that will be applied.</param>
        <summary>Informs the delegate that the display mode for the split view controller is about to change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillHideViewController">
      <MemberSignature Language="C#" Value="public virtual void WillHideViewController (UIKit.UISplitViewController svc, UIKit.UIViewController aViewController, UIKit.UIBarButtonItem barButtonItem, UIKit.UIPopoverController pc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillHideViewController(class UIKit.UISplitViewController svc, class UIKit.UIViewController aViewController, class UIKit.UIBarButtonItem barButtonItem, class UIKit.UIPopoverController pc) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewController:willHideViewController:withBarButtonItem:forPopoverController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'UISearchController' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="UIKit.UISplitViewController" />
        <Parameter Name="aViewController" Type="UIKit.UIViewController" />
        <Parameter Name="barButtonItem" Type="UIKit.UIBarButtonItem" />
        <Parameter Name="pc" Type="UIKit.UIPopoverController" />
      </Parameters>
      <Docs>
        <param name="svc">The split view controller whose display mode is changing.</param>
        <param name="aViewController">Specified view controller.</param>
        <param name="barButtonItem">An enumeration of the predefined <see cref="T:UIKit.UIBarButtonItem" />s.</param>
        <param name="pc">Specified popover controller.</param>
        <summary>Indicates that the UISplitViewController is about to be hidden.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPresentViewController">
      <MemberSignature Language="C#" Value="public virtual void WillPresentViewController (UIKit.UISplitViewController svc, UIKit.UIPopoverController pc, UIKit.UIViewController aViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillPresentViewController(class UIKit.UISplitViewController svc, class UIKit.UIPopoverController pc, class UIKit.UIViewController aViewController) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewController:popoverController:willPresentViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'UISearchController' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="UIKit.UISplitViewController" />
        <Parameter Name="pc" Type="UIKit.UIPopoverController" />
        <Parameter Name="aViewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="svc">The split view controller whose display mode is changing.</param>
        <param name="pc">Specified popover controller.</param>
        <param name="aViewController">Specified view controller.</param>
        <summary>Indicates that the UISplitViewController is about to be presented.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillShowViewController">
      <MemberSignature Language="C#" Value="public virtual void WillShowViewController (UIKit.UISplitViewController svc, UIKit.UIViewController aViewController, UIKit.UIBarButtonItem button);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillShowViewController(class UIKit.UISplitViewController svc, class UIKit.UIViewController aViewController, class UIKit.UIBarButtonItem button) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("splitViewController:willShowViewController:invalidatingBarButtonItem:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'UISearchController' instead.")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="svc" Type="UIKit.UISplitViewController" />
        <Parameter Name="aViewController" Type="UIKit.UIViewController" />
        <Parameter Name="button" Type="UIKit.UIBarButtonItem" />
      </Parameters>
      <Docs>
        <param name="svc">The split view controller whose display mode is changing.</param>
        <param name="aViewController">Specified view controller.</param>
        <param name="button">An enumeration of the predefined <see cref="T:UIKit.UIBarButtonItem" />s.</param>
        <summary>Indicates that the UISplitViewController is about to be shown.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
