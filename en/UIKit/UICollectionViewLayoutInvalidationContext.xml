<Type Name="UICollectionViewLayoutInvalidationContext" FullName="UIKit.UICollectionViewLayoutInvalidationContext">
  <TypeSignature Language="C#" Value="public class UICollectionViewLayoutInvalidationContext : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UICollectionViewLayoutInvalidationContext extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:UIKit.UICollectionViewLayoutInvalidationContext" />
  <TypeSignature Language="F#" Value="type UICollectionViewLayoutInvalidationContext = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UICollectionViewLayoutInvalidationContext", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Specifies whether a call to <see cref="M:UIKit.UICollectionViewLayout.InvalidateLayout" /> should affect just the data-source count or everything.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewLayoutInvalidationContext_class/index.html">Apple documentation for <c>UICollectionViewLayoutInvalidationContext</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewLayoutInvalidationContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutInvalidationContext.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UICollectionViewLayoutInvalidationContext (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutInvalidationContext.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewLayoutInvalidationContext : Foundation.NSObjectFlag -&gt; UIKit.UICollectionViewLayoutInvalidationContext" Usage="new UIKit.UICollectionViewLayoutInvalidationContext t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UICollectionViewLayoutInvalidationContext (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutInvalidationContext.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewLayoutInvalidationContext : nativeint -&gt; UIKit.UICollectionViewLayoutInvalidationContext" Usage="new UIKit.UICollectionViewLayoutInvalidationContext handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UICollectionViewLayoutInvalidationContext.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentOffsetAdjustment">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint ContentOffsetAdjustment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint ContentOffsetAdjustment" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.ContentOffsetAdjustment" />
      <MemberSignature Language="F#" Value="member this.ContentOffsetAdjustment : CoreGraphics.CGPoint with get, set" Usage="UIKit.UICollectionViewLayoutInvalidationContext.ContentOffsetAdjustment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("contentOffsetAdjustment")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setContentOffsetAdjustment:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delta value that is applied to the content offset of a collection view.</summary>
        <value>Default set to zero. Altering the value causes a collection view to increment x and y values to the content offset property.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentSizeAdjustment">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize ContentSizeAdjustment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize ContentSizeAdjustment" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.ContentSizeAdjustment" />
      <MemberSignature Language="F#" Value="member this.ContentSizeAdjustment : CoreGraphics.CGSize with get, set" Usage="UIKit.UICollectionViewLayoutInvalidationContext.ContentSizeAdjustment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("contentSizeAdjustment")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setContentSizeAdjustment:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delta value that is applied to the content size of a collection view.</summary>
        <value>Default set to zero. Altering the value causes a collection view to add specified height and width values to the content size property.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InteractiveMovementTarget">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint InteractiveMovementTarget { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint InteractiveMovementTarget" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.InteractiveMovementTarget" />
      <MemberSignature Language="F#" Value="member this.InteractiveMovementTarget : CoreGraphics.CGPoint" Usage="UIKit.UICollectionViewLayoutInvalidationContext.InteractiveMovementTarget" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("interactiveMovementTarget")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the point that is used to place moving items.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateDataSourceCounts">
      <MemberSignature Language="C#" Value="public virtual bool InvalidateDataSourceCounts { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvalidateDataSourceCounts" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.InvalidateDataSourceCounts" />
      <MemberSignature Language="F#" Value="member this.InvalidateDataSourceCounts : bool" Usage="UIKit.UICollectionViewLayoutInvalidationContext.InvalidateDataSourceCounts" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("invalidateDataSourceCounts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the data source's counts should be invalidated.</summary>
        <value>A read-only Boolean indicating whether or not the layout should ask for new counts on section and item.</value>
        <remarks>You do not set the value for this property yourself. The collection view sets the value in response to layour scanearios and requirements.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidatedDecorationIndexPaths">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary InvalidatedDecorationIndexPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary InvalidatedDecorationIndexPaths" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.InvalidatedDecorationIndexPaths" />
      <MemberSignature Language="F#" Value="member this.InvalidatedDecorationIndexPaths : Foundation.NSDictionary" Usage="UIKit.UICollectionViewLayoutInvalidationContext.InvalidatedDecorationIndexPaths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("invalidatedDecorationIndexPaths")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A dictionary that defines invalidated decoration views.</summary>
        <value>An array of index path objects that designate which specific decoration views have layout changes made to them.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateDecorationElements">
      <MemberSignature Language="C#" Value="public virtual void InvalidateDecorationElements (Foundation.NSString elementKind, Foundation.NSIndexPath[] indexPaths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateDecorationElements(class Foundation.NSString elementKind, class Foundation.NSIndexPath[] indexPaths) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutInvalidationContext.InvalidateDecorationElements(Foundation.NSString,Foundation.NSIndexPath[])" />
      <MemberSignature Language="F#" Value="abstract member InvalidateDecorationElements : Foundation.NSString * Foundation.NSIndexPath[] -&gt; unit&#xA;override this.InvalidateDecorationElements : Foundation.NSString * Foundation.NSIndexPath[] -&gt; unit" Usage="uICollectionViewLayoutInvalidationContext.InvalidateDecorationElements (elementKind, indexPaths)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidateDecorationElementsOfKind:atIndexPaths:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="Foundation.NSString" />
        <Parameter Name="indexPaths" Type="Foundation.NSIndexPath[]" />
      </Parameters>
      <Docs>
        <param name="elementKind"> String indentifying the decoration view type.</param>
        <param name="indexPaths">Array of index path objects.</param>
        <summary>Adds decoration views at specified index paths to a list of items that are invalidated.</summary>
        <remarks>  Call this for indentifying specific decoration views where the layout attributes have changed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidatedItemIndexPaths">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath[] InvalidatedItemIndexPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSIndexPath[] InvalidatedItemIndexPaths" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.InvalidatedItemIndexPaths" />
      <MemberSignature Language="F#" Value="member this.InvalidatedItemIndexPaths : Foundation.NSIndexPath[]" Usage="UIKit.UICollectionViewLayoutInvalidationContext.InvalidatedItemIndexPaths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("invalidatedItemIndexPaths")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of index paths that represents invalidated cells.</summary>
        <value>An array containing zero or more index path objects.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidatedSupplementaryIndexPaths">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary InvalidatedSupplementaryIndexPaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary InvalidatedSupplementaryIndexPaths" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.InvalidatedSupplementaryIndexPaths" />
      <MemberSignature Language="F#" Value="member this.InvalidatedSupplementaryIndexPaths : Foundation.NSDictionary" Usage="UIKit.UICollectionViewLayoutInvalidationContext.InvalidatedSupplementaryIndexPaths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("invalidatedSupplementaryIndexPaths")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A dictionary identifying invalidated supplementary views.</summary>
        <value>An array of index path objects that indicates the  supplementary views that have sustained chnages in layout.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateEverything">
      <MemberSignature Language="C#" Value="public virtual bool InvalidateEverything { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InvalidateEverything" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.InvalidateEverything" />
      <MemberSignature Language="F#" Value="member this.InvalidateEverything : bool" Usage="UIKit.UICollectionViewLayoutInvalidationContext.InvalidateEverything" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("invalidateEverything")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether all layout data should be marked as invalid. Read-only.</summary>
        <value>A Boolean indicating all layout data needs to be marked as invalid.</value>
        <remarks>Do not set this property yourself. It is set in response to specific types of layout invalidation scenarios.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateItems">
      <MemberSignature Language="C#" Value="public virtual void InvalidateItems (Foundation.NSIndexPath[] indexPaths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateItems(class Foundation.NSIndexPath[] indexPaths) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutInvalidationContext.InvalidateItems(Foundation.NSIndexPath[])" />
      <MemberSignature Language="F#" Value="abstract member InvalidateItems : Foundation.NSIndexPath[] -&gt; unit&#xA;override this.InvalidateItems : Foundation.NSIndexPath[] -&gt; unit" Usage="uICollectionViewLayoutInvalidationContext.InvalidateItems indexPaths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidateItemsAtIndexPaths:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPaths" Type="Foundation.NSIndexPath[]" />
      </Parameters>
      <Docs>
        <param name="indexPaths">An array of index path objects.</param>
        <summary>Adds cells in the specified index paths to an invalid item list.</summary>
        <remarks>Call this for the identification of the specific cells of your layout that require updates.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateSupplementaryElements">
      <MemberSignature Language="C#" Value="public virtual void InvalidateSupplementaryElements (Foundation.NSString elementKind, Foundation.NSIndexPath[] indexPaths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateSupplementaryElements(class Foundation.NSString elementKind, class Foundation.NSIndexPath[] indexPaths) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutInvalidationContext.InvalidateSupplementaryElements(Foundation.NSString,Foundation.NSIndexPath[])" />
      <MemberSignature Language="F#" Value="abstract member InvalidateSupplementaryElements : Foundation.NSString * Foundation.NSIndexPath[] -&gt; unit&#xA;override this.InvalidateSupplementaryElements : Foundation.NSString * Foundation.NSIndexPath[] -&gt; unit" Usage="uICollectionViewLayoutInvalidationContext.InvalidateSupplementaryElements (elementKind, indexPaths)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidateSupplementaryElementsOfKind:atIndexPaths:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="Foundation.NSString" />
        <Parameter Name="indexPaths" Type="Foundation.NSIndexPath[]" />
      </Parameters>
      <Docs>
        <param name="elementKind">String indicating the type of the supplementary views.</param>
        <param name="indexPaths">An array of index path objects.</param>
        <summary>Adds supplementary views in the specified index paths to an invalid item list.</summary>
        <remarks>  Call this in order to identify specific supplementary views in your layout which require updates.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousIndexPathsForInteractivelyMovingItems">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath[] PreviousIndexPathsForInteractivelyMovingItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSIndexPath[] PreviousIndexPathsForInteractivelyMovingItems" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.PreviousIndexPathsForInteractivelyMovingItems" />
      <MemberSignature Language="F#" Value="member this.PreviousIndexPathsForInteractivelyMovingItems : Foundation.NSIndexPath[]" Usage="UIKit.UICollectionViewLayoutInvalidationContext.PreviousIndexPathsForInteractivelyMovingItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("previousIndexPathsForInteractivelyMovingItems")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the index paths for previous locations of the moving items.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetIndexPathsForInteractivelyMovingItems">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath[] TargetIndexPathsForInteractivelyMovingItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSIndexPath[] TargetIndexPathsForInteractivelyMovingItems" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutInvalidationContext.TargetIndexPathsForInteractivelyMovingItems" />
      <MemberSignature Language="F#" Value="member this.TargetIndexPathsForInteractivelyMovingItems : Foundation.NSIndexPath[]" Usage="UIKit.UICollectionViewLayoutInvalidationContext.TargetIndexPathsForInteractivelyMovingItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("targetIndexPathsForInteractivelyMovingItems")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the index paths for new locations of the moving items.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
