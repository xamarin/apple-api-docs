<Type Name="UIDropInteractionDelegate" FullName="UIKit.UIDropInteractionDelegate">
  <TypeSignature Language="C#" Value="public class UIDropInteractionDelegate : Foundation.NSObject, IDisposable, UIKit.IUIDropInteractionDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIDropInteractionDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIDropInteractionDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIDropInteractionDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("UIDropInteractionDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate object for a drop interaction.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIDropInteractionDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIDropInteractionDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIDropInteractionDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHandleSession">
      <MemberSignature Language="C#" Value="public virtual bool CanHandleSession (UIKit.UIDropInteraction interaction, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanHandleSession(class UIKit.UIDropInteraction interaction, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dropInteraction:canHandleSession:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDropInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction to check.</param>
        <param name="session">The session to query.</param>
        <summary>Returns <see langword="true" /> if the specified <paramref name="interaction" /> can handle the specified <paramref name="session" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConcludeDrop">
      <MemberSignature Language="C#" Value="public virtual void ConcludeDrop (UIKit.UIDropInteraction interaction, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConcludeDrop(class UIKit.UIDropInteraction interaction, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dropInteraction:concludeDrop:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDropInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session that has concluded.</param>
        <summary>Method that is called after the drop is performed and all animations have completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreviewForDroppingItem">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITargetedDragPreview GetPreviewForDroppingItem (UIKit.UIDropInteraction interaction, UIKit.UIDragItem item, UIKit.UITargetedDragPreview defaultPreview);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITargetedDragPreview GetPreviewForDroppingItem(class UIKit.UIDropInteraction interaction, class UIKit.UIDragItem item, class UIKit.UITargetedDragPreview defaultPreview) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dropInteraction:previewForDroppingItem:withDefault:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITargetedDragPreview</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDropInteraction" />
        <Parameter Name="item" Type="UIKit.UIDragItem" />
        <Parameter Name="defaultPreview" Type="UIKit.UITargetedDragPreview" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="item">The item for which to get a preview.</param>
        <param name="defaultPreview">The default preview for the item.</param>
        <summary>Method that is called for each drag item to allow the developer to provide a custom preview.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformDrop">
      <MemberSignature Language="C#" Value="public virtual void PerformDrop (UIKit.UIDropInteraction interaction, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformDrop(class UIKit.UIDropInteraction interaction, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dropInteraction:performDrop:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDropInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session that contains the items to drop.</param>
        <summary>Method that is called to consume data from the item providers in the drop session.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionDidEnd">
      <MemberSignature Language="C#" Value="public virtual void SessionDidEnd (UIKit.UIDropInteraction interaction, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SessionDidEnd(class UIKit.UIDropInteraction interaction, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dropInteraction:sessionDidEnd:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDropInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session that ended.</param>
        <summary>Method that is called to allow the developer to release all resources for the completed drop session.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionDidEnter">
      <MemberSignature Language="C#" Value="public virtual void SessionDidEnter (UIKit.UIDropInteraction interaction, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SessionDidEnter(class UIKit.UIDropInteraction interaction, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dropInteraction:sessionDidEnter:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDropInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session that entered the view for the interaction.</param>
        <summary>Method that is called when the user drags the drop session into the view for the drop interaction.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionDidExit">
      <MemberSignature Language="C#" Value="public virtual void SessionDidExit (UIKit.UIDropInteraction interaction, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SessionDidExit(class UIKit.UIDropInteraction interaction, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dropInteraction:sessionDidExit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDropInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session that left the view for the interaction.</param>
        <summary>Method that is called when the user drags the drop session out of the view for the drop interaction.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionDidUpdate">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDropProposal SessionDidUpdate (UIKit.UIDropInteraction interaction, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIDropProposal SessionDidUpdate(class UIKit.UIDropInteraction interaction, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dropInteraction:sessionDidUpdate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDropProposal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDropInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session that was changed.</param>
        <summary>Method that is called when the touch point moves into or within the view, or when drag items are added while the touch point is within the view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillAnimateDrop">
      <MemberSignature Language="C#" Value="public virtual void WillAnimateDrop (UIKit.UIDropInteraction interaction, UIKit.UIDragItem item, UIKit.IUIDragAnimating animator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillAnimateDrop(class UIKit.UIDropInteraction interaction, class UIKit.UIDragItem item, class UIKit.IUIDragAnimating animator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("dropInteraction:item:willAnimateDropWithAnimator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDropInteraction" />
        <Parameter Name="item" Type="UIKit.UIDragItem" />
        <Parameter Name="animator" Type="UIKit.IUIDragAnimating" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="item">The item whose drop to animate.</param>
        <param name="animator">An animator to run custom parallel animations and in which the developer may optionally add a completion handler.</param>
        <summary>Method that is called for each visible drag item just before the drop is animated.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
