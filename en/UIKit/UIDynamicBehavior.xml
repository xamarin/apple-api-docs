<Type Name="UIDynamicBehavior" FullName="UIKit.UIDynamicBehavior">
  <TypeSignature Language="C#" Value="public class UIDynamicBehavior : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIDynamicBehavior extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIDynamicBehavior", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>The base class for items that describe the physics-like behaviors of UIKit Dynamics, introduced in iOS 7.</summary>
    <remarks>
      <para>A number of <see cref="T:UIKit.UIDynamicBehavior" />s are associated with a <see cref="T:UIKit.UIDynamicAnimator" />, which is responsible for the overall context. Any given <see cref="T:UIKit.UIDynamicBehavior" /> is associated with some amount of <see cref="T:UIKit.IUIDynamicItem" />s (such as <see cref="T:UIKit.UIView" />s and <see cref="T:UIKit.UICollectionViewLayoutAttributes" />); most subclasses of <see cref="T:UIKit.UIDynamicBehavior" /> expose these in an <c>Items</c> property or application developers can retrieve them with <see cref="M:UIKit.UIDynamicAnimator.GetDynamicItems" />.</para>
      <para>There are a number of predefined subclasses of <see cref="T:UIKit.UIDynamicBehavior" />:</para>
      <para>
        <list type="table">
          <listheader>
            <term>Subclass</term>
            <description>Behavior</description>
          </listheader>
          <item>
            <term>
              <see cref="T:UIKit.UIAttachmentBehavior" />
            </term>
            <description>
            Attachment: Specifies a dynamic connection between two <see cref="T:UIKit.IUIDynamicItem" />s or between a <see cref="T:UIKit.IUIDynamicItem" /> and a fixed point.
          </description>
          </item>
          <item>
            <term>
              <see cref="T:UIKit.UICollisionBehavior" />
            </term>
            <description>
            Collision: Detects when the boundaries of a <see cref="T:UIKit.IUIDynamicItem" /> meet another boundary.
          </description>
          </item>
          <item>
            <term>
              <see cref="T:UIKit.UIGravityBehavior" />
            </term>
            <description>
            Gravity: Accelerates the <see cref="T:UIKit.IUIDynamicItem" /> towards the bottom of the screen.
          </description>
          </item>
          <item>
            <term>
              <see cref="T:UIKit.UIDynamicItemBehavior" />
            </term>
            <description>
            Animation: Specifies an animation configuration to apply to one or more <see cref="T:UIKit.IUIDynamicItem" />s.
          </description>
          </item>
          <item>
            <term>
              <see cref="T:UIKit.UIPushBehavior" />
            </term>
            <description>
            Pushing: Applies a continuous or instantaneous force vector to a <see cref="T:UIKit.IUIDynamicItem" />.
          </description>
          </item>
          <item>
            <term>
              <see cref="T:UIKit.UISnapBehavior" />
            </term>
            <description>
            Snapping: Specifies a magnetism-like attraction between a <see cref="T:UIKit.IUIDynamicItem" /> and a fixed point. Includes a rebounding effect.
          </description>
          </item>
        </list>
      </para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIDynamicBehavior_Class/index.html">Apple documentation for <c>UIDynamicBehavior</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIDynamicBehavior ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIDynamicBehavior (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIDynamicBehavior (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public virtual Action Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Action Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("action")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAction:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Action</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The NSAction that executes during dynamic animation.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddChildBehavior">
      <MemberSignature Language="C#" Value="public virtual void AddChildBehavior (UIKit.UIDynamicBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddChildBehavior(class UIKit.UIDynamicBehavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("addChildBehavior:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="UIKit.UIDynamicBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>Adds a UIDynamicBehavior to this UIDynamicBehavior's ChildBehaviors.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ChildBehaviors">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDynamicBehavior[] ChildBehaviors { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIDynamicBehavior[] ChildBehaviors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("childBehaviors")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDynamicBehavior[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The children UIDynamicBehaviors of this UIDynamicBehavior. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DynamicAnimator">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDynamicAnimator DynamicAnimator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIDynamicAnimator DynamicAnimator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("dynamicAnimator")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDynamicAnimator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIDynamicAnimator associated with this UIDynamicBehavior. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveChildBehavior">
      <MemberSignature Language="C#" Value="public virtual void RemoveChildBehavior (UIKit.UIDynamicBehavior behavior);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveChildBehavior(class UIKit.UIDynamicBehavior behavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("removeChildBehavior:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="behavior" Type="UIKit.UIDynamicBehavior" />
      </Parameters>
      <Docs>
        <param name="behavior">To be added.</param>
        <summary>Removes a UIDynamicBehavior from this UIDynamicBehavior's ChildBehaviors.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillMoveToAnimator">
      <MemberSignature Language="C#" Value="public virtual void WillMoveToAnimator (UIKit.UIDynamicAnimator targetAnimator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillMoveToAnimator(class UIKit.UIDynamicAnimator targetAnimator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("willMoveToAnimator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetAnimator" Type="UIKit.UIDynamicAnimator" />
      </Parameters>
      <Docs>
        <param name="targetAnimator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Indicates that this UIDynamicBehavior has been added or removed from a UIDynamicAnimator.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
