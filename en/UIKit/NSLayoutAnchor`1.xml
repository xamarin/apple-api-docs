<Type Name="NSLayoutAnchor&lt;AnchorType&gt;" FullName="UIKit.NSLayoutAnchor&lt;AnchorType&gt;">
  <TypeSignature Language="C#" Value="public class NSLayoutAnchor&lt;AnchorType&gt; : Foundation.NSObject where AnchorType : NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSLayoutAnchor`1&lt;(class Foundation.NSObject) AnchorType&gt; extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:UIKit.NSLayoutAnchor`1" />
  <TypeSignature Language="F#" Value="type NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; NSObject)&gt; = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="AnchorType">
      <Constraints>
        <BaseTypeName>Foundation.NSObject</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSLayoutAnchor", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="AnchorType">Whether the generating anchor is an <see cref="T:UIKit.NSLayoutXAxisAnchor" />, an <see cref="T:UIKit.NSLayoutYAxisAnchor" />, or an <see cref="T:UIKit.NSLayoutDimension" />.</typeparam>
    <summary>Generates <see cref="T:UIKit.NSLayoutConstraint" /> objects based on the value of the <see cref="T:UIKit.NSLayoutConstraint" /> associated with <c>this</c>.</summary>
    <remarks>
      <para>The <see cref="T:UIKit.NSLayoutAnchor`1" /> class, introduced in iOS 9, allows layout constraints to be specified in code, in a fluent manner. For example:</para>
      <example>
        <code lang="C#"><![CDATA[
blueView = new ContentView(UIColor.Blue);
view.AddSubview(blueView);

blueView.TranslatesAutoresizingMaskIntoConstraints = false;
var blueConstraints = new []
{ 
    blueView.LeadingAnchor.ConstraintEqualTo(greenView.LeadingAnchor),
    blueView.TrailingAnchor.ConstraintEqualTo(greenView.TrailingAnchor),
    blueView.TopAnchor.ConstraintEqualTo(greenView.BottomAnchor, 10.0f),
    blueView.HeightAnchor.ConstraintEqualTo(greenView.HeightAnchor),
    blueView.WidthAnchor.ConstraintEqualTo(greenView.WidthAnchor)
};

NSLayoutConstraint.ActivateConstraints(blueConstraints);

    ]]></code>
      </example>
      <para>In this example, the newly-created <c>blueView</c><see cref="T:UIKit.UIView" /> has its height, width, leading, and trailing anchors defined as equal to that of a previously-defined <c>greenView</c> while its <see cref="P:UIKit.UIView.TopAnchor" /> is set to be 10 logical pixels below the <c>greenView</c>'s <see cref="P:UIKit.UIView.BottomAnchor" />.</para>
    </remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutAnchor_ClassReference/index.html">Apple documentation for <c>NSLayoutAnchor</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSLayoutAnchor (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutAnchor`1.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; : Foundation.NSObjectFlag -&gt; UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt;" Usage="new UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSLayoutAnchor (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutAnchor`1.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; : nativeint -&gt; UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt;" Usage="new UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutAnchor`1.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt;.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutAnchor`1.ConstraintEqualTo(UIKit.NSLayoutAnchor{`0})" />
      <MemberSignature Language="F#" Value="abstract member ConstraintEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; -&gt; UIKit.NSLayoutConstraint&#xA;override this.ConstraintEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; -&gt; UIKit.NSLayoutConstraint" Usage="nSLayoutAnchor.ConstraintEqualTo anchor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("constraintEqualToAnchor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be copied.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is equal to that of the constraint of the <paramref name="anchor" />.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor, valuetype System.nfloat constant) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutAnchor`1.ConstraintEqualTo(UIKit.NSLayoutAnchor{`0},System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member ConstraintEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; * nfloat -&gt; UIKit.NSLayoutConstraint&#xA;override this.ConstraintEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; * nfloat -&gt; UIKit.NSLayoutConstraint" Usage="nSLayoutAnchor.ConstraintEqualTo (anchor, constant)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("constraintEqualToAnchor:constant:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be used.</param>
        <param name="constant">The number of logical pixels to add to the value of <paramref name="anchor" />.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is equal to that of the constraint of the <paramref name="anchor" /> plus <paramref name="constant" /> pixels.</summary>
        <returns>
        </returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutAnchor`1.ConstraintGreaterThanOrEqualTo(UIKit.NSLayoutAnchor{`0})" />
      <MemberSignature Language="F#" Value="abstract member ConstraintGreaterThanOrEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; -&gt; UIKit.NSLayoutConstraint&#xA;override this.ConstraintGreaterThanOrEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; -&gt; UIKit.NSLayoutConstraint" Usage="nSLayoutAnchor.ConstraintGreaterThanOrEqualTo anchor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("constraintGreaterThanOrEqualToAnchor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be used.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at least equal to that of the constraint of the <paramref name="anchor" />.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor, valuetype System.nfloat constant) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutAnchor`1.ConstraintGreaterThanOrEqualTo(UIKit.NSLayoutAnchor{`0},System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member ConstraintGreaterThanOrEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; * nfloat -&gt; UIKit.NSLayoutConstraint&#xA;override this.ConstraintGreaterThanOrEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; * nfloat -&gt; UIKit.NSLayoutConstraint" Usage="nSLayoutAnchor.ConstraintGreaterThanOrEqualTo (anchor, constant)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("constraintGreaterThanOrEqualToAnchor:constant:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be used.</param>
        <param name="constant">The number of logical pixels to add to the value of <paramref name="anchor" />.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at least equal to that of the constraint of the <paramref name="anchor" /> plus <paramref name="constant" /> pixels.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutAnchor`1.ConstraintLessThanOrEqualTo(UIKit.NSLayoutAnchor{`0})" />
      <MemberSignature Language="F#" Value="abstract member ConstraintLessThanOrEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; -&gt; UIKit.NSLayoutConstraint&#xA;override this.ConstraintLessThanOrEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; -&gt; UIKit.NSLayoutConstraint" Usage="nSLayoutAnchor.ConstraintLessThanOrEqualTo anchor" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("constraintLessThanOrEqualToAnchor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be used.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at most equal to that of the constraint of the <paramref name="anchor" />.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor, valuetype System.nfloat constant) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutAnchor`1.ConstraintLessThanOrEqualTo(UIKit.NSLayoutAnchor{`0},System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member ConstraintLessThanOrEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; * nfloat -&gt; UIKit.NSLayoutConstraint&#xA;override this.ConstraintLessThanOrEqualTo : UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; * nfloat -&gt; UIKit.NSLayoutConstraint" Usage="nSLayoutAnchor.ConstraintLessThanOrEqualTo (anchor, constant)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("constraintLessThanOrEqualToAnchor:constant:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be used.</param>
        <param name="constant">The number of logical pixels to add to the value of <paramref name="anchor" />.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at most equal to that of the constraint of the <paramref name="anchor" /> plus <paramref name="constant" /> pixels.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
