<Type Name="NSLayoutAnchor&lt;AnchorType&gt;" FullName="UIKit.NSLayoutAnchor&lt;AnchorType&gt;">
  <TypeSignature Language="C#" Value="public class NSLayoutAnchor&lt;AnchorType&gt; : Foundation.NSObject where AnchorType : NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSLayoutAnchor`1&lt;(class Foundation.NSObject) AnchorType&gt; extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="AnchorType">
      <Constraints>
        <BaseTypeName>Foundation.NSObject</BaseTypeName>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSLayoutAnchor", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <typeparam name="AnchorType">Whether the generating anchor is an <see cref="T:UIKit.NSLayoutAnchorXAxisAnchor" />, an <see cref="T:UIKit.NSLayoutAnchorYAxisAnchor" />, or an <see cref="T:UIKit.NSLayoutDimension" />.</typeparam>
    <summary>Generates <see cref="T:UIKit.NSLayoutConstraint" /> objects based on the value of the <see cref="T:UIKit.NSLayoutConstraint" /> associated with <c>this</c>.</summary>
    <remarks>
      <para>The <see cref="T:UIKit.NSLayoutAnchor`1" /> class, introduced in iOS 9, allows layout constraints to be specified in code, in a fluent manner. For example:</para>
      <example>
        <code lang="C#"><![CDATA[
blueView = new ContentView(UIColor.Blue);
view.AddSubview(blueView);

blueView.TranslatesAutoresizingMaskIntoConstraints = false;
var blueConstraints = new []
{ 
    blueView.LeadingAnchor.ConstraintEqualTo(greenView.LeadingAnchor),
    blueView.TrailingAnchor.ConstraintEqualTo(greenView.TrailingAnchor),
    blueView.TopAnchor.ConstraintEqualTo(greenView.BottomAnchor, 10.0f),
    blueView.HeightAnchor.ConstraintEqualTo(greenView.HeightAnchor),
    blueView.WidthAnchor.ConstraintEqualTo(greenView.WidthAnchor)
};

NSLayoutConstraint.ActivateConstraints(blueConstraints);

    ]]></code>
      </example>
      <para>In this example, the newly-created <c>blueView</c><see cref="T:UIKit.UIView" /> has its height, width, leading, and trailing anchors defined as equal to that of a previously-defined <c>greenView</c> while its <see cref="P:UIKit.UIView.TopAnchor" /> is set to be 10 logical pixels below the <c>greenView</c>'s <see cref="P:UIKit.UIView.BottomAnchor" />.</para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutAnchor_ClassReference/index.html">Apple documentation for <c>NSLayoutAnchor</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSLayoutAnchor (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSLayoutAnchor (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintEqualToAnchor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be copied.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is equal to that of the constraint of the <paramref name="anchor" />.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor, valuetype System.nfloat constant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintEqualToAnchor:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be used.</param>
        <param name="constant">The number of logical pixels to add to the value of <paramref name="anchor" />.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is equal to that of the constraint of the <paramref name="anchor" /> plus <paramref name="constant" /> pixels.</summary>
        <returns>
        </returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintGreaterThanOrEqualToAnchor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be used.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at least equal to that of the constraint of the <paramref name="anchor" />.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor, valuetype System.nfloat constant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintGreaterThanOrEqualToAnchor:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be used.</param>
        <param name="constant">The number of logical pixels to add to the value of <paramref name="anchor" />.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at least equal to that of the constraint of the <paramref name="anchor" /> plus <paramref name="constant" /> pixels.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintLessThanOrEqualToAnchor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be used.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at most equal to that of the constraint of the <paramref name="anchor" />.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo (UIKit.NSLayoutAnchor&lt;AnchorType&gt; anchor, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo(class UIKit.NSLayoutAnchor`1&lt;!AnchorType&gt; anchor, valuetype System.nfloat constant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintLessThanOrEqualToAnchor:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutAnchor&lt;AnchorType&gt;" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be used.</param>
        <param name="constant">The number of logical pixels to add to the value of <paramref name="anchor" />.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at most equal to that of the constraint of the <paramref name="anchor" /> plus <paramref name="constant" /> pixels.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
