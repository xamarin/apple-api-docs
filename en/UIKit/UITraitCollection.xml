<Type Name="UITraitCollection" FullName="UIKit.UITraitCollection">
  <TypeSignature Language="C#" Value="public class UITraitCollection : Foundation.NSObject, Foundation.INSCopying, Foundation.INSSecureCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UITraitCollection extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSCopying, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UITraitCollection", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Holds the horizontal and vertical size classes, as well as the user interface idiom and the display scale.</summary>
    <remarks>
      <para>

	This class holds the elements describing the user interface
	traits to use to render a view or view controller.  This
	contains components like the size class for the vertical or
	horizontal orientations (which is either compact or regular)
	as well as the user interface idiom (iPad or iPhone form
	factor) as well as the display scale.

      </para>
      <para>

	This is typically used by developers when implementing their
	own <see cref="T:UIKIt.UIViewController" /> as well
	by a handful of classes that are UITraitCollection aware, like
	<see cref="T:UIKIt.UIImage" /> and <see cref="T:UIKIt.UIImageAsset" />.

      </para>
    </remarks>
    <altmember cref="P:UIKit.UIViewController.TraitCollection" />
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITraitSet_ClassReference/index.html">Apple documentation for <c>UITraitCollection</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITraitCollection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITraitCollection (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITraitCollection (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITraitCollection (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public virtual bool Contains (UIKit.UITraitCollection trait);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(class UIKit.UITraitCollection trait) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("containsTraitsInCollection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="trait" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="trait">Traits to probe for.</param>
        <summary>Probes whether this UITraitCollection contains all the traits specified.</summary>
        <returns>True if all the traits in the traits parameter are present, false otherwise.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayGamut">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDisplayGamut DisplayGamut { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIDisplayGamut DisplayGamut" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("displayGamut")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDisplayGamut</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The gamut to which these traits apply.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisplayScale">
      <MemberSignature Language="C#" Value="public virtual nfloat DisplayScale { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat DisplayScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("displayScale")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The specified display scale for this trait collection.</summary>
        <value>The display scale, or 0.0 if the display scale has not been spefified in this trait.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ForceTouchCapability">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIForceTouchCapability ForceTouchCapability { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIForceTouchCapability ForceTouchCapability" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("forceTouchCapability")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIForceTouchCapability</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates whether 3D Touch is or is not available, or whether its availability is unknown.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromDisplayGamut">
      <MemberSignature Language="C#" Value="public static UIKit.UITraitCollection FromDisplayGamut (UIKit.UIDisplayGamut displayGamut);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UITraitCollection FromDisplayGamut(valuetype UIKit.UIDisplayGamut displayGamut) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("traitCollectionWithDisplayGamut:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="displayGamut" Type="UIKit.UIDisplayGamut" />
      </Parameters>
      <Docs>
        <param name="displayGamut">To be added.</param>
        <summary>Static factory method to create a new <see cref="T:UIKit.UITraitCollection" /> appropriate to the specified <paramref name="displayGamut" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromDisplayScale">
      <MemberSignature Language="C#" Value="public static UIKit.UITraitCollection FromDisplayScale (nfloat scale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UITraitCollection FromDisplayScale(valuetype System.nfloat scale) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("traitCollectionWithDisplayScale:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scale" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="scale">Display scale to set.</param>
        <summary>Creates a new UITraitCollection object where only the display scale has been specified.</summary>
        <returns>New instance of UITraitCollection with a single element specified.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromForceTouchCapability">
      <MemberSignature Language="C#" Value="public static UIKit.UITraitCollection FromForceTouchCapability (UIKit.UIForceTouchCapability capability);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UITraitCollection FromForceTouchCapability(valuetype UIKit.UIForceTouchCapability capability) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("traitCollectionWithForceTouchCapability:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capability" Type="UIKit.UIForceTouchCapability" />
      </Parameters>
      <Docs>
        <param name="capability">To be added.</param>
        <summary>Creates a new UITraitCollection object where only the availability of 3D Touch has been specified.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromHorizontalSizeClass">
      <MemberSignature Language="C#" Value="public static UIKit.UITraitCollection FromHorizontalSizeClass (UIKit.UIUserInterfaceSizeClass horizontalSizeClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UITraitCollection FromHorizontalSizeClass(valuetype UIKit.UIUserInterfaceSizeClass horizontalSizeClass) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("traitCollectionWithHorizontalSizeClass:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="horizontalSizeClass" Type="UIKit.UIUserInterfaceSizeClass" />
      </Parameters>
      <Docs>
        <param name="horizontalSizeClass">The desired horizontal size class to specify.</param>
        <summary>Creates a new UITraitCollection object where only the horizontal size class has been specified.</summary>
        <returns>New instance of UITraitCollection with a single element specified.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromLayoutDirection">
      <MemberSignature Language="C#" Value="public static UIKit.UITraitCollection FromLayoutDirection (UIKit.UITraitEnvironmentLayoutDirection layoutDirection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UITraitCollection FromLayoutDirection(valuetype UIKit.UITraitEnvironmentLayoutDirection layoutDirection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("traitCollectionWithLayoutDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layoutDirection" Type="UIKit.UITraitEnvironmentLayoutDirection" />
      </Parameters>
      <Docs>
        <param name="layoutDirection">To be added.</param>
        <summary>Static factory method to create a <see cref="T:UIKit.UITraitCollection" /> for the specified <paramref name="layoutDirection" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPreferredContentSizeCategory">
      <MemberSignature Language="C#" Value="public UIKit.UITraitCollection FromPreferredContentSizeCategory (UIKit.UIContentSizeCategory category);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UITraitCollection FromPreferredContentSizeCategory(valuetype UIKit.UIContentSizeCategory category) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="category" Type="UIKit.UIContentSizeCategory" />
      </Parameters>
      <Docs>
        <param name="category">The desired <see cref="T:UIKit.UIContentSizeCategory" />.</param>
        <summary>Static factory method to create a <see cref="T:UIKit.UITraitCollection" /> with the specified <see cref="T:UIKit.UIContentSizeCategory" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromTraitsFromCollections">
      <MemberSignature Language="C#" Value="public static UIKit.UITraitCollection FromTraitsFromCollections (UIKit.UITraitCollection[] traitCollections);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UITraitCollection FromTraitsFromCollections(class UIKit.UITraitCollection[] traitCollections) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("traitCollectionWithTraitsFromCollections:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traitCollections" Type="UIKit.UITraitCollection[]" />
      </Parameters>
      <Docs>
        <param name="traitCollections">To be added.</param>
        <summary>Creates and returns a new trait collection by merging the trait collections that are contained in <paramref name="traitCollections" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUserInterfaceIdiom">
      <MemberSignature Language="C#" Value="public static UIKit.UITraitCollection FromUserInterfaceIdiom (UIKit.UIUserInterfaceIdiom idiom);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UITraitCollection FromUserInterfaceIdiom(valuetype UIKit.UIUserInterfaceIdiom idiom) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("traitCollectionWithUserInterfaceIdiom:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="idiom" Type="UIKit.UIUserInterfaceIdiom" />
      </Parameters>
      <Docs>
        <param name="idiom">The desired user interface idiom to specify.</param>
        <summary>Creates a new UITraitCollection object where only the user interface idiom has been specified.</summary>
        <returns>New instance of UITraitCollection with a single element specified.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromVerticalSizeClass">
      <MemberSignature Language="C#" Value="public static UIKit.UITraitCollection FromVerticalSizeClass (UIKit.UIUserInterfaceSizeClass verticalSizeClass);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UITraitCollection FromVerticalSizeClass(valuetype UIKit.UIUserInterfaceSizeClass verticalSizeClass) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("traitCollectionWithVerticalSizeClass:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="verticalSizeClass" Type="UIKit.UIUserInterfaceSizeClass" />
      </Parameters>
      <Docs>
        <param name="verticalSizeClass">The desired vertical size class to specify.</param>
        <summary>Creates a new UITraitCollection object where only the vertical size class has been specified.</summary>
        <returns>New instance of UITraitCollection with a single element specified.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HorizontalSizeClass">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIUserInterfaceSizeClass HorizontalSizeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIUserInterfaceSizeClass HorizontalSizeClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("horizontalSizeClass")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIUserInterfaceSizeClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The specified horizontal size class specified for this trait collection.</summary>
        <value>If the value is not specified, the value is <see cref="F:UIKit.UIUserInterfaceSizeClass.Unspecified" />.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutDirection">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITraitEnvironmentLayoutDirection LayoutDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UITraitEnvironmentLayoutDirection LayoutDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("layoutDirection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitEnvironmentLayoutDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the environment layout direction.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredContentSizeCategory">
      <MemberSignature Language="C#" Value="public virtual string PreferredContentSizeCategory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreferredContentSizeCategory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("preferredContentSizeCategory")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a string describing the preferred content size category.</summary>
        <value>The default value is "_UICTContentSizeCategoryUnspecified.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UserInterfaceIdiom">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIUserInterfaceIdiom UserInterfaceIdiom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIUserInterfaceIdiom UserInterfaceIdiom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("userInterfaceIdiom")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIUserInterfaceIdiom</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The specified user interface idiom specified for this trait collection.</summary>
        <value>If the value is not specified, the value is <see cref="F:UIKit.UIUserInterfaceIdiom.Unspecified" />.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VerticalSizeClass">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIUserInterfaceSizeClass VerticalSizeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIUserInterfaceSizeClass VerticalSizeClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("verticalSizeClass")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIUserInterfaceSizeClass</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The specified vertical size class specified for this trait collection.</summary>
        <value>If the value is not specified, the value is <see cref="F:UIKit.UIUserInterfaceSizeClass.Unspecified" />.</value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
