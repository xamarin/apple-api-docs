<Type Name="UIWebView" FullName="UIKit.UIWebView">
  <TypeSignature Language="C#" Value="public class UIWebView : UIKit.UIView, IDisposable, UIKit.IUIScrollViewDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIWebView extends UIKit.UIView implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIScrollViewDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIWebView" />
  <TypeSignature Language="F#" Value="type UIWebView = class&#xA;    inherit UIView&#xA;    interface IUIScrollViewDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIScrollViewDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIWebView", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.None, "No longer supported; please adopt 'WKWebView'.")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:UIKit.UIView" /> that displays a web browser.</summary>
    <remarks>
      <para>
   The Xamarin API supports two styles of event notification: the Objective-C style that uses a delegate class or the C# style using event notifications.  
</para>
      <para>
   The C# style allows the user to add or remove event handlers at runtime by assigning to the events of properties of this class.    Event handlers can be anyone of a method, an anonymous methods or a lambda expression.  Using the C# style events or properties will override any manual settings to the Objective-C Delegate or WeakDelegate settings.
</para>
      <para>The Objective-C style requires the user to create a new class derived from <see cref="T:UIKit.UIWebViewDelegate" /> class and assign it to the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=UIKit%20Delegate&amp;scope=Xamarin" title="P:UIKit.Delegate">P:UIKit.Delegate</a></format> property.   Alternatively, for low-level control, by creating a class derived from <see cref="T:Foundation.NSObject" /> which has every entry point properly decorated with an [Export] attribute.   The instance of this object can then be assigned to the <see cref="P:UIKit.UIWebView.WeakDelegate" /> property.   
</para>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MapDemo">Example_ContentControls</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MonoCatalog-MonoDevelop/">monocatalog</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Web_View/Load_a_Web_Page">Load a Web Page</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Web_View/Load_Local_Content">Load Local Content</related>
    <related type="recipe" href="https://developer.xamarin.com/ios/Recipes/Content_Controls/Web_View/Load_Non-Web_Documents">Load Non-Web Documents</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIWebView_Class/index.html">Apple documentation for <c>UIWebView</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIWebView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIWebView (CoreGraphics.CGRect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.#ctor(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="new UIKit.UIWebView : CoreGraphics.CGRect -&gt; UIKit.UIWebView" Usage="new UIKit.UIWebView frame" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UIWebView with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of UIWebView with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIWebView (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UIWebView : Foundation.NSCoder -&gt; UIKit.UIWebView" Usage="new UIKit.UIWebView coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIWebView (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIWebView : Foundation.NSObjectFlag -&gt; UIKit.UIWebView" Usage="new UIKit.UIWebView t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIWebView (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIWebView : nativeint -&gt; UIKit.UIWebView" Usage="new UIKit.UIWebView handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsInlineMediaPlayback">
      <MemberSignature Language="C#" Value="public virtual bool AllowsInlineMediaPlayback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsInlineMediaPlayback" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.AllowsInlineMediaPlayback" />
      <MemberSignature Language="F#" Value="member this.AllowsInlineMediaPlayback : bool with get, set" Usage="UIKit.UIWebView.AllowsInlineMediaPlayback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("allowsInlineMediaPlayback")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAllowsInlineMediaPlayback:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If <see langword="true" />, then HTML5 videos can play inline, if <see langword="false" /> then the native fill-screen controller will be used.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsLinkPreview">
      <MemberSignature Language="C#" Value="public virtual bool AllowsLinkPreview { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsLinkPreview" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.AllowsLinkPreview" />
      <MemberSignature Language="F#" Value="member this.AllowsLinkPreview : bool with get, set" Usage="UIKit.UIWebView.AllowsLinkPreview" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("allowsLinkPreview")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAllowsLinkPreview:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that controls whether the user can preview content by pressing on a link.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsPictureInPictureMediaPlayback">
      <MemberSignature Language="C#" Value="public virtual bool AllowsPictureInPictureMediaPlayback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsPictureInPictureMediaPlayback" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.AllowsPictureInPictureMediaPlayback" />
      <MemberSignature Language="F#" Value="member this.AllowsPictureInPictureMediaPlayback : bool with get, set" Usage="UIKit.UIWebView.AllowsPictureInPictureMediaPlayback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("allowsPictureInPictureMediaPlayback")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAllowsPictureInPictureMediaPlayback:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that controls whether the view allows PiP playback.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIWebView.UIWebViewAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIWebView/UIWebViewAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : UIKit.UIWebView.UIWebViewAppearance" Usage="UIKit.UIWebView.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIWebView+UIWebViewAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UIWebView.</para>
          <para>If developers want to control the appearance of subclasses of UIWebView, they should use the <see cref="M:UIKit.UIWebView.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static UIKit.UIWebView.UIWebViewAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIWebView/UIWebViewAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; UIKit.UIWebView.UIWebViewAppearance" Usage="UIKit.UIWebView.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIWebView+UIWebViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIWebView when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of UIWebView, they should use the <see cref="M:UIKit.UIWebView.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGoBack">
      <MemberSignature Language="C#" Value="public virtual bool CanGoBack { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoBack" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.CanGoBack" />
      <MemberSignature Language="F#" Value="member this.CanGoBack : bool" Usage="UIKit.UIWebView.CanGoBack" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("canGoBack")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property indicates if it is possible to move backwards through web pages. Read-only.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanGoForward">
      <MemberSignature Language="C#" Value="public virtual bool CanGoForward { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanGoForward" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.CanGoForward" />
      <MemberSignature Language="F#" Value="member this.CanGoForward : bool" Usage="UIKit.UIWebView.CanGoForward" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("canGoForward")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property indicates if it is possible to move forwards through the web pages. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIWebView.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataDetectorTypes">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDataDetectorType DataDetectorTypes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIDataDetectorType DataDetectorTypes" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.DataDetectorTypes" />
      <MemberSignature Language="F#" Value="member this.DataDetectorTypes : UIKit.UIDataDetectorType with get, set" Usage="UIKit.UIWebView.DataDetectorTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("dataDetectorTypes")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDataDetectorTypes:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDataDetectorType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property holds and instance of <see cref="T:UIKit.UIDataDetectorType" /> that will convert content of the webpage into clickable URL's.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationEnded">
      <MemberSignature Language="C#" Value="public virtual void DecelerationEnded (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DecelerationEnded(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.DecelerationEnded(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member DecelerationEnded : UIKit.UIScrollView -&gt; unit&#xA;override this.DecelerationEnded : UIKit.UIScrollView -&gt; unit" Usage="uIWebView.DecelerationEnded scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewDidEndDecelerating:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <summary>Indicates deceleration ended after a rapid scroll.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationStarted">
      <MemberSignature Language="C#" Value="public virtual void DecelerationStarted (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DecelerationStarted(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.DecelerationStarted(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member DecelerationStarted : UIKit.UIScrollView -&gt; unit&#xA;override this.DecelerationStarted : UIKit.UIScrollView -&gt; unit" Usage="uIWebView.DecelerationStarted scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewWillBeginDecelerating:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <summary>Indicates that scrolling after a fast scroll is going to begin decelerating.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public UIKit.IUIWebViewDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUIWebViewDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UIKit.IUIWebViewDelegate with get, set" Usage="UIKit.UIWebView.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIWebViewDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UIKit.IUIWebViewDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UIKit.IUIWebViewDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeAdjustedContentInset">
      <MemberSignature Language="C#" Value="public virtual void DidChangeAdjustedContentInset (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChangeAdjustedContentInset(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.DidChangeAdjustedContentInset(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member DidChangeAdjustedContentInset : UIKit.UIScrollView -&gt; unit&#xA;override this.DidChangeAdjustedContentInset : UIKit.UIScrollView -&gt; unit" Usage="uIWebView.DidChangeAdjustedContentInset scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewDidChangeAdjustedContentInset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scroll view whose insets changed.</param>
        <summary>Method that is called when the inset values change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidZoom">
      <MemberSignature Language="C#" Value="public virtual void DidZoom (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidZoom(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.DidZoom(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member DidZoom : UIKit.UIScrollView -&gt; unit&#xA;override this.DidZoom : UIKit.UIScrollView -&gt; unit" Usage="uIWebView.DidZoom scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewDidZoom:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <summary>Indicates a zoom occurred.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="uIWebView.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIWebView object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIWebView class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UIWebView ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DraggingEnded">
      <MemberSignature Language="C#" Value="public virtual void DraggingEnded (UIKit.UIScrollView scrollView, bool willDecelerate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DraggingEnded(class UIKit.UIScrollView scrollView, bool willDecelerate) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.DraggingEnded(UIKit.UIScrollView,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DraggingEnded : UIKit.UIScrollView * bool -&gt; unit&#xA;override this.DraggingEnded : UIKit.UIScrollView * bool -&gt; unit" Usage="uIWebView.DraggingEnded (scrollView, willDecelerate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewDidEndDragging:willDecelerate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
        <Parameter Name="willDecelerate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <param name="willDecelerate">To be added.</param>
        <summary>Indicates that dragging has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DraggingStarted">
      <MemberSignature Language="C#" Value="public virtual void DraggingStarted (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DraggingStarted(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.DraggingStarted(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member DraggingStarted : UIKit.UIScrollView -&gt; unit&#xA;override this.DraggingStarted : UIKit.UIScrollView -&gt; unit" Usage="uIWebView.DraggingStarted scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewWillBeginDragging:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <summary>Indicates that dragging has begun.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EvaluateJavascript">
      <MemberSignature Language="C#" Value="public virtual string EvaluateJavascript (string script);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string EvaluateJavascript(string script) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.EvaluateJavascript(System.String)" />
      <MemberSignature Language="F#" Value="abstract member EvaluateJavascript : string -&gt; string&#xA;override this.EvaluateJavascript : string -&gt; string" Usage="uIWebView.EvaluateJavascript script" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("stringByEvaluatingJavaScriptFromString:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="script" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="script">The Javascript to run.</param>
        <summary>This method runs some Javascript and returns the the results of that scrip.</summary>
        <returns>
        </returns>
        <remarks>Javascript execution may cause the main thread to block, rendering the web page unresponsive to the user. To mitigate this, the Javascript execution has a limit of 10 seconds. There is also a 10MB limit on the memory allocation for the script. If the script uses more than 10MB of then an exception will be raised.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GapBetweenPages">
      <MemberSignature Language="C#" Value="public virtual nfloat GapBetweenPages { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat GapBetweenPages" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.GapBetweenPages" />
      <MemberSignature Language="F#" Value="member this.GapBetweenPages : nfloat with get, set" Usage="UIKit.UIWebView.GapBetweenPages" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("gapBetweenPages")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setGapBetweenPages:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size, in points, between pages.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIWebView.UIWebViewAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIWebView/UIWebViewAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UIWebView.UIWebViewAppearance" Usage="UIKit.UIWebView.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIWebView+UIWebViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UIWebView.UIWebViewAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIWebView/UIWebViewAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UIWebView.UIWebViewAppearance" Usage="UIKit.UIWebView.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIWebView+UIWebViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" /> when found in the <paramref name="containers" /> containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIWebView.UIWebViewAppearance GetAppearance&lt;T&gt; () where T : UIKit.UIWebView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIWebView/UIWebViewAppearance GetAppearance&lt;(class UIKit.UIWebView) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; UIKit.UIWebView.UIWebViewAppearance (requires 'T :&gt; UIKit.UIWebView)" Usage="UIKit.UIWebView.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIWebView+UIWebViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIWebView.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIWebView.UIWebViewAppearance" /> for the subclass of UIWebView.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UIWebView.Appearance" /> property, or the <see cref="M:UIKit.UIWebView.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIWebView.GetAppearance<MyUIWebViewSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIWebView.UIWebViewAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : UIKit.UIWebView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIWebView/UIWebViewAppearance GetAppearance&lt;(class UIKit.UIWebView) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UIWebView.UIWebViewAppearance (requires 'T :&gt; UIKit.UIWebView)" Usage="UIKit.UIWebView.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIWebView+UIWebViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UIWebView</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIWebView.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIWebView.UIWebViewAppearance" /> for the subclass of UIWebView.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIWebView.</para>
          <para>Unlike the <see cref="P:UIKit.UIWebView.Appearance" /> property, or the <see cref="M:UIKit.UIWebView.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIWebView.GetAppearance<MyUIWebViewSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UIWebView.UIWebViewAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : UIKit.UIWebView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIWebView/UIWebViewAppearance GetAppearance&lt;(class UIKit.UIWebView) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UIWebView.UIWebViewAppearance (requires 'T :&gt; UIKit.UIWebView)" Usage="UIKit.UIWebView.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIWebView+UIWebViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UIWebView</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIWebView.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UIWebView.UIWebViewAppearance" /> for the subclass of UIWebView that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIWebView that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UIWebView.Appearance" /> property, or the <see cref="M:UIKit.UIWebView.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIWebView.GetAppearance<MyUIWebViewSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GoBack">
      <MemberSignature Language="C#" Value="public virtual void GoBack ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoBack() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.GoBack" />
      <MemberSignature Language="F#" Value="abstract member GoBack : unit -&gt; unit&#xA;override this.GoBack : unit -&gt; unit" Usage="uIWebView.GoBack " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goBack")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Loads the previous URL.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GoForward">
      <MemberSignature Language="C#" Value="public virtual void GoForward ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GoForward() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.GoForward" />
      <MemberSignature Language="F#" Value="abstract member GoForward : unit -&gt; unit&#xA;override this.GoForward : unit -&gt; unit" Usage="uIWebView.GoForward " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("goForward")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Loads the next URL in the UIWebView's history list.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLoading">
      <MemberSignature Language="C#" Value="public virtual bool IsLoading { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLoading" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.IsLoading" />
      <MemberSignature Language="F#" Value="member this.IsLoading : bool" Usage="UIKit.UIWebView.IsLoading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isLoading")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns <see langword="true" /> if the web view is still loading content.  Read-only.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="KeyboardDisplayRequiresUserAction">
      <MemberSignature Language="C#" Value="public virtual bool KeyboardDisplayRequiresUserAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool KeyboardDisplayRequiresUserAction" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.KeyboardDisplayRequiresUserAction" />
      <MemberSignature Language="F#" Value="member this.KeyboardDisplayRequiresUserAction : bool with get, set" Usage="UIKit.UIWebView.KeyboardDisplayRequiresUserAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("keyboardDisplayRequiresUserAction")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setKeyboardDisplayRequiresUserAction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the UIWebView can programmatically display the keyboard.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadData">
      <MemberSignature Language="C#" Value="public virtual void LoadData (Foundation.NSData data, string mimeType, string textEncodingName, Foundation.NSUrl baseUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadData(class Foundation.NSData data, string mimeType, string textEncodingName, class Foundation.NSUrl baseUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.LoadData(Foundation.NSData,System.String,System.String,Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member LoadData : Foundation.NSData * string * string * Foundation.NSUrl -&gt; unit&#xA;override this.LoadData : Foundation.NSData * string * string * Foundation.NSUrl -&gt; unit" Usage="uIWebView.LoadData (data, mimeType, textEncodingName, baseUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("loadData:MIMEType:textEncodingName:baseURL:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="mimeType" Type="System.String" />
        <Parameter Name="textEncodingName" Type="System.String" />
        <Parameter Name="baseUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="data">The content to load, as an NSData.</param>
        <param name="mimeType">The MIME type of the content to load.</param>
        <param name="textEncodingName">The IANA encoding type, for example UTF-8 or UTF-16.</param>
        <param name="baseUrl">The URL for the content.</param>
        <summary>Loads the main page.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadError">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;UIKit.UIWebErrorArgs&gt; LoadError;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class UIKit.UIWebErrorArgs&gt; LoadError" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIWebView.LoadError" />
      <MemberSignature Language="F#" Value="member this.LoadError : EventHandler&lt;UIKit.UIWebErrorArgs&gt; " Usage="member this.LoadError : System.EventHandler&lt;UIKit.UIWebErrorArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;UIKit.UIWebErrorArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An event indicating an error in loading.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFinished">
      <MemberSignature Language="C#" Value="public event EventHandler LoadFinished;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LoadFinished" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIWebView.LoadFinished" />
      <MemberSignature Language="F#" Value="member this.LoadFinished : EventHandler " Usage="member this.LoadFinished : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An event indicating the end of loading.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadHtmlString">
      <MemberSignature Language="C#" Value="public virtual void LoadHtmlString (string s, Foundation.NSUrl baseUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadHtmlString(string s, class Foundation.NSUrl baseUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.LoadHtmlString(System.String,Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member LoadHtmlString : string * Foundation.NSUrl -&gt; unit&#xA;override this.LoadHtmlString : string * Foundation.NSUrl -&gt; unit" Usage="uIWebView.LoadHtmlString (s, baseUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("loadHTMLString:baseURL:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="s" Type="System.String" />
        <Parameter Name="baseUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="s">
          <para>The content for the main page.</para>
        </param>
        <param name="baseUrl">
          <para>The base URL for the content.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sets the main page content and base URL.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadRequest">
      <MemberSignature Language="C#" Value="public virtual void LoadRequest (Foundation.NSUrlRequest r);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void LoadRequest(class Foundation.NSUrlRequest r) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.LoadRequest(Foundation.NSUrlRequest)" />
      <MemberSignature Language="F#" Value="abstract member LoadRequest : Foundation.NSUrlRequest -&gt; unit&#xA;override this.LoadRequest : Foundation.NSUrlRequest -&gt; unit" Usage="uIWebView.LoadRequest r" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("loadRequest:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="r" Type="Foundation.NSUrlRequest" />
      </Parameters>
      <Docs>
        <param name="r">
          <para>To be added.</para>
        </param>
        <summary>Loads the given URL asynchronously.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadStarted">
      <MemberSignature Language="C#" Value="public event EventHandler LoadStarted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler LoadStarted" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIWebView.LoadStarted" />
      <MemberSignature Language="F#" Value="member this.LoadStarted : EventHandler " Usage="member this.LoadStarted : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaPlaybackAllowsAirPlay">
      <MemberSignature Language="C#" Value="public virtual bool MediaPlaybackAllowsAirPlay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MediaPlaybackAllowsAirPlay" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.MediaPlaybackAllowsAirPlay" />
      <MemberSignature Language="F#" Value="member this.MediaPlaybackAllowsAirPlay : bool with get, set" Usage="UIKit.UIWebView.MediaPlaybackAllowsAirPlay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("mediaPlaybackAllowsAirPlay")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMediaPlaybackAllowsAirPlay:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether AirPlay is allowed from this UIWebView</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaPlaybackRequiresUserAction">
      <MemberSignature Language="C#" Value="public virtual bool MediaPlaybackRequiresUserAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MediaPlaybackRequiresUserAction" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.MediaPlaybackRequiresUserAction" />
      <MemberSignature Language="F#" Value="member this.MediaPlaybackRequiresUserAction : bool with get, set" Usage="UIKit.UIWebView.MediaPlaybackRequiresUserAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("mediaPlaybackRequiresUserAction")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMediaPlaybackRequiresUserAction:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether HTML5 videos requires the user to start playing them. If false, videos play automatically.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PageCount">
      <MemberSignature Language="C#" Value="public virtual nint PageCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint PageCount" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.PageCount" />
      <MemberSignature Language="F#" Value="member this.PageCount : nint" Usage="UIKit.UIWebView.PageCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("pageCount")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of pages in the UIWebView after layout completes.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PageLength">
      <MemberSignature Language="C#" Value="public virtual nfloat PageLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat PageLength" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.PageLength" />
      <MemberSignature Language="F#" Value="member this.PageLength : nfloat with get, set" Usage="UIKit.UIWebView.PageLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("pageLength")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPageLength:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size, in points, of each page.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PaginationBreakingMode">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIWebPaginationBreakingMode PaginationBreakingMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIWebPaginationBreakingMode PaginationBreakingMode" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.PaginationBreakingMode" />
      <MemberSignature Language="F#" Value="member this.PaginationBreakingMode : UIKit.UIWebPaginationBreakingMode with get, set" Usage="UIKit.UIWebView.PaginationBreakingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("paginationBreakingMode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPaginationBreakingMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIWebPaginationBreakingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether column- or page-breaking is used.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PaginationMode">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIWebPaginationMode PaginationMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIWebPaginationMode PaginationMode" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.PaginationMode" />
      <MemberSignature Language="F#" Value="member this.PaginationMode : UIKit.UIWebPaginationMode with get, set" Usage="UIKit.UIWebView.PaginationMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("paginationMode")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPaginationMode:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIWebPaginationMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIWebPaginationMode used by this UIWebView.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reload">
      <MemberSignature Language="C#" Value="public virtual void Reload ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Reload() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.Reload" />
      <MemberSignature Language="F#" Value="abstract member Reload : unit -&gt; unit&#xA;override this.Reload : unit -&gt; unit" Usage="uIWebView.Reload " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reload")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reloads the current page.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrlRequest Request { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrlRequest Request" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.Request" />
      <MemberSignature Language="F#" Value="member this.Request : Foundation.NSUrlRequest" Usage="UIKit.UIWebView.Request" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("request", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrlRequest</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The URL of the content to load. Read-only.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScalesPageToFit">
      <MemberSignature Language="C#" Value="public virtual bool ScalesPageToFit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ScalesPageToFit" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.ScalesPageToFit" />
      <MemberSignature Language="F#" Value="member this.ScalesPageToFit : bool with get, set" Usage="UIKit.UIWebView.ScalesPageToFit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("scalesPageToFit")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setScalesPageToFit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the user may zoom in or out of the web page.</summary>
        <value>
        </value>
        <remarks>If <see langword="true" />, then the page is scaled to file the screen and the user may zoom in and out. <see langword="false" /> means that zooming is disabled.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAnimationEnded">
      <MemberSignature Language="C#" Value="public virtual void ScrollAnimationEnded (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollAnimationEnded(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.ScrollAnimationEnded(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member ScrollAnimationEnded : UIKit.UIScrollView -&gt; unit&#xA;override this.ScrollAnimationEnded : UIKit.UIScrollView -&gt; unit" Usage="uIWebView.ScrollAnimationEnded scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewDidEndScrollingAnimation:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <summary>Indicates that the animation associated with scrolling has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrolled">
      <MemberSignature Language="C#" Value="public virtual void Scrolled (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Scrolled(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.Scrolled(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member Scrolled : UIKit.UIScrollView -&gt; unit&#xA;override this.Scrolled : UIKit.UIScrollView -&gt; unit" Usage="uIWebView.Scrolled scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewDidScroll:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <summary>Indicates that the view has scrolled.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrolledToTop">
      <MemberSignature Language="C#" Value="public virtual void ScrolledToTop (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrolledToTop(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.ScrolledToTop(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member ScrolledToTop : UIKit.UIScrollView -&gt; unit&#xA;override this.ScrolledToTop : UIKit.UIScrollView -&gt; unit" Usage="uIWebView.ScrolledToTop scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewDidScrollToTop:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <summary>Indicates that the view has scrolled all the way to its top.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIScrollView ScrollView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIScrollView ScrollView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.ScrollView" />
      <MemberSignature Language="F#" Value="member this.ScrollView : UIKit.UIScrollView" Usage="UIKit.UIWebView.ScrollView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("scrollView", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIScrollView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is the <see cref="T:UIKit.UIScrollView" /> used for the web view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldScrollToTop">
      <MemberSignature Language="C#" Value="public virtual bool ShouldScrollToTop (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldScrollToTop(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.ShouldScrollToTop(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member ShouldScrollToTop : UIKit.UIScrollView -&gt; bool&#xA;override this.ShouldScrollToTop : UIKit.UIScrollView -&gt; bool" Usage="uIWebView.ShouldScrollToTop scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewShouldScrollToTop:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <summary>Delegate invoked by the object to get a value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldStartLoad">
      <MemberSignature Language="C#" Value="public UIKit.UIWebLoaderControl ShouldStartLoad { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIWebLoaderControl ShouldStartLoad" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.ShouldStartLoad" />
      <MemberSignature Language="F#" Value="member this.ShouldStartLoad : UIKit.UIWebLoaderControl with get, set" Usage="UIKit.UIWebView.ShouldStartLoad" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIWebLoaderControl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopLoading">
      <MemberSignature Language="C#" Value="public virtual void StopLoading ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopLoading() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.StopLoading" />
      <MemberSignature Language="F#" Value="abstract member StopLoading : unit -&gt; unit&#xA;override this.StopLoading : unit -&gt; unit" Usage="uIWebView.StopLoading " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("stopLoading")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>This method stops the loading of the web page.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SuppressesIncrementalRendering">
      <MemberSignature Language="C#" Value="public virtual bool SuppressesIncrementalRendering { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressesIncrementalRendering" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.SuppressesIncrementalRendering" />
      <MemberSignature Language="F#" Value="member this.SuppressesIncrementalRendering : bool with get, set" Usage="UIKit.UIWebView.SuppressesIncrementalRendering" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("suppressesIncrementalRendering")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSuppressesIncrementalRendering:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If true, the UIWebView may render content prior to being fully loaded in memory.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewForZoomingInScrollView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView ViewForZoomingInScrollView (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIView ViewForZoomingInScrollView(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.ViewForZoomingInScrollView(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member ViewForZoomingInScrollView : UIKit.UIScrollView -&gt; UIKit.UIView&#xA;override this.ViewForZoomingInScrollView : UIKit.UIScrollView -&gt; UIKit.UIView" Usage="uIWebView.ViewForZoomingInScrollView scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("viewForZoomingInScrollView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <summary>Delegate invoked by the object to get a value.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIWebView.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="UIKit.UIWebView.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillEndDragging">
      <MemberSignature Language="C#" Value="public virtual void WillEndDragging (UIKit.UIScrollView scrollView, CoreGraphics.CGPoint velocity, ref CoreGraphics.CGPoint targetContentOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillEndDragging(class UIKit.UIScrollView scrollView, valuetype CoreGraphics.CGPoint velocity, valuetype CoreGraphics.CGPoint&amp; targetContentOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.WillEndDragging(UIKit.UIScrollView,CoreGraphics.CGPoint,CoreGraphics.CGPoint@)" />
      <MemberSignature Language="F#" Value="abstract member WillEndDragging : UIKit.UIScrollView * CoreGraphics.CGPoint *  -&gt; unit&#xA;override this.WillEndDragging : UIKit.UIScrollView * CoreGraphics.CGPoint *  -&gt; unit" Usage="uIWebView.WillEndDragging (scrollView, velocity, targetContentOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewWillEndDragging:withVelocity:targetContentOffset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
        <Parameter Name="velocity" Type="CoreGraphics.CGPoint" />
        <Parameter Name="targetContentOffset" Type="CoreGraphics.CGPoint" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <param name="velocity">To be added.</param>
        <param name="targetContentOffset">To be added.</param>
        <summary>Indicates that dragging is about to end.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomingEnded">
      <MemberSignature Language="C#" Value="public virtual void ZoomingEnded (UIKit.UIScrollView scrollView, UIKit.UIView withView, nfloat atScale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ZoomingEnded(class UIKit.UIScrollView scrollView, class UIKit.UIView withView, valuetype System.nfloat atScale) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member ZoomingEnded : UIKit.UIScrollView * UIKit.UIView * nfloat -&gt; unit&#xA;override this.ZoomingEnded : UIKit.UIScrollView * UIKit.UIView * nfloat -&gt; unit" Usage="uIWebView.ZoomingEnded (scrollView, withView, atScale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewDidEndZooming:withView:atScale:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
        <Parameter Name="withView" Type="UIKit.UIView" />
        <Parameter Name="atScale" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <param name="withView">To be added.</param>
        <param name="atScale">To be added.</param>
        <summary>Indicates that zooming has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomingStarted">
      <MemberSignature Language="C#" Value="public virtual void ZoomingStarted (UIKit.UIScrollView scrollView, UIKit.UIView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ZoomingStarted(class UIKit.UIScrollView scrollView, class UIKit.UIView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIWebView.ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member ZoomingStarted : UIKit.UIScrollView * UIKit.UIView -&gt; unit&#xA;override this.ZoomingStarted : UIKit.UIScrollView * UIKit.UIView -&gt; unit" Usage="uIWebView.ZoomingStarted (scrollView, view)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("scrollViewWillBeginZooming:withView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
        <Parameter Name="view" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="scrollView">To be added.</param>
        <param name="view">To be added.</param>
        <summary>Indicates that zooming has begun.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
