<Type Name="NSLayoutConstraint" FullName="UIKit.NSLayoutConstraint">
  <TypeSignature Language="C#" Value="public class NSLayoutConstraint : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSLayoutConstraint extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:UIKit.NSLayoutConstraint" />
  <TypeSignature Language="F#" Value="type NSLayoutConstraint = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSLayoutConstraint", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A relationship between two layout attributes used in a constraint-based layout.</summary>
    <remarks>
      <para>An <see cref="T:UIKit.NSLayoutConstraint" /> specifies the relationship between two layout attributes (<see cref="P:UIKit.NSLayoutConstraint.FirstAttribute" /> and <see cref="P:UIKit.NSLayoutConstraint.SecondAttribute" />, both of which are of type <see cref="T:UIKit.NSLayoutAttribute" />) in a constraint-based layout.</para>
      <para>The relationship consists of:</para>
      <list type="bullet">
        <item>
          <term>A <see cref="T:UIKit.NSLayoutRelation" /> (e.g., <see cref="F:UIKit.NSLayoutRelation.GreaterThanOrEqual" />)</term>
        </item>
        <item>
          <term>A floating point <see cref="P:UIKit.NSLayoutConstraint.Multiplier" /></term>
        </item>
        <item>
          <term>A single-precision floating point <see cref="P:UIKit.NSLayoutConstraint.Constant" /></term>
        </item>
        <item>
          <term>A floating point <see cref="P:UIKit.NSLayoutConstraint.Priority" />. Constraints with higher priorities are satisfied before constraints with lower priorities.</term>
        </item>
      </list>
      <para>The constraint engine will set the value of the <see cref="P:UIKit.NSLayoutConstraint.FirstAttribute" /> such that it satisfies the constraint <c>FirstAttribute &lt;Relation&gt; &lt;Constant&gt; + &lt;Multiplier&gt; * &lt;SecondAttribute&gt;</c>.  For instance, in the following code from the "Media Notes" sample, <c>tconstraint2</c> is a constraint that specifies that the top of the <c>toolbar</c> is going to be equal to the top of the <c>View</c> plus the value of the <c>toolbarVerticalOffset</c>, while <c>tconstraint1</c> specifies that the width of the <c>toolbar</c> will be equal to the width of the <c>View</c>. Both of these constraints have a <see cref="P:UIKit.NSLayoutConstraint.Priority" /> of <c>1.0</c>.</para>
      <example>
        <code lang="C#"><![CDATA[
var tconstraint2 = NSLayoutConstraint.Create (toolbar, NSLayoutAttribute.Top, NSLayoutRelation.Equal,
                                                View, NSLayoutAttribute.Top, 1.0f, toolbarVerticalOffset);
toolbarTopConstraint = tconstraint2;
var tconstraint1 = NSLayoutConstraint.Create (toolbar, NSLayoutAttribute.Width, NSLayoutRelation.Equal,
                                                View, NSLayoutAttribute.Width, 1.0f, 0.0f);
]]></code>
      </example>
    </remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MediaNotes">Media Notes</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutConstraint_Class/index.html">Apple documentation for <c>NSLayoutConstraint</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutConstraint ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSLayoutConstraint (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.NSLayoutConstraint : Foundation.NSObjectFlag -&gt; UIKit.NSLayoutConstraint" Usage="new UIKit.NSLayoutConstraint t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSLayoutConstraint (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.NSLayoutConstraint : nativeint -&gt; UIKit.NSLayoutConstraint" Usage="new UIKit.NSLayoutConstraint handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActivateConstraints">
      <MemberSignature Language="C#" Value="public static void ActivateConstraints (UIKit.NSLayoutConstraint[] constraints);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void ActivateConstraints(class UIKit.NSLayoutConstraint[] constraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.ActivateConstraints(UIKit.NSLayoutConstraint[])" />
      <MemberSignature Language="F#" Value="static member ActivateConstraints : UIKit.NSLayoutConstraint[] -&gt; unit" Usage="UIKit.NSLayoutConstraint.ActivateConstraints constraints" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("activateConstraints:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraints" Type="UIKit.NSLayoutConstraint[]" />
      </Parameters>
      <Docs>
        <param name="constraints">Constraints to activate.</param>
        <summary>Activates all of the constraints passed.</summary>
        <remarks>
          <para>This method has the same effect as setting the <see cref="P:UIKit.NSLayoutConstraint.Active" /> property to <see langword="true" />.</para>
          <example>
            <code lang="C#"><![CDATA[
var blueView = new ContentView(UIColor.Blue);
view.AddSubview(blueView);

blueView.TranslatesAutoresizingMaskIntoConstraints = false;
var blueConstraints = new []
{ 
    blueView.LeadingAnchor.ConstraintEqualTo(greenView.LeadingAnchor),
    blueView.TrailingAnchor.ConstraintEqualTo(greenView.TrailingAnchor),
    blueView.TopAnchor.ConstraintEqualTo(greenView.BottomAnchor, 10.0f),
    blueView.HeightAnchor.ConstraintEqualTo(greenView.HeightAnchor),
    blueView.WidthAnchor.ConstraintEqualTo(greenView.WidthAnchor)
};

NSLayoutConstraint.ActivateConstraints(blueConstraints);

    ]]></code>
          </example>
          <para>
            <img href="~/UIKit/_images/UIKit.NSLayoutAnchor.png" />
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="public virtual bool Active { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.Active" />
      <MemberSignature Language="F#" Value="member this.Active : bool with get, set" Usage="UIKit.NSLayoutConstraint.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isActive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setActive:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Controls whether the constraint is active.  Active constraints are used as part of the auto-layout process, those that are not are ignored.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.NSLayoutConstraint.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Constant">
      <MemberSignature Language="C#" Value="public virtual nfloat Constant { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Constant" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.Constant" />
      <MemberSignature Language="F#" Value="member this.Constant : nfloat with get, set" Usage="UIKit.NSLayoutConstraint.Constant" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("constant")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setConstant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates the constant float applied to the constraint.</summary>
        <value>
          <para />
        </value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static UIKit.NSLayoutConstraint Create (Foundation.NSObject view1, UIKit.NSLayoutAttribute attribute1, UIKit.NSLayoutRelation relation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.NSLayoutConstraint Create(class Foundation.NSObject view1, valuetype UIKit.NSLayoutAttribute attribute1, valuetype UIKit.NSLayoutRelation relation) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.Create(Foundation.NSObject,UIKit.NSLayoutAttribute,UIKit.NSLayoutRelation)" />
      <MemberSignature Language="F#" Value="static member Create : Foundation.NSObject * UIKit.NSLayoutAttribute * UIKit.NSLayoutRelation -&gt; UIKit.NSLayoutConstraint" Usage="UIKit.NSLayoutConstraint.Create (view1, attribute1, relation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view1" Type="Foundation.NSObject" />
        <Parameter Name="attribute1" Type="UIKit.NSLayoutAttribute" />
        <Parameter Name="relation" Type="UIKit.NSLayoutRelation" />
      </Parameters>
      <Docs>
        <param name="view1">To be added.</param>
        <param name="attribute1">To be added.</param>
        <param name="relation">To be added.</param>
        <summary>Static factory method to create a constraint based on a <see cref="T:UIKit.UIView" />, an <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:NSLayoutAttribute&amp;scope=Xamarin" title="T:NSLayoutAttribute">T:NSLayoutAttribute</a></format>, and an <see cref="T:UIKit.NSLayoutRelation" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static UIKit.NSLayoutConstraint Create (Foundation.NSObject view1, UIKit.NSLayoutAttribute attribute1, UIKit.NSLayoutRelation relation, nfloat multiplier, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.NSLayoutConstraint Create(class Foundation.NSObject view1, valuetype UIKit.NSLayoutAttribute attribute1, valuetype UIKit.NSLayoutRelation relation, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.Create(Foundation.NSObject,UIKit.NSLayoutAttribute,UIKit.NSLayoutRelation,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="static member Create : Foundation.NSObject * UIKit.NSLayoutAttribute * UIKit.NSLayoutRelation * nfloat * nfloat -&gt; UIKit.NSLayoutConstraint" Usage="UIKit.NSLayoutConstraint.Create (view1, attribute1, relation, multiplier, constant)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view1" Type="Foundation.NSObject" />
        <Parameter Name="attribute1" Type="UIKit.NSLayoutAttribute" />
        <Parameter Name="relation" Type="UIKit.NSLayoutRelation" />
        <Parameter Name="multiplier" Type="System.nfloat" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="view1">To be added.</param>
        <param name="attribute1">To be added.</param>
        <param name="relation">To be added.</param>
        <param name="multiplier">To be added.</param>
        <param name="constant">To be added.</param>
        <summary>Static factory method for creating a constraint.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static UIKit.NSLayoutConstraint Create (Foundation.NSObject view1, UIKit.NSLayoutAttribute attribute1, UIKit.NSLayoutRelation relation, Foundation.NSObject view2, UIKit.NSLayoutAttribute attribute2, nfloat multiplier, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.NSLayoutConstraint Create(class Foundation.NSObject view1, valuetype UIKit.NSLayoutAttribute attribute1, valuetype UIKit.NSLayoutRelation relation, class Foundation.NSObject view2, valuetype UIKit.NSLayoutAttribute attribute2, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.Create(Foundation.NSObject,UIKit.NSLayoutAttribute,UIKit.NSLayoutRelation,Foundation.NSObject,UIKit.NSLayoutAttribute,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="static member Create : Foundation.NSObject * UIKit.NSLayoutAttribute * UIKit.NSLayoutRelation * Foundation.NSObject * UIKit.NSLayoutAttribute * nfloat * nfloat -&gt; UIKit.NSLayoutConstraint" Usage="UIKit.NSLayoutConstraint.Create (view1, attribute1, relation, view2, attribute2, multiplier, constant)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view1" Type="Foundation.NSObject" />
        <Parameter Name="attribute1" Type="UIKit.NSLayoutAttribute" />
        <Parameter Name="relation" Type="UIKit.NSLayoutRelation" />
        <Parameter Name="view2" Type="Foundation.NSObject" />
        <Parameter Name="attribute2" Type="UIKit.NSLayoutAttribute" />
        <Parameter Name="multiplier" Type="System.nfloat" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="view1">First view in the constraint.</param>
        <param name="attribute1">Attribute for the first view.</param>
        <param name="relation">Relationships between the <paramref name="view1" /> and the <paramref name="view2" />.</param>
        <param name="view2">
          <para>Second view in the constraint.</para>
          <para>This parameter can be <see langword="null" />.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="attribute2">Attribute for the second view.</param>
        <param name="multiplier">Multiplier applied to the second attribute.</param>
        <param name="constant">Constants to add.</param>
        <summary>Factory method for creating a constraint.</summary>
        <returns>
          <para>New constraint with the specified parameters.</para>
          <para>
          </para>
        </returns>
        <remarks>
          <para>Creates a constraint relationship between the <paramref name="view1" /> and the <paramref name="view2" /> that satisfies the following linear equation:</para>
          <para>
          </para>
          <para>
            <paramref name="attribute1" /> = <paramref name="multiplier" /> x <paramref name="attribute2" /> + <paramref name="constant" /></para>
          <para>
            <paramref name="&lt;br&gt;" />
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static UIKit.NSLayoutConstraint Create (ObjCRuntime.INativeObject view1, UIKit.NSLayoutAttribute attribute1, UIKit.NSLayoutRelation relation, ObjCRuntime.INativeObject view2, UIKit.NSLayoutAttribute attribute2, nfloat multiplier, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.NSLayoutConstraint Create(class ObjCRuntime.INativeObject view1, valuetype UIKit.NSLayoutAttribute attribute1, valuetype UIKit.NSLayoutRelation relation, class ObjCRuntime.INativeObject view2, valuetype UIKit.NSLayoutAttribute attribute2, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.Create(ObjCRuntime.INativeObject,UIKit.NSLayoutAttribute,UIKit.NSLayoutRelation,ObjCRuntime.INativeObject,UIKit.NSLayoutAttribute,System.nfloat,System.nfloat)" />
      <MemberSignature Language="F#" Value="static member Create : ObjCRuntime.INativeObject * UIKit.NSLayoutAttribute * UIKit.NSLayoutRelation * ObjCRuntime.INativeObject * UIKit.NSLayoutAttribute * nfloat * nfloat -&gt; UIKit.NSLayoutConstraint" Usage="UIKit.NSLayoutConstraint.Create (view1, attribute1, relation, view2, attribute2, multiplier, constant)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintWithItem:attribute:relatedBy:toItem:attribute:multiplier:constant:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view1" Type="ObjCRuntime.INativeObject" />
        <Parameter Name="attribute1" Type="UIKit.NSLayoutAttribute" />
        <Parameter Name="relation" Type="UIKit.NSLayoutRelation" />
        <Parameter Name="view2" Type="ObjCRuntime.INativeObject" />
        <Parameter Name="attribute2" Type="UIKit.NSLayoutAttribute" />
        <Parameter Name="multiplier" Type="System.nfloat" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="view1">First view in the constraint.</param>
        <param name="attribute1">Attribute for the first view.</param>
        <param name="relation">Relationships between the <paramref name="view1" /> and the <paramref name="view2" />.</param>
        <param name="view2">
          <para>Second view in the constraint.</para>
          <para>This parameter can be <see langword="null" />.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="attribute2">Attribute for the second view.</param>
        <param name="multiplier">Multiplier applied to the second attribute.</param>
        <param name="constant">Constants to add.</param>
        <summary>Factory method for creating a constraint.</summary>
        <returns>New constraint with the specified parameters.</returns>
        <remarks>
          <para>Creates a constraint relationship between the <paramref name="view1" /> and the <paramref name="view2" /> that satisfies the following linear equation:</para>
          <para>
          </para>
          <para>
            <paramref name="attribute1" /> = <paramref name="multiplier" /> x <paramref name="attribute2" /> + <paramref name="constant" /></para>
          <para>
            <paramref name="&lt;br&gt;" />
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeactivateConstraints">
      <MemberSignature Language="C#" Value="public static void DeactivateConstraints (UIKit.NSLayoutConstraint[] constraints);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void DeactivateConstraints(class UIKit.NSLayoutConstraint[] constraints) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.DeactivateConstraints(UIKit.NSLayoutConstraint[])" />
      <MemberSignature Language="F#" Value="static member DeactivateConstraints : UIKit.NSLayoutConstraint[] -&gt; unit" Usage="UIKit.NSLayoutConstraint.DeactivateConstraints constraints" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("deactivateConstraints:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constraints" Type="UIKit.NSLayoutConstraint[]" />
      </Parameters>
      <Docs>
        <param name="constraints">Constraints to deactivate.</param>
        <summary>Deactivates all of the constraints passed.</summary>
        <remarks>This method has the same effect as setting the <see cref="P:UIKit.NSLayoutConstraint.Active" /> property to <see langword="false" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="nSLayoutConstraint.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NSLayoutConstraint object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSLayoutConstraint class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the NSLayoutConstraint ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at https://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstAnchor&lt;AnchorType&gt;">
      <MemberSignature Language="C#" Value="public UIKit.NSLayoutAnchor&lt;AnchorType&gt; FirstAnchor&lt;AnchorType&gt; () where AnchorType : Foundation.NSObject;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.NSLayoutAnchor`1&lt;!!AnchorType&gt; FirstAnchor&lt;(class Foundation.NSObject) AnchorType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.FirstAnchor``1" />
      <MemberSignature Language="F#" Value="member this.FirstAnchor : unit -&gt; UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; (requires 'AnchorType :&gt; Foundation.NSObject)" Usage="nSLayoutConstraint.FirstAnchor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutAnchor&lt;AnchorType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="AnchorType">
          <Constraints>
            <BaseTypeName>Foundation.NSObject</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="AnchorType">To be added.</typeparam>
        <summary>For an anchor-based constraint, returns the first anchor, properly downcast to <c>AnchorType</c>.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstAttribute">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutAttribute FirstAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.NSLayoutAttribute FirstAttribute" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.FirstAttribute" />
      <MemberSignature Language="F#" Value="member this.FirstAttribute : UIKit.NSLayoutAttribute" Usage="UIKit.NSLayoutConstraint.FirstAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("firstAttribute")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The attribute of the first item participating in the constraint.</summary>
        <value>
          <para />
        </value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstItem">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject FirstItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject FirstItem" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.FirstItem" />
      <MemberSignature Language="F#" Value="member this.FirstItem : Foundation.NSObject" Usage="UIKit.NSLayoutConstraint.FirstItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("firstItem", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The first item participating in the constraint.</summary>
        <value>
          <para />
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromVisualFormat">
      <MemberSignature Language="C#" Value="public static UIKit.NSLayoutConstraint[] FromVisualFormat (string format, UIKit.NSLayoutFormatOptions formatOptions, params object[] viewsAndMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.NSLayoutConstraint[] FromVisualFormat(string format, valuetype UIKit.NSLayoutFormatOptions formatOptions, object[] viewsAndMetrics) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.FromVisualFormat(System.String,UIKit.NSLayoutFormatOptions,System.Object[])" />
      <MemberSignature Language="F#" Value="static member FromVisualFormat : string * UIKit.NSLayoutFormatOptions * obj[] -&gt; UIKit.NSLayoutConstraint[]" Usage="UIKit.NSLayoutConstraint.FromVisualFormat (format, formatOptions, viewsAndMetrics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatOptions" Type="UIKit.NSLayoutFormatOptions" />
        <Parameter Name="viewsAndMetrics" Type="System.Object[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="format">Visual format to use to create the constraints.</param>
        <param name="formatOptions">options.</param>
        <param name="viewsAndMetrics">
          <para>Pairs of names and values.   The names should be strings (or NSStrings) and the values should be either UIViews, numbers (any C# number or NSNumber) or <see cref="T:ObjCRuntime.INativeObject" /> instances that are suitable to be passed to the underlying engine. </para>
          <para>
          </para>
          <para> This binds the provided name with the view or binds the name with the number as a metric.</para>
        </param>
        <summary>Factory method for creating a constraint using Visual Format Language.</summary>
        <returns>An array of layout constraints that are suitable to be added to a UIView using <see cref="M:UIKit.UIView.AddConstraints(UIKit.NSLayoutConstraint[])" /> method.</returns>
        <remarks>
          <example>
            <code lang="C#"><![CDATA[
NSLayoutConstraint.FromVisualFormat ("|-8-[messageView]-8-|", NSLayoutOptions.None, "messageView", MakeMessageView ());
	    ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromVisualFormat">
      <MemberSignature Language="C#" Value="public static UIKit.NSLayoutConstraint[] FromVisualFormat (string format, UIKit.NSLayoutFormatOptions formatOptions, Foundation.NSDictionary metrics, Foundation.NSDictionary views);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.NSLayoutConstraint[] FromVisualFormat(string format, valuetype UIKit.NSLayoutFormatOptions formatOptions, class Foundation.NSDictionary metrics, class Foundation.NSDictionary views) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.FromVisualFormat(System.String,UIKit.NSLayoutFormatOptions,Foundation.NSDictionary,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="static member FromVisualFormat : string * UIKit.NSLayoutFormatOptions * Foundation.NSDictionary * Foundation.NSDictionary -&gt; UIKit.NSLayoutConstraint[]" Usage="UIKit.NSLayoutConstraint.FromVisualFormat (format, formatOptions, metrics, views)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintsWithVisualFormat:options:metrics:views:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="formatOptions" Type="UIKit.NSLayoutFormatOptions" />
        <Parameter Name="metrics" Type="Foundation.NSDictionary" />
        <Parameter Name="views" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="format">Visual format to use to create the constraints.</param>
        <param name="formatOptions">options.</param>
        <param name="metrics">
          <para>Dictionary containing mapping names to numbers, where each name is associated with the given metric.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="views">Dictionary containing mappings of names to UIViews.</param>
        <summary>Factory method for creating a constraint using Visual Format Language.</summary>
        <returns>An array of layout constraints that are suitable to be added to a UIView using <see cref="M:UIKit.UIView.AddConstraints(UIKit.NSLayoutConstraint[])" /> method.</returns>
        <remarks>
          <para>It is easier to use the <see cref="M:UIKit.NSLayoutConstraint.FromVisualFormat(System.String,UIKit.NSLayoutFormatOptions,System.Object[])" /> overload as it combines support for both metrics and views in a single call.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiplier">
      <MemberSignature Language="C#" Value="public virtual nfloat Multiplier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Multiplier" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.Multiplier" />
      <MemberSignature Language="F#" Value="member this.Multiplier : nfloat" Usage="UIKit.NSLayoutConstraint.Multiplier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("multiplier")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Applied to the second attribute participating in the constraint.</summary>
        <value>
          <para />
        </value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Priority">
      <MemberSignature Language="C#" Value="public virtual float Priority { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Priority" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.Priority" />
      <MemberSignature Language="F#" Value="member this.Priority : single with get, set" Usage="UIKit.NSLayoutConstraint.Priority" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("priority")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPriority:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The priority of the constraint. Must be in range [0, UILayoutPriority.Required].</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Relation">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutRelation Relation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.NSLayoutRelation Relation" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.Relation" />
      <MemberSignature Language="F#" Value="member this.Relation : UIKit.NSLayoutRelation" Usage="UIKit.NSLayoutConstraint.Relation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("relation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutRelation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The NSRelation that holds between the two items in the constraint.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecondAnchor&lt;AnchorType&gt;">
      <MemberSignature Language="C#" Value="public UIKit.NSLayoutAnchor&lt;AnchorType&gt; SecondAnchor&lt;AnchorType&gt; () where AnchorType : Foundation.NSObject;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.NSLayoutAnchor`1&lt;!!AnchorType&gt; SecondAnchor&lt;(class Foundation.NSObject) AnchorType&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutConstraint.SecondAnchor``1" />
      <MemberSignature Language="F#" Value="member this.SecondAnchor : unit -&gt; UIKit.NSLayoutAnchor&lt;'AnchorType (requires 'AnchorType :&gt; Foundation.NSObject)&gt; (requires 'AnchorType :&gt; Foundation.NSObject)" Usage="nSLayoutConstraint.SecondAnchor " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutAnchor&lt;AnchorType&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="AnchorType">
          <Constraints>
            <BaseTypeName>Foundation.NSObject</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="AnchorType">To be added.</typeparam>
        <summary>For an anchor-based constraint, returns the second anchor, properly downcast to <c>AnchorType</c>.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecondAttribute">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutAttribute SecondAttribute { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.NSLayoutAttribute SecondAttribute" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.SecondAttribute" />
      <MemberSignature Language="F#" Value="member this.SecondAttribute : UIKit.NSLayoutAttribute" Usage="UIKit.NSLayoutConstraint.SecondAttribute" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("secondAttribute")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutAttribute</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The attribute of the second item participating in the constraint.</summary>
        <value>
          <para />
        </value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SecondItem">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject SecondItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject SecondItem" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.SecondItem" />
      <MemberSignature Language="F#" Value="member this.SecondItem : Foundation.NSObject" Usage="UIKit.NSLayoutConstraint.SecondItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("secondItem", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The second item participating in the constraint.</summary>
        <value>
          <para />
        </value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeArchived">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBeArchived { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldBeArchived" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutConstraint.ShouldBeArchived" />
      <MemberSignature Language="F#" Value="member this.ShouldBeArchived : bool with get, set" Usage="UIKit.NSLayoutConstraint.ShouldBeArchived" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("shouldBeArchived")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setShouldBeArchived:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the constraint should be archived by its owning UIView.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
