<Type Name="UIActivityItemSource" FullName="UIKit.UIActivityItemSource">
  <TypeSignature Language="C#" Value="public abstract class UIActivityItemSource : Foundation.NSObject, IDisposable, UIKit.IUIActivityItemSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UIActivityItemSource extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIActivityItemSource" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIActivityItemSource" />
  <TypeSignature Language="F#" Value="type UIActivityItemSource = class&#xA;    inherit NSObject&#xA;    interface IUIActivityItemSource&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIActivityItemSource</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIActivityItemSource", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Abstract class that, when implemented, provides data for use by a <see cref="T:UIKit.UIActivityViewController" /></summary>
    <remarks>
      <para>This class should not be used for complex processing, as it is called on the main UI thread. Applications that require complex processing of data before passing it to <see cref="T:UIKit.UIActivity" /> objects should implement <see cref="T:UIKit.UIActivityItemProvider" />.</para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIActivityItemSource_protocol/index.html">Apple documentation for <c>UIActivityItemSource</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIActivityItemSource ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemSource.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIActivityItemSource (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemSource.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActivityItemSource : Foundation.NSObjectFlag -&gt; UIKit.UIActivityItemSource" Usage="new UIKit.UIActivityItemSource t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIActivityItemSource (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemSource.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIActivityItemSource : nativeint -&gt; UIKit.UIActivityItemSource" Usage="new UIKit.UIActivityItemSource handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataTypeIdentifierForActivity">
      <MemberSignature Language="C#" Value="public virtual string GetDataTypeIdentifierForActivity (UIKit.UIActivityViewController activityViewController, Foundation.NSString activityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetDataTypeIdentifierForActivity(class UIKit.UIActivityViewController activityViewController, class Foundation.NSString activityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemSource.GetDataTypeIdentifierForActivity(UIKit.UIActivityViewController,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetDataTypeIdentifierForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; string&#xA;override this.GetDataTypeIdentifierForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; string" Usage="uIActivityItemSource.GetDataTypeIdentifierForActivity (activityViewController, activityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("activityViewController:dataTypeIdentifierForActivityType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
        <Parameter Name="activityType" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="activityViewController">To be added.</param>
        <param name="activityType">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>If the specified <paramref name="activityType" /> provides NSData, this method returns the Uniform Type Identifier (UTI) of the item.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemForActivity">
      <MemberSignature Language="C#" Value="public abstract Foundation.NSObject GetItemForActivity (UIKit.UIActivityViewController activityViewController, Foundation.NSString activityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject GetItemForActivity(class UIKit.UIActivityViewController activityViewController, class Foundation.NSString activityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemSource.GetItemForActivity(UIKit.UIActivityViewController,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetItemForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; Foundation.NSObject" Usage="uIActivityItemSource.GetItemForActivity (activityViewController, activityType)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIActivityItemSource.GetItemForActivity(UIKit.UIActivityViewController,Foundation.NSString)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("activityViewController:itemForActivityType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
        <Parameter Name="activityType" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="activityViewController">To be added.</param>
        <param name="activityType">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>The data object to be acted upon for the specified <paramref name="activityType" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPlaceholderData">
      <MemberSignature Language="C#" Value="public abstract Foundation.NSObject GetPlaceholderData (UIKit.UIActivityViewController activityViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject GetPlaceholderData(class UIKit.UIActivityViewController activityViewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemSource.GetPlaceholderData(UIKit.UIActivityViewController)" />
      <MemberSignature Language="F#" Value="abstract member GetPlaceholderData : UIKit.UIActivityViewController -&gt; Foundation.NSObject" Usage="uIActivityItemSource.GetPlaceholderData activityViewController" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIActivityItemSource.GetPlaceholderData(UIKit.UIActivityViewController)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("activityViewControllerPlaceholderItem:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
      </Parameters>
      <Docs>
        <param name="activityViewController">To be added.</param>
        <summary>The placeholder object for the data.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSubjectForActivity">
      <MemberSignature Language="C#" Value="public virtual string GetSubjectForActivity (UIKit.UIActivityViewController activityViewController, Foundation.NSString activityType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetSubjectForActivity(class UIKit.UIActivityViewController activityViewController, class Foundation.NSString activityType) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemSource.GetSubjectForActivity(UIKit.UIActivityViewController,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetSubjectForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; string&#xA;override this.GetSubjectForActivity : UIKit.UIActivityViewController * Foundation.NSString -&gt; string" Usage="uIActivityItemSource.GetSubjectForActivity (activityViewController, activityType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("activityViewController:subjectForActivityType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
        <Parameter Name="activityType" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="activityViewController">To be added.</param>
        <param name="activityType">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Returns the subject for the specified <paramref name="activityType" /> .</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetThumbnailImageForActivity">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage GetThumbnailImageForActivity (UIKit.UIActivityViewController activityViewController, Foundation.NSString activityType, CoreGraphics.CGSize suggestedSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage GetThumbnailImageForActivity(class UIKit.UIActivityViewController activityViewController, class Foundation.NSString activityType, valuetype CoreGraphics.CGSize suggestedSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIActivityItemSource.GetThumbnailImageForActivity(UIKit.UIActivityViewController,Foundation.NSString,CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="abstract member GetThumbnailImageForActivity : UIKit.UIActivityViewController * Foundation.NSString * CoreGraphics.CGSize -&gt; UIKit.UIImage&#xA;override this.GetThumbnailImageForActivity : UIKit.UIActivityViewController * Foundation.NSString * CoreGraphics.CGSize -&gt; UIKit.UIImage" Usage="uIActivityItemSource.GetThumbnailImageForActivity (activityViewController, activityType, suggestedSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("activityViewController:thumbnailImageForActivityType:suggestedSize:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
        <Parameter Name="activityType" Type="Foundation.NSString" />
        <Parameter Name="suggestedSize" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="activityViewController">To be added.</param>
        <param name="activityType">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="suggestedSize">To be added.</param>
        <summary>Returns the preview image for the specified <paramref name="activityType" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
