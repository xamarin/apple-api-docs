<Type Name="UISegmentedControl" FullName="UIKit.UISegmentedControl">
  <TypeSignature Language="C#" Value="public class UISegmentedControl : UIKit.UIControl, IDisposable, UIKit.IUISpringLoadedInteractionSupporting" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UISegmentedControl extends UIKit.UIControl implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUISpringLoadedInteractionSupporting" />
  <TypeSignature Language="DocId" Value="T:UIKit.UISegmentedControl" />
  <TypeSignature Language="F#" Value="type UISegmentedControl = class&#xA;    inherit UIControl&#xA;    interface IUISpringLoadedInteractionSupporting&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIControl</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUISpringLoadedInteractionSupporting</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UISegmentedControl", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:UIKit.UIControl" /> that displays multiple buttons horizontally.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=23a2571b-45eb-4889-bb67-d88937cb68c1">monocatalog</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Standard_Controls/Segmented_Button_Control/Configure_Segments_(UISegmentedControl)">Configure Segments (UISegmentedControl)</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Standard_Controls/Segmented_Button_Control/Specify_Segment_Sizes">Specify Segment Sizes</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UISegmentedControl_Class/index.html">Apple documentation for <c>UISegmentedControl</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISegmentedControl ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISegmentedControl (CoreGraphics.CGRect frame);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.#ctor(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="new UIKit.UISegmentedControl : CoreGraphics.CGRect -&gt; UIKit.UISegmentedControl" Usage="new UIKit.UISegmentedControl frame" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithFrame:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="frame">Frame used by the view, expressed in iOS points.</param>
        <summary>Initializes the UISegmentedControl with the specified frame.</summary>
        <remarks>
          <para>This constructor is used to programmatically create a new instance of UISegmentedControl with the specified dimension in the frame.   The object will only be displayed once it has been added to a view hierarchy by calling AddSubview in a containing view.</para>
          <para>This constructor is not invoked when deserializing objects from storyboards or XIB filesinstead the constructor that takes an NSCoder parameter is invoked.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISegmentedControl (Foundation.NSArray items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSArray items) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.#ctor(Foundation.NSArray)" />
      <MemberSignature Language="F#" Value="new UIKit.UISegmentedControl : Foundation.NSArray -&gt; UIKit.UISegmentedControl" Usage="new UIKit.UISegmentedControl items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithItems:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="items" Type="Foundation.NSArray" />
      </Parameters>
      <Docs>
        <param name="items">To be added.</param>
        <summary>Creates a new segmented control with the titles or images that are contained in the provided array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISegmentedControl (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UISegmentedControl : Foundation.NSCoder -&gt; UIKit.UISegmentedControl" Usage="new UIKit.UISegmentedControl coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UISegmentedControl (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UISegmentedControl : Foundation.NSObjectFlag -&gt; UIKit.UISegmentedControl" Usage="new UIKit.UISegmentedControl t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISegmentedControl (params Foundation.NSString[] strings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSString[] strings) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.#ctor(Foundation.NSString[])" />
      <MemberSignature Language="F#" Value="new UIKit.UISegmentedControl : Foundation.NSString[] -&gt; UIKit.UISegmentedControl" Usage="new UIKit.UISegmentedControl strings" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strings" Type="Foundation.NSString[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="strings">To be added.</param>
        <summary>Creates a new segmented control with the titles in the provided array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UISegmentedControl (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UISegmentedControl : nativeint -&gt; UIKit.UISegmentedControl" Usage="new UIKit.UISegmentedControl handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISegmentedControl (params object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.#ctor(System.Object[])" />
      <MemberSignature Language="F#" Value="new UIKit.UISegmentedControl : obj[] -&gt; UIKit.UISegmentedControl" Usage="new UIKit.UISegmentedControl args" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="args">Array of strings or UIImage objects to use in the control.</param>
        <summary>Creates a UISegmentedControl by passing an array containing strings or <see cref="T:UIKit.UIImage" /> objects.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISegmentedControl (params string[] strings);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] strings) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.#ctor(System.String[])" />
      <MemberSignature Language="F#" Value="new UIKit.UISegmentedControl : string[] -&gt; UIKit.UISegmentedControl" Usage="new UIKit.UISegmentedControl strings" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="strings" Type="System.String[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="strings">To be added.</param>
        <summary>Creates a new segmented control with the titles in the provided array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UISegmentedControl (params UIKit.UIImage[] images);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.UIImage[] images) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.#ctor(UIKit.UIImage[])" />
      <MemberSignature Language="F#" Value="new UIKit.UISegmentedControl : UIKit.UIImage[] -&gt; UIKit.UISegmentedControl" Usage="new UIKit.UISegmentedControl images" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="images" Type="UIKit.UIImage[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="images">To be added.</param>
        <summary>Creates a new segmented control with the images in the provided array.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static UIKit.UISegmentedControl.UISegmentedControlAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UISegmentedControl/UISegmentedControlAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISegmentedControl.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : UIKit.UISegmentedControl.UISegmentedControlAppearance" Usage="UIKit.UISegmentedControl.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISegmentedControl+UISegmentedControlAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UISegmentedControl.</para>
          <para>If developers want to control the appearance of subclasses of UISegmentedControl, they should use the <see cref="M:UIKit.UISegmentedControl.GetAppearance" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static UIKit.UISegmentedControl.UISegmentedControlAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISegmentedControl/UISegmentedControlAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; UIKit.UISegmentedControl.UISegmentedControlAppearance" Usage="UIKit.UISegmentedControl.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISegmentedControl+UISegmentedControlAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UISegmentedControl when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of UISegmentedControl, they should use the <see cref="M:UIKit.UISegmentedControl.GetAppearance" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApportionsSegmentWidthsByContent">
      <MemberSignature Language="C#" Value="public virtual bool ApportionsSegmentWidthsByContent { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ApportionsSegmentWidthsByContent" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISegmentedControl.ApportionsSegmentWidthsByContent" />
      <MemberSignature Language="F#" Value="member this.ApportionsSegmentWidthsByContent : bool with get, set" Usage="UIKit.UISegmentedControl.ApportionsSegmentWidthsByContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("apportionsSegmentWidthsByContent")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setApportionsSegmentWidthsByContent:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Allow the segment control to adjust the width of each segment based upon each content width.</summary>
        <value>
        </value>
        <remarks>If set to true and the segment width is 0, the segment control will attempt to adjust the size of the segment to fit its content.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISegmentedControl.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UISegmentedControl.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentPositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIOffset ContentPositionAdjustment (UIKit.UISegmentedControlSegment leftCenterRightOrAlone, UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UIOffset ContentPositionAdjustment(valuetype UIKit.UISegmentedControlSegment leftCenterRightOrAlone, valuetype UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.ContentPositionAdjustment(UIKit.UISegmentedControlSegment,UIKit.UIBarMetrics)" />
      <MemberSignature Language="F#" Value="abstract member ContentPositionAdjustment : UIKit.UISegmentedControlSegment * UIKit.UIBarMetrics -&gt; UIKit.UIOffset&#xA;override this.ContentPositionAdjustment : UIKit.UISegmentedControlSegment * UIKit.UIBarMetrics -&gt; UIKit.UIOffset" Usage="uISegmentedControl.ContentPositionAdjustment (leftCenterRightOrAlone, barMetrics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("contentPositionAdjustmentForSegmentType:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftCenterRightOrAlone" Type="UIKit.UISegmentedControlSegment" />
        <Parameter Name="barMetrics" Type="UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="leftCenterRightOrAlone">The segment to return the offset for.</param>
        <param name="barMetrics">The bar metrics to return the offset for.</param>
        <summary>Returns the offset for the content of a given segment for the specified bar metrics.</summary>
        <returns>The content offset for the segment.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property and the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UISegmentedControlStyle ControlStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UISegmentedControlStyle ControlStyle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISegmentedControl.ControlStyle" />
      <MemberSignature Language="F#" Value="member this.ControlStyle : UIKit.UISegmentedControlStyle with get, set" Usage="UIKit.UISegmentedControl.ControlStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, "The 'SegmentedControlStyle' property no longer has any effect.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("segmentedControlStyle")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, "The 'SegmentedControlStyle' property no longer has any effect.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSegmentedControlStyle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, "The 'SegmentedControlStyle' property no longer has any effect.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UISegmentedControlStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property. The 'SegmentedControlStyle' property no longer has any effect.</summary>
        <value>
        </value>
        <remarks>Allows changing the style of a segmented control to a value from the <see cref="T:UIKit.UISegmentedControlStyle" /> enumeration.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DividerImageForLeftSegmentStaterightSegmentStatebarMetrics">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage DividerImageForLeftSegmentStaterightSegmentStatebarMetrics (UIKit.UIControlState leftState, UIKit.UIControlState rightState, UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage DividerImageForLeftSegmentStaterightSegmentStatebarMetrics(valuetype UIKit.UIControlState leftState, valuetype UIKit.UIControlState rightState, valuetype UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.DividerImageForLeftSegmentStaterightSegmentStatebarMetrics(UIKit.UIControlState,UIKit.UIControlState,UIKit.UIBarMetrics)" />
      <MemberSignature Language="F#" Value="abstract member DividerImageForLeftSegmentStaterightSegmentStatebarMetrics : UIKit.UIControlState * UIKit.UIControlState * UIKit.UIBarMetrics -&gt; UIKit.UIImage&#xA;override this.DividerImageForLeftSegmentStaterightSegmentStatebarMetrics : UIKit.UIControlState * UIKit.UIControlState * UIKit.UIBarMetrics -&gt; UIKit.UIImage" Usage="uISegmentedControl.DividerImageForLeftSegmentStaterightSegmentStatebarMetrics (leftState, rightState, barMetrics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dividerImageForLeftSegmentState:rightSegmentState:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftState" Type="UIKit.UIControlState" />
        <Parameter Name="rightState" Type="UIKit.UIControlState" />
        <Parameter Name="barMetrics" Type="UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="leftState">The left segment's control state to return the divider image for.</param>
        <param name="rightState">To right segments control state to return the divider image for.</param>
        <param name="barMetrics">The bar metrics to return the divider image for.</param>
        <summary>Retrieves the divider image between the segments.</summary>
        <returns>The divider image for the specified segmnts control states and bar metrics.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property and the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UISegmentedControl.UISegmentedControlAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISegmentedControl/UISegmentedControlAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UISegmentedControl.UISegmentedControlAppearance" Usage="UIKit.UISegmentedControl.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISegmentedControl+UISegmentedControlAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UISegmentedControl.UISegmentedControlAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISegmentedControl/UISegmentedControlAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UISegmentedControl.UISegmentedControlAppearance" Usage="UIKit.UISegmentedControl.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISegmentedControl+UISegmentedControlAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" /> when found in the <paramref name="conatiners" /> containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UISegmentedControl.UISegmentedControlAppearance GetAppearance&lt;T&gt; () where T : UIKit.UISegmentedControl;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISegmentedControl/UISegmentedControlAppearance GetAppearance&lt;(class UIKit.UISegmentedControl) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; UIKit.UISegmentedControl.UISegmentedControlAppearance (requires 'T :&gt; UIKit.UISegmentedControl)" Usage="UIKit.UISegmentedControl.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISegmentedControl+UISegmentedControlAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UISegmentedControl.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UISegmentedControl.UISegmentedControlAppearance" /> for the subclass of UISegmentedControl.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property, or the <see cref="M:UIKit.UISegmentedControlAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UISegmentedControl.GetAppearance<MyUISegmentedControlSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UISegmentedControl.UISegmentedControlAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : UIKit.UISegmentedControl;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISegmentedControl/UISegmentedControlAppearance GetAppearance&lt;(class UIKit.UISegmentedControl) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UISegmentedControl.UISegmentedControlAppearance (requires 'T :&gt; UIKit.UISegmentedControl)" Usage="UIKit.UISegmentedControl.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISegmentedControl+UISegmentedControlAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UISegmentedControl</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UISegmentedControl.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UISegmentedControl.UISegmentedControlAppearance" /> for the subclass of UISegmentedControl.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UISegmentedControl.</para>
          <para>Unlike the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property, or the <see cref="M:UIKit.UISegmentedControlAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UISegmentedControl.GetAppearance<MyUISegmentedControlSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UISegmentedControl.UISegmentedControlAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : UIKit.UISegmentedControl;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UISegmentedControl/UISegmentedControlAppearance GetAppearance&lt;(class UIKit.UISegmentedControl) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UISegmentedControl.UISegmentedControlAppearance (requires 'T :&gt; UIKit.UISegmentedControl)" Usage="UIKit.UISegmentedControl.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UISegmentedControl+UISegmentedControlAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UISegmentedControl</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UISegmentedControl.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UISegmentedControl.UISegmentedControlAppearance" /> for the subclass of UISegmentedControl that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UISegmentedControl that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property, or the <see cref="M:UIKit.UISegmentedControlAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UISegmentedControl.GetAppearance<MyUISegmentedControlSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage GetBackgroundImage (UIKit.UIControlState state, UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage GetBackgroundImage(valuetype UIKit.UIControlState state, valuetype UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.GetBackgroundImage(UIKit.UIControlState,UIKit.UIBarMetrics)" />
      <MemberSignature Language="F#" Value="abstract member GetBackgroundImage : UIKit.UIControlState * UIKit.UIBarMetrics -&gt; UIKit.UIImage&#xA;override this.GetBackgroundImage : UIKit.UIControlState * UIKit.UIBarMetrics -&gt; UIKit.UIImage" Usage="uISegmentedControl.GetBackgroundImage (state, barMetrics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("backgroundImageForState:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
        <Parameter Name="barMetrics" Type="UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <param name="barMetrics">To be added.</param>
        <summary>Used to retrieve the background image for the segmented control for a specified control state and bar metrics.</summary>
        <returns>The <see cref="T:UIKit.UIImage" /> used for the background image.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property and the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContentOffset">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize GetContentOffset (nint segment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGSize GetContentOffset(valuetype System.nint segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.GetContentOffset(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetContentOffset : nint -&gt; CoreGraphics.CGSize&#xA;override this.GetContentOffset : nint -&gt; CoreGraphics.CGSize" Usage="uISegmentedControl.GetContentOffset segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("contentOffsetForSegmentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="segment">The index of the segment to retrieve the content offset for.</param>
        <summary>The offset used for drawing content in a specified segment.</summary>
        <returns>The content offset.</returns>
        <remarks>The content offset is used for both text and image drawing within a segment.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTitleTextAttributes">
      <MemberSignature Language="C#" Value="public UIKit.UITextAttributes GetTitleTextAttributes (UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UITextAttributes GetTitleTextAttributes(valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.GetTitleTextAttributes(UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="member this.GetTitleTextAttributes : UIKit.UIControlState -&gt; UIKit.UITextAttributes" Usage="uISegmentedControl.GetTitleTextAttributes state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UITextAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="state">The state that you want to retrieve the rendering text attributes from.</param>
        <summary>Returns the current rendering text attributes for the requested state.</summary>
        <returns>
        </returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property and the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageAt">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage ImageAt (nint segment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage ImageAt(valuetype System.nint segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.ImageAt(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member ImageAt : nint -&gt; UIKit.UIImage&#xA;override this.ImageAt : nint -&gt; UIKit.UIImage" Usage="uISegmentedControl.ImageAt segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageForSegmentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="segment">The segment to return the image for.</param>
        <summary>Retrieves the image used in a particular segment</summary>
        <returns>The image for the specified segment.</returns>
        <remarks>The segment indices start at 0. If a segment index is specified beyond the upper range of segments in the control, the image of the segment at the upper range will be returned.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertSegment">
      <MemberSignature Language="C#" Value="public virtual void InsertSegment (string title, nint pos, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertSegment(string title, valuetype System.nint pos, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.InsertSegment(System.String,System.nint,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member InsertSegment : string * nint * bool -&gt; unit&#xA;override this.InsertSegment : string * nint * bool -&gt; unit" Usage="uISegmentedControl.InsertSegment (title, pos, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("insertSegmentWithTitle:atIndex:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="pos" Type="System.nint" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="title">To be added.</param>
        <param name="pos">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Inserts a segment named <param name="title" /> at <param name="pos" />, optionally animating the insert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertSegment">
      <MemberSignature Language="C#" Value="public virtual void InsertSegment (UIKit.UIImage image, nint pos, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertSegment(class UIKit.UIImage image, valuetype System.nint pos, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.InsertSegment(UIKit.UIImage,System.nint,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member InsertSegment : UIKit.UIImage * nint * bool -&gt; unit&#xA;override this.InsertSegment : UIKit.UIImage * nint * bool -&gt; unit" Usage="uISegmentedControl.InsertSegment (image, pos, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("insertSegmentWithImage:atIndex:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
        <Parameter Name="pos" Type="System.nint" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="pos">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Inserts a segment with <param name="image" /> as its content at <param name="pos" />, optionally animating the insert.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnabled">
      <MemberSignature Language="C#" Value="public virtual bool IsEnabled (nint segment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsEnabled(valuetype System.nint segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.IsEnabled(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member IsEnabled : nint -&gt; bool&#xA;override this.IsEnabled : nint -&gt; bool" Usage="uISegmentedControl.IsEnabled segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("isEnabledForSegmentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="segment">The index of the segment.</param>
        <summary>Returns if a particular segment is enabled.</summary>
        <returns>Returns true if the segment is enabled.</returns>
        <remarks>Segments are enabled by default.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Momentary">
      <MemberSignature Language="C#" Value="public virtual bool Momentary { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Momentary" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISegmentedControl.Momentary" />
      <MemberSignature Language="F#" Value="member this.Momentary : bool with get, set" Usage="UIKit.UISegmentedControl.Momentary" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isMomentary")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMomentary:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines if segments show the selected state.</summary>
        <value>
        </value>
        <remarks>Default is false, which means the segments will show their selected state.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfSegments">
      <MemberSignature Language="C#" Value="public virtual nint NumberOfSegments { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint NumberOfSegments" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISegmentedControl.NumberOfSegments" />
      <MemberSignature Language="F#" Value="member this.NumberOfSegments : nint" Usage="UIKit.UISegmentedControl.NumberOfSegments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("numberOfSegments")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the number of segments in the segmented control.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAllSegments">
      <MemberSignature Language="C#" Value="public virtual void RemoveAllSegments ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAllSegments() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.RemoveAllSegments" />
      <MemberSignature Language="F#" Value="abstract member RemoveAllSegments : unit -&gt; unit&#xA;override this.RemoveAllSegments : unit -&gt; unit" Usage="uISegmentedControl.RemoveAllSegments " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeAllSegments")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Removes all segments</summary>
        <remarks>This clears the segments control.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSegmentAtIndex">
      <MemberSignature Language="C#" Value="public virtual void RemoveSegmentAtIndex (nint segment, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveSegmentAtIndex(valuetype System.nint segment, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.RemoveSegmentAtIndex(System.nint,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RemoveSegmentAtIndex : nint * bool -&gt; unit&#xA;override this.RemoveSegmentAtIndex : nint * bool -&gt; unit" Usage="uISegmentedControl.RemoveSegmentAtIndex (segment, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeSegmentAtIndex:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.nint" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="segment">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Removes the segment at the index <param name="segment" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SegmentWidth">
      <MemberSignature Language="C#" Value="public virtual nfloat SegmentWidth (nint segment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat SegmentWidth(valuetype System.nint segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.SegmentWidth(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SegmentWidth : nint -&gt; nfloat&#xA;override this.SegmentWidth : nint -&gt; nfloat" Usage="uISegmentedControl.SegmentWidth segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("widthForSegmentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="segment">The index of the segment.</param>
        <summary>Returns the with of a particular segment.</summary>
        <returns>The segment width.</returns>
        <remarks>If the value is 0.0, the segmented control will automatically sizes the segment.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedSegment">
      <MemberSignature Language="C#" Value="public virtual nint SelectedSegment { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint SelectedSegment" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISegmentedControl.SelectedSegment" />
      <MemberSignature Language="F#" Value="member this.SelectedSegment : nint with get, set" Usage="UIKit.UISegmentedControl.SelectedSegment" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("selectedSegmentIndex")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSelectedSegmentIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The index of the selected segment.</summary>
        <value>
        </value>
        <remarks>Set to -1 to turn off the currently selected segment. If <see cref="P:UIKit.UISegmentedControl.Momentary" /> == true the SelectedSegment property is ignored.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundImage (UIKit.UIImage backgroundImage, UIKit.UIControlState state, UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundImage(class UIKit.UIImage backgroundImage, valuetype UIKit.UIControlState state, valuetype UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.SetBackgroundImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIBarMetrics)" />
      <MemberSignature Language="F#" Value="abstract member SetBackgroundImage : UIKit.UIImage * UIKit.UIControlState * UIKit.UIBarMetrics -&gt; unit&#xA;override this.SetBackgroundImage : UIKit.UIImage * UIKit.UIControlState * UIKit.UIBarMetrics -&gt; unit" Usage="uISegmentedControl.SetBackgroundImage (backgroundImage, state, barMetrics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setBackgroundImage:forState:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backgroundImage" Type="UIKit.UIImage" />
        <Parameter Name="state" Type="UIKit.UIControlState" />
        <Parameter Name="barMetrics" Type="UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="backgroundImage">
          <para>The background image to set.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="state">The control state to set the background image for</param>
        <param name="barMetrics">The bar metrics to set the background image for.</param>
        <summary>Set the background image for the segmented control.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property and the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContentOffset">
      <MemberSignature Language="C#" Value="public virtual void SetContentOffset (CoreGraphics.CGSize offset, nint segment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentOffset(valuetype CoreGraphics.CGSize offset, valuetype System.nint segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.SetContentOffset(CoreGraphics.CGSize,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SetContentOffset : CoreGraphics.CGSize * nint -&gt; unit&#xA;override this.SetContentOffset : CoreGraphics.CGSize * nint -&gt; unit" Usage="uISegmentedControl.SetContentOffset (offset, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setContentOffset:forSegmentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offset" Type="CoreGraphics.CGSize" />
        <Parameter Name="segment" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="offset">The content offset.</param>
        <param name="segment">The segment index.</param>
        <summary>Sets the content offset for a specified segment.</summary>
        <remarks>The content offset is used when drawing both text and images in the segment.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContentPositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual void SetContentPositionAdjustment (UIKit.UIOffset adjustment, UIKit.UISegmentedControlSegment leftCenterRightOrAlone, UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentPositionAdjustment(valuetype UIKit.UIOffset adjustment, valuetype UIKit.UISegmentedControlSegment leftCenterRightOrAlone, valuetype UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.SetContentPositionAdjustment(UIKit.UIOffset,UIKit.UISegmentedControlSegment,UIKit.UIBarMetrics)" />
      <MemberSignature Language="F#" Value="abstract member SetContentPositionAdjustment : UIKit.UIOffset * UIKit.UISegmentedControlSegment * UIKit.UIBarMetrics -&gt; unit&#xA;override this.SetContentPositionAdjustment : UIKit.UIOffset * UIKit.UISegmentedControlSegment * UIKit.UIBarMetrics -&gt; unit" Usage="uISegmentedControl.SetContentPositionAdjustment (adjustment, leftCenterRightOrAlone, barMetrics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setContentPositionAdjustment:forSegmentType:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adjustment" Type="UIKit.UIOffset" />
        <Parameter Name="leftCenterRightOrAlone" Type="UIKit.UISegmentedControlSegment" />
        <Parameter Name="barMetrics" Type="UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="adjustment">The <see cref="T:UIKit.UIOffset" /> to set.</param>
        <param name="leftCenterRightOrAlone">The segment identifier to apply the offset to.</param>
        <param name="barMetrics">To bar metrics to set the postion offset for.</param>
        <summary>Sets the offset for the content of a given segment for the specified bar metrics.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property and the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDividerImage">
      <MemberSignature Language="C#" Value="public virtual void SetDividerImage (UIKit.UIImage dividerImage, UIKit.UIControlState leftSegmentState, UIKit.UIControlState rightSegmentState, UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDividerImage(class UIKit.UIImage dividerImage, valuetype UIKit.UIControlState leftSegmentState, valuetype UIKit.UIControlState rightSegmentState, valuetype UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.SetDividerImage(UIKit.UIImage,UIKit.UIControlState,UIKit.UIControlState,UIKit.UIBarMetrics)" />
      <MemberSignature Language="F#" Value="abstract member SetDividerImage : UIKit.UIImage * UIKit.UIControlState * UIKit.UIControlState * UIKit.UIBarMetrics -&gt; unit&#xA;override this.SetDividerImage : UIKit.UIImage * UIKit.UIControlState * UIKit.UIControlState * UIKit.UIBarMetrics -&gt; unit" Usage="uISegmentedControl.SetDividerImage (dividerImage, leftSegmentState, rightSegmentState, barMetrics)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setDividerImage:forLeftSegmentState:rightSegmentState:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dividerImage" Type="UIKit.UIImage" />
        <Parameter Name="leftSegmentState" Type="UIKit.UIControlState" />
        <Parameter Name="rightSegmentState" Type="UIKit.UIControlState" />
        <Parameter Name="barMetrics" Type="UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="dividerImage">
          <para>To image to use for the divider.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="leftSegmentState">The left segment state.</param>
        <param name="rightSegmentState">The right segment state.</param>
        <param name="barMetrics">The bar metrics.</param>
        <summary>Sets the divider image for the specified segment states and bar metrics..</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property and the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetEnabled">
      <MemberSignature Language="C#" Value="public virtual void SetEnabled (bool enabled, nint segment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetEnabled(bool enabled, valuetype System.nint segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.SetEnabled(System.Boolean,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SetEnabled : bool * nint -&gt; unit&#xA;override this.SetEnabled : bool * nint -&gt; unit" Usage="uISegmentedControl.SetEnabled (enabled, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setEnabled:forSegmentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="enabled" Type="System.Boolean" />
        <Parameter Name="segment" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="enabled">Boolean indicating if a segment is should be enabled.</param>
        <param name="segment">The index of the segment.</param>
        <summary>Enables or disables a given segment.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetImage">
      <MemberSignature Language="C#" Value="public virtual void SetImage (UIKit.UIImage image, nint segment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetImage(class UIKit.UIImage image, valuetype System.nint segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.SetImage(UIKit.UIImage,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SetImage : UIKit.UIImage * nint -&gt; unit&#xA;override this.SetImage : UIKit.UIImage * nint -&gt; unit" Usage="uISegmentedControl.SetImage (image, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setImage:forSegmentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="UIKit.UIImage" />
        <Parameter Name="segment" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="image">The image to set.</param>
        <param name="segment">The segment index.</param>
        <summary>Set an image for a particular segment.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTitle">
      <MemberSignature Language="C#" Value="public virtual void SetTitle (string title, nint segment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitle(string title, valuetype System.nint segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.SetTitle(System.String,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SetTitle : string * nint -&gt; unit&#xA;override this.SetTitle : string * nint -&gt; unit" Usage="uISegmentedControl.SetTitle (title, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTitle:forSegmentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="segment" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="title">The title to set.</param>
        <param name="segment">The segment index.</param>
        <summary>Set a title for a particular segment.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTitleTextAttributes">
      <MemberSignature Language="C#" Value="public void SetTitleTextAttributes (UIKit.UITextAttributes attributes, UIKit.UIControlState state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetTitleTextAttributes(class UIKit.UITextAttributes attributes, valuetype UIKit.UIControlState state) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.SetTitleTextAttributes(UIKit.UITextAttributes,UIKit.UIControlState)" />
      <MemberSignature Language="F#" Value="member this.SetTitleTextAttributes : UIKit.UITextAttributes * UIKit.UIControlState -&gt; unit" Usage="uISegmentedControl.SetTitleTextAttributes (attributes, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributes" Type="UIKit.UITextAttributes" />
        <Parameter Name="state" Type="UIKit.UIControlState" />
      </Parameters>
      <Docs>
        <param name="attributes">rendering attributes for the text.</param>
        <param name="state">The state to alter</param>
        <summary>Sets the rendering text attributes for a specific state in the control.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UISegmentedControl.Appearance" /> property and the <see cref="M:UIKit.UISegmentedControl.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetWidth">
      <MemberSignature Language="C#" Value="public virtual void SetWidth (nfloat width, nint segment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetWidth(valuetype System.nfloat width, valuetype System.nint segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.SetWidth(System.nfloat,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SetWidth : nfloat * nint -&gt; unit&#xA;override this.SetWidth : nfloat * nint -&gt; unit" Usage="uISegmentedControl.SetWidth (width, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setWidth:forSegmentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.nfloat" />
        <Parameter Name="segment" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="width">The segment width to set..</param>
        <param name="segment">The segment index..</param>
        <summary>Sets the width for a particular segment.</summary>
        <remarks>The default value of 0.0 will cause the segment to be automatically sized.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpringLoaded">
      <MemberSignature Language="C#" Value="public virtual bool SpringLoaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SpringLoaded" />
      <MemberSignature Language="DocId" Value="P:UIKit.UISegmentedControl.SpringLoaded" />
      <MemberSignature Language="F#" Value="member this.SpringLoaded : bool with get, set" Usage="UIKit.UISegmentedControl.SpringLoaded" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUISpringLoadedInteractionSupporting.SpringLoaded</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isSpringLoaded")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSpringLoaded:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs tool="CopiedFromAncestor">
        <summary>Gets or sets a Boolean value that controls whether the object participates in spring-loaded interactions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleAt">
      <MemberSignature Language="C#" Value="public virtual string TitleAt (nint segment);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TitleAt(valuetype System.nint segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UISegmentedControl.TitleAt(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member TitleAt : nint -&gt; string&#xA;override this.TitleAt : nint -&gt; string" Usage="uISegmentedControl.TitleAt segment" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("titleForSegmentAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="segment" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="segment">The segment index to return the title for.</param>
        <summary>Allows the title for a particular segment to be retrieved.</summary>
        <returns>The title for a given segment</returns>
        <remarks>Retuns null if a title has not been set.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
