<Type Name="IUICollectionViewDataSource" FullName="UIKit.IUICollectionViewDataSource">
  <TypeSignature Language="C#" Value="public interface IUICollectionViewDataSource : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUICollectionViewDataSource implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:UIKit.IUICollectionViewDataSource" />
  <TypeSignature Language="F#" Value="type IUICollectionViewDataSource = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="UICollectionViewDataSource", WrapperType=typeof(UIKit.UICollectionViewDataSourceWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetItemsCount", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(System.nint) }, ReturnType=typeof(System.nint), Selector="collectionView:numberOfItemsInSection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetCell", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(UIKit.UICollectionViewCell), Selector="collectionView:cellForItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="NumberOfSections", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView) }, ReturnType=typeof(System.nint), Selector="numberOfSectionsInCollectionView:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetViewForSupplementaryElement", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSString), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(UIKit.UICollectionReusableView), Selector="collectionView:viewForSupplementaryElementOfKind:atIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CanMoveItem", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.Boolean), Selector="collectionView:canMoveItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="MoveItem", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath), typeof(Foundation.NSIndexPath) }, Selector="collectionView:moveItemAtIndexPath:toIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetIndexTitles", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView) }, ReturnType=typeof(System.String[]), Selector="indexTitlesForCollectionView:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetIndexPath", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(System.String), typeof(System.nint) }, ReturnType=typeof(Foundation.NSIndexPath), Selector="collectionView:indexPathForIndexTitle:atIndex:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:UIKit.UICollectionViewDataSource" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:UIKit.UICollectionViewDataSource" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:UIKit.UICollectionViewDataSource" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:UIKit.UICollectionViewDataSource_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="GetCell">
      <MemberSignature Language="C#" Value="public UIKit.UICollectionViewCell GetCell (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewCell GetCell(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUICollectionViewDataSource.GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetCell : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewCell" Usage="iUICollectionViewDataSource.GetCell (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("collectionView:cellForItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <param name="indexPath">To be added.</param>
        <summary>Gets a cell.</summary>
        <returns>A collection view cell.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsCount">
      <MemberSignature Language="C#" Value="public nint GetItemsCount (UIKit.UICollectionView collectionView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetItemsCount(class UIKit.UICollectionView collectionView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUICollectionViewDataSource.GetItemsCount(UIKit.UICollectionView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsCount : UIKit.UICollectionView * nint -&gt; nint" Usage="iUICollectionViewDataSource.GetItemsCount (collectionView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("collectionView:numberOfItemsInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <param name="section">To be added.</param>
        <summary>The number of items in the specified section.</summary>
        <returns>Number of rows in the specified section.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
