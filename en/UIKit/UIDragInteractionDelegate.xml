<Type Name="UIDragInteractionDelegate" FullName="UIKit.UIDragInteractionDelegate">
  <TypeSignature Language="C#" Value="public abstract class UIDragInteractionDelegate : Foundation.NSObject, IDisposable, UIKit.IUIDragInteractionDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UIDragInteractionDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIDragInteractionDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIDragInteractionDelegate" />
  <TypeSignature Language="F#" Value="type UIDragInteractionDelegate = class&#xA;    inherit NSObject&#xA;    interface IUIDragInteractionDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIDragInteractionDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIDragInteractionDelegate", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate object for drag interaction events.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIDragInteractionDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIDragInteractionDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDragInteractionDelegate : Foundation.NSObjectFlag -&gt; UIKit.UIDragInteractionDelegate" Usage="new UIKit.UIDragInteractionDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIDragInteractionDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDragInteractionDelegate : nativeint -&gt; UIKit.UIDragInteractionDelegate" Usage="new UIKit.UIDragInteractionDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsForAddingToSession">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDragItem[] GetItemsForAddingToSession (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session, CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIDragItem[] GetItemsForAddingToSession(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session, valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.GetItemsForAddingToSession(UIKit.UIDragInteraction,UIKit.IUIDragSession,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsForAddingToSession : UIKit.UIDragInteraction * UIKit.IUIDragSession * CoreGraphics.CGPoint -&gt; UIKit.UIDragItem[]&#xA;override this.GetItemsForAddingToSession : UIKit.UIDragInteraction * UIKit.IUIDragSession * CoreGraphics.CGPoint -&gt; UIKit.UIDragItem[]" Usage="uIDragInteractionDelegate.GetItemsForAddingToSession (interaction, session, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:itemsForAddingToSession:withTouchAtPoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDragItem[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session to which to add items.</param>
        <param name="point">The touch location in the view's coordinate system.</param>
        <summary>Method that is called to add drag items to a drag session in response to a gesture by the user.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsForBeginningSession">
      <MemberSignature Language="C#" Value="public abstract UIKit.UIDragItem[] GetItemsForBeginningSession (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIDragItem[] GetItemsForBeginningSession(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.GetItemsForBeginningSession(UIKit.UIDragInteraction,UIKit.IUIDragSession)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsForBeginningSession : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; UIKit.UIDragItem[]" Usage="uIDragInteractionDelegate.GetItemsForBeginningSession (interaction, session)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIDragInteractionDelegate.GetItemsForBeginningSession(UIKit.UIDragInteraction,UIKit.IUIDragSession)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:itemsForBeginningSession:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDragItem[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The drag session to add initial items to.</param>
        <summary>Method that is called to get items that will be present in the drag session from the beginning.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreviewForCancellingItem">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITargetedDragPreview GetPreviewForCancellingItem (UIKit.UIDragInteraction interaction, UIKit.UIDragItem item, UIKit.UITargetedDragPreview defaultPreview);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITargetedDragPreview GetPreviewForCancellingItem(class UIKit.UIDragInteraction interaction, class UIKit.UIDragItem item, class UIKit.UITargetedDragPreview defaultPreview) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.GetPreviewForCancellingItem(UIKit.UIDragInteraction,UIKit.UIDragItem,UIKit.UITargetedDragPreview)" />
      <MemberSignature Language="F#" Value="abstract member GetPreviewForCancellingItem : UIKit.UIDragInteraction * UIKit.UIDragItem * UIKit.UITargetedDragPreview -&gt; UIKit.UITargetedDragPreview&#xA;override this.GetPreviewForCancellingItem : UIKit.UIDragInteraction * UIKit.UIDragItem * UIKit.UITargetedDragPreview -&gt; UIKit.UITargetedDragPreview" Usage="uIDragInteractionDelegate.GetPreviewForCancellingItem (interaction, item, defaultPreview)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:previewForCancellingItem:withDefault:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITargetedDragPreview</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="item" Type="UIKit.UIDragItem" />
        <Parameter Name="defaultPreview" Type="UIKit.UITargetedDragPreview" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="item">The item for which to get a preview.</param>
        <param name="defaultPreview">The default drag preview for the item.</param>
        <summary>Method that is called for each visible item in a drag session when the user cancels the drag session.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreviewForLiftingItem">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITargetedDragPreview GetPreviewForLiftingItem (UIKit.UIDragInteraction interaction, UIKit.UIDragItem item, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITargetedDragPreview GetPreviewForLiftingItem(class UIKit.UIDragInteraction interaction, class UIKit.UIDragItem item, class UIKit.IUIDragSession session) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.GetPreviewForLiftingItem(UIKit.UIDragInteraction,UIKit.UIDragItem,UIKit.IUIDragSession)" />
      <MemberSignature Language="F#" Value="abstract member GetPreviewForLiftingItem : UIKit.UIDragInteraction * UIKit.UIDragItem * UIKit.IUIDragSession -&gt; UIKit.UITargetedDragPreview&#xA;override this.GetPreviewForLiftingItem : UIKit.UIDragInteraction * UIKit.UIDragItem * UIKit.IUIDragSession -&gt; UIKit.UITargetedDragPreview" Usage="uIDragInteractionDelegate.GetPreviewForLiftingItem (interaction, item, session)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:previewForLiftingItem:session:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITargetedDragPreview</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="item" Type="UIKit.UIDragItem" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="item">The item for which to get a preview.</param>
        <param name="session">The drag session.</param>
        <summary>Method that is called to get a targeted drag preview for animating the lift.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSessionForAddingItems">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIDragSession GetSessionForAddingItems (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession[] sessions, CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.IUIDragSession GetSessionForAddingItems(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession[] sessions, valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.GetSessionForAddingItems(UIKit.UIDragInteraction,UIKit.IUIDragSession[],CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetSessionForAddingItems : UIKit.UIDragInteraction * UIKit.IUIDragSession[] * CoreGraphics.CGPoint -&gt; UIKit.IUIDragSession&#xA;override this.GetSessionForAddingItems : UIKit.UIDragInteraction * UIKit.IUIDragSession[] * CoreGraphics.CGPoint -&gt; UIKit.IUIDragSession" Usage="uIDragInteractionDelegate.GetSessionForAddingItems (interaction, sessions, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:sessionForAddingItems:withTouchAtPoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIDragSession</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="sessions" Type="UIKit.IUIDragSession[]" />
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="sessions">The sessions from which to choose.</param>
        <param name="point">The touch point in the view's coordinate system.</param>
        <summary>Method that is called to disambiguate to which session to add items when multiple sessions are active.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefersFullSizePreviews">
      <MemberSignature Language="C#" Value="public virtual bool PrefersFullSizePreviews (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool PrefersFullSizePreviews(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.PrefersFullSizePreviews(UIKit.UIDragInteraction,UIKit.IUIDragSession)" />
      <MemberSignature Language="F#" Value="abstract member PrefersFullSizePreviews : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; bool&#xA;override this.PrefersFullSizePreviews : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; bool" Usage="uIDragInteractionDelegate.PrefersFullSizePreviews (interaction, session)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:prefersFullSizePreviewsForSession:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session to query.</param>
        <summary>Method that is called to find out whether the application prefers full size previews in the source view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionAllowsMoveOperation">
      <MemberSignature Language="C#" Value="public virtual bool SessionAllowsMoveOperation (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SessionAllowsMoveOperation(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.SessionAllowsMoveOperation(UIKit.UIDragInteraction,UIKit.IUIDragSession)" />
      <MemberSignature Language="F#" Value="abstract member SessionAllowsMoveOperation : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; bool&#xA;override this.SessionAllowsMoveOperation : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; bool" Usage="uIDragInteractionDelegate.SessionAllowsMoveOperation (interaction, session)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:sessionAllowsMoveOperation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session to query.</param>
        <summary>Method that is called to find out if the session allows items to be moved, instead of copied.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionDidEnd">
      <MemberSignature Language="C#" Value="public virtual void SessionDidEnd (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session, UIKit.UIDropOperation operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SessionDidEnd(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session, valuetype UIKit.UIDropOperation operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.SessionDidEnd(UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDropOperation)" />
      <MemberSignature Language="F#" Value="abstract member SessionDidEnd : UIKit.UIDragInteraction * UIKit.IUIDragSession * UIKit.UIDropOperation -&gt; unit&#xA;override this.SessionDidEnd : UIKit.UIDragInteraction * UIKit.IUIDragSession * UIKit.UIDropOperation -&gt; unit" Usage="uIDragInteractionDelegate.SessionDidEnd (interaction, session, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:session:didEndWithOperation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
        <Parameter Name="operation" Type="UIKit.UIDropOperation" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session that ended.</param>
        <param name="operation">The resulting drag and drop operation.</param>
        <summary>Method that is called when the drag session ends.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionDidMove">
      <MemberSignature Language="C#" Value="public virtual void SessionDidMove (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SessionDidMove(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.SessionDidMove(UIKit.UIDragInteraction,UIKit.IUIDragSession)" />
      <MemberSignature Language="F#" Value="abstract member SessionDidMove : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; unit&#xA;override this.SessionDidMove : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; unit" Usage="uIDragInteractionDelegate.SessionDidMove (interaction, session)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:sessionDidMove:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The drag session.</param>
        <summary>Method that is called when the drag point moves.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionDidTransferItems">
      <MemberSignature Language="C#" Value="public virtual void SessionDidTransferItems (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SessionDidTransferItems(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.SessionDidTransferItems(UIKit.UIDragInteraction,UIKit.IUIDragSession)" />
      <MemberSignature Language="F#" Value="abstract member SessionDidTransferItems : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; unit&#xA;override this.SessionDidTransferItems : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; unit" Usage="uIDragInteractionDelegate.SessionDidTransferItems (interaction, session)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:sessionDidTransferItems:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session that ended and transferred the items.</param>
        <summary>Method that is called after the dropped items have been received.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionIsRestrictedToDraggingApplication">
      <MemberSignature Language="C#" Value="public virtual bool SessionIsRestrictedToDraggingApplication (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SessionIsRestrictedToDraggingApplication(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.SessionIsRestrictedToDraggingApplication(UIKit.UIDragInteraction,UIKit.IUIDragSession)" />
      <MemberSignature Language="F#" Value="abstract member SessionIsRestrictedToDraggingApplication : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; bool&#xA;override this.SessionIsRestrictedToDraggingApplication : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; bool" Usage="uIDragInteractionDelegate.SessionIsRestrictedToDraggingApplication (interaction, session)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:sessionIsRestrictedToDraggingApplication:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session to query.</param>
        <summary>Method that is called to find out if the application only supports drag and drop operations to and from itself.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionWillBegin">
      <MemberSignature Language="C#" Value="public virtual void SessionWillBegin (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SessionWillBegin(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.SessionWillBegin(UIKit.UIDragInteraction,UIKit.IUIDragSession)" />
      <MemberSignature Language="F#" Value="abstract member SessionWillBegin : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; unit&#xA;override this.SessionWillBegin : UIKit.UIDragInteraction * UIKit.IUIDragSession -&gt; unit" Usage="uIDragInteractionDelegate.SessionWillBegin (interaction, session)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:sessionWillBegin:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session that will begin.</param>
        <summary>Method that is called when a session is about to begin.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SessionWillEnd">
      <MemberSignature Language="C#" Value="public virtual void SessionWillEnd (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session, UIKit.UIDropOperation operation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SessionWillEnd(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session, valuetype UIKit.UIDropOperation operation) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.SessionWillEnd(UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDropOperation)" />
      <MemberSignature Language="F#" Value="abstract member SessionWillEnd : UIKit.UIDragInteraction * UIKit.IUIDragSession * UIKit.UIDropOperation -&gt; unit&#xA;override this.SessionWillEnd : UIKit.UIDragInteraction * UIKit.IUIDragSession * UIKit.UIDropOperation -&gt; unit" Usage="uIDragInteractionDelegate.SessionWillEnd (interaction, session, operation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:session:willEndWithOperation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
        <Parameter Name="operation" Type="UIKit.UIDropOperation" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session that will end.</param>
        <param name="operation">The operation that will end the session.</param>
        <summary>Method that is called when a session is about to end.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillAddItems">
      <MemberSignature Language="C#" Value="public virtual void WillAddItems (UIKit.UIDragInteraction interaction, UIKit.IUIDragSession session, UIKit.UIDragItem[] items, UIKit.UIDragInteraction addingInteraction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillAddItems(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragSession session, class UIKit.UIDragItem[] items, class UIKit.UIDragInteraction addingInteraction) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.WillAddItems(UIKit.UIDragInteraction,UIKit.IUIDragSession,UIKit.UIDragItem[],UIKit.UIDragInteraction)" />
      <MemberSignature Language="F#" Value="abstract member WillAddItems : UIKit.UIDragInteraction * UIKit.IUIDragSession * UIKit.UIDragItem[] * UIKit.UIDragInteraction -&gt; unit&#xA;override this.WillAddItems : UIKit.UIDragInteraction * UIKit.IUIDragSession * UIKit.UIDragItem[] * UIKit.UIDragInteraction -&gt; unit" Usage="uIDragInteractionDelegate.WillAddItems (interaction, session, items, addingInteraction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:session:willAddItems:forInteraction:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
        <Parameter Name="items" Type="UIKit.UIDragItem[]" />
        <Parameter Name="addingInteraction" Type="UIKit.UIDragInteraction" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="session">The session to which items will be added.</param>
        <param name="items">The items to add.</param>
        <param name="addingInteraction">The interaction that will add the items.</param>
        <summary>Method that is called when items are about to be added to the session.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillAnimateCancel">
      <MemberSignature Language="C#" Value="public virtual void WillAnimateCancel (UIKit.UIDragInteraction interaction, UIKit.UIDragItem item, UIKit.IUIDragAnimating animator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillAnimateCancel(class UIKit.UIDragInteraction interaction, class UIKit.UIDragItem item, class UIKit.IUIDragAnimating animator) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.WillAnimateCancel(UIKit.UIDragInteraction,UIKit.UIDragItem,UIKit.IUIDragAnimating)" />
      <MemberSignature Language="F#" Value="abstract member WillAnimateCancel : UIKit.UIDragInteraction * UIKit.UIDragItem * UIKit.IUIDragAnimating -&gt; unit&#xA;override this.WillAnimateCancel : UIKit.UIDragInteraction * UIKit.UIDragItem * UIKit.IUIDragAnimating -&gt; unit" Usage="uIDragInteractionDelegate.WillAnimateCancel (interaction, item, animator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:item:willAnimateCancelWithAnimator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="item" Type="UIKit.UIDragItem" />
        <Parameter Name="animator" Type="UIKit.IUIDragAnimating" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="item">The item whose cancellation will be animated.</param>
        <param name="animator">An animator to run custom parallel animations and in which the developer may optionally add a completion handler.</param>
        <summary>Method that is called before the animation of each item in a cancellation begins.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillAnimateLift">
      <MemberSignature Language="C#" Value="public virtual void WillAnimateLift (UIKit.UIDragInteraction interaction, UIKit.IUIDragAnimating animator, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillAnimateLift(class UIKit.UIDragInteraction interaction, class UIKit.IUIDragAnimating animator, class UIKit.IUIDragSession session) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDragInteractionDelegate.WillAnimateLift(UIKit.UIDragInteraction,UIKit.IUIDragAnimating,UIKit.IUIDragSession)" />
      <MemberSignature Language="F#" Value="abstract member WillAnimateLift : UIKit.UIDragInteraction * UIKit.IUIDragAnimating * UIKit.IUIDragSession -&gt; unit&#xA;override this.WillAnimateLift : UIKit.UIDragInteraction * UIKit.IUIDragAnimating * UIKit.IUIDragSession -&gt; unit" Usage="uIDragInteractionDelegate.WillAnimateLift (interaction, animator, session)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dragInteraction:willAnimateLiftWithAnimator:session:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interaction" Type="UIKit.UIDragInteraction" />
        <Parameter Name="animator" Type="UIKit.IUIDragAnimating" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="interaction">The interaction that is making the request.</param>
        <param name="animator">An animator to run custom parallel animations and in which the developer may optionally add a completion handler.</param>
        <param name="session">The session.</param>
        <summary>Method that is called before each item with a lift preview is about to lift.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
