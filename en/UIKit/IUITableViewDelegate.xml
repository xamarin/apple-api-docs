<Type Name="IUITableViewDelegate" FullName="UIKit.IUITableViewDelegate">
  <TypeSignature Language="C#" Value="public interface IUITableViewDelegate : IDisposable, UIKit.IUIScrollViewDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUITableViewDelegate implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIScrollViewDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.IUITableViewDelegate" />
  <TypeSignature Language="F#" Value="type IUITableViewDelegate = interface&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUIScrollViewDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIScrollViewDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol(Name="UITableViewDelegate", WrapperType=typeof(UIKit.UITableViewDelegateWrapper))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDisplay", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:willDisplayCell:forRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetHeightForRow", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.nfloat), Selector="tableView:heightForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetHeightForHeader", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.nfloat), Selector="tableView:heightForHeaderInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetHeightForFooter", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.nfloat), Selector="tableView:heightForFooterInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetViewForHeader", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UIView), Selector="tableView:viewForHeaderInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetViewForFooter", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UIView), Selector="tableView:viewForFooterInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="AccessoryForRow", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITableViewCellAccessory), Selector="tableView:accessoryTypeForRowWithIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="AccessoryButtonTapped", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:accessoryButtonTappedForRowWithIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillSelectRow", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Foundation.NSIndexPath), Selector="tableView:willSelectRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDeselectRow", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Foundation.NSIndexPath), Selector="tableView:willDeselectRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RowSelected", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:didSelectRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RowDeselected", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:didDeselectRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EditingStyleForRow", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITableViewCellEditingStyle), Selector="tableView:editingStyleForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="TitleForDeleteConfirmation", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.String), Selector="tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldIndentWhileEditing", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="tableView:shouldIndentWhileEditingRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillBeginEditing", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:willBeginEditingRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidEndEditing", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:didEndEditingRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CustomizeMoveTarget", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Foundation.NSIndexPath), Selector="tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="IndentationLevel", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.nint), Selector="tableView:indentationLevelForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldShowMenu", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="tableView:shouldShowMenuForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CanPerformAction", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="tableView:canPerformAction:forRowAtIndexPath:withSender:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PerformAction", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:performAction:forRowAtIndexPath:withSender:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDisplayHeaderView", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:willDisplayHeaderView:forSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDisplayFooterView", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:willDisplayFooterView:forSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CellDisplayingEnded", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:didEndDisplayingCell:forRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="HeaderViewDisplayingEnded", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:didEndDisplayingHeaderView:forSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="FooterViewDisplayingEnded", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:didEndDisplayingFooterView:forSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldHighlightRow", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="tableView:shouldHighlightRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RowHighlighted", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:didHighlightRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RowUnhighlighted", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:didUnhighlightRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EstimatedHeight", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.nfloat), Selector="tableView:estimatedHeightForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EstimatedHeightForHeader", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.nfloat), Selector="tableView:estimatedHeightForHeaderInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EstimatedHeightForFooter", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.nfloat), Selector="tableView:estimatedHeightForFooterInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EditActionsForRow", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITableViewRowAction[]), Selector="tableView:editActionsForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CanFocusRow", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="tableView:canFocusRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldUpdateFocus", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="tableView:shouldUpdateFocusInContext:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidUpdateFocus", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="tableView:didUpdateFocusInContext:withAnimationCoordinator:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetIndexPathForPreferredFocusedView", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Foundation.NSIndexPath), Selector="indexPathForPreferredFocusedViewInTableView:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetLeadingSwipeActionsConfiguration", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UISwipeActionsConfiguration), Selector="tableView:leadingSwipeActionsConfigurationForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetTrailingSwipeActionsConfiguration", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UISwipeActionsConfiguration), Selector="tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldSpringLoadRow", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="tableView:shouldSpringLoadRowAtIndexPath:withContext:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDisplay", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(UIKit.UITableViewCell), typeof(Foundation.NSIndexPath) }, Selector="tableView:willDisplayCell:forRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetHeightForRow", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.nfloat), Selector="tableView:heightForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetHeightForHeader", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(System.nint) }, ReturnType=typeof(System.nfloat), Selector="tableView:heightForHeaderInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetHeightForFooter", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(System.nint) }, ReturnType=typeof(System.nfloat), Selector="tableView:heightForFooterInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetViewForHeader", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(System.nint) }, ReturnType=typeof(UIKit.UIView), Selector="tableView:viewForHeaderInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetViewForFooter", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(System.nint) }, ReturnType=typeof(UIKit.UIView), Selector="tableView:viewForFooterInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="AccessoryForRow", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(UIKit.UITableViewCellAccessory), Selector="tableView:accessoryTypeForRowWithIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="AccessoryButtonTapped", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, Selector="tableView:accessoryButtonTappedForRowWithIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillSelectRow", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(Foundation.NSIndexPath), Selector="tableView:willSelectRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDeselectRow", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(Foundation.NSIndexPath), Selector="tableView:willDeselectRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RowSelected", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, Selector="tableView:didSelectRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RowDeselected", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, Selector="tableView:didDeselectRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EditingStyleForRow", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(UIKit.UITableViewCellEditingStyle), Selector="tableView:editingStyleForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="TitleForDeleteConfirmation", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.String), Selector="tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldIndentWhileEditing", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.Boolean), Selector="tableView:shouldIndentWhileEditingRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillBeginEditing", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, Selector="tableView:willBeginEditingRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidEndEditing", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, Selector="tableView:didEndEditingRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CustomizeMoveTarget", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(Foundation.NSIndexPath), Selector="tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="IndentationLevel", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.nint), Selector="tableView:indentationLevelForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldShowMenu", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.Boolean), Selector="tableView:shouldShowMenuForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CanPerformAction", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(ObjCRuntime.Selector), typeof(Foundation.NSIndexPath), typeof(Foundation.NSObject) }, ReturnType=typeof(System.Boolean), Selector="tableView:canPerformAction:forRowAtIndexPath:withSender:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PerformAction", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(ObjCRuntime.Selector), typeof(Foundation.NSIndexPath), typeof(Foundation.NSObject) }, Selector="tableView:performAction:forRowAtIndexPath:withSender:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDisplayHeaderView", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(UIKit.UIView), typeof(System.nint) }, Selector="tableView:willDisplayHeaderView:forSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDisplayFooterView", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(UIKit.UIView), typeof(System.nint) }, Selector="tableView:willDisplayFooterView:forSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CellDisplayingEnded", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(UIKit.UITableViewCell), typeof(Foundation.NSIndexPath) }, Selector="tableView:didEndDisplayingCell:forRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="HeaderViewDisplayingEnded", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(UIKit.UIView), typeof(System.nint) }, Selector="tableView:didEndDisplayingHeaderView:forSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="FooterViewDisplayingEnded", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(UIKit.UIView), typeof(System.nint) }, Selector="tableView:didEndDisplayingFooterView:forSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldHighlightRow", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.Boolean), Selector="tableView:shouldHighlightRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RowHighlighted", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, Selector="tableView:didHighlightRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RowUnhighlighted", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, Selector="tableView:didUnhighlightRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EstimatedHeight", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.nfloat), Selector="tableView:estimatedHeightForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EstimatedHeightForHeader", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(System.nint) }, ReturnType=typeof(System.nfloat), Selector="tableView:estimatedHeightForHeaderInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EstimatedHeightForFooter", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(System.nint) }, ReturnType=typeof(System.nfloat), Selector="tableView:estimatedHeightForFooterInSection:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EditActionsForRow", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(UIKit.UITableViewRowAction[]), Selector="tableView:editActionsForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CanFocusRow", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.Boolean), Selector="tableView:canFocusRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldUpdateFocus", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(UIKit.UITableViewFocusUpdateContext) }, ReturnType=typeof(System.Boolean), Selector="tableView:shouldUpdateFocusInContext:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidUpdateFocus", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(UIKit.UITableViewFocusUpdateContext), typeof(UIKit.UIFocusAnimationCoordinator) }, Selector="tableView:didUpdateFocusInContext:withAnimationCoordinator:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetIndexPathForPreferredFocusedView", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView) }, ReturnType=typeof(Foundation.NSIndexPath), Selector="indexPathForPreferredFocusedViewInTableView:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetLeadingSwipeActionsConfiguration", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(UIKit.UISwipeActionsConfiguration), Selector="tableView:leadingSwipeActionsConfigurationForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetTrailingSwipeActionsConfiguration", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(UIKit.UISwipeActionsConfiguration), Selector="tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldSpringLoadRow", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UITableView), typeof(Foundation.NSIndexPath), typeof(UIKit.IUISpringLoadedInteractionContext) }, ReturnType=typeof(System.Boolean), Selector="tableView:shouldSpringLoadRowAtIndexPath:withContext:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:UIKit.UITableViewDelegate" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:UIKit.UITableViewDelegate" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:UIKit.UITableViewDelegate" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:UIKit.UITableViewDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members />
</Type>
