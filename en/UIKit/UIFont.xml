<Type Name="UIFont" FullName="UIKit.UIFont">
  <TypeSignature Language="C#" Value="public class UIFont : Foundation.NSObject, Foundation.INSCopying, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIFont extends Foundation.NSObject implements class Foundation.INSCopying, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIFont", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Font representation for MonoTouch.UIKit classes.</summary>
    <remarks>
      <para>
        
        UIFont object are not instantiated directly, but instead are created from static methods on this class.  Starting with iOS 7.0 you can use the 
        <see cref="P:UIKit.UIFont.PreferredBody" />,
        <see cref="P:UIKit.UIFont.PreferredCaption1" />,
        <see cref="P:UIKit.UIFont.PreferredCaption2" />,
        <see cref="P:UIKit.UIFont.PreferredHeadline" />,
        <see cref="P:UIKit.UIFont.PreferredSubheadline" /> properties to get the preferred system fonts for the corresponding use case.
        
        
      </para>
      <para>
        Use the static <see cref="M:UIKit.UIFont.FromName" /> method to create new fonts of a particular font.   
      </para>
      <para>
        
        You can use the <see cref="P:UIKit.UIFont.FamilyNames" /> property to get a
        list of all family names available and then the <see cref="M:UIKit.UIFont.FontNamesForFamilyName(string)" />
        method to get a list of the fonts available in a particular font family.
      </para>
      <format type="text/html">
        <h2>System Information and Fonts</h2>
      </format>
      <para>
        To get a normal, italic of bold fonts representing the system
        font, use the static methods <see cref="M:UIKit.UIFont.SystemFontOfSize" />, <see cref="M:UIKit.UIFont.ItalicSystemFontOfSize" /> and
        <see cref="M:UIKit.UIFont.BoldSystemFontOfSize" />.
      </para>
      <para>
        
        You can query some common font parameters by using the <see cref="P:UIKit.UIFont.ButtonFontSize" />, <see cref="P:UIKit.UIFont.LabelFontSize" />, <see cref="P:UIKit.UIFont.SmallSystemFontSize" /> and <see cref="P:UIKit.UIFont.SystemFontSize" />.
        
      </para>
      <format type="text/html">
        <h2>Activating Typographic Features</h2>
      </format>
      <para> Starting with iOS7, you can retrieve a new font based on
	an existing font instance by using font descriptors.  To do
	this, you fetch the immutable <see cref="P:UIKit.UIFont.FontDescriptor" /> property from
	your font and use it to create a new font descriptor with your
	desired changes, which then you use to can pass to the <see cref="M:UIKit.UIFont.FromDescriptor" /> method to
	create the altered font.  
      </para>
      <para> The following example shows how to alter the existing
	font to set enable the CoreText typographic features for
	proportional numbers and to use the character alternative:
	</para>
      <example>
        <code lang="C#"><![CDATA[
UIFont CustomizeFont (UIFont font)
{
    var originalDescriptor = font.FontDescriptor;

    // This font has a character alternative, at index 1, use that:
    const int characterAlternative = 1;

    var attributes = new UIFontAttributes (
	new UIFontFeature (CTFontFeatureNumberSpacing.Selector.ProportionalNumbers),
	new UIFontFeature (characterAlternative));
    var newDesc = originalDescriptor.CreateWithAttributes (attributes);
    return UIFont.FromDescriptor (newDesc, 80);
}
        ]]></code>
      </example>
      <format type="text/html">
        <h2>Limiting Character Coverage of a Font</h2>
      </format>
      <para>

	The following example alters a font descriptor by altering the
	character set supported by the font and forces the system to
	use a glyph from the list of fallback fonts in the system.
	For example, if you were to use the Menlo font, the following
	example would remove the use of the Melon Snowman character
	(At Unicode 0x2603), and fall back to the system snowman:

      </para>
      <example>
        <code lang="C#"><![CDATA[
var label = new UILabel (new RectangleF (0, 300, 200, 100)) {
	Text = "Hello \u2603 there!",
	TextColor = UIColor.White,
	Font = MyFonts.Menlo
};

var originalDescriptor = label.Font.FontDescriptor;
var originalCharSet = originalDescriptor.CharacterSet;

// Make a copy of the character set to modify
var charSetCopy = originalCharSet.MutableCopy () as NSMutableCharacterSet;

// Remove the snowman
charSetCopy.RemoveCharacters (new NSRange (0x2603, 1));

// Create new descriptor
var removedSnowmanDescriptor = originalDescriptor.CreateWithAttributes (new UIFontAttributes () { 
	CharacterSet =  originalCharSet
});

// Create the font and set it on our label
label.Font = UIFont.FromDescriptor (removedSnowmanDescriptor, 0);
	]]></code>
      </example>
      <para tool="threads">The members of this class can be used from a background thread.</para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=23a2571b-45eb-4889-bb67-d88937cb68c1">monocatalog</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Standard_Controls/Fonts/Enumerate_Fonts">Enumerate Fonts</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIFont_Class/index.html">Apple documentation for <c>UIFont</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIFont (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIFont (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Ascender">
      <MemberSignature Language="C#" Value="public virtual nfloat Ascender { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Ascender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("ascender")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The top y-coordinate of the longest ascender, as measured in points from the baseline.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoldSystemFontOfSize">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont BoldSystemFontOfSize (nfloat size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont BoldSystemFontOfSize(valuetype System.nfloat size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="size">The size of the font.</param>
        <summary>Returns a boldfaced font of the standard system font in the size specified.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ButtonFontSize">
      <MemberSignature Language="C#" Value="public static nfloat ButtonFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.nfloat ButtonFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("buttonFontSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the font size of a standard button in points.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CapHeight">
      <MemberSignature Language="C#" Value="public virtual nfloat CapHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat CapHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("capHeight")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The height of a capital letter, measured in points. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>
          <para>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>
          <para>Implementation of the INSCopyable interface.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Descender">
      <MemberSignature Language="C#" Value="public virtual nfloat Descender { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Descender" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("descender")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The bottom y-coordinate of the longest descender, as measured from the baseline, in points.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">To be added.</param>
        <summary>Used to compare <see cref="T:UIKit.UIFont" /> objects.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FamilyName">
      <MemberSignature Language="C#" Value="public virtual string FamilyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FamilyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("familyName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the font family that identifies one (or more) specific fonts. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FamilyNames">
      <MemberSignature Language="C#" Value="public static string[] FamilyNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string[] FamilyNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("familyNames")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A list of the font families on the system.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontDescriptor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFontDescriptor FontDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIFontDescriptor FontDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("fontDescriptor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFontDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIFontDescriptor for this UIFont.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FontNamesForFamilyName">
      <MemberSignature Language="C#" Value="public static string[] FontNamesForFamilyName (string familyName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string[] FontNamesForFamilyName(string familyName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("fontNamesForFamilyName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="familyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="familyName">The name of a font family.</param>
        <summary>Returns a list of fonts in the given family.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromDescriptor">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont FromDescriptor (UIKit.UIFontDescriptor descriptor, nfloat pointSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont FromDescriptor(class UIKit.UIFontDescriptor descriptor, valuetype System.nfloat pointSize) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="descriptor" Type="UIKit.UIFontDescriptor" />
        <Parameter Name="pointSize" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="descriptor">To be added.</param>
        <param name="pointSize">To be added.</param>
        <summary>Factory method that creates a UIFont from the specified descriptor.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromName">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont FromName (string name, nfloat size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont FromName(string name, valuetype System.nfloat size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="size" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="name">The name of the font to create.</param>
        <param name="size">The size of the font to create.</param>
        <summary>Creates a font of the specified size.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generates a hash code for the current instance.</summary>
        <returns>A int containing the hash code for this instance.</returns>
        <remarks>
          <para>The algorithm used to generate the hash code is unspecified.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredFontForTextStyle">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont GetPreferredFontForTextStyle (Foundation.NSString uiFontTextStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont GetPreferredFontForTextStyle(class Foundation.NSString uiFontTextStyle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiFontTextStyle" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="uiFontTextStyle">Name of one of the built-in system text styles.</param>
        <summary>Weakly-typed version of an API used to retrieve the user's desired font size.</summary>
        <returns>UIFont</returns>
        <remarks>
          <para>	  You can instead use the 
            <see cref="P:UIKit.UIFont.PreferredBody" />,
            <see cref="P:UIKit.UIFont.PreferredCaption1" />,
            <see cref="P:UIKit.UIFont.PreferredCaption2" />,
            <see cref="P:UIKit.UIFont.PreferredHeadline" />,
            <see cref="P:UIKit.UIFont.PreferredSubheadline" /> properties to get this information.
          </para>
          <para>Using these methods to obtain an initial font during view intiailization is not sufficient to implement dynamic type. After the application user has set the "Text Size Property" in Settings, the application will receive a notification via <see cref="M:UIKit.UIApplication+Notifications.ObserveContentSizeCategoryChanged" />. It is the application developer's responsibility, at that point, to invalidate the layout in all view elements that should be resized. The simplest way to do that is to have a method that re-sets the font in all components that support Dynamic Type:</para>
          <example>
            <code lang="C#"><![CDATA[
 UIApplication.Notifications.ObserveContentSizeCategoryChanged((s,e) => {
	SetDynamicTypeFonts();
});

//Call this when initializing, and also in response to ObserveContentSizeCategoryChanged notifications
private void SetDynamicTypeFonts()
{
	headlineLabel.Font = UIFont.PreferredFontForTextStyle(UIFontTextStyle.Headline);
	bodyText.Font = UIFont.PreferredFontForTextStyle(UIFontTextStyle.Body);
  //...etc...
}
          ]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredFontForTextStyle">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont GetPreferredFontForTextStyle (UIKit.UIFontTextStyle uiFontTextStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont GetPreferredFontForTextStyle(valuetype UIKit.UIFontTextStyle uiFontTextStyle) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiFontTextStyle" Type="UIKit.UIFontTextStyle" />
      </Parameters>
      <Docs>
        <param name="uiFontTextStyle">The style for which to get the preferred font.</param>
        <summary>Weakly-typed version of an API used to retrieve the user's desired font size.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredFontForTextStyle">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont GetPreferredFontForTextStyle (Foundation.NSString uiFontTextStyle, UIKit.UITraitCollection traitCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont GetPreferredFontForTextStyle(class Foundation.NSString uiFontTextStyle, class UIKit.UITraitCollection traitCollection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiFontTextStyle" Type="Foundation.NSString" />
        <Parameter Name="traitCollection" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="uiFontTextStyle">The style for which to get the preferred font.</param>
        <param name="traitCollection">The trait collection for which to get the preferred font.</param>
        <summary>Weakly-typed version of an API used to retrieve the user's desired font size.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreferredFontForTextStyle">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont GetPreferredFontForTextStyle (UIKit.UIFontTextStyle uiFontTextStyle, UIKit.UITraitCollection traitCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont GetPreferredFontForTextStyle(valuetype UIKit.UIFontTextStyle uiFontTextStyle, class UIKit.UITraitCollection traitCollection) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiFontTextStyle" Type="UIKit.UIFontTextStyle" />
        <Parameter Name="traitCollection" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="uiFontTextStyle">The style for which to get the preferred font.</param>
        <param name="traitCollection">The trait collection for which to get the preferred font.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItalicSystemFontOfSize">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont ItalicSystemFontOfSize (nfloat size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont ItalicSystemFontOfSize(valuetype System.nfloat size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="size">The size of the font to create.</param>
        <summary>Creates an italicized system font of the specified size.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LabelFontSize">
      <MemberSignature Language="C#" Value="public static nfloat LabelFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.nfloat LabelFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("labelFontSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This property will return the size of the font use for labels, as measured in points.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Leading">
      <MemberSignature Language="C#" Value="public virtual nfloat Leading { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Leading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("leading")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Deprecated: spacing between lines of text from baseline to baseline.   Use LineHeight instead.</summary>
        <value>Spacing in points.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LineHeight">
      <MemberSignature Language="C#" Value="public virtual nfloat LineHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat LineHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 4, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("lineHeight")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 4, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The height of the text lines as measured in points. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MonospacedDigitSystemFontOfSize">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont MonospacedDigitSystemFontOfSize (nfloat size, nfloat weight);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont MonospacedDigitSystemFontOfSize(valuetype System.nfloat size, valuetype System.nfloat weight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.nfloat" />
        <Parameter Name="weight" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="weight">To be added.</param>
        <summary>The system monospaced font specialized for digits, in the specified size and weight.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MonospacedDigitSystemFontOfSize">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont MonospacedDigitSystemFontOfSize (nfloat fontSize, UIKit.UIFontWeight weight);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont MonospacedDigitSystemFontOfSize(valuetype System.nfloat fontSize, valuetype UIKit.UIFontWeight weight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fontSize" Type="System.nfloat" />
        <Parameter Name="weight" Type="UIKit.UIFontWeight" />
      </Parameters>
      <Docs>
        <param name="fontSize">To be added.</param>
        <param name="weight">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("fontName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the font. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (UIKit.UIFont f1, UIKit.UIFont f2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class UIKit.UIFont f1, class UIKit.UIFont f2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f1" Type="UIKit.UIFont" />
        <Parameter Name="f2" Type="UIKit.UIFont" />
      </Parameters>
      <Docs>
        <param name="f1">To be added.</param>
        <param name="f2">To be added.</param>
        <summary>Compares two <see cref="T:UIKit.UIFont" /> objects for value equality.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (UIKit.UIFont f1, UIKit.UIFont f2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class UIKit.UIFont f1, class UIKit.UIFont f2) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="f1" Type="UIKit.UIFont" />
        <Parameter Name="f2" Type="UIKit.UIFont" />
      </Parameters>
      <Docs>
        <param name="f1">To be added.</param>
        <param name="f2">To be added.</param>
        <summary>Compares two <see cref="T:UIKit.UIFont" /> objects for value inequality.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PointSize">
      <MemberSignature Language="C#" Value="public virtual nfloat PointSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat PointSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("pointSize")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size of a point in the receiver.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredBody">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont PreferredBody { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFont PreferredBody" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFont for the Body dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para>To implement dynamic type, application developers must act in reaction to <see cref="M:UIKit.UIApplication+Notifications.ObserveContentSizeCategoryChanged" /> (see remarks and example at <see cref="M:UIKit.UIFont.GetPreferredFontForTextStyle" />). </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredCallout">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont PreferredCallout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFont PreferredCallout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFont for the Callout dynamic type.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredCaption1">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont PreferredCaption1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFont PreferredCaption1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFont for the Caption1 dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para>To implement dynamic type, application developers must act in reaction to <see cref="M:UIKit.UIApplication+Notifications.ObserveContentSizeCategoryChanged" /> (see remarks and example at <see cref="M:UIKit.UIFont.GetPreferredFontForTextStyle" />). </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredCaption2">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont PreferredCaption2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFont PreferredCaption2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFont for the Caption2 dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para>To implement dynamic type, application developers must act in reaction to <see cref="M:UIKit.UIApplication+Notifications.ObserveContentSizeCategoryChanged" /> (see remarks and example at <see cref="M:UIKit.UIFont.GetPreferredFontForTextStyle" />). </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredFootnote">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont PreferredFootnote { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFont PreferredFootnote" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFont for the Footnote dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para>To implement dynamic type, application developers must act in reaction to <see cref="M:UIKit.UIApplication+Notifications.ObserveContentSizeCategoryChanged" /> (see remarks and example at <see cref="M:UIKit.UIFont.GetPreferredFontForTextStyle" />). </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredHeadline">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont PreferredHeadline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFont PreferredHeadline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFont for the Headline dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para>To implement dynamic type, application developers must act in reaction to <see cref="M:UIKit.UIApplication+Notifications.ObserveContentSizeCategoryChanged" /> (see remarks and example at <see cref="M:UIKit.UIFont.GetPreferredFontForTextStyle" />). </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredSubheadline">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont PreferredSubheadline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFont PreferredSubheadline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFont for the Subheadline dynamic type.</summary>
        <value>
        </value>
        <remarks>
          <para>To implement dynamic type, application developers must act in reaction to <see cref="M:UIKit.UIApplication+Notifications.ObserveContentSizeCategoryChanged" /> (see remarks and example at <see cref="M:UIKit.UIFont.GetPreferredFontForTextStyle" />). </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredTitle1">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont PreferredTitle1 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFont PreferredTitle1" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFont for the Title1 dynamic type.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredTitle2">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont PreferredTitle2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFont PreferredTitle2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFont for the Title2 dynamic type.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredTitle3">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont PreferredTitle3 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UIFont PreferredTitle3" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The preferred UIFont for the Title3 dynamic type.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SmallSystemFontSize">
      <MemberSignature Language="C#" Value="public static nfloat SmallSystemFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.nfloat SmallSystemFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("smallSystemFontSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size of the system font as measured in points.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemFontOfSize">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont SystemFontOfSize (nfloat size);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont SystemFontOfSize(valuetype System.nfloat size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="size">The size of the font, as measure in points.</param>
        <summary>Creates a system font of the specified size.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemFontOfSize">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont SystemFontOfSize (nfloat size, nfloat weight);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont SystemFontOfSize(valuetype System.nfloat size, valuetype System.nfloat weight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 2, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.nfloat" />
        <Parameter Name="weight" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="weight">To be added.</param>
        <summary>Returns the default system font in specified <paramref name="size" /> and <paramref name="weight" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemFontOfSize">
      <MemberSignature Language="C#" Value="public static UIKit.UIFont SystemFontOfSize (nfloat size, UIKit.UIFontWeight weight);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIFont SystemFontOfSize(valuetype System.nfloat size, valuetype UIKit.UIFontWeight weight) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 2, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.nfloat" />
        <Parameter Name="weight" Type="UIKit.UIFontWeight" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="weight">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SystemFontSize">
      <MemberSignature Language="C#" Value="public static nfloat SystemFontSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property valuetype System.nfloat SystemFontSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("systemFontSize")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Creates a system font of the specified size, as measure in points.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a string representation of the value of the current instance.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WithSize">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIFont WithSize (nfloat size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIFont WithSize(valuetype System.nfloat size) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIFont</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="size">The new font size (in points).</param>
        <summary>Returns a new font based on the current one, with the new specified size.</summary>
        <returns>The new font at the specified size.</returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="xHeight">
      <MemberSignature Language="C#" Value="public virtual nfloat xHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat xHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("xHeight")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size of the a lower cased "x", as measured in points.</summary>
        <value>
        </value>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
