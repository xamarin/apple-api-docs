<Type Name="NSLayoutManager" FullName="UIKit.NSLayoutManager">
  <TypeSignature Language="C#" Value="public class NSLayoutManager : Foundation.NSObject, Foundation.INSCoding, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSLayoutManager extends Foundation.NSObject implements class Foundation.INSCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:UIKit.NSLayoutManager" />
  <TypeSignature Language="F#" Value="type NSLayoutManager = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("NSLayoutManager", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Responsible for layout of text stored in a <see cref="T:UIKit.NSTextStorage" /> object.</summary>
    <remarks>
      <para>iOS 7 introduced "Text Kit," a broad set of APIs and modifications of existing classes, built on <see cref="N:CoreText" />, that greatly expands the typographical flexibility of iOS.</para>
      <para>The <see cref="T:UIKit.NSLayoutManager" />'s <see cref="P:UIKit.NSLayoutManager.TextStorage" /> property holds a reference to a <see cref="T:UIKit.NSTextStorage" /> object, that holds a potentially large amount of styled text. The <see cref="T:UIKit.NSLayoutManager" />'s <see cref="P:UIKit.NSLayoutManager.NSTextContainers" /> property holds an ordered array of <see cref="T:UIKit.NSTextContainer" /> objects in which it lays out text. The <see cref="T:UIKit.NSTextContainer" />s, in turn, hold references to <see cref="T:UIKit.UITextView" /> objects, which actually display the text.</para>
    </remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/NSLayoutManager_Class_TextKit/index.html">Apple documentation for <c>NSLayoutManager</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NSLayoutManager (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.NSLayoutManager : Foundation.NSCoder -&gt; UIKit.NSLayoutManager" Usage="new UIKit.NSLayoutManager coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSLayoutManager (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.NSLayoutManager : Foundation.NSObjectFlag -&gt; UIKit.NSLayoutManager" Usage="new UIKit.NSLayoutManager t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal NSLayoutManager (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.NSLayoutManager : nativeint -&gt; UIKit.NSLayoutManager" Usage="new UIKit.NSLayoutManager handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTextContainer">
      <MemberSignature Language="C#" Value="public virtual void AddTextContainer (UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTextContainer(class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.AddTextContainer(UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member AddTextContainer : UIKit.NSTextContainer -&gt; unit&#xA;override this.AddTextContainer : UIKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.AddTextContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addTextContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">An <see cref="T:UIKit.NSTextContainer" /> to be appended to the <see cref="P:UIKit.NSLayoutManager.TextContainers" /> property.</param>
        <summary>Appends a <see cref="T:UIKit.NSTextContainer" /> to the <see cref="P:UIKit.NSLayoutManager.TextContainers" /> property.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:UIKit.NSLayoutManager.InsertTextContainer" />
      </Docs>
    </Member>
    <Member MemberName="AllowsNonContiguousLayout">
      <MemberSignature Language="C#" Value="public virtual bool AllowsNonContiguousLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsNonContiguousLayout" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.AllowsNonContiguousLayout" />
      <MemberSignature Language="F#" Value="member this.AllowsNonContiguousLayout : bool with get, set" Usage="UIKit.NSLayoutManager.AllowsNonContiguousLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allowsNonContiguousLayout")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAllowsNonContiguousLayout:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether layout can be done for a portion of the document without laying-out being recalculated from the beginning.</summary>
        <value>The default value is <see langword="false" />.</value>
        <remarks>
          <para>Setting this value to <see langword="true" /> allows the <see cref="T:UIKit.NSLayoutManager" /> to perform noncontiguous layout. In large documents, this can significantly increase performance, since the layout does not need to performed from the beginning of the document.</para>
          <para>Application developers can use the <c>EnsureLayout...</c> methods with noncontiguous methods to confirm that particular portions of the text are being laid out properly.</para>
          <para>The <see cref="P:UIKit.UITextView.LayoutManager" /> is instantiated with its <see cref="P:UIKit.NSLayoutManager.AllowsNonContiguousLayout" /> property set to <see langword="true" />.</para>
        </remarks>
        <altmember cref="P:UIKit.NSLayoutManager.HasNonContiguousLayout" />
        <altmember cref="M:UIKit.NSLayoutManager.EnsureGlyphsForCharacterRange" />
        <altmember cref="M:UIKit.NSLayoutManager.EnsureGlyphsForGlyphRange" />
        <altmember cref="M:UIKit.NSLayoutManager.EnsureLayoutForCharacterRange" />
        <altmember cref="M:UIKit.NSLayoutManager.EnsureLayoutForGlyphRange" />
        <altmember cref="M:UIKit.NSLayoutManager.EnsureLayoutForTextContainer" />
        <altmember cref="M:UIKit.NSLayoutManager.EnsureLayoutForBoundingRect" />
      </Docs>
    </Member>
    <Member MemberName="AttachmentSizeForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize AttachmentSizeForGlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGSize AttachmentSizeForGlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.AttachmentSizeForGlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member AttachmentSizeForGlyphAtIndex : nuint -&gt; CoreGraphics.CGSize&#xA;override this.AttachmentSizeForGlyphAtIndex : nuint -&gt; CoreGraphics.CGSize" Usage="nSLayoutManager.AttachmentSizeForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("attachmentSizeForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>The size of the attachment cell associated with the glyph at the specified index</summary>
        <returns>The size of attachment cell at the glyph at <paramref name="glyphIndex" />. Returns {-1.0f, -1.0f} if there is no attachment at the specified glyph.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingRectForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect BoundingRectForGlyphRange (Foundation.NSRange glyphRange, UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect BoundingRectForGlyphRange(valuetype Foundation.NSRange glyphRange, class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.BoundingRectForGlyphRange(Foundation.NSRange,UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member BoundingRectForGlyphRange : Foundation.NSRange * UIKit.NSTextContainer -&gt; CoreGraphics.CGRect&#xA;override this.BoundingRectForGlyphRange : Foundation.NSRange * UIKit.NSTextContainer -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.BoundingRectForGlyphRange (glyphRange, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("boundingRectForGlyphRange:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="container">To be added.</param>
        <summary>The bounding rectangle, in container coordinates, for the glyphs in the specified range.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>The returned <see cref="T:System.Drawing.RectangleF" /> includes the area needed for all marks associated with the glyphs, including the area needed for glyphs that draw outside of their line fragment rectangle and for marks such as underlining.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterIndexForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual nuint CharacterIndexForGlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint CharacterIndexForGlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.CharacterIndexForGlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member CharacterIndexForGlyphAtIndex : nuint -&gt; nuint&#xA;override this.CharacterIndexForGlyphAtIndex : nuint -&gt; nuint" Usage="nSLayoutManager.CharacterIndexForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("characterIndexForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>The index of the first character associated with the glyph at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>If <see cref="P:UIKit.NSLayoutManager.AllowsNonContiguousLayout" /> is <see langword="false" />, calling this method will result in generating all glyphs up to and including <paramref name="glyphIndex" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterIndexForPoint">
      <MemberSignature Language="C#" Value="public virtual nuint CharacterIndexForPoint (CoreGraphics.CGPoint point, UIKit.NSTextContainer container, ref nfloat partialFraction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint CharacterIndexForPoint(valuetype CoreGraphics.CGPoint point, class UIKit.NSTextContainer container, valuetype System.nfloat&amp; partialFraction) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.CharacterIndexForPoint(CoreGraphics.CGPoint,UIKit.NSTextContainer,System.nfloat@)" />
      <MemberSignature Language="F#" Value="abstract member CharacterIndexForPoint : CoreGraphics.CGPoint * UIKit.NSTextContainer *  -&gt; nuint&#xA;override this.CharacterIndexForPoint : CoreGraphics.CGPoint * UIKit.NSTextContainer *  -&gt; nuint" Usage="nSLayoutManager.CharacterIndexForPoint (point, container, partialFraction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("characterIndexForPoint:inTextContainer:fractionOfDistanceBetweenInsertionPoints:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
        <Parameter Name="partialFraction" Type="System.nfloat" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="container">To be added.</param>
        <param name="partialFraction">To be added.</param>
        <summary>Gets the index of the character at <param name="point" /> in <param name="container" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharacterRangeForGlyphRange">
      <MemberSignature Language="C#" Value="public Foundation.NSRange CharacterRangeForGlyphRange (Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Foundation.NSRange CharacterRangeForGlyphRange(valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.CharacterRangeForGlyphRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.CharacterRangeForGlyphRange : Foundation.NSRange -&gt; Foundation.NSRange" Usage="nSLayoutManager.CharacterRangeForGlyphRange charRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <summary>The range of characters that generated the glyphs in the specified glyph range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <!-- This is an odd name. Should it be glyphRange? -->
      </Docs>
    </Member>
    <Member MemberName="CharacterRangeForGlyphRange">
      <MemberSignature Language="C#" Value="public Foundation.NSRange CharacterRangeForGlyphRange (Foundation.NSRange charRange, ref Foundation.NSRange actualCharRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Foundation.NSRange CharacterRangeForGlyphRange(valuetype Foundation.NSRange charRange, valuetype Foundation.NSRange&amp; actualCharRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.CharacterRangeForGlyphRange(Foundation.NSRange,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.CharacterRangeForGlyphRange : Foundation.NSRange *  -&gt; Foundation.NSRange" Usage="nSLayoutManager.CharacterRangeForGlyphRange (charRange, actualCharRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
        <Parameter Name="actualCharRange" Type="Foundation.NSRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <param name="actualCharRange">To be added.</param>
        <summary>The range of characters that generated the specified glyph range.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <!-- TODO: Check param names? -->
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.NSLayoutManager.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public UIKit.INSLayoutManagerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.INSLayoutManagerDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UIKit.INSLayoutManagerDelegate with get, set" Usage="UIKit.NSLayoutManager.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.INSLayoutManagerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UIKit.INSLayoutManagerDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UIKit.INSLayoutManagerDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="nSLayoutManager.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the NSLayoutManager object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the NSLayoutManager class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the NSLayoutManager ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawBackgroundForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual void DrawBackgroundForGlyphRange (Foundation.NSRange glyphsToShow, CoreGraphics.CGPoint origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawBackgroundForGlyphRange(valuetype Foundation.NSRange glyphsToShow, valuetype CoreGraphics.CGPoint origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.DrawBackgroundForGlyphRange(Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member DrawBackgroundForGlyphRange : Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.DrawBackgroundForGlyphRange : Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.DrawBackgroundForGlyphRange (glyphsToShow, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawBackgroundForGlyphRange:atPoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphsToShow" Type="Foundation.NSRange" />
        <Parameter Name="origin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphsToShow">To be added.</param>
        <param name="origin">To be added.</param>
        <summary>Draws background marks for the given glyph range.</summary>
        <remarks>
          <para>Background marks include text background color, highlighting, and table backgrounds and borders. Application developers can override this function in subclasses to fully customize background drawing.</para>
          <para>
            <paramref name="glyphsToShow" /> must specify glyphs within a single <see cref="T:UIKit.NSTextContainer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawGlyphs">
      <MemberSignature Language="C#" Value="public virtual void DrawGlyphs (Foundation.NSRange glyphsToShow, CoreGraphics.CGPoint origin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawGlyphs(valuetype Foundation.NSRange glyphsToShow, valuetype CoreGraphics.CGPoint origin) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.DrawGlyphs(Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member DrawGlyphs : Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.DrawGlyphs : Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.DrawGlyphs (glyphsToShow, origin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawGlyphsForGlyphRange:atPoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphsToShow" Type="Foundation.NSRange" />
        <Parameter Name="origin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphsToShow">To be added.</param>
        <param name="origin">To be added.</param>
        <summary>Draws the specified glyph range.</summary>
        <remarks>
          <para>This method causes glyph generation and layout, if needed.</para>
          <para>
            <paramref name="glyphsToShow" /> must specify glyphs within a single <see cref="T:UIKit.NSTextContainer" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawsOutsideLineFragmentForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual bool DrawsOutsideLineFragmentForGlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DrawsOutsideLineFragmentForGlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.DrawsOutsideLineFragmentForGlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member DrawsOutsideLineFragmentForGlyphAtIndex : nuint -&gt; bool&#xA;override this.DrawsOutsideLineFragmentForGlyphAtIndex : nuint -&gt; bool" Usage="nSLayoutManager.DrawsOutsideLineFragmentForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawsOutsideLineFragmentForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>Returns <see langword="true" /> if the specified glyph draws outside of its line fragment rectangle.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawStrikethrough">
      <MemberSignature Language="C#" Value="public virtual void DrawStrikethrough (Foundation.NSRange glyphRange, Foundation.NSUnderlineStyle strikethroughVal, nfloat baselineOffset, CoreGraphics.CGRect lineRect, Foundation.NSRange lineGlyphRange, CoreGraphics.CGPoint containerOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawStrikethrough(valuetype Foundation.NSRange glyphRange, valuetype Foundation.NSUnderlineStyle strikethroughVal, valuetype System.nfloat baselineOffset, valuetype CoreGraphics.CGRect lineRect, valuetype Foundation.NSRange lineGlyphRange, valuetype CoreGraphics.CGPoint containerOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.DrawStrikethrough(Foundation.NSRange,Foundation.NSUnderlineStyle,System.nfloat,CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member DrawStrikethrough : Foundation.NSRange * Foundation.NSUnderlineStyle * nfloat * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.DrawStrikethrough : Foundation.NSRange * Foundation.NSUnderlineStyle * nfloat * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.DrawStrikethrough (glyphRange, strikethroughVal, baselineOffset, lineRect, lineGlyphRange, containerOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawStrikethroughForGlyphRange:strikethroughType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="strikethroughVal" Type="Foundation.NSUnderlineStyle" />
        <Parameter Name="baselineOffset" Type="System.nfloat" />
        <Parameter Name="lineRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="lineGlyphRange" Type="Foundation.NSRange" />
        <Parameter Name="containerOrigin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphRange">The range of glyphs to be struck through.</param>
        <param name="strikethroughVal">The drawing style of the strikethrough (for instance, dashed or solid).</param>
        <param name="baselineOffset">Distance above the baseline to draw the strikethrough.</param>
        <param name="lineRect">The line fragment rectangle containing <param name="glyphRange" />.</param>
        <param name="lineGlyphRange">All glyphs within <param name="lineRect" />.</param>
        <param name="containerOrigin">The origin of the <param name="lineRect" /> objects containing <see cref="T:UIKit.NSTextContainer" />.</param>
        <summary>Draws a strikethrough line through the glyphs in <param name="glyphRange" />.</summary>
        <remarks>
          <para>Developers should generally use the simpler <see cref="M:UIKit.NSLayoutManager.Strikethrough" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawUnderline">
      <MemberSignature Language="C#" Value="public virtual void DrawUnderline (Foundation.NSRange glyphRange, Foundation.NSUnderlineStyle underlineVal, nfloat baselineOffset, CoreGraphics.CGRect lineRect, Foundation.NSRange lineGlyphRange, CoreGraphics.CGPoint containerOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawUnderline(valuetype Foundation.NSRange glyphRange, valuetype Foundation.NSUnderlineStyle underlineVal, valuetype System.nfloat baselineOffset, valuetype CoreGraphics.CGRect lineRect, valuetype Foundation.NSRange lineGlyphRange, valuetype CoreGraphics.CGPoint containerOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.DrawUnderline(Foundation.NSRange,Foundation.NSUnderlineStyle,System.nfloat,CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member DrawUnderline : Foundation.NSRange * Foundation.NSUnderlineStyle * nfloat * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.DrawUnderline : Foundation.NSRange * Foundation.NSUnderlineStyle * nfloat * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.DrawUnderline (glyphRange, underlineVal, baselineOffset, lineRect, lineGlyphRange, containerOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawUnderlineForGlyphRange:underlineType:baselineOffset:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="underlineVal" Type="Foundation.NSUnderlineStyle" />
        <Parameter Name="baselineOffset" Type="System.nfloat" />
        <Parameter Name="lineRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="lineGlyphRange" Type="Foundation.NSRange" />
        <Parameter Name="containerOrigin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphRange">The range of glyphs to be underlined.</param>
        <param name="underlineVal">The drawing style of the underline.</param>
        <param name="baselineOffset">The distance from the baseline to draw the underline.</param>
        <param name="lineRect">The line fragment rectangle containing <param name="glyphRange" />.</param>
        <param name="lineGlyphRange">All glyphs within <param name="lineRect" />.</param>
        <param name="containerOrigin">The origin of the <param name="lineRect" /> objects containing <see cref="T:UIKit.NSTextContainer" />.</param>
        <summary>Underlines the glyphs in <param name="glyphRange" />.</summary>
        <remarks>
          <para>Developers should generally use the simpler <see cref="M:UIKit.NSLayoutManager.Underline" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="nSLayoutManager.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureGlyphsForCharacterRange">
      <MemberSignature Language="C#" Value="public virtual void EnsureGlyphsForCharacterRange (Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureGlyphsForCharacterRange(valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.EnsureGlyphsForCharacterRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member EnsureGlyphsForCharacterRange : Foundation.NSRange -&gt; unit&#xA;override this.EnsureGlyphsForCharacterRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.EnsureGlyphsForCharacterRange charRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("ensureGlyphsForCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <summary>Forces the <see cref="T:UIKit.NSLayoutManager" /> to generate glyphs for the specified characters, if it has not already done so.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.NSLayoutManager" /> may calculate glyphs for a range larger than the <paramref name="charRange" />. If <see cref="P:UIKit.NSLayoutManager.AllowsNonContinguousLayout" /> is <see langword="false" />, the range will always extend to the beginning of the text.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureGlyphsForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual void EnsureGlyphsForGlyphRange (Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureGlyphsForGlyphRange(valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.EnsureGlyphsForGlyphRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member EnsureGlyphsForGlyphRange : Foundation.NSRange -&gt; unit&#xA;override this.EnsureGlyphsForGlyphRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.EnsureGlyphsForGlyphRange glyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("ensureGlyphsForGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <summary>Forces the <see cref="T:UIKit.NSLayoutManager" /> to generate glyphs for the specified glyph range, if it has not already done so.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.NSLayoutManager" /> may calculate glyphs for a range larger than the <paramref name="glyphRange" />. If <see cref="P:UIKit.NSLayoutManager.AllowsNonContinguousLayout" /> is <see langword="false" />, the range will always extend to the beginning of the text.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureLayoutForBoundingRect">
      <MemberSignature Language="C#" Value="public virtual void EnsureLayoutForBoundingRect (CoreGraphics.CGRect bounds, UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureLayoutForBoundingRect(valuetype CoreGraphics.CGRect bounds, class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.EnsureLayoutForBoundingRect(CoreGraphics.CGRect,UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member EnsureLayoutForBoundingRect : CoreGraphics.CGRect * UIKit.NSTextContainer -&gt; unit&#xA;override this.EnsureLayoutForBoundingRect : CoreGraphics.CGRect * UIKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.EnsureLayoutForBoundingRect (bounds, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("ensureLayoutForBoundingRect:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="CoreGraphics.CGRect" />
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="bounds">To be added.</param>
        <param name="container">To be added.</param>
        <summary>Forces the layout manager to perform layout on <param name="bounds" /> within <param name="container" />.</summary>
        <remarks>
          <para>The layout manager may lay out areas larger than <param name="bounds" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureLayoutForCharacterRange">
      <MemberSignature Language="C#" Value="public virtual void EnsureLayoutForCharacterRange (Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureLayoutForCharacterRange(valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.EnsureLayoutForCharacterRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member EnsureLayoutForCharacterRange : Foundation.NSRange -&gt; unit&#xA;override this.EnsureLayoutForCharacterRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.EnsureLayoutForCharacterRange charRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("ensureLayoutForCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <summary>Forces the <see cref="T:UIKit.NSLayoutManager" /> to layout the specified characters, if it has not already done so.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.NSLayoutManager" /> may layout an area larger than the <paramref name="charRange" />. If <see cref="P:UIKit.NSLayoutManager.AllowsNonContinguousLayout" /> is <see langword="false" />, the range will always extend to the beginning of the text.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureLayoutForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual void EnsureLayoutForGlyphRange (Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureLayoutForGlyphRange(valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.EnsureLayoutForGlyphRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member EnsureLayoutForGlyphRange : Foundation.NSRange -&gt; unit&#xA;override this.EnsureLayoutForGlyphRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.EnsureLayoutForGlyphRange glyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("ensureLayoutForGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <summary>Forces the <see cref="T:UIKit.NSLayoutManager" /> to layout the specified glyphs, if it has not already done so.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.NSLayoutManager" /> may layout a larger range than the specified <paramref name="glyphRange" />. If <see cref="P:UIKit.NSLayoutManager.AllowsNonContinguousLayout" /> is <see langword="false" />, the range will always extend to the beginning of the text.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnsureLayoutForTextContainer">
      <MemberSignature Language="C#" Value="public virtual void EnsureLayoutForTextContainer (UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnsureLayoutForTextContainer(class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.EnsureLayoutForTextContainer(UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member EnsureLayoutForTextContainer : UIKit.NSTextContainer -&gt; unit&#xA;override this.EnsureLayoutForTextContainer : UIKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.EnsureLayoutForTextContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("ensureLayoutForTextContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>Forces the <see cref="T:UIKit.NSLayoutManager" /> to layout the specified <see cref="T:UIKit.NSTextContainer" />, if it has not already done so.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.NSLayoutManager" /> may layout more than the specified <paramref name="container" />. If <see cref="P:UIKit.NSLayoutManager.AllowsNonContinguousLayout" /> is <see langword="false" />, the range will always extend to the beginning of the text.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateEnclosingRects">
      <MemberSignature Language="C#" Value="public virtual void EnumerateEnclosingRects (Foundation.NSRange glyphRange, Foundation.NSRange selectedRange, UIKit.NSTextContainer textContainer, UIKit.NSTextLayoutEnumerateEnclosingRects callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateEnclosingRects(valuetype Foundation.NSRange glyphRange, valuetype Foundation.NSRange selectedRange, class UIKit.NSTextContainer textContainer, class UIKit.NSTextLayoutEnumerateEnclosingRects callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.EnumerateEnclosingRects(Foundation.NSRange,Foundation.NSRange,UIKit.NSTextContainer,UIKit.NSTextLayoutEnumerateEnclosingRects)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateEnclosingRects : Foundation.NSRange * Foundation.NSRange * UIKit.NSTextContainer * UIKit.NSTextLayoutEnumerateEnclosingRects -&gt; unit&#xA;override this.EnumerateEnclosingRects : Foundation.NSRange * Foundation.NSRange * UIKit.NSTextContainer * UIKit.NSTextLayoutEnumerateEnclosingRects -&gt; unit" Usage="nSLayoutManager.EnumerateEnclosingRects (glyphRange, selectedRange, textContainer, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateEnclosingRectsForGlyphRange:withinSelectedGlyphRange:inTextContainer:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="selectedRange" Type="Foundation.NSRange" />
        <Parameter Name="textContainer" Type="UIKit.NSTextContainer" />
        <Parameter Name="callback" Type="UIKit.NSTextLayoutEnumerateEnclosingRects">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSTextLayoutEnumerateEnclosingRects))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="selectedRange">To be added.</param>
        <param name="textContainer">To be added.</param>
        <param name="callback">To be added.</param>
        <summary>Enumerates the enclosing rectangles for the specified glyph range.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnumerateLineFragments">
      <MemberSignature Language="C#" Value="public virtual void EnumerateLineFragments (Foundation.NSRange glyphRange, UIKit.NSTextLayoutEnumerateLineFragments callback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EnumerateLineFragments(valuetype Foundation.NSRange glyphRange, class UIKit.NSTextLayoutEnumerateLineFragments callback) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.EnumerateLineFragments(Foundation.NSRange,UIKit.NSTextLayoutEnumerateLineFragments)" />
      <MemberSignature Language="F#" Value="abstract member EnumerateLineFragments : Foundation.NSRange * UIKit.NSTextLayoutEnumerateLineFragments -&gt; unit&#xA;override this.EnumerateLineFragments : Foundation.NSRange * UIKit.NSTextLayoutEnumerateLineFragments -&gt; unit" Usage="nSLayoutManager.EnumerateLineFragments (glyphRange, callback)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("enumerateLineFragmentsForGlyphRange:usingBlock:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="callback" Type="UIKit.NSTextLayoutEnumerateLineFragments">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDNSTextLayoutEnumerateLineFragments))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="callback">To be added.</param>
        <summary>Enumerate the line fragments intersecting with the specified glyph range.|Enumerate the line fragments intersecting with the specified glyph rane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraLineFragmentRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ExtraLineFragmentRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect ExtraLineFragmentRect" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.ExtraLineFragmentRect" />
      <MemberSignature Language="F#" Value="member this.ExtraLineFragmentRect : CoreGraphics.CGRect" Usage="UIKit.NSLayoutManager.ExtraLineFragmentRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("extraLineFragmentRect")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("extraLineFragmentRect", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:System.Drawing.RectangleF" /> needed for the insertion point.</summary>
        <value>Returns the rectangle defining the extra line fragment for the insertion point or {0,0,0,0} if there is no such retangle.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraLineFragmentTextContainer">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSTextContainer ExtraLineFragmentTextContainer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.NSTextContainer ExtraLineFragmentTextContainer" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.ExtraLineFragmentTextContainer" />
      <MemberSignature Language="F#" Value="member this.ExtraLineFragmentTextContainer : UIKit.NSTextContainer" Usage="UIKit.NSLayoutManager.ExtraLineFragmentTextContainer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("extraLineFragmentTextContainer")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("extraLineFragmentTextContainer", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:UIKit.NSTextContainer" /> containing the <see cref="P:UIKit.NSLayoutManager.ExtraLineFragmentRect" />.</summary>
        <value>Returns <see langword="null" /> if the <see cref="P:UIKit.NSLayoutManager.ExtraLineFragmentRect" /> does not exist (is {0,0,0,0}).</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExtraLineFragmentUsedRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect ExtraLineFragmentUsedRect { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect ExtraLineFragmentUsedRect" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.ExtraLineFragmentUsedRect" />
      <MemberSignature Language="F#" Value="member this.ExtraLineFragmentUsedRect : CoreGraphics.CGRect" Usage="UIKit.NSLayoutManager.ExtraLineFragmentUsedRect" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("extraLineFragmentUsedRect")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("extraLineFragmentUsedRect", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The rectangle enclosing the insertion point.</summary>
        <value>Twice the <see cref="P:UIKit.NSTextContainer.LineFragmentPadding" />, with the insertion point in the middle.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstUnlaidCharacterIndex">
      <MemberSignature Language="C#" Value="public virtual nuint FirstUnlaidCharacterIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint FirstUnlaidCharacterIndex" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.FirstUnlaidCharacterIndex" />
      <MemberSignature Language="F#" Value="member this.FirstUnlaidCharacterIndex : nuint" Usage="UIKit.NSLayoutManager.FirstUnlaidCharacterIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("firstUnlaidCharacterIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The index of the first character that has not been laid out.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FirstUnlaidGlyphIndex">
      <MemberSignature Language="C#" Value="public virtual nuint FirstUnlaidGlyphIndex { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint FirstUnlaidGlyphIndex" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.FirstUnlaidGlyphIndex" />
      <MemberSignature Language="F#" Value="member this.FirstUnlaidGlyphIndex : nuint" Usage="UIKit.NSLayoutManager.FirstUnlaidGlyphIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("firstUnlaidGlyphIndex")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The index of the first glyph that has not been laid out.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionOfDistanceThroughGlyphForPoint">
      <MemberSignature Language="C#" Value="public virtual nfloat FractionOfDistanceThroughGlyphForPoint (CoreGraphics.CGPoint point, UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat FractionOfDistanceThroughGlyphForPoint(valuetype CoreGraphics.CGPoint point, class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.FractionOfDistanceThroughGlyphForPoint(CoreGraphics.CGPoint,UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member FractionOfDistanceThroughGlyphForPoint : CoreGraphics.CGPoint * UIKit.NSTextContainer -&gt; nfloat&#xA;override this.FractionOfDistanceThroughGlyphForPoint : CoreGraphics.CGPoint * UIKit.NSTextContainer -&gt; nfloat" Usage="nSLayoutManager.FractionOfDistanceThroughGlyphForPoint (point, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("fractionOfDistanceThroughGlyphForPoint:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="container">To be added.</param>
        <summary>Developers should call <see cref="M:UIKit.NSLayoutManager.GlyphIndexForPoint(CoreGraphics.CGPoint,UIKit.NSTextContainer)" /> rather than this primitive function.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method is <c>public</c> for overriding purposes but is not intended for developers to call.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstUnlaidCharacterIndex">
      <MemberSignature Language="C#" Value="public virtual void GetFirstUnlaidCharacterIndex (ref nuint charIndex, ref nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetFirstUnlaidCharacterIndex(valuetype System.nuint&amp; charIndex, valuetype System.nuint&amp; glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GetFirstUnlaidCharacterIndex(System.nuint@,System.nuint@)" />
      <MemberSignature Language="F#" Value="abstract member GetFirstUnlaidCharacterIndex :  *  -&gt; unit&#xA;override this.GetFirstUnlaidCharacterIndex :  *  -&gt; unit" Usage="nSLayoutManager.GetFirstUnlaidCharacterIndex (charIndex, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("getFirstUnlaidCharacterIndex:glyphIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nuint" RefType="ref" />
        <Parameter Name="glyphIndex" Type="System.nuint" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>The indices of the first character and glyph that are not laid out.</summary>
        <remarks>
          <para>Application developers should be aware that <paramref name="charIndex" /> and <paramref name="glyphIndex" /> may be <see langword="null" /> if the text is fully laid out.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlyph">
      <MemberSignature Language="C#" Value="public virtual ushort GetGlyph (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int16 GetGlyph(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GetGlyph(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GetGlyph : nuint -&gt; uint16&#xA;override this.GetGlyph : nuint -&gt; uint16" Usage="nSLayoutManager.GetGlyph glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("CGGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>Retrieves the glyph at <param name="glyphIndex" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Calling this method generates all glyphs up to and including the glyph at <param name="glyphIndex" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlyph">
      <MemberSignature Language="C#" Value="public virtual ushort GetGlyph (nuint glyphIndex, ref bool isValidIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int16 GetGlyph(valuetype System.nuint glyphIndex, bool&amp; isValidIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GetGlyph(System.nuint,System.Boolean@)" />
      <MemberSignature Language="F#" Value="abstract member GetGlyph : nuint *  -&gt; uint16&#xA;override this.GetGlyph : nuint *  -&gt; uint16" Usage="nSLayoutManager.GetGlyph (glyphIndex, isValidIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("CGGlyphAtIndex:isValidIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="isValidIndex" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="isValidIndex">To be added.</param>
        <summary>Retrieves the glyph as <param name="glyphIndex" />, setting <param name="isValidIndex" /> to <see langword="true" /> if the index is valid.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlyphRange">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GetGlyphRange (UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GetGlyphRange(class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GetGlyphRange(UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member GetGlyphRange : UIKit.NSTextContainer -&gt; Foundation.NSRange&#xA;override this.GetGlyphRange : UIKit.NSTextContainer -&gt; Foundation.NSRange" Usage="nSLayoutManager.GetGlyphRange container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("glyphRangeForTextContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>The range of glyph indices contained in the specified <see cref="T:UIKit.NSTextContainer" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetGlyphs">
      <MemberSignature Language="C#" Value="public nuint GetGlyphs (Foundation.NSRange glyphRange, short[] glyphBuffer, UIKit.NSGlyphProperty[] props, nuint[] charIndexBuffer, byte[] bidiLevelBuffer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.nuint GetGlyphs(valuetype Foundation.NSRange glyphRange, int16[] glyphBuffer, valuetype UIKit.NSGlyphProperty[] props, valuetype System.nuint[] charIndexBuffer, unsigned int8[] bidiLevelBuffer) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GetGlyphs(Foundation.NSRange,System.Int16[],UIKit.NSGlyphProperty[],System.nuint[],System.Byte[])" />
      <MemberSignature Language="F#" Value="member this.GetGlyphs : Foundation.NSRange * int16[] * UIKit.NSGlyphProperty[] * nuint[] * byte[] -&gt; nuint" Usage="nSLayoutManager.GetGlyphs (glyphRange, glyphBuffer, props, charIndexBuffer, bidiLevelBuffer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="glyphBuffer" Type="System.Int16[]" />
        <Parameter Name="props" Type="UIKit.NSGlyphProperty[]" />
        <Parameter Name="charIndexBuffer" Type="System.nuint[]" />
        <Parameter Name="bidiLevelBuffer" Type="System.Byte[]" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="glyphBuffer">To be added.</param>
        <param name="props">To be added.</param>
        <param name="charIndexBuffer">To be added.</param>
        <param name="bidiLevelBuffer">To be added.</param>
        <summary>Fills <param name="glyphBuffer" /> with the glyphs in <param name="glyphRange" />.</summary>
        <returns>The number of glyphs in <param name="glyphBuffer" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentInsertionPoints">
      <MemberSignature Language="C#" Value="public nuint GetLineFragmentInsertionPoints (nuint charIndex, bool alternatePosition, bool inDisplayOrder, nfloat[] positions, nint[] charIndexes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype System.nuint GetLineFragmentInsertionPoints(valuetype System.nuint charIndex, bool alternatePosition, bool inDisplayOrder, valuetype System.nfloat[] positions, valuetype System.nint[] charIndexes) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GetLineFragmentInsertionPoints(System.nuint,System.Boolean,System.Boolean,System.nfloat[],System.nint[])" />
      <MemberSignature Language="F#" Value="member this.GetLineFragmentInsertionPoints : nuint * bool * bool * nfloat[] * nint[] -&gt; nuint" Usage="nSLayoutManager.GetLineFragmentInsertionPoints (charIndex, alternatePosition, inDisplayOrder, positions, charIndexes)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nuint" />
        <Parameter Name="alternatePosition" Type="System.Boolean" />
        <Parameter Name="inDisplayOrder" Type="System.Boolean" />
        <Parameter Name="positions" Type="System.nfloat[]" />
        <Parameter Name="charIndexes" Type="System.nint[]" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <param name="alternatePosition">To be added.</param>
        <param name="inDisplayOrder">To be added.</param>
        <param name="positions">To be added.</param>
        <param name="charIndexes">To be added.</param>
        <summary>Fills <param name="positions" /> and <param name="charIndexes" /> with the positions and indices of the insertion points for a line fragment.</summary>
        <returns>The number of insertion points returned in <param name="positions" /> and <param name="charIndexes" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect GetLineFragmentRect (nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetLineFragmentRect(valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GetLineFragmentRect(System.nuint,Foundation.NSRange@,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetLineFragmentRect : nuint *  * bool -&gt; CoreGraphics.CGRect&#xA;override this.GetLineFragmentRect : nuint *  * bool -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentRect (glyphIndex, effectiveGlyphRange, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("lineFragmentRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">The index of the glyph for which the rect is requested.</param>
        <param name="effectiveGlyphRange">If not <see langword="null" />, the range of all glyphs in the line fragment.</param>
        <param name="withoutAdditionalLayout">If <see langword="true" />, glyph generation and layout are not performed.</param>
        <summary>Gets the line fragment <see cref="T:CoreGraphics.CGRect" /> containing the glyph at <param name="glyphIndex" />, with the option of not triggering layout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLineFragmentUsedRect">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect GetLineFragmentUsedRect (nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetLineFragmentUsedRect(valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GetLineFragmentUsedRect(System.nuint,Foundation.NSRange@,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetLineFragmentUsedRect : nuint *  * bool -&gt; CoreGraphics.CGRect&#xA;override this.GetLineFragmentUsedRect : nuint *  * bool -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetLineFragmentUsedRect (glyphIndex, effectiveGlyphRange, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("lineFragmentUsedRectForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">The index of the glyph for which the rect is requested.</param>
        <param name="effectiveGlyphRange">If not <see langword="null" />, the range of all glyphs in the line fragment.</param>
        <param name="withoutAdditionalLayout">If <see langword="true" />, glyph generation and layout are not performed.</param>
        <summary>Gets the usage <see cref="T:CoreGraphics.CGRect" /> containing the glyph at <param name="glyphIndex" />, with the option of not triggering layout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextContainer">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSTextContainer GetTextContainer (nuint glyphIndex, out Foundation.NSRange effectiveGlyphRange, bool withoutAdditionalLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSTextContainer GetTextContainer(valuetype System.nuint glyphIndex, [out] valuetype Foundation.NSRange&amp; effectiveGlyphRange, bool withoutAdditionalLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GetTextContainer(System.nuint,Foundation.NSRange@,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member GetTextContainer : nuint *  * bool -&gt; UIKit.NSTextContainer&#xA;override this.GetTextContainer : nuint *  * bool -&gt; UIKit.NSTextContainer" Usage="nSLayoutManager.GetTextContainer (glyphIndex, effectiveGlyphRange, withoutAdditionalLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textContainerForGlyphAtIndex:effectiveRange:withoutAdditionalLayout:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="out" />
        <Parameter Name="withoutAdditionalLayout" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">The index of the glyph for which the rect is requested.</param>
        <param name="effectiveGlyphRange">If not <see langword="null" />, the range of all glyphs in the line fragment.</param>
        <param name="withoutAdditionalLayout">If <see langword="true" />, glyph generation and layout are not performed.</param>
        <summary>Gets the <see cref="T:UIKit.NSTextContainer" /> containing the glyph at <param name="glyphIndex" />, with the option of not triggering layout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetUsedRectForTextContainer">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect GetUsedRectForTextContainer (UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetUsedRectForTextContainer(class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GetUsedRectForTextContainer(UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member GetUsedRectForTextContainer : UIKit.NSTextContainer -&gt; CoreGraphics.CGRect&#xA;override this.GetUsedRectForTextContainer : UIKit.NSTextContainer -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.GetUsedRectForTextContainer container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("usedRectForTextContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>The bounding rectangle in the <see cref="T:UIKit.NSTextContainer" />'s coordinates of the laid out glyphs in the <see cref="T:UIKit.NSTextContainer" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual ushort GlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int16 GlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GlyphAtIndex : nuint -&gt; uint16&#xA;override this.GlyphAtIndex : nuint -&gt; uint16" Usage="nSLayoutManager.GlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("glyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, "Use 'GetGlyph' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>Developers should not use this deprecated method. Developers should use <see cref="M:UIKit.NSLayoutManager.GetGlyph" /> instead.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual ushort GlyphAtIndex (nuint glyphIndex, ref bool isValidIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance unsigned int16 GlyphAtIndex(valuetype System.nuint glyphIndex, bool&amp; isValidIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GlyphAtIndex(System.nuint,System.Boolean@)" />
      <MemberSignature Language="F#" Value="abstract member GlyphAtIndex : nuint *  -&gt; uint16&#xA;override this.GlyphAtIndex : nuint *  -&gt; uint16" Usage="nSLayoutManager.GlyphAtIndex (glyphIndex, isValidIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("glyphAtIndex:isValidIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, "Use 'GetGlyph' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.UInt16</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="isValidIndex" Type="System.Boolean" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="isValidIndex">To be added.</param>
        <summary>Developers should use <see cref="M:UIKit.NSLayoutManager.GetGlyph" /> rather than this deprecated method.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphIndexForCharacterAtIndex">
      <MemberSignature Language="C#" Value="public virtual nuint GlyphIndexForCharacterAtIndex (nuint charIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GlyphIndexForCharacterAtIndex(valuetype System.nuint charIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GlyphIndexForCharacterAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GlyphIndexForCharacterAtIndex : nuint -&gt; nuint&#xA;override this.GlyphIndexForCharacterAtIndex : nuint -&gt; nuint" Usage="nSLayoutManager.GlyphIndexForCharacterAtIndex charIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("glyphIndexForCharacterAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="charIndex">To be added.</param>
        <summary>The glyph index for the character at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphIndexForPoint">
      <MemberSignature Language="C#" Value="public virtual nuint GlyphIndexForPoint (CoreGraphics.CGPoint point, UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GlyphIndexForPoint(valuetype CoreGraphics.CGPoint point, class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GlyphIndexForPoint(CoreGraphics.CGPoint,UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member GlyphIndexForPoint : CoreGraphics.CGPoint * UIKit.NSTextContainer -&gt; nuint&#xA;override this.GlyphIndexForPoint : CoreGraphics.CGPoint * UIKit.NSTextContainer -&gt; nuint" Usage="nSLayoutManager.GlyphIndexForPoint (point, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("glyphIndexForPoint:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="container">To be added.</param>
        <summary>Developers should call <see cref="M:UIKit.NSLayoutManager.GlyphIndexForPoint(CoreGraphics.CGPoint,UIKit.NSTextContainer,nfloat&amp;)" /> rather than this primitive method.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method is public for overriding purposes. Developers should call <see cref="M:UIKit.NSLayoutManager.GlyphIndexForPoint(CoreGraphics.CGPoint,UIKit.NSTextContainer,nfloat&amp;)" />  rather than this primitive method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphIndexForPoint">
      <MemberSignature Language="C#" Value="public virtual nuint GlyphIndexForPoint (CoreGraphics.CGPoint point, UIKit.NSTextContainer container, ref nfloat partialFraction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nuint GlyphIndexForPoint(valuetype CoreGraphics.CGPoint point, class UIKit.NSTextContainer container, valuetype System.nfloat&amp; partialFraction) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GlyphIndexForPoint(CoreGraphics.CGPoint,UIKit.NSTextContainer,System.nfloat@)" />
      <MemberSignature Language="F#" Value="abstract member GlyphIndexForPoint : CoreGraphics.CGPoint * UIKit.NSTextContainer *  -&gt; nuint&#xA;override this.GlyphIndexForPoint : CoreGraphics.CGPoint * UIKit.NSTextContainer *  -&gt; nuint" Usage="nSLayoutManager.GlyphIndexForPoint (point, container, partialFraction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("glyphIndexForPoint:inTextContainer:fractionOfDistanceThroughGlyph:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
        <Parameter Name="partialFraction" Type="System.nfloat" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="container">To be added.</param>
        <param name="partialFraction">To be added.</param>
        <summary>The glyph index for the glyph at <param name="point" />, in the <param name="container" /> object's coordinate system.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphRangeForBoundingRect">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GlyphRangeForBoundingRect (CoreGraphics.CGRect bounds, UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GlyphRangeForBoundingRect(valuetype CoreGraphics.CGRect bounds, class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GlyphRangeForBoundingRect(CoreGraphics.CGRect,UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member GlyphRangeForBoundingRect : CoreGraphics.CGRect * UIKit.NSTextContainer -&gt; Foundation.NSRange&#xA;override this.GlyphRangeForBoundingRect : CoreGraphics.CGRect * UIKit.NSTextContainer -&gt; Foundation.NSRange" Usage="nSLayoutManager.GlyphRangeForBoundingRect (bounds, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("glyphRangeForBoundingRect:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="CoreGraphics.CGRect" />
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="bounds">To be added.</param>
        <param name="container">To be added.</param>
        <summary>Returns the range of glyph indices that are at least partially in the <param name="bounds" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphRangeForBoundingRectWithoutAdditionalLayout">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange GlyphRangeForBoundingRectWithoutAdditionalLayout (CoreGraphics.CGRect bounds, UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange GlyphRangeForBoundingRectWithoutAdditionalLayout(valuetype CoreGraphics.CGRect bounds, class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GlyphRangeForBoundingRectWithoutAdditionalLayout(CoreGraphics.CGRect,UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member GlyphRangeForBoundingRectWithoutAdditionalLayout : CoreGraphics.CGRect * UIKit.NSTextContainer -&gt; Foundation.NSRange&#xA;override this.GlyphRangeForBoundingRectWithoutAdditionalLayout : CoreGraphics.CGRect * UIKit.NSTextContainer -&gt; Foundation.NSRange" Usage="nSLayoutManager.GlyphRangeForBoundingRectWithoutAdditionalLayout (bounds, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("glyphRangeForBoundingRectWithoutAdditionalLayout:inTextContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bounds" Type="CoreGraphics.CGRect" />
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="bounds">To be added.</param>
        <param name="container">To be added.</param>
        <summary>Returns the range of glyph indices that are at least partially in the <param name="bounds" /> without glyph production or layout.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphRangeForCharacterRange">
      <MemberSignature Language="C#" Value="public Foundation.NSRange GlyphRangeForCharacterRange (Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Foundation.NSRange GlyphRangeForCharacterRange(valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GlyphRangeForCharacterRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="member this.GlyphRangeForCharacterRange : Foundation.NSRange -&gt; Foundation.NSRange" Usage="nSLayoutManager.GlyphRangeForCharacterRange charRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <summary>The range of glyphs generated for the specified characters.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GlyphRangeForCharacterRange">
      <MemberSignature Language="C#" Value="public Foundation.NSRange GlyphRangeForCharacterRange (Foundation.NSRange charRange, ref Foundation.NSRange actualCharRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype Foundation.NSRange GlyphRangeForCharacterRange(valuetype Foundation.NSRange charRange, valuetype Foundation.NSRange&amp; actualCharRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.GlyphRangeForCharacterRange(Foundation.NSRange,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.GlyphRangeForCharacterRange : Foundation.NSRange *  -&gt; Foundation.NSRange" Usage="nSLayoutManager.GlyphRangeForCharacterRange (charRange, actualCharRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
        <Parameter Name="actualCharRange" Type="Foundation.NSRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <param name="actualCharRange">To be added.</param>
        <summary>The range of glyphs generated for the specified characters.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasNonContiguousLayout">
      <MemberSignature Language="C#" Value="public virtual bool HasNonContiguousLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasNonContiguousLayout" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.HasNonContiguousLayout" />
      <MemberSignature Language="F#" Value="member this.HasNonContiguousLayout : bool" Usage="UIKit.NSLayoutManager.HasNonContiguousLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("hasNonContiguousLayout")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the <see cref="T:UIKit.NSLayoutManager" /> currently contains any areas of noncontiguous layout.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Even if <see cref="P:UIKit.NSLayoutManager.AllowsNonContinguousLayout" /> is <see langword="true" />, this method may return <see langword="false" />, for instance, if layout is complete.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HyphenationFactor">
      <MemberSignature Language="C#" Value="public virtual nfloat HyphenationFactor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat HyphenationFactor" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.HyphenationFactor" />
      <MemberSignature Language="F#" Value="member this.HyphenationFactor : nfloat with get, set" Usage="UIKit.NSLayoutManager.HyphenationFactor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("hyphenationFactor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setHyphenationFactor:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The hyphenation threshold.</summary>
        <value>A value in the range 0 to 1. 0 indicates hyphenation is off, 1.0 causes hyphenation to always be attempted.</value>
        <remarks>
          <para>Application developers should prefer to set this value to 0.0, because hyphenation is slow and consumes memory.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertTextContainer">
      <MemberSignature Language="C#" Value="public virtual void InsertTextContainer (UIKit.NSTextContainer container, nint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertTextContainer(class UIKit.NSTextContainer container, valuetype System.nint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.InsertTextContainer(UIKit.NSTextContainer,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member InsertTextContainer : UIKit.NSTextContainer * nint -&gt; unit&#xA;override this.InsertTextContainer : UIKit.NSTextContainer * nint -&gt; unit" Usage="nSLayoutManager.InsertTextContainer (container, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("insertTextContainer:atIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
        <Parameter Name="index" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <param name="index">To be added.</param>
        <summary>Inserts the specified <see cref="T:UIKit.NSTextContainer" /> into <see cref="P:UIKit.NSLayoutManager.TextContainers" /> at the specified <paramref name="index" />.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:UIKit.NSLayoutManager.AddTextContainer" />
      </Docs>
    </Member>
    <Member MemberName="InvalidateDisplayForCharacterRange">
      <MemberSignature Language="C#" Value="public virtual void InvalidateDisplayForCharacterRange (Foundation.NSRange charRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateDisplayForCharacterRange(valuetype Foundation.NSRange charRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.InvalidateDisplayForCharacterRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateDisplayForCharacterRange : Foundation.NSRange -&gt; unit&#xA;override this.InvalidateDisplayForCharacterRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.InvalidateDisplayForCharacterRange charRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidateDisplayForCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <summary>Invalidates the display for the given character range.</summary>
        <remarks>
          <para>This method does not automatically trigger layout.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateDisplayForGlyphRange">
      <MemberSignature Language="C#" Value="public virtual void InvalidateDisplayForGlyphRange (Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateDisplayForGlyphRange(valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.InvalidateDisplayForGlyphRange(Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateDisplayForGlyphRange : Foundation.NSRange -&gt; unit&#xA;override this.InvalidateDisplayForGlyphRange : Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.InvalidateDisplayForGlyphRange glyphRange" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidateDisplayForGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <summary>Invalidates the display for the given glyph range.</summary>
        <remarks>
          <para>This method does not automatically trigger layout.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateGlyphs">
      <MemberSignature Language="C#" Value="public virtual void InvalidateGlyphs (Foundation.NSRange charRange, nint delta, out Foundation.NSRange actualCharRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateGlyphs(valuetype Foundation.NSRange charRange, valuetype System.nint delta, [out] valuetype Foundation.NSRange&amp; actualCharRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.InvalidateGlyphs(Foundation.NSRange,System.nint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateGlyphs : Foundation.NSRange * nint *  -&gt; unit&#xA;override this.InvalidateGlyphs : Foundation.NSRange * nint *  -&gt; unit" Usage="nSLayoutManager.InvalidateGlyphs (charRange, delta, actualCharRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidateGlyphsForCharacterRange:changeInLength:actualCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
        <Parameter Name="delta" Type="System.nint" />
        <Parameter Name="actualCharRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <param name="delta">To be added.</param>
        <param name="actualCharRange">To be added.</param>
        <summary>Invalidates the glyphs in the  <param name="charRange" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InvalidateLayout">
      <MemberSignature Language="C#" Value="public virtual void InvalidateLayout (Foundation.NSRange charRange, out Foundation.NSRange actualCharRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InvalidateLayout(valuetype Foundation.NSRange charRange, [out] valuetype Foundation.NSRange&amp; actualCharRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.InvalidateLayout(Foundation.NSRange,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="abstract member InvalidateLayout : Foundation.NSRange *  -&gt; unit&#xA;override this.InvalidateLayout : Foundation.NSRange *  -&gt; unit" Usage="nSLayoutManager.InvalidateLayout (charRange, actualCharRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("invalidateLayoutForCharacterRange:actualCharacterRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charRange" Type="Foundation.NSRange" />
        <Parameter Name="actualCharRange" Type="Foundation.NSRange" RefType="out" />
      </Parameters>
      <Docs>
        <param name="charRange">To be added.</param>
        <param name="actualCharRange">If not <see langword="null" />, on output holds the actual range invalidated.</param>
        <summary>Invalidates the layout for the specified character range. Does not automatically trigger re-layout.</summary>
        <remarks>
          <para>This method does not trigger either glyph generation or layout. Application developers will not normally need to call this method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidGlyphIndex">
      <MemberSignature Language="C#" Value="public virtual bool IsValidGlyphIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsValidGlyphIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.IsValidGlyphIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member IsValidGlyphIndex : nuint -&gt; bool&#xA;override this.IsValidGlyphIndex : nuint -&gt; bool" Usage="nSLayoutManager.IsValidGlyphIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("isValidGlyphIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>Whether the <paramref name="glyphIndex" /> specifies a valid glyph.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineFragmentRectForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect LineFragmentRectForGlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect LineFragmentRectForGlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.LineFragmentRectForGlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="member this.LineFragmentRectForGlyphAtIndex : nuint -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.LineFragmentRectForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>The RectangleF enclosing the line fragment in which the given glyph is laid out.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineFragmentRectForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect LineFragmentRectForGlyphAtIndex (nuint glyphIndex, ref Foundation.NSRange effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect LineFragmentRectForGlyphAtIndex(valuetype System.nuint glyphIndex, valuetype Foundation.NSRange&amp; effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.LineFragmentRectForGlyphAtIndex(System.nuint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.LineFragmentRectForGlyphAtIndex : nuint *  -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.LineFragmentRectForGlyphAtIndex (glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">On return, filled with the whole range of glyphs in the returned line fragment.</param>
        <summary>Returns the rectangle for the line fragment in which the glyph at <param name="glyphIndex" /> is laid out.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineFragmentUsedRectForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect LineFragmentUsedRectForGlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect LineFragmentUsedRectForGlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.LineFragmentUsedRectForGlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="member this.LineFragmentUsedRectForGlyphAtIndex : nuint -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.LineFragmentUsedRectForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>The RectangleF enclosing the line fragment for the glyph at the specified glyphIndex.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineFragmentUsedRectForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect LineFragmentUsedRectForGlyphAtIndex (nuint glyphIndex, ref Foundation.NSRange effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreGraphics.CGRect LineFragmentUsedRectForGlyphAtIndex(valuetype System.nuint glyphIndex, valuetype Foundation.NSRange&amp; effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.LineFragmentUsedRectForGlyphAtIndex(System.nuint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.LineFragmentUsedRectForGlyphAtIndex : nuint *  -&gt; CoreGraphics.CGRect" Usage="nSLayoutManager.LineFragmentUsedRectForGlyphAtIndex (glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>Returns the usage rectangle for the line fragment in which the glyph at <param name="glyphIndex" /> is laid out.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint LocationForGlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint LocationForGlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.LocationForGlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member LocationForGlyphAtIndex : nuint -&gt; CoreGraphics.CGPoint&#xA;override this.LocationForGlyphAtIndex : nuint -&gt; CoreGraphics.CGPoint" Usage="nSLayoutManager.LocationForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("locationForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>The location of the glyph at the specified index, relative to the containing line fragment's origin.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>This method will layout and generate glyphs for the line fragment containing the glyph at <paramref name="glyphIndex" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotShownAttributeForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual bool NotShownAttributeForGlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool NotShownAttributeForGlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.NotShownAttributeForGlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member NotShownAttributeForGlyphAtIndex : nuint -&gt; bool&#xA;override this.NotShownAttributeForGlyphAtIndex : nuint -&gt; bool" Usage="nSLayoutManager.NotShownAttributeForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("notShownAttributeForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>Whether the glyph at the specified index is shown.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>Glyphs such as tabs and newlines are not typically shown, but effect layout. Spaces are considered shown, as they "show" a characteristic displacement.</para>
          <para>This method will cause layout up to the specified index. If <see cref="P:UIKit.NSLayoutManager.AllowsNoncontiguousLayout" /> is <see langword="true" />, the layout will be confined to the containing line fragment.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfGlyphs">
      <MemberSignature Language="C#" Value="public virtual nuint NumberOfGlyphs { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint NumberOfGlyphs" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.NumberOfGlyphs" />
      <MemberSignature Language="F#" Value="member this.NumberOfGlyphs : nuint" Usage="UIKit.NSLayoutManager.NumberOfGlyphs" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("numberOfGlyphs")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The number of glyphs in the <see cref="T:UIKit.NSLayoutManager" />.</summary>
        <value>To be added.</value>
        <remarks>
          <para>If <see cref="P:UIKit.NSLayoutManager.AllowsNonContinuousLayout" /> is <see langword="false" />, this method will force glyph generation for all characters.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessEditing">
      <MemberSignature Language="C#" Value="public virtual void ProcessEditing (UIKit.NSTextStorage textStorage, UIKit.NSTextStorageEditActions editMask, Foundation.NSRange newCharRange, nint delta, Foundation.NSRange invalidatedCharRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ProcessEditing(class UIKit.NSTextStorage textStorage, valuetype UIKit.NSTextStorageEditActions editMask, valuetype Foundation.NSRange newCharRange, valuetype System.nint delta, valuetype Foundation.NSRange invalidatedCharRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.ProcessEditing(UIKit.NSTextStorage,UIKit.NSTextStorageEditActions,Foundation.NSRange,System.nint,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member ProcessEditing : UIKit.NSTextStorage * UIKit.NSTextStorageEditActions * Foundation.NSRange * nint * Foundation.NSRange -&gt; unit&#xA;override this.ProcessEditing : UIKit.NSTextStorage * UIKit.NSTextStorageEditActions * Foundation.NSRange * nint * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.ProcessEditing (textStorage, editMask, newCharRange, delta, invalidatedCharRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("processEditingForTextStorage:edited:range:changeInLength:invalidatedRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textStorage" Type="UIKit.NSTextStorage" />
        <Parameter Name="editMask" Type="UIKit.NSTextStorageEditActions" />
        <Parameter Name="newCharRange" Type="Foundation.NSRange" />
        <Parameter Name="delta" Type="System.nint" />
        <Parameter Name="invalidatedCharRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="textStorage">To be added.</param>
        <param name="editMask">To be added.</param>
        <param name="newCharRange">To be added.</param>
        <param name="delta">To be added.</param>
        <param name="invalidatedCharRange">To be added.</param>
        <summary>Notifies the <see cref="T:UIKit.NSLayoutManager" /> of an edit action.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSGlyphProperty PropertyForGlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.NSGlyphProperty PropertyForGlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.PropertyForGlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member PropertyForGlyphAtIndex : nuint -&gt; UIKit.NSGlyphProperty&#xA;override this.PropertyForGlyphAtIndex : nuint -&gt; UIKit.NSGlyphProperty" Usage="nSLayoutManager.PropertyForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("propertyForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSGlyphProperty</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>The <see cref="T:UIKit.NSGlyphProperty" /> for the glyph at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RangeOfNominallySpacedGlyphsContainingIndex">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange RangeOfNominallySpacedGlyphsContainingIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange RangeOfNominallySpacedGlyphsContainingIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.RangeOfNominallySpacedGlyphsContainingIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member RangeOfNominallySpacedGlyphsContainingIndex : nuint -&gt; Foundation.NSRange&#xA;override this.RangeOfNominallySpacedGlyphsContainingIndex : nuint -&gt; Foundation.NSRange" Usage="nSLayoutManager.RangeOfNominallySpacedGlyphsContainingIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("rangeOfNominallySpacedGlyphsContainingIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>The largest range of glyphs surrounding the glyph at the specified index that can be displayed using only advancement, not pairwise kerning or other adjustments.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTextContainer">
      <MemberSignature Language="C#" Value="public virtual void RemoveTextContainer (nint index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTextContainer(valuetype System.nint index) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.RemoveTextContainer(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member RemoveTextContainer : nint -&gt; unit&#xA;override this.RemoveTextContainer : nint -&gt; unit" Usage="nSLayoutManager.RemoveTextContainer index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeTextContainerAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>Removes the specified <see cref="T:UIKit.NSTextContainer" /> from the <see cref="P:UIKit.NSLayoutManager.TextContainers" /> array. Invalidates layout as necessary.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAttachmentSize">
      <MemberSignature Language="C#" Value="public virtual void SetAttachmentSize (CoreGraphics.CGSize attachmentSize, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetAttachmentSize(valuetype CoreGraphics.CGSize attachmentSize, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.SetAttachmentSize(CoreGraphics.CGSize,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetAttachmentSize : CoreGraphics.CGSize * Foundation.NSRange -&gt; unit&#xA;override this.SetAttachmentSize : CoreGraphics.CGSize * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetAttachmentSize (attachmentSize, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setAttachmentSize:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attachmentSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="attachmentSize">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>Sets the size for the glyph to draw within the <param name="glyphRange" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDrawsOutsideLineFragment">
      <MemberSignature Language="C#" Value="public virtual void SetDrawsOutsideLineFragment (bool flag, nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDrawsOutsideLineFragment(bool flag, valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.SetDrawsOutsideLineFragment(System.Boolean,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member SetDrawsOutsideLineFragment : bool * nuint -&gt; unit&#xA;override this.SetDrawsOutsideLineFragment : bool * nuint -&gt; unit" Usage="nSLayoutManager.SetDrawsOutsideLineFragment (flag, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setDrawsOutsideLineFragment:forGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Boolean" />
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="flag">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>Specifies whether the glyph at the specified index draws outside the bounds of its line segment.</summary>
        <remarks>
          <para>This method is generally only called by custom typesetters.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetExtraLineFragmentRect">
      <MemberSignature Language="C#" Value="public virtual void SetExtraLineFragmentRect (CoreGraphics.CGRect fragmentRect, CoreGraphics.CGRect usedRect, UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetExtraLineFragmentRect(valuetype CoreGraphics.CGRect fragmentRect, valuetype CoreGraphics.CGRect usedRect, class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.SetExtraLineFragmentRect(CoreGraphics.CGRect,CoreGraphics.CGRect,UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member SetExtraLineFragmentRect : CoreGraphics.CGRect * CoreGraphics.CGRect * UIKit.NSTextContainer -&gt; unit&#xA;override this.SetExtraLineFragmentRect : CoreGraphics.CGRect * CoreGraphics.CGRect * UIKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.SetExtraLineFragmentRect (fragmentRect, usedRect, container)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setExtraLineFragmentRect:usedRect:textContainer:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragmentRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="usedRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="fragmentRect">To be added.</param>
        <param name="usedRect">To be added.</param>
        <param name="container">To be added.</param>
        <summary>Sets the details for the extra line fragment required when the text back is either totally empty or ends with a hard line break.</summary>
        <remarks>
          <para>Developers should only call this method when implementing custom typesetting.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetGlyphs">
      <MemberSignature Language="C#" Value="public virtual void SetGlyphs (IntPtr glyphs, IntPtr props, IntPtr charIndexes, UIKit.UIFont aFont, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetGlyphs(native int glyphs, native int props, native int charIndexes, class UIKit.UIFont aFont, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.SetGlyphs(System.IntPtr,System.IntPtr,System.IntPtr,UIKit.UIFont,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetGlyphs : nativeint * nativeint * nativeint * UIKit.UIFont * Foundation.NSRange -&gt; unit&#xA;override this.SetGlyphs : nativeint * nativeint * nativeint * UIKit.UIFont * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetGlyphs (glyphs, props, charIndexes, aFont, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setGlyphs:properties:characterIndexes:font:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphs" Type="System.IntPtr" />
        <Parameter Name="props" Type="System.IntPtr" />
        <Parameter Name="charIndexes" Type="System.IntPtr" />
        <Parameter Name="aFont" Type="UIKit.UIFont" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="glyphs">To be added.</param>
        <param name="props">To be added.</param>
        <param name="charIndexes">To be added.</param>
        <param name="aFont">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>Specifies the initial glyphs and glyph properties for the specified character range.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLineFragmentRect">
      <MemberSignature Language="C#" Value="public virtual void SetLineFragmentRect (CoreGraphics.CGRect fragmentRect, Foundation.NSRange glyphRange, CoreGraphics.CGRect usedRect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLineFragmentRect(valuetype CoreGraphics.CGRect fragmentRect, valuetype Foundation.NSRange glyphRange, valuetype CoreGraphics.CGRect usedRect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.SetLineFragmentRect(CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member SetLineFragmentRect : CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGRect -&gt; unit&#xA;override this.SetLineFragmentRect : CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGRect -&gt; unit" Usage="nSLayoutManager.SetLineFragmentRect (fragmentRect, glyphRange, usedRect)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setLineFragmentRect:forGlyphRange:usedRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fragmentRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="usedRect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="fragmentRect">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <param name="usedRect">To be added.</param>
        <summary>Associated the line fragment with bounds <param name="fragmentRect" /> with the glyphs in <param name="glyphRange" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetLocation">
      <MemberSignature Language="C#" Value="public virtual void SetLocation (CoreGraphics.CGPoint location, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetLocation(valuetype CoreGraphics.CGPoint location, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.SetLocation(CoreGraphics.CGPoint,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetLocation : CoreGraphics.CGPoint * Foundation.NSRange -&gt; unit&#xA;override this.SetLocation : CoreGraphics.CGPoint * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetLocation (location, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setLocation:forStartOfGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="location" Type="CoreGraphics.CGPoint" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="location">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>Sets the <param name="location" /> for the first glyph in <param name="glyphRange" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetNotShownAttribute">
      <MemberSignature Language="C#" Value="public virtual void SetNotShownAttribute (bool flag, nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetNotShownAttribute(bool flag, valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.SetNotShownAttribute(System.Boolean,System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member SetNotShownAttribute : bool * nuint -&gt; unit&#xA;override this.SetNotShownAttribute : bool * nuint -&gt; unit" Usage="nSLayoutManager.SetNotShownAttribute (flag, glyphIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setNotShownAttribute:forGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flag" Type="System.Boolean" />
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="flag">To be added.</param>
        <param name="glyphIndex">To be added.</param>
        <summary>Specifies that the glyph at the specified index should be marked as not shown.</summary>
        <remarks>
          <para>This method is generally only called by custom typesetters.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTextContainer">
      <MemberSignature Language="C#" Value="public virtual void SetTextContainer (UIKit.NSTextContainer container, Foundation.NSRange glyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTextContainer(class UIKit.NSTextContainer container, valuetype Foundation.NSRange glyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.SetTextContainer(UIKit.NSTextContainer,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member SetTextContainer : UIKit.NSTextContainer * Foundation.NSRange -&gt; unit&#xA;override this.SetTextContainer : UIKit.NSTextContainer * Foundation.NSRange -&gt; unit" Usage="nSLayoutManager.SetTextContainer (container, glyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setTextContainer:forGlyphRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <param name="glyphRange">To be added.</param>
        <summary>Sets the NSTextContainer for the specified glyph range.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowCGGlyphs">
      <MemberSignature Language="C#" Value="public void ShowCGGlyphs (short[] glyphs, CoreGraphics.CGPoint[] positions, nuint glyphCount, UIKit.UIFont font, CoreGraphics.CGAffineTransform textMatrix, Foundation.NSDictionary attributes, CoreGraphics.CGContext graphicsContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShowCGGlyphs(int16[] glyphs, valuetype CoreGraphics.CGPoint[] positions, valuetype System.nuint glyphCount, class UIKit.UIFont font, valuetype CoreGraphics.CGAffineTransform textMatrix, class Foundation.NSDictionary attributes, class CoreGraphics.CGContext graphicsContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.ShowCGGlyphs(System.Int16[],CoreGraphics.CGPoint[],System.nuint,UIKit.UIFont,CoreGraphics.CGAffineTransform,Foundation.NSDictionary,CoreGraphics.CGContext)" />
      <MemberSignature Language="F#" Value="member this.ShowCGGlyphs : int16[] * CoreGraphics.CGPoint[] * nuint * UIKit.UIFont * CoreGraphics.CGAffineTransform * Foundation.NSDictionary * CoreGraphics.CGContext -&gt; unit" Usage="nSLayoutManager.ShowCGGlyphs (glyphs, positions, glyphCount, font, textMatrix, attributes, graphicsContext)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphs" Type="System.Int16[]" />
        <Parameter Name="positions" Type="CoreGraphics.CGPoint[]" />
        <Parameter Name="glyphCount" Type="System.nuint" />
        <Parameter Name="font" Type="UIKit.UIFont" />
        <Parameter Name="textMatrix" Type="CoreGraphics.CGAffineTransform" />
        <Parameter Name="attributes" Type="Foundation.NSDictionary" />
        <Parameter Name="graphicsContext" Type="CoreGraphics.CGContext" />
      </Parameters>
      <Docs>
        <param name="glyphs">To be added.</param>
        <param name="positions">To be added.</param>
        <param name="glyphCount">To be added.</param>
        <param name="font">To be added.</param>
        <param name="textMatrix">To be added.</param>
        <param name="attributes">To be added.</param>
        <param name="graphicsContext">To be added.</param>
        <summary>Renders <param name="glyphs" /> at <param name="positions" /> into <param name="graphicsContext" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsControlCharacters">
      <MemberSignature Language="C#" Value="public virtual bool ShowsControlCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsControlCharacters" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.ShowsControlCharacters" />
      <MemberSignature Language="F#" Value="member this.ShowsControlCharacters : bool with get, set" Usage="UIKit.NSLayoutManager.ShowsControlCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("showsControlCharacters")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setShowsControlCharacters:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether control characters should be shown or not.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowsInvisibleCharacters">
      <MemberSignature Language="C#" Value="public virtual bool ShowsInvisibleCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowsInvisibleCharacters" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.ShowsInvisibleCharacters" />
      <MemberSignature Language="F#" Value="member this.ShowsInvisibleCharacters : bool with get, set" Usage="UIKit.NSLayoutManager.ShowsInvisibleCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("showsInvisibleCharacters")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setShowsInvisibleCharacters:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether normally-invisible characters such as whitespace should have visible glyphs.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Strikethrough">
      <MemberSignature Language="C#" Value="public virtual void Strikethrough (Foundation.NSRange glyphRange, Foundation.NSUnderlineStyle strikethroughVal, CoreGraphics.CGRect lineRect, Foundation.NSRange lineGlyphRange, CoreGraphics.CGPoint containerOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Strikethrough(valuetype Foundation.NSRange glyphRange, valuetype Foundation.NSUnderlineStyle strikethroughVal, valuetype CoreGraphics.CGRect lineRect, valuetype Foundation.NSRange lineGlyphRange, valuetype CoreGraphics.CGPoint containerOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.Strikethrough(Foundation.NSRange,Foundation.NSUnderlineStyle,CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member Strikethrough : Foundation.NSRange * Foundation.NSUnderlineStyle * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.Strikethrough : Foundation.NSRange * Foundation.NSUnderlineStyle * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.Strikethrough (glyphRange, strikethroughVal, lineRect, lineGlyphRange, containerOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("strikethroughGlyphRange:strikethroughType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="strikethroughVal" Type="Foundation.NSUnderlineStyle" />
        <Parameter Name="lineRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="lineGlyphRange" Type="Foundation.NSRange" />
        <Parameter Name="containerOrigin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="strikethroughVal">To be added.</param>
        <param name="lineRect">To be added.</param>
        <param name="lineGlyphRange">To be added.</param>
        <param name="containerOrigin">To be added.</param>
        <summary>Draws a strikethrough through the glyphs at <param name="glyphRange" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContainerChangedGeometry">
      <MemberSignature Language="C#" Value="public virtual void TextContainerChangedGeometry (UIKit.NSTextContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TextContainerChangedGeometry(class UIKit.NSTextContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.TextContainerChangedGeometry(UIKit.NSTextContainer)" />
      <MemberSignature Language="F#" Value="abstract member TextContainerChangedGeometry : UIKit.NSTextContainer -&gt; unit&#xA;override this.TextContainerChangedGeometry : UIKit.NSTextContainer -&gt; unit" Usage="nSLayoutManager.TextContainerChangedGeometry container" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textContainerChangedGeometry:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="container" Type="UIKit.NSTextContainer" />
      </Parameters>
      <Docs>
        <param name="container">To be added.</param>
        <summary>Invalidates the layout information and glyphs for the specified <see cref="T:UIKit.NSTextContainer" /> and any following.</summary>
        <remarks>
          <para>Application developers will typically not need to call this method unless they have subclassed <see cref="T:UIKit.NSTextContainer" /> (for example, creating a <see cref="T:UIKit.NSTextContainer" /> subclass that changes shape to accomodate placed graphics).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContainerForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public UIKit.NSTextContainer TextContainerForGlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.NSTextContainer TextContainerForGlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.TextContainerForGlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="member this.TextContainerForGlyphAtIndex : nuint -&gt; UIKit.NSTextContainer" Usage="nSLayoutManager.TextContainerForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>The NSTextContainer in which the specified glyph is laid out.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContainerForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public UIKit.NSTextContainer TextContainerForGlyphAtIndex (nuint glyphIndex, ref Foundation.NSRange effectiveGlyphRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.NSTextContainer TextContainerForGlyphAtIndex(valuetype System.nuint glyphIndex, valuetype Foundation.NSRange&amp; effectiveGlyphRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.TextContainerForGlyphAtIndex(System.nuint,Foundation.NSRange@)" />
      <MemberSignature Language="F#" Value="member this.TextContainerForGlyphAtIndex : nuint *  -&gt; UIKit.NSTextContainer" Usage="nSLayoutManager.TextContainerForGlyphAtIndex (glyphIndex, effectiveGlyphRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.NSTextContainer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
        <Parameter Name="effectiveGlyphRange" Type="Foundation.NSRange" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <param name="effectiveGlyphRange">To be added.</param>
        <summary>Gets the <see cref="T:UIKit.NSTextContainer" /> containing the glyph at <param name="glyphIndex" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextContainers">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSTextContainer[] TextContainers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.NSTextContainer[] TextContainers" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.TextContainers" />
      <MemberSignature Language="F#" Value="member this.TextContainers : UIKit.NSTextContainer[]" Usage="UIKit.NSLayoutManager.TextContainers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("textContainers")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSTextContainer[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:UIKit.NSTextContainer" />s that model the geometric layout of a document.</summary>
        <value>To be added.</value>
        <remarks>
          <para>The <see cref="T:UIKit.NSLayoutManager" /> lays out the text in its <see cref="P:UIKit.NSLayoutManager.TextStorage" /> property in the <see cref="T:UIKit.NSTextContainer" />s of this property, starting with the <see cref="T:UIKit.NSTextContainer" /> at index 0. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextStorage">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSTextStorage TextStorage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.NSTextStorage TextStorage" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.TextStorage" />
      <MemberSignature Language="F#" Value="member this.TextStorage : UIKit.NSTextStorage with get, set" Usage="UIKit.NSLayoutManager.TextStorage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("textStorage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setTextStorage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("textStorage", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setTextStorage:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSTextStorage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:UIKit.NSTextStorage" /> that holds the styled text to be laid out.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TruncatedGlyphRangeInLineFragmentForGlyphAtIndex">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSRange TruncatedGlyphRangeInLineFragmentForGlyphAtIndex (nuint glyphIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSRange TruncatedGlyphRangeInLineFragmentForGlyphAtIndex(valuetype System.nuint glyphIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.TruncatedGlyphRangeInLineFragmentForGlyphAtIndex(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member TruncatedGlyphRangeInLineFragmentForGlyphAtIndex : nuint -&gt; Foundation.NSRange&#xA;override this.TruncatedGlyphRangeInLineFragmentForGlyphAtIndex : nuint -&gt; Foundation.NSRange" Usage="nSLayoutManager.TruncatedGlyphRangeInLineFragmentForGlyphAtIndex glyphIndex" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("truncatedGlyphRangeInLineFragmentForGlyphAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphIndex" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="glyphIndex">To be added.</param>
        <summary>The range of truncated glyphs for a line fragment containing the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Underline">
      <MemberSignature Language="C#" Value="public virtual void Underline (Foundation.NSRange glyphRange, Foundation.NSUnderlineStyle underlineVal, CoreGraphics.CGRect lineRect, Foundation.NSRange lineGlyphRange, CoreGraphics.CGPoint containerOrigin);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Underline(valuetype Foundation.NSRange glyphRange, valuetype Foundation.NSUnderlineStyle underlineVal, valuetype CoreGraphics.CGRect lineRect, valuetype Foundation.NSRange lineGlyphRange, valuetype CoreGraphics.CGPoint containerOrigin) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.NSLayoutManager.Underline(Foundation.NSRange,Foundation.NSUnderlineStyle,CoreGraphics.CGRect,Foundation.NSRange,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member Underline : Foundation.NSRange * Foundation.NSUnderlineStyle * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit&#xA;override this.Underline : Foundation.NSRange * Foundation.NSUnderlineStyle * CoreGraphics.CGRect * Foundation.NSRange * CoreGraphics.CGPoint -&gt; unit" Usage="nSLayoutManager.Underline (glyphRange, underlineVal, lineRect, lineGlyphRange, containerOrigin)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("underlineGlyphRange:underlineType:lineFragmentRect:lineFragmentGlyphRange:containerOrigin:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="glyphRange" Type="Foundation.NSRange" />
        <Parameter Name="underlineVal" Type="Foundation.NSUnderlineStyle" />
        <Parameter Name="lineRect" Type="CoreGraphics.CGRect" />
        <Parameter Name="lineGlyphRange" Type="Foundation.NSRange" />
        <Parameter Name="containerOrigin" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="glyphRange">To be added.</param>
        <param name="underlineVal">To be added.</param>
        <param name="lineRect">To be added.</param>
        <param name="lineGlyphRange">To be added.</param>
        <param name="containerOrigin">To be added.</param>
        <summary>Underlines the glyphs in <param name="glyphRange" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesFontLeading">
      <MemberSignature Language="C#" Value="public virtual bool UsesFontLeading { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesFontLeading" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.UsesFontLeading" />
      <MemberSignature Language="F#" Value="member this.UsesFontLeading : bool with get, set" Usage="UIKit.NSLayoutManager.UsesFontLeading" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("usesFontLeading")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setUsesFontLeading:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the <see cref="T:UIKit.NSLayoutManager" /> should use the leading provided in the font.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.NSLayoutManager.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="UIKit.NSLayoutManager.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
