<Type Name="UICollectionViewController" FullName="UIKit.UICollectionViewController">
  <TypeSignature Language="C#" Value="public class UICollectionViewController : UIKit.UIViewController, IDisposable, UIKit.IUICollectionViewSource" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UICollectionViewController extends UIKit.UIViewController implements class Foundation.INSCoding, class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUICollectionViewDataSource, class UIKit.IUICollectionViewDelegate, class UIKit.IUICollectionViewSource, class UIKit.IUIScrollViewDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UICollectionViewController" />
  <TypeSignature Language="F#" Value="type UICollectionViewController = class&#xA;    inherit UIViewController&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUICollectionViewDataSource&#xA;    interface IUICollectionViewDelegate&#xA;    interface IUIScrollViewDelegate&#xA;    interface IUICollectionViewSource" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIViewController</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUICollectionViewDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUICollectionViewDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUICollectionViewSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIScrollViewDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UICollectionViewController", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A <see cref="T:UIKit.UIViewController" /> subtype for controlling collection views.</summary>
    <remarks>
      <para>
        The <see cref="T:UIKit.UICollectionViewController" /> is a subtype of <see cref="T:UIKit.UIViewController" /> for controlling collections of <see cref="T:UIKit.UICollectionViewCell" />s as well as supplementary and decoration <see cref="T:UIKit.UIView" />s. 
      </para>
    </remarks>
    <related type="article" href="http://docs.xamarin.com/ios/Guides/User_Interface/Introduction_to_CollectionViews" />
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewController_clas/index.html">Apple documentation for <c>UICollectionViewController</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewController (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewController : Foundation.NSCoder -&gt; UIKit.UICollectionViewController" Usage="new UIKit.UICollectionViewController coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UICollectionViewController (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewController : Foundation.NSObjectFlag -&gt; UIKit.UICollectionViewController" Usage="new UIKit.UICollectionViewController t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UICollectionViewController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewController : nativeint -&gt; UIKit.UICollectionViewController" Usage="new UIKit.UICollectionViewController handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewController (UIKit.UICollectionViewLayout layout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.UICollectionViewLayout layout) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.#ctor(UIKit.UICollectionViewLayout)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewController : UIKit.UICollectionViewLayout -&gt; UIKit.UICollectionViewController" Usage="new UIKit.UICollectionViewController layout" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCollectionViewLayout:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="layout" Type="UIKit.UICollectionViewLayout" />
      </Parameters>
      <Docs>
        <param name="layout">Layout that is to be associated with the collection view.</param>
        <summary>Constructor, initializes a new instance of this class, configuring the collection view with the provided layout.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewController (string nibName, Foundation.NSBundle bundle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string nibName, class Foundation.NSBundle bundle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.#ctor(System.String,Foundation.NSBundle)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewController : string * Foundation.NSBundle -&gt; UIKit.UICollectionViewController" Usage="new UIKit.UICollectionViewController (nibName, bundle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithNibName:bundle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nibName" Type="System.String" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
      </Parameters>
      <Docs>
        <param name="nibName">
          <para>The NIB name or null.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="bundle">
          <para>The bundle where the search for the NIB takes place, if you pass null, this searches for the NIB on the main bundle.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Constructor, initializes a new instance of this class, configuring the collection view from a specified nib file.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanFocusItem">
      <MemberSignature Language="C#" Value="public virtual bool CanFocusItem (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanFocusItem(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.CanFocusItem(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member CanFocusItem : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool&#xA;override this.CanFocusItem : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool" Usage="uICollectionViewController.CanFocusItem (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:canFocusItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">The <see cref="T:UIKit.UICollectionView" /> is associated with <c>this</c>.</param>
        <param name="indexPath">The <see cref="T:Foundation.NSIndexPath" /> of the item being checked.</param>
        <summary>Whether the item at <paramref name="indexPath" /> can be focused.</summary>
        <returns>Returns <see langword="true" /> if the item can be focused.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanMoveItem">
      <MemberSignature Language="C#" Value="public virtual bool CanMoveItem (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanMoveItem(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.CanMoveItem(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member CanMoveItem : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool&#xA;override this.CanMoveItem : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool" Usage="uICollectionViewController.CanMoveItem (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:canMoveItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <param name="indexPath">To be added.</param>
        <summary>Whether the cell at the specified <paramref name="indexPath" /> can be interactively moved.</summary>
        <returns>The default value is <see langword="true" />, allowing cells to be reordered.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanPerformAction">
      <MemberSignature Language="C#" Value="public virtual bool CanPerformAction (UIKit.UICollectionView collectionView, ObjCRuntime.Selector action, Foundation.NSIndexPath indexPath, Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanPerformAction(class UIKit.UICollectionView collectionView, class ObjCRuntime.Selector action, class Foundation.NSIndexPath indexPath, class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.CanPerformAction(UIKit.UICollectionView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member CanPerformAction : UIKit.UICollectionView * ObjCRuntime.Selector * Foundation.NSIndexPath * Foundation.NSObject -&gt; bool&#xA;override this.CanPerformAction : UIKit.UICollectionView * ObjCRuntime.Selector * Foundation.NSIndexPath * Foundation.NSObject -&gt; bool" Usage="uICollectionViewController.CanPerformAction (collectionView, action, indexPath, sender)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:canPerformAction:forItemAtIndexPath:withSender:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="action">The action that is to be performed.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <param name="sender">Initiator for the action.</param>
        <summary>Whether the edit menu should have Copy and Paste commands for the specified cell.</summary>
        <returns>Returns <see langword="true" /> if the specified command corresponding to the action should appear in the editing menu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CellDisplayingEnded">
      <MemberSignature Language="C#" Value="public virtual void CellDisplayingEnded (UIKit.UICollectionView collectionView, UIKit.UICollectionViewCell cell, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CellDisplayingEnded(class UIKit.UICollectionView collectionView, class UIKit.UICollectionViewCell cell, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.CellDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member CellDisplayingEnded : UIKit.UICollectionView * UIKit.UICollectionViewCell * Foundation.NSIndexPath -&gt; unit&#xA;override this.CellDisplayingEnded : UIKit.UICollectionView * UIKit.UICollectionViewCell * Foundation.NSIndexPath -&gt; unit" Usage="uICollectionViewController.CellDisplayingEnded (collectionView, cell, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:didEndDisplayingCell:forItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="cell" Type="UIKit.UICollectionViewCell" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="cell">Cell that was selected.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Indicates that the cell at the specified indexPath has been removed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewController.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UICollectionViewController.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearsSelectionOnViewWillAppear">
      <MemberSignature Language="C#" Value="public virtual bool ClearsSelectionOnViewWillAppear { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClearsSelectionOnViewWillAppear" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewController.ClearsSelectionOnViewWillAppear" />
      <MemberSignature Language="F#" Value="member this.ClearsSelectionOnViewWillAppear : bool with get, set" Usage="UIKit.UICollectionViewController.ClearsSelectionOnViewWillAppear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("clearsSelectionOnViewWillAppear")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setClearsSelectionOnViewWillAppear:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UICollectionViewController clears the selection when the UICollectionView appears.</summary>
        <value>If <see langword="true" />, then the controller will clear the selection when the collection first appears.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionView CollectionView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UICollectionView CollectionView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewController.CollectionView" />
      <MemberSignature Language="F#" Value="member this.CollectionView : UIKit.UICollectionView with get, set" Usage="UIKit.UICollectionViewController.CollectionView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("collectionView")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setCollectionView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("collectionView", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setCollectionView:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UICollectionView managed by this UICollectionViewController.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationEnded">
      <MemberSignature Language="C#" Value="public virtual void DecelerationEnded (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DecelerationEnded(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.DecelerationEnded(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member DecelerationEnded : UIKit.UIScrollView -&gt; unit&#xA;override this.DecelerationEnded : UIKit.UIScrollView -&gt; unit" Usage="uICollectionViewController.DecelerationEnded scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewDidEndDecelerating:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <summary>Indicates that, subsequent to scrolling, deceleration has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DecelerationStarted">
      <MemberSignature Language="C#" Value="public virtual void DecelerationStarted (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DecelerationStarted(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.DecelerationStarted(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member DecelerationStarted : UIKit.UIScrollView -&gt; unit&#xA;override this.DecelerationStarted : UIKit.UIScrollView -&gt; unit" Usage="uICollectionViewController.DecelerationStarted scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewWillBeginDecelerating:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <summary>Indicates that deceleration of scrolling has begun.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidChangeAdjustedContentInset">
      <MemberSignature Language="C#" Value="public virtual void DidChangeAdjustedContentInset (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidChangeAdjustedContentInset(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.DidChangeAdjustedContentInset(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member DidChangeAdjustedContentInset : UIKit.UIScrollView -&gt; unit&#xA;override this.DidChangeAdjustedContentInset : UIKit.UIScrollView -&gt; unit" Usage="uICollectionViewController.DidChangeAdjustedContentInset scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewDidChangeAdjustedContentInset:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scroll view whose insets changed.</param>
        <summary>Method that is called when the inset values change.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateFocus">
      <MemberSignature Language="C#" Value="public virtual void DidUpdateFocus (UIKit.UICollectionView collectionView, UIKit.UICollectionViewFocusUpdateContext context, UIKit.UIFocusAnimationCoordinator coordinator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidUpdateFocus(class UIKit.UICollectionView collectionView, class UIKit.UICollectionViewFocusUpdateContext context, class UIKit.UIFocusAnimationCoordinator coordinator) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.DidUpdateFocus(UIKit.UICollectionView,UIKit.UICollectionViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)" />
      <MemberSignature Language="F#" Value="override this.DidUpdateFocus : UIKit.UICollectionView * UIKit.UICollectionViewFocusUpdateContext * UIKit.UIFocusAnimationCoordinator -&gt; unit" Usage="uICollectionViewController.DidUpdateFocus (collectionView, context, coordinator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:didUpdateFocusInContext:withAnimationCoordinator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="context" Type="UIKit.UICollectionViewFocusUpdateContext" />
        <Parameter Name="coordinator" Type="UIKit.UIFocusAnimationCoordinator" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <param name="context">Metadata for the focus change.</param>
        <param name="coordinator">The <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=UIKit%20UIFocus%20Animation%20Controller&amp;scope=Xamarin" title="T:UIKit.UIFocusAnimationController">T:UIKit.UIFocusAnimationController</a></format> coordinating the focus-change animations.</param>
        <summary>Delegate method called shortly after focus has changed to a new <see cref="T:UIKit.UIView" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidZoom">
      <MemberSignature Language="C#" Value="public virtual void DidZoom (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidZoom(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.DidZoom(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member DidZoom : UIKit.UIScrollView -&gt; unit&#xA;override this.DidZoom : UIKit.UIScrollView -&gt; unit" Usage="uICollectionViewController.DidZoom scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewDidZoom:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <summary>Indicates that a zoom has occurred in the UICollectionView.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DraggingEnded">
      <MemberSignature Language="C#" Value="public virtual void DraggingEnded (UIKit.UIScrollView scrollView, bool willDecelerate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DraggingEnded(class UIKit.UIScrollView scrollView, bool willDecelerate) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.DraggingEnded(UIKit.UIScrollView,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DraggingEnded : UIKit.UIScrollView * bool -&gt; unit&#xA;override this.DraggingEnded : UIKit.UIScrollView * bool -&gt; unit" Usage="uICollectionViewController.DraggingEnded (scrollView, willDecelerate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewDidEndDragging:willDecelerate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
        <Parameter Name="willDecelerate" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <param name="willDecelerate">
          <see langword="true" /> if the scrolling movement continues, but will decelerate, after a touch-up gesture during a dragging operation.<see langword="false" /> if scrolling is to stop immediately upon touch-up.</param>
        <summary>Indicates that dragging has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DraggingStarted">
      <MemberSignature Language="C#" Value="public virtual void DraggingStarted (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DraggingStarted(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.DraggingStarted(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member DraggingStarted : UIKit.UIScrollView -&gt; unit&#xA;override this.DraggingStarted : UIKit.UIScrollView -&gt; unit" Usage="uICollectionViewController.DraggingStarted scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewWillBeginDragging:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <summary>Indicates that dragging has begun.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="uICollectionViewController.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCell">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewCell GetCell (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewCell GetCell(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetCell : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewCell&#xA;override this.GetCell : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewCell" Usage="uICollectionViewController.GetCell (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUICollectionViewDataSource.GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:cellForItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Retrieves the UICollectionViewCell at the specified index.</summary>
        <returns>The <see cref="T:UIKit.UICollectionViewCell" /> that is managed by this view controller.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPath">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath GetIndexPath (UIKit.UICollectionView collectionView, string title, nint atIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath GetIndexPath(class UIKit.UICollectionView collectionView, string title, valuetype System.nint atIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.GetIndexPath(UIKit.UICollectionView,System.String,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexPath : UIKit.UICollectionView * string * nint -&gt; Foundation.NSIndexPath&#xA;override this.GetIndexPath : UIKit.UICollectionView * string * nint -&gt; Foundation.NSIndexPath" Usage="uICollectionViewController.GetIndexPath (collectionView, title, atIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:indexPathForIndexTitle:atIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="atIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <param name="title">The title of the item.</param>
        <param name="atIndex">The index into the index titles for which to retrieve the index path.</param>
        <summary>Requests the index path for the item in the collection view at the specified index with the specified title.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathForPreferredFocusedView">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath GetIndexPathForPreferredFocusedView (UIKit.UICollectionView collectionView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath GetIndexPathForPreferredFocusedView(class UIKit.UICollectionView collectionView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.GetIndexPathForPreferredFocusedView(UIKit.UICollectionView)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexPathForPreferredFocusedView : UIKit.UICollectionView -&gt; Foundation.NSIndexPath&#xA;override this.GetIndexPathForPreferredFocusedView : UIKit.UICollectionView -&gt; Foundation.NSIndexPath" Usage="uICollectionViewController.GetIndexPathForPreferredFocusedView collectionView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexPathForPreferredFocusedViewInCollectionView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <summary>When overridden, allows the developer to specify the item that should initially receive focus.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexTitles">
      <MemberSignature Language="C#" Value="public virtual string[] GetIndexTitles (UIKit.UICollectionView collectionView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetIndexTitles(class UIKit.UICollectionView collectionView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.GetIndexTitles(UIKit.UICollectionView)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexTitles : UIKit.UICollectionView -&gt; string[]&#xA;override this.GetIndexTitles : UIKit.UICollectionView -&gt; string[]" Usage="uICollectionViewController.GetIndexTitles collectionView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexTitlesForCollectionView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <summary>Requests the index titles for the items in the specified collection view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsCount">
      <MemberSignature Language="C#" Value="public virtual nint GetItemsCount (UIKit.UICollectionView collectionView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetItemsCount(class UIKit.UICollectionView collectionView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.GetItemsCount(UIKit.UICollectionView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetItemsCount : UIKit.UICollectionView * nint -&gt; nint&#xA;override this.GetItemsCount : UIKit.UICollectionView * nint -&gt; nint" Usage="uICollectionViewController.GetItemsCount (collectionView, section)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUICollectionViewDataSource.GetItemsCount(UIKit.UICollectionView,System.nint)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:numberOfItemsInSection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="section">The specified section.</param>
        <summary>Returns the number of items in the specified section.</summary>
        <returns>An int with the number of items in the specified section.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetContentOffset">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint GetTargetContentOffset (UIKit.UICollectionView collectionView, CoreGraphics.CGPoint proposedContentOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint GetTargetContentOffset(class UIKit.UICollectionView collectionView, valuetype CoreGraphics.CGPoint proposedContentOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.GetTargetContentOffset(UIKit.UICollectionView,CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member GetTargetContentOffset : UIKit.UICollectionView * CoreGraphics.CGPoint -&gt; CoreGraphics.CGPoint&#xA;override this.GetTargetContentOffset : UIKit.UICollectionView * CoreGraphics.CGPoint -&gt; CoreGraphics.CGPoint" Usage="uICollectionViewController.GetTargetContentOffset (collectionView, proposedContentOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:targetContentOffsetForProposedContentOffset:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="proposedContentOffset" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <param name="proposedContentOffset">To be added.</param>
        <summary>When overridden, allows the developer to modify the content offset for layout and animation changes.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTargetIndexPathForMove">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath GetTargetIndexPathForMove (UIKit.UICollectionView collectionView, Foundation.NSIndexPath originalIndexPath, Foundation.NSIndexPath proposedIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath GetTargetIndexPathForMove(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath originalIndexPath, class Foundation.NSIndexPath proposedIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.GetTargetIndexPathForMove(UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetTargetIndexPathForMove : UIKit.UICollectionView * Foundation.NSIndexPath * Foundation.NSIndexPath -&gt; Foundation.NSIndexPath&#xA;override this.GetTargetIndexPathForMove : UIKit.UICollectionView * Foundation.NSIndexPath * Foundation.NSIndexPath -&gt; Foundation.NSIndexPath" Usage="uICollectionViewController.GetTargetIndexPathForMove (collectionView, originalIndexPath, proposedIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="originalIndexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="proposedIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <param name="originalIndexPath">To be added.</param>
        <param name="proposedIndexPath">To be added.</param>
        <summary>When overridden, allows the developer to modify the final location of a moved item. (For instance, to disallow a move to a particular <paramref name="proposedIndexPath" />.)</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForSupplementaryElement">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionReusableView GetViewForSupplementaryElement (UIKit.UICollectionView collectionView, Foundation.NSString elementKind, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionReusableView GetViewForSupplementaryElement(class UIKit.UICollectionView collectionView, class Foundation.NSString elementKind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.GetViewForSupplementaryElement(UIKit.UICollectionView,Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetViewForSupplementaryElement : UIKit.UICollectionView * Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView&#xA;override this.GetViewForSupplementaryElement : UIKit.UICollectionView * Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView" Usage="uICollectionViewController.GetViewForSupplementaryElement (collectionView, elementKind, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:viewForSupplementaryElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionReusableView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="elementKind" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="elementKind">The kind of supplementary view that is to be created.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Returns the UICollectionReusableView for a supplementary view of the specified kind.</summary>
        <returns>The UICollectionReusableView for a supplementary view of the specified kind.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstallsStandardGestureForInteractiveMovement">
      <MemberSignature Language="C#" Value="public virtual bool InstallsStandardGestureForInteractiveMovement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool InstallsStandardGestureForInteractiveMovement" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewController.InstallsStandardGestureForInteractiveMovement" />
      <MemberSignature Language="F#" Value="member this.InstallsStandardGestureForInteractiveMovement : bool with get, set" Usage="UIKit.UICollectionViewController.InstallsStandardGestureForInteractiveMovement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("installsStandardGestureForInteractiveMovement")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setInstallsStandardGestureForInteractiveMovement:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the standard long-press gesture recognizer begins cell reordering.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>
          <para>By default, dragging-and-dropping cell locations in a <see cref="T:UIKit.UICollectionViewController" /> is triggered with a long press (and an implementation of <see cref="M:UIKit.UICollectionViewController.MoveItem(UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSIndexPath)" />). Developers who do not want that behavior can set this value to <see langword="false" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemDeselected">
      <MemberSignature Language="C#" Value="public virtual void ItemDeselected (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ItemDeselected(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ItemDeselected(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ItemDeselected : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; unit&#xA;override this.ItemDeselected : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; unit" Usage="uICollectionViewController.ItemDeselected (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:didDeselectItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Indicates that a cell has been deselected.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemHighlighted">
      <MemberSignature Language="C#" Value="public virtual void ItemHighlighted (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ItemHighlighted(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ItemHighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ItemHighlighted : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; unit&#xA;override this.ItemHighlighted : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; unit" Usage="uICollectionViewController.ItemHighlighted (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:didHighlightItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Indicates that a cell has been highlighted.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemSelected">
      <MemberSignature Language="C#" Value="public virtual void ItemSelected (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ItemSelected(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ItemSelected(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ItemSelected : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; unit&#xA;override this.ItemSelected : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; unit" Usage="uICollectionViewController.ItemSelected (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:didSelectItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Indicates that a cell has been selected.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ItemUnhighlighted">
      <MemberSignature Language="C#" Value="public virtual void ItemUnhighlighted (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ItemUnhighlighted(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ItemUnhighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ItemUnhighlighted : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; unit&#xA;override this.ItemUnhighlighted : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; unit" Usage="uICollectionViewController.ItemUnhighlighted (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:didUnhighlightItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Indicates that a cell has been unhighlighted.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Layout">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayout Layout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UICollectionViewLayout Layout" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewController.Layout" />
      <MemberSignature Language="F#" Value="member this.Layout : UIKit.UICollectionViewLayout" Usage="UIKit.UICollectionViewController.Layout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("collectionViewLayout")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UICollectionViewLayout used to initialize this UICollectionViewController. Read-only.</summary>
        <value>The <see cref="T:UIKit.UICollectionViewLayout" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveItem">
      <MemberSignature Language="C#" Value="public virtual void MoveItem (UIKit.UICollectionView collectionView, Foundation.NSIndexPath sourceIndexPath, Foundation.NSIndexPath destinationIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveItem(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath sourceIndexPath, class Foundation.NSIndexPath destinationIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.MoveItem(UIKit.UICollectionView,Foundation.NSIndexPath,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member MoveItem : UIKit.UICollectionView * Foundation.NSIndexPath * Foundation.NSIndexPath -&gt; unit&#xA;override this.MoveItem : UIKit.UICollectionView * Foundation.NSIndexPath * Foundation.NSIndexPath -&gt; unit" Usage="uICollectionViewController.MoveItem (collectionView, sourceIndexPath, destinationIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:moveItemAtIndexPath:toIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="sourceIndexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="destinationIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">The <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:UKit.UICollectionView&amp;scope=Xamarin" title="T:UKit.UICollectionView">T:UKit.UICollectionView</a></format> in which the move is being attempted.</param>
        <param name="sourceIndexPath">The <see cref="T:Foundation.NSIndexPath" /> at which the cell began the move.</param>
        <param name="destinationIndexPath">The <see cref="T:Foundation.NSIndexPath" /> at which the cell has been moved.</param>
        <summary>Moves the cell at <paramref name="sourceIndexPath" /> to <paramref name="destinationIndexPath" />.</summary>
        <remarks>
          <para>Developers should override this method if they wish the <see cref="T:UIKit.UICollectionView" /> to support reordering its cells. This method should adjust the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=UIKit%20UIView%20Controller%20Data%20Source&amp;scope=Xamarin" title="T:UIKit.UIViewControllerDataSource">T:UIKit.UIViewControllerDataSource</a></format> to reflect the new ordering. For instance, if the data were stored in a simple array, developers can simply swap the values from the source and destination cells:</para>
          <example>
            <code lang="C#"><![CDATA[
public override void MoveItem (UICollectionView collectionView, NSIndexPath sourceIndexPath, NSIndexPath destinationIndexPath)
{
  //numbers is an array data structure for the UICollectionViewData
	var tmp = numbers [(int)sourceIndexPath.Item];
	numbers [(int)sourceIndexPath.Item] = numbers [(int)destinationIndexPath.Item];
	numbers [(int)destinationIndexPath.Item] = tmp;
}           
              ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfSections">
      <MemberSignature Language="C#" Value="public virtual nint NumberOfSections (UIKit.UICollectionView collectionView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint NumberOfSections(class UIKit.UICollectionView collectionView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.NumberOfSections(UIKit.UICollectionView)" />
      <MemberSignature Language="F#" Value="abstract member NumberOfSections : UIKit.UICollectionView -&gt; nint&#xA;override this.NumberOfSections : UIKit.UICollectionView -&gt; nint" Usage="uICollectionViewController.NumberOfSections collectionView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("numberOfSectionsInCollectionView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <summary>The number of sections in the UICollectionView.</summary>
        <returns>The number of sections, as an int.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformAction">
      <MemberSignature Language="C#" Value="public virtual void PerformAction (UIKit.UICollectionView collectionView, ObjCRuntime.Selector action, Foundation.NSIndexPath indexPath, Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformAction(class UIKit.UICollectionView collectionView, class ObjCRuntime.Selector action, class Foundation.NSIndexPath indexPath, class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.PerformAction(UIKit.UICollectionView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member PerformAction : UIKit.UICollectionView * ObjCRuntime.Selector * Foundation.NSIndexPath * Foundation.NSObject -&gt; unit&#xA;override this.PerformAction : UIKit.UICollectionView * ObjCRuntime.Selector * Foundation.NSIndexPath * Foundation.NSObject -&gt; unit" Usage="uICollectionViewController.PerformAction (collectionView, action, indexPath, sender)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:performAction:forItemAtIndexPath:withSender:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="action">The action that is to be performed.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <param name="sender">Initiator for the action.</param>
        <summary>Performs a copy or paste operation on the data at the specified index.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollAnimationEnded">
      <MemberSignature Language="C#" Value="public virtual void ScrollAnimationEnded (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollAnimationEnded(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ScrollAnimationEnded(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member ScrollAnimationEnded : UIKit.UIScrollView -&gt; unit&#xA;override this.ScrollAnimationEnded : UIKit.UIScrollView -&gt; unit" Usage="uICollectionViewController.ScrollAnimationEnded scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewDidEndScrollingAnimation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <summary>Indicates that the scrolling animation has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scrolled">
      <MemberSignature Language="C#" Value="public virtual void Scrolled (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Scrolled(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.Scrolled(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member Scrolled : UIKit.UIScrollView -&gt; unit&#xA;override this.Scrolled : UIKit.UIScrollView -&gt; unit" Usage="uICollectionViewController.Scrolled scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewDidScroll:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <summary>Indicates that scrolling occurred.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrolledToTop">
      <MemberSignature Language="C#" Value="public virtual void ScrolledToTop (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrolledToTop(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ScrolledToTop(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member ScrolledToTop : UIKit.UIScrollView -&gt; unit&#xA;override this.ScrolledToTop : UIKit.UIScrollView -&gt; unit" Usage="uICollectionViewController.ScrolledToTop scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewDidScrollToTop:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <summary>Indicates that scrolling to the beginning of the collection occurred.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldDeselectItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldDeselectItem (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldDeselectItem(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ShouldDeselectItem(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ShouldDeselectItem : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool&#xA;override this.ShouldDeselectItem : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool" Usage="uICollectionViewController.ShouldDeselectItem (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:shouldDeselectItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Whether the specified item should be deselected.</summary>
        <returns>Returns <see langword="true" /> if item should be deselected, <see langword="false" /> if not.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldHighlightItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldHighlightItem (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldHighlightItem(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ShouldHighlightItem(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ShouldHighlightItem : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool&#xA;override this.ShouldHighlightItem : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool" Usage="uICollectionViewController.ShouldHighlightItem (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:shouldHighlightItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Whether the specified item should be highlighted.</summary>
        <returns>Returns <see langword="true" /> if item should be highlighted, <see langword="false" /> if not.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldScrollToTop">
      <MemberSignature Language="C#" Value="public virtual bool ShouldScrollToTop (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldScrollToTop(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ShouldScrollToTop(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member ShouldScrollToTop : UIKit.UIScrollView -&gt; bool&#xA;override this.ShouldScrollToTop : UIKit.UIScrollView -&gt; bool" Usage="uICollectionViewController.ShouldScrollToTop scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewShouldScrollToTop:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <summary>Whether the collection should scroll to its beginning.</summary>
        <returns>Returns <see langword="true" /> if item should scroll to top, <see langword="false" /> if not.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSelectItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSelectItem (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSelectItem(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ShouldSelectItem(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ShouldSelectItem : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool&#xA;override this.ShouldSelectItem : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool" Usage="uICollectionViewController.ShouldSelectItem (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:shouldSelectItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Whether the specified item should be selected.</summary>
        <returns>Returns <see langword="true" /> if item should be selected, <see langword="false" /> if not.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldShowMenu">
      <MemberSignature Language="C#" Value="public virtual bool ShouldShowMenu (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldShowMenu(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ShouldShowMenu(UIKit.UICollectionView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ShouldShowMenu : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool&#xA;override this.ShouldShowMenu : UIKit.UICollectionView * Foundation.NSIndexPath -&gt; bool" Usage="uICollectionViewController.ShouldShowMenu (collectionView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:shouldShowMenuForItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Whether the edit menu should be shown for the specified item.</summary>
        <returns>Returns <see langword="true" /> if menu should be shown, <see langword="false" /> if not.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSpringLoadItem">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSpringLoadItem (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath, UIKit.IUISpringLoadedInteractionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSpringLoadItem(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath, class UIKit.IUISpringLoadedInteractionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ShouldSpringLoadItem(UIKit.UICollectionView,Foundation.NSIndexPath,UIKit.IUISpringLoadedInteractionContext)" />
      <MemberSignature Language="F#" Value="abstract member ShouldSpringLoadItem : UIKit.UICollectionView * Foundation.NSIndexPath * UIKit.IUISpringLoadedInteractionContext -&gt; bool&#xA;override this.ShouldSpringLoadItem : UIKit.UICollectionView * Foundation.NSIndexPath * UIKit.IUISpringLoadedInteractionContext -&gt; bool" Usage="uICollectionViewController.ShouldSpringLoadItem (collectionView, indexPath, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:shouldSpringLoadItemAtIndexPath:withContext:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="context" Type="UIKit.IUISpringLoadedInteractionContext" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <param name="indexPath">The index path to the item.</param>
        <param name="context">The spring-loaded interaction context.</param>
        <summary>Method that is called to indicate whether the identified item should springload in the specified context.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldUpdateFocus">
      <MemberSignature Language="C#" Value="public virtual bool ShouldUpdateFocus (UIKit.UICollectionView collectionView, UIKit.UICollectionViewFocusUpdateContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldUpdateFocus(class UIKit.UICollectionView collectionView, class UIKit.UICollectionViewFocusUpdateContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ShouldUpdateFocus(UIKit.UICollectionView,UIKit.UICollectionViewFocusUpdateContext)" />
      <MemberSignature Language="F#" Value="override this.ShouldUpdateFocus : UIKit.UICollectionView * UIKit.UICollectionViewFocusUpdateContext -&gt; bool" Usage="uICollectionViewController.ShouldUpdateFocus (collectionView, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:shouldUpdateFocusInContext:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="context" Type="UIKit.UICollectionViewFocusUpdateContext" />
      </Parameters>
      <Docs>
        <param name="collectionView">The collection view that originated the request.</param>
        <param name="context">To be added.</param>
        <summary>Called prior to the <c>this</c> either losing or receiving focus. If either focus environment returns <see langword="false" />, the focus update is canceled.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SupplementaryViewDisplayingEnded">
      <MemberSignature Language="C#" Value="public virtual void SupplementaryViewDisplayingEnded (UIKit.UICollectionView collectionView, UIKit.UICollectionReusableView view, Foundation.NSString elementKind, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SupplementaryViewDisplayingEnded(class UIKit.UICollectionView collectionView, class UIKit.UICollectionReusableView view, class Foundation.NSString elementKind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.SupplementaryViewDisplayingEnded(UIKit.UICollectionView,UIKit.UICollectionReusableView,Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member SupplementaryViewDisplayingEnded : UIKit.UICollectionView * UIKit.UICollectionReusableView * Foundation.NSString * Foundation.NSIndexPath -&gt; unit&#xA;override this.SupplementaryViewDisplayingEnded : UIKit.UICollectionView * UIKit.UICollectionReusableView * Foundation.NSString * Foundation.NSIndexPath -&gt; unit" Usage="uICollectionViewController.SupplementaryViewDisplayingEnded (collectionView, view, elementKind, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="view" Type="UIKit.UICollectionReusableView" />
        <Parameter Name="elementKind" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="view">Collection view managed by this view controller.</param>
        <param name="elementKind">Type for the supplementary view.</param>
        <param name="indexPath">Index path for the affected item.</param>
        <summary>Indicates that a supplementary view's display has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionLayout">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewTransitionLayout TransitionLayout (UIKit.UICollectionView collectionView, UIKit.UICollectionViewLayout fromLayout, UIKit.UICollectionViewLayout toLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewTransitionLayout TransitionLayout(class UIKit.UICollectionView collectionView, class UIKit.UICollectionViewLayout fromLayout, class UIKit.UICollectionViewLayout toLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.TransitionLayout(UIKit.UICollectionView,UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayout)" />
      <MemberSignature Language="F#" Value="abstract member TransitionLayout : UIKit.UICollectionView * UIKit.UICollectionViewLayout * UIKit.UICollectionViewLayout -&gt; UIKit.UICollectionViewTransitionLayout&#xA;override this.TransitionLayout : UIKit.UICollectionView * UIKit.UICollectionViewLayout * UIKit.UICollectionViewLayout -&gt; UIKit.UICollectionViewTransitionLayout" Usage="uICollectionViewController.TransitionLayout (collectionView, fromLayout, toLayout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:transitionLayoutForOldLayout:newLayout:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewTransitionLayout</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="fromLayout" Type="UIKit.UICollectionViewLayout" />
        <Parameter Name="toLayout" Type="UIKit.UICollectionViewLayout" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="fromLayout">Starting point for the specified transition, typically the current layout for the collection view.</param>
        <param name="toLayout">The collection view's new layout.</param>
        <summary>The UICollectionViewTransitionLayout associated with this UIColllectionViewController.</summary>
        <returns>Returns the <see cref="T:UIKit.UICollectionViewTransitionLayout" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UseLayoutToLayoutNavigationTransitions">
      <MemberSignature Language="C#" Value="public virtual bool UseLayoutToLayoutNavigationTransitions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseLayoutToLayoutNavigationTransitions" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewController.UseLayoutToLayoutNavigationTransitions" />
      <MemberSignature Language="F#" Value="member this.UseLayoutToLayoutNavigationTransitions : bool with get, set" Usage="UIKit.UICollectionViewController.UseLayoutToLayoutNavigationTransitions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("useLayoutToLayoutNavigationTransitions")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setUseLayoutToLayoutNavigationTransitions:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this UICollectionViewController coordinates transitions with a UINavigationController.</summary>
        <value>Returns <see langword="true" /> if this UICollectionViewController coordinates transitions with a UINavigationController, <see langword="false" /> if not.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ViewForZoomingInScrollView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView ViewForZoomingInScrollView (UIKit.UIScrollView scrollView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIView ViewForZoomingInScrollView(class UIKit.UIScrollView scrollView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ViewForZoomingInScrollView(UIKit.UIScrollView)" />
      <MemberSignature Language="F#" Value="abstract member ViewForZoomingInScrollView : UIKit.UIScrollView -&gt; UIKit.UIView&#xA;override this.ViewForZoomingInScrollView : UIKit.UIScrollView -&gt; UIKit.UIView" Usage="uICollectionViewController.ViewForZoomingInScrollView scrollView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("viewForZoomingInScrollView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <summary>The UIView to scale when zooming is about to occur.</summary>
        <returns>The UIView to scale for zooming.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDisplayCell">
      <MemberSignature Language="C#" Value="public virtual void WillDisplayCell (UIKit.UICollectionView collectionView, UIKit.UICollectionViewCell cell, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDisplayCell(class UIKit.UICollectionView collectionView, class UIKit.UICollectionViewCell cell, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.WillDisplayCell(UIKit.UICollectionView,UIKit.UICollectionViewCell,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member WillDisplayCell : UIKit.UICollectionView * UIKit.UICollectionViewCell * Foundation.NSIndexPath -&gt; unit&#xA;override this.WillDisplayCell : UIKit.UICollectionView * UIKit.UICollectionViewCell * Foundation.NSIndexPath -&gt; unit" Usage="uICollectionViewController.WillDisplayCell (collectionView, cell, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:willDisplayCell:forItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="cell" Type="UIKit.UICollectionViewCell" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller that is adding the specified cell.</param>
        <param name="cell">The cell that is being added.</param>
        <param name="indexPath">Path for the data item represented by  the cell.</param>
        <summary>The <paramref name="cell" /> at <paramref name="indexPath" /> is about to be displayed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDisplaySupplementaryView">
      <MemberSignature Language="C#" Value="public virtual void WillDisplaySupplementaryView (UIKit.UICollectionView collectionView, UIKit.UICollectionReusableView view, string elementKind, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDisplaySupplementaryView(class UIKit.UICollectionView collectionView, class UIKit.UICollectionReusableView view, string elementKind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.WillDisplaySupplementaryView(UIKit.UICollectionView,UIKit.UICollectionReusableView,System.String,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member WillDisplaySupplementaryView : UIKit.UICollectionView * UIKit.UICollectionReusableView * string * Foundation.NSIndexPath -&gt; unit&#xA;override this.WillDisplaySupplementaryView : UIKit.UICollectionView * UIKit.UICollectionReusableView * string * Foundation.NSIndexPath -&gt; unit" Usage="uICollectionViewController.WillDisplaySupplementaryView (collectionView, view, elementKind, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="view" Type="UIKit.UICollectionReusableView" />
        <Parameter Name="elementKind" Type="System.String" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">Collection view managed by this view controller.</param>
        <param name="view">The view that is to be added.</param>
        <param name="elementKind">Type for the supplementary view.</param>
        <param name="indexPath">Path for the data item represented by  the supplementary view.</param>
        <summary>Informs the delegate that the specified supplementary view is going to be displayed by the collection view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillEndDragging">
      <MemberSignature Language="C#" Value="public virtual void WillEndDragging (UIKit.UIScrollView scrollView, CoreGraphics.CGPoint velocity, ref CoreGraphics.CGPoint targetContentOffset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillEndDragging(class UIKit.UIScrollView scrollView, valuetype CoreGraphics.CGPoint velocity, valuetype CoreGraphics.CGPoint&amp; targetContentOffset) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.WillEndDragging(UIKit.UIScrollView,CoreGraphics.CGPoint,CoreGraphics.CGPoint@)" />
      <MemberSignature Language="F#" Value="abstract member WillEndDragging : UIKit.UIScrollView * CoreGraphics.CGPoint *  -&gt; unit&#xA;override this.WillEndDragging : UIKit.UIScrollView * CoreGraphics.CGPoint *  -&gt; unit" Usage="uICollectionViewController.WillEndDragging (scrollView, velocity, targetContentOffset)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewWillEndDragging:withVelocity:targetContentOffset:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
        <Parameter Name="velocity" Type="CoreGraphics.CGPoint" />
        <Parameter Name="targetContentOffset" Type="CoreGraphics.CGPoint" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <param name="velocity">The velocity of the scroll view (in points) when the touch ended.</param>
        <param name="targetContentOffset">The expected offset when the scrolling action decelerates to a stop.</param>
        <summary>Indicates that dragging will end shortly.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomingEnded">
      <MemberSignature Language="C#" Value="public virtual void ZoomingEnded (UIKit.UIScrollView scrollView, UIKit.UIView withView, nfloat atScale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ZoomingEnded(class UIKit.UIScrollView scrollView, class UIKit.UIView withView, valuetype System.nfloat atScale) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ZoomingEnded(UIKit.UIScrollView,UIKit.UIView,System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member ZoomingEnded : UIKit.UIScrollView * UIKit.UIView * nfloat -&gt; unit&#xA;override this.ZoomingEnded : UIKit.UIScrollView * UIKit.UIView * nfloat -&gt; unit" Usage="uICollectionViewController.ZoomingEnded (scrollView, withView, atScale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewDidEndZooming:withView:atScale:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
        <Parameter Name="withView" Type="UIKit.UIView" />
        <Parameter Name="atScale" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <param name="withView">View representing the content that needs to be scaled.</param>
        <param name="atScale">The scale factor to use. This value must be between the limits set by the <see cref="T:UIKit.UIScrollView" /> properties <see cref="P:UIKit.UIScrollView.MinimumZoomScale" /> and <see cref="P:UIKit.UIScrollView.MaximumZoomScale" />.</param>
        <summary>Indicates that zooming has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZoomingStarted">
      <MemberSignature Language="C#" Value="public virtual void ZoomingStarted (UIKit.UIScrollView scrollView, UIKit.UIView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ZoomingStarted(class UIKit.UIScrollView scrollView, class UIKit.UIView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewController.ZoomingStarted(UIKit.UIScrollView,UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member ZoomingStarted : UIKit.UIScrollView * UIKit.UIView -&gt; unit&#xA;override this.ZoomingStarted : UIKit.UIScrollView * UIKit.UIView -&gt; unit" Usage="uICollectionViewController.ZoomingStarted (scrollView, view)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollViewWillBeginZooming:withView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scrollView" Type="UIKit.UIScrollView" />
        <Parameter Name="view" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="scrollView">The scrollview that is associated with the collection view.</param>
        <param name="view">View representing the content that needs to be scaled.</param>
        <summary>Indicates that zooming has begun.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
