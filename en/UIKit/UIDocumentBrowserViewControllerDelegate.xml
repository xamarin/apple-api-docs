<Type Name="UIDocumentBrowserViewControllerDelegate" FullName="UIKit.UIDocumentBrowserViewControllerDelegate">
  <TypeSignature Language="C#" Value="public class UIDocumentBrowserViewControllerDelegate : Foundation.NSObject, IDisposable, UIKit.IUIDocumentBrowserViewControllerDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIDocumentBrowserViewControllerDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIDocumentBrowserViewControllerDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIDocumentBrowserViewControllerDelegate" />
  <TypeSignature Language="F#" Value="type UIDocumentBrowserViewControllerDelegate = class&#xA;    inherit NSObject&#xA;    interface IUIDocumentBrowserViewControllerDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIDocumentBrowserViewControllerDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIDocumentBrowserViewControllerDelegate", false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Handles user interactions with a document browser.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIDocumentBrowserViewControllerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewControllerDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIDocumentBrowserViewControllerDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewControllerDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDocumentBrowserViewControllerDelegate : Foundation.NSObjectFlag -&gt; UIKit.UIDocumentBrowserViewControllerDelegate" Usage="new UIKit.UIDocumentBrowserViewControllerDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIDocumentBrowserViewControllerDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewControllerDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDocumentBrowserViewControllerDelegate : nativeint -&gt; UIKit.UIDocumentBrowserViewControllerDelegate" Usage="new UIKit.UIDocumentBrowserViewControllerDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidImportDocument">
      <MemberSignature Language="C#" Value="public virtual void DidImportDocument (UIKit.UIDocumentBrowserViewController controller, Foundation.NSUrl sourceUrl, Foundation.NSUrl destinationUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidImportDocument(class UIKit.UIDocumentBrowserViewController controller, class Foundation.NSUrl sourceUrl, class Foundation.NSUrl destinationUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewControllerDelegate.DidImportDocument(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl,Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member DidImportDocument : UIKit.UIDocumentBrowserViewController * Foundation.NSUrl * Foundation.NSUrl -&gt; unit&#xA;override this.DidImportDocument : UIKit.UIDocumentBrowserViewController * Foundation.NSUrl * Foundation.NSUrl -&gt; unit" Usage="uIDocumentBrowserViewControllerDelegate.DidImportDocument (controller, sourceUrl, destinationUrl)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("documentBrowser:didImportDocumentAtURL:toDestinationURL:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIDocumentBrowserViewController" />
        <Parameter Name="sourceUrl" Type="Foundation.NSUrl" />
        <Parameter Name="destinationUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="controller">The controller that imported the document.</param>
        <param name="sourceUrl">The original document URL.</param>
        <param name="destinationUrl">The imported document's URL.</param>
        <summary>Developers may implement this method to respond after a document is imported.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidPickDocumentsAtUrls">
      <MemberSignature Language="C#" Value="public virtual void DidPickDocumentsAtUrls (UIKit.UIDocumentBrowserViewController controller, Foundation.NSUrl[] documentUrls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidPickDocumentsAtUrls(class UIKit.UIDocumentBrowserViewController controller, class Foundation.NSUrl[] documentUrls) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewControllerDelegate.DidPickDocumentsAtUrls(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl[])" />
      <MemberSignature Language="F#" Value="abstract member DidPickDocumentsAtUrls : UIKit.UIDocumentBrowserViewController * Foundation.NSUrl[] -&gt; unit&#xA;override this.DidPickDocumentsAtUrls : UIKit.UIDocumentBrowserViewController * Foundation.NSUrl[] -&gt; unit" Usage="uIDocumentBrowserViewControllerDelegate.DidPickDocumentsAtUrls (controller, documentUrls)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("documentBrowser:didPickDocumentsAtURLs:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIDocumentBrowserViewController" />
        <Parameter Name="documentUrls" Type="Foundation.NSUrl[]" />
      </Parameters>
      <Docs>
        <param name="controller">To be added.</param>
        <param name="documentUrls">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidPickDocumentUrls">
      <MemberSignature Language="C#" Value="public virtual void DidPickDocumentUrls (UIKit.UIDocumentBrowserViewController controller, Foundation.NSUrl[] documentUrls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidPickDocumentUrls(class UIKit.UIDocumentBrowserViewController controller, class Foundation.NSUrl[] documentUrls) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewControllerDelegate.DidPickDocumentUrls(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl[])" />
      <MemberSignature Language="F#" Value="abstract member DidPickDocumentUrls : UIKit.UIDocumentBrowserViewController * Foundation.NSUrl[] -&gt; unit&#xA;override this.DidPickDocumentUrls : UIKit.UIDocumentBrowserViewController * Foundation.NSUrl[] -&gt; unit" Usage="uIDocumentBrowserViewControllerDelegate.DidPickDocumentUrls (controller, documentUrls)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("documentBrowser:didPickDocumentURLs:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 12, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'DidPickDocumentsAtUrls (UIDocumentBrowserViewController, NSUrl[])' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIDocumentBrowserViewController" />
        <Parameter Name="documentUrls" Type="Foundation.NSUrl[]" />
      </Parameters>
      <Docs>
        <param name="controller">The controller in which the URLs were picked .</param>
        <param name="documentUrls">The chosen URLs.</param>
        <summary>Developers may implement this method to respond after the user selects document URLs.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidRequestDocumentCreation">
      <MemberSignature Language="C#" Value="public virtual void DidRequestDocumentCreation (UIKit.UIDocumentBrowserViewController controller, Action&lt;Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode&gt; importHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidRequestDocumentCreation(class UIKit.UIDocumentBrowserViewController controller, class System.Action`2&lt;class Foundation.NSUrl, valuetype UIKit.UIDocumentBrowserImportMode&gt; importHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewControllerDelegate.DidRequestDocumentCreation(UIKit.UIDocumentBrowserViewController,System.Action{Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode})" />
      <MemberSignature Language="F#" Value="abstract member DidRequestDocumentCreation : UIKit.UIDocumentBrowserViewController * Action&lt;Foundation.NSUrl, UIKit.UIDocumentBrowserImportMode&gt; -&gt; unit&#xA;override this.DidRequestDocumentCreation : UIKit.UIDocumentBrowserViewController * Action&lt;Foundation.NSUrl, UIKit.UIDocumentBrowserImportMode&gt; -&gt; unit" Usage="uIDocumentBrowserViewControllerDelegate.DidRequestDocumentCreation (controller, importHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("documentBrowser:didRequestDocumentCreationWithHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIDocumentBrowserViewController" />
        <Parameter Name="importHandler" Type="System.Action&lt;Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V94))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="controller">The controller that made the request.</param>
        <param name="importHandler">The handler to run after the document is created.</param>
        <summary>Developers may implement this method to respond to a request to create a new document.</summary>
        <remarks>
          <para>
            <paramref name="importHandler" /> receives the orginal document location and the import moded that was used during the import operation.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FailedToImportDocument">
      <MemberSignature Language="C#" Value="public virtual void FailedToImportDocument (UIKit.UIDocumentBrowserViewController controller, Foundation.NSUrl documentUrl, Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FailedToImportDocument(class UIKit.UIDocumentBrowserViewController controller, class Foundation.NSUrl documentUrl, class Foundation.NSError error) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewControllerDelegate.FailedToImportDocument(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl,Foundation.NSError)" />
      <MemberSignature Language="F#" Value="abstract member FailedToImportDocument : UIKit.UIDocumentBrowserViewController * Foundation.NSUrl * Foundation.NSError -&gt; unit&#xA;override this.FailedToImportDocument : UIKit.UIDocumentBrowserViewController * Foundation.NSUrl * Foundation.NSError -&gt; unit" Usage="uIDocumentBrowserViewControllerDelegate.FailedToImportDocument (controller, documentUrl, error)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("documentBrowser:failedToImportDocumentAtURL:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIDocumentBrowserViewController" />
        <Parameter Name="documentUrl" Type="Foundation.NSUrl" />
        <Parameter Name="error" Type="Foundation.NSError" />
      </Parameters>
      <Docs>
        <param name="controller">The controller that failed to import the document.</param>
        <param name="documentUrl">The document's original URL.</param>
        <param name="error">
          <para>The error that occurred.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Developers may implement this method to respond when the application fails to import a document.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationActivities">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIActivity[] GetApplicationActivities (UIKit.UIDocumentBrowserViewController controller, Foundation.NSUrl[] documentUrls);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIActivity[] GetApplicationActivities(class UIKit.UIDocumentBrowserViewController controller, class Foundation.NSUrl[] documentUrls) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewControllerDelegate.GetApplicationActivities(UIKit.UIDocumentBrowserViewController,Foundation.NSUrl[])" />
      <MemberSignature Language="F#" Value="abstract member GetApplicationActivities : UIKit.UIDocumentBrowserViewController * Foundation.NSUrl[] -&gt; UIKit.UIActivity[]&#xA;override this.GetApplicationActivities : UIKit.UIDocumentBrowserViewController * Foundation.NSUrl[] -&gt; UIKit.UIActivity[]" Usage="uIDocumentBrowserViewControllerDelegate.GetApplicationActivities (controller, documentUrls)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("documentBrowser:applicationActivitiesForDocumentURLs:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIActivity[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIDocumentBrowserViewController" />
        <Parameter Name="documentUrls" Type="Foundation.NSUrl[]" />
      </Parameters>
      <Docs>
        <param name="controller">The controller that is making the request.</param>
        <param name="documentUrls">URLs to the documents to share.</param>
        <summary>Returns an array of custom application activities for an activity view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPresent">
      <MemberSignature Language="C#" Value="public virtual void WillPresent (UIKit.UIDocumentBrowserViewController controller, UIKit.UIActivityViewController activityViewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillPresent(class UIKit.UIDocumentBrowserViewController controller, class UIKit.UIActivityViewController activityViewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewControllerDelegate.WillPresent(UIKit.UIDocumentBrowserViewController,UIKit.UIActivityViewController)" />
      <MemberSignature Language="F#" Value="abstract member WillPresent : UIKit.UIDocumentBrowserViewController * UIKit.UIActivityViewController -&gt; unit&#xA;override this.WillPresent : UIKit.UIDocumentBrowserViewController * UIKit.UIActivityViewController -&gt; unit" Usage="uIDocumentBrowserViewControllerDelegate.WillPresent (controller, activityViewController)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("documentBrowser:willPresentActivityViewController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIDocumentBrowserViewController" />
        <Parameter Name="activityViewController" Type="UIKit.UIActivityViewController" />
      </Parameters>
      <Docs>
        <param name="controller">The controller that is about to present the activity.</param>
        <param name="activityViewController">The activity that will be presented.</param>
        <summary>Developers may implement this method to prepare for the display of an activity view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
