<Type Name="IUITextInput" FullName="UIKit.IUITextInput">
  <TypeSignature Language="C#" Value="public interface IUITextInput : IDisposable, UIKit.IUIKeyInput" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUITextInput implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIKeyInput, class UIKit.IUITextInputTraits" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIKeyInput</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="UITextInput", WrapperType=typeof(UIKit.UITextInputWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="TextInRange", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.String), Selector="textInRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ReplaceText", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="replaceRange:withText:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetMarkedText", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setMarkedText:selectedRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="UnmarkText", Selector="unmarkText")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetTextRange", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextRange), Selector="textRangeFromPosition:toPosition:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetPosition", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextPosition), Selector="positionFromPosition:offset:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetPosition", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextPosition), Selector="positionFromPosition:inDirection:offset:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="ComparePosition", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Foundation.NSComparisonResult), Selector="comparePosition:toPosition:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetOffsetFromPosition", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.nint), Selector="offsetFromPosition:toPosition:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetPositionWithinRange", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextPosition), Selector="positionWithinRange:farthestInDirection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetCharacterRange", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextRange), Selector="characterRangeByExtendingPosition:inDirection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetBaseWritingDirection", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextWritingDirection), Selector="baseWritingDirectionForPosition:inDirection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="SetBaseWritingDirectionforRange", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="setBaseWritingDirection:forRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetFirstRectForRange", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(CoreGraphics.CGRect), Selector="firstRectForRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetCaretRectForPosition", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(CoreGraphics.CGRect), Selector="caretRectForPosition:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetClosestPositionToPoint", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextPosition), Selector="closestPositionToPoint:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetClosestPositionToPoint", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextPosition), Selector="closestPositionToPoint:withinRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetCharacterRangeAtPoint", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextRange), Selector="characterRangeAtPoint:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetTextStyling", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(Foundation.NSDictionary), Selector="textStylingAtPosition:inDirection:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetPosition", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextPosition), Selector="positionWithinRange:atCharacterOffset:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetCharacterOffsetOfPosition", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.nint), Selector="characterOffsetOfPosition:withinRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DictationRecognitionFailed", Selector="dictationRecognitionFailed")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DictationRecordingDidEnd", Selector="dictationRecordingDidEnd")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="InsertDictationResult", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="insertDictationResult:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetSelectionRects", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(UIKit.UITextSelectionRect[]), Selector="selectionRectsForRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldChangeTextInRange", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="shouldChangeTextInRange:replacementText:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetFrameForDictationResultPlaceholder", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(CoreGraphics.CGRect), Selector="frameForDictationResultPlaceholder:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="InsertDictationResultPlaceholder", ReturnType=typeof(Foundation.NSObject), Selector="insertDictationResultPlaceholder")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="RemoveDictationResultPlaceholder", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="removeDictationResultPlaceholder:willInsertResult:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="BeginFloatingCursor", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="beginFloatingCursorAtPoint:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="UpdateFloatingCursor", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="updateFloatingCursorAtPoint:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="EndFloatingCursor", Selector="endFloatingCursor")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.Copy, GetterSelector="selectedTextRange", IsProperty=true, IsRequired=true, IsStatic=false, Name="SelectedTextRange", PropertyType=typeof(UIKit.UITextRange), Selector="selectedTextRange", SetterSelector="setSelectedTextRange:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.Copy, GetterSelector="markedTextStyle", IsProperty=true, IsRequired=true, IsStatic=false, Name="MarkedTextStyle", PropertyType=typeof(Foundation.NSDictionary), Selector="markedTextStyle", SetterSelector="setMarkedTextStyle:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="beginningOfDocument", IsProperty=true, IsRequired=true, IsStatic=false, Name="BeginningOfDocument", PropertyType=typeof(UIKit.UITextPosition), Selector="beginningOfDocument")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="endOfDocument", IsProperty=true, IsRequired=true, IsStatic=false, Name="EndOfDocument", PropertyType=typeof(UIKit.UITextPosition), Selector="endOfDocument")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.UnsafeUnretained, GetterSelector="inputDelegate", IsProperty=true, IsRequired=true, IsStatic=false, Name="WeakInputDelegate", PropertyType=typeof(Foundation.NSObject), Selector="inputDelegate", SetterSelector="setInputDelegate:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="tokenizer", IsProperty=true, IsRequired=true, IsStatic=false, Name="WeakTokenizer", PropertyType=typeof(Foundation.NSObject), Selector="tokenizer")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="textInputView", IsProperty=true, IsRequired=false, IsStatic=false, Name="TextInputView", PropertyType=typeof(UIKit.UIView), Selector="textInputView")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="selectionAffinity", IsProperty=true, IsRequired=false, IsStatic=false, Name="SelectionAffinity", PropertyType=typeof(UIKit.UITextStorageDirection), Selector="selectionAffinity", SetterSelector="setSelectionAffinity:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="markedTextRange", IsProperty=true, IsRequired=true, IsStatic=false, Name="MarkedTextRange", PropertyType=typeof(UIKit.UITextRange), Selector="markedTextRange")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>IUITextInput works with the inputting of text and allows the manipulaton of features including autocorrection and many other text input features related to document presentation.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="BeginningOfDocument">
      <MemberSignature Language="C#" Value="public UIKit.UITextPosition BeginningOfDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITextPosition BeginningOfDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("beginningOfDocument")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The position of text indicating the beginning of a document.</summary>
        <value>Gets the beginning of the document.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparePosition">
      <MemberSignature Language="C#" Value="public Foundation.NSComparisonResult ComparePosition (UIKit.UITextPosition first, UIKit.UITextPosition second);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSComparisonResult ComparePosition(class UIKit.UITextPosition first, class UIKit.UITextPosition second) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("comparePosition:toPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSComparisonResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="first" Type="UIKit.UITextPosition" />
        <Parameter Name="second" Type="UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="first">First text position.</param>
        <param name="second">Second text position.</param>
        <summary>Gets a comparison of one position to another.</summary>
        <returns>An indication as to whether two text positions are identical or if one is prior to the other.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndOfDocument">
      <MemberSignature Language="C#" Value="public UIKit.UITextPosition EndOfDocument { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITextPosition EndOfDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("endOfDocument")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The position of text indicating the beginning of a document.</summary>
        <value>Gets the end of the document.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBaseWritingDirection">
      <MemberSignature Language="C#" Value="public UIKit.UITextWritingDirection GetBaseWritingDirection (UIKit.UITextPosition forPosition, UIKit.UITextStorageDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UITextWritingDirection GetBaseWritingDirection(class UIKit.UITextPosition forPosition, valuetype UIKit.UITextStorageDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("baseWritingDirectionForPosition:inDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextWritingDirection</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forPosition" Type="UIKit.UITextPosition" />
        <Parameter Name="direction" Type="UIKit.UITextStorageDirection" />
      </Parameters>
      <Docs>
        <param name="forPosition">A positioning object that indicates a specified location.</param>
        <param name="direction">Constant indicating layout direction.</param>
        <summary>Gets the base writing direction for a text position.</summary>
        <returns>A text-range object that represents the distance from position to the farthest extent in a given direction.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCaretRectForPosition">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetCaretRectForPosition (UIKit.UITextPosition position);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetCaretRectForPosition(class UIKit.UITextPosition position) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("caretRectForPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="position" Type="UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="position">A positioning object that indicates a specified location.</param>
        <summary>A rectangle used for drawing a caret at a given insertion point.</summary>
        <returns>A rectangle defining an area for drawing a caret.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRange">
      <MemberSignature Language="C#" Value="public UIKit.UITextRange GetCharacterRange (UIKit.UITextPosition byExtendingPosition, UIKit.UITextLayoutDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextRange GetCharacterRange(class UIKit.UITextPosition byExtendingPosition, valuetype UIKit.UITextLayoutDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterRangeByExtendingPosition:inDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="byExtendingPosition" Type="UIKit.UITextPosition" />
        <Parameter Name="direction" Type="UIKit.UITextLayoutDirection" />
      </Parameters>
      <Docs>
        <param name="byExtendingPosition">A text positioning object identifying a location in a document.</param>
        <param name="direction">Constant indicating layout direction.</param>
        <summary>Gets a character range within the limits of a defined direction.</summary>
        <returns>Gets a range from a given text position to the ultimate extent in a defined direction.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCharacterRangeAtPoint">
      <MemberSignature Language="C#" Value="public UIKit.UITextRange GetCharacterRangeAtPoint (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextRange GetCharacterRangeAtPoint(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("characterRangeAtPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">Point in a view where document text is being drawn.</param>
        <summary>Gets the character or a range of characters in a document that exists at a given point.</summary>
        <returns>Gets the point in a view where the document text is being drawn.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClosestPositionToPoint">
      <MemberSignature Language="C#" Value="public UIKit.UITextPosition GetClosestPositionToPoint (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextPosition GetClosestPositionToPoint(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("closestPositionToPoint:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">Point in a view where document text is being drawn.</param>
        <summary>Gets the closest position in a document that exists to a given point.</summary>
        <returns>The closest position to the point. </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetClosestPositionToPoint">
      <MemberSignature Language="C#" Value="public UIKit.UITextPosition GetClosestPositionToPoint (CoreGraphics.CGPoint point, UIKit.UITextRange withinRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextPosition GetClosestPositionToPoint(valuetype CoreGraphics.CGPoint point, class UIKit.UITextRange withinRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("closestPositionToPoint:withinRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="withinRange" Type="UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="withinRange">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFirstRectForRange">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetFirstRectForRange (UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetFirstRectForRange(class UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("firstRectForRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">	
A UITextRange object indicating the range of a document's text.</param>
        <summary>Gets the first rectangle enclosing a specified range of document text.</summary>
        <returns>The first rectangle enclosing a specified range.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetOffsetFromPosition">
      <MemberSignature Language="C#" Value="public nint GetOffsetFromPosition (UIKit.UITextPosition fromPosition, UIKit.UITextPosition toPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetOffsetFromPosition(class UIKit.UITextPosition fromPosition, class UIKit.UITextPosition toPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("offsetFromPosition:toPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="UIKit.UITextPosition" />
        <Parameter Name="toPosition" Type="UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="fromPosition">Initial text position.</param>
        <param name="toPosition">Ultimate text position.</param>
        <summary>Gets the number of visible characters between two defined text positions.</summary>
        <returns>The number of visible characters between the two specified text positions.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public UIKit.UITextPosition GetPosition (UIKit.UITextPosition fromPosition, nint offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextPosition GetPosition(class UIKit.UITextPosition fromPosition, valuetype System.nint offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("positionFromPosition:offset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="UIKit.UITextPosition" />
        <Parameter Name="offset" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="fromPosition">Initial text position.</param>
        <param name="offset">Character offset from the initial position.</param>
        <summary>Gets the character offset from the initial position.</summary>
        <returns>The specified character offset.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPosition">
      <MemberSignature Language="C#" Value="public UIKit.UITextPosition GetPosition (UIKit.UITextPosition fromPosition, UIKit.UITextLayoutDirection inDirection, nint offset);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextPosition GetPosition(class UIKit.UITextPosition fromPosition, valuetype UIKit.UITextLayoutDirection inDirection, valuetype System.nint offset) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("positionFromPosition:inDirection:offset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="UIKit.UITextPosition" />
        <Parameter Name="inDirection" Type="UIKit.UITextLayoutDirection" />
        <Parameter Name="offset" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="fromPosition">Initial text position</param>
        <param name="inDirection">A constant indicating either backward or forward direction for storage.</param>
        <param name="offset">Character offset from the initial position.</param>
        <summary>Gets the character offset from an initial position.</summary>
        <returns>The specified character offset.</returns>
        <remarks>This can be either a positive or negative value.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPositionWithinRange">
      <MemberSignature Language="C#" Value="public UIKit.UITextPosition GetPositionWithinRange (UIKit.UITextRange range, UIKit.UITextLayoutDirection direction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextPosition GetPositionWithinRange(class UIKit.UITextRange range, valuetype UIKit.UITextLayoutDirection direction) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("positionWithinRange:farthestInDirection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextPosition</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="UIKit.UITextRange" />
        <Parameter Name="direction" Type="UIKit.UITextLayoutDirection" />
      </Parameters>
      <Docs>
        <param name="range">A UITextRange object indicating the range of a document's text.</param>
        <param name="direction">A constant indicating direction for storage.</param>
        <summary>Gets a position within a specified range.</summary>
        <returns>A position within a specified range.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSelectionRects">
      <MemberSignature Language="C#" Value="public UIKit.UITextSelectionRect[] GetSelectionRects (UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextSelectionRect[] GetSelectionRects(class UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("selectionRectsForRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextSelectionRect[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">A UITextRange object indicating the range of a document's text.</param>
        <summary>Gets an array of selection rects that corresponds to a text range.</summary>
        <returns>An array of selection rects.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTextRange">
      <MemberSignature Language="C#" Value="public UIKit.UITextRange GetTextRange (UIKit.UITextPosition fromPosition, UIKit.UITextPosition toPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextRange GetTextRange(class UIKit.UITextPosition fromPosition, class UIKit.UITextPosition toPosition) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textRangeFromPosition:toPosition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="fromPosition" Type="UIKit.UITextPosition" />
        <Parameter Name="toPosition" Type="UIKit.UITextPosition" />
      </Parameters>
      <Docs>
        <param name="fromPosition">Initial text position.</param>
        <param name="toPosition">Ultimate text position.</param>
        <summary>Gets a specified text range.</summary>
        <returns>Defined text range.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkedTextRange">
      <MemberSignature Language="C#" Value="public UIKit.UITextRange MarkedTextRange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITextRange MarkedTextRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("markedTextRange")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The currently marked range of text in a given document.</summary>
        <value>If there is no text marked, the value is <see langword="null" />; all else  is provisionally inserted requiring user confirmation.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarkedTextStyle">
      <MemberSignature Language="C#" Value="public Foundation.NSDictionary MarkedTextStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary MarkedTextStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("markedTextStyle", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setMarkedTextStyle:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Attribute dictionary describing how text should be drawn.</summary>
        <value>Strings indicating style definition.</value>
        <remarks>This is marked to indicate the necessity for unique visual treatment in display.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceText">
      <MemberSignature Language="C#" Value="public void ReplaceText (UIKit.UITextRange range, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceText(class UIKit.UITextRange range, string text) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("replaceRange:withText:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="UIKit.UITextRange" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="range">The range of text to be replaced.</param>
        <param name="text">A string defining text replacement within a "range".</param>
        <summary>Replaces document text within a specified range.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectedTextRange">
      <MemberSignature Language="C#" Value="public UIKit.UITextRange SelectedTextRange { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITextRange SelectedTextRange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("selectedTextRange", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSelectedTextRange:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextRange</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The range of a document's selected text.</summary>
        <value>If there is no current specified selection, then it is set to <see langword="null" />.</value>
        <remarks>If the specified range has length, it specifies currently selected text; if zero length, it specifies only the caret at the insertion point.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBaseWritingDirectionforRange">
      <MemberSignature Language="C#" Value="public void SetBaseWritingDirectionforRange (UIKit.UITextWritingDirection writingDirection, UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBaseWritingDirectionforRange(valuetype UIKit.UITextWritingDirection writingDirection, class UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBaseWritingDirection:forRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="writingDirection" Type="UIKit.UITextWritingDirection" />
        <Parameter Name="range" Type="UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="writingDirection">Constant indicating layout direction.</param>
        <param name="range">A UITextRange object indicating the range of a document's text.</param>
        <summary>Sets a base directon for writing in the specified range of text.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMarkedText">
      <MemberSignature Language="C#" Value="public void SetMarkedText (string markedText, Foundation.NSRange selectedRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMarkedText(string markedText, valuetype Foundation.NSRange selectedRange) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setMarkedText:selectedRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="markedText" Type="System.String" />
        <Parameter Name="selectedRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="markedText">Text that is to be marked.</param>
        <param name="selectedRange">An NSRange object indicating the range of a document's text.</param>
        <summary>Sets the marked text and marks it as the current selection.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextInRange">
      <MemberSignature Language="C#" Value="public string TextInRange (UIKit.UITextRange range);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TextInRange(class UIKit.UITextRange range) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textInRange:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="range" Type="UIKit.UITextRange" />
      </Parameters>
      <Docs>
        <param name="range">A UITextRange object indicating the range of a document's text.</param>
        <summary>Gets all the text that is specified within a certain range.</summary>
        <returns>Document substring falling within a certain specified range.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnmarkText">
      <MemberSignature Language="C#" Value="public void UnmarkText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnmarkText() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("unmarkText")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Unmarks all currently marked text within a document</summary>
        <remarks>Subsequent to this method being called, the value of "MarkedTextRange" is set to <see langword="null" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakInputDelegate">
      <MemberSignature Language="C#" Value="public Foundation.NSObject WeakInputDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakInputDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("inputDelegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setInputDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates a weak input delegate.</summary>
        <value>Automatically assigned at runtime.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakTokenizer">
      <MemberSignature Language="C#" Value="public Foundation.NSObject WeakTokenizer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakTokenizer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("tokenizer")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates a weak tokenizer.</summary>
        <value>Standard units of granularity including characters, words, lines, and paragraphs.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
