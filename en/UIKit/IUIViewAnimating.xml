<Type Name="IUIViewAnimating" FullName="UIKit.IUIViewAnimating">
  <TypeSignature Language="C#" Value="public interface IUIViewAnimating : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUIViewAnimating implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:UIKit.IUIViewAnimating" />
  <TypeSignature Language="F#" Value="type IUIViewAnimating = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol(Name="UIViewAnimating", WrapperType=typeof(UIKit.UIViewAnimatingWrapper))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="StartAnimation", Selector="startAnimation")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="StartAnimation", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="startAnimationAfterDelay:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="PauseAnimation", Selector="pauseAnimation")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="StopAnimation", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="stopAnimation:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="FinishAnimation", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], Selector="finishAnimationAtPosition:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="state", IsProperty=true, IsRequired=true, IsStatic=false, Name="State", PropertyType=typeof(UIKit.UIViewAnimatingState), Selector="state")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isRunning", IsProperty=true, IsRequired=true, IsStatic=false, Name="Running", PropertyType=typeof(System.Boolean), Selector="running")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isReversed", IsProperty=true, IsRequired=true, IsStatic=false, Name="Reversed", PropertyType=typeof(System.Boolean), Selector="reversed", SetterSelector="setReversed:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="fractionComplete", IsProperty=true, IsRequired=true, IsStatic=false, Name="FractionComplete", PropertyType=typeof(System.nfloat), Selector="fractionComplete", SetterSelector="setFractionComplete:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="StartAnimation", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.Double) }, Selector="startAnimationAfterDelay:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="StopAnimation", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.Boolean) }, Selector="stopAnimation:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="FinishAnimation", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(UIKit.UIViewAnimatingPosition) }, Selector="finishAnimationAtPosition:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface defining methods for custom animator objects.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="FinishAnimation">
      <MemberSignature Language="C#" Value="public void FinishAnimation (UIKit.UIViewAnimatingPosition finalPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishAnimation(valuetype UIKit.UIViewAnimatingPosition finalPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewAnimating.FinishAnimation(UIKit.UIViewAnimatingPosition)" />
      <MemberSignature Language="F#" Value="abstract member FinishAnimation : UIKit.UIViewAnimatingPosition -&gt; unit" Usage="iUIViewAnimating.FinishAnimation finalPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("finishAnimationAtPosition:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="finalPosition" Type="UIKit.UIViewAnimatingPosition" />
      </Parameters>
      <Docs>
        <param name="finalPosition">To be added.</param>
        <summary>Finishes the animation. Must be preceded by call to <see cref="M:UIKit.UIViewPropertyAnimator.CreateRunningPropertyAnimator(System.Double,System.Double,UIKit.UIViewAnimationOptions,System.Action,System.Action{UIKit.UIViewAnimatingPosition})" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FractionComplete">
      <MemberSignature Language="C#" Value="public nfloat FractionComplete { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat FractionComplete" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewAnimating.FractionComplete" />
      <MemberSignature Language="F#" Value="member this.FractionComplete : nfloat with get, set" Usage="UIKit.IUIViewAnimating.FractionComplete" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("fractionComplete")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setFractionComplete:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the percentage of the property's animation completion.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseAnimation">
      <MemberSignature Language="C#" Value="public void PauseAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PauseAnimation() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewAnimating.PauseAnimation" />
      <MemberSignature Language="F#" Value="abstract member PauseAnimation : unit -&gt; unit" Usage="iUIViewAnimating.PauseAnimation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("pauseAnimation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pauses the animation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reversed">
      <MemberSignature Language="C#" Value="public bool Reversed { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Reversed" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewAnimating.Reversed" />
      <MemberSignature Language="F#" Value="member this.Reversed : bool with get, set" Usage="UIKit.IUIViewAnimating.Reversed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isReversed")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setReversed:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the direction of the animation.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Running">
      <MemberSignature Language="C#" Value="public bool Running { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Running" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewAnimating.Running" />
      <MemberSignature Language="F#" Value="member this.Running : bool" Usage="UIKit.IUIViewAnimating.Running" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isRunning")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the animation is currently running.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAnimation">
      <MemberSignature Language="C#" Value="public void StartAnimation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAnimation() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewAnimating.StartAnimation" />
      <MemberSignature Language="F#" Value="abstract member StartAnimation : unit -&gt; unit" Usage="iUIViewAnimating.StartAnimation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startAnimation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins the animation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAnimation">
      <MemberSignature Language="C#" Value="public void StartAnimation (double delay);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StartAnimation(float64 delay) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewAnimating.StartAnimation(System.Double)" />
      <MemberSignature Language="F#" Value="abstract member StartAnimation : double -&gt; unit" Usage="iUIViewAnimating.StartAnimation delay" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startAnimationAfterDelay:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="delay" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="delay">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="State">
      <MemberSignature Language="C#" Value="public UIKit.UIViewAnimatingState State { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIViewAnimatingState State" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewAnimating.State" />
      <MemberSignature Language="F#" Value="member this.State : UIKit.UIViewAnimatingState" Usage="UIKit.IUIViewAnimating.State" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("state")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewAnimatingState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current <see cref="T:UIKit.UIViewAnimatingState" /> of the animation.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StopAnimation">
      <MemberSignature Language="C#" Value="public void StopAnimation (bool withoutFinishing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void StopAnimation(bool withoutFinishing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewAnimating.StopAnimation(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member StopAnimation : bool -&gt; unit" Usage="iUIViewAnimating.StopAnimation withoutFinishing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stopAnimation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withoutFinishing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="withoutFinishing">To be added.</param>
        <summary>Stops the animation at the current position.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
