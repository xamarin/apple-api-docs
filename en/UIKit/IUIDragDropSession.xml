<Type Name="IUIDragDropSession" FullName="UIKit.IUIDragDropSession">
  <TypeSignature Language="C#" Value="public interface IUIDragDropSession : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUIDragDropSession implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:UIKit.IUIDragDropSession" />
  <TypeSignature Language="F#" Value="type IUIDragDropSession = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol(Name="UIDragDropSession", WrapperType=typeof(UIKit.UIDragDropSessionWrapper))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="LocationInView", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(CoreGraphics.CGPoint), Selector="locationInView:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="HasConformingItems", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="hasItemsConformingToTypeIdentifiers:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CanLoadObjects", ParameterByRef=Mono.Cecil.CustomAttributeArgument[], ParameterType=Mono.Cecil.CustomAttributeArgument[], ReturnType=typeof(System.Boolean), Selector="canLoadObjectsOfClass:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="items", IsProperty=true, IsRequired=true, IsStatic=false, Name="Items", PropertyType=typeof(UIKit.UIDragItem[]), Selector="items")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="allowsMoveOperation", IsProperty=true, IsRequired=true, IsStatic=false, Name="AllowsMoveOperation", PropertyType=typeof(System.Boolean), Selector="allowsMoveOperation")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isRestrictedToDraggingApplication", IsProperty=true, IsRequired=true, IsStatic=false, Name="RestrictedToDraggingApplication", PropertyType=typeof(System.Boolean), Selector="restrictedToDraggingApplication")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="LocationInView", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(UIKit.UIView) }, ReturnType=typeof(CoreGraphics.CGPoint), Selector="locationInView:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="HasConformingItems", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.String[]) }, ReturnType=typeof(System.Boolean), Selector="hasItemsConformingToTypeIdentifiers:")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CanLoadObjects", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(ObjCRuntime.Class) }, ReturnType=typeof(System.Boolean), Selector="canLoadObjectsOfClass:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface for querying drag-and-drop capabilities and state.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AllowsMoveOperation">
      <MemberSignature Language="C#" Value="public bool AllowsMoveOperation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsMoveOperation" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIDragDropSession.AllowsMoveOperation" />
      <MemberSignature Language="F#" Value="member this.AllowsMoveOperation : bool" Usage="UIKit.IUIDragDropSession.AllowsMoveOperation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allowsMoveOperation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the session can move items within a single app.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanLoadObjects">
      <MemberSignature Language="C#" Value="public bool CanLoadObjects (ObjCRuntime.Class itemProviderReadingClass);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanLoadObjects(class ObjCRuntime.Class itemProviderReadingClass) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIDragDropSession.CanLoadObjects(ObjCRuntime.Class)" />
      <MemberSignature Language="F#" Value="abstract member CanLoadObjects : ObjCRuntime.Class -&gt; bool" Usage="iUIDragDropSession.CanLoadObjects itemProviderReadingClass" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("canLoadObjectsOfClass:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemProviderReadingClass" Type="ObjCRuntime.Class" />
      </Parameters>
      <Docs>
        <param name="itemProviderReadingClass">The class of objects to check.</param>
        <summary>Returns a Boolean value that tells whether the session can load objects of the specified class.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasConformingItems">
      <MemberSignature Language="C#" Value="public bool HasConformingItems (string[] typeIdentifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasConformingItems(string[] typeIdentifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIDragDropSession.HasConformingItems(System.String[])" />
      <MemberSignature Language="F#" Value="abstract member HasConformingItems : string[] -&gt; bool" Usage="iUIDragDropSession.HasConformingItems typeIdentifiers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("hasItemsConformingToTypeIdentifiers:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifiers" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="typeIdentifiers">The type identifiers to check.</param>
        <summary>TReturns a Boolean value that tells whether the session contains at least one item that is described by any of the specified type identifiers.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Items">
      <MemberSignature Language="C#" Value="public UIKit.UIDragItem[] Items { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIDragItem[] Items" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIDragDropSession.Items" />
      <MemberSignature Language="F#" Value="member this.Items : UIKit.UIDragItem[]" Usage="UIKit.IUIDragDropSession.Items" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("items")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDragItem[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the drag items that are in the session.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocationInView">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGPoint LocationInView (UIKit.UIView view);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGPoint LocationInView(class UIKit.UIView view) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIDragDropSession.LocationInView(UIKit.UIView)" />
      <MemberSignature Language="F#" Value="abstract member LocationInView : UIKit.UIView -&gt; CoreGraphics.CGPoint" Usage="iUIDragDropSession.LocationInView view" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("locationInView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="view" Type="UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="view">The view to query.</param>
        <summary>Returns the location of the drag-drop activity in the coordinate frame of the specified <paramref name="view" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RestrictedToDraggingApplication">
      <MemberSignature Language="C#" Value="public bool RestrictedToDraggingApplication { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RestrictedToDraggingApplication" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIDragDropSession.RestrictedToDraggingApplication" />
      <MemberSignature Language="F#" Value="member this.RestrictedToDraggingApplication : bool" Usage="UIKit.IUIDragDropSession.RestrictedToDraggingApplication" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isRestrictedToDraggingApplication")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the drag activity is confined to the originating app.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
