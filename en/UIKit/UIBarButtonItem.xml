<Type Name="UIBarButtonItem" FullName="UIKit.UIBarButtonItem">
  <TypeSignature Language="C#" Value="public class UIBarButtonItem : UIKit.UIBarItem, IDisposable, UIKit.IUISpringLoadedInteractionSupporting" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIBarButtonItem extends UIKit.UIBarItem implements class Foundation.INSCoding, class ObjCRuntime.INativeObject, class UIKit.IUISpringLoadedInteractionSupporting, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIBarItem</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>UIKit.IUISpringLoadedInteractionSupporting</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UIBarButtonItem", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A button item hosted in either a <see cref="T:UIKit.UIToolbar" /> or a <see cref="T:UIKit.UINavigationBar" />.</summary>
    <remarks>
      <para>UIBarButtonItems are special buttons designed to be placed in either a <see cref="T:UIKit.UIToolbar" /> or a <see cref="T:UIKit.UINavigationBar" />. They show either a title or an image and change their appearance when pressed. UIBarButtonItems can also be set to a number of system provided button styles available in the <see cref="T:UIKit.UIBarButtonSystemItem" /> enumeration.
      </para>
      <para>In iOS 11, the layout strategy for <see cref="T:UIKit.UIBarButtonItem" /> objects changed from autoresizing to constraints. Developers who embed other elements in their <see cref="T:UIKit.UIBarButtonItem" /> objects (such as an embedded <see cref="T:UIKit.UIButton" />) should explicitly set constraints, as shown in the following example:</para>
      <example>
        <code lang="C#"><![CDATA[
var btn = new UIButton();
btn.TranslatesAutoresizingMaskIntoConstraints = false;
btn.WidthAnchor.ConstraintEqualTo(32.0f).Active = true;
btn.HeightAnchor.ConstraintEqualTo(32.0f).Active = true;

var barButtonItem = new UIBarButtonItem(btn);
    ]]></code>
      </example>
    </remarks>
    <altmember cref="T:MonoTouch.UIKit.UIToolbar" />
    <altmember cref="T:MonoTouch.UIKit.UINavigationBar" />
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIBarButtonItem_Class/index.html">Apple documentation for <c>UIBarButtonItem</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks></remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIBarButtonItem (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem (MonoTouch.UIKit.UIBarButtonSystemItem systemItem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MonoTouch.UIKit.UIBarButtonSystemItem systemItem) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="systemItem" Type="MonoTouch.UIKit.UIBarButtonSystemItem" />
      </Parameters>
      <Docs>
        <param name="systemItem">The <see cref="T:UIKit.UIBarButtonSystemItem" /> used to create the button.</param>
        <summary>Constructor that allows a particular <see cref="T:UIKit.UIBarButtonSystemItem" /> to be specified when the button is created.</summary>
        <remarks>The <see cref="T:UIKit.UIBarButtonSystemItem" /> allows a number of buttons pre-defined by the system to be used when creating a UIBarButtonItem.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem (MonoTouch.UIKit.UIView customView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIView customView) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCustomView:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="customView" Type="MonoTouch.UIKit.UIView" />
      </Parameters>
      <Docs>
        <param name="customView">The custom view to use when creating the UIBarButtonItem.</param>
        <summary>Constructor that allows a custom view to be specified for a UIBarButtonItem.</summary>
        <remarks>The custom view allows an arbitray <see cref="T:UIKit.UIView" /> to be used for the UIBarButtonItem.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIBarButtonItem (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem (MonoTouch.UIKit.UIBarButtonSystemItem systemItem, EventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MonoTouch.UIKit.UIBarButtonSystemItem systemItem, class System.EventHandler handler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="systemItem" Type="MonoTouch.UIKit.UIBarButtonSystemItem" />
        <Parameter Name="handler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="systemItem">The <see cref="T:UIKit.UIBarButtonSystemItem" /> used to create the button.</param>
        <param name="handler">The event handler to be called when the button is pressed.</param>
        <summary>Constructor that allows a particular <see cref="T:UIKit.UIBarButtonSystemItem" /> to be specified when the button is created along with an event handler.</summary>
        <remarks>The event handler will be called when the button is pressed.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem (MonoTouch.UIKit.UIBarButtonSystemItem systemItem, MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype MonoTouch.UIKit.UIBarButtonSystemItem systemItem, class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector action) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithBarButtonSystemItem:target:action:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="systemItem" Type="MonoTouch.UIKit.UIBarButtonSystemItem" />
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="systemItem">The <see cref="T:UIKit.UIBarButtonSystemItem" /> used to create the button.</param>
        <param name="target">
          <para>An NSObject that will receive the action message.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="action">
          <para>The action that will be sent to the object specified as the target.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Constructor that allows a system item along with a target-action pair to be specified.</summary>
        <remarks>A target and action are an Objective-C mechanism for allowing a method in some object, the target, to be called for some action. Objective-C uses message sending, where the message includes a selector that equates to the name of the method to call. This is basically another way of handling the button being pressed.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem (MonoTouch.UIKit.UIImage image, MonoTouch.UIKit.UIBarButtonItemStyle style, EventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIImage image, valuetype MonoTouch.UIKit.UIBarButtonItemStyle style, class System.EventHandler handler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="style" Type="MonoTouch.UIKit.UIBarButtonItemStyle" />
        <Parameter Name="handler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="image">Image to be used in the button. If it is too large, the image is scaled to fit.</param>
        <param name="style">A style value defined in <see cref="T:UIKit.UIBarButtonItemStyle" />.</param>
        <param name="handler">The event handler to be called when the button is pressed.</param>
        <summary>Constructor that allows a custom image, style and evnet handler to be specied when the button is created.</summary>
        <remarks>Alpha values from the source image, ignoring opaque values, are used to create the image that appears on the button.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem (string title, MonoTouch.UIKit.UIBarButtonItemStyle style, EventHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string title, valuetype MonoTouch.UIKit.UIBarButtonItemStyle style, class System.EventHandler handler) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="style" Type="MonoTouch.UIKit.UIBarButtonItemStyle" />
        <Parameter Name="handler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="title">String value used to display the title of the button.</param>
        <param name="style">A style value defined in <see cref="T:UIKit.UIBarButtonItemStyle" />.</param>
        <param name="handler">The event handler to be called when the button is pressed.</param>
        <summary>Constructor that allows a title to be specified for display on the button depending on the style used. Also allows an event handler to be specified that will be called when the button is pressed.</summary>
        <remarks>Some <see cref="T:UIKit.UIBarButtonItemStyle" /> values display the title on the button while others display an image.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem (MonoTouch.UIKit.UIImage image, MonoTouch.UIKit.UIBarButtonItemStyle style, MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIImage image, valuetype MonoTouch.UIKit.UIBarButtonItemStyle style, class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector action) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithImage:style:target:action:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="style" Type="MonoTouch.UIKit.UIBarButtonItemStyle" />
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="image">
          <para>Image to be used in the button. If it is too large, the image is scaled to fit.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="style">A style value defined in <see cref="T:UIKit.UIBarButtonItemStyle" />.</param>
        <param name="target">
          <para>An NSObject that will receive the action message.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="action">
          <para>The action that will be sent to the object specified as the target.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Constructor that allows an image and style to be specified, along with a target-action pair.</summary>
        <remarks>
          <para>Alpha values from the source image, ignoring opaque values, are used to create the image that appears on the button.</para>
          <para>A target and action are an Objective-C mechanism for allowing a method in some object, the target, to be called for some action. Objective-C uses message sending, where the message includes a selector that equates to the name of the method to call. This is basically another way of handling the button being pressed.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem (string title, MonoTouch.UIKit.UIBarButtonItemStyle style, MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string title, valuetype MonoTouch.UIKit.UIBarButtonItemStyle style, class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector action) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithTitle:style:target:action:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="style" Type="MonoTouch.UIKit.UIBarButtonItemStyle" />
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="title">
          <para>String value used to display the title of the button.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="style">A style value defined in <see cref="T:UIKit.UIBarButtonItemStyle" />.</param>
        <param name="target">
          <para>An NSObject that will receive the action message.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="action">
          <para>The action that will be sent to the object specified as the target.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Constructor that allows specifying a title and style for a UIBarButtonItem along with an Objective-C style target-action pair.</summary>
        <remarks>A target and action are an Objective-C mechanism for allowing a method in some object, the target, to be called for some action. Objective-C uses message sending, where the message includes a selector that equates to the name of the method to call. This is basically another way of handling the button being pressed.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIBarButtonItem (MonoTouch.UIKit.UIImage image, MonoTouch.UIKit.UIImage landscapeImagePhone, MonoTouch.UIKit.UIBarButtonItemStyle style, MonoTouch.Foundation.NSObject target, MonoTouch.ObjCRuntime.Selector action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.UIKit.UIImage image, class MonoTouch.UIKit.UIImage landscapeImagePhone, valuetype MonoTouch.UIKit.UIBarButtonItemStyle style, class MonoTouch.Foundation.NSObject target, class MonoTouch.ObjCRuntime.Selector action) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithImage:landscapeImagePhone:style:target:action:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="image" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="landscapeImagePhone" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="style" Type="MonoTouch.UIKit.UIBarButtonItemStyle" />
        <Parameter Name="target" Type="MonoTouch.Foundation.NSObject" />
        <Parameter Name="action" Type="MonoTouch.ObjCRuntime.Selector" />
      </Parameters>
      <Docs>
        <param name="image">
          <para>Image to be used in the button. If it is too large, the image is scaled to fit.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="landscapeImagePhone">
          <para>The landscape image to use.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="style">A style value defined in <see cref="T:UIKit.UIBarButtonItemStyle" />.</param>
        <param name="target">
          <para>An NSObject that will receive the action message.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="action">
          <para>The action that will be sent to the object specified as the target.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Constructor that allows specifying separate images for landscape and portrait.</summary>
        <remarks>
          <para>The landscape image will be used when the <see cref="T:UIKit.UIUserInterfaceIdiom" /> is Phone.</para>
          <para>A target and action are an Objective-C mechanism for allowing a method in some object, the target, to be called for some action. Objective-C uses message sending, where the message includes a selector that equates to the name of the method to call. This is basically another way of handling the button being pressed.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.ObjCRuntime.Selector Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.ObjCRuntime.Selector Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("action")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setAction:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.ObjCRuntime.Selector</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The action sent to the object specified as the target.</summary>
        <value>
          <para></para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>A target and action are an Objective-C mechanism for allowing a method in some object, the target, to be called for some action. Objective-C uses message sending, where the message includes a selector that equates to the name of the method to call. This is basically another way of handling the button being pressed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIBarButtonItem.UIBarButtonItemAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.UIKit.UIBarButtonItem/UIBarButtonItemAppearance Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIBarButtonItem+UIBarButtonItemAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value></value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UIBarButtonItem.</para>
          <para>If developers want to control the appearance of subclasses of UIBarButtonItem, they should use the <see cref="M:UIKit.UIBarButtonItem.GetAppearance" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIBarButtonItem.UIBarButtonItemAppearance AppearanceWhenContainedIn (Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIBarButtonItem/UIBarButtonItemAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIBarButtonItem+UIBarButtonItemAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIBarButtonItem when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of UIBarButtonItem, they should use the <see cref="M:UIKit.UIBarButtonItem.GetAppearance" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ButtonGroup">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIBarButtonItemGroup ButtonGroup { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIBarButtonItemGroup ButtonGroup" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("buttonGroup")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIBarButtonItemGroup</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:UIKit.UIBarButtonItemGroup" />, if any, to which this <see cref="T:UIKit.UIBarButtonItem" /> belongs.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clicked">
      <MemberSignature Language="C#" Value="public event EventHandler Clicked;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Clicked" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This event is raised when the user clicks/taps on this UIBarButtonItem.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName="CustomView">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIView CustomView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIView CustomView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("customView")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setCustomView:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A custom view used to represent the UIBarButtonItem</summary>
        <value>
          <para></para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>The custom view allows an arbitray <see cref="T:UIKit.UIView" /> to be used for the UIBarButtonItem.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIBarButtonItem object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIBarButtonItem class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UIBarButtonItem ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public override bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("isEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Allows control over whether a UIBarButtonItem is enabled or disabled.</summary>
        <value>True if the UIBarButtonItem is enabled. False if it is disabled.</value>
        <remarks>If a UIBarButtonItem is enabled, it can be interacted with. If it is disabled, it still appears, but cannot be interacted with.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIBarButtonItem.UIBarButtonItemAppearance GetAppearance (MonoTouch.UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIBarButtonItem/UIBarButtonItemAppearance GetAppearance(class MonoTouch.UIKit.UITraitCollection traits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIBarButtonItem+UIBarButtonItemAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIBarButtonItem.UIBarButtonItemAppearance GetAppearance (MonoTouch.UIKit.UITraitCollection traits, Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIBarButtonItem/UIBarButtonItemAppearance GetAppearance(class MonoTouch.UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIBarButtonItem+UIBarButtonItemAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Returns an appearance proxy for the specified <paramref name="traits" /> when found in the <paramref name="containers" /> containment hierarchy.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIBarButtonItem.UIBarButtonItemAppearance GetAppearance&lt;T&gt; () where T : MonoTouch.UIKit.UIBarButtonItem;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIBarButtonItem/UIBarButtonItemAppearance GetAppearance&lt;(class MonoTouch.UIKit.UIBarButtonItem) T&gt;() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIBarButtonItem+UIBarButtonItemAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIBarButtonItem.</typeparam>
        <summary>
          <para>Obtains the appearance proxy <see cref="T:UIKit.UIBarButtonItem.UIBarButtonItemAppearance" /> for the subclass of UIBarButtonItem.</para>
        </summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property, or the <see cref="M:UIKit.UIBarButtonItemAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIBarButtonItem.GetAppearance<MyUIBarButtonItemSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIBarButtonItem.UIBarButtonItemAppearance GetAppearance&lt;T&gt; (MonoTouch.UIKit.UITraitCollection traits) where T : MonoTouch.UIKit.UIBarButtonItem;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIBarButtonItem/UIBarButtonItemAppearance GetAppearance&lt;(class MonoTouch.UIKit.UIBarButtonItem) T&gt;(class MonoTouch.UIKit.UITraitCollection traits) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIBarButtonItem+UIBarButtonItemAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UIBarButtonItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIBarButtonItem.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>
          <para>Obtains the appearance proxy <see cref="T:UIKit.UIBarButtonItem.UIBarButtonItemAppearance" /> for the subclass of UIBarButtonItem.</para>
        </summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIBarButtonItem.</para>
          <para>Unlike the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property, or the <see cref="M:UIKit.UIBarButtonItemAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIBarButtonItem.GetAppearance<MyUIBarButtonItemSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static MonoTouch.UIKit.UIBarButtonItem.UIBarButtonItemAppearance GetAppearance&lt;T&gt; (MonoTouch.UIKit.UITraitCollection traits, Type[] containers) where T : MonoTouch.UIKit.UIBarButtonItem;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.UIKit.UIBarButtonItem/UIBarButtonItemAppearance GetAppearance&lt;(class MonoTouch.UIKit.UIBarButtonItem) T&gt;(class MonoTouch.UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIBarButtonItem+UIBarButtonItemAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UIBarButtonItem</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="MonoTouch.UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UIBarButtonItem.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>
          <para>Obtains the appearance proxy <see cref="T:UIKit.UIBarButtonItem.UIBarButtonItemAppearance" /> for the subclass of UIBarButtonItem that has the specified trait collection when the view is hosted in the specified hierarchy.</para>
        </summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UIBarButtonItem that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property, or the <see cref="M:UIKit.UIBarButtonItemAppearanceWhenContainedIn" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UIBarButtonItem.GetAppearance<MyUIBarButtonItemSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBackButtonBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImage GetBackButtonBackgroundImage (MonoTouch.UIKit.UIControlState forState, MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIImage GetBackButtonBackgroundImage(valuetype MonoTouch.UIKit.UIControlState forState, valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("backButtonBackgroundImageForState:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forState" Type="MonoTouch.UIKit.UIControlState" />
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="forState">To be added.</param>
        <param name="barMetrics">To be added.</param>
        <summary>Back button background image for a given control state. Only used for a <see cref="T:UIKit.UINavigationBar" /> back button.</summary>
        <returns>The back button background image.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBackButtonBackgroundVerticalPositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual nfloat GetBackButtonBackgroundVerticalPositionAdjustment (MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetBackButtonBackgroundVerticalPositionAdjustment(valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("backButtonBackgroundVerticalPositionAdjustmentForBarMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="barMetrics">The bar metrics to return the back button vertical offset for.</param>
        <summary>The back button vertical position offset.</summary>
        <returns>Returns the vertical position offset for specified bar metrics.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBackButtonTitlePositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIOffset GetBackButtonTitlePositionAdjustment (MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.UIOffset GetBackButtonTitlePositionAdjustment(valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("backButtonTitlePositionAdjustmentForBarMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="barMetrics">The bar metrics to return the back button title offset for.</param>
        <summary>The back button title offset.</summary>
        <returns>Returns the title offset for specified bar metrics.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImage GetBackgroundImage (MonoTouch.UIKit.UIControlState state, MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIImage GetBackgroundImage(valuetype MonoTouch.UIKit.UIControlState state, valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("backgroundImageForState:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="MonoTouch.UIKit.UIControlState" />
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="state">The control state to return the background image for.</param>
        <param name="barMetrics">The bar metrics to return the background image for.</param>
        <summary>The background image for the button.</summary>
        <returns>The background imnage for the specified state and bar metrics.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIImage GetBackgroundImage (MonoTouch.UIKit.UIControlState state, MonoTouch.UIKit.UIBarButtonItemStyle style, MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.UIKit.UIImage GetBackgroundImage(valuetype MonoTouch.UIKit.UIControlState state, valuetype MonoTouch.UIKit.UIBarButtonItemStyle style, valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("backgroundImageForState:style:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="MonoTouch.UIKit.UIControlState" />
        <Parameter Name="style" Type="MonoTouch.UIKit.UIBarButtonItemStyle" />
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="state">To be added.</param>
        <param name="style">To be added.</param>
        <param name="barMetrics">To be added.</param>
        <summary>The UIImage used as a background by the UIBarButtonItem.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetBackgroundVerticalPositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual nfloat GetBackgroundVerticalPositionAdjustment (MonoTouch.UIKit.UIBarMetrics forBarMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetBackgroundVerticalPositionAdjustment(valuetype MonoTouch.UIKit.UIBarMetrics forBarMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("backgroundVerticalPositionAdjustmentForBarMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBarMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="forBarMetrics">The bar metrics to return the vertical background image offset for.</param>
        <summary>The vertical offset of the background image.</summary>
        <returns>The vertical offset of the background image for the specified bar metrics. Used for vertical centering of image for bordered buttons.</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTitlePositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIOffset GetTitlePositionAdjustment (MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype MonoTouch.UIKit.UIOffset GetTitlePositionAdjustment(valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("titlePositionAdjustmentForBarMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIOffset</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="barMetrics">The bar metrics to return the title offset for.</param>
        <summary>Title offset for specified bar metrics..</summary>
        <returns>The title offset..</returns>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Image">
      <MemberSignature Language="C#" Value="public override MonoTouch.UIKit.UIImage Image { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIImage Image" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("image")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setImage:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The button's image.</summary>
        <value>
          <para></para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>Gets or sets the image to be displayed on the UIbarButtonItem.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageInsets">
      <MemberSignature Language="C#" Value="public override MonoTouch.UIKit.UIEdgeInsets ImageInsets { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIEdgeInsets ImageInsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("imageInsets")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setImageInsets:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Insets the button image.</summary>
        <value></value>
        <remarks>Allows the image on a button to be inset by supplying a <see cref="T:UIKit.UIEdgeInsets" /> value.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PossibleTitles">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSSet PossibleTitles { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSSet PossibleTitles" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("possibleTitles")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setPossibleTitles:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The set of all possible titles (used as a hint for system sizing).</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackButtonBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetBackButtonBackgroundImage (MonoTouch.UIKit.UIImage backgroundImage, MonoTouch.UIKit.UIControlState forState, MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackButtonBackgroundImage(class MonoTouch.UIKit.UIImage backgroundImage, valuetype MonoTouch.UIKit.UIControlState forState, valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBackButtonBackgroundImage:forState:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backgroundImage" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="forState" Type="MonoTouch.UIKit.UIControlState" />
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="backgroundImage">
          <para>The button's background image.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="forState">The state to set the background image for.</param>
        <param name="barMetrics">The bar metrics to se thte background image for</param>
        <summary>Allows the button's background image to be set.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackButtonBackgroundVerticalPositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual void SetBackButtonBackgroundVerticalPositionAdjustment (nfloat adjustment, MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackButtonBackgroundVerticalPositionAdjustment(valuetype System.nfloat adjustment, valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBackButtonBackgroundVerticalPositionAdjustment:forBarMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
        <Parameter Name="adjustment" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="adjustment">The vertical offset of the back button image.</param>
        <param name="barMetrics">The bar metrics to set the offset for.</param>
        <summary>Allows the vertical offset of the back button image to be specified for a given control state and bar metrics.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackButtonTitlePositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual void SetBackButtonTitlePositionAdjustment (MonoTouch.UIKit.UIOffset adjustment, MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackButtonTitlePositionAdjustment(valuetype MonoTouch.UIKit.UIOffset adjustment, valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBackButtonTitlePositionAdjustment:forBarMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adjustment" Type="MonoTouch.UIKit.UIOffset" />
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="adjustment">The offset of the back button title.</param>
        <param name="barMetrics">The bar metrics to set the offset for.</param>
        <summary>Allows the offset of the back button title to be specified for a given control state and bar metrics.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundImage (MonoTouch.UIKit.UIImage backgroundImage, MonoTouch.UIKit.UIControlState state, MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundImage(class MonoTouch.UIKit.UIImage backgroundImage, valuetype MonoTouch.UIKit.UIControlState state, valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBackgroundImage:forState:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backgroundImage" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="state" Type="MonoTouch.UIKit.UIControlState" />
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="backgroundImage">
          <para>The background image to use for the button.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="state">The control state to apply the background image for.</param>
        <param name="barMetrics">The bar metrics to apply the background image for.</param>
        <summary>Allows the background image to be set for the button for a given control state and bar metrics.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundImage">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundImage (MonoTouch.UIKit.UIImage backgroundImage, MonoTouch.UIKit.UIControlState state, MonoTouch.UIKit.UIBarButtonItemStyle style, MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundImage(class MonoTouch.UIKit.UIImage backgroundImage, valuetype MonoTouch.UIKit.UIControlState state, valuetype MonoTouch.UIKit.UIBarButtonItemStyle style, valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBackgroundImage:forState:style:barMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backgroundImage" Type="MonoTouch.UIKit.UIImage" />
        <Parameter Name="state" Type="MonoTouch.UIKit.UIControlState" />
        <Parameter Name="style" Type="MonoTouch.UIKit.UIBarButtonItemStyle" />
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="backgroundImage">
          <para>Background image to use for the UIBarButtonItem.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="state">To be added.</param>
        <param name="style">To be added.</param>
        <param name="barMetrics">To be added.</param>
        <summary>Specifies the UIImage used as a background.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBackgroundVerticalPositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual void SetBackgroundVerticalPositionAdjustment (nfloat adjustment, MonoTouch.UIKit.UIBarMetrics forBarMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetBackgroundVerticalPositionAdjustment(valuetype System.nfloat adjustment, valuetype MonoTouch.UIKit.UIBarMetrics forBarMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setBackgroundVerticalPositionAdjustment:forBarMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forBarMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
        <Parameter Name="adjustment" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="adjustment">The offset of the background's vertical position.</param>
        <param name="forBarMetrics">The bar metrics to apply the offset for.</param>
        <summary>Allows the background image to be offset for the specified bar metrics.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetTitlePositionAdjustment">
      <MemberSignature Language="C#" Value="public virtual void SetTitlePositionAdjustment (MonoTouch.UIKit.UIOffset adjustment, MonoTouch.UIKit.UIBarMetrics barMetrics);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetTitlePositionAdjustment(valuetype MonoTouch.UIKit.UIOffset adjustment, valuetype MonoTouch.UIKit.UIBarMetrics barMetrics) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setTitlePositionAdjustment:forBarMetrics:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="adjustment" Type="MonoTouch.UIKit.UIOffset" />
        <Parameter Name="barMetrics" Type="MonoTouch.UIKit.UIBarMetrics" />
      </Parameters>
      <Docs>
        <param name="adjustment">The title offset.</param>
        <param name="barMetrics">The bar metrics to offset the title for.</param>
        <summary>Allows the title to be offset for a specified bar metrics.</summary>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpringLoaded">
      <MemberSignature Language="C#" Value="public virtual bool SpringLoaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SpringLoaded" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isSpringLoaded")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setSpringLoaded:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Style">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIBarButtonItemStyle Style { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.UIKit.UIBarButtonItemStyle Style" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("style")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setStyle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIBarButtonItemStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The system style to use for the button.</summary>
        <value></value>
        <remarks>iOS provides a number of pre-defined UIBarButtonItem styles that can be used in the <see cref="T:UIKit.UIBarButtonItemStyle" /> enumeration.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public override nint Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("tag")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTag:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An integer that can be used to indentify the UIBarButtonItem.</summary>
        <value>To be added.</value>
        <remarks>An integer that can be used to indentify the UIBarButtonItem in an application.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Target">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Target { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSObject Target" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("target")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTarget:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The object that will receive the selector specified in the Action property.</summary>
        <value>
          <para></para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>The target will receive the message containing the selector from the Action property. This allows the target object to implement a method to handle the selector. This is basically another way of handling the UIButtonItem being pressed.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TintColor">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.UIKit.UIColor TintColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.UIKit.UIColor TintColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("tintColor")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTintColor:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 5, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The tint color to be used for the button.</summary>
        <value>
          <para></para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para id="tool-remark">This member participates in the <see cref="T:UIKit.UIAppearance" /> styling system.  See the <see cref="P:UIKit.UIBarButtonItem.Appearance" /> property and the <see cref="M:UIKit.UIBarButtonItem.AppearanceWhenContainedIn" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public override string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("title")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTitle:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The title that is displayed in the button</summary>
        <value>
          <para></para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>The title string that is dispakyed on the button.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Width">
      <MemberSignature Language="C#" Value="public virtual nfloat Width { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Width" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("width")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setWidth:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The width of the button.</summary>
        <value></value>
        <remarks>Allows the width of the button to be set and retrieved.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>