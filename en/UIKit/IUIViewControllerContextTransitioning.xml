<Type Name="IUIViewControllerContextTransitioning" FullName="UIKit.IUIViewControllerContextTransitioning">
  <TypeSignature Language="C#" Value="public interface IUIViewControllerContextTransitioning : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUIViewControllerContextTransitioning implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:UIKit.IUIViewControllerContextTransitioning" />
  <TypeSignature Language="F#" Value="type IUIViewControllerContextTransitioning = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="UIViewControllerContextTransitioning", WrapperType=typeof(UIKit.UIViewControllerContextTransitioningWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="FinishInteractiveTransition", Selector="finishInteractiveTransition")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CancelInteractiveTransition", Selector="cancelInteractiveTransition")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PauseInteractiveTransition", Selector="pauseInteractiveTransition")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="containerView", IsProperty=true, IsRequired=true, IsStatic=false, Name="ContainerView", PropertyType=typeof(UIKit.UIView), Selector="containerView")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isAnimated", IsProperty=true, IsRequired=true, IsStatic=false, Name="IsAnimated", PropertyType=typeof(System.Boolean), Selector="isAnimated")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="isInteractive", IsProperty=true, IsRequired=true, IsStatic=false, Name="IsInteractive", PropertyType=typeof(System.Boolean), Selector="isInteractive")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="transitionWasCancelled", IsProperty=true, IsRequired=true, IsStatic=false, Name="TransitionWasCancelled", PropertyType=typeof(System.Boolean), Selector="transitionWasCancelled")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="presentationStyle", IsProperty=true, IsRequired=true, IsStatic=false, Name="PresentationStyle", PropertyType=typeof(UIKit.UIModalPresentationStyle), Selector="presentationStyle")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(ArgumentSemantic=ObjCRuntime.ArgumentSemantic.None, GetterSelector="targetTransform", IsProperty=true, IsRequired=true, IsStatic=false, Name="TargetTransform", PropertyType=typeof(CoreGraphics.CGAffineTransform), Selector="targetTransform")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="UpdateInteractiveTransition", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.nfloat) }, Selector="updateInteractiveTransition:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="CompleteTransition", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(System.Boolean) }, Selector="completeTransition:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetViewControllerForKey", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Foundation.NSString) }, ReturnType=typeof(UIKit.UIViewController), Selector="viewControllerForKey:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetInitialFrameForViewController", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(UIKit.UIViewController) }, ReturnType=typeof(CoreGraphics.CGRect), Selector="initialFrameForViewController:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetFinalFrameForViewController", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(UIKit.UIViewController) }, ReturnType=typeof(CoreGraphics.CGRect), Selector="finalFrameForViewController:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="GetViewFor", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(Foundation.NSString) }, ReturnType=typeof(UIKit.UIView), Selector="viewForKey:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:UIKit.UIViewControllerContextTransitioning" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:UIKit.UIViewControllerContextTransitioning" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:UIKit.UIViewControllerContextTransitioning" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:UIKit.UIViewControllerContextTransitioning_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CancelInteractiveTransition">
      <MemberSignature Language="C#" Value="public void CancelInteractiveTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelInteractiveTransition() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerContextTransitioning.CancelInteractiveTransition" />
      <MemberSignature Language="F#" Value="abstract member CancelInteractiveTransition : unit -&gt; unit" Usage="iUIViewControllerContextTransitioning.CancelInteractiveTransition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("cancelInteractiveTransition")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Indicates that a user action canceled the transition.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CompleteTransition">
      <MemberSignature Language="C#" Value="public void CompleteTransition (bool didComplete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CompleteTransition(bool didComplete) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerContextTransitioning.CompleteTransition(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member CompleteTransition : bool -&gt; unit" Usage="iUIViewControllerContextTransitioning.CompleteTransition didComplete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("completeTransition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="didComplete" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="didComplete">To be added.</param>
        <summary>Indicates the transition animation has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainerView">
      <MemberSignature Language="C#" Value="public UIKit.UIView ContainerView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView ContainerView" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerContextTransitioning.ContainerView" />
      <MemberSignature Language="F#" Value="member this.ContainerView : UIKit.UIView" Usage="UIKit.IUIViewControllerContextTransitioning.ContainerView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("containerView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The UIView that is the superview of the UIView's involved in the transition.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInteractiveTransition">
      <MemberSignature Language="C#" Value="public void FinishInteractiveTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishInteractiveTransition() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerContextTransitioning.FinishInteractiveTransition" />
      <MemberSignature Language="F#" Value="abstract member FinishInteractiveTransition : unit -&gt; unit" Usage="iUIViewControllerContextTransitioning.FinishInteractiveTransition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("finishInteractiveTransition")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>User interactions have signaled the end of the transition.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFinalFrameForViewController">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetFinalFrameForViewController (UIKit.UIViewController vc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetFinalFrameForViewController(class UIKit.UIViewController vc) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerContextTransitioning.GetFinalFrameForViewController(UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="abstract member GetFinalFrameForViewController : UIKit.UIViewController -&gt; CoreGraphics.CGRect" Usage="iUIViewControllerContextTransitioning.GetFinalFrameForViewController vc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("finalFrameForViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vc" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="vc">To be added.</param>
        <summary>The ending RectangleF for the Frame of the specified UIViewController's UIView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInitialFrameForViewController">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGRect GetInitialFrameForViewController (UIKit.UIViewController vc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype CoreGraphics.CGRect GetInitialFrameForViewController(class UIKit.UIViewController vc) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerContextTransitioning.GetInitialFrameForViewController(UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="abstract member GetInitialFrameForViewController : UIKit.UIViewController -&gt; CoreGraphics.CGRect" Usage="iUIViewControllerContextTransitioning.GetInitialFrameForViewController vc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initialFrameForViewController:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vc" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="vc">To be added.</param>
        <summary>The beginning RectangleF for the Frame of the specified UIViewController's UIView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewControllerForKey">
      <MemberSignature Language="C#" Value="public UIKit.UIViewController GetViewControllerForKey (Foundation.NSString uiTransitionKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIViewController GetViewControllerForKey(class Foundation.NSString uiTransitionKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerContextTransitioning.GetViewControllerForKey(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetViewControllerForKey : Foundation.NSString -&gt; UIKit.UIViewController" Usage="iUIViewControllerContextTransitioning.GetViewControllerForKey uiTransitionKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("viewControllerForKey:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiTransitionKey" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="uiTransitionKey">Should be a value from <see cref="T:UIKit.UITransitionContext" />.</param>
        <summary>Retrieves the UIViewController associated with the specified uiTransitionKey.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewFor">
      <MemberSignature Language="C#" Value="public UIKit.UIView GetViewFor (Foundation.NSString uiTransitionContextToOrFromKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIView GetViewFor(class Foundation.NSString uiTransitionContextToOrFromKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerContextTransitioning.GetViewFor(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetViewFor : Foundation.NSString -&gt; UIKit.UIView" Usage="iUIViewControllerContextTransitioning.GetViewFor uiTransitionContextToOrFromKey" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("viewForKey:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uiTransitionContextToOrFromKey" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="uiTransitionContextToOrFromKey">To be added.</param>
        <summary>Returns the to- or from-key for the transition.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnimated">
      <MemberSignature Language="C#" Value="public bool IsAnimated { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnimated" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerContextTransitioning.IsAnimated" />
      <MemberSignature Language="F#" Value="member this.IsAnimated : bool" Usage="UIKit.IUIViewControllerContextTransitioning.IsAnimated" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isAnimated")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether a modal presentation should be animated.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInteractive">
      <MemberSignature Language="C#" Value="public bool IsInteractive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInteractive" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerContextTransitioning.IsInteractive" />
      <MemberSignature Language="F#" Value="member this.IsInteractive : bool" Usage="UIKit.IUIViewControllerContextTransitioning.IsInteractive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("isInteractive")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether a presentation should be interactive.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentationStyle">
      <MemberSignature Language="C#" Value="public UIKit.UIModalPresentationStyle PresentationStyle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIModalPresentationStyle PresentationStyle" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerContextTransitioning.PresentationStyle" />
      <MemberSignature Language="F#" Value="member this.PresentationStyle : UIKit.UIModalPresentationStyle" Usage="UIKit.IUIViewControllerContextTransitioning.PresentationStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("presentationStyle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIModalPresentationStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The presentation style of the transition.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TargetTransform">
      <MemberSignature Language="C#" Value="public CoreGraphics.CGAffineTransform TargetTransform { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGAffineTransform TargetTransform" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerContextTransitioning.TargetTransform" />
      <MemberSignature Language="F#" Value="member this.TargetTransform : CoreGraphics.CGAffineTransform" Usage="UIKit.IUIViewControllerContextTransitioning.TargetTransform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("targetTransform")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the transform that indicates the angle of the rotation that is applied during the transition.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TransitionWasCancelled">
      <MemberSignature Language="C#" Value="public bool TransitionWasCancelled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool TransitionWasCancelled" />
      <MemberSignature Language="DocId" Value="P:UIKit.IUIViewControllerContextTransitioning.TransitionWasCancelled" />
      <MemberSignature Language="F#" Value="member this.TransitionWasCancelled : bool" Usage="UIKit.IUIViewControllerContextTransitioning.TransitionWasCancelled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("transitionWasCancelled")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the transition was cancelled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateInteractiveTransition">
      <MemberSignature Language="C#" Value="public void UpdateInteractiveTransition (nfloat percentComplete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateInteractiveTransition(valuetype System.nfloat percentComplete) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.IUIViewControllerContextTransitioning.UpdateInteractiveTransition(System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member UpdateInteractiveTransition : nfloat -&gt; unit" Usage="iUIViewControllerContextTransitioning.UpdateInteractiveTransition percentComplete" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("updateInteractiveTransition:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="percentComplete" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="percentComplete">To be added.</param>
        <summary>Updates the percentage completion of the transition.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
