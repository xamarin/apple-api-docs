<Type Name="UICollectionView" FullName="UIKit.UICollectionView">
  <TypeSignature Language="C#" Value="public class UICollectionView : UIKit.UIScrollView, IDisposable, UIKit.IUIDataSourceTranslating, UIKit.IUISpringLoadedInteractionSupporting" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UICollectionView extends UIKit.UIScrollView implements class Foundation.INSCoding, class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIDataSourceTranslating, class UIKit.IUISpringLoadedInteractionSupporting" />
  <TypeSignature Language="DocId" Value="T:UIKit.UICollectionView" />
  <TypeSignature Language="F#" Value="type UICollectionView = class&#xA;    inherit UIScrollView&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUIDataSourceTranslating&#xA;    interface IUISpringLoadedInteractionSupporting" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIScrollView</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIDataSourceTranslating</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUISpringLoadedInteractionSupporting</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UICollectionView", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Efficiently presents multiple <see cref="T:UIKit.UIView" />s on the screen using flexible layouts.</summary>
    <remarks>
      <para>The <see cref="T:UIKit.UICollectionView" /> is a container view that allows the application developer to lay out multiple items on the screen with more flexibility than is provided by a <see cref="T:UIKit.UITableView" />. It is a subtype of <see cref="T:UIKit.UIScrollView" />, so the layouts can span multiple pages. The layout used by the <see cref="T:UIKit.UICollectionView" /> is controlled by it's <see cref="P:UIKit.UICollectionView.CollectionViewLayout" /> property.</para>
      <para>A <see cref="T:UIKit.UICollectionView" /> must have a <see cref="T:UIKit.UICollectionViewLayout" />. The most commonly-used <see cref="T:UIKit.UICollectionViewLayout" /> is <see cref="T:UIKit.UICollectionViewFlowLayout" />, which lays out its content views either horizontally or vertically until it reaches the bounds and then wraps around.</para>
      <para>These grid-like layouts are very flexible and customizable, but because <see cref="T:UIKit.UICollectionView" /> and <see cref="T:UIKit.UICollectionViewLayout" /> are independent, simply providing a different <see cref="T:UIKit.UICollectionViewLayout" /> can easily change the presentation style of the <see cref="T:UIKit.UICollectionView" />. The application developer can create custom layouts to support whatever layout can be imagined.</para>
      <para>
        The patterns for providing data to a <see cref="T:UIKit.UICollectionView" /> to create items and interact with those items follow the same delegation and data source patterns commonly used in iOS development.
      </para>
      <para>Collection Views are more powerful than <see cref="T:UIKit.UITableView" />s, which are limited to a single column, but are also more complex. <see cref="T:UIKit.UITableView" /> has certain built-in behaviors such as an editing mode, row animations, and easy-to-use headers and footers. If a <see cref="T:UIKit.UITableView" /> satisfies the application's UI requirements, the application developer should prefer to use the <see cref="T:UIKit.UITableView" />. 
      </para>
      <para>A <see cref="T:UIKit.UICollectionView" /> user interface involves a collaboration of different objects with different concerns:</para>
      <para>
        <list type="table">
          <listheader>
            <term>Concern</term>
            <description>Description</description>
            <description>Types</description>
          </listheader>
          <item>
            <term>Content Management</term>
            <description>The overall contents of the user interface</description>
            <description>
              <para>
                <see cref="T:UIKit.UICollectionView" />, <see cref="T:UIKit.UICollectionViewController" /></para>
            </description>
          </item>
          <item>
            <term>Layout</term>
            <description>Position and layout attributes of various component views</description>
            <description>
              <para>
                <see cref="T:UIKit.UICollectionViewLayout" />,
		<see cref="T:UIKit.UICollectionViewLayoutAttributes" />,
		<see cref="T:UIKit.UICollectionViewUpdateItem" /></para>
            </description>
          </item>
          <item>
            <term>Data Management</term>
            <description>Data and event-management</description>
            <description>
              <para>
                <see cref="T:UIKit.UICollectionViewDataSource" />, <see cref="T:UIKit.UICollectionViewDelegate" /></para>
            </description>
          </item>
          <item>
            <term>Reusable views</term>
            <description>Define component elements of the overall <see cref="T:UIKit.UICollectionView" /></description>
            <description>
              <para>
                <see cref="T:UIKit.UICollectionViewCell" />, <see cref="T:UIKit.UICollectionReusableView" /></para>
            </description>
          </item>
        </list>
      </para>
      <para>
        <format type="text/html">
          <h2>UICollectionView Basics</h2>
        </format>
      </para>
      <para>A <see cref="T:UIKit.UICollectionView" /> is made up of three different types of <see cref="T:UIKit.UIView" />s:</para>
      <list type="table">
        <listheader>
          <term>Role</term>
          <description>Description</description>
          <description>Type</description>
        </listheader>
        <item>
          <term>Cells</term>
          <description>Data-driven views, each of a single item in the data set.</description>
          <description>
            <see cref="T:UIKit.UICollectionViewCell" />
          </description>
        </item>
        <item>
          <term>Supplementary views</term>
          <description>Data-driven views, each associated with a section. For example, header and footer views.</description>
          <description>
            <see cref="T:UIKit.UICollectionReusableView" />
          </description>
        </item>
        <item>
          <term>Decoration views</term>
          <description>Non-data-driven views associated with the layout and overall view appearance. For example, the scrolling bookshelves background in the iBooks app and the Newsstand.</description>
          <description>
            <see cref="T:UIKit.UICollectionReusableView" />
          </description>
        </item>
      </list>
      <para>The relationship between these three types of views is shown in the following image, based on the "Introduction to Collection Views" article. The cells are the orange-and-white rectangles and are laid out in a line. An instance of a supplementary view with a <see cref="P:UIKit.UIView.BackgroundColor" /> of <see cref="P:UIKit.UIColor.Yellow" /> separates sections, while a single decoration view provides a background for the entire <see cref="T:UIKit.UICollectionView" />.</para>
      <para>
        <img href="xamarin-media/UIKit/_images/UIKit.UICollectionView.Components.png" />
      </para>
      <para>(Background image by NASA, http://visibleearth.nasa.gov/)</para>
      <para>
        <format type="text/html">
          <h2>Understanding the reuse queue</h2>
        </format>
      </para>
      <para>The <see cref="T:UIKit.UICollectionView" /> is designed to work with large datasets. The two major attributes of this design are the "reuse queue" for component views and the <see cref="T:UIKit.UICollectionViewDataSource" /> interface. The reuse queue is a system-managed collection of component views that minimizes memory consumption by only allocating those views that are on-screen and a handful of "next visible" screens. The following illustration, based on a variation of the code from the "Introduction to Collection Views" sample, shows how efficient this reuse queue is: 204 views are visible but the reuse queue only consists of 217 instances of the <c>AnimalCell</c> subtype of <see cref="T:UIKit.UICollectionViewCell" />. The dataset numbers in the thousands, but the number of actually allocated view components is minimal.</para>
      <para>
        <img href="xamarin-media/UIKit/_images/UIKit.UICollectionView.ReuseQueue.png" />
      </para>
      <para>Not only does the reuse queue only have a minimal number of component views, it reuses component views rather than allocating and releasing off-screen views. This helps greatly with performance, but has important consequences for the application developer:</para>
      <para>
        <list type="bullet">
          <item>
            <term>Component view types (or nibs) are registered with the <see cref="T:UIKit.UICollectionView" />, which is responsible for their memory.</term>
          </item>
          <item>
            <term>Component view instances are reused and have their values re-assigned. Application developers must be cautious about assumptions made about references to such values, which will change as the application user scrolls.</term>
          </item>
          <item>
            <term>The application developer must write the functions that (re-)assign these values: <see cref="M:UIKit.UICollectionViewDataSource.GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)" /> and, if supplementary views are desired, <see cref="M:UIKit.UICollectionViewDataSource.GetViewForSupplementaryElement(UIKit.UICollectionView,Foundation.NSString,Foundation.NSIndexPath)" />.</term>
          </item>
        </list>
      </para>
      <para>The following code, from the "Introduction to Collection Views" sample, shows how component view types are registered and reassigned. Each component role type has an <see cref="T:Foundation.NSString" /> identifier (for instance, the type <c>AnimalCell</c>, which is used for the cell role, has the identifier "AnimalCell", the others are not shown). The methods <see cref="M:UIKit.UICollectionView.RegisterClassForCell(System.Type,System.String)" /> and <see cref="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.Type,UIKit.UICollectionElementKindSection,System.String)" /> register the classes for the cell and supplementary view roles, while the method <see cref="M:UIKit.UICollectionViewLayout.RegisterClassForDecorationView(System.Type,Foundation.NSString)" /> registers the decoration view with the  <see cref="T:UIKit.UICollectionViewLayout" /> that is the <see cref="T:UIKit.UICollectionView" />'s' <see cref="P:UIKit.UICollectionView.CollectionViewLayout" /> property.</para>
      <para>
	It is very important that you provide a constructor that takes a RectangleF argument in any subclasses that you register with UICollectionView.   This is required because the classes are actually allocated by the Objective-C runtime, and you must initialize them.   The following example shows the expected constructor that you should provide:
      </para>
      <example>
        <code lang="C#"><![CDATA[
public class AnimalCell : UICollectionViewCell
{
[Export ("initWithFrame:")]
  public AnimalCell (RectangleF frame) : base (frame) {}
}
]]></code>
      </example>
      <para>The overridden methods <see cref="M:UIKit.UICollectionViewDataSource.GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)" /> and <see cref="M:UIKit.UICollectionViewSource.GetViewForSupplementaryElement(UIKit.UICollectionView,Foundation.NSString,Foundation.NSIndexPath)" /> show the re-assignment code. The <see cref="T:Foundation.NSIndexPath" /> that is passed as the <c>indexPath</c> argument contains the <see cref="P:Foundation.NSIndexPath.Section" /> and <see cref="P:Foundation.NSIndexPath.Item" /> integers that allow the application developer to locate a specific data item and appropriately assign the cell's relevant visual elements. (Application developers familiar with <see cref="T:UIKit.UITableView" /> will note that <see cref="P:Foundation.NSIndexPath.Item" /> and <see cref="P:Foundation.NSIndexPath.Row" /> are the same value.)</para>
      <para>Since these methods, particularly the <see cref="M:UIKit.UICollectionViewDataSource.GetCell(UIKit.UICollectionView,Foundation.NSIndexPath)" /> method, are called many times during scrolling, the application developer should avoid unnecessary processing during these calls.</para>
      <example>
        <code lang="C#"><![CDATA[
public class AnimalCell : UICollectionViewCell
{
  private static NSString classId = new NSString ("AnimalCell");
  public static NSString ClassId { get { return classId; } }

[Export ("initWithFrame:")]
  public AnimalCell (RectangleF frame) : base (frame) {}

//..etc...
}


public class SimpleCollectionViewController : UICollectionViewController
{
  public override void ViewDidLoad ()
  {
    Base.ViewDidLoad ();

    var cv = CollectionView;

    cv.RegisterClassForCell (typeof(AnimalCell), AnimalCell.ClassId);
    cv.RegisterClassForSupplementaryView (typeof(HeaderView), UICollectionElementKindSection.Header, HeaderView.ClassId);
    cv.CollectionViewLayout.RegisterClassForDecorationView (typeof(DecorationView), DecorationView.ClassId);
  }

  public override UICollectionViewCell GetCell (UICollectionView collectionView, MonoTouch.Foundation.NSIndexPath indexPath)
  {
    var animalCell = (AnimalCell)collectionView.DequeueReusableCell (AnimalCell.ClassId, indexPath);
    var animal = animals [indexPath.Section * (animals.Count / SectionCount) + indexPath.Item];

    animalCell.Image = animal.Image;

    return animalCell;
  }


  public override UICollectionReusableView GetViewForSupplementaryElement (UICollectionView collectionView, NSString elementKind, NSIndexPath indexPath)
  {
    var headerView = (HeaderView)collectionView.DequeueReusableSupplementaryView (elementKind, HeaderView.ClassId, indexPath);
    headerView.Text = "Supplementary View Section " + indexPath.Section.ToString ();
    return headerView;
  }
  //...etc...
}
        ]]></code>
      </example>
      <para>Rather than registering program classes, application developers may choose to register nibs defined with XCode's Interface Builder. The relevant methods are shown in the following table.</para>
      <para>
        <list type="table">
          <listheader>
            <term>Role</term>
            <description>Class Registration Method</description>
            <description>Nib Registration Method</description>
          </listheader>
          <item>
            <term>Cell</term>
            <description>
              <see cref="M:UIKit.UICollectionView.RegisterClassForCell(System.Type,System.String)" />
            </description>
            <description>
              <see cref="M:UIKit.UICollectionView.RegisterNibForCell(UIKit.UINib,System.String)" />
            </description>
          </item>
          <item>
            <term>Supplementary View</term>
            <description>
              <see cref="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.Type,UIKit.UICollectionElementKindSection,System.String)" />
            </description>
            <description>
              <see cref="M:UIKit.UICollectionView.RegisterNibForSupplementaryView(UIKit.UINib,UIKit.UICollectionElementKindSection,System.String)" />
            </description>
          </item>
          <item>
            <term>Decoration View</term>
            <description>
              <see cref="M:UIKit.UICollectionViewLayout.RegisterClassForDecorationView(System.Type,Foundation.NSString)" />
            </description>
            <description>
              <see cref="M:UIKit.UICollectionViewLayout.RegisterNibForDecorationView(UIKit.UINib,Foundation.NSString)" />
            </description>
          </item>
        </list>
      </para>
      <para>
        <format type="text/html">
          <h2>Handling events</h2>
        </format>
      </para>
      <para>To handle events associated with a <see cref="T:UIKit.UICollectionView" />, the application developer may subtype <see cref="T:UIKit.UICollectionViewDelegate" /> and assign an instance to the <see cref="P:UIKit.UICollectionView.Delegate" /> property.</para>
      <para>
        <see cref="T:UIKit.UICollectionView" /> is a subtype of <see cref="T:UIKit.UIScrollView" /> and <see cref="T:UIKit.UIScrollViewDelegate" /> contains many of the same methods as <see cref="T:UIKit.UIScrollViewDelegate" /> but is not a subtype of that class.</para>
      <para>Selecting and highlighting in a <see cref="T:UIKit.UICollectionView" /> follows this sequence:</para>
      <list type="table">
        <listheader>
          <term>User Action</term>
          <description>UICollectionViewDelegate Methods</description>
          <description>UICollectionViewCell Properties</description>
        </listheader>
        <item>
          <term>Nothing touched</term>
          <description />
          <description>
            <c>Highlighted == <see langword="false" />; Selected == <see langword="false" /></c>
          </description>
        </item>
        <item>
          <term>Finger down in cell</term>
          <description>
            <see cref="M:UIKit.UICollectionViewDelegate.ShouldHighlightItem(UIKit.UICollectionView,Foundation.NSIndexPath)" /> is called. If it returns <see langword="false" />, processing stops. 
          </description>
          <description />
        </item>
        <item>
          <term />
          <description>
            <see cref="M:UIKit.UICollectionViewDelegate.ItemHighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)" /> is called.
          </description>
          <description>
            <c>Highlighted == <see langword="true" />; Selected == <see langword="false" /></c>
          </description>
        </item>
        <item>
          <term>Finger up</term>
          <description>
            <see cref="M:UIKit.UICollectionViewDelegate.ShouldSelectItem(UIKit.UICollectionView,Foundation.NSIndexPath)" /> is called. If it returns <see langword="false" />, processing stops.
          </description>
          <description />
        </item>
        <item>
          <term />
          <description>
            <see cref="M:UIKit.UICollectionViewDelegate.ItemSelected(UIKit.UICollectionView,Foundation.NSIndexPath)" /> is called. <see cref="M:UIKit.UICollectionViewDelegate.ItemUnhighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)" /> is called.
            
          </description>
          <description>
            <c>Highlighted == <see langword="false" />; Selected == <see langword="true" /></c>
          </description>
        </item>
      </list>
      <para>
        <img href="xamarin-media/UIKit/_images/UIKit.UICollectionView.HighlightAndSelect.png" />
      </para>
      <para>Deselecting a <see cref="T:UIKit.UICollectionViewCell" /> follows a similar sequence:</para>
      <list type="table">
        <listheader>
          <term>User Action</term>
          <description>UICollectionViewDelegate Methods</description>
          <description>UICollectionViewCell Properties</description>
        </listheader>
        <item>
          <term>Nothing touched while some <see cref="T:UIKit.UICollectionViewCell" /> is highlighted.</term>
          <description />
          <description>
            <c>Highlighted == <see langword="false" />; Selected == <see langword="true" /></c>
          </description>
        </item>
        <item>
          <term>Finger taps cell (Deselect gesture)</term>
          <description>
            <see cref="M:UIKit.UICollectionViewDelegate.ShouldDeselectItem(UIKit.UICollectionView,Foundation.NSIndexPath)" /> is called. If it returns <see langword="false" />, processing stops. 
          </description>
          <description />
        </item>
        <item>
          <term />
          <description>
            <see cref="M:UIKit.UICollectionViewDelegate.ItemDeselected(UIKit.UICollectionView,Foundation.NSIndexPath)" /> is called.
          </description>
          <description>
            <c>Highlighted == <see langword="false" />; Selected == <see langword="false" /></c>
          </description>
        </item>
      </list>
    </remarks>
    <altmember cref="T:UIKit.UICollectionViewLayout" />
    <altmember cref="T:UIKit.UICollectionViewDelegate" />
    <altmember cref="T:UIKit.UICollectionViewController" />
    <altmember cref="T:UIKit.UICollectionViewCell" />
    <altmember cref="T:UIKit.UICollectionViewFlowLayout" />
    <altmember cref="T:UIKit.UITableView" />
    <altmember cref="T:UIKit.UIScrollView" />
    <related type="article" href="http://docs.xamarin.com/ios/Guides/User_Interface/Introduction_to_Collection_Views">Introduction to Collection Views</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionView_class/index.html">Apple documentation for <c>UICollectionView</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionView (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionView : Foundation.NSCoder -&gt; UIKit.UICollectionView" Usage="new UIKit.UICollectionView coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UICollectionView (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionView : Foundation.NSObjectFlag -&gt; UIKit.UICollectionView" Usage="new UIKit.UICollectionView t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UICollectionView (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionView : nativeint -&gt; UIKit.UICollectionView" Usage="new UIKit.UICollectionView handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionView (CoreGraphics.CGRect frame, UIKit.UICollectionViewLayout layout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreGraphics.CGRect frame, class UIKit.UICollectionViewLayout layout) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.#ctor(CoreGraphics.CGRect,UIKit.UICollectionViewLayout)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionView : CoreGraphics.CGRect * UIKit.UICollectionViewLayout -&gt; UIKit.UICollectionView" Usage="new UIKit.UICollectionView (frame, layout)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithFrame:collectionViewLayout:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="frame" Type="CoreGraphics.CGRect" />
        <Parameter Name="layout" Type="UIKit.UICollectionViewLayout" />
      </Parameters>
      <Docs>
        <param name="frame">To be added.</param>
        <param name="layout">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsMultipleSelection">
      <MemberSignature Language="C#" Value="public virtual bool AllowsMultipleSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsMultipleSelection" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.AllowsMultipleSelection" />
      <MemberSignature Language="F#" Value="member this.AllowsMultipleSelection : bool with get, set" Usage="UIKit.UICollectionView.AllowsMultipleSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allowsMultipleSelection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAllowsMultipleSelection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether more than one <see cref="T:UIKit.UICollectionViewCell" /> can be selected at a time.</summary>
        <value>The default value is <see langword="false" />.</value>
        <remarks>If this value is <see langword="true" />, more than one <see cref="T:UIKit.UICollectionViewCell" /> can be selected by the application user.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsSelection">
      <MemberSignature Language="C#" Value="public virtual bool AllowsSelection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsSelection" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.AllowsSelection" />
      <MemberSignature Language="F#" Value="member this.AllowsSelection : bool with get, set" Usage="UIKit.UICollectionView.AllowsSelection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allowsSelection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAllowsSelection:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether an application user can select a <see cref="T:UIKit.UICollectionViewCell" /> by tapping.</summary>
        <value>The default value is <see langword="true" />.</value>
        <remarks>For a discussion of selection in <see cref="T:UIKit.UICollectionView" />, see the "Introduction to Collection Views" guide.</remarks>
        <related type="article" href="http://docs.xamarin.com/ios/Guides/User_Interface/Introduction_to_Collection_Views">Introduction to Collection Views</related>
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionView.UICollectionViewAppearance Appearance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class UIKit.UICollectionView/UICollectionViewAppearance Appearance" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.Appearance" />
      <MemberSignature Language="F#" Value="member this.Appearance : UIKit.UICollectionView.UICollectionViewAppearance" Usage="UIKit.UICollectionView.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionView+UICollectionViewAppearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Strongly-typed property that returns the UIAppearance class for this class.</summary>
        <value>
        </value>
        <remarks>
          <para>Setting any appearance properties on this instance will affect the appearance of all instances of UICollectionView.</para>
          <para>If developers want to control the appearance of subclasses of UICollectionView, they should use the <see cref="M:UIKit.UICollectionViewCell.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AppearanceWhenContainedIn">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionView.UICollectionViewAppearance AppearanceWhenContainedIn (params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionView/UICollectionViewAppearance AppearanceWhenContainedIn(class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.AppearanceWhenContainedIn(System.Type[])" />
      <MemberSignature Language="F#" Value="static member AppearanceWhenContainedIn : Type[] -&gt; UIKit.UICollectionView.UICollectionViewAppearance" Usage="UIKit.UICollectionView.AppearanceWhenContainedIn containers" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionView+UICollectionViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="containers">List of types that developers want to have as the containers to apply this particular appearance</param>
        <summary>Returns a strongly typed UIAppearance for instances of this class when the view is hosted in the specified hierarchy.</summary>
        <returns>The appearance proxy object that developers can use to set properties when the given container hierarchy is active</returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UICollectionView when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>If developers want to control the appearance of subclasses of UICollectionView, they should use the <see cref="M:UIKit.UICollectionViewCell.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" /> method.</para>
          <para>The following example shows how the AppearanceWhenContainedIn method works</para>
          <example>
            <code lang="C#"><![CDATA[
var mySliders = UISlider.AppearanceWhenContainedIn (typeof (UINavigationBar), typeof (UIPopoverController));
mySliders.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView BackgroundView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView BackgroundView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.BackgroundView" />
      <MemberSignature Language="F#" Value="member this.BackgroundView : UIKit.UIView with get, set" Usage="UIKit.UICollectionView.BackgroundView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("backgroundView")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setBackgroundView:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("backgroundView", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setBackgroundView:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A <see cref="T:UIKit.UIView" /> that lies behind all other content and is automatically sized to fill the entire bounds.</summary>
        <value>The default value is <see langword="null" />.</value>
        <remarks>
          <para>If left to the default value of <see langword="null" />, the background of the <see cref="T:UIKit.UICollectionView" /> is the vale of it's <see cref="P:UIKit.UIView.BackgroundColor" /> property.</para>
        </remarks>
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterClassForDecorationView" />
      </Docs>
    </Member>
    <Member MemberName="BeginInteractiveMovementForItem">
      <MemberSignature Language="C#" Value="public virtual bool BeginInteractiveMovementForItem (Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool BeginInteractiveMovementForItem(class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.BeginInteractiveMovementForItem(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member BeginInteractiveMovementForItem : Foundation.NSIndexPath -&gt; bool&#xA;override this.BeginInteractiveMovementForItem : Foundation.NSIndexPath -&gt; bool" Usage="uICollectionView.BeginInteractiveMovementForItem indexPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("beginInteractiveMovementForItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="indexPath">The index path of the cell that should begin interactive movement.</param>
        <summary>Developers call this method to have the cell at <paramref name="indexPath" /> begin interactive movement.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelInteractiveMovement">
      <MemberSignature Language="C#" Value="public virtual void CancelInteractiveMovement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelInteractiveMovement() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.CancelInteractiveMovement" />
      <MemberSignature Language="F#" Value="abstract member CancelInteractiveMovement : unit -&gt; unit&#xA;override this.CancelInteractiveMovement : unit -&gt; unit" Usage="uICollectionView.CancelInteractiveMovement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("cancelInteractiveMovement")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Developers call this method to cancel interactive movement and have the cell return to its previous position.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelInteractiveTransition">
      <MemberSignature Language="C#" Value="public virtual void CancelInteractiveTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelInteractiveTransition() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.CancelInteractiveTransition" />
      <MemberSignature Language="F#" Value="abstract member CancelInteractiveTransition : unit -&gt; unit&#xA;override this.CancelInteractiveTransition : unit -&gt; unit" Usage="uICollectionView.CancelInteractiveTransition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("cancelInteractiveTransition")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cancels an interactive transition and returns to its original layout object.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CellForItem">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewCell CellForItem (Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewCell CellForItem(class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.CellForItem(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member CellForItem : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewCell&#xA;override this.CellForItem : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewCell" Usage="uICollectionView.CellForItem indexPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("cellForItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="indexPath">The <see cref="T:Foundation.NSIndexPath" /> indicating the section and item index of the desired <see cref="T:UIKit.UICollectionViewCell" />.</param>
        <summary>Returns the <see cref="T:UIKit.UICollectionViewCell" /> at the specified <see cref="T:Foundation.NSIndexPath" />.</summary>
        <returns>The <see cref="T:UIKit.UICollectionViewCell" /> corresponding to the <paramref name="indexPath" /> parameter. If there is no corresponding <see cref="T:UIKit.UICollectionViewCell" />, the function returns <see langword="null" />.</returns>
        <remarks> </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UICollectionView.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionViewLayout">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayout CollectionViewLayout { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UICollectionViewLayout CollectionViewLayout" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.CollectionViewLayout" />
      <MemberSignature Language="F#" Value="member this.CollectionViewLayout : UIKit.UICollectionViewLayout with get, set" Usage="UIKit.UICollectionView.CollectionViewLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("collectionViewLayout")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setCollectionViewLayout:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("collectionViewLayout", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setCollectionViewLayout:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayout</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:UIKit.UICollectionViewLayout" /> that will lay out this <see cref="T:UIKit.UICollectionView" />'s elements.</summary>
        <value>This value must be set prior to presenting the <see cref="T:UIKit.UICollectionView" /> or the application will crash.</value>
        <remarks>
          <para>This value must be set prior to presentation, either by instantiating the <see cref="T:UIKit.UICollectionView" /> with the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=C:UIKit.UICollectionView.UICollectionView(System.Drawing.RectangleF,UIKit.UICollectionViewLayout)&amp;scope=Xamarin" title="C:UIKit.UICollectionView.UICollectionView(System.Drawing.RectangleF,UIKit.UICollectionViewLayout)">C:UIKit.UICollectionView.UICollectionView(System.Drawing.RectangleF,UIKit.UICollectionViewLayout)</a></format> constructor or with the <see cref="M:UIKit.UICollectionView.SetCollectionViewLayout*" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public UIKit.IUICollectionViewDataSource DataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUICollectionViewDataSource DataSource" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.DataSource" />
      <MemberSignature Language="F#" Value="member this.DataSource : UIKit.IUICollectionViewDataSource with get, set" Usage="UIKit.UICollectionView.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUICollectionViewDataSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:UIKit.UICollectionViewDataSource" /> responsible for populating this <see cref="T:UIKit.UICollectionView" />.</summary>
        <value>
          <para>The default value is <see langword="null" />.</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>    </remarks>
        <altmember cref="P:UIKit.UICollectionView.Source" />
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public UIKit.IUICollectionViewDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUICollectionViewDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UIKit.IUICollectionViewDelegate with get, set" Usage="UIKit.UICollectionView.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUICollectionViewDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UIKit.IUICollectionViewDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UIKit.IUICollectionViewDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteItems">
      <MemberSignature Language="C#" Value="public virtual void DeleteItems (Foundation.NSIndexPath[] indexPaths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteItems(class Foundation.NSIndexPath[] indexPaths) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.DeleteItems(Foundation.NSIndexPath[])" />
      <MemberSignature Language="F#" Value="abstract member DeleteItems : Foundation.NSIndexPath[] -&gt; unit&#xA;override this.DeleteItems : Foundation.NSIndexPath[] -&gt; unit" Usage="uICollectionView.DeleteItems indexPaths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("deleteItemsAtIndexPaths:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPaths" Type="Foundation.NSIndexPath[]" />
      </Parameters>
      <Docs>
        <param name="indexPaths">An array of <see cref="T:Foundation.NSIndexPath" />s specifying the items to be deleted.</param>
        <summary>Deletes one or more items from the <see cref="T:UIKit.UICollectionView" />.</summary>
        <remarks>
          <para>After deletion, the <see cref="T:UIKit.UICollectionView" /> will animate the layout as needed.</para>
          <para>If the application developer wishes to coordinate several updates without individual animations, they can use the <see cref="M:UIKit.UICollectionView.PerformBatchUpdates(System.Action,UIKit.UICompletionHandler)" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteSections">
      <MemberSignature Language="C#" Value="public virtual void DeleteSections (Foundation.NSIndexSet sections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeleteSections(class Foundation.NSIndexSet sections) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.DeleteSections(Foundation.NSIndexSet)" />
      <MemberSignature Language="F#" Value="abstract member DeleteSections : Foundation.NSIndexSet -&gt; unit&#xA;override this.DeleteSections : Foundation.NSIndexSet -&gt; unit" Usage="uICollectionView.DeleteSections sections" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("deleteSections:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sections" Type="Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="sections">An <see cref="T:Foundation.NSIndexSet" /> that specifies the section to be deleted.</param>
        <summary>Deletes one or more sections from the <see cref="T:UIKit.UICollectionView" />.</summary>
        <remarks>
          <para>After deletion, the <see cref="T:UIKit.UICollectionView" /> will animate the layout as needed.</para>
          <para>If the application developer wishes to coordinate several updates without individual animations, they can use the <see cref="M:UIKit.UICollectionView.PerformBatchUpdates(System.Action,UIKit.UICompletionHandler)" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DequeueReusableCell">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionReusableView DequeueReusableCell (Foundation.NSString reuseIdentifier, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionReusableView DequeueReusableCell(class Foundation.NSString reuseIdentifier, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.DequeueReusableCell(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member DequeueReusableCell : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView&#xA;override this.DequeueReusableCell : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView" Usage="uICollectionView.DequeueReusableCell (reuseIdentifier, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dequeueReusableCellWithReuseIdentifier:forIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionReusableView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reuseIdentifier" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="reuseIdentifier">A type-specific reuse identifier for the desired cell.</param>
        <param name="indexPath">The <see cref="T:Foundation.NSIndexPath" /> indicating the section and item index of the desired <see cref="T:UIKit.UICollectionViewCell" />.</param>
        <summary>Returns a new or reused <see cref="T:UIKit.UICollectionReusableView" />.</summary>
        <returns>A <see cref="T:UIKit.UICollectionReusableView" /> that is either newly allocated or recycled from the reuse queue.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DequeueReusableCell">
      <MemberSignature Language="C#" Value="public UIKit.UICollectionReusableView DequeueReusableCell (string reuseIdentifier, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UICollectionReusableView DequeueReusableCell(string reuseIdentifier, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.DequeueReusableCell(System.String,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="member this.DequeueReusableCell : string * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView" Usage="uICollectionView.DequeueReusableCell (reuseIdentifier, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionReusableView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="reuseIdentifier" Type="System.String" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="reuseIdentifier">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Returns a new or reused <see cref="T:UIKit.UICollectionReusableView" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DequeueReusableSupplementaryView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionReusableView DequeueReusableSupplementaryView (Foundation.NSString kind, Foundation.NSString identifier, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionReusableView DequeueReusableSupplementaryView(class Foundation.NSString kind, class Foundation.NSString identifier, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.DequeueReusableSupplementaryView(Foundation.NSString,Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member DequeueReusableSupplementaryView : Foundation.NSString * Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView&#xA;override this.DequeueReusableSupplementaryView : Foundation.NSString * Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView" Usage="uICollectionView.DequeueReusableSupplementaryView (kind, identifier, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dequeueReusableSupplementaryViewOfKind:withReuseIdentifier:forIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionReusableView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="identifier" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="kind">A <see cref="T:Foundation.NSString" /> specifying what kind of supplementary view is desired (e.g., "UICollectionElementKindSectionHeader").</param>
        <param name="identifier">A <see cref="T:Foundation.NSString" /> that specifies what type should be used for the supplementary view.</param>
        <param name="indexPath">The <see cref="T:Foundation.NSIndexPath" /> specifying the location of the supplementary view.</param>
        <summary>Returns a newly-allocated or reused supplementary <see cref="T:UIKit.UICollectionReusableView" />.</summary>
        <returns>A supplementary <see cref="T:UIKit.UICollectionReusableView" /> that is either newly allocated or recycled from the reuse queue.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DequeueReusableSupplementaryView">
      <MemberSignature Language="C#" Value="public UIKit.UICollectionReusableView DequeueReusableSupplementaryView (Foundation.NSString kind, string reuseIdentifier, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UICollectionReusableView DequeueReusableSupplementaryView(class Foundation.NSString kind, string reuseIdentifier, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.DequeueReusableSupplementaryView(Foundation.NSString,System.String,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="member this.DequeueReusableSupplementaryView : Foundation.NSString * string * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView" Usage="uICollectionView.DequeueReusableSupplementaryView (kind, reuseIdentifier, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionReusableView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="reuseIdentifier" Type="System.String" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="reuseIdentifier">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Returns a <see cref="T:UIKit.UICollectionReusableView" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DequeueReusableSupplementaryView">
      <MemberSignature Language="C#" Value="public Foundation.NSObject DequeueReusableSupplementaryView (UIKit.UICollectionElementKindSection section, Foundation.NSString reuseIdentifier, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSObject DequeueReusableSupplementaryView(valuetype UIKit.UICollectionElementKindSection section, class Foundation.NSString reuseIdentifier, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.DequeueReusableSupplementaryView(UIKit.UICollectionElementKindSection,Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="member this.DequeueReusableSupplementaryView : UIKit.UICollectionElementKindSection * Foundation.NSString * Foundation.NSIndexPath -&gt; Foundation.NSObject" Usage="uICollectionView.DequeueReusableSupplementaryView (section, reuseIdentifier, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="section" Type="UIKit.UICollectionElementKindSection" Index="0" />
        <Parameter Name="reuseIdentifier" Type="Foundation.NSString" Index="1" FrameworkAlternate="xamarin-ios-sdk-12" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" Index="2" />
      </Parameters>
      <Docs>
        <param name="section">A <see cref="T:UIKit.UICollectionElementKindSection" /> specifying what kind of supplementary view is desired.</param>
        <param name="reuseIdentifier">To be added.</param>
        <param name="indexPath">The <see cref="T:Foundation.NSIndexPath" /> specifying the location of the supplementary view.</param>
        <summary>Returns a newly-allocated or reused supplementary <see cref="T:UIKit.UICollectionReusableView" />.</summary>
        <returns>A supplementary <see cref="T:UIKit.UICollectionReusableView" /> that is either newly allocated or recycled from the reuse queue..</returns>
        <remarks>
          <para>The application developer must have registered a class or nib file using either <see cref="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.Type,UIKit.UICollectionElementKindSection,System.String)" /> or <see cref="M:UIKit.UICollectionView.RegisterNibForSupplementaryView(UIKit.UINib,UIKit.UICollectionElementKindSection,System.String)" /> prior to calling this method.</para>
          <para>If the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=T:UIKIt.UICollectionReusableView&amp;scope=Xamarin" title="T:UIKIt.UICollectionReusableView">T:UIKIt.UICollectionReusableView</a></format> is not newly allocated but is being recycled, this method will call that cell's <see cref="M:UIKit.UICollectionReusableView.PrepareForReuse" /> method.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DequeueReusableSupplementaryView">
      <MemberSignature Language="C#" Value="public UIKit.UICollectionReusableView DequeueReusableSupplementaryView (UIKit.UICollectionElementKindSection kind, string reuseIdentifier, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UICollectionReusableView DequeueReusableSupplementaryView(valuetype UIKit.UICollectionElementKindSection kind, string reuseIdentifier, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.DequeueReusableSupplementaryView(UIKit.UICollectionElementKindSection,System.String,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="member this.DequeueReusableSupplementaryView : UIKit.UICollectionElementKindSection * string * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView" Usage="uICollectionView.DequeueReusableSupplementaryView (kind, reuseIdentifier, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionReusableView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="UIKit.UICollectionElementKindSection" />
        <Parameter Name="reuseIdentifier" Type="System.String" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="kind">To be added.</param>
        <param name="reuseIdentifier">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Returns a <see cref="T:UIKit.UICollectionReusableView" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeselectItem">
      <MemberSignature Language="C#" Value="public virtual void DeselectItem (Foundation.NSIndexPath indexPath, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DeselectItem(class Foundation.NSIndexPath indexPath, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.DeselectItem(Foundation.NSIndexPath,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member DeselectItem : Foundation.NSIndexPath * bool -&gt; unit&#xA;override this.DeselectItem : Foundation.NSIndexPath * bool -&gt; unit" Usage="uICollectionView.DeselectItem (indexPath, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("deselectItemAtIndexPath:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="indexPath">A <see cref="T:Foundation.NSIndexPath" /> specifying the index of the item to be deselected.</param>
        <param name="animated">Specifies whether the deselection should be animated.</param>
        <summary>Deselects the <see cref="T:UIKit.UICollectionViewCell" /> at the specified <see cref="T:Foundation.NSIndexPath" />.</summary>
        <remarks>This method does not trigger calls to <see cref="M:UIKit.UICollectionViewDelegate.ItemDeselected(UIKit.UICollectionView,Foundation.NSIndexPath)" /> or <see cref="M:UIKit.UICollectionViewDelegate.ItemUnhighlighted(UIKit.UICollectionView,Foundation.NSIndexPath)" />.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="uICollectionView.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UICollectionView object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UICollectionView class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UICollectionView ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragDelegate">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUICollectionViewDragDelegate DragDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUICollectionViewDragDelegate DragDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.DragDelegate" />
      <MemberSignature Language="F#" Value="member this.DragDelegate : UIKit.IUICollectionViewDragDelegate with get, set" Usage="UIKit.UICollectionView.DragDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("dragDelegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDragDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("dragDelegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDragDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUICollectionViewDragDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the delegate for responding to the user dragging items from the collection view.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragInteractionEnabled">
      <MemberSignature Language="C#" Value="public virtual bool DragInteractionEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DragInteractionEnabled" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.DragInteractionEnabled" />
      <MemberSignature Language="F#" Value="member this.DragInteractionEnabled : bool with get, set" Usage="UIKit.UICollectionView.DragInteractionEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("dragInteractionEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDragInteractionEnabled:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that tells whether drag and drop is enabled.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropDelegate">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUICollectionViewDropDelegate DropDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUICollectionViewDropDelegate DropDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.DropDelegate" />
      <MemberSignature Language="F#" Value="member this.DropDelegate : UIKit.IUICollectionViewDropDelegate with get, set" Usage="UIKit.UICollectionView.DropDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("dropDelegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDropDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("dropDelegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDropDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUICollectionViewDropDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the delegate for responding to the user dropping items to the collection view.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="uICollectionView.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndInteractiveMovement">
      <MemberSignature Language="C#" Value="public virtual void EndInteractiveMovement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EndInteractiveMovement() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.EndInteractiveMovement" />
      <MemberSignature Language="F#" Value="abstract member EndInteractiveMovement : unit -&gt; unit&#xA;override this.EndInteractiveMovement : unit -&gt; unit" Usage="uICollectionView.EndInteractiveMovement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("endInteractiveMovement")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Developers call this method to finish interactive movement.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FinishInteractiveTransition">
      <MemberSignature Language="C#" Value="public virtual void FinishInteractiveTransition ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FinishInteractiveTransition() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.FinishInteractiveTransition" />
      <MemberSignature Language="F#" Value="abstract member FinishInteractiveTransition : unit -&gt; unit&#xA;override this.FinishInteractiveTransition : unit -&gt; unit" Usage="uICollectionView.FinishInteractiveTransition " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("finishInteractiveTransition")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finishes an interactive transition and installs the intended target layout.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionView.UICollectionViewAppearance GetAppearance (UIKit.UITraitCollection traits);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionView/UICollectionViewAppearance GetAppearance(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetAppearance(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UICollectionView.UICollectionViewAppearance" Usage="UIKit.UICollectionView.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionView+UICollectionViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UICollectionView.UICollectionViewAppearance" /> for the subclass of UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionView.UICollectionViewAppearance GetAppearance (UIKit.UITraitCollection traits, params Type[] containers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionView/UICollectionViewAppearance GetAppearance(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetAppearance(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UICollectionView.UICollectionViewAppearance" Usage="UIKit.UICollectionView.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionView+UICollectionViewAppearance</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="traits">To be added.</param>
        <param name="containers">To be added.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UICollectionView.UICollectionViewAppearance" /> for the subclass of UICollectionView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionView.UICollectionViewAppearance GetAppearance&lt;T&gt; () where T : UIKit.UICollectionView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionView/UICollectionViewAppearance GetAppearance&lt;(class UIKit.UICollectionView) T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetAppearance``1" />
      <MemberSignature Language="F#" Value="static member GetAppearance : unit -&gt; UIKit.UICollectionView.UICollectionViewAppearance (requires 'T :&gt; UIKit.UICollectionView)" Usage="UIKit.UICollectionView.GetAppearance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionView+UICollectionViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UICollectionView.</typeparam>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UICollectionView.UICollectionViewAppearance" /> for the subclass of UICollectionView.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>Setting any appearance properties on the returned object will affect the appearance of all classes and subclasses of the type parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UICollectionView.Appearance" /> property, or the <see cref="M:UIKit.UICollectionViewCell.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UICollectionView.GetAppearance<MyUICollectionViewSubclass> ();
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionView.UICollectionViewAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits) where T : UIKit.UICollectionView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionView/UICollectionViewAppearance GetAppearance&lt;(class UIKit.UICollectionView) T&gt;(class UIKit.UITraitCollection traits) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetAppearance``1(UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection -&gt; UIKit.UICollectionView.UICollectionViewAppearance (requires 'T :&gt; UIKit.UICollectionView)" Usage="UIKit.UICollectionView.GetAppearance traits" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionView+UICollectionViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UICollectionView</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UICollectionView.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UICollectionView.UICollectionViewAppearance" /> for the subclass of UICollectionView.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UICollectionView.</para>
          <para>Unlike the <see cref="P:UIKit.UICollectionView.Appearance" /> property, or the <see cref="M:UIKit.UICollectionViewCell.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UICollectionView.GetAppearance<MyUICollectionViewSubclass> (myTraits, );
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppearance&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionView.UICollectionViewAppearance GetAppearance&lt;T&gt; (UIKit.UITraitCollection traits, params Type[] containers) where T : UIKit.UICollectionView;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionView/UICollectionViewAppearance GetAppearance&lt;(class UIKit.UICollectionView) T&gt;(class UIKit.UITraitCollection traits, class System.Type[] containers) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetAppearance``1(UIKit.UITraitCollection,System.Type[])" />
      <MemberSignature Language="F#" Value="static member GetAppearance : UIKit.UITraitCollection * Type[] -&gt; UIKit.UICollectionView.UICollectionViewAppearance (requires 'T :&gt; UIKit.UICollectionView)" Usage="UIKit.UICollectionView.GetAppearance (traits, containers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionView+UICollectionViewAppearance</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UICollectionView</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="traits" Type="UIKit.UITraitCollection" />
        <Parameter Name="containers" Type="System.Type[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <typeparam name="T">The type for which the UIAppearance proxy must be returned.  This is a subclass of UICollectionView.</typeparam>
        <param name="traits">Trait collection to match.</param>
        <param name="containers">List of types that the developer wishes to have as the containers to apply this particular appearance.</param>
        <summary>Obtains the appearance proxy <see cref="T:UIKit.UICollectionView.UICollectionViewAppearance" /> for the subclass of UICollectionView that has the specified trait collection when the view is hosted in the specified hierarchy.</summary>
        <returns>
          <para>appearance proxy object for the specified type.</para>
        </returns>
        <remarks>
          <para>The returned object represents the UIAppearance proxy where developers can set appearance properties for instances of UICollectionView that has the specified trait collection when the view is hosted in the specified hierarchy when those instances are contained in the hierarchy specified by the <paramref name="containers" /> parameter.</para>
          <para>Unlike the <see cref="P:UIKit.UICollectionView.Appearance" /> property, or the <see cref="M:UIKit.UICollectionViewCell.AppearanceWhenContainedIn(System.Type[])" /> method which only work on instances of this particular class, the proxies returned by GetAppearance can be used to change the style of subclasses.</para>
          <para>The following example shows how the GetAppearance method works</para>
          <example>
            <code lang="C#"><![CDATA[
var myTheme = UICollectionView.GetAppearance<MyUICollectionViewSubclass> (myTraits, typeof (UINavigationBar), typeof (UIPopoverController));
myTheme.TintColor = UIColor.Red;
]]></code>
          </example>
          <para>For more information, see the documentation for the <see cref="T:UIKit.UIAppearance" /> class.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataSourceIndexPath">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath GetDataSourceIndexPath (Foundation.NSIndexPath presentationIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath GetDataSourceIndexPath(class Foundation.NSIndexPath presentationIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetDataSourceIndexPath(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetDataSourceIndexPath : Foundation.NSIndexPath -&gt; Foundation.NSIndexPath&#xA;override this.GetDataSourceIndexPath : Foundation.NSIndexPath -&gt; Foundation.NSIndexPath" Usage="uICollectionView.GetDataSourceIndexPath presentationIndexPath" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIDataSourceTranslating.GetDataSourceIndexPath(Foundation.NSIndexPath)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dataSourceIndexPathForPresentationIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presentationIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="presentationIndexPath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDataSourceSectionIndex">
      <MemberSignature Language="C#" Value="public virtual nint GetDataSourceSectionIndex (nint presentationSectionIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetDataSourceSectionIndex(valuetype System.nint presentationSectionIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetDataSourceSectionIndex(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetDataSourceSectionIndex : nint -&gt; nint&#xA;override this.GetDataSourceSectionIndex : nint -&gt; nint" Usage="uICollectionView.GetDataSourceSectionIndex presentationSectionIndex" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIDataSourceTranslating.GetDataSourceSectionIndex(System.nint)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dataSourceSectionIndexForPresentationSectionIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presentationSectionIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="presentationSectionIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathsForSelectedItems">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath[] GetIndexPathsForSelectedItems ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath[] GetIndexPathsForSelectedItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetIndexPathsForSelectedItems" />
      <MemberSignature Language="F#" Value="abstract member GetIndexPathsForSelectedItems : unit -&gt; Foundation.NSIndexPath[]&#xA;override this.GetIndexPathsForSelectedItems : unit -&gt; Foundation.NSIndexPath[]" Usage="uICollectionView.GetIndexPathsForSelectedItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexPathsForSelectedItems")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns an array of <see cref="T:Foundation.NSIndexPath" />s indicating which cells are currently selected.</summary>
        <returns>An array containing zero or more <see cref="T:Foundation.NSIndexPath" />s.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathsForVisibleSupplementaryElements">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath[] GetIndexPathsForVisibleSupplementaryElements (Foundation.NSString elementKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath[] GetIndexPathsForVisibleSupplementaryElements(class Foundation.NSString elementKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetIndexPathsForVisibleSupplementaryElements(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexPathsForVisibleSupplementaryElements : Foundation.NSString -&gt; Foundation.NSIndexPath[]&#xA;override this.GetIndexPathsForVisibleSupplementaryElements : Foundation.NSString -&gt; Foundation.NSIndexPath[]" Usage="uICollectionView.GetIndexPathsForVisibleSupplementaryElements elementKind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexPathsForVisibleSupplementaryElementsOfKind:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="elementKind">A value in <see cref="T:UIKit.UICollectionElementKindSectionKey" />.</param>
        <summary>Returns the index path(s) of visible supplementary views of the specified <paramref name="elementKind" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLayoutAttributesForItem">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes GetLayoutAttributesForItem (Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes GetLayoutAttributesForItem(class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetLayoutAttributesForItem(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutAttributesForItem : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.GetLayoutAttributesForItem : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionView.GetLayoutAttributesForItem indexPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutAttributesForItemAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="indexPath">A <see cref="T:Foundation.NSIndexPath" /> indicating the desired cell being laid out.</param>
        <summary>Returns the layout information for the specified <see cref="T:UIKit.UICollectionViewCell" />.</summary>
        <returns>A <see cref="T:UIKit.UICollectionViewLayoutAttributes" /> object specifying layout attributes. Returns <see langword="null" /> if the <paramref name="indexPath" /> specifies a non-existent index.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLayoutAttributesForSupplementaryElement">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewLayoutAttributes GetLayoutAttributesForSupplementaryElement (Foundation.NSString elementKind, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewLayoutAttributes GetLayoutAttributesForSupplementaryElement(class Foundation.NSString elementKind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetLayoutAttributesForSupplementaryElement(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetLayoutAttributesForSupplementaryElement : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes&#xA;override this.GetLayoutAttributesForSupplementaryElement : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="uICollectionView.GetLayoutAttributesForSupplementaryElement (elementKind, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutAttributesForSupplementaryElementOfKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="elementKind"> A <see cref="T:Foundation.NSString" /> specifying what kind of of supplementary view is desired (e.g., "UICollectionElementKindSectionHeader").
        </param>
        <param name="indexPath">The <see cref="T:Foundation.NSIndexPath" /> specifying the location of the supplementary view.</param>
        <summary>Returns the layout information for the specified supplementary view.</summary>
        <returns>A <see cref="T:UIKit.UICollectionViewLayoutAttributes" /> object specifying layout attributes. Returns <see langword="null" /> if the <paramref name="indexPath" /> specifies a non-existent index.</returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPresentationIndexPath">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath GetPresentationIndexPath (Foundation.NSIndexPath dataSourceIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath GetPresentationIndexPath(class Foundation.NSIndexPath dataSourceIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetPresentationIndexPath(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetPresentationIndexPath : Foundation.NSIndexPath -&gt; Foundation.NSIndexPath&#xA;override this.GetPresentationIndexPath : Foundation.NSIndexPath -&gt; Foundation.NSIndexPath" Usage="uICollectionView.GetPresentationIndexPath dataSourceIndexPath" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIDataSourceTranslating.GetPresentationIndexPath(Foundation.NSIndexPath)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentationIndexPathForDataSourceIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSourceIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="dataSourceIndexPath">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPresentationSectionIndex">
      <MemberSignature Language="C#" Value="public virtual nint GetPresentationSectionIndex (nint dataSourceSectionIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint GetPresentationSectionIndex(valuetype System.nint dataSourceSectionIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetPresentationSectionIndex(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetPresentationSectionIndex : nint -&gt; nint&#xA;override this.GetPresentationSectionIndex : nint -&gt; nint" Usage="uICollectionView.GetPresentationSectionIndex dataSourceSectionIndex" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIDataSourceTranslating.GetPresentationSectionIndex(System.nint)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentationSectionIndexForDataSourceSectionIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSourceSectionIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="dataSourceSectionIndex">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSupplementaryView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionReusableView GetSupplementaryView (Foundation.NSString elementKind, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionReusableView GetSupplementaryView(class Foundation.NSString elementKind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetSupplementaryView : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView&#xA;override this.GetSupplementaryView : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionReusableView" Usage="uICollectionView.GetSupplementaryView (elementKind, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("supplementaryViewForElementKind:atIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionReusableView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="elementKind">A value in <see cref="T:UIKit.UICollectionElementKindSectionKey" /></param>
        <param name="indexPath">The index path to the supplementary view.</param>
        <summary>Rerieves the supplementary view at the specified <paramref name="indexPath" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVisibleSupplementaryViews">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionReusableView[] GetVisibleSupplementaryViews (Foundation.NSString elementKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionReusableView[] GetVisibleSupplementaryViews(class Foundation.NSString elementKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.GetVisibleSupplementaryViews(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member GetVisibleSupplementaryViews : Foundation.NSString -&gt; UIKit.UICollectionReusableView[]&#xA;override this.GetVisibleSupplementaryViews : Foundation.NSString -&gt; UIKit.UICollectionReusableView[]" Usage="uICollectionView.GetVisibleSupplementaryViews elementKind" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("visibleSupplementaryViewsOfKind:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionReusableView[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elementKind" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="elementKind">A value in <see cref="T:UIKit.UICollectionElementKindSectionKey" /></param>
        <summary>Retrieves the array of visible header or footer supplementary views.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasActiveDrag">
      <MemberSignature Language="C#" Value="public virtual bool HasActiveDrag { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasActiveDrag" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.HasActiveDrag" />
      <MemberSignature Language="F#" Value="member this.HasActiveDrag : bool" Usage="UIKit.UICollectionView.HasActiveDrag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("hasActiveDrag")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether there is an active drag operation for the collection view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasActiveDrop">
      <MemberSignature Language="C#" Value="public virtual bool HasActiveDrop { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasActiveDrop" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.HasActiveDrop" />
      <MemberSignature Language="F#" Value="member this.HasActiveDrop : bool" Usage="UIKit.UICollectionView.HasActiveDrop" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("hasActiveDrop")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether there is an active drop operation for the collection view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasUncommittedUpdates">
      <MemberSignature Language="C#" Value="public virtual bool HasUncommittedUpdates { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasUncommittedUpdates" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.HasUncommittedUpdates" />
      <MemberSignature Language="F#" Value="member this.HasUncommittedUpdates : bool" Usage="UIKit.UICollectionView.HasUncommittedUpdates" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("hasUncommittedUpdates")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a Boolean value that tells whether the collection view is reordering items for a drop or has a placeholder view.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexPathForCell">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath IndexPathForCell (UIKit.UICollectionViewCell cell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath IndexPathForCell(class UIKit.UICollectionViewCell cell) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.IndexPathForCell(UIKit.UICollectionViewCell)" />
      <MemberSignature Language="F#" Value="abstract member IndexPathForCell : UIKit.UICollectionViewCell -&gt; Foundation.NSIndexPath&#xA;override this.IndexPathForCell : UIKit.UICollectionViewCell -&gt; Foundation.NSIndexPath" Usage="uICollectionView.IndexPathForCell cell" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexPathForCell:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cell" Type="UIKit.UICollectionViewCell" />
      </Parameters>
      <Docs>
        <param name="cell">The <see cref="T:UIKit.UICollectionViewCell" /> for which the index is desired.</param>
        <summary>Returns the <see cref="T:Foundation.NSIndexPath" /> for the <paramref name="cell" />.</summary>
        <returns>The <see cref="T:Foundation.NSIndexPath" /> of the specified <see cref="T:UIKit.UICollectionViewCell" />. Returns <see langword="null" /> f the cell is not in this <see cref="T:UIKit.UICollectionView" /></returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexPathForItemAtPoint">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath IndexPathForItemAtPoint (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath IndexPathForItemAtPoint(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.IndexPathForItemAtPoint(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member IndexPathForItemAtPoint : CoreGraphics.CGPoint -&gt; Foundation.NSIndexPath&#xA;override this.IndexPathForItemAtPoint : CoreGraphics.CGPoint -&gt; Foundation.NSIndexPath" Usage="uICollectionView.IndexPathForItemAtPoint point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexPathForItemAtPoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">The location in this <see cref="T:UIKit.UICollectionView" /> for which the index is desired.</param>
        <summary>Returns the <see cref="T:Foundation.NSIndexPath" /> for the <paramref name="point" />.</summary>
        <returns>The <see cref="T:Foundation.NSIndexPath" /> of the specified <see cref="T:System.Drawing.PointF" />. Returns <see langword="null" /> f there is no component view at the specified location.</returns>
        <remarks>This method relies on the values returned by the current <see cref="T:UIKit.UICollectionViewLayout" />. </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexPathsForVisibleItems">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath[] IndexPathsForVisibleItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSIndexPath[] IndexPathsForVisibleItems" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.IndexPathsForVisibleItems" />
      <MemberSignature Language="F#" Value="member this.IndexPathsForVisibleItems : Foundation.NSIndexPath[]" Usage="UIKit.UICollectionView.IndexPathsForVisibleItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("indexPathsForVisibleItems")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the <see cref="T:Foundation.NSIndexPath" />s of all visible items.</summary>
        <value>The default value is an empty <see cref="T:Foundation.NSIndexPath" /> array.</value>
        <remarks>This method does not return the <see cref="T:Foundation.NSIndexPath" /> of visible supplementary views.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertItems">
      <MemberSignature Language="C#" Value="public virtual void InsertItems (Foundation.NSIndexPath[] indexPaths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertItems(class Foundation.NSIndexPath[] indexPaths) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.InsertItems(Foundation.NSIndexPath[])" />
      <MemberSignature Language="F#" Value="abstract member InsertItems : Foundation.NSIndexPath[] -&gt; unit&#xA;override this.InsertItems : Foundation.NSIndexPath[] -&gt; unit" Usage="uICollectionView.InsertItems indexPaths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("insertItemsAtIndexPaths:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPaths" Type="Foundation.NSIndexPath[]" />
      </Parameters>
      <Docs>
        <param name="indexPaths">An array of <see cref="T:Foundation.NSIndexPath" />s indicating the desired insertion locations.</param>
        <summary>Creates new cells in the <see cref="T:UIKit.UICollectionView" />, animating as necessary.</summary>
        <remarks>
          <para>Calling this method will trigger a request for layout information from the <see cref="P:UIKit.UICollectionView.CollectionViewLayout" />. If the result includes visible elements, those elements will be populated via the <see cref="P:UIKit.UICollectionView.DataSource" /> and animated onto the screen.</para>
          <para>If this method is called within the <see cref="T:System.Action" /> delegate passed to the <see cref="M:UIKit.UICollectionView.PerformBatchUpdates(System.Action,UIKit.UICompletionHandler)" /> method, the animation will occur simultaneously with those of other manipulations of the <see cref="T:UIKit.UICollectionView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertSections">
      <MemberSignature Language="C#" Value="public virtual void InsertSections (Foundation.NSIndexSet sections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void InsertSections(class Foundation.NSIndexSet sections) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.InsertSections(Foundation.NSIndexSet)" />
      <MemberSignature Language="F#" Value="abstract member InsertSections : Foundation.NSIndexSet -&gt; unit&#xA;override this.InsertSections : Foundation.NSIndexSet -&gt; unit" Usage="uICollectionView.InsertSections sections" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("insertSections:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sections" Type="Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="sections">An <see cref="T:Foundation.NSIndexSet" /> indicating the desired insertion locations.</param>
        <summary>Creates new sections in the <see cref="T:UIKit.UICollectionView" />, animating as necessary.</summary>
        <remarks>
          <para>Calling this method will trigger a request for layout information from the <see cref="P:UIKit.UICollectionView.CollectionViewLayout" />. If the result includes visible elements, those elements will be populated via the <see cref="P:UIKit.UICollectionView.DataSource" /> and animated onto the screen.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveItem">
      <MemberSignature Language="C#" Value="public virtual void MoveItem (Foundation.NSIndexPath indexPath, Foundation.NSIndexPath newIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveItem(class Foundation.NSIndexPath indexPath, class Foundation.NSIndexPath newIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.MoveItem(Foundation.NSIndexPath,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member MoveItem : Foundation.NSIndexPath * Foundation.NSIndexPath -&gt; unit&#xA;override this.MoveItem : Foundation.NSIndexPath * Foundation.NSIndexPath -&gt; unit" Usage="uICollectionView.MoveItem (indexPath, newIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("moveItemAtIndexPath:toIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="newIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="indexPath">The location of the item to move.</param>
        <param name="newIndexPath">The new location of the item.</param>
        <summary>Moves an element from one location to another within the <see cref="T:UIKit.UICollectionView" />, animating as necssary.</summary>
        <remarks>
          <para>If this method is called within the <see cref="T:System.Action" /> delegate passed to the <see cref="M:UIKit.UICollectionView.PerformBatchUpdates(System.Action,UIKit.UICompletionHandler)" /> method, the animation will occur simultaneously with those of other manipulations of the <see cref="T:UIKit.UICollectionView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveSection">
      <MemberSignature Language="C#" Value="public virtual void MoveSection (nint section, nint newSection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveSection(valuetype System.nint section, valuetype System.nint newSection) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.MoveSection(System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member MoveSection : nint * nint -&gt; unit&#xA;override this.MoveSection : nint * nint -&gt; unit" Usage="uICollectionView.MoveSection (section, newSection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("moveSection:toSection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="section" Type="System.nint" />
        <Parameter Name="newSection" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="section">The index of the section to move.</param>
        <param name="newSection">The new index of thesection.</param>
        <summary>Moves a section from one location to another within the <see cref="T:UIKit.UICollectionView" />, animating as necessary.</summary>
        <remarks>
          <para>If this method is called within the <see cref="T:System.Action" /> delegate passed to the <see cref="M:UIKit.UICollectionView.PerformBatchUpdates(System.Action,UIKit.UICompletionHandler)" /> method, the animation will occur simultaneously with those of other manipulations of the <see cref="T:UIKit.UICollectionView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfItemsInSection">
      <MemberSignature Language="C#" Value="public virtual nint NumberOfItemsInSection (nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint NumberOfItemsInSection(valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.NumberOfItemsInSection(System.nint)" />
      <MemberSignature Language="F#" Value="abstract member NumberOfItemsInSection : nint -&gt; nint&#xA;override this.NumberOfItemsInSection : nint -&gt; nint" Usage="uICollectionView.NumberOfItemsInSection section" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("numberOfItemsInSection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="section">The index of the section.</param>
        <summary>Returns the number of items in the specified section.</summary>
        <returns>The number of items in the specified section.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfSections">
      <MemberSignature Language="C#" Value="public virtual nint NumberOfSections ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint NumberOfSections() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.NumberOfSections" />
      <MemberSignature Language="F#" Value="abstract member NumberOfSections : unit -&gt; nint&#xA;override this.NumberOfSections : unit -&gt; nint" Usage="uICollectionView.NumberOfSections " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("numberOfSections")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the number of sections in the <see cref="T:UIKit.UICollectionView" />.</summary>
        <returns>The number of sections in the <see cref="T:UIKit.UICollectionView" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformBatchUpdates">
      <MemberSignature Language="C#" Value="public virtual void PerformBatchUpdates (Action updates, UIKit.UICompletionHandler completed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformBatchUpdates(class System.Action updates, class UIKit.UICompletionHandler completed) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.PerformBatchUpdates(System.Action,UIKit.UICompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member PerformBatchUpdates : Action * UIKit.UICompletionHandler -&gt; unit&#xA;override this.PerformBatchUpdates : Action * UIKit.UICompletionHandler -&gt; unit" Usage="uICollectionView.PerformBatchUpdates (updates, completed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("performBatchUpdates:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updates" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
        <Parameter Name="completed" Type="UIKit.UICompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDUICompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="updates">An <see cref="T:System.Action" /> delegate specifying the updates to apply.</param>
        <param name="completed">
          <para>The callback to invoke when the animations have completed.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Applies and simultaneously animates multiple manipulations of the <see cref="T:UIKit.UICollectionView" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformBatchUpdatesAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; PerformBatchUpdatesAsync (Action updates);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; PerformBatchUpdatesAsync(class System.Action updates) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.PerformBatchUpdatesAsync(System.Action)" />
      <MemberSignature Language="F#" Value="abstract member PerformBatchUpdatesAsync : Action -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.PerformBatchUpdatesAsync : Action -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="uICollectionView.PerformBatchUpdatesAsync updates" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="updates" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="updates">An  delegate specifying the updates to apply.</param>
        <summary>Applies and simultaneously animates multiple manipulations of the <see cref="T:UIKit.UICollectionView" />.</summary>
        <returns>
          <para>A task that represents the asynchronous PerformBatchUpdates operation.   The value of the TResult parameter is a <see cref="T:UIKit.UICompletionHandler" />.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformUsingPresentationValues">
      <MemberSignature Language="C#" Value="public virtual void PerformUsingPresentationValues (Action actionsToTranslate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformUsingPresentationValues(class System.Action actionsToTranslate) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.PerformUsingPresentationValues(System.Action)" />
      <MemberSignature Language="F#" Value="abstract member PerformUsingPresentationValues : Action -&gt; unit&#xA;override this.PerformUsingPresentationValues : Action -&gt; unit" Usage="uICollectionView.PerformUsingPresentationValues actionsToTranslate" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUIDataSourceTranslating.PerformUsingPresentationValues(System.Action)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("performUsingPresentationValues:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="actionsToTranslate" Type="System.Action">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="actionsToTranslate">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefetchDataSource">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUICollectionViewDataSourcePrefetching PrefetchDataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUICollectionViewDataSourcePrefetching PrefetchDataSource" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.PrefetchDataSource" />
      <MemberSignature Language="F#" Value="member this.PrefetchDataSource : UIKit.IUICollectionViewDataSourcePrefetching with get, set" Usage="UIKit.UICollectionView.PrefetchDataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("prefetchDataSource")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setPrefetchDataSource:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("prefetchDataSource", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPrefetchDataSource:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUICollectionViewDataSourcePrefetching</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the prefetch-capable source for this collection view.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrefetchingEnabled">
      <MemberSignature Language="C#" Value="public virtual bool PrefetchingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PrefetchingEnabled" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.PrefetchingEnabled" />
      <MemberSignature Language="F#" Value="member this.PrefetchingEnabled : bool with get, set" Usage="UIKit.UICollectionView.PrefetchingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isPrefetchingEnabled")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPrefetchingEnabled:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether prefecting is enabled. If <see langword="true" />, <see cref="P:UIKit.UICollectionView.PrefetchDataSource" /> must be set.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassForCell">
      <MemberSignature Language="C#" Value="public void RegisterClassForCell (Type cellType, Foundation.NSString reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClassForCell(class System.Type cellType, class Foundation.NSString reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterClassForCell(System.Type,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="member this.RegisterClassForCell : Type * Foundation.NSString -&gt; unit" Usage="uICollectionView.RegisterClassForCell (cellType, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellType" Type="System.Type" />
        <Parameter Name="reuseIdentifier" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="cellType">A subtype of <see cref="T:UIKit.UICollectionViewCell" />.</param>
        <param name="reuseIdentifier">A non-empty string to be associated with the <paramref name="cellType" />.</param>
        <summary>Specifies the type to be used to populate cells.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.UICollectionView" /> maintains a highly-efficient reuse queue for offscreen components. This requires that the <see cref="T:UIKit.UICollectionView" /> be responsible for the lifecycle management of its component views. This method (and related methods such as <see cref="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.Type,UIKit.UICollectionElementKindSection,System.String)" />) provide the <see cref="T:UIKit.UICollectionView" /> the knowledge of which types it needs to instantiate.</para>
          <para>The application developer may pass <see langword="null" /> as the <paramref name="reuseIdentifier" />, in which case the <paramref name="cellType" /> will be "un-registered" and no longer instantiated. The application developer may pass in a <paramref name="reuseIdentifier" /> previously associated with another type, in which case the old type will be "de-registered" and the new <paramref name="cellType" /> will be used.</para>
          <para>It is very important that the type that you specify implements a public constructor that takes a <see cref="T:System.Drawing.RectangleF" /> parameter, this is used to initialize the class from an object allocated by Objective-C.   The following example shows the constructor in use:</para>
          <example>
            <code lang="C#"><![CDATA[
public class AnimalCell : UICollectionViewCell
{
[Export ("initWithFrame:")]
  public AnimalCell (RectangleF frame) : base (frame) {}
}
]]></code>
          </example>
          <para>Developers should not call this method if they have prototyped their <see cref="T:UIKit.UICollectionViewCell" /> type using a Storyboard. If they do so, they will overwrite the Storyboard-defined definition instantiation of the <see cref="T:UIKit.UICollectionViewCell" /> object's children.</para>
        </remarks>
        <altmember cref="M:UIKit.UICollectionView.RegisterClassForSupplementaryView" />
        <altmember cref="M:UIKit.UICollectionView.RegisterNibForCell" />
        <altmember cref="M:UIKit.UICollectionView.RegisterNibForSupplementaryView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterClassForDecorationView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterNibForDecorationView" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClassForCell">
      <MemberSignature Language="C#" Value="public void RegisterClassForCell (Type cellType, string reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClassForCell(class System.Type cellType, string reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterClassForCell(System.Type,System.String)" />
      <MemberSignature Language="F#" Value="member this.RegisterClassForCell : Type * string -&gt; unit" Usage="uICollectionView.RegisterClassForCell (cellType, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellType" Type="System.Type" />
        <Parameter Name="reuseIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cellType">To be added.</param>
        <param name="reuseIdentifier">A non-empty string to be associated with the <paramref name="cellType" />.</param>
        <summary>Specifies the type to be used to populate cells.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.UICollectionView" /> maintains a highly-efficient reuse queue for offscreen components. This requires that the <see cref="T:UIKit.UICollectionView" /> be responsible for the lifecycle management of its component views. This method (and related methods such as <see cref="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.Type,UIKit.UICollectionElementKindSection,System.String)" />) provide the <see cref="T:UIKit.UICollectionView" /> the knowledge of which types it needs to instantiate.</para>
          <para>The application developer may pass <see langword="null" /> as the <paramref name="reuseIdentifier" />, in which case the <paramref name="cellType" /> will be "un-registered" and no longer instantiated. The application developer may pass in a <paramref name="reuseIdentifier" /> previously associated with another type, in which case the old type will be "de-registered" and the new <paramref name="cellType" /> will be used.</para>
          <para>It is very important that the type that you specify implements a public constructor that takes a <see cref="T:System.Drawing.RectangleF" /> parameter, this is used to initialize the class from an object allocated by Objective-C.   The following example shows the constructor in use:</para>
          <example>
            <code lang="C#"><![CDATA[
public class AnimalCell : UICollectionViewCell
{
[Export ("initWithFrame:")]
  public AnimalCell (RectangleF frame) : base (frame) {}
}
]]></code>
          </example>
          <para>Developers should not call this method if they have prototyped their <see cref="T:UIKit.UICollectionViewCell" /> type using a Storyboard. If they do so, they will overwrite the Storyboard-defined definition instantiation of the <see cref="T:UIKit.UICollectionViewCell" /> object's children.</para>
        </remarks>
        <altmember cref="M:UIKit.UICollectionView.RegisterClassForSupplementaryView" />
        <altmember cref="M:UIKit.UICollectionView.RegisterNibForCell" />
        <altmember cref="M:UIKit.UICollectionView.RegisterNibForSupplementaryView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterClassForDecorationView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterNibForDecorationView" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClassForSupplementaryView">
      <MemberSignature Language="C#" Value="protected virtual void RegisterClassForSupplementaryView (IntPtr viewClass, Foundation.NSString kind, Foundation.NSString reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RegisterClassForSupplementaryView(native int viewClass, class Foundation.NSString kind, class Foundation.NSString reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.IntPtr,Foundation.NSString,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member RegisterClassForSupplementaryView : nativeint * Foundation.NSString * Foundation.NSString -&gt; unit&#xA;override this.RegisterClassForSupplementaryView : nativeint * Foundation.NSString * Foundation.NSString -&gt; unit" Usage="uICollectionView.RegisterClassForSupplementaryView (viewClass, kind, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("registerClass:forSupplementaryViewOfKind:withReuseIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewClass" Type="System.IntPtr" />
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="reuseIdentifier" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="viewClass">An <see cref="T:System.IntPtr" /> to the type to be used for supplementary views.</param>
        <param name="kind">The type of supplementary view being registered (e.g., "UICollectionElementKindSectionHeader").</param>
        <param name="reuseIdentifier">A non-empty string to be associated with the <paramref name="kind" />.</param>
        <summary>Specifies the type to be used to populate supplementary views.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.UICollectionView" /> maintains a highly-efficient reuse queue for offscreen components. This requires that the <see cref="T:UIKit.UICollectionView" /> be responsible for the lifecycle management of its component views. This method (and related methods such as <see cref="M:UIKit.UICollectionView.RegisterClassForCell(System.Type,System.String)" />) provide the <see cref="T:UIKit.UICollectionView" /> the knowledge of which types it needs to instantiate.</para>
          <para>The application developer may pass <see langword="null" /> as the <paramref name="reuseIdentifier" />, in which case the <paramref name="viewClass" /> will be "un-registered" and no longer instantiated. The application developer may pass in a <paramref name="reuseIdentifier" /> previously associated with another type, in which case the old type will be "de-registered" and the new <paramref name="viewClass" /> will be used.</para>
          <para>
	    It is very important that you provide constructor that takes an IntPtr argument in any subclasses that you register.   This is required because the classes are actually allocated by the Objective-C runtime, and you must initialize them. 
	  </para>
        </remarks>
        <altmember cref="M:UIKit.UICollectionView.RegisterClassForCell" />
        <altmember cref="M:UIKit.UICollectionView.RegisterNibForCell" />
        <altmember cref="M:UIKit.UICollectionView.RegisterNibForSupplementaryView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterClassForDecorationView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterNibForDecorationView" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClassForSupplementaryView">
      <MemberSignature Language="C#" Value="public void RegisterClassForSupplementaryView (Type cellType, Foundation.NSString kind, Foundation.NSString reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClassForSupplementaryView(class System.Type cellType, class Foundation.NSString kind, class Foundation.NSString reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.Type,Foundation.NSString,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="member this.RegisterClassForSupplementaryView : Type * Foundation.NSString * Foundation.NSString -&gt; unit" Usage="uICollectionView.RegisterClassForSupplementaryView (cellType, kind, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellType" Type="System.Type" />
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="reuseIdentifier" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="cellType">A subtype of <see cref="T:UIKit.UICollectionReusableView" /> to be used for supplementary views.</param>
        <param name="kind">The type of supplementary view being registered (e.g., "UICollectionElementKindSectionHeader").</param>
        <param name="reuseIdentifier">A non-empty string to be associated with the <paramref name="kind" />.</param>
        <summary>Specifies the type to be used to populate supplementary views.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassForSupplementaryView">
      <MemberSignature Language="C#" Value="public void RegisterClassForSupplementaryView (Type cellType, Foundation.NSString kind, string reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClassForSupplementaryView(class System.Type cellType, class Foundation.NSString kind, string reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.Type,Foundation.NSString,System.String)" />
      <MemberSignature Language="F#" Value="member this.RegisterClassForSupplementaryView : Type * Foundation.NSString * string -&gt; unit" Usage="uICollectionView.RegisterClassForSupplementaryView (cellType, kind, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellType" Type="System.Type" />
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="reuseIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cellType">To be added.</param>
        <param name="kind">To be added.</param>
        <param name="reuseIdentifier">To be added.</param>
        <summary>Specifies the type to be used to populate supplementary views.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterClassForSupplementaryView">
      <MemberSignature Language="C#" Value="public void RegisterClassForSupplementaryView (Type cellType, UIKit.UICollectionElementKindSection section, Foundation.NSString reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClassForSupplementaryView(class System.Type cellType, valuetype UIKit.UICollectionElementKindSection section, class Foundation.NSString reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.Type,UIKit.UICollectionElementKindSection,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="member this.RegisterClassForSupplementaryView : Type * UIKit.UICollectionElementKindSection * Foundation.NSString -&gt; unit" Usage="uICollectionView.RegisterClassForSupplementaryView (cellType, section, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellType" Type="System.Type" />
        <Parameter Name="section" Type="UIKit.UICollectionElementKindSection" />
        <Parameter Name="reuseIdentifier" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="cellType">A subtype of <see cref="T:UIKit.UICollectionReusableView" /> to be used for supplementary views</param>
        <param name="section">The type of supplementary view being registered.</param>
        <param name="reuseIdentifier">A non-empty string to be associated with the <paramref name="cellType" />.</param>
        <summary>Specifies the type to be used to populate supplementary views.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.UICollectionView" /> maintains a highly-efficient reuse queue for offscreen components. This requires that the <see cref="T:UIKit.UICollectionView" /> be responsible for the lifecycle management of its component views. This method (and related methods such as <see cref="M:UIKit.UICollectionView.RegisterClassForCell(System.Type,System.String)" />) provide the <see cref="T:UIKit.UICollectionView" /> the knowledge of which types it needs to instantiate.</para>
          <para>The application developer may pass <see langword="null" /> as the <paramref name="reuseIdentifier" />, in which case the <paramref name="cellType" /> will be "un-registered" and no longer instantiated. The application developer may pass in a <paramref name="reuseIdentifier" /> previously associated with another type, in which case the old type will be "de-registered" and the new <paramref name="cellType" /> will be used.</para>
          <para>
	It is very important that you provide constructor that takes an IntPtr argument in any subclasses that you register.   This is required because the classes are actually allocated by the Objective-C runtime, and you must initialize them. 
      </para>
        </remarks>
        <altmember cref="M:UIKit.UICollectionView.RegisterClassForCell" />
        <altmember cref="M:UIKit.UICollectionView.RegisterNibForCell" />
        <altmember cref="M:UIKit.UICollectionView.RegisterNibForSupplementaryView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterClassForDecorationView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterNibForDecorationView" />
      </Docs>
    </Member>
    <Member MemberName="RegisterClassForSupplementaryView">
      <MemberSignature Language="C#" Value="public void RegisterClassForSupplementaryView (Type cellType, UIKit.UICollectionElementKindSection section, string reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterClassForSupplementaryView(class System.Type cellType, valuetype UIKit.UICollectionElementKindSection section, string reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.Type,UIKit.UICollectionElementKindSection,System.String)" />
      <MemberSignature Language="F#" Value="member this.RegisterClassForSupplementaryView : Type * UIKit.UICollectionElementKindSection * string -&gt; unit" Usage="uICollectionView.RegisterClassForSupplementaryView (cellType, section, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cellType" Type="System.Type" />
        <Parameter Name="section" Type="UIKit.UICollectionElementKindSection" />
        <Parameter Name="reuseIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="cellType">To be added.</param>
        <param name="section">To be added.</param>
        <param name="reuseIdentifier">To be added.</param>
        <summary>Specifies the type to be used to populate supplementary views.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNibForCell">
      <MemberSignature Language="C#" Value="public virtual void RegisterNibForCell (UIKit.UINib nib, Foundation.NSString reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterNibForCell(class UIKit.UINib nib, class Foundation.NSString reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterNibForCell(UIKit.UINib,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member RegisterNibForCell : UIKit.UINib * Foundation.NSString -&gt; unit&#xA;override this.RegisterNibForCell : UIKit.UINib * Foundation.NSString -&gt; unit" Usage="uICollectionView.RegisterNibForCell (nib, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("registerNib:forCellWithReuseIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nib" Type="UIKit.UINib" />
        <Parameter Name="reuseIdentifier" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="nib">The <see cref="T:UIKit.UINib" /> to be used to populate cells.</param>
        <param name="reuseIdentifier">A non-empty string to be associated with the <paramref name="nib" />.</param>
        <summary>Specifies the type to be used to populate cells.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.UICollectionView" /> maintains a highly-efficient reuse queue for offscreen components. This requires that the <see cref="T:UIKit.UICollectionView" /> be responsible for the lifecycle management of its component views. This method (and related methods such as <see cref="M:UIKit.UICollectionView.RegisterClassForSupplementaryView(System.Type,UIKit.UICollectionElementKindSection,System.String)" />) provide the <see cref="T:UIKit.UICollectionView" /> the knowledge of which types it needs to instantiate.</para>
          <para>The application developer may pass <see langword="null" /> as the <paramref name="reuseIdentifier" />, in which case the <paramref name="nib" /> will be "un-registered" and no longer instantiated. The application developer may pass in a <paramref name="reuseIdentifier" /> previously associated with another nib, in which case the old nib will be "de-registered" and the new <paramref name="nib" /> will be used.</para>
        </remarks>
        <altmember cref="M:UIKit.UICollectionView.RegisterClassForSupplementaryView" />
        <altmember cref="M:UIKit.UICollectionView.RegisterClassForCell" />
        <altmember cref="M:UIKit.UICollectionView.RegisterNibForSupplementaryView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterClassForDecorationView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterNibForDecorationView" />
      </Docs>
    </Member>
    <Member MemberName="RegisterNibForCell">
      <MemberSignature Language="C#" Value="public void RegisterNibForCell (UIKit.UINib nib, string reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterNibForCell(class UIKit.UINib nib, string reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterNibForCell(UIKit.UINib,System.String)" />
      <MemberSignature Language="F#" Value="member this.RegisterNibForCell : UIKit.UINib * string -&gt; unit" Usage="uICollectionView.RegisterNibForCell (nib, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nib" Type="UIKit.UINib" />
        <Parameter Name="reuseIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nib">To be added.</param>
        <param name="reuseIdentifier">To be added.</param>
        <summary>Registers the Nib file that will be used for cell UI.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNibForSupplementaryView">
      <MemberSignature Language="C#" Value="public virtual void RegisterNibForSupplementaryView (UIKit.UINib nib, Foundation.NSString kind, Foundation.NSString reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RegisterNibForSupplementaryView(class UIKit.UINib nib, class Foundation.NSString kind, class Foundation.NSString reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterNibForSupplementaryView(UIKit.UINib,Foundation.NSString,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member RegisterNibForSupplementaryView : UIKit.UINib * Foundation.NSString * Foundation.NSString -&gt; unit&#xA;override this.RegisterNibForSupplementaryView : UIKit.UINib * Foundation.NSString * Foundation.NSString -&gt; unit" Usage="uICollectionView.RegisterNibForSupplementaryView (nib, kind, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("registerNib:forSupplementaryViewOfKind:withReuseIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nib" Type="UIKit.UINib" />
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="reuseIdentifier" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="nib">The <see cref="T:UIKit.UINib" /> to be used to populate the supplementary view.</param>
        <param name="kind">The kind of supplementary view being registered (e.g., "UICollectionElementKindSectionHeader").</param>
        <param name="reuseIdentifier">A non-empty string to be associated with the <paramref name="nib" />.</param>
        <summary>Specifies the type to be used to populate supplementary views.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.UICollectionView" /> maintains a highly-efficient reuse queue for offscreen components. This requires that the <see cref="T:UIKit.UICollectionView" /> be responsible for the lifecycle management of its component views. This method (and related methods such as <see cref="M:UIKit.UICollectionView.RegisterNibForCell(UIKit.UINib,System.String)" />) provide the <see cref="T:UIKit.UICollectionView" /> the knowledge of which types it needs to instantiate.</para>
          <para>The application developer may pass <see langword="null" /> as the <paramref name="reuseIdentifier" />, in which case the <paramref name="nib" /> will be "un-registered" and no longer instantiated. The application developer may pass in a <paramref name="reuseIdentifier" /> previously associated with another nib, in which case the old nib will be "de-registered" and the new <paramref name="nib" /> will be used.</para>
        </remarks>
        <altmember cref="M:UIKit.UICollectionView.RegisterClassForSupplementaryView" />
        <altmember cref="M:UIKit.UICollectionView.RegisterNibForCell" />
        <altmember cref="M:UIKit.UICollectionView.RegisterClassForCell" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterClassForDecorationView" />
        <altmember cref="M:UIKit.UICollectionViewLayout.RegisterNibForDecorationView" />
      </Docs>
    </Member>
    <Member MemberName="RegisterNibForSupplementaryView">
      <MemberSignature Language="C#" Value="public void RegisterNibForSupplementaryView (UIKit.UINib nib, UIKit.UICollectionElementKindSection section, Foundation.NSString reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterNibForSupplementaryView(class UIKit.UINib nib, valuetype UIKit.UICollectionElementKindSection section, class Foundation.NSString reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterNibForSupplementaryView(UIKit.UINib,UIKit.UICollectionElementKindSection,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="member this.RegisterNibForSupplementaryView : UIKit.UINib * UIKit.UICollectionElementKindSection * Foundation.NSString -&gt; unit" Usage="uICollectionView.RegisterNibForSupplementaryView (nib, section, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nib" Type="UIKit.UINib" />
        <Parameter Name="section" Type="UIKit.UICollectionElementKindSection" />
        <Parameter Name="reuseIdentifier" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="nib">The <see cref="T:UIKit.UINib" /> to be used to populate the supplementary view.</param>
        <param name="section">The kind of supplementary view being registered.</param>
        <param name="reuseIdentifier">A non-empty string to be associated with the <paramref name="nib" />.</param>
        <summary>Specifies the nib to be used for populating the supplementary view.</summary>
        <remarks>
          <para>The <see cref="T:UIKit.UICollectionView" /> maintains a highly-efficient reuse queue for offscreen components. This requires that the <see cref="T:UIKit.UICollectionView" /> be responsible for the lifecycle management of its component views. This method (and related methods such as <see cref="M:UIKit.UICollectionView.RegisterNibForCell(UIKit.UINib,System.String)" />) provide the <see cref="T:UIKit.UICollectionView" /> the knowledge of which types it needs to instantiate.</para>
          <para>The application developer may pass <see langword="null" /> as the <paramref name="reuseIdentifier" />, in which case the <paramref name="nib" /> will be "un-registered" and no longer instantiated. The application developer may pass in a <paramref name="reuseIdentifier" /> previously associated with another nib, in which case the old nib will be "de-registered" and the new <paramref name="nib" /> will be used.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RegisterNibForSupplementaryView">
      <MemberSignature Language="C#" Value="public void RegisterNibForSupplementaryView (UIKit.UINib nib, UIKit.UICollectionElementKindSection section, string reuseIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RegisterNibForSupplementaryView(class UIKit.UINib nib, valuetype UIKit.UICollectionElementKindSection section, string reuseIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.RegisterNibForSupplementaryView(UIKit.UINib,UIKit.UICollectionElementKindSection,System.String)" />
      <MemberSignature Language="F#" Value="member this.RegisterNibForSupplementaryView : UIKit.UINib * UIKit.UICollectionElementKindSection * string -&gt; unit" Usage="uICollectionView.RegisterNibForSupplementaryView (nib, section, reuseIdentifier)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nib" Type="UIKit.UINib" />
        <Parameter Name="section" Type="UIKit.UICollectionElementKindSection" />
        <Parameter Name="reuseIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="nib">To be added.</param>
        <param name="section">To be added.</param>
        <param name="reuseIdentifier">To be added.</param>
        <summary>Registers the Nib file that will be used for UI in supplementary views.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReloadData">
      <MemberSignature Language="C#" Value="public virtual void ReloadData ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReloadData() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.ReloadData" />
      <MemberSignature Language="F#" Value="abstract member ReloadData : unit -&gt; unit&#xA;override this.ReloadData : unit -&gt; unit" Usage="uICollectionView.ReloadData " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("reloadData")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reloads all of the data for the <see cref="T:UIKit.UICollectionView" />.</summary>
        <remarks>
          <para>Calling this method will cause the <see cref="T:UIKit.UICollectionView" /> to discard any visible items and then redisplay them.</para>
          <para>Data manipulation methods such as <see cref="M:UIKit.UICollectionView.InsertItems(Foundation.NSIndexPath[])" /> or <see cref="M:UIKit.UICollectionView.DeleteItems(Foundation.NSIndexPath[])" /> automatically update the <see cref="T:UIKit.UICollectionView" />'s data and do not require this potentially-expensive method to be called.
          </para>
        </remarks>
        <altmember cref="M:UIKit.UICollectionView.ReloadItems" />
        <altmember cref="M:UIKit.UICollectionView.ReloadSections" />
      </Docs>
    </Member>
    <Member MemberName="ReloadItems">
      <MemberSignature Language="C#" Value="public virtual void ReloadItems (Foundation.NSIndexPath[] indexPaths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReloadItems(class Foundation.NSIndexPath[] indexPaths) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.ReloadItems(Foundation.NSIndexPath[])" />
      <MemberSignature Language="F#" Value="abstract member ReloadItems : Foundation.NSIndexPath[] -&gt; unit&#xA;override this.ReloadItems : Foundation.NSIndexPath[] -&gt; unit" Usage="uICollectionView.ReloadItems indexPaths" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("reloadItemsAtIndexPaths:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPaths" Type="Foundation.NSIndexPath[]" />
      </Parameters>
      <Docs>
        <param name="indexPaths">The <see cref="T:Foundation.NSIndexPath" /> of the items to be reloaded.</param>
        <summary>Reloads the data for the specified elements.</summary>
        <remarks>
          <para>If the specified elements are visible, the <see cref="T:UIKit.UICollectionView" /> will discard and then redisplay them.</para>
        </remarks>
        <altmember cref="M:UIKit.UICollectionView.ReloadData" />
        <altmember cref="M:UIKit.UICollectionView.ReloadSections" />
      </Docs>
    </Member>
    <Member MemberName="ReloadSections">
      <MemberSignature Language="C#" Value="public virtual void ReloadSections (Foundation.NSIndexSet sections);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReloadSections(class Foundation.NSIndexSet sections) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.ReloadSections(Foundation.NSIndexSet)" />
      <MemberSignature Language="F#" Value="abstract member ReloadSections : Foundation.NSIndexSet -&gt; unit&#xA;override this.ReloadSections : Foundation.NSIndexSet -&gt; unit" Usage="uICollectionView.ReloadSections sections" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("reloadSections:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sections" Type="Foundation.NSIndexSet" />
      </Parameters>
      <Docs>
        <param name="sections">The sections to reload.</param>
        <summary>Reloads the data in the specified sections of the <see cref="T:UIKit.UICollectionView" />.</summary>
        <remarks>
          <para>This method reloads all of the elements within the specified sectins. If these elements are visible, the <see cref="T:UIKit.UICollectionView" /> will discard and then redisplay them.</para>
        </remarks>
        <altmember cref="M:UIKit.UICollectionView.ReloadData" />
        <altmember cref="M:UIKit.UICollectionView.ReloadItems" />
      </Docs>
    </Member>
    <Member MemberName="RemembersLastFocusedIndexPath">
      <MemberSignature Language="C#" Value="public virtual bool RemembersLastFocusedIndexPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RemembersLastFocusedIndexPath" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.RemembersLastFocusedIndexPath" />
      <MemberSignature Language="F#" Value="member this.RemembersLastFocusedIndexPath : bool with get, set" Usage="UIKit.UICollectionView.RemembersLastFocusedIndexPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("remembersLastFocusedIndexPath")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setRemembersLastFocusedIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether focus should return to the last-focused index path after it leaves and then re-enters the <see cref="T:UIKit.UICollectionView" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReorderingCadence">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewReorderingCadence ReorderingCadence { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UICollectionViewReorderingCadence ReorderingCadence" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.ReorderingCadence" />
      <MemberSignature Language="F#" Value="member this.ReorderingCadence : UIKit.UICollectionViewReorderingCadence with get, set" Usage="UIKit.UICollectionView.ReorderingCadence" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("reorderingCadence")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setReorderingCadence:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("reorderingCadence", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setReorderingCadence:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewReorderingCadence</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the speed at which items are reordered to show drop locations.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScrollToItem">
      <MemberSignature Language="C#" Value="public virtual void ScrollToItem (Foundation.NSIndexPath indexPath, UIKit.UICollectionViewScrollPosition scrollPosition, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ScrollToItem(class Foundation.NSIndexPath indexPath, valuetype UIKit.UICollectionViewScrollPosition scrollPosition, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.ScrollToItem(Foundation.NSIndexPath,UIKit.UICollectionViewScrollPosition,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member ScrollToItem : Foundation.NSIndexPath * UIKit.UICollectionViewScrollPosition * bool -&gt; unit&#xA;override this.ScrollToItem : Foundation.NSIndexPath * UIKit.UICollectionViewScrollPosition * bool -&gt; unit" Usage="uICollectionView.ScrollToItem (indexPath, scrollPosition, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("scrollToItemAtIndexPath:atScrollPosition:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="scrollPosition" Type="UIKit.UICollectionViewScrollPosition" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="indexPath">The <see cref="T:Foundation.NSIndexPath" /> of the desired element.</param>
        <param name="scrollPosition">Where the item should be positioned after scrolling stops.</param>
        <param name="animated">
          <see langword="true" /> if the scrolling should be animated.</param>
        <summary>Scrollls the <see cref="T:UIKit.UICollectionView" /> so that the desired element is visible.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectItem">
      <MemberSignature Language="C#" Value="public virtual void SelectItem (Foundation.NSIndexPath indexPath, bool animated, UIKit.UICollectionViewScrollPosition scrollPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectItem(class Foundation.NSIndexPath indexPath, bool animated, valuetype UIKit.UICollectionViewScrollPosition scrollPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.SelectItem(Foundation.NSIndexPath,System.Boolean,UIKit.UICollectionViewScrollPosition)" />
      <MemberSignature Language="F#" Value="abstract member SelectItem : Foundation.NSIndexPath * bool * UIKit.UICollectionViewScrollPosition -&gt; unit&#xA;override this.SelectItem : Foundation.NSIndexPath * bool * UIKit.UICollectionViewScrollPosition -&gt; unit" Usage="uICollectionView.SelectItem (indexPath, animated, scrollPosition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("selectItemAtIndexPath:animated:scrollPosition:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="scrollPosition" Type="UIKit.UICollectionViewScrollPosition" />
      </Parameters>
      <Docs>
        <param name="indexPath">The <see cref="T:Foundation.NSIndexPath" /> of the desired element.</param>
        <param name="animated">
          <see langword="true" /> if the selection change should be animated.</param>
        <param name="scrollPosition">Where the item should be positioned after scrolling finishes.</param>
        <summary>Selects a <see cref="T:UIKit.UICollectionViewCell" /> and optionally scrolls to make it visible.</summary>
        <remarks>
          <para>This method does nothing if <see cref="P:UIKit.UICollectionView.AllowsSelection" /> is <see langword="false" />. This method deselects the currently selected element if <see cref="P:UIKit.UICollectionView.AllowsMultipleSelection" /> is <see langword="false" />.</para>
          <para>This method does not trigger calls to any selection-related delegate methods (e.g., <see cref="M:UIKit.UICollectionViewDelegate.ItemSelected(UIKit.UICollectionView,Foundation.NSIndexPath)" /> or <see cref="M:UIKit.UICollectionViewDelegate.ItemDeselected(UIKit.UICollectionView,Foundation.NSIndexPath)" />).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCollectionViewLayout">
      <MemberSignature Language="C#" Value="public virtual void SetCollectionViewLayout (UIKit.UICollectionViewLayout layout, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCollectionViewLayout(class UIKit.UICollectionViewLayout layout, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.SetCollectionViewLayout(UIKit.UICollectionViewLayout,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetCollectionViewLayout : UIKit.UICollectionViewLayout * bool -&gt; unit&#xA;override this.SetCollectionViewLayout : UIKit.UICollectionViewLayout * bool -&gt; unit" Usage="uICollectionView.SetCollectionViewLayout (layout, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setCollectionViewLayout:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layout" Type="UIKit.UICollectionViewLayout" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="layout">The new <see cref="T:UIKit.UICollectionViewLayout" />.</param>
        <param name="animated">
          <see langword="true" /> if the transition to the new layout should be animated.</param>
        <summary>Changes the <see cref="T:UIKit.UICollectionViewLayout" /> used by the <see cref="T:UIKit.UICollectionView" />.</summary>
        <remarks>
          <para>A <see cref="T:UIKit.UICollectionView" /> must have its <see cref="P:UIKit.UICollectionView.CollectionViewLayout" /> assigned before being displayed. The application developer must either instantiate the <see cref="T:UIKit.UICollectionView" /> with the <format type="text/html"><a href="https://docs.microsoft.com/en-us/search/index?search=C:UIKit.UICollectionView.UICollectionView(System.Drawing.RectangleF, UIKit.UICollectionViewLayout)&amp;scope=Xamarin" title="C:UIKit.UICollectionView.UICollectionView(System.Drawing.RectangleF, UIKit.UICollectionViewLayout)">C:UIKit.UICollectionView.UICollectionView(System.Drawing.RectangleF, UIKit.UICollectionViewLayout)</a></format> constructor or call this method prior to displaying the <see cref="T:UIKit.UICollectionView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCollectionViewLayout">
      <MemberSignature Language="C#" Value="public virtual void SetCollectionViewLayout (UIKit.UICollectionViewLayout layout, bool animated, UIKit.UICompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetCollectionViewLayout(class UIKit.UICollectionViewLayout layout, bool animated, class UIKit.UICompletionHandler completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.SetCollectionViewLayout(UIKit.UICollectionViewLayout,System.Boolean,UIKit.UICompletionHandler)" />
      <MemberSignature Language="F#" Value="abstract member SetCollectionViewLayout : UIKit.UICollectionViewLayout * bool * UIKit.UICompletionHandler -&gt; unit&#xA;override this.SetCollectionViewLayout : UIKit.UICollectionViewLayout * bool * UIKit.UICompletionHandler -&gt; unit" Usage="uICollectionView.SetCollectionViewLayout (layout, animated, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setCollectionViewLayout:animated:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layout" Type="UIKit.UICollectionViewLayout" />
        <Parameter Name="animated" Type="System.Boolean" />
        <Parameter Name="completion" Type="UIKit.UICompletionHandler">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDUICompletionHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="layout">The new <see cref="T:UIKit.UICollectionViewLayout" />.</param>
        <param name="animated">
          <see langword="true" /> if the transition to the new layout should be animated.</param>
        <param name="completion">A completion handler action to execute after all other operations are finished.</param>
        <summary>Sets the layout used by this <see cref="T:UIKit.UICollectionView" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetCollectionViewLayoutAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; SetCollectionViewLayoutAsync (UIKit.UICollectionViewLayout layout, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; SetCollectionViewLayoutAsync(class UIKit.UICollectionViewLayout layout, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.SetCollectionViewLayoutAsync(UIKit.UICollectionViewLayout,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetCollectionViewLayoutAsync : UIKit.UICollectionViewLayout * bool -&gt; System.Threading.Tasks.Task&lt;bool&gt;&#xA;override this.SetCollectionViewLayoutAsync : UIKit.UICollectionViewLayout * bool -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="uICollectionView.SetCollectionViewLayoutAsync (layout, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="layout" Type="UIKit.UICollectionViewLayout" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="layout">The new .</param>
        <param name="animated"> if the transition to the new layout should be animated.</param>
        <summary>Sets the layout used by this <see cref="T:UIKit.UICollectionView" />.</summary>
        <returns>
          <para>A task that represents the asynchronous SetCollectionViewLayout operation.   The value of the TResult parameter is a <see cref="T:UIKit.UICompletionHandler" />.</para>
        </returns>
        <remarks>
          <para copied="true">The SetCollectionViewLayoutAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Source">
      <MemberSignature Language="C#" Value="public UIKit.UICollectionViewSource Source { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UICollectionViewSource Source" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.Source" />
      <MemberSignature Language="F#" Value="member this.Source : UIKit.UICollectionViewSource with get, set" Usage="UIKit.UICollectionView.Source" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An optional property that can substitute for the <see cref="P:UIKit.UICollectionView.DataSource" /> and <see cref="P:UIKit.UICollectionView.Delegate" /> properties</summary>
        <value>The default value is <see langword="null" />.</value>
        <remarks>
          <para>Rather than specify separate classes and provide two objects for the  <see cref="P:UIKit.UICollectionView.DataSource" /> and <see cref="P:UIKit.UICollectionView.Delegate" /> properties, one can provide a single class of type <see cref="T:UIKit.UICollectionViewSource" /> (which itself is simply defined as ).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpringLoaded">
      <MemberSignature Language="C#" Value="public virtual bool SpringLoaded { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SpringLoaded" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.SpringLoaded" />
      <MemberSignature Language="F#" Value="member this.SpringLoaded : bool with get, set" Usage="UIKit.UICollectionView.SpringLoaded" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUISpringLoadedInteractionSupporting.SpringLoaded</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isSpringLoaded")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSpringLoaded:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs tool="CopiedFromAncestor">
        <summary>Gets or sets a Boolean value that controls whether the object participates in spring-loaded interactions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartInteractiveTransition">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewTransitionLayout StartInteractiveTransition (UIKit.UICollectionViewLayout newCollectionViewLayout, UIKit.UICollectionViewLayoutInteractiveTransitionCompletion completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UICollectionViewTransitionLayout StartInteractiveTransition(class UIKit.UICollectionViewLayout newCollectionViewLayout, class UIKit.UICollectionViewLayoutInteractiveTransitionCompletion completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.StartInteractiveTransition(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayoutInteractiveTransitionCompletion)" />
      <MemberSignature Language="F#" Value="abstract member StartInteractiveTransition : UIKit.UICollectionViewLayout * UIKit.UICollectionViewLayoutInteractiveTransitionCompletion -&gt; UIKit.UICollectionViewTransitionLayout&#xA;override this.StartInteractiveTransition : UIKit.UICollectionViewLayout * UIKit.UICollectionViewLayoutInteractiveTransitionCompletion -&gt; UIKit.UICollectionViewTransitionLayout" Usage="uICollectionView.StartInteractiveTransition (newCollectionViewLayout, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("startInteractiveTransitionToCollectionViewLayout:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewTransitionLayout</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newCollectionViewLayout" Type="UIKit.UICollectionViewLayout" />
        <Parameter Name="completion" Type="UIKit.UICollectionViewLayoutInteractiveTransitionCompletion">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDUICollectionViewLayoutInteractiveTransitionCompletion))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="newCollectionViewLayout">The new layout object for the collected views.</param>
        <param name="completion">A completion handler action to execute after all other operations are finished.</param>
        <summary>Changes the UICollectionView's layout using an interactive transition.</summary>
        <returns>A task that represents the asynchronous <see cref="M:UIKit.UICollectionView.StartInteractiveTransition(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayoutInteractiveTransitionCompletion)" /> operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartInteractiveTransitionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;UIKit.UICollectionViewTransitionResult&gt; StartInteractiveTransitionAsync (UIKit.UICollectionViewLayout newCollectionViewLayout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class UIKit.UICollectionViewTransitionResult&gt; StartInteractiveTransitionAsync(class UIKit.UICollectionViewLayout newCollectionViewLayout) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.StartInteractiveTransitionAsync(UIKit.UICollectionViewLayout)" />
      <MemberSignature Language="F#" Value="abstract member StartInteractiveTransitionAsync : UIKit.UICollectionViewLayout -&gt; System.Threading.Tasks.Task&lt;UIKit.UICollectionViewTransitionResult&gt;&#xA;override this.StartInteractiveTransitionAsync : UIKit.UICollectionViewLayout -&gt; System.Threading.Tasks.Task&lt;UIKit.UICollectionViewTransitionResult&gt;" Usage="uICollectionView.StartInteractiveTransitionAsync newCollectionViewLayout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;UIKit.UICollectionViewTransitionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newCollectionViewLayout" Type="UIKit.UICollectionViewLayout" />
      </Parameters>
      <Docs>
        <param name="newCollectionViewLayout">The new layout object for the collected views.</param>
        <summary>Changes the UICollectionView's layout using an interactive transition.</summary>
        <returns>
          <para>A task that represents the asynchronous <see cref="M:UIKit.UICollectionView.StartInteractiveTransition(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayoutInteractiveTransitionCompletion)" /> operation.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartInteractiveTransitionAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;UIKit.UICollectionViewTransitionResult&gt; StartInteractiveTransitionAsync (UIKit.UICollectionViewLayout newCollectionViewLayout, out UIKit.UICollectionViewTransitionLayout result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class UIKit.UICollectionViewTransitionResult&gt; StartInteractiveTransitionAsync(class UIKit.UICollectionViewLayout newCollectionViewLayout, [out] class UIKit.UICollectionViewTransitionLayout&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.StartInteractiveTransitionAsync(UIKit.UICollectionViewLayout,UIKit.UICollectionViewTransitionLayout@)" />
      <MemberSignature Language="F#" Value="abstract member StartInteractiveTransitionAsync : UIKit.UICollectionViewLayout *  -&gt; System.Threading.Tasks.Task&lt;UIKit.UICollectionViewTransitionResult&gt;&#xA;override this.StartInteractiveTransitionAsync : UIKit.UICollectionViewLayout *  -&gt; System.Threading.Tasks.Task&lt;UIKit.UICollectionViewTransitionResult&gt;" Usage="uICollectionView.StartInteractiveTransitionAsync (newCollectionViewLayout, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;UIKit.UICollectionViewTransitionResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newCollectionViewLayout" Type="UIKit.UICollectionViewLayout" />
        <Parameter Name="result" Type="UIKit.UICollectionViewTransitionLayout" RefType="out" />
      </Parameters>
      <Docs>
        <param name="newCollectionViewLayout">The new layout object for the collected views.</param>
        <param name="result">Action executed when the layout transition finishes.</param>
        <summary>Asynchronously starts an interactive transition to the new layout, with a reference to the result.</summary>
        <returns>A task that represents the asynchronous <see cref="M:UIKit.UICollectionView.StartInteractiveTransition(UIKit.UICollectionViewLayout,UIKit.UICollectionViewLayoutInteractiveTransitionCompletion)" /> operation.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateInteractiveMovement">
      <MemberSignature Language="C#" Value="public virtual void UpdateInteractiveMovement (CoreGraphics.CGPoint targetPosition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateInteractiveMovement(valuetype CoreGraphics.CGPoint targetPosition) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionView.UpdateInteractiveMovement(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member UpdateInteractiveMovement : CoreGraphics.CGPoint -&gt; unit&#xA;override this.UpdateInteractiveMovement : CoreGraphics.CGPoint -&gt; unit" Usage="uICollectionView.UpdateInteractiveMovement targetPosition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("updateInteractiveMovementTargetPosition:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="targetPosition" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="targetPosition">The new position of the moving cell.</param>
        <summary>Developers periodically call this method to set the position of the moving cell.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VisibleCells">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionViewCell[] VisibleCells { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UICollectionViewCell[] VisibleCells" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.VisibleCells" />
      <MemberSignature Language="F#" Value="member this.VisibleCells : UIKit.UICollectionViewCell[]" Usage="UIKit.UICollectionView.VisibleCells" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("visibleCells")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewCell[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of the currently-visible <see cref="T:UIKit.UICollectionViewCell" />.</summary>
        <value>An array containing zero or more <see cref="T:UIKit.UICollectionViewCell" />s.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDataSource">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDataSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDataSource" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.WeakDataSource" />
      <MemberSignature Language="F#" Value="member this.WeakDataSource : Foundation.NSObject with get, set" Usage="UIKit.UICollectionView.WeakDataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("dataSource")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDataSource:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("dataSource", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDataSource:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The data source that provides data for this UICollectionView.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionView.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="UIKit.UICollectionView.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
