<Type Name="NSLayoutDimension" FullName="UIKit.NSLayoutDimension">
  <TypeSignature Language="C#" Value="public class NSLayoutDimension : UIKit.NSLayoutAnchor&lt;UIKit.NSLayoutDimension&gt;" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit NSLayoutDimension extends UIKit.NSLayoutAnchor`1&lt;class UIKit.NSLayoutDimension&gt;" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.NSLayoutAnchor&lt;UIKit.NSLayoutDimension&gt;</BaseTypeName>
    <BaseTypeArguments>
      <BaseTypeArgument TypeParamName="AnchorType">UIKit.NSLayoutDimension</BaseTypeArgument>
    </BaseTypeArguments>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("NSLayoutDimension", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>An <see cref="T:UIKit.NSLayoutAnchor" /> whose methods create dimensional <see cref="T:UIKit.NSLayoutConstraint" /> objects.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/AppKit/Reference/NSLayoutDimension_ClassReference/index.html">Apple documentation for <c>NSLayoutDimension</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSLayoutDimension (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
              //
              // The NSObjectFlag merely allocates the object and registers the
              // C# class with the Objective-C runtime if necessary, but no actual
              // initXxx method is invoked, that is done later in the constructor
              //
              // This is taken from Xamarin's source code:
              //
              [Export ("initWithFrame:")]
              public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
              {
              // Invoke the init method now.
              var initWithFrame = new Selector ("initWithFrame:").Handle;
              if (IsDirectBinding)
              Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
              else
              Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
              }
            ]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected NSLayoutDimension (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintEqualTo (nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintEqualTo(valuetype System.nfloat constant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintEqualToConstant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="constant">An <see cref="T:System.nfloat" /> specifying the desired constant value.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is equal to that of the constraint of the <paramref name="constant" /> in logical pixels.</summary>
        <returns>
        </returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintEqualTo (UIKit.NSLayoutDimension anchor, nfloat multiplier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintEqualTo(class UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintEqualToAnchor:multiplier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be copied.</param>
        <param name="multiplier">The value by which to multiply the <paramref name="anchor" />.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is equal to that of the constraint of the <paramref name="anchor" /> multiplied by <paramref name="multiplier" />.</summary>
        <returns>
        </returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintEqualTo (UIKit.NSLayoutDimension anchor, nfloat multiplier, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintEqualTo(class UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintEqualToAnchor:multiplier:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.nfloat" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be copied.</param>
        <param name="multiplier">The value by which to multiply the <paramref name="anchor" />.</param>
        <param name="constant">The number of logical pixels to add to the value of <paramref name="anchor" />.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is equal to that of the constraint of the <paramref name="anchor" /> multiplied by <paramref name="multiplier" /> plus <paramref name="constant" /> pixels.</summary>
        <returns>
        </returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo (nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo(valuetype System.nfloat constant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintGreaterThanOrEqualToConstant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="constant">The number of logical pixels to add.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at least equal to that of the <paramref name="constant" />.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo (UIKit.NSLayoutDimension anchor, nfloat multiplier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo(class UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintGreaterThanOrEqualToAnchor:multiplier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be copied.</param>
        <param name="multiplier">To be added.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at least equal to that of the constraint of the <paramref name="anchor" /> multiplied by <paramref name="multiplier" />.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintGreaterThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo (UIKit.NSLayoutDimension anchor, nfloat multiplier, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintGreaterThanOrEqualTo(class UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintGreaterThanOrEqualToAnchor:multiplier:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.nfloat" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be copied.</param>
        <param name="multiplier">To be added.</param>
        <param name="constant">The number of logical pixels to add.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at least equal to that of the constraint of the <paramref name="anchor" /> multiplied by <paramref name="multiplier" /> and adding <paramref name="constant" /> logical pixels.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo (nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo(valuetype System.nfloat constant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintLessThanOrEqualToConstant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="constant">The number of logical pixels to add.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at at most <paramref name="constant" />.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo (UIKit.NSLayoutDimension anchor, nfloat multiplier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo(class UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintLessThanOrEqualToAnchor:multiplier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be copied.</param>
        <param name="multiplier">To be added.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at most equal to that of the constraint of the <paramref name="anchor" /> times <paramref name="multiplier" />.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConstraintLessThanOrEqualTo">
      <MemberSignature Language="C#" Value="public virtual UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo (UIKit.NSLayoutDimension anchor, nfloat multiplier, nfloat constant);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.NSLayoutConstraint ConstraintLessThanOrEqualTo(class UIKit.NSLayoutDimension anchor, valuetype System.nfloat multiplier, valuetype System.nfloat constant) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("constraintLessThanOrEqualToAnchor:multiplier:constant:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.NSLayoutConstraint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="anchor" Type="UIKit.NSLayoutDimension" />
        <Parameter Name="multiplier" Type="System.nfloat" />
        <Parameter Name="constant" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="anchor">The <see cref="T:UIKit.NSLayoutAnchor`1" /> whose constraint value should be copied.</param>
        <param name="multiplier">To be added.</param>
        <param name="constant">The number of logical pixels to add.</param>
        <summary>Creates a <see cref="T:UIKit.NSLayoutConstraint" /> whose value is at most equal to that of the constraint of the <paramref name="anchor" /> times the <paramref name="multiplier" /> plus <paramref name="constant" /> logical pixels.</summary>
        <returns>A new <see cref="T:UIKit.NSLayoutConstraint" />.</returns>
        <remarks>
          <para>As with other methods of this class, this method returns a new <see cref="T:UIKit.NSLayoutConstraint" /> but does not add and activate it to the current <see cref="T:UIKit.UIView" />.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
