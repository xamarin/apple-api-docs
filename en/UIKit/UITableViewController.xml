<Type Name="UITableViewController" FullName="UIKit.UITableViewController">
  <TypeSignature Language="C#" Value="public class UITableViewController : UIKit.UIViewController, IDisposable, UIKit.IUITableViewDataSource, UIKit.IUITableViewDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UITableViewController extends UIKit.UIViewController implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIScrollViewDelegate, class UIKit.IUITableViewDataSource, class UIKit.IUITableViewDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UITableViewController" />
  <TypeSignature Language="F#" Value="type UITableViewController = class&#xA;    inherit UIViewController&#xA;    interface IUITableViewDataSource&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUITableViewDelegate&#xA;    interface IUIScrollViewDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIViewController</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIScrollViewDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUITableViewDataSource</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUITableViewDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("UITableViewController", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Controller for a UITableView.</summary>
    <remarks>This class is a controller that manages a table view.</remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/Data/">Example_Data</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/MonoCatalog-MonoDevelop/">monocatalog</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/RecipesAndPrinting/">RecipesAndPrinting</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UITableViewController_Class/index.html">Apple documentation for <c>UITableViewController</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITableViewController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITableViewController (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UITableViewController : Foundation.NSCoder -&gt; UIKit.UITableViewController" Usage="new UIKit.UITableViewController coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITableViewController (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UITableViewController : Foundation.NSObjectFlag -&gt; UIKit.UITableViewController" Usage="new UIKit.UITableViewController t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UITableViewController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UITableViewController : nativeint -&gt; UIKit.UITableViewController" Usage="new UIKit.UITableViewController handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITableViewController (UIKit.UITableViewStyle withStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype UIKit.UITableViewStyle withStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.#ctor(UIKit.UITableViewStyle)" />
      <MemberSignature Language="F#" Value="new UIKit.UITableViewController : UIKit.UITableViewStyle -&gt; UIKit.UITableViewController" Usage="new UIKit.UITableViewController withStyle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithStyle:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="withStyle" Type="UIKit.UITableViewStyle" />
      </Parameters>
      <Docs>
        <param name="withStyle">To be added.</param>
        <summary>Creates a new T<see cref="T:UIKit.UITableViewController" /> with the specified <see cref="T:UIKit.UITableViewStyle" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITableViewController (string nibName, Foundation.NSBundle bundle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string nibName, class Foundation.NSBundle bundle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.#ctor(System.String,Foundation.NSBundle)" />
      <MemberSignature Language="F#" Value="new UIKit.UITableViewController : string * Foundation.NSBundle -&gt; UIKit.UITableViewController" Usage="new UIKit.UITableViewController (nibName, bundle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithNibName:bundle:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nibName" Type="System.String" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
      </Parameters>
      <Docs>
        <param name="nibName">
          <para>The NIB name, or null.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="bundle">
          <para>The bundle where the search for the NIB takes place, if you pass null, this searches for the NIB on the main bundle.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new <see cref="T:UIKit.UITableViewController" /> with the UI defined in the specified NIB.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessoryButtonTapped">
      <MemberSignature Language="C#" Value="public virtual void AccessoryButtonTapped (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AccessoryButtonTapped(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.AccessoryButtonTapped(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member AccessoryButtonTapped : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit&#xA;override this.AccessoryButtonTapped : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.AccessoryButtonTapped (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:accessoryButtonTappedForRowWithIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Indicates that the accessory button was pressed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessoryForRow">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITableViewCellAccessory AccessoryForRow (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UITableViewCellAccessory AccessoryForRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.AccessoryForRow(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member AccessoryForRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UITableViewCellAccessory&#xA;override this.AccessoryForRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UITableViewCellAccessory" Usage="uITableViewController.AccessoryForRow (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:accessoryTypeForRowWithIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITableViewCellAccessory</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Developers should not use this deprecated method. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanEditRow">
      <MemberSignature Language="C#" Value="public virtual bool CanEditRow (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanEditRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.CanEditRow(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member CanEditRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool&#xA;override this.CanEditRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool" Usage="uITableViewController.CanEditRow (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:canEditRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Whether the specified row can be edited.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanFocusRow">
      <MemberSignature Language="C#" Value="public virtual bool CanFocusRow (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanFocusRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.CanFocusRow(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member CanFocusRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool&#xA;override this.CanFocusRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool" Usage="uITableViewController.CanFocusRow (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:canFocusRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Whether the row at the specified <paramref name="indexPath" /> may receive focus.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanMoveRow">
      <MemberSignature Language="C#" Value="public virtual bool CanMoveRow (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanMoveRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.CanMoveRow(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member CanMoveRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool&#xA;override this.CanMoveRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool" Usage="uITableViewController.CanMoveRow (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:canMoveRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Whether the specified row can be moved.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanPerformAction">
      <MemberSignature Language="C#" Value="public virtual bool CanPerformAction (UIKit.UITableView tableView, ObjCRuntime.Selector action, Foundation.NSIndexPath indexPath, Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanPerformAction(class UIKit.UITableView tableView, class ObjCRuntime.Selector action, class Foundation.NSIndexPath indexPath, class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.CanPerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member CanPerformAction : UIKit.UITableView * ObjCRuntime.Selector * Foundation.NSIndexPath * Foundation.NSObject -&gt; bool&#xA;override this.CanPerformAction : UIKit.UITableView * ObjCRuntime.Selector * Foundation.NSIndexPath * Foundation.NSObject -&gt; bool" Usage="uITableViewController.CanPerformAction (tableView, action, indexPath, sender)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:canPerformAction:forRowAtIndexPath:withSender:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="action">To be added.</param>
        <param name="indexPath">To be added.</param>
        <param name="sender">To be added.</param>
        <summary>Whether the edit menu should have Copy and Paste commands for the specified row.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CellDisplayingEnded">
      <MemberSignature Language="C#" Value="public virtual void CellDisplayingEnded (UIKit.UITableView tableView, UIKit.UITableViewCell cell, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CellDisplayingEnded(class UIKit.UITableView tableView, class UIKit.UITableViewCell cell, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.CellDisplayingEnded(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member CellDisplayingEnded : UIKit.UITableView * UIKit.UITableViewCell * Foundation.NSIndexPath -&gt; unit&#xA;override this.CellDisplayingEnded : UIKit.UITableView * UIKit.UITableViewCell * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.CellDisplayingEnded (tableView, cell, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:didEndDisplayingCell:forRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="cell" Type="UIKit.UITableViewCell" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="cell">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Indicates that cell displayed has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UITableViewController.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UITableViewController.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearsSelectionOnViewWillAppear">
      <MemberSignature Language="C#" Value="public virtual bool ClearsSelectionOnViewWillAppear { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClearsSelectionOnViewWillAppear" />
      <MemberSignature Language="DocId" Value="P:UIKit.UITableViewController.ClearsSelectionOnViewWillAppear" />
      <MemberSignature Language="F#" Value="member this.ClearsSelectionOnViewWillAppear : bool with get, set" Usage="UIKit.UITableViewController.ClearsSelectionOnViewWillAppear" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("clearsSelectionOnViewWillAppear")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setClearsSelectionOnViewWillAppear:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the selection should be cleared when the table appears.</summary>
        <value>To be added.</value>
        <remarks>If <see langword="true" />, then the controller will clear the selection when the table first appears.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CommitEditingStyle">
      <MemberSignature Language="C#" Value="public virtual void CommitEditingStyle (UIKit.UITableView tableView, UIKit.UITableViewCellEditingStyle editingStyle, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CommitEditingStyle(class UIKit.UITableView tableView, valuetype UIKit.UITableViewCellEditingStyle editingStyle, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.CommitEditingStyle(UIKit.UITableView,UIKit.UITableViewCellEditingStyle,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member CommitEditingStyle : UIKit.UITableView * UIKit.UITableViewCellEditingStyle * Foundation.NSIndexPath -&gt; unit&#xA;override this.CommitEditingStyle : UIKit.UITableView * UIKit.UITableViewCellEditingStyle * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.CommitEditingStyle (tableView, editingStyle, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:commitEditingStyle:forRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="editingStyle" Type="UIKit.UITableViewCellEditingStyle" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="editingStyle">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Commits the insertion or deletion at the specified row.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomizeMoveTarget">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath CustomizeMoveTarget (UIKit.UITableView tableView, Foundation.NSIndexPath sourceIndexPath, Foundation.NSIndexPath proposedIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath CustomizeMoveTarget(class UIKit.UITableView tableView, class Foundation.NSIndexPath sourceIndexPath, class Foundation.NSIndexPath proposedIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.CustomizeMoveTarget(UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member CustomizeMoveTarget : UIKit.UITableView * Foundation.NSIndexPath * Foundation.NSIndexPath -&gt; Foundation.NSIndexPath&#xA;override this.CustomizeMoveTarget : UIKit.UITableView * Foundation.NSIndexPath * Foundation.NSIndexPath -&gt; Foundation.NSIndexPath" Usage="uITableViewController.CustomizeMoveTarget (tableView, sourceIndexPath, proposedIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:targetIndexPathForMoveFromRowAtIndexPath:toProposedIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="sourceIndexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="proposedIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="sourceIndexPath">To be added.</param>
        <param name="proposedIndexPath">To be added.</param>
        <summary>Can be used to override the user's choice of location.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidEndEditing">
      <MemberSignature Language="C#" Value="public virtual void DidEndEditing (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidEndEditing(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.DidEndEditing(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member DidEndEditing : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit&#xA;override this.DidEndEditing : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.DidEndEditing (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:didEndEditingRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Indicates that editing has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidUpdateFocus">
      <MemberSignature Language="C#" Value="public virtual void DidUpdateFocus (UIKit.UITableView tableView, UIKit.UITableViewFocusUpdateContext context, UIKit.UIFocusAnimationCoordinator coordinator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidUpdateFocus(class UIKit.UITableView tableView, class UIKit.UITableViewFocusUpdateContext context, class UIKit.UIFocusAnimationCoordinator coordinator) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.DidUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext,UIKit.UIFocusAnimationCoordinator)" />
      <MemberSignature Language="F#" Value="override this.DidUpdateFocus : UIKit.UITableView * UIKit.UITableViewFocusUpdateContext * UIKit.UIFocusAnimationCoordinator -&gt; unit" Usage="uITableViewController.DidUpdateFocus (tableView, context, coordinator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:didUpdateFocusInContext:withAnimationCoordinator:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="context" Type="UIKit.UITableViewFocusUpdateContext" />
        <Parameter Name="coordinator" Type="UIKit.UIFocusAnimationCoordinator" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="context">A <see cref="T:UIKit.UITableViewFocusUpdateContext" /> object containing metadata.</param>
        <param name="coordinator">A <see cref="T:UIKit.UIFocusAnimationCoordinator" /> object containing metadata.</param>
        <summary>Indicates that the focus changed as detailed in the <paramref name="context" />.</summary>
        <remarks>
          <para>The values of <see cref="P:UIKit.UITableViewFocusUpdateContext.PreviouslyFocusedIndexPath" /> and <see cref="P:UIKit.UITableViewFocusUpdateContext.NextFocusedIndexPath" /> may be <see langword="null" /> if focus was previously not within, or just departed, the <paramref name="tableView" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EditActionsForRow">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITableViewRowAction[] EditActionsForRow (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITableViewRowAction[] EditActionsForRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.EditActionsForRow(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member EditActionsForRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UITableViewRowAction[]&#xA;override this.EditActionsForRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UITableViewRowAction[]" Usage="uITableViewController.EditActionsForRow (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:editActionsForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITableViewRowAction[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Returns an array of row actions to display after the user swipes the row in the <paramref name="tableView" /> table view that is identified by <paramref name="indexPath" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingStyleForRow">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITableViewCellEditingStyle EditingStyleForRow (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UITableViewCellEditingStyle EditingStyleForRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.EditingStyleForRow(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member EditingStyleForRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UITableViewCellEditingStyle&#xA;override this.EditingStyleForRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UITableViewCellEditingStyle" Usage="uITableViewController.EditingStyleForRow (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:editingStyleForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITableViewCellEditingStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The UITableViewCellEditingStyle for the specified row.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EstimatedHeight">
      <MemberSignature Language="C#" Value="public virtual nfloat EstimatedHeight (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat EstimatedHeight(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.EstimatedHeight(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member EstimatedHeight : UIKit.UITableView * Foundation.NSIndexPath -&gt; nfloat&#xA;override this.EstimatedHeight : UIKit.UITableView * Foundation.NSIndexPath -&gt; nfloat" Usage="uITableViewController.EstimatedHeight (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:estimatedHeightForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Estimates the height of a row, using minimal computation. Called frequently.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EstimatedHeightForFooter">
      <MemberSignature Language="C#" Value="public virtual nfloat EstimatedHeightForFooter (UIKit.UITableView tableView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat EstimatedHeightForFooter(class UIKit.UITableView tableView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.EstimatedHeightForFooter(UIKit.UITableView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member EstimatedHeightForFooter : UIKit.UITableView * nint -&gt; nfloat&#xA;override this.EstimatedHeightForFooter : UIKit.UITableView * nint -&gt; nfloat" Usage="uITableViewController.EstimatedHeightForFooter (tableView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:estimatedHeightForFooterInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>Estimates the height for footer views, using minimal computation. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EstimatedHeightForHeader">
      <MemberSignature Language="C#" Value="public virtual nfloat EstimatedHeightForHeader (UIKit.UITableView tableView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat EstimatedHeightForHeader(class UIKit.UITableView tableView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.EstimatedHeightForHeader(UIKit.UITableView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member EstimatedHeightForHeader : UIKit.UITableView * nint -&gt; nfloat&#xA;override this.EstimatedHeightForHeader : UIKit.UITableView * nint -&gt; nfloat" Usage="uITableViewController.EstimatedHeightForHeader (tableView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:estimatedHeightForHeaderInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>Estimates the height for header views, using minimal computation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FooterViewDisplayingEnded">
      <MemberSignature Language="C#" Value="public virtual void FooterViewDisplayingEnded (UIKit.UITableView tableView, UIKit.UIView footerView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FooterViewDisplayingEnded(class UIKit.UITableView tableView, class UIKit.UIView footerView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.FooterViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member FooterViewDisplayingEnded : UIKit.UITableView * UIKit.UIView * nint -&gt; unit&#xA;override this.FooterViewDisplayingEnded : UIKit.UITableView * UIKit.UIView * nint -&gt; unit" Usage="uITableViewController.FooterViewDisplayingEnded (tableView, footerView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:didEndDisplayingFooterView:forSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="footerView" Type="UIKit.UIView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="footerView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>Indicates that the display of footer views has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCell">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITableViewCell GetCell (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITableViewCell GetCell(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.GetCell(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetCell : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UITableViewCell&#xA;override this.GetCell : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UITableViewCell" Usage="uITableViewController.GetCell (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUITableViewDataSource.GetCell(UIKit.UITableView,Foundation.NSIndexPath)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:cellForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITableViewCell</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Retrieves the UITableViewCell at the specified index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeightForFooter">
      <MemberSignature Language="C#" Value="public virtual nfloat GetHeightForFooter (UIKit.UITableView tableView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetHeightForFooter(class UIKit.UITableView tableView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.GetHeightForFooter(UIKit.UITableView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetHeightForFooter : UIKit.UITableView * nint -&gt; nfloat&#xA;override this.GetHeightForFooter : UIKit.UITableView * nint -&gt; nfloat" Usage="uITableViewController.GetHeightForFooter (tableView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:heightForFooterInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>The height for the specified footer view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeightForHeader">
      <MemberSignature Language="C#" Value="public virtual nfloat GetHeightForHeader (UIKit.UITableView tableView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetHeightForHeader(class UIKit.UITableView tableView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.GetHeightForHeader(UIKit.UITableView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetHeightForHeader : UIKit.UITableView * nint -&gt; nfloat&#xA;override this.GetHeightForHeader : UIKit.UITableView * nint -&gt; nfloat" Usage="uITableViewController.GetHeightForHeader (tableView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:heightForHeaderInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>The height for the specified header view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHeightForRow">
      <MemberSignature Language="C#" Value="public virtual nfloat GetHeightForRow (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nfloat GetHeightForRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.GetHeightForRow(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetHeightForRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; nfloat&#xA;override this.GetHeightForRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; nfloat" Usage="uITableViewController.GetHeightForRow (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:heightForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The height for the specified row.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexPathForPreferredFocusedView">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath GetIndexPathForPreferredFocusedView (UIKit.UITableView tableView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath GetIndexPathForPreferredFocusedView(class UIKit.UITableView tableView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.GetIndexPathForPreferredFocusedView(UIKit.UITableView)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexPathForPreferredFocusedView : UIKit.UITableView -&gt; Foundation.NSIndexPath&#xA;override this.GetIndexPathForPreferredFocusedView : UIKit.UITableView -&gt; Foundation.NSIndexPath" Usage="uITableViewController.GetIndexPathForPreferredFocusedView tableView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("indexPathForPreferredFocusedViewInTableView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <summary>The index path of the table's preferred focus view.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetLeadingSwipeActionsConfiguration">
      <MemberSignature Language="C#" Value="public virtual UIKit.UISwipeActionsConfiguration GetLeadingSwipeActionsConfiguration (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UISwipeActionsConfiguration GetLeadingSwipeActionsConfiguration(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.GetLeadingSwipeActionsConfiguration(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetLeadingSwipeActionsConfiguration : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UISwipeActionsConfiguration&#xA;override this.GetLeadingSwipeActionsConfiguration : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UISwipeActionsConfiguration" Usage="uITableViewController.GetLeadingSwipeActionsConfiguration (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:leadingSwipeActionsConfigurationForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UISwipeActionsConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">The table view for which to get the configuration.</param>
        <param name="indexPath">The index path to the row for which to get the configuration.</param>
        <summary>Returns the swipe action configuration for swipes that begin from the leading edge.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTrailingSwipeActionsConfiguration">
      <MemberSignature Language="C#" Value="public virtual UIKit.UISwipeActionsConfiguration GetTrailingSwipeActionsConfiguration (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UISwipeActionsConfiguration GetTrailingSwipeActionsConfiguration(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.GetTrailingSwipeActionsConfiguration(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member GetTrailingSwipeActionsConfiguration : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UISwipeActionsConfiguration&#xA;override this.GetTrailingSwipeActionsConfiguration : UIKit.UITableView * Foundation.NSIndexPath -&gt; UIKit.UISwipeActionsConfiguration" Usage="uITableViewController.GetTrailingSwipeActionsConfiguration (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:trailingSwipeActionsConfigurationForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UISwipeActionsConfiguration</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">The table view for which to get the configuration.</param>
        <param name="indexPath">The index path to the row for which to get the configuration.</param>
        <summary>Returns the swipe action configuration for swipes that begin from the trailing edge.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForFooter">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView GetViewForFooter (UIKit.UITableView tableView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIView GetViewForFooter(class UIKit.UITableView tableView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.GetViewForFooter(UIKit.UITableView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetViewForFooter : UIKit.UITableView * nint -&gt; UIKit.UIView&#xA;override this.GetViewForFooter : UIKit.UITableView * nint -&gt; UIKit.UIView" Usage="uITableViewController.GetViewForFooter (tableView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:viewForFooterInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>The UIView used for the footer.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewForHeader">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView GetViewForHeader (UIKit.UITableView tableView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIView GetViewForHeader(class UIKit.UITableView tableView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.GetViewForHeader(UIKit.UITableView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member GetViewForHeader : UIKit.UITableView * nint -&gt; UIKit.UIView&#xA;override this.GetViewForHeader : UIKit.UITableView * nint -&gt; UIKit.UIView" Usage="uITableViewController.GetViewForHeader (tableView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:viewForHeaderInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>The UIView used for the header.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HeaderViewDisplayingEnded">
      <MemberSignature Language="C#" Value="public virtual void HeaderViewDisplayingEnded (UIKit.UITableView tableView, UIKit.UIView headerView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void HeaderViewDisplayingEnded(class UIKit.UITableView tableView, class UIKit.UIView headerView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.HeaderViewDisplayingEnded(UIKit.UITableView,UIKit.UIView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member HeaderViewDisplayingEnded : UIKit.UITableView * UIKit.UIView * nint -&gt; unit&#xA;override this.HeaderViewDisplayingEnded : UIKit.UITableView * UIKit.UIView * nint -&gt; unit" Usage="uITableViewController.HeaderViewDisplayingEnded (tableView, headerView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:didEndDisplayingHeaderView:forSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="headerView" Type="UIKit.UIView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="headerView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>Indicates that the display of header views has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndentationLevel">
      <MemberSignature Language="C#" Value="public virtual nint IndentationLevel (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint IndentationLevel(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.IndentationLevel(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member IndentationLevel : UIKit.UITableView * Foundation.NSIndexPath -&gt; nint&#xA;override this.IndentationLevel : UIKit.UITableView * Foundation.NSIndexPath -&gt; nint" Usage="uITableViewController.IndentationLevel (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:indentationLevelForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The indentation level for the specified row.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MoveRow">
      <MemberSignature Language="C#" Value="public virtual void MoveRow (UIKit.UITableView tableView, Foundation.NSIndexPath sourceIndexPath, Foundation.NSIndexPath destinationIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MoveRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath sourceIndexPath, class Foundation.NSIndexPath destinationIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.MoveRow(UIKit.UITableView,Foundation.NSIndexPath,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member MoveRow : UIKit.UITableView * Foundation.NSIndexPath * Foundation.NSIndexPath -&gt; unit&#xA;override this.MoveRow : UIKit.UITableView * Foundation.NSIndexPath * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.MoveRow (tableView, sourceIndexPath, destinationIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:moveRowAtIndexPath:toIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="sourceIndexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="destinationIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="sourceIndexPath">To be added.</param>
        <param name="destinationIndexPath">To be added.</param>
        <summary>Moves the specified row to the specified index.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NumberOfSections">
      <MemberSignature Language="C#" Value="public virtual nint NumberOfSections (UIKit.UITableView tableView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint NumberOfSections(class UIKit.UITableView tableView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.NumberOfSections(UIKit.UITableView)" />
      <MemberSignature Language="F#" Value="abstract member NumberOfSections : UIKit.UITableView -&gt; nint&#xA;override this.NumberOfSections : UIKit.UITableView -&gt; nint" Usage="uITableViewController.NumberOfSections tableView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("numberOfSectionsInTableView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <summary>The number of section in the UITableView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformAction">
      <MemberSignature Language="C#" Value="public virtual void PerformAction (UIKit.UITableView tableView, ObjCRuntime.Selector action, Foundation.NSIndexPath indexPath, Foundation.NSObject sender);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformAction(class UIKit.UITableView tableView, class ObjCRuntime.Selector action, class Foundation.NSIndexPath indexPath, class Foundation.NSObject sender) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.PerformAction(UIKit.UITableView,ObjCRuntime.Selector,Foundation.NSIndexPath,Foundation.NSObject)" />
      <MemberSignature Language="F#" Value="abstract member PerformAction : UIKit.UITableView * ObjCRuntime.Selector * Foundation.NSIndexPath * Foundation.NSObject -&gt; unit&#xA;override this.PerformAction : UIKit.UITableView * ObjCRuntime.Selector * Foundation.NSIndexPath * Foundation.NSObject -&gt; unit" Usage="uITableViewController.PerformAction (tableView, action, indexPath, sender)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:performAction:forRowAtIndexPath:withSender:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="action" Type="ObjCRuntime.Selector" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="sender" Type="Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="action">To be added.</param>
        <param name="indexPath">To be added.</param>
        <param name="sender">To be added.</param>
        <summary>Performs a copy or paste on the content of the specified row.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RefreshControl">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIRefreshControl RefreshControl { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIRefreshControl RefreshControl" />
      <MemberSignature Language="DocId" Value="P:UIKit.UITableViewController.RefreshControl" />
      <MemberSignature Language="F#" Value="member this.RefreshControl : UIKit.UIRefreshControl with get, set" Usage="UIKit.UITableViewController.RefreshControl" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("refreshControl", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setRefreshControl:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIRefreshControl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="T:UIKit.UIRefreshControl" /> used to update the table contents.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowDeselected">
      <MemberSignature Language="C#" Value="public virtual void RowDeselected (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RowDeselected(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.RowDeselected(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member RowDeselected : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit&#xA;override this.RowDeselected : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.RowDeselected (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:didDeselectRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Indicates that the specified row has been deselected.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowHighlighted">
      <MemberSignature Language="C#" Value="public virtual void RowHighlighted (UIKit.UITableView tableView, Foundation.NSIndexPath rowIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RowHighlighted(class UIKit.UITableView tableView, class Foundation.NSIndexPath rowIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.RowHighlighted(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member RowHighlighted : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit&#xA;override this.RowHighlighted : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.RowHighlighted (tableView, rowIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:didHighlightRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="rowIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="rowIndexPath">To be added.</param>
        <summary>Indicates that the specified row has been highlighted.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowSelected">
      <MemberSignature Language="C#" Value="public virtual void RowSelected (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RowSelected(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.RowSelected(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member RowSelected : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit&#xA;override this.RowSelected : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.RowSelected (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:didSelectRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Indicates that the specified row has been selected.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowsInSection">
      <MemberSignature Language="C#" Value="public virtual nint RowsInSection (UIKit.UITableView tableView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint RowsInSection(class UIKit.UITableView tableView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.RowsInSection(UIKit.UITableView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member RowsInSection : UIKit.UITableView * nint -&gt; nint&#xA;override this.RowsInSection : UIKit.UITableView * nint -&gt; nint" Usage="uITableViewController.RowsInSection (tableView, section)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:UIKit.IUITableViewDataSource.RowsInSection(UIKit.UITableView,System.nint)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:numberOfRowsInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>The number of rows in the specified section.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowUnhighlighted">
      <MemberSignature Language="C#" Value="public virtual void RowUnhighlighted (UIKit.UITableView tableView, Foundation.NSIndexPath rowIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RowUnhighlighted(class UIKit.UITableView tableView, class Foundation.NSIndexPath rowIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.RowUnhighlighted(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member RowUnhighlighted : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit&#xA;override this.RowUnhighlighted : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.RowUnhighlighted (tableView, rowIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:didUnhighlightRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="rowIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="rowIndexPath">To be added.</param>
        <summary>Indicates that the specified row has been unhighlighted.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SectionFor">
      <MemberSignature Language="C#" Value="public virtual nint SectionFor (UIKit.UITableView tableView, string title, nint atIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.nint SectionFor(class UIKit.UITableView tableView, string title, valuetype System.nint atIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.SectionFor(UIKit.UITableView,System.String,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member SectionFor : UIKit.UITableView * string * nint -&gt; nint&#xA;override this.SectionFor : UIKit.UITableView * string * nint -&gt; nint" Usage="uITableViewController.SectionFor (tableView, title, atIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:sectionForSectionIndexTitle:atIndex:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="title" Type="System.String" />
        <Parameter Name="atIndex" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="title">To be added.</param>
        <param name="atIndex">To be added.</param>
        <summary>The index of the section for the specified title and section title index.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SectionIndexTitles">
      <MemberSignature Language="C#" Value="public virtual string[] SectionIndexTitles (UIKit.UITableView tableView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] SectionIndexTitles(class UIKit.UITableView tableView) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.SectionIndexTitles(UIKit.UITableView)" />
      <MemberSignature Language="F#" Value="abstract member SectionIndexTitles : UIKit.UITableView -&gt; string[]&#xA;override this.SectionIndexTitles : UIKit.UITableView -&gt; string[]" Usage="uITableViewController.SectionIndexTitles tableView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("sectionIndexTitlesForTableView:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <summary>The section title indices for the UITableView.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldHighlightRow">
      <MemberSignature Language="C#" Value="public virtual bool ShouldHighlightRow (UIKit.UITableView tableView, Foundation.NSIndexPath rowIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldHighlightRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath rowIndexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.ShouldHighlightRow(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ShouldHighlightRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool&#xA;override this.ShouldHighlightRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool" Usage="uITableViewController.ShouldHighlightRow (tableView, rowIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:shouldHighlightRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="rowIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="rowIndexPath">To be added.</param>
        <summary>Whether the specified row should be highlighted.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldIndentWhileEditing">
      <MemberSignature Language="C#" Value="public virtual bool ShouldIndentWhileEditing (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldIndentWhileEditing(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.ShouldIndentWhileEditing(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ShouldIndentWhileEditing : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool&#xA;override this.ShouldIndentWhileEditing : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool" Usage="uITableViewController.ShouldIndentWhileEditing (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:shouldIndentWhileEditingRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Whether the specified row should be indented during an editing operation.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldShowMenu">
      <MemberSignature Language="C#" Value="public virtual bool ShouldShowMenu (UIKit.UITableView tableView, Foundation.NSIndexPath rowAtindexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldShowMenu(class UIKit.UITableView tableView, class Foundation.NSIndexPath rowAtindexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.ShouldShowMenu(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member ShouldShowMenu : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool&#xA;override this.ShouldShowMenu : UIKit.UITableView * Foundation.NSIndexPath -&gt; bool" Usage="uITableViewController.ShouldShowMenu (tableView, rowAtindexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:shouldShowMenuForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="rowAtindexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="rowAtindexPath">To be added.</param>
        <summary>Whether the editing menu should be shown for the specified row.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldSpringLoadRow">
      <MemberSignature Language="C#" Value="public virtual bool ShouldSpringLoadRow (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath, UIKit.IUISpringLoadedInteractionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldSpringLoadRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath, class UIKit.IUISpringLoadedInteractionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.ShouldSpringLoadRow(UIKit.UITableView,Foundation.NSIndexPath,UIKit.IUISpringLoadedInteractionContext)" />
      <MemberSignature Language="F#" Value="abstract member ShouldSpringLoadRow : UIKit.UITableView * Foundation.NSIndexPath * UIKit.IUISpringLoadedInteractionContext -&gt; bool&#xA;override this.ShouldSpringLoadRow : UIKit.UITableView * Foundation.NSIndexPath * UIKit.IUISpringLoadedInteractionContext -&gt; bool" Usage="uITableViewController.ShouldSpringLoadRow (tableView, indexPath, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:shouldSpringLoadRowAtIndexPath:withContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="context" Type="UIKit.IUISpringLoadedInteractionContext" />
      </Parameters>
      <Docs>
        <param name="tableView">The table view to query.</param>
        <param name="indexPath">The index path to the row to query.</param>
        <param name="context">The spring loading context to query.</param>
        <summary>Method that is called to indicate whether the identified row should springload in the specified context.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldUpdateFocus">
      <MemberSignature Language="C#" Value="public virtual bool ShouldUpdateFocus (UIKit.UITableView tableView, UIKit.UITableViewFocusUpdateContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldUpdateFocus(class UIKit.UITableView tableView, class UIKit.UITableViewFocusUpdateContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.ShouldUpdateFocus(UIKit.UITableView,UIKit.UITableViewFocusUpdateContext)" />
      <MemberSignature Language="F#" Value="override this.ShouldUpdateFocus : UIKit.UITableView * UIKit.UITableViewFocusUpdateContext -&gt; bool" Usage="uITableViewController.ShouldUpdateFocus (tableView, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:shouldUpdateFocusInContext:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="context" Type="UIKit.UITableViewFocusUpdateContext" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="context">To be added.</param>
        <summary>Called prior to the <paramref name="tableView" /> either losing or receiving focus. If either focus environment returns <see langword="false" />, the focus update is canceled.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TableView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITableView TableView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITableView TableView" />
      <MemberSignature Language="DocId" Value="P:UIKit.UITableViewController.TableView" />
      <MemberSignature Language="F#" Value="member this.TableView : UIKit.UITableView with get, set" Usage="UIKit.UITableViewController.TableView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("tableView", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setTableView:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITableView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A reference to the <see cref="T:UIKit.UITableView" /> that is managed by the controller.</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleForDeleteConfirmation">
      <MemberSignature Language="C#" Value="public virtual string TitleForDeleteConfirmation (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TitleForDeleteConfirmation(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.TitleForDeleteConfirmation(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member TitleForDeleteConfirmation : UIKit.UITableView * Foundation.NSIndexPath -&gt; string&#xA;override this.TitleForDeleteConfirmation : UIKit.UITableView * Foundation.NSIndexPath -&gt; string" Usage="uITableViewController.TitleForDeleteConfirmation (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:titleForDeleteConfirmationButtonForRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>The title for the delete-confirmation button.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleForFooter">
      <MemberSignature Language="C#" Value="public virtual string TitleForFooter (UIKit.UITableView tableView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TitleForFooter(class UIKit.UITableView tableView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.TitleForFooter(UIKit.UITableView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member TitleForFooter : UIKit.UITableView * nint -&gt; string&#xA;override this.TitleForFooter : UIKit.UITableView * nint -&gt; string" Usage="uITableViewController.TitleForFooter (tableView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:titleForFooterInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>The title for the footer view in the specified section.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TitleForHeader">
      <MemberSignature Language="C#" Value="public virtual string TitleForHeader (UIKit.UITableView tableView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string TitleForHeader(class UIKit.UITableView tableView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.TitleForHeader(UIKit.UITableView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member TitleForHeader : UIKit.UITableView * nint -&gt; string&#xA;override this.TitleForHeader : UIKit.UITableView * nint -&gt; string" Usage="uITableViewController.TitleForHeader (tableView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:titleForHeaderInSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>The title for the header view in the specified section.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillBeginEditing">
      <MemberSignature Language="C#" Value="public virtual void WillBeginEditing (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillBeginEditing(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.WillBeginEditing(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member WillBeginEditing : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit&#xA;override this.WillBeginEditing : UIKit.UITableView * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.WillBeginEditing (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:willBeginEditingRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Indicates that editing is about to begin.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDeselectRow">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath WillDeselectRow (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath WillDeselectRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.WillDeselectRow(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member WillDeselectRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; Foundation.NSIndexPath&#xA;override this.WillDeselectRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; Foundation.NSIndexPath" Usage="uITableViewController.WillDeselectRow (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:willDeselectRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Indicates that a row is about to be deselected.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDisplay">
      <MemberSignature Language="C#" Value="public virtual void WillDisplay (UIKit.UITableView tableView, UIKit.UITableViewCell cell, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDisplay(class UIKit.UITableView tableView, class UIKit.UITableViewCell cell, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.WillDisplay(UIKit.UITableView,UIKit.UITableViewCell,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member WillDisplay : UIKit.UITableView * UIKit.UITableViewCell * Foundation.NSIndexPath -&gt; unit&#xA;override this.WillDisplay : UIKit.UITableView * UIKit.UITableViewCell * Foundation.NSIndexPath -&gt; unit" Usage="uITableViewController.WillDisplay (tableView, cell, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:willDisplayCell:forRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="cell" Type="UIKit.UITableViewCell" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="cell">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Indicates that a cell is about to be displayed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDisplayFooterView">
      <MemberSignature Language="C#" Value="public virtual void WillDisplayFooterView (UIKit.UITableView tableView, UIKit.UIView footerView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDisplayFooterView(class UIKit.UITableView tableView, class UIKit.UIView footerView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.WillDisplayFooterView(UIKit.UITableView,UIKit.UIView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member WillDisplayFooterView : UIKit.UITableView * UIKit.UIView * nint -&gt; unit&#xA;override this.WillDisplayFooterView : UIKit.UITableView * UIKit.UIView * nint -&gt; unit" Usage="uITableViewController.WillDisplayFooterView (tableView, footerView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:willDisplayFooterView:forSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="footerView" Type="UIKit.UIView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="footerView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>Indicates that a footer view is about to be displayed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillDisplayHeaderView">
      <MemberSignature Language="C#" Value="public virtual void WillDisplayHeaderView (UIKit.UITableView tableView, UIKit.UIView headerView, nint section);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillDisplayHeaderView(class UIKit.UITableView tableView, class UIKit.UIView headerView, valuetype System.nint section) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.WillDisplayHeaderView(UIKit.UITableView,UIKit.UIView,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member WillDisplayHeaderView : UIKit.UITableView * UIKit.UIView * nint -&gt; unit&#xA;override this.WillDisplayHeaderView : UIKit.UITableView * UIKit.UIView * nint -&gt; unit" Usage="uITableViewController.WillDisplayHeaderView (tableView, headerView, section)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:willDisplayHeaderView:forSection:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="headerView" Type="UIKit.UIView" />
        <Parameter Name="section" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="headerView">To be added.</param>
        <param name="section">To be added.</param>
        <summary>Indicates that a header view is about to be displayed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillSelectRow">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath WillSelectRow (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSIndexPath WillSelectRow(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UITableViewController.WillSelectRow(UIKit.UITableView,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="abstract member WillSelectRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; Foundation.NSIndexPath&#xA;override this.WillSelectRow : UIKit.UITableView * Foundation.NSIndexPath -&gt; Foundation.NSIndexPath" Usage="uITableViewController.WillSelectRow (tableView, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:willSelectRowAtIndexPath:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Indicates that a row is about to be selected.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
