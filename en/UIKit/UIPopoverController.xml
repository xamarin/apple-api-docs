<Type Name="UIPopoverController" FullName="UIKit.UIPopoverController">
  <TypeSignature Language="C#" Value="public class UIPopoverController : Foundation.NSObject, IDisposable, UIKit.IUIAppearanceContainer" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIPopoverController extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIAppearanceContainer" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIPopoverController" />
  <TypeSignature Language="F#" Value="type UIPopoverController = class&#xA;    inherit NSObject&#xA;    interface IUIAppearanceContainer&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIAppearanceContainer</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIPopoverController", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Manages a popover on the screen.</summary>
    <remarks>To be added.</remarks>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/Popovers/">Popovers</related>
    <related type="sample" href="https://github.com/xamarin/ios-samples/tree/master/CoreAnimation/">Example_CoreAnimation</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIPopoverController_class/index.html">Apple documentation for <c>UIPopoverController</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIPopoverController (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverController.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPopoverController : Foundation.NSObjectFlag -&gt; UIKit.UIPopoverController" Usage="new UIKit.UIPopoverController t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIPopoverController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverController.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPopoverController : nativeint -&gt; UIKit.UIPopoverController" Usage="new UIKit.UIPopoverController handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIPopoverController (UIKit.UIViewController viewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class UIKit.UIViewController viewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverController.#ctor(UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="new UIKit.UIPopoverController : UIKit.UIViewController -&gt; UIKit.UIPopoverController" Usage="new UIKit.UIPopoverController viewController" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithContentViewController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="viewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="viewController">A view controller that is responsible for the content of the popover.</param>
        <summary>This constructor is used to create a popover controller that will be used to display the contents of <paramref name="viewController" />.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BackgroundColor">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIColor BackgroundColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIColor BackgroundColor" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.BackgroundColor" />
      <MemberSignature Language="F#" Value="member this.BackgroundColor : UIKit.UIColor with get, set" Usage="UIKit.UIPopoverController.BackgroundColor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("backgroundColor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setBackgroundColor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("backgroundColor", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setBackgroundColor:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIColor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The color of the background.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIPopoverController.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentViewController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController ContentViewController { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIViewController ContentViewController" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.ContentViewController" />
      <MemberSignature Language="F#" Value="member this.ContentViewController : UIKit.UIViewController with get, set" Usage="UIKit.UIPopoverController.ContentViewController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("contentViewController")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setContentViewController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("contentViewController", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setContentViewController:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A view controller that is responsible for the content of the popover.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public UIKit.IUIPopoverControllerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUIPopoverControllerDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UIKit.IUIPopoverControllerDelegate with get, set" Usage="UIKit.UIPopoverController.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIPopoverControllerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UIKit.IUIPopoverControllerDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UIKit.IUIPopoverControllerDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDismiss">
      <MemberSignature Language="C#" Value="public event EventHandler DidDismiss;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DidDismiss" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIPopoverController.DidDismiss" />
      <MemberSignature Language="F#" Value="member this.DidDismiss : EventHandler " Usage="member this.DidDismiss : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dismiss">
      <MemberSignature Language="C#" Value="public virtual void Dismiss (bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dismiss(bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverController.Dismiss(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dismiss : bool -&gt; unit&#xA;override this.Dismiss : bool -&gt; unit" Usage="uIPopoverController.Dismiss animated" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("dismissPopoverAnimated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="animated">If <see langword="true" /> then the dismissal will be animated.</param>
        <summary>This method will dismiss the popover programatically.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverController.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="uIPopoverController.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIPopoverController object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIPopoverController class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UIPopoverController ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PassthroughViews">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView[] PassthroughViews { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIView[] PassthroughViews" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.PassthroughViews" />
      <MemberSignature Language="F#" Value="member this.PassthroughViews : UIKit.UIView[] with get, set" Usage="UIKit.UIPopoverController.PassthroughViews" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("passthroughViews")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setPassthroughViews:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("passthroughViews", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPassthroughViews:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is a list of views that may handle taps outside of the popover controller.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopoverArrowDirection">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIPopoverArrowDirection PopoverArrowDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIPopoverArrowDirection PopoverArrowDirection" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.PopoverArrowDirection" />
      <MemberSignature Language="F#" Value="member this.PopoverArrowDirection : UIKit.UIPopoverArrowDirection" Usage="UIKit.UIPopoverController.PopoverArrowDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("popoverArrowDirection")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIPopoverArrowDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This propery holds the direction of the popover's arrow.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PopoverBackgroundViewType">
      <MemberSignature Language="C#" Value="public virtual Type PopoverBackgroundViewType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type PopoverBackgroundViewType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.PopoverBackgroundViewType" />
      <MemberSignature Language="F#" Value="member this.PopoverBackgroundViewType : Type with get, set" Usage="UIKit.UIPopoverController.PopoverBackgroundViewType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>This is the type that is used to display the background of the popover.</summary>
        <value>
        </value>
        <remarks>The popover controller will use an instance of this type in order to draw the background of the popover.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopoverContentSize">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize PopoverContentSize { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize PopoverContentSize" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.PopoverContentSize" />
      <MemberSignature Language="F#" Value="member this.PopoverContentSize : CoreGraphics.CGSize with get, set" Usage="UIKit.UIPopoverController.PopoverContentSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("popoverContentSize")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPopoverContentSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The size of the view that is used by the popover.</summary>
        <value>
        </value>
        <remarks>If this value is changed, then the width of the new value must be between 320 points and 600 points.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopoverLayoutMargins">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIEdgeInsets PopoverLayoutMargins { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIEdgeInsets PopoverLayoutMargins" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.PopoverLayoutMargins" />
      <MemberSignature Language="F#" Value="member this.PopoverLayoutMargins : UIKit.UIEdgeInsets with get, set" Usage="UIKit.UIPopoverController.PopoverLayoutMargins" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("popoverLayoutMargins")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPopoverLayoutMargins:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The margins around the portion of the screen where the popover will be displayed.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopoverVisible">
      <MemberSignature Language="C#" Value="public virtual bool PopoverVisible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool PopoverVisible" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.PopoverVisible" />
      <MemberSignature Language="F#" Value="member this.PopoverVisible : bool" Usage="UIKit.UIPopoverController.PopoverVisible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isPopoverVisible")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>If <see langword="true" />, then the popover is present and visible.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromBarButtonItem">
      <MemberSignature Language="C#" Value="public virtual void PresentFromBarButtonItem (UIKit.UIBarButtonItem item, UIKit.UIPopoverArrowDirection arrowDirections, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentFromBarButtonItem(class UIKit.UIBarButtonItem item, valuetype UIKit.UIPopoverArrowDirection arrowDirections, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverController.PresentFromBarButtonItem(UIKit.UIBarButtonItem,UIKit.UIPopoverArrowDirection,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member PresentFromBarButtonItem : UIKit.UIBarButtonItem * UIKit.UIPopoverArrowDirection * bool -&gt; unit&#xA;override this.PresentFromBarButtonItem : UIKit.UIBarButtonItem * UIKit.UIPopoverArrowDirection * bool -&gt; unit" Usage="uIPopoverController.PresentFromBarButtonItem (item, arrowDirections, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentPopoverFromBarButtonItem:permittedArrowDirections:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="UIKit.UIBarButtonItem" />
        <Parameter Name="arrowDirections" Type="UIKit.UIPopoverArrowDirection" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="item">The button item to anchor the popover to.</param>
        <param name="arrowDirections">The direction arrows that the popover may use.</param>
        <param name="animated">If <see langword="true" />, then the popover will be animated as it is displayed.</param>
        <summary>Shows the popover, anchoring it to the provided <paramref name="item" />.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentFromRect">
      <MemberSignature Language="C#" Value="public virtual void PresentFromRect (CoreGraphics.CGRect rect, UIKit.UIView view, UIKit.UIPopoverArrowDirection arrowDirections, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentFromRect(valuetype CoreGraphics.CGRect rect, class UIKit.UIView view, valuetype UIKit.UIPopoverArrowDirection arrowDirections, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverController.PresentFromRect(CoreGraphics.CGRect,UIKit.UIView,UIKit.UIPopoverArrowDirection,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member PresentFromRect : CoreGraphics.CGRect * UIKit.UIView * UIKit.UIPopoverArrowDirection * bool -&gt; unit&#xA;override this.PresentFromRect : CoreGraphics.CGRect * UIKit.UIView * UIKit.UIPopoverArrowDirection * bool -&gt; unit" Usage="uIPopoverController.PresentFromRect (rect, view, arrowDirections, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentPopoverFromRect:inView:permittedArrowDirections:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="view" Type="UIKit.UIView" />
        <Parameter Name="arrowDirections" Type="UIKit.UIPopoverArrowDirection" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="view">To be added.</param>
        <param name="arrowDirections">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Developers should not call this deprecated method.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetContentViewController">
      <MemberSignature Language="C#" Value="public virtual void SetContentViewController (UIKit.UIViewController viewController, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetContentViewController(class UIKit.UIViewController viewController, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverController.SetContentViewController(UIKit.UIViewController,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetContentViewController : UIKit.UIViewController * bool -&gt; unit&#xA;override this.SetContentViewController : UIKit.UIViewController * bool -&gt; unit" Usage="uIPopoverController.SetContentViewController (viewController, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setContentViewController:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewController" Type="UIKit.UIViewController" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="viewController">A new view controller to use for displaying the content of the popover.</param>
        <param name="animated">If <see langword="true" />, the the display of the <paramref name="viewController" /> will be animated.</param>
        <summary>Changes the view controller that will display the contents of the popover.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetPopoverContentSize">
      <MemberSignature Language="C#" Value="public virtual void SetPopoverContentSize (CoreGraphics.CGSize size, bool animated);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetPopoverContentSize(valuetype CoreGraphics.CGSize size, bool animated) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIPopoverController.SetPopoverContentSize(CoreGraphics.CGSize,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member SetPopoverContentSize : CoreGraphics.CGSize * bool -&gt; unit&#xA;override this.SetPopoverContentSize : CoreGraphics.CGSize * bool -&gt; unit" Usage="uIPopoverController.SetPopoverContentSize (size, animated)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setPopoverContentSize:animated:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="CoreGraphics.CGSize" />
        <Parameter Name="animated" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="size">To be added.</param>
        <param name="animated">To be added.</param>
        <summary>Developers should not call this deprecated method.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldDismiss">
      <MemberSignature Language="C#" Value="public UIKit.UIPopoverControllerCondition ShouldDismiss { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIPopoverControllerCondition ShouldDismiss" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.ShouldDismiss" />
      <MemberSignature Language="F#" Value="member this.ShouldDismiss : UIKit.UIPopoverControllerCondition with get, set" Usage="UIKit.UIPopoverController.ShouldDismiss" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIPopoverControllerCondition</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Delegate invoked by the object to get a value.</summary>
        <value>To be added.</value>
        <remarks>Developers assign a function, delegate or anonymous method to this property to return a value to the object.   If developers assign a value to this property, it this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakDelegate">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject WeakDelegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSObject WeakDelegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIPopoverController.WeakDelegate" />
      <MemberSignature Language="F#" Value="member this.WeakDelegate : Foundation.NSObject with get, set" Usage="UIKit.UIPopoverController.WeakDelegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An object that can respond to the delegate protocol for this type</summary>
        <value>The instance that will respond to events and data requests.</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>   Methods must be decorated with the [Export ("selectorName")] attribute to respond to each method from the protocol.   Alternatively use the Delegate method which is strongly typed and does not require the [Export] attributes on methods.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WillReposition">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;UIKit.UIPopoverControllerRepositionEventArgs&gt; WillReposition;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class UIKit.UIPopoverControllerRepositionEventArgs&gt; WillReposition" />
      <MemberSignature Language="DocId" Value="E:UIKit.UIPopoverController.WillReposition" />
      <MemberSignature Language="F#" Value="member this.WillReposition : EventHandler&lt;UIKit.UIPopoverControllerRepositionEventArgs&gt; " Usage="member this.WillReposition : System.EventHandler&lt;UIKit.UIPopoverControllerRepositionEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;UIKit.UIPopoverControllerRepositionEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised by the object.</summary>
        <remarks>If developers do not assign a value to this event, this will reset the value for the WeakDelegate property to an internal handler that maps delegates to events.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
