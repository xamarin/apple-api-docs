<Type Name="UITextDropDelegate" FullName="UIKit.UITextDropDelegate">
  <TypeSignature Language="C#" Value="public class UITextDropDelegate : Foundation.NSObject, IDisposable, UIKit.IUITextDropDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UITextDropDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUITextDropDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUITextDropDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("UITextDropDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate for handling drops to text views.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UITextDropDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITextDropDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITextDropDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DropSessionDidEnd">
      <MemberSignature Language="C#" Value="public virtual void DropSessionDidEnd (UIKit.IUITextDroppable textDroppableView, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DropSessionDidEnd(class UIKit.IUITextDroppable textDroppableView, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textDroppableView:dropSessionDidEnd:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textDroppableView" Type="UIKit.IUITextDroppable" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="textDroppableView">The destination view.</param>
        <param name="session">The drop session that ended.</param>
        <summary>Method that is called when the drop session ends.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropSessionDidEnter">
      <MemberSignature Language="C#" Value="public virtual void DropSessionDidEnter (UIKit.IUITextDroppable textDroppableView, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DropSessionDidEnter(class UIKit.IUITextDroppable textDroppableView, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textDroppableView:dropSessionDidEnter:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textDroppableView" Type="UIKit.IUITextDroppable" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="textDroppableView">The receiving view.</param>
        <param name="session">The session that entered.</param>
        <summary>Method that is called when the drop point enters the text view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropSessionDidExit">
      <MemberSignature Language="C#" Value="public virtual void DropSessionDidExit (UIKit.IUITextDroppable textDroppableView, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DropSessionDidExit(class UIKit.IUITextDroppable textDroppableView, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textDroppableView:dropSessionDidExit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textDroppableView" Type="UIKit.IUITextDroppable" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="textDroppableView">The previously receiving view.</param>
        <param name="session">The session that exited.</param>
        <summary>Method that is called when the drop point leaves the text view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropSessionDidUpdate">
      <MemberSignature Language="C#" Value="public virtual void DropSessionDidUpdate (UIKit.IUITextDroppable textDroppableView, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DropSessionDidUpdate(class UIKit.IUITextDroppable textDroppableView, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textDroppableView:dropSessionDidUpdate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textDroppableView" Type="UIKit.IUITextDroppable" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="textDroppableView">The receiving view.</param>
        <param name="session">The session that was updated.</param>
        <summary>Method that is called when the drop point over the text view changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreviewForDroppingAllItems">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITargetedDragPreview GetPreviewForDroppingAllItems (UIKit.IUITextDroppable textDroppableView, UIKit.UITargetedDragPreview defaultPreview);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITargetedDragPreview GetPreviewForDroppingAllItems(class UIKit.IUITextDroppable textDroppableView, class UIKit.UITargetedDragPreview defaultPreview) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textDroppableView:previewForDroppingAllItemsWithDefault:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITargetedDragPreview</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textDroppableView" Type="UIKit.IUITextDroppable" />
        <Parameter Name="defaultPreview" Type="UIKit.UITargetedDragPreview" />
      </Parameters>
      <Docs>
        <param name="textDroppableView">The receiving view.</param>
        <param name="defaultPreview">The system-provided default preview.</param>
        <summary>Method that is called once to get the drag preview to use for dropping all the items.</summary>
        <returns>
          <para>Developers can return <see langword="null" /> to cause the default preview to be used.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProposalForDrop">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextDropProposal GetProposalForDrop (UIKit.IUITextDroppable textDroppableView, UIKit.IUITextDropRequest drop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITextDropProposal GetProposalForDrop(class UIKit.IUITextDroppable textDroppableView, class UIKit.IUITextDropRequest drop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textDroppableView:proposalForDrop:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextDropProposal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textDroppableView" Type="UIKit.IUITextDroppable" />
        <Parameter Name="drop" Type="UIKit.IUITextDropRequest" />
      </Parameters>
      <Docs>
        <param name="textDroppableView">The receiving view.</param>
        <param name="drop">The drop request for which to get a proposal.</param>
        <summary>Method that is called to get the drop proposal.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillBecomeEditable">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextDropEditability WillBecomeEditable (UIKit.IUITextDroppable textDroppableView, UIKit.IUITextDropRequest drop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UITextDropEditability WillBecomeEditable(class UIKit.IUITextDroppable textDroppableView, class UIKit.IUITextDropRequest drop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textDroppableView:willBecomeEditableForDrop:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextDropEditability</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textDroppableView" Type="UIKit.IUITextDroppable" />
        <Parameter Name="drop" Type="UIKit.IUITextDropRequest" />
      </Parameters>
      <Docs>
        <param name="textDroppableView">The currently non-editable receiving view.</param>
        <param name="drop">The drop request.</param>
        <summary>Method that is called to determine whether a non-editable text view can accept drops.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPerformDrop">
      <MemberSignature Language="C#" Value="public virtual void WillPerformDrop (UIKit.IUITextDroppable textDroppableView, UIKit.IUITextDropRequest drop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillPerformDrop(class UIKit.IUITextDroppable textDroppableView, class UIKit.IUITextDropRequest drop) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("textDroppableView:willPerformDrop:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textDroppableView" Type="UIKit.IUITextDroppable" />
        <Parameter Name="drop" Type="UIKit.IUITextDropRequest" />
      </Parameters>
      <Docs>
        <param name="textDroppableView">The receiving view.</param>
        <param name="drop">The drop request.</param>
        <summary>Method that is called just before the drop is performed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
