<Type Name="IUICollectionViewDelegate" FullName="UIKit.IUICollectionViewDelegate">
  <TypeSignature Language="C#" Value="public interface IUICollectionViewDelegate : IDisposable, UIKit.IUIScrollViewDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IUICollectionViewDelegate implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIScrollViewDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.IUICollectionViewDelegate" />
  <TypeSignature Language="F#" Value="type IUICollectionViewDelegate = interface&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUIScrollViewDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIScrollViewDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="UICollectionViewDelegate", WrapperType=typeof(UIKit.UICollectionViewDelegateWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldHighlightItem", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.Boolean), Selector="collectionView:shouldHighlightItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ItemHighlighted", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, Selector="collectionView:didHighlightItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ItemUnhighlighted", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, Selector="collectionView:didUnhighlightItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldSelectItem", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.Boolean), Selector="collectionView:shouldSelectItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldDeselectItem", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.Boolean), Selector="collectionView:shouldDeselectItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ItemSelected", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, Selector="collectionView:didSelectItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ItemDeselected", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, Selector="collectionView:didDeselectItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDisplayCell", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(UIKit.UICollectionViewCell), typeof(Foundation.NSIndexPath) }, Selector="collectionView:willDisplayCell:forItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="WillDisplaySupplementaryView", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(UIKit.UICollectionReusableView), typeof(System.String), typeof(Foundation.NSIndexPath) }, Selector="collectionView:willDisplaySupplementaryView:forElementKind:atIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CellDisplayingEnded", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(UIKit.UICollectionViewCell), typeof(Foundation.NSIndexPath) }, Selector="collectionView:didEndDisplayingCell:forItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="SupplementaryViewDisplayingEnded", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(UIKit.UICollectionReusableView), typeof(Foundation.NSString), typeof(Foundation.NSIndexPath) }, Selector="collectionView:didEndDisplayingSupplementaryView:forElementOfKind:atIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldShowMenu", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.Boolean), Selector="collectionView:shouldShowMenuForItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CanPerformAction", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(ObjCRuntime.Selector), typeof(Foundation.NSIndexPath), typeof(Foundation.NSObject) }, ReturnType=typeof(System.Boolean), Selector="collectionView:canPerformAction:forItemAtIndexPath:withSender:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PerformAction", ParameterByRef=new System.Boolean[] { false, false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(ObjCRuntime.Selector), typeof(Foundation.NSIndexPath), typeof(Foundation.NSObject) }, Selector="collectionView:performAction:forItemAtIndexPath:withSender:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="TransitionLayout", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(UIKit.UICollectionViewLayout), typeof(UIKit.UICollectionViewLayout) }, ReturnType=typeof(UIKit.UICollectionViewTransitionLayout), Selector="collectionView:transitionLayoutForOldLayout:newLayout:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetTargetIndexPathForMove", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(Foundation.NSIndexPath), Selector="collectionView:targetIndexPathForMoveFromItemAtIndexPath:toProposedIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetTargetContentOffset", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(CoreGraphics.CGPoint) }, ReturnType=typeof(CoreGraphics.CGPoint), Selector="collectionView:targetContentOffsetForProposedContentOffset:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="CanFocusItem", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath) }, ReturnType=typeof(System.Boolean), Selector="collectionView:canFocusItemAtIndexPath:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldUpdateFocus", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(UIKit.UICollectionViewFocusUpdateContext) }, ReturnType=typeof(System.Boolean), Selector="collectionView:shouldUpdateFocusInContext:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidUpdateFocus", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(UIKit.UICollectionViewFocusUpdateContext), typeof(UIKit.UIFocusAnimationCoordinator) }, Selector="collectionView:didUpdateFocusInContext:withAnimationCoordinator:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="GetIndexPathForPreferredFocusedView", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView) }, ReturnType=typeof(Foundation.NSIndexPath), Selector="indexPathForPreferredFocusedViewInCollectionView:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ShouldSpringLoadItem", ParameterByRef=new System.Boolean[] { false, false, false }, ParameterType=new System.Type[] { typeof(UIKit.UICollectionView), typeof(Foundation.NSIndexPath), typeof(UIKit.IUISpringLoadedInteractionContext) }, ReturnType=typeof(System.Boolean), Selector="collectionView:shouldSpringLoadItemAtIndexPath:withContext:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:UIKit.UICollectionViewDelegate" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:UIKit.UICollectionViewDelegate" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:UIKit.UICollectionViewDelegate" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:UIKit.UICollectionViewDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members />
</Type>
