<Type Name="UICollectionViewLayoutAttributes" FullName="UIKit.UICollectionViewLayoutAttributes">
  <TypeSignature Language="C#" Value="public class UICollectionViewLayoutAttributes : Foundation.NSObject, Foundation.INSCopying, IDisposable, UIKit.IUIDynamicItem" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UICollectionViewLayoutAttributes extends Foundation.NSObject implements class Foundation.INSCopying, class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIDynamicItem" />
  <TypeSignature Language="DocId" Value="T:UIKit.UICollectionViewLayoutAttributes" />
  <TypeSignature Language="F#" Value="type UICollectionViewLayoutAttributes = class&#xA;    inherit NSObject&#xA;    interface INSCopying&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUIDynamicItem" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIDynamicItem</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UICollectionViewLayoutAttributes", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Provides layout attributes for <see cref="T:UIKit.UICollectionViewLayout" />s.</summary>
    <remarks>
      <para>
        Application developers who override this class in order to provide additional layout parameters should also override <see cref="M:UIKit.UICollectionReusableView.ApplyLayoutAttributes(UIKit.UICollectionViewLayoutAttributes)" /> to apply them.
      </para>
      <para>
        In order to get a layout attributes object for a subclass of this class, you must call <see cref="M:UIKit.UICollectionViewLayoutAttributes.CreateForCell(Foundation.NSIndexPath)" /> and specify the type of the subclass, like this:
      </para>
      <example>
        <code lang="C#"><![CDATA[
// A custom UICollectionViewLayoutAttributes class with one extra property
public class CustomCollectionViewLayoutAttributes : UICollectionViewLayoutAttributes {
  public int SomeProperty { get; set; }
  public override NSObject Copy ()
  {
    // It is required to override Copy, iOS will call this method to clone your object.
    var copy = (CustomCollectionViewLayoutAttributes) base.Copy ();
    copy.SomeProperty = SomeProperty;
    return copy;
  }
}
public class CircleLayout : UICollectionViewLayout {
  public override UICollectionViewLayoutAttributes LayoutAttributesForItem (NSIndexPath path)
  {
    var attributes = UICollectionViewLayoutAttributes.CreateForCell&lt;CustomCollectionViewLayoutAttributes&gt; (path);
    attributes.SomeProperty = 1;
    return attributes;
  }
 }
          ]]></code>
      </example>
      <para>
        <see cref="T:UIKit.UICollectionViewLayoutAttributes" /> implements <see cref="T:UIKit.IUIDynamicItem" /> and thus can be used with UI Dynamics.</para>
    </remarks>
    <related type="article" href="http://docs.xamarin.com/ios/Guides/User_Interface/Introduction_to_Collection_Views">Introduction to Collection Views</related>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UICollectionViewLayoutAttributes_class/index.html">Apple documentation for <c>UICollectionViewLayoutAttributes</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UICollectionViewLayoutAttributes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UICollectionViewLayoutAttributes (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewLayoutAttributes : Foundation.NSObjectFlag -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="new UIKit.UICollectionViewLayoutAttributes t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UICollectionViewLayoutAttributes (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UICollectionViewLayoutAttributes : nativeint -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="new UIKit.UICollectionViewLayoutAttributes handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Alpha">
      <MemberSignature Language="C#" Value="public virtual nfloat Alpha { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat Alpha" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.Alpha" />
      <MemberSignature Language="F#" Value="member this.Alpha : nfloat with get, set" Usage="UIKit.UICollectionViewLayoutAttributes.Alpha" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("alpha")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAlpha:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The transparency to be applied.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Bounds">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect Bounds { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect Bounds" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.Bounds" />
      <MemberSignature Language="F#" Value="member this.Bounds : CoreGraphics.CGRect with get, set" Usage="UIKit.UICollectionViewLayoutAttributes.Bounds" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("bounds")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setBounds:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The RectangleF describing the bounds of the item.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Center">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint Center { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint Center" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.Center" />
      <MemberSignature Language="F#" Value="member this.Center : CoreGraphics.CGPoint with get, set" Usage="UIKit.UICollectionViewLayoutAttributes.Center" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUIDynamicItem.Center</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("center")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setCenter:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The center of the item.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UICollectionViewLayoutAttributes.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollisionBoundingPath">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIBezierPath CollisionBoundingPath { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIBezierPath CollisionBoundingPath" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.CollisionBoundingPath" />
      <MemberSignature Language="F#" Value="member this.CollisionBoundingPath : UIKit.UIBezierPath" Usage="UIKit.UICollectionViewLayoutAttributes.CollisionBoundingPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("collisionBoundingPath")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIBezierPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIBezierPath" /> to be used for collision detection.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollisionBoundsType">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDynamicItemCollisionBoundsType CollisionBoundsType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIDynamicItemCollisionBoundsType CollisionBoundsType" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.CollisionBoundsType" />
      <MemberSignature Language="F#" Value="member this.CollisionBoundsType : UIKit.UIDynamicItemCollisionBoundsType" Usage="UIKit.UICollectionViewLayoutAttributes.CollisionBoundsType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("collisionBoundsType")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDynamicItemCollisionBoundsType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the <see cref="T:UIKit.UIDynamicItemCollisionBoundsType" /> describing the type of bounds used for collision detected.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSObject Copy (Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSObject Copy(class Foundation.NSZone zone) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.Copy(Foundation.NSZone)" />
      <MemberSignature Language="F#" Value="override this.Copy : Foundation.NSZone -&gt; Foundation.NSObject" Usage="uICollectionViewLayoutAttributes.Copy zone" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCopying.Copy(Foundation.NSZone)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForCell">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewLayoutAttributes CreateForCell (Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionViewLayoutAttributes CreateForCell(class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.CreateForCell(Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="static member CreateForCell : Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="UIKit.UICollectionViewLayoutAttributes.CreateForCell indexPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutAttributesForCellWithIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="indexPath">The index path describing the cell to create a layout attributes object for.</param>
        <summary>Creates a UICollectionViewLayoutAttributes for the cell at the specified index.|Creates a UICollectionViewLayon</summary>
        <returns>A layout attributes object representing the cell at the specified index path.</returns>
        <remarks>This method will always return a UICollectionViewLayoutAttributes. If you've subclassed UICollectionViewLayoutAttributes and need to return an instance of the subclass, use <see cref="M:UIKit.UICollectionViewLayoutAttributes.CreateForCell(Foundation.NSIndexPath)" /> instead. This method is equivalent to calling CreateForCell&lt;UICollectionViewLayoutAttributes&gt;.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForCell&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CreateForCell&lt;T&gt; (Foundation.NSIndexPath indexPath) where T : UIKit.UICollectionViewLayoutAttributes;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CreateForCell&lt;(class UIKit.UICollectionViewLayoutAttributes) T&gt;(class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.CreateForCell``1(Foundation.NSIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UICollectionViewLayoutAttributes</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the layout attributes object to return.</typeparam>
        <param name="indexPath">The index path describing the cell to create a layout attributes object for.</param>
        <summary>Creates a layout attributes object of the specified type for the cell at the specified index path.</summary>
        <returns>A layout attributes object representing the cell at the specified index path.</returns>
        <remarks>Use this method to create a layout attributes object of a UICollectionViewLayoutAttributes subclass.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForDecorationView">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewLayoutAttributes CreateForDecorationView (Foundation.NSString kind, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionViewLayoutAttributes CreateForDecorationView(class Foundation.NSString kind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.CreateForDecorationView(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="static member CreateForDecorationView : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="UIKit.UICollectionViewLayoutAttributes.CreateForDecorationView (kind, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutAttributesForDecorationViewOfKind:withIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="kind">The kind identifier for the decoration view.</param>
        <param name="indexPath">An index path related to the decoration view.</param>
        <summary>Creates a layout attributes object representing the decoration view.</summary>
        <returns>A layout attributes object that represents the decoration view.</returns>
        <remarks>Use this method to create a layout attributes object representing a decoration view of a specific kind. If you've subclassed UICollectionViewLayoutAttributes and need to return an instance of the subclass, use <see cref="M:UIKit.UICollectionViewLayoutAttributes.CreateForDecorationView(Foundation.NSString,Foundation.NSIndexPath)" /> instead. This method is equivalent to calling CreateForDecorationView&lt;UICollectionViewLayoutAttributes&gt;.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForDecorationView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CreateForDecorationView&lt;T&gt; (Foundation.NSString kind, Foundation.NSIndexPath indexPath) where T : UIKit.UICollectionViewLayoutAttributes;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CreateForDecorationView&lt;(class UIKit.UICollectionViewLayoutAttributes) T&gt;(class Foundation.NSString kind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.CreateForDecorationView``1(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UICollectionViewLayoutAttributes</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the layout attributes object to return.</typeparam>
        <param name="kind">The kind identifier for the decoration view.</param>
        <param name="indexPath">An index path related to the decoration view.</param>
        <summary>Creates a layout attributes object of a specific type representing the decoration view.</summary>
        <returns>A layout attributes object of a specific type that represents the decoration view.</returns>
        <remarks>Use this method to create a layout attributes object of a specific type representing a decoration view of a specific kind.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForSupplementaryView">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewLayoutAttributes CreateForSupplementaryView (Foundation.NSString kind, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionViewLayoutAttributes CreateForSupplementaryView(class Foundation.NSString kind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.CreateForSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="static member CreateForSupplementaryView : Foundation.NSString * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="UIKit.UICollectionViewLayoutAttributes.CreateForSupplementaryView (kind, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("layoutAttributesForSupplementaryViewOfKind:withIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="kind">The kind identifier for the supplementary view.</param>
        <param name="indexPath">An index path for the supplementary view.</param>
        <summary>Creates a layout attributes object representing the supplementary view.</summary>
        <returns>A layout attributes object that represents the supplementary view.</returns>
        <remarks>Use this method to create a layout attributes object representing a supplementary view of a specific kind. If you've subclassed UICollectionViewLayoutAttributes and need to return an instance of the subclass, use <see cref="M:UIKit.UICollectionViewLayoutAttributes.CreateForSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)" /> instead. This method is equivalent to calling CreateForSupplementaryView&lt;UICollectionViewLayoutAttributes&gt;.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForSupplementaryView">
      <MemberSignature Language="C#" Value="public static UIKit.UICollectionViewLayoutAttributes CreateForSupplementaryView (UIKit.UICollectionElementKindSection section, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UICollectionViewLayoutAttributes CreateForSupplementaryView(valuetype UIKit.UICollectionElementKindSection section, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.CreateForSupplementaryView(UIKit.UICollectionElementKindSection,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="static member CreateForSupplementaryView : UIKit.UICollectionElementKindSection * Foundation.NSIndexPath -&gt; UIKit.UICollectionViewLayoutAttributes" Usage="UIKit.UICollectionViewLayoutAttributes.CreateForSupplementaryView (section, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionViewLayoutAttributes</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="section" Type="UIKit.UICollectionElementKindSection" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="section">The supplementary view kind.</param>
        <param name="indexPath">An index path for the supplementary view.</param>
        <summary>Creates a layout attributes object representing the supplementary view.</summary>
        <returns>A layout attributes object that represents the supplementary view.</returns>
        <remarks>Use this method to create a layout attributes object representing a supplementary view of a specific kind. If you've subclassed UICollectionViewLayoutAttributes and need to return an instance of the subclass, use <see cref="M:UIKit.UICollectionViewLayoutAttributes.CreateForSupplementaryView(Foundation.NSString,Foundation.NSIndexPath)" /> instead. This method is equivalent to calling CreateForSupplementaryView&lt;UICollectionViewLayoutAttributes&gt;.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForSupplementaryView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CreateForSupplementaryView&lt;T&gt; (Foundation.NSString kind, Foundation.NSIndexPath indexPath) where T : UIKit.UICollectionViewLayoutAttributes;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CreateForSupplementaryView&lt;(class UIKit.UICollectionViewLayoutAttributes) T&gt;(class Foundation.NSString kind, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.CreateForSupplementaryView``1(Foundation.NSString,Foundation.NSIndexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UICollectionViewLayoutAttributes</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="kind" Type="Foundation.NSString" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the layout attributes object to return.</typeparam>
        <param name="kind">The kind identifier for the supplementary view.</param>
        <param name="indexPath">An index path for the supplementary view.</param>
        <summary>Creates a layout attributes object of a specific type representing the supplementary view.</summary>
        <returns>A layout attributes object of a specific type that represents the supplementary view.</returns>
        <remarks>Use this method to create a layout attributes object of a specific type representing a supplementary view of the specified.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForSupplementaryView&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T CreateForSupplementaryView&lt;T&gt; (UIKit.UICollectionElementKindSection section, Foundation.NSIndexPath indexPath) where T : UIKit.UICollectionViewLayoutAttributes;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T CreateForSupplementaryView&lt;(class UIKit.UICollectionViewLayoutAttributes) T&gt;(valuetype UIKit.UICollectionElementKindSection section, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UICollectionViewLayoutAttributes.CreateForSupplementaryView``1(UIKit.UICollectionElementKindSection,Foundation.NSIndexPath)" />
      <MemberSignature Language="F#" Value="static member CreateForSupplementaryView : UIKit.UICollectionElementKindSection * Foundation.NSIndexPath -&gt; 'T (requires 'T :&gt; UIKit.UICollectionViewLayoutAttributes)" Usage="UIKit.UICollectionViewLayoutAttributes.CreateForSupplementaryView (section, indexPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <BaseTypeName>UIKit.UICollectionViewLayoutAttributes</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="section" Type="UIKit.UICollectionElementKindSection" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of the layout attributes object to return.</typeparam>
        <param name="section">The supplementary view kind.</param>
        <param name="indexPath">An index path for the supplementary view.</param>
        <summary>Creates a layout attributes object representing the supplementary view.</summary>
        <returns>A layout attributes object that represents the supplementary view.</returns>
        <remarks>Use this method to create a layout attributes object of a specific type representing a supplementary view of the specified.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Frame">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect Frame { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect Frame" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.Frame" />
      <MemberSignature Language="F#" Value="member this.Frame : CoreGraphics.CGRect with get, set" Usage="UIKit.UICollectionViewLayoutAttributes.Frame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("frame")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setFrame:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The RectangleF frame for the UICollectionView</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Hidden">
      <MemberSignature Language="C#" Value="public virtual bool Hidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Hidden" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.Hidden" />
      <MemberSignature Language="F#" Value="member this.Hidden : bool with get, set" Usage="UIKit.UICollectionViewLayoutAttributes.Hidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isHidden")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setHidden:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the UICollectionView is hidden or not.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexPath">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSIndexPath IndexPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSIndexPath IndexPath" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.IndexPath" />
      <MemberSignature Language="F#" Value="member this.IndexPath : Foundation.NSIndexPath with get, set" Usage="UIKit.UICollectionViewLayoutAttributes.IndexPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("indexPath")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setIndexPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("indexPath", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setIndexPath:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSIndexPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The index path of the item in the UICollectionView.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepresentedElementCategory">
      <MemberSignature Language="C#" Value="public virtual UIKit.UICollectionElementCategory RepresentedElementCategory { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UICollectionElementCategory RepresentedElementCategory" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.RepresentedElementCategory" />
      <MemberSignature Language="F#" Value="member this.RepresentedElementCategory : UIKit.UICollectionElementCategory" Usage="UIKit.UICollectionViewLayoutAttributes.RepresentedElementCategory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("representedElementCategory")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UICollectionElementCategory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Used to identify the specific purpose of a supplementary or decoration view. Read-only. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RepresentedElementKind">
      <MemberSignature Language="C#" Value="public virtual string RepresentedElementKind { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string RepresentedElementKind" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.RepresentedElementKind" />
      <MemberSignature Language="F#" Value="member this.RepresentedElementKind : string" Usage="UIKit.UICollectionViewLayoutAttributes.RepresentedElementKind" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("representedElementKind")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Used to identify the specific purpose of a supplementary or decoration view. Read-only.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize Size" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.Size" />
      <MemberSignature Language="F#" Value="member this.Size : CoreGraphics.CGSize with get, set" Usage="UIKit.UICollectionViewLayoutAttributes.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("size")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSize:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The SizeF of the item.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGAffineTransform Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGAffineTransform Transform" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.Transform" />
      <MemberSignature Language="F#" Value="member this.Transform : CoreGraphics.CGAffineTransform with get, set" Usage="UIKit.UICollectionViewLayoutAttributes.Transform" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUIDynamicItem.Transform</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("transform")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setTransform:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGAffineTransform</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The affine transform of the item.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform3D">
      <MemberSignature Language="C#" Value="public virtual CoreAnimation.CATransform3D Transform3D { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreAnimation.CATransform3D Transform3D" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.Transform3D" />
      <MemberSignature Language="F#" Value="member this.Transform3D : CoreAnimation.CATransform3D with get, set" Usage="UIKit.UICollectionViewLayoutAttributes.Transform3D" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("transform3D")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setTransform3D:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreAnimation.CATransform3D</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The 3D transform of the item. (If not null, Frame will be set to null.)</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ZIndex">
      <MemberSignature Language="C#" Value="public virtual nint ZIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint ZIndex" />
      <MemberSignature Language="DocId" Value="P:UIKit.UICollectionViewLayoutAttributes.ZIndex" />
      <MemberSignature Language="F#" Value="member this.ZIndex : nint with get, set" Usage="UIKit.UICollectionViewLayoutAttributes.ZIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("zIndex")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setZIndex:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The Z-Index of the item. (Higher values appear in front of lower values.)</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
