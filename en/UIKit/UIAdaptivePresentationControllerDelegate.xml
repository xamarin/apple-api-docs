<Type Name="UIAdaptivePresentationControllerDelegate" FullName="UIKit.UIAdaptivePresentationControllerDelegate">
  <TypeSignature Language="C#" Value="public class UIAdaptivePresentationControllerDelegate : Foundation.NSObject, IDisposable, UIKit.IUIAdaptivePresentationControllerDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIAdaptivePresentationControllerDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIAdaptivePresentationControllerDelegate" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIAdaptivePresentationControllerDelegate" />
  <TypeSignature Language="F#" Value="type UIAdaptivePresentationControllerDelegate = class&#xA;    inherit NSObject&#xA;    interface IUIAdaptivePresentationControllerDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIAdaptivePresentationControllerDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIAdaptivePresentationControllerDelegate", false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate object for <see cref="T:UIKit.UIPresentationController" /> objects. Provides methods called prior to adaptive presenttation.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIAdaptivePresentationControllerDelegate_protocol/index.html">Apple documentation for <c>UIAdaptivePresentationControllerDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIAdaptivePresentationControllerDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAdaptivePresentationControllerDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIAdaptivePresentationControllerDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAdaptivePresentationControllerDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIAdaptivePresentationControllerDelegate : Foundation.NSObjectFlag -&gt; UIKit.UIAdaptivePresentationControllerDelegate" Usage="new UIKit.UIAdaptivePresentationControllerDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIAdaptivePresentationControllerDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAdaptivePresentationControllerDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIAdaptivePresentationControllerDelegate : nativeint -&gt; UIKit.UIAdaptivePresentationControllerDelegate" Usage="new UIKit.UIAdaptivePresentationControllerDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAdaptivePresentationStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIModalPresentationStyle GetAdaptivePresentationStyle (UIKit.UIPresentationController forPresentationController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UIModalPresentationStyle GetAdaptivePresentationStyle(class UIKit.UIPresentationController forPresentationController) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAdaptivePresentationControllerDelegate.GetAdaptivePresentationStyle(UIKit.UIPresentationController)" />
      <MemberSignature Language="F#" Value="abstract member GetAdaptivePresentationStyle : UIKit.UIPresentationController -&gt; UIKit.UIModalPresentationStyle&#xA;override this.GetAdaptivePresentationStyle : UIKit.UIPresentationController -&gt; UIKit.UIModalPresentationStyle" Usage="uIAdaptivePresentationControllerDelegate.GetAdaptivePresentationStyle forPresentationController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("adaptivePresentationStyleForPresentationController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIModalPresentationStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="forPresentationController" Type="UIKit.UIPresentationController" />
      </Parameters>
      <Docs>
        <param name="forPresentationController">To be added.</param>
        <summary>Returns the new presentation style to use after a change to the <paramref name="forPresentationController" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAdaptivePresentationStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController GetAdaptivePresentationStyle (UIKit.UIPresentationController controller, UIKit.UIModalPresentationStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIViewController GetAdaptivePresentationStyle(class UIKit.UIPresentationController controller, valuetype UIKit.UIModalPresentationStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAdaptivePresentationControllerDelegate.GetAdaptivePresentationStyle(UIKit.UIPresentationController,UIKit.UIModalPresentationStyle)" />
      <MemberSignature Language="F#" Value="abstract member GetAdaptivePresentationStyle : UIKit.UIPresentationController * UIKit.UIModalPresentationStyle -&gt; UIKit.UIViewController&#xA;override this.GetAdaptivePresentationStyle : UIKit.UIPresentationController * UIKit.UIModalPresentationStyle -&gt; UIKit.UIViewController" Usage="uIAdaptivePresentationControllerDelegate.GetAdaptivePresentationStyle (controller, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("Incorrect signature. Use the overload with a UITraitCollection parameter.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIPresentationController" />
        <Parameter Name="style" Type="UIKit.UIModalPresentationStyle" />
      </Parameters>
      <Docs>
        <param name="controller">To be added.</param>
        <param name="style">To be added.</param>
        <summary>Returns a new view controller to use in response to a presentation style change to <paramref name="style" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAdaptivePresentationStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIModalPresentationStyle GetAdaptivePresentationStyle (UIKit.UIPresentationController controller, UIKit.UITraitCollection traitCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype UIKit.UIModalPresentationStyle GetAdaptivePresentationStyle(class UIKit.UIPresentationController controller, class UIKit.UITraitCollection traitCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAdaptivePresentationControllerDelegate.GetAdaptivePresentationStyle(UIKit.UIPresentationController,UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="abstract member GetAdaptivePresentationStyle : UIKit.UIPresentationController * UIKit.UITraitCollection -&gt; UIKit.UIModalPresentationStyle&#xA;override this.GetAdaptivePresentationStyle : UIKit.UIPresentationController * UIKit.UITraitCollection -&gt; UIKit.UIModalPresentationStyle" Usage="uIAdaptivePresentationControllerDelegate.GetAdaptivePresentationStyle (controller, traitCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("adaptivePresentationStyleForPresentationController:traitCollection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIModalPresentationStyle</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIPresentationController" />
        <Parameter Name="traitCollection" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="controller">To be added.</param>
        <param name="traitCollection">To be added.</param>
        <summary>Returns the presentation style for the specified controller and trait collection.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetViewControllerForAdaptivePresentation">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController GetViewControllerForAdaptivePresentation (UIKit.UIPresentationController controller, UIKit.UIModalPresentationStyle style);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIViewController GetViewControllerForAdaptivePresentation(class UIKit.UIPresentationController controller, valuetype UIKit.UIModalPresentationStyle style) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAdaptivePresentationControllerDelegate.GetViewControllerForAdaptivePresentation(UIKit.UIPresentationController,UIKit.UIModalPresentationStyle)" />
      <MemberSignature Language="F#" Value="abstract member GetViewControllerForAdaptivePresentation : UIKit.UIPresentationController * UIKit.UIModalPresentationStyle -&gt; UIKit.UIViewController&#xA;override this.GetViewControllerForAdaptivePresentation : UIKit.UIPresentationController * UIKit.UIModalPresentationStyle -&gt; UIKit.UIViewController" Usage="uIAdaptivePresentationControllerDelegate.GetViewControllerForAdaptivePresentation (controller, style)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentationController:viewControllerForAdaptivePresentationStyle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="controller" Type="UIKit.UIPresentationController" />
        <Parameter Name="style" Type="UIKit.UIModalPresentationStyle" />
      </Parameters>
      <Docs>
        <param name="controller">To be added.</param>
        <param name="style">To be added.</param>
        <summary>The view controller to use for the specified <paramref name="style" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WillPresent">
      <MemberSignature Language="C#" Value="public virtual void WillPresent (UIKit.UIPresentationController presentationController, UIKit.UIModalPresentationStyle style, UIKit.IUIViewControllerTransitionCoordinator transitionCoordinator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void WillPresent(class UIKit.UIPresentationController presentationController, valuetype UIKit.UIModalPresentationStyle style, class UIKit.IUIViewControllerTransitionCoordinator transitionCoordinator) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIAdaptivePresentationControllerDelegate.WillPresent(UIKit.UIPresentationController,UIKit.UIModalPresentationStyle,UIKit.IUIViewControllerTransitionCoordinator)" />
      <MemberSignature Language="F#" Value="abstract member WillPresent : UIKit.UIPresentationController * UIKit.UIModalPresentationStyle * UIKit.IUIViewControllerTransitionCoordinator -&gt; unit&#xA;override this.WillPresent : UIKit.UIPresentationController * UIKit.UIModalPresentationStyle * UIKit.IUIViewControllerTransitionCoordinator -&gt; unit" Usage="uIAdaptivePresentationControllerDelegate.WillPresent (presentationController, style, transitionCoordinator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentationController:willPresentWithAdaptiveStyle:transitionCoordinator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 3, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="presentationController" Type="UIKit.UIPresentationController" />
        <Parameter Name="style" Type="UIKit.UIModalPresentationStyle" />
        <Parameter Name="transitionCoordinator" Type="UIKit.IUIViewControllerTransitionCoordinator" />
      </Parameters>
      <Docs>
        <param name="presentationController">To be added.</param>
        <param name="style">To be added.</param>
        <param name="transitionCoordinator">To be added.</param>
        <summary>Called prior to presentation.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
