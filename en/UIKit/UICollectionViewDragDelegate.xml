<Type Name="UICollectionViewDragDelegate" FullName="UIKit.UICollectionViewDragDelegate">
  <TypeSignature Language="C#" Value="public abstract class UICollectionViewDragDelegate : Foundation.NSObject, IDisposable, UIKit.IUICollectionViewDragDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UICollectionViewDragDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUICollectionViewDragDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUICollectionViewDragDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("UICollectionViewDragDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface for a drag operation that started from a collection view.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UICollectionViewDragDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UICollectionViewDragDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UICollectionViewDragDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DragSessionAllowsMoveOperation">
      <MemberSignature Language="C#" Value="public virtual bool DragSessionAllowsMoveOperation (UIKit.UICollectionView collectionView, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DragSessionAllowsMoveOperation(class UIKit.UICollectionView collectionView, class UIKit.IUIDragSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("collectionView:dragSessionAllowsMoveOperation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="collectionView">To be added.</param>
        <param name="session">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragSessionDidEnd">
      <MemberSignature Language="C#" Value="public virtual void DragSessionDidEnd (UIKit.UICollectionView collectionView, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DragSessionDidEnd(class UIKit.UICollectionView collectionView, class UIKit.IUIDragSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("collectionView:dragSessionDidEnd:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="collectionView">The originating collection view.</param>
        <param name="session">The session that is ending.</param>
        <summary>Method that is called when the user cancels or completes the drag session.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragSessionIsRestrictedToDraggingApplication">
      <MemberSignature Language="C#" Value="public virtual bool DragSessionIsRestrictedToDraggingApplication (UIKit.UICollectionView collectionView, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool DragSessionIsRestrictedToDraggingApplication(class UIKit.UICollectionView collectionView, class UIKit.IUIDragSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("collectionView:dragSessionIsRestrictedToDraggingApplication:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="collectionView">To be added.</param>
        <param name="session">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DragSessionWillBegin">
      <MemberSignature Language="C#" Value="public virtual void DragSessionWillBegin (UIKit.UICollectionView collectionView, UIKit.IUIDragSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DragSessionWillBegin(class UIKit.UICollectionView collectionView, class UIKit.IUIDragSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("collectionView:dragSessionWillBegin:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
      </Parameters>
      <Docs>
        <param name="collectionView">The originating collection view.</param>
        <param name="session">The session that is about to begin.</param>
        <summary>Method that is called just before a drag session begins.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDragPreviewParameters">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDragPreviewParameters GetDragPreviewParameters (UIKit.UICollectionView collectionView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIDragPreviewParameters GetDragPreviewParameters(class UIKit.UICollectionView collectionView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("collectionView:dragPreviewParametersForItemAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDragPreviewParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">To be added.</param>
        <param name="indexPath">To be added.</param>
        <summary>Gets the preview parameters for the item at the specified index path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsForAddingToDragSession">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDragItem[] GetItemsForAddingToDragSession (UIKit.UICollectionView collectionView, UIKit.IUIDragSession session, Foundation.NSIndexPath indexPath, CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIDragItem[] GetItemsForAddingToDragSession(class UIKit.UICollectionView collectionView, class UIKit.IUIDragSession session, class Foundation.NSIndexPath indexPath, valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("collectionView:itemsForAddingToDragSession:atIndexPath:point:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDragItem[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="collectionView">The originating collection view.</param>
        <param name="session">The drag session to which to add items.</param>
        <param name="indexPath">The index path to the item to add.</param>
        <param name="point">The point that the user touched, in the collection view coordinate space.</param>
        <summary>Adds the items at the index path to the drag session.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemsForBeginningDragSession">
      <MemberSignature Language="C#" Value="public abstract UIKit.UIDragItem[] GetItemsForBeginningDragSession (UIKit.UICollectionView collectionView, UIKit.IUIDragSession session, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIDragItem[] GetItemsForBeginningDragSession(class UIKit.UICollectionView collectionView, class UIKit.IUIDragSession session, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("collectionView:itemsForBeginningDragSession:atIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDragItem[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="collectionView" Type="UIKit.UICollectionView" />
        <Parameter Name="session" Type="UIKit.IUIDragSession" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="collectionView">The originating collection view.</param>
        <param name="session">The drag session to which to add items.</param>
        <param name="indexPath">The index path to the item.</param>
        <summary>Adds the items at the index path to the initial set of drag items.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
