<Type Name="UIImage" FullName="UIKit.UIImage">
  <TypeSignature Language="C#" Value="public class UIImage : Foundation.NSObject, Foundation.INSItemProviderReading, Foundation.INSItemProviderWriting, Foundation.INSSecureCoding, IDisposable, UIKit.IUIAccessibilityIdentification, UIKit.IUIItemProviderPresentationSizeProviding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIImage extends Foundation.NSObject implements class Foundation.INSCoding, class Foundation.INSItemProviderReading, class Foundation.INSItemProviderWriting, class Foundation.INSSecureCoding, class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIAccessibilityIdentification, class UIKit.IUIItemProviderPresentationSizeProviding" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIImage" />
  <TypeSignature Language="F#" Value="type UIImage = class&#xA;    inherit NSObject&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface INSItemProviderReading&#xA;    interface INSItemProviderWriting&#xA;    interface INSSecureCoding&#xA;    interface IUIAccessibilityIdentification&#xA;    interface IUIItemProviderPresentationSizeProviding" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSItemProviderReading</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSItemProviderWriting</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIAccessibilityIdentification</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIItemProviderPresentationSizeProviding</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIImage", true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Image representation in UIKit, with support for loading, saving and manipulating images.</summary>
    <remarks>
      <para>
	Image objects do not provide direct access to the underlying
	image - they are immutable. The methods <see cref="M:UIKit.UIImage.AsJPEG()" /> or <see cref="M:UIKit.UIImage.AsPNG()" /> will provide the
	underlying image data as a JPEG or PNG.
      </para>
      <para>
	To avoid issues with excessive memory use, UIImages objects
	should not be larger than 1024x1024 in size. Code-based
	manipulations such as resizing are not subject to this
	restriction.
      </para>
      <para>
	It is possible that the system may purge UIImage objects to
	free up memory. If the UIImage is required later on by an
	application, it will be loaded again from its source file.
      </para>
      <para>
	The following image formats are supported by the UIImage
	class:

      <list type="bullet"><item><term>.tiff</term></item><item><term>.jpg, .jpeg</term></item><item><term>.gif</term></item><item><term>.bmp</term></item><item><term>.ico</term></item><item><term>.cur</term></item><item><term>.xbm</term></item></list></para>
      <para>

	Starting with iOS 8, the <see cref="M:UIKIt.UIImage.FromBundle(System.String,Foundation.NSBundle,UIKIt.UITraitCollection)" />
	method can be used to load a UIImage that takes into
	consideration a <see cref="T:UIKit.UITraitCollection" />.  This can
	automatically load the proper image for the specified
	resolution.

      </para>
      <para>Most of the members of this class can be used from a background thread, with a couple of exceptions (FromBundle methods that retrieve images from the bundle and use the built-in memory cache).</para>
    </remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=064a9ab4-1e58-4cf6-a1c2-aab04997aa57">Example_Drawing</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=23a2571b-45eb-4889-bb67-d88937cb68c1">monocatalog</related>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=6b7f700b-aad2-4d67-a437-3a3482728a1b">Example_Touch</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Media/Images/Merge_Images">Merge Images</related>
    <related type="recipe" href="http://docs.xamarin.com/ios/Recipes/Media/Images/Rotate_An_Image">Rotate An Image</related>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/UIKit/Reference/UIImage_Class/index.html">Apple documentation for <c>UIImage</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (CoreGraphics.CGImage cgImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CoreGraphics.CGImage cgImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor(CoreGraphics.CGImage)" />
      <MemberSignature Language="F#" Value="new UIKit.UIImage : CoreGraphics.CGImage -&gt; UIKit.UIImage" Usage="new UIKit.UIImage cgImage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCGImage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="cgImage" Type="CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="cgImage">A <see cref="T:CoreGraphics.CGImage" /> object.</param>
        <summary>Creates a new UIImage from the provided Core Graphics image.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (CoreImage.CIImage ciImage);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CoreImage.CIImage ciImage) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor(CoreImage.CIImage)" />
      <MemberSignature Language="F#" Value="new UIKit.UIImage : CoreImage.CIImage -&gt; UIKit.UIImage" Usage="new UIKit.UIImage ciImage" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCIImage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="ciImage" Type="CoreImage.CIImage" />
      </Parameters>
      <Docs>
        <param name="ciImage">A <see cref="T:CoreImage.CIImage" /> object.</param>
        <summary>Creates a new UIImage from the provided Core Image image.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UIImage : Foundation.NSCoder -&gt; UIKit.UIImage" Usage="new UIKit.UIImage coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSData data) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor(Foundation.NSData)" />
      <MemberSignature Language="F#" Value="new UIKit.UIImage : Foundation.NSData -&gt; UIKit.UIImage" Usage="new UIKit.UIImage data" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithData:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">The <see cref="T:Foundation.NSData" /> object containing the image data.</param>
        <summary>Creates a new UIImage from the provided image data.</summary>
        <remarks>
          <para>The <see cref="T:Foundation.NSData" />
	  object must match one of the supported image types.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIImage (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIImage : Foundation.NSObjectFlag -&gt; UIKit.UIImage" Usage="new UIKit.UIImage t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIImage (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIImage : nativeint -&gt; UIKit.UIImage" Usage="new UIKit.UIImage handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor(System.String)" />
      <MemberSignature Language="F#" Value="new UIKit.UIImage : string -&gt; UIKit.UIImage" Usage="new UIKit.UIImage filename" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithContentsOfFile:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">The path to a supported image file.</param>
        <summary>Creates a <see cref="T:UIKit.UIImage" /> by loading from the provided file name.</summary>
        <remarks>
          <para>The image will not be cached.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (Foundation.NSData data, nfloat scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSData data, valuetype System.nfloat scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor(Foundation.NSData,System.nfloat)" />
      <MemberSignature Language="F#" Value="new UIKit.UIImage : Foundation.NSData * nfloat -&gt; UIKit.UIImage" Usage="new UIKit.UIImage (data, scale)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithData:scale:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="scale" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="data">Image data from a file or data that you programmatically create.</param>
        <param name="scale">A size of 1.0 produces an image that is full-size relative to the <paramref name="data" />.</param>
        <summary>Constructs a <see cref="T:UIKit.UIImage" /> from the provided <paramref name="data" />, scaled by the <paramref name="scale" /> factor.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (CoreGraphics.CGImage cgImage, nfloat scale, UIKit.UIImageOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CoreGraphics.CGImage cgImage, valuetype System.nfloat scale, valuetype UIKit.UIImageOrientation orientation) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor(CoreGraphics.CGImage,System.nfloat,UIKit.UIImageOrientation)" />
      <MemberSignature Language="F#" Value="new UIKit.UIImage : CoreGraphics.CGImage * nfloat * UIKit.UIImageOrientation -&gt; UIKit.UIImage" Usage="new UIKit.UIImage (cgImage, scale, orientation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCGImage:scale:orientation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="cgImage" Type="CoreGraphics.CGImage" />
        <Parameter Name="scale" Type="System.nfloat" />
        <Parameter Name="orientation" Type="UIKit.UIImageOrientation" />
      </Parameters>
      <Docs>
        <param name="cgImage">To be added.</param>
        <param name="scale">To be added.</param>
        <param name="orientation">To be added.</param>
        <summary>To be added.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIImage (CoreImage.CIImage ciImage, nfloat scale, UIKit.UIImageOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CoreImage.CIImage ciImage, valuetype System.nfloat scale, valuetype UIKit.UIImageOrientation orientation) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.#ctor(CoreImage.CIImage,System.nfloat,UIKit.UIImageOrientation)" />
      <MemberSignature Language="F#" Value="new UIKit.UIImage : CoreImage.CIImage * nfloat * UIKit.UIImageOrientation -&gt; UIKit.UIImage" Usage="new UIKit.UIImage (ciImage, scale, orientation)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCIImage:scale:orientation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="ciImage" Type="CoreImage.CIImage" />
        <Parameter Name="scale" Type="System.nfloat" />
        <Parameter Name="orientation" Type="UIKit.UIImageOrientation" />
      </Parameters>
      <Docs>
        <param name="ciImage">To be added.</param>
        <param name="scale">To be added.</param>
        <param name="orientation">To be added.</param>
        <summary>Constructs a new <see cref="T:UIKit.UIImage" /> backed by the <param name="ciImage" />, scaled and oriented as specified.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityActivate">
      <MemberSignature Language="C#" Value="public virtual bool AccessibilityActivate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool AccessibilityActivate() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.AccessibilityActivate" />
      <MemberSignature Language="F#" Value="abstract member AccessibilityActivate : unit -&gt; bool&#xA;override this.AccessibilityActivate : unit -&gt; bool" Usage="uIImage.AccessibilityActivate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("accessibilityActivate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Activates accessibility for this UIImage, returning <see langword="true" /> on success.</summary>
        <returns>
          <see langword="true" /> on success.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityActivationPoint">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGPoint AccessibilityActivationPoint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGPoint AccessibilityActivationPoint" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityActivationPoint" />
      <MemberSignature Language="F#" Value="member this.AccessibilityActivationPoint : CoreGraphics.CGPoint with get, set" Usage="UIKit.UIImage.AccessibilityActivationPoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityActivationPoint")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityActivationPoint:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the screen coordinates of the activation point for <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityAttributedHint">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString AccessibilityAttributedHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSAttributedString AccessibilityAttributedHint" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityAttributedHint" />
      <MemberSignature Language="F#" Value="member this.AccessibilityAttributedHint : Foundation.NSAttributedString with get, set" Usage="UIKit.UIImage.AccessibilityAttributedHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("accessibilityAttributedHint")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAccessibilityAttributedHint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityAttributedHint", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityAttributedHint:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:Foundatio0n.NSAttributedString" /> for the accessibility hint.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityAttributedLabel">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString AccessibilityAttributedLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSAttributedString AccessibilityAttributedLabel" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityAttributedLabel" />
      <MemberSignature Language="F#" Value="member this.AccessibilityAttributedLabel : Foundation.NSAttributedString with get, set" Usage="UIKit.UIImage.AccessibilityAttributedLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("accessibilityAttributedLabel")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAccessibilityAttributedLabel:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityAttributedLabel", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityAttributedLabel:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:Foundation.NSAttributedString" /> used for the accessibility label.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityAttributedValue">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSAttributedString AccessibilityAttributedValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSAttributedString AccessibilityAttributedValue" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityAttributedValue" />
      <MemberSignature Language="F#" Value="member this.AccessibilityAttributedValue : Foundation.NSAttributedString with get, set" Usage="UIKit.UIImage.AccessibilityAttributedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("accessibilityAttributedValue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAccessibilityAttributedValue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityAttributedValue", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityAttributedValue:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSAttributedString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the <see cref="T:Foundation.NSAttributedString" /> used for the accessibility value.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityElementsHidden">
      <MemberSignature Language="C#" Value="public virtual bool AccessibilityElementsHidden { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AccessibilityElementsHidden" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityElementsHidden" />
      <MemberSignature Language="F#" Value="member this.AccessibilityElementsHidden : bool with get, set" Usage="UIKit.UIImage.AccessibilityElementsHidden" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityElementsHidden")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityElementsHidden:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether accessibility elements contained in <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element are hidden.</summary>
        <value>
          <see langword="true" /> if visible or <see langword="false" /> if not.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityFrame">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGRect AccessibilityFrame { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGRect AccessibilityFrame" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityFrame" />
      <MemberSignature Language="F#" Value="member this.AccessibilityFrame : CoreGraphics.CGRect with get, set" Usage="UIKit.UIImage.AccessibilityFrame" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityFrame")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityFrame:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGRect</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the screen coordinates of the frame of <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element.</summary>
        <value>The designated frame.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityHint">
      <MemberSignature Language="C#" Value="public virtual string AccessibilityHint { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibilityHint" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityHint" />
      <MemberSignature Language="F#" Value="member this.AccessibilityHint : string with get, set" Usage="UIKit.UIImage.AccessibilityHint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("accessibilityHint")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAccessibilityHint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityHint", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityHint:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a localized string that describes the result of an action.</summary>
        <value>String that contains the hint.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityIdentifier">
      <MemberSignature Language="C#" Value="public virtual string AccessibilityIdentifier { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibilityIdentifier" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityIdentifier" />
      <MemberSignature Language="F#" Value="member this.AccessibilityIdentifier : string with get, set" Usage="UIKit.UIImage.AccessibilityIdentifier" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUIAccessibilityIdentification.AccessibilityIdentifier</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("accessibilityIdentifier")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAccessibilityIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityIdentifier", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityIdentifier:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an identifier that identifies <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element.</summary>
        <value>String identifier.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityLabel">
      <MemberSignature Language="C#" Value="public virtual string AccessibilityLabel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibilityLabel" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityLabel" />
      <MemberSignature Language="F#" Value="member this.AccessibilityLabel : string with get, set" Usage="UIKit.UIImage.AccessibilityLabel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("accessibilityLabel")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAccessibilityLabel:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityLabel", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityLabel:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a localized string to identify <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element.</summary>
        <value>String label identifier text.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityLanguage">
      <MemberSignature Language="C#" Value="public virtual string AccessibilityLanguage { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibilityLanguage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityLanguage" />
      <MemberSignature Language="F#" Value="member this.AccessibilityLanguage : string with get, set" Usage="UIKit.UIImage.AccessibilityLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("accessibilityLanguage")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAccessibilityLanguage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityLanguage", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityLanguage:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the language for the <see cref="M:UIKit.UIIMage.AccessibilityLabel" />, <see cref="M:UIKit.UIIMage.AccessibilityValue" />, and <see cref="M:UIKit.UIIMage.AccessibilityHint" /> of <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element.</summary>
        <value>String containing language tag.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityNavigationStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIAccessibilityNavigationStyle AccessibilityNavigationStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIAccessibilityNavigationStyle AccessibilityNavigationStyle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityNavigationStyle" />
      <MemberSignature Language="F#" Value="member this.AccessibilityNavigationStyle : UIKit.UIAccessibilityNavigationStyle with get, set" Usage="UIKit.UIImage.AccessibilityNavigationStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityNavigationStyle")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityNavigationStyle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIAccessibilityNavigationStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the navigation style.</summary>
        <value>
          <see cref="T:UIKit.UIAccessibilityNavigationStyle" />
        </value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityPath">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIBezierPath AccessibilityPath { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIBezierPath AccessibilityPath" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityPath" />
      <MemberSignature Language="F#" Value="member this.AccessibilityPath : UIKit.UIBezierPath with get, set" Usage="UIKit.UIImage.AccessibilityPath" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("accessibilityPath")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAccessibilityPath:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityPath", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityPath:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIBezierPath</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies screen coordinates for the path of an element that is used to highlight the element.</summary>
        <value>The default value is <see langword="null" /> by default.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityTraits">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIAccessibilityTrait AccessibilityTraits { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIAccessibilityTrait AccessibilityTraits" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityTraits" />
      <MemberSignature Language="F#" Value="member this.AccessibilityTraits : UIKit.UIAccessibilityTrait with get, set" Usage="UIKit.UIImage.AccessibilityTraits" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityTraits")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityTraits:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIAccessibilityTrait</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the accessibility traits that best characterize <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element.</summary>
        <value>
          <see cref="T:UIKit.UIAccessibilityTrait" />
        </value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityValue">
      <MemberSignature Language="C#" Value="public virtual string AccessibilityValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AccessibilityValue" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityValue" />
      <MemberSignature Language="F#" Value="member this.AccessibilityValue : string with get, set" Usage="UIKit.UIImage.AccessibilityValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("accessibilityValue")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAccessibilityValue:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityValue", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityValue:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies a localized string that contains the value of <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element.</summary>
        <value>If the <see cref="T:UIKit.UIImage" /> has a label, returns a string that contains the value of <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element..</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AccessibilityViewIsModal">
      <MemberSignature Language="C#" Value="public virtual bool AccessibilityViewIsModal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AccessibilityViewIsModal" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AccessibilityViewIsModal" />
      <MemberSignature Language="F#" Value="member this.AccessibilityViewIsModal : bool with get, set" Usage="UIKit.UIImage.AccessibilityViewIsModal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("accessibilityViewIsModal")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccessibilityViewIsModal:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether VoiceOver ignores elements in sibling views of this image object.</summary>
        <value>The default value is <see langword="false" />.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AlignmentRectInsets">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIEdgeInsets AlignmentRectInsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIEdgeInsets AlignmentRectInsets" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AlignmentRectInsets" />
      <MemberSignature Language="F#" Value="member this.AlignmentRectInsets : UIKit.UIEdgeInsets" Usage="UIKit.UIImage.AlignmentRectInsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("alignmentRectInsets")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Alignment metadata that provides hints for aligning the <see cref="T:UIKit.UIImage" /> content.</summary>
        <value>The default value is an <see cref="T:UIKit.UIEdgeInsets" /> whose values are all zero.</value>
        <remarks>
          <para>This property can be used to specify an alignment rectangle that is different than the <see cref="T:UIKit.UIImage" />'s <see cref="P:UIKit.UIImage.Size" />. For instance, if an image had a drop-shadow effect, the property could be used to align with the "main" part of the image.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnouncementDidFinishNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString AnnouncementDidFinishNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString AnnouncementDidFinishNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AnnouncementDidFinishNotification" />
      <MemberSignature Language="F#" Value="member this.AnnouncementDidFinishNotification : Foundation.NSString" Usage="UIKit.UIImage.AnnouncementDidFinishNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveAnnouncementDidFinish helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityAnnouncementDidFinishNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for AnnouncementDidFinish</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.AnnouncementDidFinishNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.AnnouncementDidFinishNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AnnouncementNotification">
      <MemberSignature Language="C#" Value="public static int AnnouncementNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 AnnouncementNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AnnouncementNotification" />
      <MemberSignature Language="F#" Value="member this.AnnouncementNotification : int" Usage="UIKit.UIImage.AnnouncementNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityAnnouncementNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the notification posted by an application that an announcement requires assistive technology.</summary>
        <value>
        </value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsJPEG">
      <MemberSignature Language="C#" Value="public Foundation.NSData AsJPEG ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSData AsJPEG() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.AsJPEG" />
      <MemberSignature Language="F#" Value="member this.AsJPEG : unit -&gt; Foundation.NSData" Usage="uIImage.AsJPEG " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Encodes the image with minimal compression (maximum quality) into a <see cref="T:Foundation.NSData" /> byte blob using the JPEG encoding.</summary>
        <returns>The encoded image in an NSData wrapper or null if there was an error.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsJPEG">
      <MemberSignature Language="C#" Value="public Foundation.NSData AsJPEG (nfloat compressionQuality);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSData AsJPEG(valuetype System.nfloat compressionQuality) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.AsJPEG(System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.AsJPEG : nfloat -&gt; Foundation.NSData" Usage="uIImage.AsJPEG compressionQuality" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="compressionQuality" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="compressionQuality">The compression quality to use, 0.0 is the maximum compression (worse quality), and 1.0 minimum compression (best quality)</param>
        <summary>Encodes the image into a <see cref="T:Foundation.NSData" /> byte blob using the JPEG encoding.</summary>
        <returns>The encoded image in an NSData wrapper or null if there was an error.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsPNG">
      <MemberSignature Language="C#" Value="public Foundation.NSData AsPNG ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSData AsPNG() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.AsPNG" />
      <MemberSignature Language="F#" Value="member this.AsPNG : unit -&gt; Foundation.NSData" Usage="uIImage.AsPNG " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Encodes the image into a <see cref="T:Foundation.NSData" /> byte blob using the PNG encoding.</summary>
        <returns>The encoded image in an NSData wrapper or null if there was an error.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssistiveTechnologyKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString AssistiveTechnologyKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString AssistiveTechnologyKey" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AssistiveTechnologyKey" />
      <MemberSignature Language="F#" Value="member this.AssistiveTechnologyKey : Foundation.NSString" Usage="UIKit.UIImage.AssistiveTechnologyKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveAssistiveTechnologyKey helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityAssistiveTechnologyKey", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The string "UIAccessibilityAssistiveTechnologyKey" which can be used to distinguish accessibility notifications..</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AssistiveTouchStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString AssistiveTouchStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString AssistiveTouchStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.AssistiveTouchStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.AssistiveTouchStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.AssistiveTouchStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveAssistiveTouchStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityAssistiveTouchStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for AssistiveTouchStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.AssistiveTouchStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.AssistiveTouchStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BoldTextStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString BoldTextStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString BoldTextStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.BoldTextStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.BoldTextStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.BoldTextStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveBoldTextStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityBoldTextStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for BoldTextStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.BoldTextStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.BoldTextStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CapInsets">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIEdgeInsets CapInsets { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIEdgeInsets CapInsets" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.CapInsets" />
      <MemberSignature Language="F#" Value="member this.CapInsets : UIKit.UIEdgeInsets" Usage="UIKit.UIImage.CapInsets" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("capInsets")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIEdgeInsets</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The portions of a image that are not resized when the image is stretched. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>This is the size of all four end caps. When specified, the stretchable area is all pixels of the image that are not included by the end caps.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CGImage">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGImage CGImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreGraphics.CGImage CGImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.CGImage" />
      <MemberSignature Language="F#" Value="member this.CGImage : CoreGraphics.CGImage" Usage="UIKit.UIImage.CGImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("CGImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The underlying image data. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>This property may be <see langword="null" /> if the UIImage object was initialized with a <see cref="T:CoreImage.CIImage" /> object. If the underlying image data was purged, then accessing this property will force the underlying image to be reloaded from the source.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CIImage">
      <MemberSignature Language="C#" Value="public virtual CoreImage.CIImage CIImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreImage.CIImage CIImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.CIImage" />
      <MemberSignature Language="F#" Value="member this.CIImage : CoreImage.CIImage" Usage="UIKit.UIImage.CIImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("CIImage")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreImage.CIImage</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The underlying <see cref="T:CoreImage.CIImage" /> data. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>This propery may be <see langword="null" /> if the UIImage object was initialized with a <see cref="T:CoreGraphics.CGImage" /> object.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIImage.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClosedCaptioningStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ClosedCaptioningStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ClosedCaptioningStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ClosedCaptioningStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.ClosedCaptioningStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.ClosedCaptioningStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveClosedCaptioningStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityClosedCaptioningStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ClosedCaptioningStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.ClosedCaptioningStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.ClosedCaptioningStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnimatedImage">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage CreateAnimatedImage (string name, double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage CreateAnimatedImage(string name, float64 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.CreateAnimatedImage(System.String,System.Double)" />
      <MemberSignature Language="F#" Value="static member CreateAnimatedImage : string * double -&gt; UIKit.UIImage" Usage="UIKit.UIImage.CreateAnimatedImage (name, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("animatedImageNamed:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="duration" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="name">The path and filename of images to load, without the suffix (i.e. .JPG)</param>
        <param name="duration">How long the animation will last.</param>
        <summary>Creates an animated image from a series of files.</summary>
        <returns>A single animated image.</returns>
        <remarks>
          <para>All images that are to be loaded should be of the same size and scale. This method will load files by appending an integer (in the range of 0-1024) to the end of file and loading that file.  For example, if <paramref name="name" /> was 'my_image', this method will create an animation of all files from 'my_image0' to 'my_image1024' inclusive.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnimatedImage">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage CreateAnimatedImage (UIKit.UIImage[] images, double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage CreateAnimatedImage(class UIKit.UIImage[] images, float64 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.CreateAnimatedImage(UIKit.UIImage[],System.Double)" />
      <MemberSignature Language="F#" Value="static member CreateAnimatedImage : UIKit.UIImage[] * double -&gt; UIKit.UIImage" Usage="UIKit.UIImage.CreateAnimatedImage (images, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("animatedImageWithImages:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="images" Type="UIKit.UIImage[]" />
        <Parameter Name="duration" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="images">A collection of <see cref="T:UIKit.UIImage" />s to make up the animation.</param>
        <param name="duration">The dureation of the animation in seconds.</param>
        <summary>This method will create a animated image from a collection of images.</summary>
        <returns>
        </returns>
        <remarks>
          <para>The source images should all be the same size and scale.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnimatedImage">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage CreateAnimatedImage (string name, UIKit.UIEdgeInsets capInsets, double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage CreateAnimatedImage(string name, valuetype UIKit.UIEdgeInsets capInsets, float64 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.CreateAnimatedImage(System.String,UIKit.UIEdgeInsets,System.Double)" />
      <MemberSignature Language="F#" Value="static member CreateAnimatedImage : string * UIKit.UIEdgeInsets * double -&gt; UIKit.UIImage" Usage="UIKit.UIImage.CreateAnimatedImage (name, capInsets, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("animatedResizableImageNamed:capInsets:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="capInsets" Type="UIKit.UIEdgeInsets" />
        <Parameter Name="duration" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="capInsets">To be added.</param>
        <param name="duration">To be added.</param>
        <summary>Creates a new animated image by loading a set of identically sized and scaled image files that have names that begin with <paramref name="name" /> and that have sequential numerical suffixes.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateAnimatedImage">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage CreateAnimatedImage (string name, UIKit.UIEdgeInsets capInsets, UIKit.UIImageResizingMode resizingMode, double duration);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage CreateAnimatedImage(string name, valuetype UIKit.UIEdgeInsets capInsets, valuetype UIKit.UIImageResizingMode resizingMode, float64 duration) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.CreateAnimatedImage(System.String,UIKit.UIEdgeInsets,UIKit.UIImageResizingMode,System.Double)" />
      <MemberSignature Language="F#" Value="static member CreateAnimatedImage : string * UIKit.UIEdgeInsets * UIKit.UIImageResizingMode * double -&gt; UIKit.UIImage" Usage="UIKit.UIImage.CreateAnimatedImage (name, capInsets, resizingMode, duration)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("animatedResizableImageNamed:capInsets:resizingMode:duration:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="capInsets" Type="UIKit.UIEdgeInsets" />
        <Parameter Name="resizingMode" Type="UIKit.UIImageResizingMode" />
        <Parameter Name="duration" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="name">The path and filename of images to load, without the suffix (i.e. .JPG)</param>
        <param name="capInsets">This argument lets you specify the top, left, bottom and right inset (the sizes of your images).</param>
        <param name="resizingMode">Controls whether the areas are stretched or tiled.</param>
        <param name="duration">Duration of the animation.</param>
        <summary>Factory method to create an animated image with end caps and the specified <paramref name="resizingMode" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>
	    Consider the following image, the capInsets specify these borders:
	  </para>
          <para>
            <img href="insets.png" />
          </para>
          <para>The resizing mode controls whether the image is stretched or tiled</para>
          <para>
            <img href="inset-resizingMode.png" />
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResizableImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage CreateResizableImage (UIKit.UIEdgeInsets capInsets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage CreateResizableImage(valuetype UIKit.UIEdgeInsets capInsets) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.CreateResizableImage(UIKit.UIEdgeInsets)" />
      <MemberSignature Language="F#" Value="abstract member CreateResizableImage : UIKit.UIEdgeInsets -&gt; UIKit.UIImage&#xA;override this.CreateResizableImage : UIKit.UIEdgeInsets -&gt; UIKit.UIImage" Usage="uIImage.CreateResizableImage capInsets" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("resizableImageWithCapInsets:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capInsets" Type="UIKit.UIEdgeInsets" />
      </Parameters>
      <Docs>
        <param name="capInsets">This argument lets you specify the top, left, bottom and right inset (the sizes of your images).</param>
        <summary>Creates a new image from the current instance and applies the specified cap insets.</summary>
        <returns>A new image object with the specified cap insets</returns>
        <remarks>
          <para>

	    Use this method to turn an existing UIImage into a UIImage
	    that can be resized with the specified parameters.  The
	    region described by the UIEdgeInsets will be stretched
	    when rendered.  The corners will be kept intact, the
	    borders will stretch along their side and the center will
	    be tiled.

	  </para>
          <para>

	    There are some scenarios where this method can crash in
	    some versions of the operating system.  See
	    http://openradar.appspot.com/11411000 for more details.
	    If you experience those crashes, you should try to replace
	    this with the <see cref="M:UIKit.UIImage.StretchableImage" /> method
	    instead.

	  </para>
          <para>

	    For best performace, it is best to make
	    the region that stretches 1x1 pixels.

          </para>
          <para>
	    Consider the following image, the capInsets specify these borders:
	  </para>
          <para>
            <img href="insets.png" />
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateResizableImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage CreateResizableImage (UIKit.UIEdgeInsets capInsets, UIKit.UIImageResizingMode resizingMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage CreateResizableImage(valuetype UIKit.UIEdgeInsets capInsets, valuetype UIKit.UIImageResizingMode resizingMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.CreateResizableImage(UIKit.UIEdgeInsets,UIKit.UIImageResizingMode)" />
      <MemberSignature Language="F#" Value="abstract member CreateResizableImage : UIKit.UIEdgeInsets * UIKit.UIImageResizingMode -&gt; UIKit.UIImage&#xA;override this.CreateResizableImage : UIKit.UIEdgeInsets * UIKit.UIImageResizingMode -&gt; UIKit.UIImage" Usage="uIImage.CreateResizableImage (capInsets, resizingMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("resizableImageWithCapInsets:resizingMode:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="capInsets" Type="UIKit.UIEdgeInsets" />
        <Parameter Name="resizingMode" Type="UIKit.UIImageResizingMode" />
      </Parameters>
      <Docs>
        <param name="capInsets">This argument lets you specify the top, left, bottom and right inset (the sizes of your images).</param>
        <param name="resizingMode">Controls whether the areas are stretched or tiled.</param>
        <summary>Creates a new image, based on the current, with the specified <paramref name="capInsets" /> and <paramref name="resizingMode" />.</summary>
        <returns>
        </returns>
        <remarks>
          <para>
	    Consider the following image, the capInsets specify these borders:
	  </para>
          <para>
            <img href="insets.png" />
          </para>
          <para>The resizing mode controls whether the image is stretched or tiled</para>
          <para>
            <img href="inset-resizingMode.png" />
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentScale">
      <MemberSignature Language="C#" Value="public virtual nfloat CurrentScale { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nfloat CurrentScale" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.CurrentScale" />
      <MemberSignature Language="F#" Value="member this.CurrentScale : nfloat" Usage="UIKit.UIImage.CurrentScale" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("scale")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nfloat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The scale of the image.</summary>
        <value>Typically this value is 2.0 on Retina-display devices.</value>
        <remarks>
          <para>The resolution of the <see cref="T:UIKit.UIImage" /> in pixels, is equal to this value times the <see cref="P:UIKit.UIImage.Size" />. Images for Retina-display devices will typically have a <see cref="P:UIKit.UIImage.CurrentScale" /> of 2.0. Files whose names end with "@2x" will automatically load with a <see cref="P:UIKit.UIImage.CurrentScale" /> of 2.0</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DarkerSystemColorsStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString DarkerSystemColorsStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString DarkerSystemColorsStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.DarkerSystemColorsStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.DarkerSystemColorsStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.DarkerSystemColorsStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveDarkerSystemColorsStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityDarkerSystemColorsStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for DarkerSystemColorsStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.DarkerSystemColorsStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.DarkerSystemColorsStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (CoreGraphics.CGPoint point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(valuetype CoreGraphics.CGPoint point) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.Draw(CoreGraphics.CGPoint)" />
      <MemberSignature Language="F#" Value="abstract member Draw : CoreGraphics.CGPoint -&gt; unit&#xA;override this.Draw : CoreGraphics.CGPoint -&gt; unit" Usage="uIImage.Draw point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawAtPoint:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
      </Parameters>
      <Docs>
        <param name="point">Position where the image will be drawn.</param>
        <summary>Draws the image at the specified position.</summary>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.Draw(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member Draw : CoreGraphics.CGRect -&gt; unit&#xA;override this.Draw : CoreGraphics.CGRect -&gt; unit" Usage="uIImage.Draw rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawInRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle in which to draw the image.</param>
        <summary>This method will draw the image (scaling as necessary) in the rectangle specified.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (CoreGraphics.CGPoint point, CoreGraphics.CGBlendMode blendMode, nfloat alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(valuetype CoreGraphics.CGPoint point, valuetype CoreGraphics.CGBlendMode blendMode, valuetype System.nfloat alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.Draw(CoreGraphics.CGPoint,CoreGraphics.CGBlendMode,System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member Draw : CoreGraphics.CGPoint * CoreGraphics.CGBlendMode * nfloat -&gt; unit&#xA;override this.Draw : CoreGraphics.CGPoint * CoreGraphics.CGBlendMode * nfloat -&gt; unit" Usage="uIImage.Draw (point, blendMode, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawAtPoint:blendMode:alpha:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="CoreGraphics.CGPoint" />
        <Parameter Name="blendMode" Type="CoreGraphics.CGBlendMode" />
        <Parameter Name="alpha" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="point">To be added.</param>
        <param name="blendMode">To be added.</param>
        <param name="alpha">To be added.</param>
        <summary>Draws the <see cref="T:UIKit.UIImage" /> into the current graphics context at the specified <param name="point" />, with blending mode and alpha as specified.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Draw">
      <MemberSignature Language="C#" Value="public virtual void Draw (CoreGraphics.CGRect rect, CoreGraphics.CGBlendMode blendMode, nfloat alpha);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Draw(valuetype CoreGraphics.CGRect rect, valuetype CoreGraphics.CGBlendMode blendMode, valuetype System.nfloat alpha) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.Draw(CoreGraphics.CGRect,CoreGraphics.CGBlendMode,System.nfloat)" />
      <MemberSignature Language="F#" Value="abstract member Draw : CoreGraphics.CGRect * CoreGraphics.CGBlendMode * nfloat -&gt; unit&#xA;override this.Draw : CoreGraphics.CGRect * CoreGraphics.CGBlendMode * nfloat -&gt; unit" Usage="uIImage.Draw (rect, blendMode, alpha)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawInRect:blendMode:alpha:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
        <Parameter Name="blendMode" Type="CoreGraphics.CGBlendMode" />
        <Parameter Name="alpha" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="rect">To be added.</param>
        <param name="blendMode">To be added.</param>
        <param name="alpha">To be added.</param>
        <summary>Draws the <see cref="T:UIKit.UIImage" /> into the current graphics context in the specified <param name="rect" />, with blending mode and alpha as specified.</summary>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawAsPatternInRect">
      <MemberSignature Language="C#" Value="public virtual void DrawAsPatternInRect (CoreGraphics.CGRect rect);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DrawAsPatternInRect(valuetype CoreGraphics.CGRect rect) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.DrawAsPatternInRect(CoreGraphics.CGRect)" />
      <MemberSignature Language="F#" Value="abstract member DrawAsPatternInRect : CoreGraphics.CGRect -&gt; unit&#xA;override this.DrawAsPatternInRect : CoreGraphics.CGRect -&gt; unit" Usage="uIImage.DrawAsPatternInRect rect" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("drawAsPatternInRect:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rect" Type="CoreGraphics.CGRect" />
      </Parameters>
      <Docs>
        <param name="rect">The rectangle in which to draw the image (using the coordinate system of the graphics context).</param>
        <summary>This method will draw an image in the specified rectangle.</summary>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Duration">
      <MemberSignature Language="C#" Value="public virtual double Duration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 Duration" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.Duration" />
      <MemberSignature Language="F#" Value="member this.Duration : double" Usage="UIKit.UIImage.Duration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("duration")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The time interval to display the animated image. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>The value is 0.0 for non-animated images.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ElementFocusedNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ElementFocusedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ElementFocusedNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ElementFocusedNotification" />
      <MemberSignature Language="F#" Value="member this.ElementFocusedNotification : Foundation.NSString" Usage="UIKit.UIImage.ElementFocusedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveElementFocused helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityElementFocusedNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ElementFocused</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.ElementFocusedNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.ElementFocusedNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="abstract member EncodeTo : Foundation.NSCoder -&gt; unit&#xA;override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="uIImage.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FlipsForRightToLeftLayoutDirection">
      <MemberSignature Language="C#" Value="public virtual bool FlipsForRightToLeftLayoutDirection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FlipsForRightToLeftLayoutDirection" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.FlipsForRightToLeftLayoutDirection" />
      <MemberSignature Language="F#" Value="member this.FlipsForRightToLeftLayoutDirection : bool" Usage="UIKit.UIImage.FlipsForRightToLeftLayoutDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("flipsForRightToLeftLayoutDirection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether this image is mirrored when layout is right-to-left.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FocusedElementKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString FocusedElementKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString FocusedElementKey" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.FocusedElementKey" />
      <MemberSignature Language="F#" Value="member this.FocusedElementKey : Foundation.NSString" Usage="UIKit.UIImage.FocusedElementKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveFocusedElementKey helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityFocusedElementKey", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A string constant used by accessibility APIs (see <see cref="M:UIAccessibility.FocusedElement" />) to identify the focused element.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromBundle">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage FromBundle (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage FromBundle(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.FromBundle(System.String)" />
      <MemberSignature Language="F#" Value="static member FromBundle : string -&gt; UIKit.UIImage" Usage="UIKit.UIImage.FromBundle name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("This API is thread-safe only on 9.0 and later.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Loads an image from the bundle with the specified path name.</param>
        <summary>Loads an image relative to the application bundle, and caches its result.</summary>
        <returns>
        </returns>
        <remarks>
          <para>The underlying UIKit implementation keeps a cache of all images requested.   If you do not want UIKit to keep a cache, use FromFile or FromFileUncached.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromBundle">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage FromBundle (string name, Foundation.NSBundle bundle, UIKit.UITraitCollection traitCollection);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage FromBundle(string name, class Foundation.NSBundle bundle, class UIKit.UITraitCollection traitCollection) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.FromBundle(System.String,Foundation.NSBundle,UIKit.UITraitCollection)" />
      <MemberSignature Language="F#" Value="static member FromBundle : string * Foundation.NSBundle * UIKit.UITraitCollection -&gt; UIKit.UIImage" Usage="UIKit.UIImage.FromBundle (name, bundle, traitCollection)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("This API is thread-safe only on 9.0 and later.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageNamed:inBundle:compatibleWithTraitCollection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
        <Parameter Name="traitCollection" Type="UIKit.UITraitCollection" />
      </Parameters>
      <Docs>
        <param name="name">Loads an image from the bundle with the specified path name.</param>
        <param name="bundle">
          <para>The bundle in which the image file or asset catalog is located.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="traitCollection">
          <para>Traits describing the desired image to be retrieved.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Gets an image from the specified bundle that is compatible with the specified trait collection.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromFile">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage FromFile (string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage FromFile(string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.FromFile(System.String)" />
      <MemberSignature Language="F#" Value="static member FromFile : string -&gt; UIKit.UIImage" Usage="UIKit.UIImage.FromFile filename" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageWithContentsOfFile:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="filename">Contains the path of the image file to load.</param>
        <summary>Create an image object from the specified file.</summary>
        <returns>A <see cref="T:UIKit.UIImage" /> object, or <see langword="null" /> if the file could not be found or the image cannot be created.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage FromImage (CoreGraphics.CGImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage FromImage(class CoreGraphics.CGImage image) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.FromImage(CoreGraphics.CGImage)" />
      <MemberSignature Language="F#" Value="static member FromImage : CoreGraphics.CGImage -&gt; UIKit.UIImage" Usage="UIKit.UIImage.FromImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageWithCGImage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="CoreGraphics.CGImage" />
      </Parameters>
      <Docs>
        <param name="image">Contains the Quartz image to use.</param>
        <summary>Creates a new image oject from a Quartz image.</summary>
        <returns>A new image object, or <see langword="null" /> if the image cannot be created.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage FromImage (CoreImage.CIImage image);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage FromImage(class CoreImage.CIImage image) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.FromImage(CoreImage.CIImage)" />
      <MemberSignature Language="F#" Value="static member FromImage : CoreImage.CIImage -&gt; UIKit.UIImage" Usage="UIKit.UIImage.FromImage image" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageWithCIImage:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="CoreImage.CIImage" />
      </Parameters>
      <Docs>
        <param name="image">Contains the Quartz image to use.</param>
        <summary>Factory method to create a <see cref="T:UIKit.UIImage" /> from a Core Image <see cref="T:CoreImage.CIImage" />.</summary>
        <returns>A new image object, or <see langword="null" /> if the image cannot be created.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage FromImage (CoreGraphics.CGImage image, nfloat scale, UIKit.UIImageOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage FromImage(class CoreGraphics.CGImage image, valuetype System.nfloat scale, valuetype UIKit.UIImageOrientation orientation) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.FromImage(CoreGraphics.CGImage,System.nfloat,UIKit.UIImageOrientation)" />
      <MemberSignature Language="F#" Value="static member FromImage : CoreGraphics.CGImage * nfloat * UIKit.UIImageOrientation -&gt; UIKit.UIImage" Usage="UIKit.UIImage.FromImage (image, scale, orientation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageWithCGImage:scale:orientation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="image" Type="CoreGraphics.CGImage" />
        <Parameter Name="scale" Type="System.nfloat" />
        <Parameter Name="orientation" Type="UIKit.UIImageOrientation" />
      </Parameters>
      <Docs>
        <param name="image">To be added.</param>
        <param name="scale">To be added.</param>
        <param name="orientation">To be added.</param>
        <summary>Static factory method to create a <see cref="T:UIKit.UIImage" /> backed by the specified <param name="image" />, scaled and oriented as specified.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromImage">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage FromImage (CoreImage.CIImage ciImage, nfloat scale, UIKit.UIImageOrientation orientation);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage FromImage(class CoreImage.CIImage ciImage, valuetype System.nfloat scale, valuetype UIKit.UIImageOrientation orientation) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.FromImage(CoreImage.CIImage,System.nfloat,UIKit.UIImageOrientation)" />
      <MemberSignature Language="F#" Value="static member FromImage : CoreImage.CIImage * nfloat * UIKit.UIImageOrientation -&gt; UIKit.UIImage" Usage="UIKit.UIImage.FromImage (ciImage, scale, orientation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageWithCIImage:scale:orientation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ciImage" Type="CoreImage.CIImage" />
        <Parameter Name="scale" Type="System.nfloat" />
        <Parameter Name="orientation" Type="UIKit.UIImageOrientation" />
      </Parameters>
      <Docs>
        <param name="ciImage">To be added.</param>
        <param name="scale">To be added.</param>
        <param name="orientation">To be added.</param>
        <summary>Static factory method to create a <see cref="T:UIKit.UIImage" /> backed by the specified <param name="image" />, scaled and oriented as specified.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromResource">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage FromResource (System.Reflection.Assembly assembly, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage FromResource(class System.Reflection.Assembly assembly, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.FromResource(System.Reflection.Assembly,System.String)" />
      <MemberSignature Language="F#" Value="static member FromResource : System.Reflection.Assembly * string -&gt; UIKit.UIImage" Usage="UIKit.UIImage.FromResource (assembly, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="assembly">The resource is looked up in this assembly.   If the value is null, the resource is looked up in the assembly that calls this method.</param>
        <param name="name">The name of the embedded resource</param>
        <summary>Loads an image from a resource embedded in the assembly.</summary>
        <returns>The image loaded from the specified assembly.</returns>
        <remarks>
          <para>If the passed parameter for assembly is null, then the resource is looked up in the calling assembly using <see cref="M:System.Reflection.Assembly.GetCallingAssembly" />.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImageFlippedForRightToLeftLayoutDirection">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage GetImageFlippedForRightToLeftLayoutDirection ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage GetImageFlippedForRightToLeftLayoutDirection() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.GetImageFlippedForRightToLeftLayoutDirection" />
      <MemberSignature Language="F#" Value="abstract member GetImageFlippedForRightToLeftLayoutDirection : unit -&gt; UIKit.UIImage&#xA;override this.GetImageFlippedForRightToLeftLayoutDirection : unit -&gt; UIKit.UIImage" Usage="uIImage.GetImageFlippedForRightToLeftLayoutDirection " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageFlippedForRightToLeftLayoutDirection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Developers can override this method to provide an appropriate image for left-to-right layouts.</summary>
        <returns>The default value is the original image. (Not mirrored or transformed in any way.)</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetImageWithHorizontallyFlippedOrientation">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage GetImageWithHorizontallyFlippedOrientation ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage GetImageWithHorizontallyFlippedOrientation() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.GetImageWithHorizontallyFlippedOrientation" />
      <MemberSignature Language="F#" Value="abstract member GetImageWithHorizontallyFlippedOrientation : unit -&gt; UIKit.UIImage&#xA;override this.GetImageWithHorizontallyFlippedOrientation : unit -&gt; UIKit.UIImage" Usage="uIImage.GetImageWithHorizontallyFlippedOrientation " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageWithHorizontallyFlippedOrientation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a mirror-image copy of this <see cref="T:UIKit.UIImage" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetItemProviderVisibilityForTypeIdentifier">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSItemProviderRepresentationVisibility GetItemProviderVisibilityForTypeIdentifier (string typeIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype Foundation.NSItemProviderRepresentationVisibility GetItemProviderVisibilityForTypeIdentifier(string typeIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.GetItemProviderVisibilityForTypeIdentifier(System.String)" />
      <MemberSignature Language="F#" Value="abstract member GetItemProviderVisibilityForTypeIdentifier : string -&gt; Foundation.NSItemProviderRepresentationVisibility&#xA;override this.GetItemProviderVisibilityForTypeIdentifier : string -&gt; Foundation.NSItemProviderRepresentationVisibility" Usage="uIImage.GetItemProviderVisibilityForTypeIdentifier typeIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("itemProviderVisibilityForRepresentationWithTypeIdentifier:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSItemProviderRepresentationVisibility</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeIdentifier">To be added.</param>
        <summary>Gets the default representation visibility for the UTI <param name="typeIdentifier" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage GetObject (Foundation.NSData data, string typeIdentifier, out Foundation.NSError outError);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage GetObject(class Foundation.NSData data, string typeIdentifier, [out] class Foundation.NSError&amp; outError) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.GetObject(Foundation.NSData,System.String,Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="static member GetObject : Foundation.NSData * string *  -&gt; UIKit.UIImage" Usage="UIKit.UIImage.GetObject (data, typeIdentifier, outError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("objectWithItemProviderData:typeIdentifier:error:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="typeIdentifier" Type="System.String" />
        <Parameter Name="outError" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="typeIdentifier">To be added.</param>
        <param name="outError">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Static factory method to create a <see cref="T:UIKit.UImage" /> from <param name="data" />, with <param name="typeIdentifier" /> being the appropriate UTI.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GrayscaleStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GrayscaleStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GrayscaleStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.GrayscaleStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.GrayscaleStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.GrayscaleStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveGrayscaleStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityGrayscaleStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for GrayscaleStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.GrayscaleStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.GrayscaleStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GuidedAccessStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString GuidedAccessStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString GuidedAccessStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.GuidedAccessStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.GuidedAccessStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.GuidedAccessStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveGuidedAccessStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityGuidedAccessStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for GuidedAccessStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.GuidedAccessStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.GuidedAccessStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HearingDevicePairedEarDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString HearingDevicePairedEarDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString HearingDevicePairedEarDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.HearingDevicePairedEarDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.HearingDevicePairedEarDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.HearingDevicePairedEarDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveHearingDevicePairedEarDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityHearingDevicePairedEarDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for HearingDevicePairedEarDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.HearingDevicePairedEarDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.HearingDevicePairedEarDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageAsset">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImageAsset ImageAsset { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImageAsset ImageAsset" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ImageAsset" />
      <MemberSignature Language="F#" Value="member this.ImageAsset : UIKit.UIImageAsset" Usage="UIKit.UIImage.ImageAsset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("imageAsset")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImageAsset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an image asset with which the image is associated.</summary>
        <value>
        </value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageRendererFormat">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIGraphicsImageRendererFormat ImageRendererFormat { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIGraphicsImageRendererFormat ImageRendererFormat" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ImageRendererFormat" />
      <MemberSignature Language="F#" Value="member this.ImageRendererFormat : UIKit.UIGraphicsImageRendererFormat" Usage="UIKit.UIImage.ImageRendererFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("imageRendererFormat")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIGraphicsImageRendererFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the best <see cref="T:UIKit.UIGraphicsImageRendererFormat" /> for the <see cref="T:UIKit.UIImage" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Images">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage[] Images { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIImage[] Images" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.Images" />
      <MemberSignature Language="F#" Value="member this.Images : UIKit.UIImage[]" Usage="UIKit.UIImage.Images" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("images")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:UIKit.UIImage" /> objects that make up an animated iamge.</summary>
        <value>
        </value>
        <remarks>
          <para>Will be <see langword="null" /> for a non-animated image.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageWithAlignmentRectInsets">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage ImageWithAlignmentRectInsets (UIKit.UIEdgeInsets alignmentInsets);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage ImageWithAlignmentRectInsets(valuetype UIKit.UIEdgeInsets alignmentInsets) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.ImageWithAlignmentRectInsets(UIKit.UIEdgeInsets)" />
      <MemberSignature Language="F#" Value="abstract member ImageWithAlignmentRectInsets : UIKit.UIEdgeInsets -&gt; UIKit.UIImage&#xA;override this.ImageWithAlignmentRectInsets : UIKit.UIEdgeInsets -&gt; UIKit.UIImage" Usage="uIImage.ImageWithAlignmentRectInsets alignmentInsets" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageWithAlignmentRectInsets:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="alignmentInsets" Type="UIKit.UIEdgeInsets" />
      </Parameters>
      <Docs>
        <param name="alignmentInsets">Alignment metadata that is to be applied to the new image.</param>
        <summary>Creates a <see cref="T:UIKit.UIImage" /> based on <c>this</c>, with the specified <paramref name="alignmentInsets" />.</summary>
        <returns>A new image.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageWithRenderingMode">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage ImageWithRenderingMode (UIKit.UIImageRenderingMode renderingMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage ImageWithRenderingMode(valuetype UIKit.UIImageRenderingMode renderingMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.ImageWithRenderingMode(UIKit.UIImageRenderingMode)" />
      <MemberSignature Language="F#" Value="abstract member ImageWithRenderingMode : UIKit.UIImageRenderingMode -&gt; UIKit.UIImage&#xA;override this.ImageWithRenderingMode : UIKit.UIImageRenderingMode -&gt; UIKit.UIImage" Usage="uIImage.ImageWithRenderingMode renderingMode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageWithRenderingMode:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="renderingMode" Type="UIKit.UIImageRenderingMode" />
      </Parameters>
      <Docs>
        <param name="renderingMode">Rendering mode to be used for the new image.</param>
        <summary>Creates a <see cref="T:UIKit.UIImage" /> based on the current one, with the specified <paramref name="renderingMode" />.</summary>
        <returns>New image with  specified rendering mode.</returns>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvertColorsStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString InvertColorsStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString InvertColorsStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.InvertColorsStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.InvertColorsStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.InvertColorsStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveInvertColorsStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityInvertColorsStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for InvertColorsStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.InvertColorsStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.InvertColorsStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAccessibilityElement">
      <MemberSignature Language="C#" Value="public virtual bool IsAccessibilityElement { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAccessibilityElement" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.IsAccessibilityElement" />
      <MemberSignature Language="F#" Value="member this.IsAccessibilityElement : bool with get, set" Usage="UIKit.UIImage.IsAccessibilityElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isAccessibilityElement")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setIsAccessibilityElement:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether this image is an accessibility object that an assistive app can access.</summary>
        <value>
          <see langword="true" /> if the <see cref="T:UIKit.UIImage" /> is an accessibility element.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LayoutChangedNotification">
      <MemberSignature Language="C#" Value="public static int LayoutChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 LayoutChangedNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.LayoutChangedNotification" />
      <MemberSignature Language="F#" Value="member this.LayoutChangedNotification : int" Usage="UIKit.UIImage.LayoutChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityLayoutChangedNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the notification posted by an application that the layout of a screen has changed.</summary>
        <value>The layer that the view is being rendered on.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LeftCapWidth">
      <MemberSignature Language="C#" Value="public virtual nint LeftCapWidth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint LeftCapWidth" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.LeftCapWidth" />
      <MemberSignature Language="F#" Value="member this.LeftCapWidth : nint" Usage="UIKit.UIImage.LeftCapWidth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("leftCapWidth")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The width of the left cap.</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
        <altmember cref="P:UIKit.UIImage.CapInsets" />
      </Docs>
    </Member>
    <Member MemberName="LoadData">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSProgress LoadData (string typeIdentifier, Action&lt;Foundation.NSData,Foundation.NSError&gt; completionHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSProgress LoadData(string typeIdentifier, class System.Action`2&lt;class Foundation.NSData, class Foundation.NSError&gt; completionHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.LoadData(System.String,System.Action{Foundation.NSData,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member LoadData : string * Action&lt;Foundation.NSData, Foundation.NSError&gt; -&gt; Foundation.NSProgress&#xA;override this.LoadData : string * Action&lt;Foundation.NSData, Foundation.NSError&gt; -&gt; Foundation.NSProgress" Usage="uIImage.LoadData (typeIdentifier, completionHandler)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSItemProviderWriting.LoadData(System.String,System.Action{Foundation.NSData,Foundation.NSError})</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("loadDataWithTypeIdentifier:forItemProviderCompletionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSProgress</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
        <Parameter Name="completionHandler" Type="System.Action&lt;Foundation.NSData,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V4))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="typeIdentifier">A Universal Type Identifier (UTI) indicating the type of data to load.</param>
        <param name="completionHandler">The method called after the data is loaded.</param>
        <summary>Loads data for the identified type from an item provider.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSData&gt; LoadDataAsync (string typeIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSData&gt; LoadDataAsync(string typeIdentifier) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.LoadDataAsync(System.String)" />
      <MemberSignature Language="F#" Value="abstract member LoadDataAsync : string -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;&#xA;override this.LoadDataAsync : string -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;" Usage="uIImage.LoadDataAsync typeIdentifier" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="typeIdentifier">A Universal Type Identifier (UTI) indicating the type of data to load.</param>
        <summary>Asynchronously loads data for the identified type from an item provider, returning a task that contains the data.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadDataAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSData&gt; LoadDataAsync (string typeIdentifier, out Foundation.NSProgress result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSData&gt; LoadDataAsync(string typeIdentifier, [out] class Foundation.NSProgress&amp; result) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.LoadDataAsync(System.String,Foundation.NSProgress@)" />
      <MemberSignature Language="F#" Value="abstract member LoadDataAsync : string *  -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;&#xA;override this.LoadDataAsync : string *  -&gt; System.Threading.Tasks.Task&lt;Foundation.NSData&gt;" Usage="uIImage.LoadDataAsync (typeIdentifier, result)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="typeIdentifier" Type="System.String" />
        <Parameter Name="result" Type="Foundation.NSProgress" RefType="out" />
      </Parameters>
      <Docs>
        <param name="typeIdentifier">A Universal Type Identifier (UTI) indicating the type of data to load.</param>
        <param name="result">The progress of the operation.</param>
        <summary>Asynchronously loads data for the identified type from an item provider, returning a task that contains the data, and storing the data in <paramref name="result" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromData">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage LoadFromData (Foundation.NSData data);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage LoadFromData(class Foundation.NSData data) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.LoadFromData(Foundation.NSData)" />
      <MemberSignature Language="F#" Value="static member LoadFromData : Foundation.NSData -&gt; UIKit.UIImage" Usage="UIKit.UIImage.LoadFromData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageWithData:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
      </Parameters>
      <Docs>
        <param name="data">The image data to create the image from.</param>
        <summary>Will create an image from data that originated from a file or was programmatically created.</summary>
        <returns>A new image object, or <see langword="null" /> if the image could not be created.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadFromData">
      <MemberSignature Language="C#" Value="public static UIKit.UIImage LoadFromData (Foundation.NSData data, nfloat scale);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class UIKit.UIImage LoadFromData(class Foundation.NSData data, valuetype System.nfloat scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.LoadFromData(Foundation.NSData,System.nfloat)" />
      <MemberSignature Language="F#" Value="static member LoadFromData : Foundation.NSData * nfloat -&gt; UIKit.UIImage" Usage="UIKit.UIImage.LoadFromData (data, scale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("imageWithData:scale:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="scale" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="data">The image data to create the image from.</param>
        <param name="scale">The scaled image.</param>
        <summary>Factory method to create a <see cref="T:UIKit.UIImage" /> from the provided <paramref name="data" />, at the specified <paramref name="scale" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MonoAudioStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString MonoAudioStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString MonoAudioStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.MonoAudioStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.MonoAudioStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.MonoAudioStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveMonoAudioStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityMonoAudioStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for MonoAudioStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.MonoAudioStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.MonoAudioStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotificationSwitchControlIdentifier">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NotificationSwitchControlIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NotificationSwitchControlIdentifier" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.NotificationSwitchControlIdentifier" />
      <MemberSignature Language="F#" Value="member this.NotificationSwitchControlIdentifier : Foundation.NSString" Usage="UIKit.UIImage.NotificationSwitchControlIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityNotificationSwitchControlIdentifier", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for NotificationSwitchContr</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.NotificationSwitchControlIdentifier, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.NotificationSwitchControlIdentifier, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotificationVoiceOverIdentifier">
      <MemberSignature Language="C#" Value="public static Foundation.NSString NotificationVoiceOverIdentifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString NotificationVoiceOverIdentifier" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.NotificationVoiceOverIdentifier" />
      <MemberSignature Language="F#" Value="member this.NotificationVoiceOverIdentifier : Foundation.NSString" Usage="UIKit.UIImage.NotificationVoiceOverIdentifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityNotificationVoiceOverIdentifier", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for NotificationVoiceOv</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.NotificationVoiceOverIdentifier, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.NotificationVoiceOverIdentifier, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Orientation">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImageOrientation Orientation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIImageOrientation Orientation" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.Orientation" />
      <MemberSignature Language="F#" Value="member this.Orientation : UIKit.UIImageOrientation" Usage="UIKit.UIImage.Orientation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("imageOrientation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImageOrientation</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The orienation of the image. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>The default value is the "up" orientation. If the underlying image has metadata that contains orientation information, then this property will reflect the value of that metadata.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PageScrolledNotification">
      <MemberSignature Language="C#" Value="public static int PageScrolledNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 PageScrolledNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.PageScrolledNotification" />
      <MemberSignature Language="F#" Value="member this.PageScrolledNotification : int" Usage="UIKit.UIImage.PageScrolledNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityPageScrolledNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the notification posted by an application that a scroll action has finished.</summary>
        <value>
        </value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PauseAssistiveTechnologyNotification">
      <MemberSignature Language="C#" Value="public static int PauseAssistiveTechnologyNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 PauseAssistiveTechnologyNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.PauseAssistiveTechnologyNotification" />
      <MemberSignature Language="F#" Value="member this.PauseAssistiveTechnologyNotification : int" Usage="UIKit.UIImage.PauseAssistiveTechnologyNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityPauseAssistiveTechnologyNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pauses assistive technology notifications.</summary>
        <value>
        </value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PreferredPresentationSizeForItemProvider">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize PreferredPresentationSizeForItemProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize PreferredPresentationSizeForItemProvider" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.PreferredPresentationSizeForItemProvider" />
      <MemberSignature Language="F#" Value="member this.PreferredPresentationSizeForItemProvider : CoreGraphics.CGSize" Usage="UIKit.UIImage.PreferredPresentationSizeForItemProvider" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:UIKit.IUIItemProviderPresentationSizeProviding.PreferredPresentationSizeForItemProvider</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("preferredPresentationSizeForItemProvider")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadableTypeIdentifiers">
      <MemberSignature Language="C#" Value="public static string[] ReadableTypeIdentifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string[] ReadableTypeIdentifiers" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ReadableTypeIdentifiers" />
      <MemberSignature Language="F#" Value="member this.ReadableTypeIdentifiers : string[]" Usage="UIKit.UIImage.ReadableTypeIdentifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("readableTypeIdentifiersForItemProvider")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("readableTypeIdentifiersForItemProvider", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the array of Uniform Type Identifiers (UTIs) for the image.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceMotionStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ReduceMotionStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ReduceMotionStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ReduceMotionStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.ReduceMotionStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.ReduceMotionStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveReduceMotionStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityReduceMotionStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ReduceMotionStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.ReduceMotionStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.ReduceMotionStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReduceTransparencyStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ReduceTransparencyStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ReduceTransparencyStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ReduceTransparencyStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.ReduceTransparencyStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.ReduceTransparencyStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveReduceTransparencyStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityReduceTransparencyStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ReduceTransparencyStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.ReduceTransparencyStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.ReduceTransparencyStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RenderingMode">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImageRenderingMode RenderingMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIImageRenderingMode RenderingMode" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.RenderingMode" />
      <MemberSignature Language="F#" Value="member this.RenderingMode : UIKit.UIImageRenderingMode" Usage="UIKit.UIImage.RenderingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("renderingMode")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImageRenderingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The default value is <see cref="P:UIKit.UIRenderingMode.Automatic" />.</summary>
        <value>The rendering mode of the image.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResizingMode">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImageResizingMode ResizingMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIImageResizingMode ResizingMode" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ResizingMode" />
      <MemberSignature Language="F#" Value="member this.ResizingMode : UIKit.UIImageResizingMode" Usage="UIKit.UIImage.ResizingMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("resizingMode")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImageResizingMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The resizing mode used by the image.</summary>
        <value>The default value is <see cref="F:UIKit.UIImageResizingMode.Tile" />.</value>
        <remarks>
          <para>The system may not always use the resizing mode specified by this property. Rather, it will use the "fastest mode possible while still retaining the desired visual appearance."</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
        <altmember cref="M:UIKit.UIImage.CreateAnimatedImage(string,UIKit.UIEdgeInsets,UIKit.UIImageResizingMode,double)" />
        <altmember cref="M:UIKit.UIImage.CreateResizableImage(UIKit.UIEdgeInsets,UIKit.UIImageResizingMode)" />
      </Docs>
    </Member>
    <Member MemberName="ResumeAssistiveTechnologyNotification">
      <MemberSignature Language="C#" Value="public static int ResumeAssistiveTechnologyNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 ResumeAssistiveTechnologyNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ResumeAssistiveTechnologyNotification" />
      <MemberSignature Language="F#" Value="member this.ResumeAssistiveTechnologyNotification : int" Usage="UIKit.UIImage.ResumeAssistiveTechnologyNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityResumeAssistiveTechnologyNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Resumes assistive technology notifications.</summary>
        <value>
        </value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SaveToPhotosAlbum">
      <MemberSignature Language="C#" Value="public void SaveToPhotosAlbum (UIKit.UIImage.SaveStatus status);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SaveToPhotosAlbum(class UIKit.UIImage/SaveStatus status) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.SaveToPhotosAlbum(UIKit.UIImage.SaveStatus)" />
      <MemberSignature Language="F#" Value="member this.SaveToPhotosAlbum : UIKit.UIImage.SaveStatus -&gt; unit" Usage="uIImage.SaveToPhotosAlbum status" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="status" Type="UIKit.UIImage+SaveStatus" />
      </Parameters>
      <Docs>
        <param name="status">If not-null, a method to invoke when the file has been saved to the Camera Album.</param>
        <summary>Saves the specified image into the Photos Album.</summary>
        <remarks>
          <para>On systems without a camera, the Camera Album is the Saved Photos album instead.   This can not be changed.</para>
          <para>If a non-null value was specified for <paramref name="status" /> then the method is invoked on completion with both the image reference and an if there was an error, a non-null instance of NSError.</para>
          <para>This method requires the developer to request, and the user to grant, access to the Photos album. (See <format type="text/html"><a href="https://developer.xamarin.com/guides/ios/platform_features/introduction-to-ios10/security-privacy-enhancements/#Accessing_Private_User_Data">Accessing Private User Data</a></format>.)</para>
          <para>This method should only be invoked on the main thread (see <see cref="M:Foundation.NSObject.InvokeOnMainThread" />).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public UIKit.UIImage Scale (CoreGraphics.CGSize newSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UIImage Scale(valuetype CoreGraphics.CGSize newSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.Scale(CoreGraphics.CGSize)" />
      <MemberSignature Language="F#" Value="member this.Scale : CoreGraphics.CGSize -&gt; UIKit.UIImage" Usage="uIImage.Scale newSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSize" Type="CoreGraphics.CGSize" />
      </Parameters>
      <Docs>
        <param name="newSize">The desired size for the scaled image.</param>
        <summary>Scales the image up or down.</summary>
        <returns>The scaled image.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public UIKit.UIImage Scale (CoreGraphics.CGSize newSize, nfloat scaleFactor);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class UIKit.UIImage Scale(valuetype CoreGraphics.CGSize newSize, valuetype System.nfloat scaleFactor) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.Scale(CoreGraphics.CGSize,System.nfloat)" />
      <MemberSignature Language="F#" Value="member this.Scale : CoreGraphics.CGSize * nfloat -&gt; UIKit.UIImage" Usage="uIImage.Scale (newSize, scaleFactor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newSize" Type="CoreGraphics.CGSize" />
        <Parameter Name="scaleFactor" Type="System.nfloat" />
      </Parameters>
      <Docs>
        <param name="newSize">The desired size for the scaled image.</param>
        <param name="scaleFactor">Scale factor to apply to the scaled image. If the value specified is zero, the device's scale factor is used.</param>
        <summary>Scales the image up or down.</summary>
        <returns>The scaled image.</returns>
        <remarks>
          <para>
          </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScreenChangedNotification">
      <MemberSignature Language="C#" Value="public static int ScreenChangedNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int32 ScreenChangedNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ScreenChangedNotification" />
      <MemberSignature Language="F#" Value="member this.ScreenChangedNotification : int" Usage="UIKit.UIImage.ScreenChangedNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityScreenChangedNotification", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the notification posted by an application that a new view appears that includes a major portion of the screen.</summary>
        <value>To be added.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShakeToUndoDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ShakeToUndoDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ShakeToUndoDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ShakeToUndoDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.ShakeToUndoDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.ShakeToUndoDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveShakeToUndoDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityShakeToUndoDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for ShakeToUndoDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.ShakeToUndoDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.ShakeToUndoDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldGroupAccessibilityChildren">
      <MemberSignature Language="C#" Value="public virtual bool ShouldGroupAccessibilityChildren { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShouldGroupAccessibilityChildren" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.ShouldGroupAccessibilityChildren" />
      <MemberSignature Language="F#" Value="member this.ShouldGroupAccessibilityChildren : bool with get, set" Usage="UIKit.UIImage.ShouldGroupAccessibilityChildren" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("shouldGroupAccessibilityChildren")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setShouldGroupAccessibilityChildren:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets whether VoiceOver groups elements that are children of this object regardless of their positions.</summary>
        <value>
        </value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public virtual CoreGraphics.CGSize Size { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreGraphics.CGSize Size" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.Size" />
      <MemberSignature Language="F#" Value="member this.Size : CoreGraphics.CGSize" Usage="UIKit.UIImage.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("size")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreGraphics.CGSize</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The dimensions of the image. Read-only.</summary>
        <value>
        </value>
        <remarks>
          <para>In iOS 4.0 and higher, this value is in points.  In iOS 3.0 and lower, this value is in pixels.</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakScreenStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeakScreenStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeakScreenStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.SpeakScreenStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.SpeakScreenStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.SpeakScreenStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveSpeakScreenStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilitySpeakScreenStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for SpeakScreenStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.SpeakScreenStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.SpeakScreenStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeakSelectionStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeakSelectionStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeakSelectionStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.SpeakSelectionStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.SpeakSelectionStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.SpeakSelectionStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveSpeakSelectionStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilitySpeakSelectionStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for SpeakSelectionStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.SpeakSelectionStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.SpeakSelectionStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechAttributeIpaNotation">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeechAttributeIpaNotation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeechAttributeIpaNotation" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.SpeechAttributeIpaNotation" />
      <MemberSignature Language="F#" Value="member this.SpeechAttributeIpaNotation : Foundation.NSString" Usage="UIKit.UIImage.SpeechAttributeIpaNotation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilitySpeechAttributeIPANotation", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the IPA notation for the accessibility attributed string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechAttributeLanguage">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeechAttributeLanguage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeechAttributeLanguage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.SpeechAttributeLanguage" />
      <MemberSignature Language="F#" Value="member this.SpeechAttributeLanguage : Foundation.NSString" Usage="UIKit.UIImage.SpeechAttributeLanguage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilitySpeechAttributeLanguage", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a BCP-47 language code.</summary>
        <value>A BCP-47 language code.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechAttributePitch">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeechAttributePitch { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeechAttributePitch" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.SpeechAttributePitch" />
      <MemberSignature Language="F#" Value="member this.SpeechAttributePitch : Foundation.NSString" Usage="UIKit.UIImage.SpeechAttributePitch" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilitySpeechAttributePitch", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the value from 0.0 to 2.0 that determines the pitch for a spoken string.</summary>
        <value>Gets the value from 0.0 to 2.0 that determines the pitch for a spoken string.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechAttributePunctuation">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeechAttributePunctuation { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeechAttributePunctuation" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.SpeechAttributePunctuation" />
      <MemberSignature Language="F#" Value="member this.SpeechAttributePunctuation : Foundation.NSString" Usage="UIKit.UIImage.SpeechAttributePunctuation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilitySpeechAttributePunctuation", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value to be interpreted as a <see langword="bool" /> that determines whether the punctuation in a string is pronounced.</summary>
        <value>String indicating whether punctuation is pronounced.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SpeechAttributeQueueAnnouncement">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SpeechAttributeQueueAnnouncement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SpeechAttributeQueueAnnouncement" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.SpeechAttributeQueueAnnouncement" />
      <MemberSignature Language="F#" Value="member this.SpeechAttributeQueueAnnouncement : Foundation.NSString" Usage="UIKit.UIImage.SpeechAttributeQueueAnnouncement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilitySpeechAttributeQueueAnnouncement", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Key for option that spoken text interrupt existing spoken content.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StretchableImage">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIImage StretchableImage (nint leftCapWidth, nint topCapHeight);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIImage StretchableImage(valuetype System.nint leftCapWidth, valuetype System.nint topCapHeight) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIImage.StretchableImage(System.nint,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member StretchableImage : nint * nint -&gt; UIKit.UIImage&#xA;override this.StretchableImage : nint * nint -&gt; UIKit.UIImage" Usage="uIImage.StretchableImage (leftCapWidth, topCapHeight)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("stretchableImageWithLeftCapWidth:topCapHeight:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIImage</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="leftCapWidth" Type="System.nint" />
        <Parameter Name="topCapHeight" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="leftCapWidth">Width of the left cap to be left unscaled.</param>
        <param name="topCapHeight">Height tof the top cap to be left unscaled.</param>
        <summary>Creates a stretchable image with the specified parameters.  Deprecated in iOS 5, but still useful since the replacement is known to have bugs.</summary>
        <returns>A stretchable image.</returns>
        <remarks>
          <para>
	    The more versatile replacement method that was introduced in iOS 5 crashes under some conditions, for more information, see: http://openradar.appspot.com/11411000.
	  </para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SwitchControlStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString SwitchControlStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString SwitchControlStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.SwitchControlStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.SwitchControlStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.SwitchControlStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveSwitchControlStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilitySwitchControlStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for SwitchControlStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.SwitchControlStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.SwitchControlStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAttributeCustom">
      <MemberSignature Language="C#" Value="public static Foundation.NSString TextAttributeCustom { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString TextAttributeCustom" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TextAttributeCustom" />
      <MemberSignature Language="F#" Value="member this.TextAttributeCustom : Foundation.NSString" Usage="UIKit.UIImage.TextAttributeCustom" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTextAttributeCustom", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Key for option that custom attributes be aplied to the accessibility text.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAttributeHeadingLevel">
      <MemberSignature Language="C#" Value="public static Foundation.NSString TextAttributeHeadingLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString TextAttributeHeadingLevel" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TextAttributeHeadingLevel" />
      <MemberSignature Language="F#" Value="member this.TextAttributeHeadingLevel : Foundation.NSString" Usage="UIKit.UIImage.TextAttributeHeadingLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTextAttributeHeadingLevel", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Key for option of the accessibility text's heading level.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TopCapHeight">
      <MemberSignature Language="C#" Value="public virtual nint TopCapHeight { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nint TopCapHeight" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TopCapHeight" />
      <MemberSignature Language="F#" Value="member this.TopCapHeight : nint" Usage="UIKit.UIImage.TopCapHeight" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("topCapHeight")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The height of the top cap (non-resizable area).</summary>
        <value>To be added.</value>
        <remarks>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
        <altmember cref="P:UIKit.UIImage.CapInsets" />
      </Docs>
    </Member>
    <Member MemberName="TraitAdjustable">
      <MemberSignature Language="C#" Value="public static long TraitAdjustable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitAdjustable" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitAdjustable" />
      <MemberSignature Language="F#" Value="member this.TraitAdjustable : int64" Usage="UIKit.UIImage.TraitAdjustable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitAdjustable", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that allows continuous adjustment of an accessibility element through a range of values.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitAllowsDirectInteraction">
      <MemberSignature Language="C#" Value="public static long TraitAllowsDirectInteraction { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitAllowsDirectInteraction" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitAllowsDirectInteraction" />
      <MemberSignature Language="F#" Value="member this.TraitAllowsDirectInteraction : int64" Usage="UIKit.UIImage.TraitAllowsDirectInteraction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitAllowsDirectInteraction", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that allows direct touch interaction for users.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitButton">
      <MemberSignature Language="C#" Value="public static long TraitButton { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitButton" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitButton" />
      <MemberSignature Language="F#" Value="member this.TraitButton : int64" Usage="UIKit.UIImage.TraitButton" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitButton", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element should be treated as a button.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitCausesPageTurn">
      <MemberSignature Language="C#" Value="public static long TraitCausesPageTurn { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitCausesPageTurn" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitCausesPageTurn" />
      <MemberSignature Language="F#" Value="member this.TraitCausesPageTurn : int64" Usage="UIKit.UIImage.TraitCausesPageTurn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitCausesPageTurn", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element should turn the page when VoiceOver finishes that page.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitCollection">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITraitCollection TraitCollection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITraitCollection TraitCollection" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitCollection" />
      <MemberSignature Language="F#" Value="member this.TraitCollection : UIKit.UITraitCollection" Usage="UIKit.UIImage.TraitCollection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.ThreadSafe</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("traitCollection")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITraitCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns a trait collection.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitHeader">
      <MemberSignature Language="C#" Value="public static long TraitHeader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitHeader" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitHeader" />
      <MemberSignature Language="F#" Value="member this.TraitHeader : int64" Usage="UIKit.UIImage.TraitHeader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitHeader", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element is a header that divides content into sections.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitImage">
      <MemberSignature Language="C#" Value="public static long TraitImage { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitImage" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitImage" />
      <MemberSignature Language="F#" Value="member this.TraitImage : int64" Usage="UIKit.UIImage.TraitImage" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitImage", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element should be treated as an image.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitKeyboardKey">
      <MemberSignature Language="C#" Value="public static long TraitKeyboardKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitKeyboardKey" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitKeyboardKey" />
      <MemberSignature Language="F#" Value="member this.TraitKeyboardKey : int64" Usage="UIKit.UIImage.TraitKeyboardKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitKeyboardKey", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element acts like a keyboard key.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitLink">
      <MemberSignature Language="C#" Value="public static long TraitLink { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitLink" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitLink" />
      <MemberSignature Language="F#" Value="member this.TraitLink : int64" Usage="UIKit.UIImage.TraitLink" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitLink", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element should be considered a link.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitNone">
      <MemberSignature Language="C#" Value="public static long TraitNone { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitNone" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitNone" />
      <MemberSignature Language="F#" Value="member this.TraitNone : int64" Usage="UIKit.UIImage.TraitNone" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitNone", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element has no traits.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitNotEnabled">
      <MemberSignature Language="C#" Value="public static long TraitNotEnabled { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitNotEnabled" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitNotEnabled" />
      <MemberSignature Language="F#" Value="member this.TraitNotEnabled : int64" Usage="UIKit.UIImage.TraitNotEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitNotEnabled", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element is not enabled.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitPlaysSound">
      <MemberSignature Language="C#" Value="public static long TraitPlaysSound { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitPlaysSound" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitPlaysSound" />
      <MemberSignature Language="F#" Value="member this.TraitPlaysSound : int64" Usage="UIKit.UIImage.TraitPlaysSound" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitPlaysSound", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> elements plays its own sound when activated.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitSearchField">
      <MemberSignature Language="C#" Value="public static long TraitSearchField { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitSearchField" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitSearchField" />
      <MemberSignature Language="F#" Value="member this.TraitSearchField : int64" Usage="UIKit.UIImage.TraitSearchField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitSearchField", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element should be considered a search field.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitSelected">
      <MemberSignature Language="C#" Value="public static long TraitSelected { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitSelected" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitSelected" />
      <MemberSignature Language="F#" Value="member this.TraitSelected : int64" Usage="UIKit.UIImage.TraitSelected" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitSelected", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element is selected.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitStartsMediaSession">
      <MemberSignature Language="C#" Value="public static long TraitStartsMediaSession { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitStartsMediaSession" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitStartsMediaSession" />
      <MemberSignature Language="F#" Value="member this.TraitStartsMediaSession : int64" Usage="UIKit.UIImage.TraitStartsMediaSession" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitStartsMediaSession", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element starts a media session when it is activated.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitStaticText">
      <MemberSignature Language="C#" Value="public static long TraitStaticText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitStaticText" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitStaticText" />
      <MemberSignature Language="F#" Value="member this.TraitStaticText : int64" Usage="UIKit.UIImage.TraitStaticText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitStaticText", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element should be treated as static text.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitSummaryElement">
      <MemberSignature Language="C#" Value="public static long TraitSummaryElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitSummaryElement" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitSummaryElement" />
      <MemberSignature Language="F#" Value="member this.TraitSummaryElement : int64" Usage="UIKit.UIImage.TraitSummaryElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitSummaryElement", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that provides summary information when an application starts.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitTabBar">
      <MemberSignature Language="C#" Value="public static long TraitTabBar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitTabBar" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitTabBar" />
      <MemberSignature Language="F#" Value="member this.TraitTabBar : int64" Usage="UIKit.UIImage.TraitTabBar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitTabBar", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 3, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TraitUpdatesFrequently">
      <MemberSignature Language="C#" Value="public static long TraitUpdatesFrequently { get; }" />
      <MemberSignature Language="ILAsm" Value=".property int64 TraitUpdatesFrequently" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.TraitUpdatesFrequently" />
      <MemberSignature Language="F#" Value="member this.TraitUpdatesFrequently : int64" Usage="UIKit.UIImage.TraitUpdatesFrequently" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityTraitUpdatesFrequently", "UIKit")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a trait that indicates that <c>this</c> <see cref="T:UIKit.IUIAccessibilityIdentification" /> element updates its <see cref="M:UIKit.UIIMage.AccessibilityLabel" /> or <see cref="M:UIKit.UIIMage.AccessibilityValue" />.</summary>
        <value>The value to be set for the trait.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnfocusedElementKey">
      <MemberSignature Language="C#" Value="public static Foundation.NSString UnfocusedElementKey { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString UnfocusedElementKey" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.UnfocusedElementKey" />
      <MemberSignature Language="F#" Value="member this.UnfocusedElementKey : Foundation.NSString" Usage="UIKit.UIImage.UnfocusedElementKey" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveUnfocusedElementKey helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityUnfocusedElementKey", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A string constant used by accessibility APIs (see <see cref="M:UIAccessibility.FocusedElement" />) to identify the previously focused element.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoiceOverStatusChanged">
      <MemberSignature Language="C#" Value="public static Foundation.NSString VoiceOverStatusChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString VoiceOverStatusChanged" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.VoiceOverStatusChanged" />
      <MemberSignature Language="F#" Value="member this.VoiceOverStatusChanged : Foundation.NSString" Usage="UIKit.UIImage.VoiceOverStatusChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityVoiceOverStatusChanged", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'VoiceOverStatusDidChangeNotification' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'VoiceOverStatusDidChangeNotification' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'VoiceOverStatusDidChangeNotification' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'VoiceOverStatusDidChangeNotification' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Developers should not use this deprecated property. Developers should use 'VoiceOverStatusDidChangeNotification' instead.</summary>
        <value>String notification of VoiceOver status starting or stopping.</value>
        <remarks>
          <para>(More documentation for this node is coming)</para>
          <para tool="threads">This can be used from a background thread.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VoiceOverStatusDidChangeNotification">
      <MemberSignature Language="C#" Value="public static Foundation.NSString VoiceOverStatusDidChangeNotification { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString VoiceOverStatusDidChangeNotification" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.VoiceOverStatusDidChangeNotification" />
      <MemberSignature Language="F#" Value="member this.VoiceOverStatusDidChangeNotification : Foundation.NSString" Usage="UIKit.UIImage.VoiceOverStatusDidChangeNotification" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Advice("Use UIImage.Notifications.ObserveVoiceOverStatusDidChange helper method instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Field("UIAccessibilityVoiceOverStatusDidChangeNotification", "UIKit")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Notification constant for VoiceOverStatusDidChange</summary>
        <value>NSString constant, should be used as a token to NSNotificationCenter.</value>
        <remarks>
          <para id="tool-remark">This constant can be used with the <see cref="T:Foundation.NSNotificationCenter" /> to register a listener for this notification, also developers can use the strongly typed notification <see cref="M:UIKit.UIImage+Notifications.ObserveVoiceOverStatusDidChange" /> instead.   This is an NSString instead of a string, because these values can be used as tokens in some native libraries instead of being used purely for their actual string content.    The 'notification' parameter to the callback contains extra information that is specific to the notification type.</para>
          <example>
            <code lang="C#"><![CDATA[
// Lambda style
NSNotificationCenter.DefaultCenter.AddObserver (
        UIImage.VoiceOverStatusDidChangeNotification, (notification) => {Console.WriteLine ("Received the notification UIImage", notification); }


// Method style
void Callback (NSNotification notification)
{
    Console.WriteLine ("Received a notification UIImage", notification);
}

void Setup ()
{
    NSNotificationCenter.DefaultCenter.AddObserver (UIImage.VoiceOverStatusDidChangeNotification, Callback);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WritableTypeIdentifiers">
      <MemberSignature Language="C#" Value="public static string[] WritableTypeIdentifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property string[] WritableTypeIdentifiers" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.WritableTypeIdentifiers" />
      <MemberSignature Language="F#" Value="member this.WritableTypeIdentifiers : string[]" Usage="UIKit.UIImage.WritableTypeIdentifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the array of uniform type identifiers that specify which data types can be loaded into a color.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WritableTypeIdentifiersForItemProvider">
      <MemberSignature Language="C#" Value="public virtual string[] WritableTypeIdentifiersForItemProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] WritableTypeIdentifiersForItemProvider" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIImage.WritableTypeIdentifiersForItemProvider" />
      <MemberSignature Language="F#" Value="member this.WritableTypeIdentifiersForItemProvider : string[]" Usage="UIKit.UIImage.WritableTypeIdentifiersForItemProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.WatchOS, 4, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("writableTypeIdentifiersForItemProvider", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the array of uniform type identifiers that specify which data types can be loaded into a color.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
