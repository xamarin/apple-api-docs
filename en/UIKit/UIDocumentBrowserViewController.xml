<Type Name="UIDocumentBrowserViewController" FullName="UIKit.UIDocumentBrowserViewController">
  <TypeSignature Language="C#" Value="public class UIDocumentBrowserViewController : UIKit.UIViewController, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit UIDocumentBrowserViewController extends UIKit.UIViewController implements class Foundation.INSCoding, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:UIKit.UIDocumentBrowserViewController" />
  <TypeSignature Language="F#" Value="type UIDocumentBrowserViewController = class&#xA;    inherit UIViewController&#xA;    interface INSCoding&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIViewController</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>Foundation.INSCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("UIDocumentBrowserViewController", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A viewer for browsing documents.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIDocumentBrowserViewController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIDocumentBrowserViewController (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDocumentBrowserViewController : Foundation.NSCoder -&gt; UIKit.UIDocumentBrowserViewController" Usage="new UIKit.UIDocumentBrowserViewController coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UIDocumentBrowserViewController (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDocumentBrowserViewController : Foundation.NSObjectFlag -&gt; UIKit.UIDocumentBrowserViewController" Usage="new UIKit.UIDocumentBrowserViewController t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal UIDocumentBrowserViewController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new UIKit.UIDocumentBrowserViewController : nativeint -&gt; UIKit.UIDocumentBrowserViewController" Usage="new UIKit.UIDocumentBrowserViewController handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public UIDocumentBrowserViewController (string[] allowedContentTypes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string[] allowedContentTypes) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.#ctor(System.String[])" />
      <MemberSignature Language="F#" Value="new UIKit.UIDocumentBrowserViewController : string[] -&gt; UIKit.UIDocumentBrowserViewController" Usage="new UIKit.UIDocumentBrowserViewController allowedContentTypes" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initForOpeningFilesWithContentTypes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="allowedContentTypes" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="allowedContentTypes">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new <see cref="T:UIKit.UIDocumentBrowserViewController" /> for documents of the specified content types.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdditionalLeadingNavigationBarButtonItems">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIBarButtonItem[] AdditionalLeadingNavigationBarButtonItems { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIBarButtonItem[] AdditionalLeadingNavigationBarButtonItems" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentBrowserViewController.AdditionalLeadingNavigationBarButtonItems" />
      <MemberSignature Language="F#" Value="member this.AdditionalLeadingNavigationBarButtonItems : UIKit.UIBarButtonItem[] with get, set" Usage="UIKit.UIDocumentBrowserViewController.AdditionalLeadingNavigationBarButtonItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("additionalLeadingNavigationBarButtonItems")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAdditionalLeadingNavigationBarButtonItems:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("additionalLeadingNavigationBarButtonItems", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAdditionalLeadingNavigationBarButtonItems:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIBarButtonItem[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the array of bar button items for display on the leading side of the app's navigation bar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AdditionalTrailingNavigationBarButtonItems">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIBarButtonItem[] AdditionalTrailingNavigationBarButtonItems { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIBarButtonItem[] AdditionalTrailingNavigationBarButtonItems" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentBrowserViewController.AdditionalTrailingNavigationBarButtonItems" />
      <MemberSignature Language="F#" Value="member this.AdditionalTrailingNavigationBarButtonItems : UIKit.UIBarButtonItem[] with get, set" Usage="UIKit.UIDocumentBrowserViewController.AdditionalTrailingNavigationBarButtonItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("additionalTrailingNavigationBarButtonItems")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAdditionalTrailingNavigationBarButtonItems:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("additionalTrailingNavigationBarButtonItems", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAdditionalTrailingNavigationBarButtonItems:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIBarButtonItem[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>ets or sets the array of bar button items for display on the trailing side of the app's navigation bar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowedContentTypes">
      <MemberSignature Language="C#" Value="public virtual string[] AllowedContentTypes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] AllowedContentTypes" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentBrowserViewController.AllowedContentTypes" />
      <MemberSignature Language="F#" Value="member this.AllowedContentTypes : string[]" Usage="UIKit.UIDocumentBrowserViewController.AllowedContentTypes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("allowedContentTypes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allowedContentTypes", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the allowed content types with which the document browser was created.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsDocumentCreation">
      <MemberSignature Language="C#" Value="public virtual bool AllowsDocumentCreation { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsDocumentCreation" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentBrowserViewController.AllowsDocumentCreation" />
      <MemberSignature Language="F#" Value="member this.AllowsDocumentCreation : bool with get, set" Usage="UIKit.UIDocumentBrowserViewController.AllowsDocumentCreation" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allowsDocumentCreation")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAllowsDocumentCreation:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that controls whether the document browser may create new documents.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsPickingMultipleItems">
      <MemberSignature Language="C#" Value="public virtual bool AllowsPickingMultipleItems { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsPickingMultipleItems" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentBrowserViewController.AllowsPickingMultipleItems" />
      <MemberSignature Language="F#" Value="member this.AllowsPickingMultipleItems : bool with get, set" Usage="UIKit.UIDocumentBrowserViewController.AllowsPickingMultipleItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allowsPickingMultipleItems")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAllowsPickingMultipleItems:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets a Boolean value that controls whether the document browser allows the user to select multiple items.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BrowserUserInterfaceStyle">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDocumentBrowserUserInterfaceStyle BrowserUserInterfaceStyle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype UIKit.UIDocumentBrowserUserInterfaceStyle BrowserUserInterfaceStyle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentBrowserViewController.BrowserUserInterfaceStyle" />
      <MemberSignature Language="F#" Value="member this.BrowserUserInterfaceStyle : UIKit.UIDocumentBrowserUserInterfaceStyle with get, set" Usage="UIKit.UIDocumentBrowserViewController.BrowserUserInterfaceStyle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("browserUserInterfaceStyle")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setBrowserUserInterfaceStyle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("browserUserInterfaceStyle", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setBrowserUserInterfaceStyle:", ObjCRuntime.ArgumentSemantic.UnsafeUnretained)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDocumentBrowserUserInterfaceStyle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the theme of the document browser UI.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentBrowserViewController.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="UIKit.UIDocumentBrowserViewController.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CustomActions">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDocumentBrowserAction[] CustomActions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIDocumentBrowserAction[] CustomActions" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentBrowserViewController.CustomActions" />
      <MemberSignature Language="F#" Value="member this.CustomActions : UIKit.UIDocumentBrowserAction[] with get, set" Usage="UIKit.UIDocumentBrowserViewController.CustomActions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("customActions")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setCustomActions:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("customActions", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setCustomActions:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDocumentBrowserAction[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an array of custom actions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Delegate">
      <MemberSignature Language="C#" Value="public virtual UIKit.IUIDocumentBrowserViewControllerDelegate Delegate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.IUIDocumentBrowserViewControllerDelegate Delegate" />
      <MemberSignature Language="DocId" Value="P:UIKit.UIDocumentBrowserViewController.Delegate" />
      <MemberSignature Language="F#" Value="member this.Delegate : UIKit.IUIDocumentBrowserViewControllerDelegate with get, set" Usage="UIKit.UIDocumentBrowserViewController.Delegate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("delegate")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setDelegate:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("delegate", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setDelegate:", ObjCRuntime.ArgumentSemantic.Weak)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.IUIDocumentBrowserViewControllerDelegate</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An instance of the UIKit.IUIDocumentBrowserViewControllerDelegate model class which acts as the class delegate.</summary>
        <value>The instance of the UIKit.IUIDocumentBrowserViewControllerDelegate model class</value>
        <remarks>
          <para>The delegate instance assigned to this object will be used to handle events or provide data on demand to this class.</para>
          <para>When setting the Delegate or WeakDelegate values events will be delivered to the specified instance instead of being delivered to the C#-style events</para>
          <para>This is the strongly typed version of the object, developers should use the WeakDelegate property instead if they want to merely assign a class derived from NSObject that has been decorated with [Export] attributes.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="uIDocumentBrowserViewController.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the UIDocumentBrowserViewController object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the UIDocumentBrowserViewController class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the UIDocumentBrowserViewController ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class Foundation.NSCoder encoder) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.EncodeTo(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="override this.EncodeTo : Foundation.NSCoder -&gt; unit" Usage="uIDocumentBrowserViewController.EncodeTo encoder" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:Foundation.INSCoding.EncodeTo(Foundation.NSCoder)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:Foundation.NSKeyedArchiver" /> and then invoke the <see cref="M:Foundation.NSKeyedArchiver.ArchiveRootObjectToFile(Foundation.NSObject,System.String)" /> which will call into this method</para>
          <para>If developers want to allow their object to be archived, they should override this method and store their state in using the provided <paramref name="encoder" /> parameter.   In addition, developers should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="C#"><![CDATA[public void override EncodeTo (NSCoder coder){
    coder.Encode (1, key: "version");
    coder.Encode (userName, key: "userName");
    coder.Encode (hostName, key: "hostName");]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTransitionController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDocumentBrowserTransitionController GetTransitionController (Foundation.NSUrl documentUrl);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIDocumentBrowserTransitionController GetTransitionController(class Foundation.NSUrl documentUrl) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.GetTransitionController(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="abstract member GetTransitionController : Foundation.NSUrl -&gt; UIKit.UIDocumentBrowserTransitionController&#xA;override this.GetTransitionController : Foundation.NSUrl -&gt; UIKit.UIDocumentBrowserTransitionController" Usage="uIDocumentBrowserViewController.GetTransitionController documentUrl" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>UIKit.UIDocumentBrowserTransitionController</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentUrl" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="documentUrl">The document URL for which to get a transition controller.</param>
        <summary>Creates and returns a transition controller for the document at the specified URL.</summary>
        <returns>Developers should only specify values for <paramref name="documentURL" /> that were obtained from the document browser.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDocument">
      <MemberSignature Language="C#" Value="public virtual void ImportDocument (Foundation.NSUrl documentUrl, Foundation.NSUrl neighbourUrl, UIKit.UIDocumentBrowserImportMode importMode, Action&lt;Foundation.NSUrl,Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportDocument(class Foundation.NSUrl documentUrl, class Foundation.NSUrl neighbourUrl, valuetype UIKit.UIDocumentBrowserImportMode importMode, class System.Action`2&lt;class Foundation.NSUrl, class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.ImportDocument(Foundation.NSUrl,Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode,System.Action{Foundation.NSUrl,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member ImportDocument : Foundation.NSUrl * Foundation.NSUrl * UIKit.UIDocumentBrowserImportMode * Action&lt;Foundation.NSUrl, Foundation.NSError&gt; -&gt; unit&#xA;override this.ImportDocument : Foundation.NSUrl * Foundation.NSUrl * UIKit.UIDocumentBrowserImportMode * Action&lt;Foundation.NSUrl, Foundation.NSError&gt; -&gt; unit" Usage="uIDocumentBrowserViewController.ImportDocument (documentUrl, neighbourUrl, importMode, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("importDocumentAtURL:nextToDocumentAtURL:mode:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentUrl" Type="Foundation.NSUrl" />
        <Parameter Name="neighbourUrl" Type="Foundation.NSUrl" />
        <Parameter Name="importMode" Type="UIKit.UIDocumentBrowserImportMode" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSUrl,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V6))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="documentUrl">The document's current location.</param>
        <param name="neighbourUrl">The url of a document in the same file provider.</param>
        <param name="importMode">The document import mode.</param>
        <param name="completion">The handler to run after the operation completes. The handler receives the imported URL (<see langword="null" /> if there is an error) and an error (<see langword="null" /> if there was no error).</param>
        <summary>Imports the document at <paramref name="documentURL" /> to be ajacent to <paramref name="neighbourUrl" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImportDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSUrl&gt; ImportDocumentAsync (Foundation.NSUrl documentUrl, Foundation.NSUrl neighbourUrl, UIKit.UIDocumentBrowserImportMode importMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSUrl&gt; ImportDocumentAsync(class Foundation.NSUrl documentUrl, class Foundation.NSUrl neighbourUrl, valuetype UIKit.UIDocumentBrowserImportMode importMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.ImportDocumentAsync(Foundation.NSUrl,Foundation.NSUrl,UIKit.UIDocumentBrowserImportMode)" />
      <MemberSignature Language="F#" Value="abstract member ImportDocumentAsync : Foundation.NSUrl * Foundation.NSUrl * UIKit.UIDocumentBrowserImportMode -&gt; System.Threading.Tasks.Task&lt;Foundation.NSUrl&gt;&#xA;override this.ImportDocumentAsync : Foundation.NSUrl * Foundation.NSUrl * UIKit.UIDocumentBrowserImportMode -&gt; System.Threading.Tasks.Task&lt;Foundation.NSUrl&gt;" Usage="uIDocumentBrowserViewController.ImportDocumentAsync (documentUrl, neighbourUrl, importMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSUrl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="documentUrl" Type="Foundation.NSUrl" />
        <Parameter Name="neighbourUrl" Type="Foundation.NSUrl" />
        <Parameter Name="importMode" Type="UIKit.UIDocumentBrowserImportMode" />
      </Parameters>
      <Docs>
        <param name="documentUrl">The document's current location.</param>
        <param name="neighbourUrl">The url of a document in the same file provider.</param>
        <param name="importMode">The document import mode.</param>
        <summary>Imports the document at <paramref name="documentURL" /> to be ajacent to <paramref name="neighbourUrl" />.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous ImportDocument operation.  The value of the TResult parameter is of type System.Action&lt;Foundation.NSUrl,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para copied="true">The ImportDocumentAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RevealDocument">
      <MemberSignature Language="C#" Value="public virtual void RevealDocument (Foundation.NSUrl url, bool importIfNeeded, Action&lt;Foundation.NSUrl,Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RevealDocument(class Foundation.NSUrl url, bool importIfNeeded, class System.Action`2&lt;class Foundation.NSUrl, class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.RevealDocument(Foundation.NSUrl,System.Boolean,System.Action{Foundation.NSUrl,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member RevealDocument : Foundation.NSUrl * bool * Action&lt;Foundation.NSUrl, Foundation.NSError&gt; -&gt; unit&#xA;override this.RevealDocument : Foundation.NSUrl * bool * Action&lt;Foundation.NSUrl, Foundation.NSError&gt; -&gt; unit" Usage="uIDocumentBrowserViewController.RevealDocument (url, importIfNeeded, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("revealDocumentAtURL:importIfNeeded:completion:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="importIfNeeded" Type="System.Boolean" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSUrl,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity2V6))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="url">The URL to the document to reveal.</param>
        <param name="importIfNeeded">Whether the document browser should import the document if the document must be imported to be revealed.</param>
        <param name="completion">
          <para>The handler to run after the operation completes. The handler receives the revealed URL (<see langword="null" /> if there is an error) and an error (<see langword="null" /> if there was no error).</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Reveals the document at the provided URL in the browser, and imports it if <paramref name="importIfNeede" /> is <see langword="true" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RevealDocumentAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Foundation.NSUrl&gt; RevealDocumentAsync (Foundation.NSUrl url, bool importIfNeeded);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Foundation.NSUrl&gt; RevealDocumentAsync(class Foundation.NSUrl url, bool importIfNeeded) cil managed" />
      <MemberSignature Language="DocId" Value="M:UIKit.UIDocumentBrowserViewController.RevealDocumentAsync(Foundation.NSUrl,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member RevealDocumentAsync : Foundation.NSUrl * bool -&gt; System.Threading.Tasks.Task&lt;Foundation.NSUrl&gt;&#xA;override this.RevealDocumentAsync : Foundation.NSUrl * bool -&gt; System.Threading.Tasks.Task&lt;Foundation.NSUrl&gt;" Usage="uIDocumentBrowserViewController.RevealDocumentAsync (url, importIfNeeded)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Foundation.NSUrl&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="importIfNeeded" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">The URL to the document to reveal.</param>
        <param name="importIfNeeded">Whether the document browser should import the document if the document must be imported to be revealed.</param>
        <summary>Reveals the document at the provided URL in the browser, and imports it if <paramref name="importIfNeede" /> is <see langword="true" />.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous RevealDocument operation.  The value of the TResult parameter is of type System.Action&lt;Foundation.NSUrl,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
