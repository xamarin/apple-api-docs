<Type Name="UITableViewDropDelegate" FullName="UIKit.UITableViewDropDelegate">
  <TypeSignature Language="C#" Value="public abstract class UITableViewDropDelegate : Foundation.NSObject, IDisposable, UIKit.IUITableViewDropDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UITableViewDropDelegate extends Foundation.NSObject implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUITableViewDropDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUITableViewDropDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("UITableViewDropDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.WatchOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Unavailable(ObjCRuntime.PlatformName.TvOS, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Delegate for handling drops to table views.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITableViewDropDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITableViewDropDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UITableViewDropDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CanHandleDropSession">
      <MemberSignature Language="C#" Value="public virtual bool CanHandleDropSession (UIKit.UITableView tableView, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CanHandleDropSession(class UIKit.UITableView tableView, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:canHandleDropSession:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="tableView">The target table view.</param>
        <param name="session">The drop session.</param>
        <summary>Returns a Boolean value that tells whether the table view can handle drops from the data in the session.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropSessionDidEnd">
      <MemberSignature Language="C#" Value="public virtual void DropSessionDidEnd (UIKit.UITableView tableView, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DropSessionDidEnd(class UIKit.UITableView tableView, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:dropSessionDidEnd:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="tableView">The original intended target table view.</param>
        <param name="session">The session that ended.</param>
        <summary>Method that is called when the drop session ends.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropSessionDidEnter">
      <MemberSignature Language="C#" Value="public virtual void DropSessionDidEnter (UIKit.UITableView tableView, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DropSessionDidEnter(class UIKit.UITableView tableView, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:dropSessionDidEnter:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="tableView">The current target of the drop.</param>
        <param name="session">The drop session that entered.</param>
        <summary>Method that is called when the drop point enters the table view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropSessionDidExit">
      <MemberSignature Language="C#" Value="public virtual void DropSessionDidExit (UIKit.UITableView tableView, UIKit.IUIDropSession session);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DropSessionDidExit(class UIKit.UITableView tableView, class UIKit.IUIDropSession session) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:dropSessionDidExit:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
      </Parameters>
      <Docs>
        <param name="tableView">The view that was tracking the operation.</param>
        <param name="session">The drop session that exited.</param>
        <summary>Method that is called when the drop point leaves the table view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DropSessionDidUpdate">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITableViewDropProposal DropSessionDidUpdate (UIKit.UITableView tableView, UIKit.IUIDropSession session, Foundation.NSIndexPath destinationIndexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UITableViewDropProposal DropSessionDidUpdate(class UIKit.UITableView tableView, class UIKit.IUIDropSession session, class Foundation.NSIndexPath destinationIndexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:dropSessionDidUpdate:withDestinationIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITableViewDropProposal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="session" Type="UIKit.IUIDropSession" />
        <Parameter Name="destinationIndexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">The current drop target.</param>
        <param name="session">The drop session.</param>
        <param name="destinationIndexPath">The index path to the currently targeted row. This parameter can be <see langwor="null" />.<para tool="nullallowed">This parameter can be <see langword="null" />.</para></param>
        <summary>Method that is called when the drop point over the table view changes.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDropPreviewParameters">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIDragPreviewParameters GetDropPreviewParameters (UIKit.UITableView tableView, Foundation.NSIndexPath indexPath);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIDragPreviewParameters GetDropPreviewParameters(class UIKit.UITableView tableView, class Foundation.NSIndexPath indexPath) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:dropPreviewParametersForRowAtIndexPath:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIDragPreviewParameters</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="indexPath" Type="Foundation.NSIndexPath" />
      </Parameters>
      <Docs>
        <param name="tableView">The table view for which to get the preview parameters.</param>
        <param name="indexPath">The index path to the row for which to get the preview parameters.</param>
        <summary>Returns the drag preview parameters for the item at the specified index path.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformDrop">
      <MemberSignature Language="C#" Value="public abstract void PerformDrop (UIKit.UITableView tableView, UIKit.IUITableViewDropCoordinator coordinator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformDrop(class UIKit.UITableView tableView, class UIKit.IUITableViewDropCoordinator coordinator) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("tableView:performDropWithCoordinator:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="tableView" Type="UIKit.UITableView" />
        <Parameter Name="coordinator" Type="UIKit.IUITableViewDropCoordinator" />
      </Parameters>
      <Docs>
        <param name="tableView">The receiving table view.</param>
        <param name="coordinator">The drop coordinator.</param>
        <summary>Uses the coordinator to drop the data.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
