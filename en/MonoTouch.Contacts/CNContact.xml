<Type Name="CNContact" FullName="MonoTouch.Contacts.CNContact">
  <TypeSignature Language="C#" Value="public class CNContact : MonoTouch.Foundation.NSObject, IDisposable, MonoTouch.Foundation.INSMutableCopying, MonoTouch.Foundation.INSSecureCoding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CNContact extends MonoTouch.Foundation.NSObject implements class MonoTouch.Foundation.INSCoding, class MonoTouch.Foundation.INSCopying, class MonoTouch.Foundation.INSMutableCopying, class MonoTouch.Foundation.INSSecureCoding, class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSMutableCopying</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>MonoTouch.Foundation.INSSecureCoding</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("CNContact", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 9, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 11, MonoTouch.ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a contact such as a person or business and holds their data, such as name, phone numbers, etc.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/Contacts/Reference/CNContact_Class/index.html">Apple documentation for <c>CNContact</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CNContact ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CNContact (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:MonoTouch.Foundation.NSCoding" />  protocol.</para>
          <para>If you want to create a subclass of this object and continue to support deserialization from an archive, you should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:MonoTouch.Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CNContact (MonoTouch.Foundation.NSObjectFlag t);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CNContact (IntPtr handle);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" apistyle="unified" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AreKeysAvailable">
      <MemberSignature Language="C#" Value="public bool AreKeysAvailable (MonoTouch.Contacts.CNContactOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AreKeysAvailable(valuetype MonoTouch.Contacts.CNContactOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MonoTouch.Contacts.CNContactOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>Whether the keys specified in <param name="options" /> are available.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreKeysAvailable">
      <MemberSignature Language="C#" Value="protected virtual bool AreKeysAvailable (MonoTouch.Foundation.NSArray keyDescriptors);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool AreKeysAvailable(class MonoTouch.Foundation.NSArray keyDescriptors) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("areKeysAvailable:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyDescriptors" Type="MonoTouch.Foundation.NSArray" />
      </Parameters>
      <Docs>
        <param name="keyDescriptors">To be added.</param>
        <summary>Whether the keys described in <param name="keyDescriptors" /> are available.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AreKeysAvailable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public bool AreKeysAvailable&lt;T&gt; (T[] keyDescriptors) where T : MonoTouch.Foundation.INSObjectProtocol, MonoTouch.Foundation.INSSecureCoding, MonoTouch.Foundation.INSCopying;" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool AreKeysAvailable&lt;(class MonoTouch.Foundation.INSObjectProtocol, class MonoTouch.Foundation.INSSecureCoding, class MonoTouch.Foundation.INSCopying) T&gt;(!!T[] keyDescriptors) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <InterfaceName>MonoTouch.Foundation.INSObjectProtocol</InterfaceName>
            <InterfaceName>MonoTouch.Foundation.INSSecureCoding</InterfaceName>
            <InterfaceName>MonoTouch.Foundation.INSCopying</InterfaceName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="keyDescriptors" Type="T[]" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="keyDescriptors">To be added.</param>
        <summary>Whether the keys described in <param name="keyDescriptors" /> are available.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Birthday">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDateComponents Birthday { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDateComponents Birthday" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("birthday")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDateComponents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The birthday of the Contact, in the Gregorian calendar.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ComparatorForName">
      <MemberSignature Language="C#" Value="public static Func&lt;MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSComparisonResult&gt; ComparatorForName (MonoTouch.Contacts.CNContactSortOrder sortOrder);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Func`3&lt;class MonoTouch.Foundation.NSObject, class MonoTouch.Foundation.NSObject, valuetype MonoTouch.Foundation.NSComparisonResult&gt; ComparatorForName(valuetype MonoTouch.Contacts.CNContactSortOrder sortOrder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("comparatorForNameSortOrder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Func&lt;MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSObject,MonoTouch.Foundation.NSComparisonResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sortOrder" Type="MonoTouch.Contacts.CNContactSortOrder" />
      </Parameters>
      <Docs>
        <param name="sortOrder">To be added.</param>
        <summary>The sorting function for the specified <paramref name="sortOrder" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContactRelations">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Contacts.CNContactRelation&gt;[] ContactRelations { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Contacts.CNLabeledValue`1&lt;class MonoTouch.Contacts.CNContactRelation&gt;[] ContactRelations" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("contactRelations")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="unified">MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Contacts.CNContactRelation&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:MonoTouch.Contacts.CNLabeledValue" /> objects containing the name of the relation and a reference to the related <see cref="T:MonoTouch.Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContactType">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Contacts.CNContactType ContactType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.Contacts.CNContactType ContactType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("contactType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Contacts.CNContactType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Specifies whether <c>this</c> is an organization or a person.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject Copy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject Copy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("copyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dates">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Foundation.NSDateComponents&gt;[] Dates { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Contacts.CNLabeledValue`1&lt;class MonoTouch.Foundation.NSDateComponents&gt;[] Dates" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("dates")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="unified">MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Foundation.NSDateComponents&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:MonoTouch.Contacts.CNLabeledValue" /> objects containing the name of the date and their value, in the Gregorian calendar.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DepartmentName">
      <MemberSignature Language="C#" Value="public virtual string DepartmentName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DepartmentName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("departmentName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The work department of the contact.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EmailAddresses">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Foundation.NSString&gt;[] EmailAddresses { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Contacts.CNLabeledValue`1&lt;class MonoTouch.Foundation.NSString&gt;[] EmailAddresses" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("emailAddresses")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="unified">MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Foundation.NSString&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:MonoTouch.Contacts.CNLabeledValue" /> objects containing the label of the email and a string value.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EncodeTo" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual void EncodeTo (MonoTouch.Foundation.NSCoder encoder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EncodeTo(class MonoTouch.Foundation.NSCoder encoder) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("encodeWithCoder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="encoder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="encoder">The encoder object where the state of the object will be stored</param>
        <summary>Encodes the state of the object on the provided encoder</summary>
        <remarks>
          <para>This method is part of the <see cref="T:MonoTouch.Foundation.NSCoding" /> protocol and is used by applications to preserve the state of the object into an archive.</para>
          <para>Users will typically create a <see cref="T:MonoTouch.Foundation.NSKeyedArchived" /> and then invoke the <see cref="M:MonoTouch.Foundation.NSKeyedArchived.ArchiveRootObjectToFile" /> which will call into this method</para>
          <para>If you want to allow your object to be archived, you should override this method and store your state in using the provided <paramref name="encoder" /> parameter.   In addition, you should also implement a constructor that takes an NSCoder argument and is exported with [Export ("initWithCoder:")]</para>
          <example>
            <code lang="c#">public void override EncodeTo (NSCoder coder){
    c.Encode (1, key: "version");
    c.Encode (userName, key: "userName");
    c.Encode (hostName, key: "hostName");</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorDomain">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString ErrorDomain { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString ErrorDomain" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("CNErrorDomain", "Contacts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the constant name of the Contacts error domain.</summary>
        <value>Returns the constant "CNErrorDomain".</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FamilyName">
      <MemberSignature Language="C#" Value="public virtual string FamilyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FamilyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("familyName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the contact's family name.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDescriptorForAllComparatorKeys">
      <MemberSignature Language="C#" Value="public static MonoTouch.Contacts.ICNKeyDescriptor GetDescriptorForAllComparatorKeys ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Contacts.ICNKeyDescriptor GetDescriptorForAllComparatorKeys() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("descriptorForAllComparatorKeys")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Contacts.ICNKeyDescriptor</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the aggregate key descriptor needed to perform sorting.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForContacts">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForContacts (string matchingName);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForContacts(string matchingName) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForContactsMatchingName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matchingName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="matchingName">To be added.</param>
        <summary>Retrieves a predicate that filters for <param name="matchingName" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForContacts">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForContacts (string[] identifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForContacts(string[] identifiers) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForContactsWithIdentifiers:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="identifiers" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="identifiers">To be added.</param>
        <summary>Retrieves a predicate that will match <param name="identifiers" /> with <see cref="P:Monotouch.Contacts.CNContact.Identifier" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForContactsInContainer">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForContactsInContainer (string containerIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForContactsInContainer(string containerIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForContactsInContainerWithIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="containerIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="containerIdentifier">To be added.</param>
        <summary>A predicate that will match all contacts in <param name="containerIdentifier" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPredicateForContactsInGroup">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSPredicate GetPredicateForContactsInGroup (string groupIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.Foundation.NSPredicate GetPredicateForContactsInGroup(string groupIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("predicateForContactsInGroupWithIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSPredicate</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="groupIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="groupIdentifier">To be added.</param>
        <summary>A <see cref="T:Monotouch.Foundation.NSPredicate" /> that will match all contacts in the group identified by <param name="groupIdentifier" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GivenName">
      <MemberSignature Language="C#" Value="public virtual string GivenName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string GivenName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("givenName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the given name of the contact.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Identifier">
      <MemberSignature Language="C#" Value="public virtual string Identifier { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Identifier" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("identifier")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>A device-unique identifier for this contact. Persists over time on the device, but is not universally consistent.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageData">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSData ImageData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSData ImageData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("imageData")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The profile picture for the contact.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>
          <para>Generally, application developers should only retrieve this, and other potentially-large values, if they have a direct need for it.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ImageDataAvailable">
      <MemberSignature Language="C#" Value="public virtual bool ImageDataAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ImageDataAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 12, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("imageDataAvailable")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 12, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether <see cref="P:MonoTouch.Contacts.CNContact.ImageData" /> holds an image.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InstantMessageAddresses">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Contacts.CNInstantMessageAddress&gt;[] InstantMessageAddresses { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Contacts.CNLabeledValue`1&lt;class MonoTouch.Contacts.CNInstantMessageAddress&gt;[] InstantMessageAddresses" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("instantMessageAddresses")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="unified">MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Contacts.CNInstantMessageAddress&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:MonoTouch.Contacts.CNLabeledValue" /> objects containing the name of the IM service and a string containing the address.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyAvailable">
      <MemberSignature Language="C#" Value="public virtual bool IsKeyAvailable (MonoTouch.Contacts.CNContactOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsKeyAvailable(valuetype MonoTouch.Contacts.CNContactOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MonoTouch.Contacts.CNContactOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>Whether the key described in <param name="options" /> is available for this <see cref="T:Monotouch.Contacts.CNContact" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsKeyAvailable">
      <MemberSignature Language="C#" Value="public virtual bool IsKeyAvailable (MonoTouch.Foundation.NSString contactKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsKeyAvailable(class MonoTouch.Foundation.NSString contactKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("isKeyAvailable:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contactKey" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="contactKey">To be added.</param>
        <summary>Whether the key <param name="contactKey" /> is available for this <see cref="T:Monotouch.Contacts.CNContact" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnifiedWithContact">
      <MemberSignature Language="C#" Value="public virtual bool IsUnifiedWithContact (string contactIdentifier);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsUnifiedWithContact(string contactIdentifier) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("isUnifiedWithContactWithIdentifier:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contactIdentifier" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="contactIdentifier">To be added.</param>
        <summary>Whether this <see cref="T:MonoTouch.Contacts.CNContact" /> is unified with the specified <see cref="T:MonoTouch.Contacts.CNContact" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JobTitle">
      <MemberSignature Language="C#" Value="public virtual string JobTitle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string JobTitle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("jobTitle")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The title of the job held by the <see cref="T:MonoTouch.Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizeProperty">
      <MemberSignature Language="C#" Value="public static string LocalizeProperty (MonoTouch.Contacts.CNContactOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LocalizeProperty(valuetype MonoTouch.Contacts.CNContactOptions options) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="options" Type="MonoTouch.Contacts.CNContactOptions" />
      </Parameters>
      <Docs>
        <param name="options">To be added.</param>
        <summary>Gets the localized version of the key described in <param name="options" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalizeProperty">
      <MemberSignature Language="C#" Value="public static string LocalizeProperty (MonoTouch.Foundation.NSString contactKey);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string LocalizeProperty(class MonoTouch.Foundation.NSString contactKey) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("localizedStringForKey:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contactKey" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="contactKey">To be added.</param>
        <summary>Gets the localized value of <param name="contactKey" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MiddleName">
      <MemberSignature Language="C#" Value="public virtual string MiddleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string MiddleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("middleName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The middle name of the <see cref="T:MonoTouch.Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MutableCopy">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject MutableCopy (MonoTouch.Foundation.NSZone zone);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject MutableCopy(class MonoTouch.Foundation.NSZone zone) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("mutableCopyWithZone:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
        <Attributes>
          <Attribute>
            <AttributeName>MonoTouch.ObjCRuntime.Release</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <Parameters>
        <Parameter Name="zone" Type="MonoTouch.Foundation.NSZone" />
      </Parameters>
      <Docs>
        <param name="zone">Zone to use to allocate this object, or null to use the default zone.</param>
        <summary>Performs a copy of the underlying Objective-C object.</summary>
        <returns>This method performs a copy of the underlying Objective-C object state and returns a new instance of it.  It does not actually try to replicate any managed state.</returns>
        <remarks>Implementation of the INSCopyable interface.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NamePrefix">
      <MemberSignature Language="C#" Value="public virtual string NamePrefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamePrefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("namePrefix")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name prefix of the <see cref="T:MonoTouch.Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NameSuffix">
      <MemberSignature Language="C#" Value="public virtual string NameSuffix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NameSuffix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("nameSuffix")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name suffix of the <see cref="T:MonoTouch.Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Nickname">
      <MemberSignature Language="C#" Value="public virtual string Nickname { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Nickname" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("nickname")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An affectionate name for the <see cref="T:MonoTouch.Contacts.CNContact" />, like 'Code-master' or 'Mr. F#'.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NonGregorianBirthday">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSDateComponents NonGregorianBirthday { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSDateComponents NonGregorianBirthday" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("nonGregorianBirthday")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSDateComponents</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Birthday represented in a non-Gregorian calendar.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Note">
      <MemberSignature Language="C#" Value="public virtual string Note { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Note" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("note")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Freeform text associated with the <see cref="T:MonoTouch.Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OrganizationName">
      <MemberSignature Language="C#" Value="public virtual string OrganizationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string OrganizationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("organizationName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The name of the organization associated with the <see cref="T:MonoTouch.Contacts.CNContact" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneNumbers">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Contacts.CNPhoneNumber&gt;[] PhoneNumbers { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Contacts.CNLabeledValue`1&lt;class MonoTouch.Contacts.CNPhoneNumber&gt;[] PhoneNumbers" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("phoneNumbers")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="unified">MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Contacts.CNPhoneNumber&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:MonoTouch.Contacts.CNLabeledValue" /> objects containing the name of the phone number and the value as a <see cref="T:MonoTouch.Contacts.CNPhoneNumber" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticFamilyName">
      <MemberSignature Language="C#" Value="public virtual string PhoneticFamilyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhoneticFamilyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("phoneticFamilyName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The family name of the <see cref="T:MonoTouch.Contacts.CNContact" />, represented as a phonetic string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticGivenName">
      <MemberSignature Language="C#" Value="public virtual string PhoneticGivenName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhoneticGivenName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("phoneticGivenName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The given name of the <see cref="T:MonoTouch.Contacts.CNContact" />, represented as a phonetic string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticMiddleName">
      <MemberSignature Language="C#" Value="public virtual string PhoneticMiddleName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhoneticMiddleName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("phoneticMiddleName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The middle name of the <see cref="T:MonoTouch.Contacts.CNContact" />, represented as a phonetic string.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PhoneticOrganizationName" apistyle="unified">
      <MemberSignature Language="C#" Value="public virtual string PhoneticOrganizationName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PhoneticOrganizationName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 12, MonoTouch.ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("phoneticOrganizationName")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.iOS, 10, 0, MonoTouch.ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Introduced(MonoTouch.ObjCRuntime.PlatformName.MacOSX, 10, 12, MonoTouch.ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostalAddresses">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Contacts.CNPostalAddress&gt;[] PostalAddresses { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Contacts.CNLabeledValue`1&lt;class MonoTouch.Contacts.CNPostalAddress&gt;[] PostalAddresses" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("postalAddresses")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="unified">MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Contacts.CNPostalAddress&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:MonoTouch.Contacts.CNLabeledValue" /> objects containing the name of the address and the value as a <see cref="T:MonoTouch.Containts.CNPostalAddress" /> object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PreviousFamilyName">
      <MemberSignature Language="C#" Value="public virtual string PreviousFamilyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PreviousFamilyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("previousFamilyName")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The previous family name of the <see cref="T:Monotouch.Contacts.CNContact" /> (for instance, the maiden name).</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PropertyNotFetchedExceptionName">
      <MemberSignature Language="C#" Value="public static MonoTouch.Foundation.NSString PropertyNotFetchedExceptionName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class MonoTouch.Foundation.NSString PropertyNotFetchedExceptionName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Field("CNContactPropertyNotFetchedExceptionName", "Contacts")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Used as the name of an exception thrown when attempting to read a property that has not been fetched.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SocialProfiles">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Contacts.CNSocialProfile&gt;[] SocialProfiles { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Contacts.CNLabeledValue`1&lt;class MonoTouch.Contacts.CNSocialProfile&gt;[] SocialProfiles" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("socialProfiles")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="unified">MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Contacts.CNSocialProfile&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:MonoTouch.Contacts.CNLabeledValue" /> objects containing the name of the social service and the value as a <see cref="T:MonoTouch.Contacts.CNSocialService" /> object.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThumbnailImageData">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSData ThumbnailImageData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSData ThumbnailImageData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("thumbnailImageData")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Thumbnail version of the <see cref="T:MonoTouch.Contacts.CNContact" />'s profile picture.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UrlAddresses">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Foundation.NSString&gt;[] UrlAddresses { get; }" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Contacts.CNLabeledValue`1&lt;class MonoTouch.Foundation.NSString&gt;[] UrlAddresses" apistyle="unified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("urlAddresses")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType apistyle="unified">MonoTouch.Contacts.CNLabeledValue&lt;MonoTouch.Foundation.NSString&gt;[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An array of <see cref="T:MonoTouch.Contacts.CNLabeledValue" /> objects containing the name of the URL and a string value holding the URL address.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
