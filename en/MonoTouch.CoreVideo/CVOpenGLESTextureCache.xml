<Type Name="CVOpenGLESTextureCache" FullName="MonoTouch.CoreVideo.CVOpenGLESTextureCache">
  <TypeSignature Language="C#" Value="public class CVOpenGLESTextureCache : IDisposable, MonoTouch.ObjCRuntime.INativeObject" apistyle="classic" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CVOpenGLESTextureCache extends System.Object implements class MonoTouch.ObjCRuntime.INativeObject, class System.IDisposable" apistyle="classic" />
  <TypeSignature Language="C#" Value="public class CVOpenGLESTextureCache" apistyle="unified" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CVOpenGLESTextureCache extends System.Object" apistyle="unified" />
  <AssemblyInfo apistyle="classic">
    <AssemblyName>OpenTK</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo apistyle="unified">
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>MonoTouch.ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Cache to manage CVOpenGLESTexture objects.</summary>
    <remarks>
      <para>This type is defined in the <c>OpenTK.dll</c> assembly.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor" apistyle="unified">
      <MemberSignature Language="C#" Value="public CVOpenGLESTextureCache ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="unified">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor" apistyle="classic">
      <MemberSignature Language="C#" Value="public CVOpenGLESTextureCache (MonoTouch.OpenGLES.EAGLContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.OpenGLES.EAGLContext context) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>OpenTK</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="MonoTouch.OpenGLES.EAGLContext" />
      </Parameters>
      <Docs>
        <param name="context">An EAGLContext.</param>
        <summary>Initializes a texture cache for the specified context, throws an exception on failure.</summary>
        <remarks>
          <example>
            <code lang="c#">
void CreateTexture (MonoTouch.CoreMedia.CMSampleBuffer sampleBuffer)
{
	var context = new EAGLContext (EAGLRenderingAPI.OpenGLES2);
	var cache = new CVOpenGLESTextureCache (context);

	using (var pixelBuffer = sampleBuffer.GetImageBuffer () as CVPixelBuffer){
	CVReturn status;
	var lumaTexture = cache.TextureFromImage (pixelBuffer, true, re, pixelBuffer.Width, pixelBuffer.Height, re, DataType.UnsignedByte, 0, out status);
	GL.BindTexture ((All)lumaTexture.Target, lumaTexture.Name);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose" apistyle="classic">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>OpenTK</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources for the texture cache.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose" apistyle="classic">
      <MemberSignature Language="C#" Value="public virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>OpenTK</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
        </param>
        <summary>Releases the resources for the texture cache, invoked by subclasses that override Dispose.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize" apistyle="classic">
      <MemberSignature Language="C#" Value="~CVOpenGLESTextureCache ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>OpenTK</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Flush" apistyle="classic">
      <MemberSignature Language="C#" Value="public void Flush (MonoTouch.CoreVideo.CVOptionFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Flush(valuetype MonoTouch.CoreVideo.CVOptionFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>OpenTK</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="MonoTouch.CoreVideo.CVOptionFlags" />
      </Parameters>
      <Docs>
        <param name="flags">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromEAGLContext" apistyle="classic">
      <MemberSignature Language="C#" Value="public static MonoTouch.CoreVideo.CVOpenGLESTextureCache FromEAGLContext (MonoTouch.OpenGLES.EAGLContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.CoreVideo.CVOpenGLESTextureCache FromEAGLContext(class MonoTouch.OpenGLES.EAGLContext context) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>OpenTK</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreVideo.CVOpenGLESTextureCache</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="MonoTouch.OpenGLES.EAGLContext" />
      </Parameters>
      <Docs>
        <param name="context">An EAGLContext.</param>
        <summary>Initializes a texture cache for the specified context, returns null on failure.</summary>
        <returns>null on failure, or the instance of the cache on success.</returns>
        <remarks>
          <example>
            <code lang="c#">
void CreateTexture (MonoTouch.CoreMedia.CMSampleBuffer sampleBuffer)
{
	var context = new EAGLContext (EAGLRenderingAPI.OpenGLES2);
	var cache = CVOpenGLESTextureCache.FromEAGLContext (context);

	using (var pixelBuffer = sampleBuffer.GetImageBuffer () as CVPixelBuffer){
	CVReturn status;
	var lumaTexture = cache.TextureFromImage (pixelBuffer, true, re, pixelBuffer.Width, pixelBuffer.Height, re, DataType.UnsignedByte, 0, out status);
	GL.BindTexture ((All)lumaTexture.Target, lumaTexture.Name);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle" apistyle="classic">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>OpenTK</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle to the native cache.</summary>
        <value>
        </value>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextureFromImage" apistyle="classic">
      <MemberSignature Language="C#" Value="public MonoTouch.CoreVideo.CVOpenGLESTexture TextureFromImage (MonoTouch.CoreVideo.CVImageBuffer imageBuffer, bool isTexture2d, OpenTK.Graphics.ES20.All internalFormat, int width, int height, OpenTK.Graphics.ES20.All pixelFormat, OpenTK.Graphics.ES20.DataType pixelType, int planeIndex, out MonoTouch.CoreVideo.CVReturn errorCode);" apistyle="classic" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.CoreVideo.CVOpenGLESTexture TextureFromImage(class MonoTouch.CoreVideo.CVImageBuffer imageBuffer, bool isTexture2d, valuetype OpenTK.Graphics.ES20.All internalFormat, int32 width, int32 height, valuetype OpenTK.Graphics.ES20.All pixelFormat, valuetype OpenTK.Graphics.ES20.DataType pixelType, int32 planeIndex, valuetype MonoTouch.CoreVideo.CVReturn errorCode) cil managed" apistyle="classic" />
      <MemberSignature Language="C#" Value="public MonoTouch.CoreVideo.CVOpenGLESTexture TextureFromImage (MonoTouch.CoreVideo.CVImageBuffer imageBuffer, bool isTexture2d, MonoTouch.OpenTK.Graphics.ES20.All internalFormat, int width, int height, MonoTouch.OpenTK.Graphics.ES20.All pixelFormat, MonoTouch.OpenTK.Graphics.ES20.DataType pixelType, int planeIndex, out MonoTouch.CoreVideo.CVReturn errorCode);" apistyle="unified" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class MonoTouch.CoreVideo.CVOpenGLESTexture TextureFromImage(class MonoTouch.CoreVideo.CVImageBuffer imageBuffer, bool isTexture2d, valuetype MonoTouch.OpenTK.Graphics.ES20.All internalFormat, int32 width, int32 height, valuetype MonoTouch.OpenTK.Graphics.ES20.All pixelFormat, valuetype MonoTouch.OpenTK.Graphics.ES20.DataType pixelType, int32 planeIndex, valuetype MonoTouch.CoreVideo.CVReturn errorCode) cil managed" apistyle="unified" />
      <MemberType>Method</MemberType>
      <AssemblyInfo apistyle="classic">
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>OpenTK</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreVideo.CVOpenGLESTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="imageBuffer" Type="MonoTouch.CoreVideo.CVImageBuffer" />
        <Parameter Name="isTexture2d" Type="System.Boolean" />
        <Parameter Name="internalFormat" Type="OpenTK.Graphics.ES20.All" apistyle="classic" />
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
        <Parameter Name="pixelFormat" Type="OpenTK.Graphics.ES20.All" apistyle="classic" />
        <Parameter Name="pixelType" Type="OpenTK.Graphics.ES20.DataType" apistyle="classic" />
        <Parameter Name="planeIndex" Type="System.Int32" />
        <Parameter Name="errorCode" Type="MonoTouch.CoreVideo.CVReturn&amp;" RefType="out" />
        <Parameter Name="internalFormat" Type="MonoTouch.OpenTK.Graphics.ES20.All" apistyle="unified" />
        <Parameter Name="pixelFormat" Type="MonoTouch.OpenTK.Graphics.ES20.All" apistyle="unified" />
        <Parameter Name="pixelType" Type="MonoTouch.OpenTK.Graphics.ES20.DataType" apistyle="unified" />
      </Parameters>
      <Docs>
        <param name="imageBuffer">CoreVideo image buffer.</param>
        <param name="isTexture2d">Whether to to create a GL_TEXTURE_2D texture (true) or a GL_RENDERBUFFER (false).</param>
        <param name="internalFormat">Specifies the number of color components in the source (for example, GL_RGBA, GL_LUMINANCE, GL_RED, GL_RG).</param>
        <param name="width">Width for the texture image.</param>
        <param name="height">Heigh for the texture image.</param>
        <param name="pixelFormat">Specifies the format for the pixel data.</param>
        <param name="pixelType">The size of the pixel data, for example All.UnsignedByte (GL_UNSIGNED_BYTE)</param>
        <param name="planeIndex">The plane index to map.   For biplanar buffers you can use 0 and 1, otherwise 0.</param>
        <param name="errorCode">Status code</param>
        <summary>Creates a live texture binding from the specified CVImageBuffer with the given parameters.</summary>
        <returns>The texture, or null on error.</returns>
        <remarks>
          <para>Some examples include:</para>
          <example>
            <code lang="c#">
// Mapping a BGRA buffer as a source texture:
cache.TextureFromImage (buffer, true, All.Rgba, width, height, All.Rgba, DataType.UnsignedByte, 0, out status);

// Mapping a BGRA buffer as a renderbuffer
cache.TextureFromImage (buffer, false, All.Rgba8Oes, width, height, All.Rgba, DataType.UnsignedByte, 0, out status);

//Mapping the luma plane of a 420v buffer as a source texture:
cache.TextureFromImage (buffer, true, All.Luminance, width, height, All.Luminance, DataType.UnsignedByte, 0, out status);

// Mapping the chroma plane of a 420v buffer as a source texture:
cache.TextureFromImage (buffer, true, All.LuminanceAlpha, width/2, height/2, All.LuminanceAlpha, DataType.UnsignedByte, 0, out status);
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
