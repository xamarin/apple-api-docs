<Type Name="SLRequest" FullName="Social.SLRequest">
  <TypeSignature Language="C#" Value="public class SLRequest : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SLRequest extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:Social.SLRequest" />
  <TypeSignature Language="F#" Value="type SLRequest = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("SLRequest", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 6, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 8, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A request made to a social service.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Social/Reference/SLRequest_Class/index.html">Apple documentation for <c>SLRequest</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SLRequest (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLRequest.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Social.SLRequest : Foundation.NSObjectFlag -&gt; Social.SLRequest" Usage="new Social.SLRequest t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal SLRequest (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLRequest.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Social.SLRequest : nativeint -&gt; Social.SLRequest" Usage="new Social.SLRequest handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Account">
      <MemberSignature Language="C#" Value="public virtual Accounts.ACAccount Account { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Accounts.ACAccount Account" />
      <MemberSignature Language="DocId" Value="P:Social.SLRequest.Account" />
      <MemberSignature Language="F#" Value="member this.Account : Accounts.ACAccount with get, set" Usage="Social.SLRequest.Account" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("account")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAccount:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("account", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAccount:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Accounts.ACAccount</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the account with which to make the request.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddMultipartData">
      <MemberSignature Language="C#" Value="public virtual void AddMultipartData (Foundation.NSData data, string partName, string partType, string filename);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddMultipartData(class Foundation.NSData data, string partName, string partType, string filename) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLRequest.AddMultipartData(Foundation.NSData,System.String,System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddMultipartData : Foundation.NSData * string * string * string -&gt; unit&#xA;override this.AddMultipartData : Foundation.NSData * string * string * string -&gt; unit" Usage="sLRequest.AddMultipartData (data, partName, partType, filename)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addMultipartData:withName:type:filename:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="partName" Type="System.String" />
        <Parameter Name="partType" Type="System.String" />
        <Parameter Name="filename" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="partName">To be added.</param>
        <param name="partType">To be added.</param>
        <param name="filename">To be added.</param>
        <summary>Adds the multipart data to the request.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Social.SLRequest.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Social.SLRequest.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Social.SLRequest Create (Foundation.NSString serviceType, Social.SLRequestMethod requestMethod, Foundation.NSUrl url, Foundation.NSDictionary parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Social.SLRequest Create(class Foundation.NSString serviceType, valuetype Social.SLRequestMethod requestMethod, class Foundation.NSUrl url, class Foundation.NSDictionary parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLRequest.Create(Foundation.NSString,Social.SLRequestMethod,Foundation.NSUrl,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="static member Create : Foundation.NSString * Social.SLRequestMethod * Foundation.NSUrl * Foundation.NSDictionary -&gt; Social.SLRequest" Usage="Social.SLRequest.Create (serviceType, requestMethod, url, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("requestForServiceType:requestMethod:URL:parameters:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Social.SLRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceType" Type="Foundation.NSString" />
        <Parameter Name="requestMethod" Type="Social.SLRequestMethod" />
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="parameters" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="serviceType">To be added.</param>
        <param name="requestMethod">To be added.</param>
        <param name="url">To be added.</param>
        <param name="parameters">
          <para>HTTP parameters for this request.   The actual values are specific to the specific backend.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new request object with the specified values.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static Social.SLRequest Create (Social.SLServiceKind serviceKind, Social.SLRequestMethod method, Foundation.NSUrl url, Foundation.NSDictionary parameters);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Social.SLRequest Create(valuetype Social.SLServiceKind serviceKind, valuetype Social.SLRequestMethod method, class Foundation.NSUrl url, class Foundation.NSDictionary parameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLRequest.Create(Social.SLServiceKind,Social.SLRequestMethod,Foundation.NSUrl,Foundation.NSDictionary)" />
      <MemberSignature Language="F#" Value="static member Create : Social.SLServiceKind * Social.SLRequestMethod * Foundation.NSUrl * Foundation.NSDictionary -&gt; Social.SLRequest" Usage="Social.SLRequest.Create (serviceKind, method, url, parameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Social.SLRequest</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceKind" Type="Social.SLServiceKind" />
        <Parameter Name="method" Type="Social.SLRequestMethod" />
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="parameters" Type="Foundation.NSDictionary" />
      </Parameters>
      <Docs>
        <param name="serviceKind">To be added.</param>
        <param name="method">To be added.</param>
        <param name="url">To be added.</param>
        <param name="parameters">To be added.</param>
        <summary>Creates a new request object with the specified values.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPreparedUrlRequest">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrlRequest GetPreparedUrlRequest ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSUrlRequest GetPreparedUrlRequest() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLRequest.GetPreparedUrlRequest" />
      <MemberSignature Language="F#" Value="abstract member GetPreparedUrlRequest : unit -&gt; Foundation.NSUrlRequest&#xA;override this.GetPreparedUrlRequest : unit -&gt; Foundation.NSUrlRequest" Usage="sLRequest.GetPreparedUrlRequest " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("preparedURLRequest")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrlRequest</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an authorized request for sending with an NSURLConnection object.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Parameters">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSDictionary Parameters { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSDictionary Parameters" />
      <MemberSignature Language="DocId" Value="P:Social.SLRequest.Parameters" />
      <MemberSignature Language="F#" Value="member this.Parameters : Foundation.NSDictionary" Usage="Social.SLRequest.Parameters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("parameters")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSDictionary</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the HTTP request parameters for the request.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformRequest">
      <MemberSignature Language="C#" Value="public virtual void PerformRequest (Action&lt;Foundation.NSData,Foundation.NSHttpUrlResponse,Foundation.NSError&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformRequest(class System.Action`3&lt;class Foundation.NSData, class Foundation.NSHttpUrlResponse, class Foundation.NSError&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLRequest.PerformRequest(System.Action{Foundation.NSData,Foundation.NSHttpUrlResponse,Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member PerformRequest : Action&lt;Foundation.NSData, Foundation.NSHttpUrlResponse, Foundation.NSError&gt; -&gt; unit&#xA;override this.PerformRequest : Action&lt;Foundation.NSData, Foundation.NSHttpUrlResponse, Foundation.NSError&gt; -&gt; unit" Usage="sLRequest.PerformRequest handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("performRequestWithHandler:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.Action&lt;Foundation.NSData,Foundation.NSHttpUrlResponse,Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity3V1))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="handler">To be added.</param>
        <summary>Makes the request and calls the provided <paramref name="handler" /> when the request completes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformRequestAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Social.SLRequestResult&gt; PerformRequestAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Social.SLRequestResult&gt; PerformRequestAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLRequest.PerformRequestAsync" />
      <MemberSignature Language="F#" Value="abstract member PerformRequestAsync : unit -&gt; System.Threading.Tasks.Task&lt;Social.SLRequestResult&gt;&#xA;override this.PerformRequestAsync : unit -&gt; System.Threading.Tasks.Task&lt;Social.SLRequestResult&gt;" Usage="sLRequest.PerformRequestAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Social.SLRequestResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Makes the request and calls the provided <paramref name="handler" /> when the request completes.</summary>
        <returns>
          <para class="improve-task-t-return-type-description">A task that represents the asynchronous PerformRequest operation.  The value of the TResult parameter is of type System.Action&lt;Foundation.NSData,Foundation.NSHttpUrlResponse,Foundation.NSError&gt;.</para>
        </returns>
        <remarks>
          <para copied="true">The PerformRequestAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RequestMethod">
      <MemberSignature Language="C#" Value="public virtual Social.SLRequestMethod RequestMethod { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype Social.SLRequestMethod RequestMethod" />
      <MemberSignature Language="DocId" Value="P:Social.SLRequest.RequestMethod" />
      <MemberSignature Language="F#" Value="member this.RequestMethod : Social.SLRequestMethod" Usage="Social.SLRequest.RequestMethod" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("requestMethod")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Social.SLRequestMethod</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the request method.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSUrl Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSUrl Url" />
      <MemberSignature Language="DocId" Value="P:Social.SLRequest.Url" />
      <MemberSignature Language="F#" Value="member this.Url : Foundation.NSUrl" Usage="Social.SLRequest.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("URL")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSUrl</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the URL to which the request is sent.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
