<Type Name="SLComposeServiceViewController" FullName="Social.SLComposeServiceViewController">
  <TypeSignature Language="C#" Value="public class SLComposeServiceViewController : UIKit.UIViewController, IDisposable, UIKit.IUITextViewDelegate" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit SLComposeServiceViewController extends UIKit.UIViewController implements class ObjCRuntime.INativeObject, class System.IDisposable, class UIKit.IUIScrollViewDelegate, class UIKit.IUITextViewDelegate" />
  <TypeSignature Language="DocId" Value="T:Social.SLComposeServiceViewController" />
  <TypeSignature Language="F#" Value="type SLComposeServiceViewController = class&#xA;    inherit UIViewController&#xA;    interface IUITextViewDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable&#xA;    interface IUIScrollViewDelegate" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>UIKit.UIViewController</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUIScrollViewDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>UIKit.IUITextViewDelegate</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("SLComposeServiceViewController", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 10, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 8, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A standard UIViewController for composing data for social sharing.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/Social/Reference/SLComposeServiceViewController_Class/index.html">Apple documentation for <c>SLComposeServiceViewController</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SLComposeServiceViewController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SLComposeServiceViewController (Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSCoder coder) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.#ctor(Foundation.NSCoder)" />
      <MemberSignature Language="F#" Value="new Social.SLComposeServiceViewController : Foundation.NSCoder -&gt; Social.SLComposeServiceViewController" Usage="new Social.SLComposeServiceViewController coder" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>
          <para>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).   This is part of the <see cref="T:Foundation.NSCoding" />  protocol.</para>
          <para>If developers want to create a subclass of this object and continue to support deserialization from an archive, they should implement a constructor with an identical signature: taking a single parameter of type <see cref="T:Foundation.NSCoder" /> and decorate it with the [Export("initWithCoder:"] attribute declaration.</para>
          <para>The state of this object can also be serialized by using the companion method, EncodeTo.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SLComposeServiceViewController (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new Social.SLComposeServiceViewController : Foundation.NSObjectFlag -&gt; Social.SLComposeServiceViewController" Usage="new Social.SLComposeServiceViewController t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal SLComposeServiceViewController (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new Social.SLComposeServiceViewController : nativeint -&gt; Social.SLComposeServiceViewController" Usage="new Social.SLComposeServiceViewController handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SLComposeServiceViewController (string nibName, Foundation.NSBundle bundle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string nibName, class Foundation.NSBundle bundle) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.#ctor(System.String,Foundation.NSBundle)" />
      <MemberSignature Language="F#" Value="new Social.SLComposeServiceViewController : string * Foundation.NSBundle -&gt; Social.SLComposeServiceViewController" Usage="new Social.SLComposeServiceViewController (nibName, bundle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithNibName:bundle:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="nibName" Type="System.String" />
        <Parameter Name="bundle" Type="Foundation.NSBundle" />
      </Parameters>
      <Docs>
        <param name="nibName">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="bundle">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new view controller from a named NIB in the provided bundle.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoCompletionViewController">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIViewController AutoCompletionViewController { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UIViewController AutoCompletionViewController" />
      <MemberSignature Language="DocId" Value="P:Social.SLComposeServiceViewController.AutoCompletionViewController" />
      <MemberSignature Language="F#" Value="member this.AutoCompletionViewController : UIKit.UIViewController with get, set" Usage="Social.SLComposeServiceViewController.AutoCompletionViewController" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("autoCompletionViewController")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setAutoCompletionViewController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("autoCompletionViewController", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setAutoCompletionViewController:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIViewController</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the view controller that handles autocompletion suggestions.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual void Cancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Cancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.Cancel" />
      <MemberSignature Language="F#" Value="abstract member Cancel : unit -&gt; unit&#xA;override this.Cancel : unit -&gt; unit" Usage="sLComposeServiceViewController.Cancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("cancel")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dismisses the compose view.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Changed">
      <MemberSignature Language="C#" Value="public virtual void Changed (UIKit.UITextView textView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Changed(class UIKit.UITextView textView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.Changed(UIKit.UITextView)" />
      <MemberSignature Language="F#" Value="abstract member Changed : UIKit.UITextView -&gt; unit&#xA;override this.Changed : UIKit.UITextView -&gt; unit" Usage="sLComposeServiceViewController.Changed textView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textViewDidChange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <summary>Method that is called when the text or formatting changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CharactersRemaining">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSNumber CharactersRemaining { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSNumber CharactersRemaining" />
      <MemberSignature Language="DocId" Value="P:Social.SLComposeServiceViewController.CharactersRemaining" />
      <MemberSignature Language="F#" Value="member this.CharactersRemaining : Foundation.NSNumber with get, set" Usage="Social.SLComposeServiceViewController.CharactersRemaining" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("charactersRemaining")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setCharactersRemaining:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("charactersRemaining", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setCharactersRemaining:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSNumber</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the number of remaining characters.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:Social.SLComposeServiceViewController.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="Social.SLComposeServiceViewController.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContentText">
      <MemberSignature Language="C#" Value="public virtual string ContentText { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ContentText" />
      <MemberSignature Language="DocId" Value="P:Social.SLComposeServiceViewController.ContentText" />
      <MemberSignature Language="F#" Value="member this.ContentText : string" Usage="Social.SLComposeServiceViewController.ContentText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("contentText")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the text that the user entered.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectCancel">
      <MemberSignature Language="C#" Value="public virtual void DidSelectCancel ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSelectCancel() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.DidSelectCancel" />
      <MemberSignature Language="F#" Value="abstract member DidSelectCancel : unit -&gt; unit&#xA;override this.DidSelectCancel : unit -&gt; unit" Usage="sLComposeServiceViewController.DidSelectCancel " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("didSelectCancel")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method that is called when the user presses the Cancel button.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidSelectPost">
      <MemberSignature Language="C#" Value="public virtual void DidSelectPost ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidSelectPost() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.DidSelectPost" />
      <MemberSignature Language="F#" Value="abstract member DidSelectPost : unit -&gt; unit&#xA;override this.DidSelectPost : unit -&gt; unit" Usage="sLComposeServiceViewController.DidSelectPost " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("didSelectPost")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method that is called when the user presses the Post button.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingEnded">
      <MemberSignature Language="C#" Value="public virtual void EditingEnded (UIKit.UITextView textView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EditingEnded(class UIKit.UITextView textView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.EditingEnded(UIKit.UITextView)" />
      <MemberSignature Language="F#" Value="abstract member EditingEnded : UIKit.UITextView -&gt; unit&#xA;override this.EditingEnded : UIKit.UITextView -&gt; unit" Usage="sLComposeServiceViewController.EditingEnded textView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textViewDidEndEditing:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <summary>Method that is called when the editor resigns as first responder.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EditingStarted">
      <MemberSignature Language="C#" Value="public virtual void EditingStarted (UIKit.UITextView textView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void EditingStarted(class UIKit.UITextView textView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.EditingStarted(UIKit.UITextView)" />
      <MemberSignature Language="F#" Value="abstract member EditingStarted : UIKit.UITextView -&gt; unit&#xA;override this.EditingStarted : UIKit.UITextView -&gt; unit" Usage="sLComposeServiceViewController.EditingStarted textView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textViewDidBeginEditing:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <summary>Method that is called when the user begins editing text.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConfigurationItems">
      <MemberSignature Language="C#" Value="public virtual Social.SLComposeSheetConfigurationItem[] GetConfigurationItems ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Social.SLComposeSheetConfigurationItem[] GetConfigurationItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.GetConfigurationItems" />
      <MemberSignature Language="F#" Value="abstract member GetConfigurationItems : unit -&gt; Social.SLComposeSheetConfigurationItem[]&#xA;override this.GetConfigurationItems : unit -&gt; Social.SLComposeSheetConfigurationItem[]" Usage="sLComposeServiceViewController.GetConfigurationItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("configurationItems")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Social.SLComposeSheetConfigurationItem[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Gets an array of optional configuration items that may contain, for example, options to allow the user to choose an account to use.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContentValid">
      <MemberSignature Language="C#" Value="public virtual bool IsContentValid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsContentValid() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.IsContentValid" />
      <MemberSignature Language="F#" Value="abstract member IsContentValid : unit -&gt; bool&#xA;override this.IsContentValid : unit -&gt; bool" Usage="sLComposeServiceViewController.IsContentValid " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("isContentValid")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method that is called to verify the contents before posting.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LoadPreviewView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UIView LoadPreviewView ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class UIKit.UIView LoadPreviewView() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.LoadPreviewView" />
      <MemberSignature Language="F#" Value="abstract member LoadPreviewView : unit -&gt; UIKit.UIView&#xA;override this.LoadPreviewView : unit -&gt; UIKit.UIView" Usage="sLComposeServiceViewController.LoadPreviewView " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("loadPreviewView")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UIView</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Loads a view that shows a preview of the attachments for the post.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Placeholder">
      <MemberSignature Language="C#" Value="public virtual string Placeholder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Placeholder" />
      <MemberSignature Language="DocId" Value="P:Social.SLComposeServiceViewController.Placeholder" />
      <MemberSignature Language="F#" Value="member this.Placeholder : string with get, set" Usage="Social.SLComposeServiceViewController.Placeholder" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("placeholder")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setPlaceholder:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the placeholder text.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PopConfigurationViewController">
      <MemberSignature Language="C#" Value="public virtual void PopConfigurationViewController ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PopConfigurationViewController() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.PopConfigurationViewController" />
      <MemberSignature Language="F#" Value="abstract member PopConfigurationViewController : unit -&gt; unit&#xA;override this.PopConfigurationViewController : unit -&gt; unit" Usage="sLComposeServiceViewController.PopConfigurationViewController " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("popConfigurationViewController")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dismisses the controller.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PresentationAnimationDidFinish">
      <MemberSignature Language="C#" Value="public virtual void PresentationAnimationDidFinish ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PresentationAnimationDidFinish() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.PresentationAnimationDidFinish" />
      <MemberSignature Language="F#" Value="abstract member PresentationAnimationDidFinish : unit -&gt; unit&#xA;override this.PresentationAnimationDidFinish : unit -&gt; unit" Usage="sLComposeServiceViewController.PresentationAnimationDidFinish " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("presentationAnimationDidFinish")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method that is called after the animated presentation transition finishes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PushConfigurationViewController">
      <MemberSignature Language="C#" Value="public virtual void PushConfigurationViewController (UIKit.UIViewController viewController);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PushConfigurationViewController(class UIKit.UIViewController viewController) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.PushConfigurationViewController(UIKit.UIViewController)" />
      <MemberSignature Language="F#" Value="abstract member PushConfigurationViewController : UIKit.UIViewController -&gt; unit&#xA;override this.PushConfigurationViewController : UIKit.UIViewController -&gt; unit" Usage="sLComposeServiceViewController.PushConfigurationViewController viewController" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("pushConfigurationViewController:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="viewController" Type="UIKit.UIViewController" />
      </Parameters>
      <Docs>
        <param name="viewController">To be added.</param>
        <summary>Presents the provided view controller, which allows the user to configure the post.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReloadConfigurationItems">
      <MemberSignature Language="C#" Value="public virtual void ReloadConfigurationItems ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReloadConfigurationItems() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.ReloadConfigurationItems" />
      <MemberSignature Language="F#" Value="abstract member ReloadConfigurationItems : unit -&gt; unit&#xA;override this.ReloadConfigurationItems : unit -&gt; unit" Usage="sLComposeServiceViewController.ReloadConfigurationItems " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("reloadConfigurationItems")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Reloads the configuration items.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectionChanged">
      <MemberSignature Language="C#" Value="public virtual void SelectionChanged (UIKit.UITextView textView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SelectionChanged(class UIKit.UITextView textView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.SelectionChanged(UIKit.UITextView)" />
      <MemberSignature Language="F#" Value="abstract member SelectionChanged : UIKit.UITextView -&gt; unit&#xA;override this.SelectionChanged : UIKit.UITextView -&gt; unit" Usage="sLComposeServiceViewController.SelectionChanged textView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textViewDidChangeSelection:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <summary>Method that is called when the selection range changes.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldBeginEditing">
      <MemberSignature Language="C#" Value="public virtual bool ShouldBeginEditing (UIKit.UITextView textView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldBeginEditing(class UIKit.UITextView textView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.ShouldBeginEditing(UIKit.UITextView)" />
      <MemberSignature Language="F#" Value="abstract member ShouldBeginEditing : UIKit.UITextView -&gt; bool&#xA;override this.ShouldBeginEditing : UIKit.UITextView -&gt; bool" Usage="sLComposeServiceViewController.ShouldBeginEditing textView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textViewShouldBeginEditing:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <summary>Method that is called when a text object begins to chnge its text, or in response to the user dropping a file on the text object.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldChangeText">
      <MemberSignature Language="C#" Value="public virtual bool ShouldChangeText (UIKit.UITextView textView, Foundation.NSRange range, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldChangeText(class UIKit.UITextView textView, valuetype Foundation.NSRange range, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.ShouldChangeText(UIKit.UITextView,Foundation.NSRange,System.String)" />
      <MemberSignature Language="F#" Value="abstract member ShouldChangeText : UIKit.UITextView * Foundation.NSRange * string -&gt; bool&#xA;override this.ShouldChangeText : UIKit.UITextView * Foundation.NSRange * string -&gt; bool" Usage="sLComposeServiceViewController.ShouldChangeText (textView, range, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textView:shouldChangeTextInRange:replacementText:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
        <Parameter Name="range" Type="Foundation.NSRange" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <param name="range">To be added.</param>
        <param name="text">To be added.</param>
        <summary>Method that is called to determine if the text in the specified range needs to be changed.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldEndEditing">
      <MemberSignature Language="C#" Value="public virtual bool ShouldEndEditing (UIKit.UITextView textView);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldEndEditing(class UIKit.UITextView textView) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.ShouldEndEditing(UIKit.UITextView)" />
      <MemberSignature Language="F#" Value="abstract member ShouldEndEditing : UIKit.UITextView -&gt; bool&#xA;override this.ShouldEndEditing : UIKit.UITextView -&gt; bool" Usage="sLComposeServiceViewController.ShouldEndEditing textView" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textViewShouldEndEditing:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <summary>Method that is called when resigning first responder status to request permission to end editing.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInteractWithTextAttachment">
      <MemberSignature Language="C#" Value="public virtual bool ShouldInteractWithTextAttachment (UIKit.UITextView textView, UIKit.NSTextAttachment textAttachment, Foundation.NSRange characterRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldInteractWithTextAttachment(class UIKit.UITextView textView, class UIKit.NSTextAttachment textAttachment, valuetype Foundation.NSRange characterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.ShouldInteractWithTextAttachment(UIKit.UITextView,UIKit.NSTextAttachment,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member ShouldInteractWithTextAttachment : UIKit.UITextView * UIKit.NSTextAttachment * Foundation.NSRange -&gt; bool&#xA;override this.ShouldInteractWithTextAttachment : UIKit.UITextView * UIKit.NSTextAttachment * Foundation.NSRange -&gt; bool" Usage="sLComposeServiceViewController.ShouldInteractWithTextAttachment (textView, textAttachment, characterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textView:shouldInteractWithTextAttachment:inRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'ShouldInteractWithTextAttachment' overload that takes 'UITextItemInteraction' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
        <Parameter Name="textAttachment" Type="UIKit.NSTextAttachment" />
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <param name="textAttachment">To be added.</param>
        <param name="characterRange">To be added.</param>
        <summary>Developers should not use this deprecated method. Developers should use the 'ShouldInteractWithTextAttachment' overload that takes 'UITextItemInteraction' instead.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInteractWithTextAttachment">
      <MemberSignature Language="C#" Value="public virtual bool ShouldInteractWithTextAttachment (UIKit.UITextView textView, UIKit.NSTextAttachment textAttachment, Foundation.NSRange characterRange, UIKit.UITextItemInteraction interaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldInteractWithTextAttachment(class UIKit.UITextView textView, class UIKit.NSTextAttachment textAttachment, valuetype Foundation.NSRange characterRange, valuetype UIKit.UITextItemInteraction interaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.ShouldInteractWithTextAttachment(UIKit.UITextView,UIKit.NSTextAttachment,Foundation.NSRange,UIKit.UITextItemInteraction)" />
      <MemberSignature Language="F#" Value="abstract member ShouldInteractWithTextAttachment : UIKit.UITextView * UIKit.NSTextAttachment * Foundation.NSRange * UIKit.UITextItemInteraction -&gt; bool&#xA;override this.ShouldInteractWithTextAttachment : UIKit.UITextView * UIKit.NSTextAttachment * Foundation.NSRange * UIKit.UITextItemInteraction -&gt; bool" Usage="sLComposeServiceViewController.ShouldInteractWithTextAttachment (textView, textAttachment, characterRange, interaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textView:shouldInteractWithTextAttachment:inRange:interaction:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
        <Parameter Name="textAttachment" Type="UIKit.NSTextAttachment" />
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
        <Parameter Name="interaction" Type="UIKit.UITextItemInteraction" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <param name="textAttachment">To be added.</param>
        <param name="characterRange">To be added.</param>
        <param name="interaction">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInteractWithUrl">
      <MemberSignature Language="C#" Value="public virtual bool ShouldInteractWithUrl (UIKit.UITextView textView, Foundation.NSUrl URL, Foundation.NSRange characterRange);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldInteractWithUrl(class UIKit.UITextView textView, class Foundation.NSUrl URL, valuetype Foundation.NSRange characterRange) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.ShouldInteractWithUrl(UIKit.UITextView,Foundation.NSUrl,Foundation.NSRange)" />
      <MemberSignature Language="F#" Value="abstract member ShouldInteractWithUrl : UIKit.UITextView * Foundation.NSUrl * Foundation.NSRange -&gt; bool&#xA;override this.ShouldInteractWithUrl : UIKit.UITextView * Foundation.NSUrl * Foundation.NSRange -&gt; bool" Usage="sLComposeServiceViewController.ShouldInteractWithUrl (textView, URL, characterRange)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textView:shouldInteractWithURL:inRange:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'ShouldInteractWithUrl' overload that takes 'UITextItemInteraction' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 7, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
        <Parameter Name="URL" Type="Foundation.NSUrl" />
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <param name="URL">To be added.</param>
        <param name="characterRange">To be added.</param>
        <summary>Deprecated. Do not use.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShouldInteractWithUrl">
      <MemberSignature Language="C#" Value="public virtual bool ShouldInteractWithUrl (UIKit.UITextView textView, Foundation.NSUrl url, Foundation.NSRange characterRange, UIKit.UITextItemInteraction interaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ShouldInteractWithUrl(class UIKit.UITextView textView, class Foundation.NSUrl url, valuetype Foundation.NSRange characterRange, valuetype UIKit.UITextItemInteraction interaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.ShouldInteractWithUrl(UIKit.UITextView,Foundation.NSUrl,Foundation.NSRange,UIKit.UITextItemInteraction)" />
      <MemberSignature Language="F#" Value="abstract member ShouldInteractWithUrl : UIKit.UITextView * Foundation.NSUrl * Foundation.NSRange * UIKit.UITextItemInteraction -&gt; bool&#xA;override this.ShouldInteractWithUrl : UIKit.UITextView * Foundation.NSUrl * Foundation.NSRange * UIKit.UITextItemInteraction -&gt; bool" Usage="sLComposeServiceViewController.ShouldInteractWithUrl (textView, url, characterRange, interaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("textView:shouldInteractWithURL:inRange:interaction:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textView" Type="UIKit.UITextView" />
        <Parameter Name="url" Type="Foundation.NSUrl" />
        <Parameter Name="characterRange" Type="Foundation.NSRange" />
        <Parameter Name="interaction" Type="UIKit.UITextItemInteraction" />
      </Parameters>
      <Docs>
        <param name="textView">To be added.</param>
        <param name="url">To be added.</param>
        <param name="characterRange">To be added.</param>
        <param name="interaction">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextView">
      <MemberSignature Language="C#" Value="public virtual UIKit.UITextView TextView { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class UIKit.UITextView TextView" />
      <MemberSignature Language="DocId" Value="P:Social.SLComposeServiceViewController.TextView" />
      <MemberSignature Language="F#" Value="member this.TextView : UIKit.UITextView" Usage="Social.SLComposeServiceViewController.TextView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("textView")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>UIKit.UITextView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the text view that is used for editing the text of the post.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateContent">
      <MemberSignature Language="C#" Value="public virtual void ValidateContent ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ValidateContent() cil managed" />
      <MemberSignature Language="DocId" Value="M:Social.SLComposeServiceViewController.ValidateContent" />
      <MemberSignature Language="F#" Value="abstract member ValidateContent : unit -&gt; unit&#xA;override this.ValidateContent : unit -&gt; unit" Usage="sLComposeServiceViewController.ValidateContent " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("validateContent")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Method that is called to validate the post's contents.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
