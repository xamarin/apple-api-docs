<Type Name="DispatchSource+VnodeMonitor" FullName="CoreFoundation.DispatchSource+VnodeMonitor">
  <TypeSignature Language="C#" Value="public class DispatchSource.VnodeMonitor : CoreFoundation.DispatchSource" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit DispatchSource/VnodeMonitor extends CoreFoundation.DispatchSource" />
  <TypeSignature Language="DocId" Value="T:CoreFoundation.DispatchSource.VnodeMonitor" />
  <TypeSignature Language="F#" Value="type DispatchSource.VnodeMonitor = class&#xA;    inherit DispatchSource" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreFoundation.DispatchSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Sources of this type monitor the virtual filesystem nodes for state changes.</summary>
    <remarks>
      <para />
      <example>
        <code lang="c#"><![CDATA[
var stream = File.Create ("Demo.txt");

// Get the underlying Unix file descriptor
var safeHandle = stream.SafeFileHandle;
IntPtr descriptor = safeHandle.DangerousGetHandle ();
int fileDescriptor = descriptor.ToInt32 ();

var dispatchSource = new DispatchSource.VnodeMonitor (
    fileDescriptor,
    VnodeMonitorKind.Delete | VnodeMonitorKind.Extend | VnodeMonitorKind.Write,
    DispatchQueue.MainQueue
);

dispatchSource.SetRegistrationHandler (() => {
    Console.WriteLine ("Vnode monitor registered");
});

dispatchSource.SetEventHandler (() => {
    var observedEvents = dispatchSource.ObservedEvents;
    Console.WriteLine ("Vnode monitor event for file: {0}", observedEvents);
    dispatchSource.Cancel ();
    stream.Close ();
});

dispatchSource.SetCancelHandler (() => {
    Console.WriteLine (textView, "Vnode monitor cancelled");
});

dispatchSource.Resume ();
]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VnodeMonitor (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.VnodeMonitor.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.VnodeMonitor : nativeint -&gt; CoreFoundation.DispatchSource.VnodeMonitor" Usage="new CoreFoundation.DispatchSource.VnodeMonitor handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VnodeMonitor (IntPtr handle, bool owns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, bool owns) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.VnodeMonitor.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.VnodeMonitor : nativeint * bool -&gt; CoreFoundation.DispatchSource.VnodeMonitor" Usage="new CoreFoundation.DispatchSource.VnodeMonitor (handle, owns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="owns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <param name="owns">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VnodeMonitor (int fileDescriptor, CoreFoundation.VnodeMonitorKind vnodeKind, CoreFoundation.DispatchQueue queue = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 fileDescriptor, valuetype CoreFoundation.VnodeMonitorKind vnodeKind, class CoreFoundation.DispatchQueue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.VnodeMonitor.#ctor(System.Int32,CoreFoundation.VnodeMonitorKind,CoreFoundation.DispatchQueue)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.VnodeMonitor : int * CoreFoundation.VnodeMonitorKind * CoreFoundation.DispatchQueue -&gt; CoreFoundation.DispatchSource.VnodeMonitor" Usage="new CoreFoundation.DispatchSource.VnodeMonitor (fileDescriptor, vnodeKind, queue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileDescriptor" Type="System.Int32" />
        <Parameter Name="vnodeKind" Type="CoreFoundation.VnodeMonitorKind" />
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
      </Parameters>
      <Docs>
        <param name="fileDescriptor">Unix file descriptor to monitor</param>
        <param name="vnodeKind">The kind of monitoring to perform.</param>
        <param name="queue">The target queue for this dispatch source object.   Pass null to use the default target queue (the default priority global concurrent queue).</param>
        <summary>Creates a VNode monitor for the specified file descriptor to monitor the specified set of events on it.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VnodeMonitor (string path, CoreFoundation.VnodeMonitorKind vnodeKind, CoreFoundation.DispatchQueue queue = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string path, valuetype CoreFoundation.VnodeMonitorKind vnodeKind, class CoreFoundation.DispatchQueue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.VnodeMonitor.#ctor(System.String,CoreFoundation.VnodeMonitorKind,CoreFoundation.DispatchQueue)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.VnodeMonitor : string * CoreFoundation.VnodeMonitorKind * CoreFoundation.DispatchQueue -&gt; CoreFoundation.DispatchSource.VnodeMonitor" Usage="new CoreFoundation.DispatchSource.VnodeMonitor (path, vnodeKind, queue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.String" />
        <Parameter Name="vnodeKind" Type="CoreFoundation.VnodeMonitorKind" />
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
      </Parameters>
      <Docs>
        <param name="path">Path to a file to monitor.</param>
        <param name="vnodeKind">The kind of monitoring to perform.</param>
        <param name="queue">The target queue for this dispatch source object.   Pass null to use the default target queue (the default priority global concurrent queue).</param>
        <summary>Creates a VNode monitor for the specified file path to monitor the specified set of events on it.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.VnodeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="vnodeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileDescriptor">
      <MemberSignature Language="C#" Value="public int FileDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FileDescriptor" />
      <MemberSignature Language="DocId" Value="P:CoreFoundation.DispatchSource.VnodeMonitor.FileDescriptor" />
      <MemberSignature Language="F#" Value="member this.FileDescriptor : int" Usage="CoreFoundation.DispatchSource.VnodeMonitor.FileDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>File descriptor that is being monitored</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ObservedEvents">
      <MemberSignature Language="C#" Value="public CoreFoundation.VnodeMonitorKind ObservedEvents { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreFoundation.VnodeMonitorKind ObservedEvents" />
      <MemberSignature Language="DocId" Value="P:CoreFoundation.DispatchSource.VnodeMonitor.ObservedEvents" />
      <MemberSignature Language="F#" Value="member this.ObservedEvents : CoreFoundation.VnodeMonitorKind" Usage="CoreFoundation.DispatchSource.VnodeMonitor.ObservedEvents" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.VnodeMonitorKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Events that were observed on the file.</summary>
        <value>The events that were observed on the file.</value>
        <remarks>This property can be invoked from the event handler to check on which changes took place on the file being monitored.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
