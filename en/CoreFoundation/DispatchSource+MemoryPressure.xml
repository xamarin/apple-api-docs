<Type Name="DispatchSource+MemoryPressure" FullName="CoreFoundation.DispatchSource+MemoryPressure">
  <TypeSignature Language="C#" Value="public class DispatchSource.MemoryPressure : CoreFoundation.DispatchSource" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit DispatchSource/MemoryPressure extends CoreFoundation.DispatchSource" />
  <TypeSignature Language="DocId" Value="T:CoreFoundation.DispatchSource.MemoryPressure" />
  <TypeSignature Language="F#" Value="type DispatchSource.MemoryPressure = class&#xA;    inherit DispatchSource" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreFoundation.DispatchSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Sources of this type monitor the system memory pressure condition for state changes.  </summary>
    <remarks>
      <para>Elevated memory pressure is a system-wide condition that applications registered for this source should react to by changing their future memory use behavior, e.g. by reducing cache sizes of newly initiated operations until memory pressure returns back to normal.</para>
      <para>
      </para>
      <para>However, applications should not traverse and discard existing caches for past operations when the system memory pressure enters an elevated state, as that is likely to trigger VM operations that will further aggravate system memory pressure.</para>
      <example>
        <code lang="c#"><![CDATA[
var dispatchSource = new DispatchSource.MemoryPressure (
    MemoryPressureFlags.Critical | MemoryPressureFlags.Warn | MemoryPressureFlags.Normal, 
    DispatchQueue.MainQueue);

dispatchSource.SetRegistrationHandler (() => {
    Console.WriteLine ("Memory monitor registered");
});

dispatchSource.SetEventHandler (() => {
    var pressureLevel = dispatchSource.PressureFlags;
    Console.WriteLine ("Memory worning of level: {0}", pressureLevel);
    dispatchSource.Cancel ();
});

dispatchSource.SetCancelHandler (() => {
    Console.WriteLine ("Memory monitor cancelled");
});

dispatchSource.Resume ();
]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryPressure (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.MemoryPressure.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.MemoryPressure : nativeint -&gt; CoreFoundation.DispatchSource.MemoryPressure" Usage="new CoreFoundation.DispatchSource.MemoryPressure handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryPressure (CoreFoundation.MemoryPressureFlags monitorFlags = CoreFoundation.MemoryPressureFlags.Normal | CoreFoundation.MemoryPressureFlags.Warn, CoreFoundation.DispatchQueue queue = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype CoreFoundation.MemoryPressureFlags monitorFlags, class CoreFoundation.DispatchQueue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.MemoryPressure.#ctor(CoreFoundation.MemoryPressureFlags,CoreFoundation.DispatchQueue)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.MemoryPressure : CoreFoundation.MemoryPressureFlags * CoreFoundation.DispatchQueue -&gt; CoreFoundation.DispatchSource.MemoryPressure" Usage="new CoreFoundation.DispatchSource.MemoryPressure (monitorFlags, queue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="monitorFlags" Type="CoreFoundation.MemoryPressureFlags" />
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
      </Parameters>
      <Docs>
        <param name="monitorFlags">Memory pressure flags to monitor.   The default just monitors memory pressure warnings and the return to normal.</param>
        <param name="queue">The target queue for this dispatch source object.   Pass null to use the default target queue (the default priority global concurrent queue).</param>
        <summary>To be added.</summary>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MemoryPressure (IntPtr handle, bool owns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, bool owns) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.MemoryPressure.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.MemoryPressure : nativeint * bool -&gt; CoreFoundation.DispatchSource.MemoryPressure" Usage="new CoreFoundation.DispatchSource.MemoryPressure (handle, owns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="owns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <param name="owns">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PressureFlags">
      <MemberSignature Language="C#" Value="public CoreFoundation.MemoryPressureFlags PressureFlags { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype CoreFoundation.MemoryPressureFlags PressureFlags" />
      <MemberSignature Language="DocId" Value="P:CoreFoundation.DispatchSource.MemoryPressure.PressureFlags" />
      <MemberSignature Language="F#" Value="member this.PressureFlags : CoreFoundation.MemoryPressureFlags" Usage="CoreFoundation.DispatchSource.MemoryPressure.PressureFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.MemoryPressureFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Reports the condition that was observed.</summary>
        <value>The condition observed.</value>
        <remarks>The event handler can probe this property to determine why it was invoked.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
