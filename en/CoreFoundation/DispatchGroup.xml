<Type Name="DispatchGroup" FullName="CoreFoundation.DispatchGroup">
  <TypeSignature Language="C#" Value="public class DispatchGroup : CoreFoundation.DispatchObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit DispatchGroup extends CoreFoundation.DispatchObject" />
  <TypeSignature Language="DocId" Value="T:CoreFoundation.DispatchGroup" />
  <TypeSignature Language="F#" Value="type DispatchGroup = class&#xA;    inherit DispatchObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreFoundation.DispatchObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Manages group of code blocks allows for aggregate synchronization.</summary>
    <remarks>Code block can be executed on different dispatch queues but managed as a group.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static CoreFoundation.DispatchGroup Create ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreFoundation.DispatchGroup Create() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchGroup.Create" />
      <MemberSignature Language="F#" Value="static member Create : unit -&gt; CoreFoundation.DispatchGroup" Usage="CoreFoundation.DispatchGroup.Create " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.DispatchGroup</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Creates a new dispatch group.</summary>
        <returns>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DispatchAsync">
      <MemberSignature Language="C#" Value="public void DispatchAsync (CoreFoundation.DispatchQueue queue, Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DispatchAsync(class CoreFoundation.DispatchQueue queue, class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchGroup.DispatchAsync(CoreFoundation.DispatchQueue,System.Action)" />
      <MemberSignature Language="F#" Value="member this.DispatchAsync : CoreFoundation.DispatchQueue * Action -&gt; unit" Usage="dispatchGroup.DispatchAsync (queue, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="queue">The dispatch queue to which the block will be submitted for asynchronous invocation.</param>
        <param name="action">The action to invoke asynchronously.</param>
        <summary>Submits a block to a dispatch queue and associates the block with the given dispatch group.</summary>
        <remarks>Submits a block to a dispatch queue and associates the block with the given dispatch group. The dispatch group may be used to wait for the completion of the blocks it references.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Enter">
      <MemberSignature Language="C#" Value="public void Enter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Enter() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchGroup.Enter" />
      <MemberSignature Language="F#" Value="member this.Enter : unit -&gt; unit" Usage="dispatchGroup.Enter " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Explicitly sets that a code block is beeing managed by the group.</summary>
        <remarks>It can be used to manually manage dispatch group tasks by incrementing the current count of outstanding tasks in the group.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Leave">
      <MemberSignature Language="C#" Value="public void Leave ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Leave() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchGroup.Leave" />
      <MemberSignature Language="F#" Value="member this.Leave : unit -&gt; unit" Usage="dispatchGroup.Leave " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases a code block association with the group.</summary>
        <remarks>It can be used to manually manage dispatch group tasks by decrementing the current count of outstanding tasks in the group.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Notify">
      <MemberSignature Language="C#" Value="public void Notify (CoreFoundation.DispatchQueue queue, Action action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Notify(class CoreFoundation.DispatchQueue queue, class System.Action action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchGroup.Notify(CoreFoundation.DispatchQueue,System.Action)" />
      <MemberSignature Language="F#" Value="member this.Notify : CoreFoundation.DispatchQueue * Action -&gt; unit" Usage="dispatchGroup.Notify (queue, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
        <Parameter Name="action" Type="System.Action" />
      </Parameters>
      <Docs>
        <param name="queue">The dispatch queue to which the block will be submitted for asynchronous invocation.</param>
        <param name="action">The action to invoke when the group completes.</param>
        <summary>Schedule a block to be submitted to a queue when all the blocks associated with a group have completed.</summary>
        <remarks>
          <para>This function schedules a notification block to be submitted to the specified queue once all blocks associated with the dispatch group have completed.</para>
          <para>
          </para>
          <para>If no blocks are associated with the dispatch group (i.e. the group is empty) then the notification block will be submitted immediately.</para>
          <para>
          </para>
          <para>The group will be empty at the time the notification block is submitted to the target queue.Â </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Wait">
      <MemberSignature Language="C#" Value="public bool Wait (CoreFoundation.DispatchTime timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Wait(valuetype CoreFoundation.DispatchTime timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchGroup.Wait(CoreFoundation.DispatchTime)" />
      <MemberSignature Language="F#" Value="member this.Wait : CoreFoundation.DispatchTime -&gt; bool" Usage="dispatchGroup.Wait timeout" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="timeout" Type="CoreFoundation.DispatchTime" />
      </Parameters>
      <Docs>
        <param name="timeout">A DispatchTime that represents the number of nanoseconds to wait.</param>
        <summary>Waits synchronously for all blocks in the group to complete or the specified timeout has elapsed.</summary>
        <returns>
          <see langword="true" /> if all code blockes finished before timeout otherwise <see langword="false" />.</returns>
        <remarks>
          <para>This function waits for the completion of the blocks associated with the given dispatch group, and returns after all blocks have completed or when the specified timeout has elapsed.</para>
          <para />
          <para>This function will return immediately if there are no blocks associated with the dispatch group (i.e. the group is empty).</para>
          <para />
          <para>The result of calling this function from multiple threads simultaneously with the same dispatch group is undefined.</para>
          <para />
          <para>After the successful return of this function, the dispatch group is empty.</para>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
