<Type Name="DispatchSource+MachSend" FullName="CoreFoundation.DispatchSource+MachSend">
  <TypeSignature Language="C#" Value="public class DispatchSource.MachSend : CoreFoundation.DispatchSource.Mach" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit DispatchSource/MachSend extends CoreFoundation.DispatchSource/Mach" />
  <TypeSignature Language="DocId" Value="T:CoreFoundation.DispatchSource.MachSend" />
  <TypeSignature Language="F#" Value="type DispatchSource.MachSend = class&#xA;    inherit DispatchSource.Mach" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreFoundation.DispatchSource+Mach</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dispatch sources of this type monitors a mach port with a send right for state changes. </summary>
    <remarks>You can use this DispatchSource to monitor both send right state changes as well as the destruction of the corresponding port’s receiver rights.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MachSend (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.MachSend.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.MachSend : nativeint -&gt; CoreFoundation.DispatchSource.MachSend" Usage="new CoreFoundation.DispatchSource.MachSend handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MachSend (IntPtr handle, bool owns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, bool owns) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.MachSend.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.MachSend : nativeint * bool -&gt; CoreFoundation.DispatchSource.MachSend" Usage="new CoreFoundation.DispatchSource.MachSend (handle, owns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="owns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <param name="owns">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MachSend (int machPort, bool sendDead = false, CoreFoundation.DispatchQueue queue = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 machPort, bool sendDead, class CoreFoundation.DispatchQueue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.MachSend.#ctor(System.Int32,System.Boolean,CoreFoundation.DispatchQueue)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.MachSend : int * bool * CoreFoundation.DispatchQueue -&gt; CoreFoundation.DispatchSource.MachSend" Usage="new CoreFoundation.DispatchSource.MachSend (machPort, sendDead, queue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="machPort" Type="System.Int32" />
        <Parameter Name="sendDead" Type="System.Boolean" />
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
      </Parameters>
      <Docs>
        <param name="machPort">The mach port</param>
        <param name="sendDead">If set to true, this will also post a notification when the port’s corresponding receive right has been destroyed.</param>
        <param name="queue">The target queue for this dispatch source object.   Pass null to use the default target queue (the default priority global concurrent queue).</param>
        <summary>Creates a dispatch source that monitors the specified mach port for send right state changes.</summary>
        <remarks>You can use the <see cref="P:CoreFoundation.DispatchSource+MachSend.SendRightsDestroyed" /> property to determine whether the handler was invoked due to the corresponding receive right being destroyed, or if it is a regular state change.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendRightsDestroyed">
      <MemberSignature Language="C#" Value="public bool SendRightsDestroyed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SendRightsDestroyed" />
      <MemberSignature Language="DocId" Value="P:CoreFoundation.DispatchSource.MachSend.SendRightsDestroyed" />
      <MemberSignature Language="F#" Value="member this.SendRightsDestroyed : bool" Usage="CoreFoundation.DispatchSource.MachSend.SendRightsDestroyed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Determines if the handler was invoked due to a send right being destroyed.</summary>
        <value>True if the send right was destroyed.</value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
