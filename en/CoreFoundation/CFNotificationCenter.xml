<Type Name="CFNotificationCenter" FullName="CoreFoundation.CFNotificationCenter">
  <TypeSignature Language="C#" Value="public class CFNotificationCenter : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CFNotificationCenter extends System.Object implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Notification hub for the application.</summary>
    <remarks>
      <para>
	The CFNotificationCenter is a hub that is used to listen to
	broadcast messages and post broadcast messages in an
	application.    The messages that are posted are synchronous.
      </para>
      <para>
	Posting a notification is a synchronous process, which means
	that invoking one of the Post messages on the notification
	center will block execution until all of the notification
	handlers have completed running.
      </para>
      <para>

	While the <see cref="T:Foundation.NSNotificationCenter" /> also
	provides a notification hub, they are separate from each
	other.  The CFNotificationCenter provides three hubs: an
	application local hub, the Darwin hub (for OS-global
	notifications) and a distributed hub (only available on Mac).

      </para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddObserver">
      <MemberSignature Language="C#" Value="public CoreFoundation.CFNotificationObserverToken AddObserver (string name, ObjCRuntime.INativeObject objectToObserve, Action&lt;string,Foundation.NSDictionary&gt; notificationHandler, CoreFoundation.CFNotificationSuspensionBehavior suspensionBehavior = CoreFoundation.CFNotificationSuspensionBehavior.DeliverImmediately);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CoreFoundation.CFNotificationObserverToken AddObserver(string name, class ObjCRuntime.INativeObject objectToObserve, class System.Action`2&lt;string, class Foundation.NSDictionary&gt; notificationHandler, valuetype CoreFoundation.CFNotificationSuspensionBehavior suspensionBehavior) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFNotificationObserverToken</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="objectToObserve" Type="ObjCRuntime.INativeObject" />
        <Parameter Name="notificationHandler" Type="System.Action&lt;System.String,Foundation.NSDictionary&gt;" />
        <Parameter Name="suspensionBehavior" Type="CoreFoundation.CFNotificationSuspensionBehavior" />
      </Parameters>
      <Docs>
        <param name="name">Name of the notification to observer, or <see langword="null" /> if you want the notificationHandler to be invoked for all notifications posted.   <see langword="null" /> is not allowed for the Darwin notification center.</param>
        <param name="objectToObserve">For non-Darwin notification centers, the object to observe.   If <see langword="null" /> is passed, then the notificationHandler is invoked for all objects that have a notification named name posted.</param>
        <param name="notificationHandler">Handler to invoke when a notification is posted.</param>
        <param name="suspensionBehavior">Determines how a notification is processed when the application is in the background.</param>
        <summary>Adds an observer to the notification center.</summary>
        <returns>Token representing the notification, use this token if you want to later remove this observer.</returns>
        <remarks>
          <para>
	    Registers a method to be invoked when a notification is posted to a specific object.
	  </para>
          <para>
	    The handler is invoked on the same thread that posted the
	    message, or from the loop that pumped the notification.
	    If your code needs to run in a specific thread, you should
	    take care of that in your handler.
	  </para>
          <para>
	    Use the returned value as a token to <see cref="M:CoreFoundation.CFNotificationCenter.RemoveObserver" /> if you want to stop getting notifications.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Darwin">
      <MemberSignature Language="C#" Value="public static CoreFoundation.CFNotificationCenter Darwin { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class CoreFoundation.CFNotificationCenter Darwin" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFNotificationCenter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the operating system global notification center.</summary>
        <value>
        </value>
        <remarks>
          <para>

	    This is an operating system global notification center,
	    and can be used to send messages between applications
	    running on the same machine.  There is no notion of user
	    session in the Darwin notification center, so all the
	    notifications are global.

	  </para>
          <para>
	    The main thread loop must be running in one of the common
	    modes (RunLoopDefault for example) for these notifications
	    to be delivered.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the CFNotificationCenter object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the CFNotificationCenter class.</para>
          <para>Calling the Dispose method when the application is finished using the CFNotificationCenter ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CFNotificationCenter object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CFNotificationCenter class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the CFNotificationCenter ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CFNotificationCenter ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the CFNotificationCenter object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Local">
      <MemberSignature Language="C#" Value="public static CoreFoundation.CFNotificationCenter Local { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class CoreFoundation.CFNotificationCenter Local" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFNotificationCenter</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Returns the application local notification center.</summary>
        <value>
        </value>
        <remarks>
	  This is an application local notification center.   Can be used to post notifications inside an application.
	</remarks>
      </Docs>
    </Member>
    <Member MemberName="PostNotification">
      <MemberSignature Language="C#" Value="public void PostNotification (string notification, ObjCRuntime.INativeObject objectToObserve, Foundation.NSDictionary userInfo = null, bool deliverImmediately = false, bool postOnAllSessions = false);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PostNotification(string notification, class ObjCRuntime.INativeObject objectToObserve, class Foundation.NSDictionary userInfo, bool deliverImmediately, bool postOnAllSessions) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="notification" Type="System.String" />
        <Parameter Name="objectToObserve" Type="ObjCRuntime.INativeObject" />
        <Parameter Name="userInfo" Type="Foundation.NSDictionary" />
        <Parameter Name="deliverImmediately" Type="System.Boolean" />
        <Parameter Name="postOnAllSessions" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="notification">To be added.</param>
        <param name="objectToObserve">To be added.</param>
        <param name="userInfo">To be added.</param>
        <param name="deliverImmediately">To be added.</param>
        <param name="postOnAllSessions">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveEveryObserver">
      <MemberSignature Language="C#" Value="public void RemoveEveryObserver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveEveryObserver() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveObserver">
      <MemberSignature Language="C#" Value="public void RemoveObserver (CoreFoundation.CFNotificationObserverToken token);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveObserver(class CoreFoundation.CFNotificationObserverToken token) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="token" Type="CoreFoundation.CFNotificationObserverToken" />
      </Parameters>
      <Docs>
        <param name="token">Token returned by <see cref="M:CoreFoundation.CFNotificationCenter.AddObserver" />.</param>
        <summary>Removes the specified observer.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
