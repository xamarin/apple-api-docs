<Type Name="CFSocket" FullName="CoreFoundation.CFSocket">
  <TypeSignature Language="C#" Value="public class CFSocket : CoreFoundation.CFType, IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CFSocket extends CoreFoundation.CFType implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreFoundation.CFType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
    </summary>
    <remarks>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CFSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Creates a socket for the address family family INET, socket type STREAM, and protocol TCP.</summary>
        <remarks>
          <para>This constructor throws a <see cref="T:CoreFoundation.CFSocketException" /> if there is an error trying to create the socket.</para>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CFSocket (System.Net.Sockets.AddressFamily family, System.Net.Sockets.SocketType type, System.Net.Sockets.ProtocolType proto);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family, valuetype System.Net.Sockets.SocketType type, valuetype System.Net.Sockets.ProtocolType proto) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
        <Parameter Name="type" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="proto" Type="System.Net.Sockets.ProtocolType" />
      </Parameters>
      <Docs>
        <param name="family">Family type for the socket.</param>
        <param name="type">Socket type to create.</param>
        <param name="proto">Protocol type for the socket.</param>
        <summary>Creates a socket by specifying an address family, scoket type and protocol type dispatched on the <see cref="P:CoreFoundation.CFRunLoop.Current" />.</summary>
        <remarks>This constructor throws a <see cref="T:CoreFoundation.CFSocketException" /> if there is an error trying to create the socket.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CFSocket (System.Net.Sockets.AddressFamily family, System.Net.Sockets.SocketType type, System.Net.Sockets.ProtocolType proto, CoreFoundation.CFRunLoop loop);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Net.Sockets.AddressFamily family, valuetype System.Net.Sockets.SocketType type, valuetype System.Net.Sockets.ProtocolType proto, class CoreFoundation.CFRunLoop loop) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
        <Parameter Name="type" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="proto" Type="System.Net.Sockets.ProtocolType" />
        <Parameter Name="loop" Type="CoreFoundation.CFRunLoop" />
      </Parameters>
      <Docs>
        <param name="family">Family type for the socket.</param>
        <param name="type">Socket type to create.</param>
        <param name="proto">Protocol type for the socket.</param>
        <param name="loop">The run loop to which this CFSocket will be added as a source.</param>
        <summary>Creates a socket by specifying an address family, socket type and protocol type with a specified run loop to dispatch on.</summary>
        <remarks>This constructor throws a <see cref="T:CoreFoundation.CFSocketException" /> if there is an error trying to create the socket.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;CoreFoundation.CFSocket.CFSocketAcceptEventArgs&gt; AcceptEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class CoreFoundation.CFSocket/CFSocketAcceptEventArgs&gt; AcceptEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;CoreFoundation.CFSocket+CFSocketAcceptEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised when the socket has accepted a connection (listening sockets).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPEndPoint endpoint, double timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPEndPoint endpoint, float64 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Net.IPEndPoint" />
        <Parameter Name="timeout" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="endpoint">To be added.</param>
        <param name="timeout">Time to wait for the operation to complete.   If the value is negative, no wait takes place, and instead the operation takes place in the background.</param>
        <summary>Connects the socket to the specified endpoint.</summary>
        <remarks>This method throws a <see cref="T:CoreFoundation.CFSocketException" /> if the timeout expires before being able to complete the operation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Connect">
      <MemberSignature Language="C#" Value="public void Connect (System.Net.IPAddress address, int port, double timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Connect(class System.Net.IPAddress address, int32 port, float64 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="timeout" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <param name="port">To be added.</param>
        <param name="timeout">Time to wait for the operation to complete.   If the value is negative, no wait takes place, and instead the operation takes place in the background.</param>
        <summary>Connects the socket to the specified IP address and port.</summary>
        <remarks>This method throws a <see cref="T:CoreFoundation.CFSocketException" /> if the timeout expires before being able to complete the operation.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConnectEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;CoreFoundation.CFSocket.CFSocketConnectEventArgs&gt; ConnectEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class CoreFoundation.CFSocket/CFSocketConnectEventArgs&gt; ConnectEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;CoreFoundation.CFSocket+CFSocketConnectEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised when the socket connect operation has completed.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateConnectedToSocketSignature">
      <MemberSignature Language="C#" Value="public static CoreFoundation.CFSocket CreateConnectedToSocketSignature (System.Net.Sockets.AddressFamily family, System.Net.Sockets.SocketType type, System.Net.Sockets.ProtocolType proto, System.Net.IPEndPoint endpoint, double timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreFoundation.CFSocket CreateConnectedToSocketSignature(valuetype System.Net.Sockets.AddressFamily family, valuetype System.Net.Sockets.SocketType type, valuetype System.Net.Sockets.ProtocolType proto, class System.Net.IPEndPoint endpoint, float64 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFSocket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
        <Parameter Name="type" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="proto" Type="System.Net.Sockets.ProtocolType" />
        <Parameter Name="endpoint" Type="System.Net.IPEndPoint" />
        <Parameter Name="timeout" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="family">To be added.</param>
        <param name="type">To be added.</param>
        <param name="proto">To be added.</param>
        <param name="endpoint">To be added.</param>
        <param name="timeout">Time to wait for the operation to complete.   If the value is negative, no wait takes place, and instead the operation takes place in the background.</param>
        <summary>Creates a connected socket by specifying an address family, socket type, protocol type as well as the endpoint to connect to.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;CoreFoundation.CFSocket.CFSocketDataEventArgs&gt; DataEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class CoreFoundation.CFSocket/CFSocketDataEventArgs&gt; DataEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;CoreFoundation.CFSocket+CFSocketDataEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised when data has been received on the socket.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DisableCallBacks">
      <MemberSignature Language="C#" Value="public void DisableCallBacks (CoreFoundation.CFSocketCallBackType types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DisableCallBacks(valuetype CoreFoundation.CFSocketCallBackType types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="CoreFoundation.CFSocketCallBackType" />
      </Parameters>
      <Docs>
        <param name="types">To be added.</param>
        <summary>Disables a set of events from being raised.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the CFSocket object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the CFSocket class.</para>
          <para>Calling the Dispose method when the application is finished using the CFSocket ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CFSocket object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CFSocket class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the CFSocket ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableCallBacks">
      <MemberSignature Language="C#" Value="public void EnableCallBacks (CoreFoundation.CFSocketCallBackType types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableCallBacks(valuetype CoreFoundation.CFSocketCallBackType types) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="CoreFoundation.CFSocketCallBackType" />
      </Parameters>
      <Docs>
        <param name="types">To be added.</param>
        <summary>Enables a set of events to be raised.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CFSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the CFSocket object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSocketFlags">
      <MemberSignature Language="C#" Value="public CoreFoundation.CFSocketFlags GetSocketFlags ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreFoundation.CFSocketFlags GetSocketFlags() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFSocketFlags</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns the set of CFSocket-specific flags.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;CoreFoundation.CFSocket.CFSocketReadEventArgs&gt; ReadEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class CoreFoundation.CFSocket/CFSocketReadEventArgs&gt; ReadEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;CoreFoundation.CFSocket+CFSocketReadEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised when data is available to be read (the event handler must read the data itself).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SendData">
      <MemberSignature Language="C#" Value="public void SendData (byte[] data, double timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SendData(unsigned int8[] data, float64 timeout) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Byte[]" />
        <Parameter Name="timeout" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="data">To be added.</param>
        <param name="timeout">Time to wait for the operation to complete.  </param>
        <summary>Sends data over the socket.</summary>
        <remarks>This method raises an exception <see cref="T:CoreFoundation.CFSocketException" /> if the sending buffer is full, or the timeout expires before the data is sent.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAddress">
      <MemberSignature Language="C#" Value="public void SetAddress (System.Net.IPEndPoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAddress(class System.Net.IPEndPoint endpoint) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">To be added.</param>
        <summary>Sets the listening address for this socket (equivalent to the BSD bind call).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetAddress">
      <MemberSignature Language="C#" Value="public void SetAddress (System.Net.IPAddress address, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAddress(class System.Net.IPAddress address, int32 port) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="address" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="address">To be added.</param>
        <param name="port">To be added.</param>
        <summary>Sets the listening address for this socket (equivalent to the BSD bind call).</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSocketFlags">
      <MemberSignature Language="C#" Value="public void SetSocketFlags (CoreFoundation.CFSocketFlags flags);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSocketFlags(valuetype CoreFoundation.CFSocketFlags flags) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="flags" Type="CoreFoundation.CFSocketFlags" />
      </Parameters>
      <Docs>
        <param name="flags">To be added.</param>
        <summary>Sets the CFSocket-specific flags.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;CoreFoundation.CFSocket.CFSocketWriteEventArgs&gt; WriteEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class CoreFoundation.CFSocket/CFSocketWriteEventArgs&gt; WriteEvent" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;CoreFoundation.CFSocket+CFSocketWriteEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Event raised when data can be written to the sockets without blocking.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
