<Type Name="CFRunLoop" FullName="CoreFoundation.CFRunLoop">
  <TypeSignature Language="C#" Value="public class CFRunLoop : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CFRunLoop extends System.Object implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Main loop implementation for Cocoa and CocoaTouch applications.</summary>
    <remarks>Run loops can be executed recursively.</remarks>
    <related type="sample" href="http://samples.xamarin.com/Samples/ByGuid?guid=7973effb-bd18-4109-b01f-a377f6f9cb73">reachability</related>
  </Docs>
  <Members>
    <Member MemberName="AddSource">
      <MemberSignature Language="C#" Value="public void AddSource (CoreFoundation.CFRunLoopSource source, Foundation.NSString mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddSource(class CoreFoundation.CFRunLoopSource source, class Foundation.NSString mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="CoreFoundation.CFRunLoopSource" />
        <Parameter Name="mode" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="source">

Source to be added.
  	   </param>
        <param name="mode">The mode to add the source to.  If you use <see cref="P:CoreFoundation.CFRunLoop.CommonModes" /> the source is added to all common modes.        </param>
        <summary>Adds a new source to the run loop on the specified mode.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsSource">
      <MemberSignature Language="C#" Value="public bool ContainsSource (CoreFoundation.CFRunLoopSource source, Foundation.NSString mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool ContainsSource(class CoreFoundation.CFRunLoopSource source, class Foundation.NSString mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="CoreFoundation.CFRunLoopSource" />
        <Parameter Name="mode" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="source">The source to probe.</param>
        <param name="mode">The mode to probe into.</param>
        <summary>Determines whether the run loop contains the specified <see cref="T:CoreFoundation.CFRunLoopSource" /> on a specific mode.</summary>
        <returns>
          <see langword="true" /> if the runloop contains the specified source in the specified mode.</returns>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public static CoreFoundation.CFRunLoop Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class CoreFoundation.CFRunLoop Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFRunLoop</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Active runloop for the current thread.</summary>
        <value>
          <para>
          </para>
        </value>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the CFRunLoop object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the CFRunLoop class.</para>
          <para>Calling the Dispose method when the application is finished using the CFRunLoop ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CFRunLoop object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CFRunLoop class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the CFRunLoop ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object other) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CFRunLoop ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the CFRunLoop object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsWaiting">
      <MemberSignature Language="C#" Value="public bool IsWaiting { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsWaiting" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Indicates that the run loop is currently waiting for an event.</summary>
        <value>
          <see langword="true" /> if the run loop is waiting for an event, <see langword="false" /> otherwise.</value>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Main">
      <MemberSignature Language="C#" Value="public static CoreFoundation.CFRunLoop Main { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class CoreFoundation.CFRunLoop Main" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFRunLoop</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Main run loop object for the application.</summary>
        <value>The main runloop object for the application.</value>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ModeCommon">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ModeCommon { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ModeCommon" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCFRunLoopCommonModes", "CoreFoundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCFRunLoopCommonModes</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ModeDefault">
      <MemberSignature Language="C#" Value="public static Foundation.NSString ModeDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class Foundation.NSString ModeDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Field("kCFRunLoopDefaultMode", "CoreFoundation")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Represents the value associated with the constant kCFRunLoopDefaultMode</summary>
        <value>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool op_Equality (CoreFoundation.CFRunLoop a, CoreFoundation.CFRunLoop b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class CoreFoundation.CFRunLoop a, class CoreFoundation.CFRunLoop b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="CoreFoundation.CFRunLoop" />
        <Parameter Name="b" Type="CoreFoundation.CFRunLoop" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>Compares two managed CFRunLoops for equality, based on whether they share the same native handle.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool op_Inequality (CoreFoundation.CFRunLoop a, CoreFoundation.CFRunLoop b);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class CoreFoundation.CFRunLoop a, class CoreFoundation.CFRunLoop b) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="a" Type="CoreFoundation.CFRunLoop" />
        <Parameter Name="b" Type="CoreFoundation.CFRunLoop" />
      </Parameters>
      <Docs>
        <param name="a">To be added.</param>
        <param name="b">To be added.</param>
        <summary>Compares two managed CFRunLoops for inequality, based on whether they share the same native handle.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveSource">
      <MemberSignature Language="C#" Value="public void RemoveSource (CoreFoundation.CFRunLoopSource source, Foundation.NSString mode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveSource(class CoreFoundation.CFRunLoopSource source, class Foundation.NSString mode) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="CoreFoundation.CFRunLoopSource" />
        <Parameter Name="mode" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="source">Run loop source to remove</param>
        <param name="mode">
The mode to remove it from.  If you use <see cref="P:CoreFoundation.CFRunLoop.CommonModes" /> the source is removed from all common modes.
  	   </param>
        <summary>Removes a source from the runloop.</summary>
        <remarks>
          <para>
          </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Run">
      <MemberSignature Language="C#" Value="public void Run ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Run() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Starts the <see cref="T:CoreFoundation.CFRunLoop" /> for the current thread.</summary>
        <remarks>
          <para>Run the runloop in the default mode.</para>
          <para>
          </para>
          <para>The run loop can be stopped by calling <see cref="M:CoreFoundation.CFRunLoop.Stop" />. </para>
          <para>
          </para>
          <para>The run loop can be determinated if all the sources and timers are removed from it.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RunInMode">
      <MemberSignature Language="C#" Value="public CoreFoundation.CFRunLoopExitReason RunInMode (Foundation.NSString mode, double seconds, bool returnAfterSourceHandled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreFoundation.CFRunLoopExitReason RunInMode(class Foundation.NSString mode, float64 seconds, bool returnAfterSourceHandled) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFRunLoopExitReason</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mode" Type="Foundation.NSString" />
        <Parameter Name="seconds" Type="System.Double" />
        <Parameter Name="returnAfterSourceHandled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="mode">





Mode to execute the runloop on.   This can be any arbitrary string.
  	   
  	   
  	   
  	   
  	   </param>
        <param name="seconds">




Number of seconds to execute the run loop for.   If seconds is zero, the run loop performs a single pass.
  	   
  	   
  	   
  	   
  	   </param>
        <param name="returnAfterSourceHandled">




If <see langword="true" />, processing will return after a single source has been processed.   If <see langword="false" />, then execution continues until the number of <see langword="seconds" /> has elapsed.
  	   
  	   
  	   
  	   
  	   </param>
        <summary>Initiates the runloop for a a particular duration of time.</summary>
        <returns>





Status indicating the reason for the run loop to complete executing.
     
     
     
     
     </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops execution of this runloop.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WakeUp">
      <MemberSignature Language="C#" Value="public void WakeUp ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WakeUp() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wakes up a sleeping runloop.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
