<Type Name="CFStream" FullName="CoreFoundation.CFStream">
  <TypeSignature Language="C#" Value="public abstract class CFStream : CoreFoundation.CFType, IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CFStream extends CoreFoundation.CFType implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:CoreFoundation.CFStream" />
  <TypeSignature Language="F#" Value="type CFStream = class&#xA;    inherit CFType&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreFoundation.CFType</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>An abstract class that defines a stream for reading or writing bytes - modern applications should use the <see cref="N:Network" /> APIs instead.</summary>
    <remarks>
      <format type="text/html">
        <h2>Converting CFStreams to NSStreams</h2>
      </format>
      <para>
	If you need to turn a CFStream into an NSStream, or an
	NSStream subclass, you can do so by surfacing an NSStream
	version of the method like this:
      </para>
      <example>
        <code lang="c#"><![CDATA[
CFReadStream readStream;
CFWriteStream writeStream;
CFStream.CreatePairWithSocketToHost("www.google.com", 80, out readStream, out writeStream);

// 
// Get NSStream variatns
//
_inputStream = ObjCRuntime.Runtime.GetNSObject<NSInputStream>(readStream.Handle);
_outputStream =
ObjCRuntime.Runtime.GetNSObject<NSOutputStream>(writeStream.Handle);
]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CFStream (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.CFStream : nativeint -&gt; CoreFoundation.CFStream" Usage="new CoreFoundation.CFStream handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanAcceptBytesEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; CanAcceptBytesEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class CoreFoundation.CFStream/StreamEventArgs&gt; CanAcceptBytesEvent" />
      <MemberSignature Language="DocId" Value="E:CoreFoundation.CFStream.CanAcceptBytesEvent" />
      <MemberSignature Language="F#" Value="member this.CanAcceptBytesEvent : EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; " Usage="member this.CanAcceptBytesEvent : System.EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;CoreFoundation.CFStream+StreamEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckError">
      <MemberSignature Language="C#" Value="protected void CheckError ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckError() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.CheckError" />
      <MemberSignature Language="F#" Value="member this.CheckError : unit -&gt; unit" Usage="cFStream.CheckError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckHandle">
      <MemberSignature Language="C#" Value="protected void CheckHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.CheckHandle" />
      <MemberSignature Language="F#" Value="member this.CheckHandle : unit -&gt; unit" Usage="cFStream.CheckHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.Close" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="cFStream.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClosedEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; ClosedEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class CoreFoundation.CFStream/StreamEventArgs&gt; ClosedEvent" />
      <MemberSignature Language="DocId" Value="E:CoreFoundation.CFStream.ClosedEvent" />
      <MemberSignature Language="F#" Value="member this.ClosedEvent : EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; " Usage="member this.ClosedEvent : System.EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;CoreFoundation.CFStream+StreamEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBoundPair">
      <MemberSignature Language="C#" Value="public static void CreateBoundPair (out CoreFoundation.CFReadStream readStream, out CoreFoundation.CFWriteStream writeStream, nint bufferSize);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreateBoundPair([out] class CoreFoundation.CFReadStream&amp; readStream, [out] class CoreFoundation.CFWriteStream&amp; writeStream, valuetype System.nint bufferSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.CreateBoundPair(CoreFoundation.CFReadStream@,CoreFoundation.CFWriteStream@,System.nint)" />
      <MemberSignature Language="F#" Value="static member CreateBoundPair :  *  * nint -&gt; unit" Usage="CoreFoundation.CFStream.CreateBoundPair (readStream, writeStream, bufferSize)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="readStream" Type="CoreFoundation.CFReadStream" RefType="out" />
        <Parameter Name="writeStream" Type="CoreFoundation.CFWriteStream" RefType="out" />
        <Parameter Name="bufferSize" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="readStream">On return, contains a stream that can
	be used to read data from the other endpoint.</param>
        <param name="writeStream">On return, contains a stream that
	can be used to write data that is later read by the readStream.</param>
        <param name="bufferSize">Size of the buffer used to
	communicate the writing stream to the reading stream.</param>
        <summary>Creates two streams that act as a pipe.   They are bound together, what is
	written on the writing stream can be read by the reading
	stream. </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForHTTPRequest">
      <MemberSignature Language="C#" Value="public static CoreServices.CFHTTPStream CreateForHTTPRequest (CoreServices.CFHTTPMessage request);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreServices.CFHTTPStream CreateForHTTPRequest(class CoreServices.CFHTTPMessage request) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.CreateForHTTPRequest(CoreServices.CFHTTPMessage)" />
      <MemberSignature Language="F#" Value="static member CreateForHTTPRequest : CoreServices.CFHTTPMessage -&gt; CoreServices.CFHTTPStream" Usage="CoreFoundation.CFStream.CreateForHTTPRequest request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'NSUrlSession'.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.None, "Use 'NSUrlSession'.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CoreServices.CFHTTPStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="CoreServices.CFHTTPMessage" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <summary>Developers should not use this deprecated method. Developers should use 'NSUrlSession'.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForStreamedHTTPRequest">
      <MemberSignature Language="C#" Value="public static CoreServices.CFHTTPStream CreateForStreamedHTTPRequest (CoreServices.CFHTTPMessage request, CoreFoundation.CFReadStream body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreServices.CFHTTPStream CreateForStreamedHTTPRequest(class CoreServices.CFHTTPMessage request, class CoreFoundation.CFReadStream body) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.CreateForStreamedHTTPRequest(CoreServices.CFHTTPMessage,CoreFoundation.CFReadStream)" />
      <MemberSignature Language="F#" Value="static member CreateForStreamedHTTPRequest : CoreServices.CFHTTPMessage * CoreFoundation.CFReadStream -&gt; CoreServices.CFHTTPStream" Usage="CoreFoundation.CFStream.CreateForStreamedHTTPRequest (request, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreServices.CFHTTPStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="CoreServices.CFHTTPMessage" />
        <Parameter Name="body" Type="CoreFoundation.CFReadStream" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="body">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateForStreamedHTTPRequest">
      <MemberSignature Language="C#" Value="public static CoreServices.CFHTTPStream CreateForStreamedHTTPRequest (CoreServices.CFHTTPMessage request, Foundation.NSInputStream body);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class CoreServices.CFHTTPStream CreateForStreamedHTTPRequest(class CoreServices.CFHTTPMessage request, class Foundation.NSInputStream body) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.CreateForStreamedHTTPRequest(CoreServices.CFHTTPMessage,Foundation.NSInputStream)" />
      <MemberSignature Language="F#" Value="static member CreateForStreamedHTTPRequest : CoreServices.CFHTTPMessage * Foundation.NSInputStream -&gt; CoreServices.CFHTTPStream" Usage="CoreFoundation.CFStream.CreateForStreamedHTTPRequest (request, body)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreServices.CFHTTPStream</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="CoreServices.CFHTTPMessage" />
        <Parameter Name="body" Type="Foundation.NSInputStream" />
      </Parameters>
      <Docs>
        <param name="request">To be added.</param>
        <param name="body">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePairWithPeerSocketSignature">
      <MemberSignature Language="C#" Value="public static void CreatePairWithPeerSocketSignature (System.Net.Sockets.AddressFamily family, System.Net.Sockets.SocketType type, System.Net.Sockets.ProtocolType proto, System.Net.IPEndPoint endpoint, out CoreFoundation.CFReadStream readStream, out CoreFoundation.CFWriteStream writeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreatePairWithPeerSocketSignature(valuetype System.Net.Sockets.AddressFamily family, valuetype System.Net.Sockets.SocketType type, valuetype System.Net.Sockets.ProtocolType proto, class System.Net.IPEndPoint endpoint, [out] class CoreFoundation.CFReadStream&amp; readStream, [out] class CoreFoundation.CFWriteStream&amp; writeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.CreatePairWithPeerSocketSignature(System.Net.Sockets.AddressFamily,System.Net.Sockets.SocketType,System.Net.Sockets.ProtocolType,System.Net.IPEndPoint,CoreFoundation.CFReadStream@,CoreFoundation.CFWriteStream@)" />
      <MemberSignature Language="F#" Value="static member CreatePairWithPeerSocketSignature : System.Net.Sockets.AddressFamily * System.Net.Sockets.SocketType * System.Net.Sockets.ProtocolType * System.Net.IPEndPoint *  *  -&gt; unit" Usage="CoreFoundation.CFStream.CreatePairWithPeerSocketSignature (family, type, proto, endpoint, readStream, writeStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="family" Type="System.Net.Sockets.AddressFamily" />
        <Parameter Name="type" Type="System.Net.Sockets.SocketType" />
        <Parameter Name="proto" Type="System.Net.Sockets.ProtocolType" />
        <Parameter Name="endpoint" Type="System.Net.IPEndPoint" />
        <Parameter Name="readStream" Type="CoreFoundation.CFReadStream" RefType="out" />
        <Parameter Name="writeStream" Type="CoreFoundation.CFWriteStream" RefType="out" />
      </Parameters>
      <Docs>
        <param name="family">Address family to use.</param>
        <param name="type">Desired socket type.</param>
        <param name="proto">Desired protocol type.</param>
        <param name="endpoint">Endpoint to connect to.</param>
        <param name="readStream">On return, contains a stream that can
	be used to read from that end point.</param>
        <param name="writeStream">On return, contains a stream that
	can be used to write to the end point.</param>
        <summary>Creates a reading and a writing CFStream to an
        endpoint that are configured to use a specific socket address
        family, a socket type and a protocol.</summary>
        <remarks>
          <para>
	    Use this method when you need more control over the type
	    of connection that you need.   Unlike the other methods in
	    CFStream which default to TCP/IP streams (which sets protocol to
	    Internet, socket type to stream and protocol to TCP) with
	    this method you can specify those parameter individually.
	  </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePairWithSocket">
      <MemberSignature Language="C#" Value="public static void CreatePairWithSocket (CoreFoundation.CFSocket socket, out CoreFoundation.CFReadStream readStream, out CoreFoundation.CFWriteStream writeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreatePairWithSocket(class CoreFoundation.CFSocket socket, [out] class CoreFoundation.CFReadStream&amp; readStream, [out] class CoreFoundation.CFWriteStream&amp; writeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.CreatePairWithSocket(CoreFoundation.CFSocket,CoreFoundation.CFReadStream@,CoreFoundation.CFWriteStream@)" />
      <MemberSignature Language="F#" Value="static member CreatePairWithSocket : CoreFoundation.CFSocket *  *  -&gt; unit" Usage="CoreFoundation.CFStream.CreatePairWithSocket (socket, readStream, writeStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="socket" Type="CoreFoundation.CFSocket" />
        <Parameter Name="readStream" Type="CoreFoundation.CFReadStream" RefType="out" />
        <Parameter Name="writeStream" Type="CoreFoundation.CFWriteStream" RefType="out" />
      </Parameters>
      <Docs>
        <param name="socket">Existing socket.</param>
        <param name="readStream">On return, contains a stream that can
	be used to read from that end point.</param>
        <param name="writeStream">On return, contains a stream that
	can be used to write to the end point.</param>
        <summary>Creates a reading and a writing CFStream on top of an
	existing socket.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePairWithSocketToHost">
      <MemberSignature Language="C#" Value="public static void CreatePairWithSocketToHost (System.Net.IPEndPoint endpoint, out CoreFoundation.CFReadStream readStream, out CoreFoundation.CFWriteStream writeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreatePairWithSocketToHost(class System.Net.IPEndPoint endpoint, [out] class CoreFoundation.CFReadStream&amp; readStream, [out] class CoreFoundation.CFWriteStream&amp; writeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.CreatePairWithSocketToHost(System.Net.IPEndPoint,CoreFoundation.CFReadStream@,CoreFoundation.CFWriteStream@)" />
      <MemberSignature Language="F#" Value="static member CreatePairWithSocketToHost : System.Net.IPEndPoint *  *  -&gt; unit" Usage="CoreFoundation.CFStream.CreatePairWithSocketToHost (endpoint, readStream, writeStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Net.IPEndPoint" />
        <Parameter Name="readStream" Type="CoreFoundation.CFReadStream" RefType="out" />
        <Parameter Name="writeStream" Type="CoreFoundation.CFWriteStream" RefType="out" />
      </Parameters>
      <Docs>
        <param name="endpoint">Endpoint to connect to.</param>
        <param name="readStream">On return, contains a stream that can
	be used to read from that end point.</param>
        <param name="writeStream">On return, contains a stream that
	can be used to write to the end point.</param>
        <summary>Creates a reading and a writing CFStreams that are connected over
	TCP/IP to the specified endpoint.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePairWithSocketToHost">
      <MemberSignature Language="C#" Value="public static void CreatePairWithSocketToHost (string host, int port, out CoreFoundation.CFReadStream readStream, out CoreFoundation.CFWriteStream writeStream);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void CreatePairWithSocketToHost(string host, int32 port, [out] class CoreFoundation.CFReadStream&amp; readStream, [out] class CoreFoundation.CFWriteStream&amp; writeStream) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.CreatePairWithSocketToHost(System.String,System.Int32,CoreFoundation.CFReadStream@,CoreFoundation.CFWriteStream@)" />
      <MemberSignature Language="F#" Value="static member CreatePairWithSocketToHost : string * int *  *  -&gt; unit" Usage="CoreFoundation.CFStream.CreatePairWithSocketToHost (host, port, readStream, writeStream)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="host" Type="System.String" />
        <Parameter Name="port" Type="System.Int32" />
        <Parameter Name="readStream" Type="CoreFoundation.CFReadStream" RefType="out" />
        <Parameter Name="writeStream" Type="CoreFoundation.CFWriteStream" RefType="out" />
      </Parameters>
      <Docs>
        <param name="host">Hostname to connect to.</param>
        <param name="port">TCP port to connect to .</param>
        <param name="readStream">On return, contains a stream that can
	be used to read from that end point.</param>
        <param name="writeStream">On return, contains a stream that
	can be used to write to the end point.</param>
        <summary>Creates a reading and a writing CFStreams that are connected over
	TCP/IP to the specified host and port.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.Dispose" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="cFStream.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Releases the resources used by the CFStream object.</summary>
        <remarks>
          <para>The Dispose method releases the resources used by the CFStream class.</para>
          <para>Calling the Dispose method when the application is finished using the CFStream ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.  For more information on releasing resources see ``Cleaning up Unmananaged Resources'' at http://msdn.microsoft.com/en-us/library/498928w2.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.Dispose(System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="cFStream.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the CFStream object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the CFStream class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when the application is finished using the CFStream ensures that all external resources used by this managed object are released as soon as possible.  Once developers have invoked the Dispose method, the object is no longer useful and developers should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DoClose">
      <MemberSignature Language="C#" Value="protected abstract void DoClose ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void DoClose() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.DoClose" />
      <MemberSignature Language="F#" Value="abstract member DoClose : unit -&gt; unit" Usage="cFStream.DoClose " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoGetProperty">
      <MemberSignature Language="C#" Value="protected abstract IntPtr DoGetProperty (Foundation.NSString name);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int DoGetProperty(class Foundation.NSString name) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.DoGetProperty(Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member DoGetProperty : Foundation.NSString -&gt; nativeint" Usage="cFStream.DoGetProperty name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoGetStatus">
      <MemberSignature Language="C#" Value="protected abstract CoreFoundation.CFStreamStatus DoGetStatus ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance valuetype CoreFoundation.CFStreamStatus DoGetStatus() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.DoGetStatus" />
      <MemberSignature Language="F#" Value="abstract member DoGetStatus : unit -&gt; CoreFoundation.CFStreamStatus" Usage="cFStream.DoGetStatus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFStreamStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoOpen">
      <MemberSignature Language="C#" Value="protected abstract bool DoOpen ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DoOpen() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.DoOpen" />
      <MemberSignature Language="F#" Value="abstract member DoOpen : unit -&gt; bool" Usage="cFStream.DoOpen " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoSetClient">
      <MemberSignature Language="C#" Value="protected abstract bool DoSetClient (CoreFoundation.CFStream.CFStreamCallback callback, nint eventTypes, IntPtr context);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DoSetClient(class CoreFoundation.CFStream/CFStreamCallback callback, valuetype System.nint eventTypes, native int context) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.DoSetClient(CoreFoundation.CFStream.CFStreamCallback,System.nint,System.IntPtr)" />
      <MemberSignature Language="F#" Value="abstract member DoSetClient : CoreFoundation.CFStream.CFStreamCallback * nint * nativeint -&gt; bool" Usage="cFStream.DoSetClient (callback, eventTypes, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="CoreFoundation.CFStream+CFStreamCallback" />
        <Parameter Name="eventTypes" Type="System.nint" />
        <Parameter Name="context" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="callback">To be added.</param>
        <param name="eventTypes">To be added.</param>
        <param name="context">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoSetProperty">
      <MemberSignature Language="C#" Value="protected abstract bool DoSetProperty (Foundation.NSString name, ObjCRuntime.INativeObject value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool DoSetProperty(class Foundation.NSString name, class ObjCRuntime.INativeObject value) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.DoSetProperty(Foundation.NSString,ObjCRuntime.INativeObject)" />
      <MemberSignature Language="F#" Value="abstract member DoSetProperty : Foundation.NSString * ObjCRuntime.INativeObject -&gt; bool" Usage="cFStream.DoSetProperty (name, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="Foundation.NSString" />
        <Parameter Name="value" Type="ObjCRuntime.INativeObject" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EnableEvents">
      <MemberSignature Language="C#" Value="public void EnableEvents (CoreFoundation.CFRunLoop runLoop, Foundation.NSString runLoopMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void EnableEvents(class CoreFoundation.CFRunLoop runLoop, class Foundation.NSString runLoopMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.EnableEvents(CoreFoundation.CFRunLoop,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="member this.EnableEvents : CoreFoundation.CFRunLoop * Foundation.NSString -&gt; unit" Usage="cFStream.EnableEvents (runLoop, runLoopMode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="runLoop" Type="CoreFoundation.CFRunLoop" />
        <Parameter Name="runLoopMode" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="runLoop">To be added.</param>
        <param name="runLoopMode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ErrorEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; ErrorEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class CoreFoundation.CFStream/StreamEventArgs&gt; ErrorEvent" />
      <MemberSignature Language="DocId" Value="E:CoreFoundation.CFStream.ErrorEvent" />
      <MemberSignature Language="F#" Value="member this.ErrorEvent : EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; " Usage="member this.ErrorEvent : System.EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;CoreFoundation.CFStream+StreamEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~CFStream ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.Finalize" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="cFStream.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Finalizer for the CFStream object</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetError">
      <MemberSignature Language="C#" Value="public abstract CoreFoundation.CFException GetError ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CoreFoundation.CFException GetError() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.GetError" />
      <MemberSignature Language="F#" Value="abstract member GetError : unit -&gt; CoreFoundation.CFException" Usage="cFStream.GetError " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFException</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetStatus">
      <MemberSignature Language="C#" Value="public CoreFoundation.CFStreamStatus GetStatus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance valuetype CoreFoundation.CFStreamStatus GetStatus() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.GetStatus" />
      <MemberSignature Language="F#" Value="member this.GetStatus : unit -&gt; CoreFoundation.CFStreamStatus" Usage="cFStream.GetStatus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.CFStreamStatus</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:CoreFoundation.CFStream.Handle" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="CoreFoundation.CFStream.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:ObjCRuntime.INativeObject.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Handle (pointer) to the unmanaged object representation.</summary>
        <value>A pointer</value>
        <remarks>This IntPtr is a handle to the underlying unmanaged representation for this object.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasBytesAvailableEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; HasBytesAvailableEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class CoreFoundation.CFStream/StreamEventArgs&gt; HasBytesAvailableEvent" />
      <MemberSignature Language="DocId" Value="E:CoreFoundation.CFStream.HasBytesAvailableEvent" />
      <MemberSignature Language="F#" Value="member this.HasBytesAvailableEvent : EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; " Usage="member this.HasBytesAvailableEvent : System.EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;CoreFoundation.CFStream+StreamEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCallback">
      <MemberSignature Language="C#" Value="protected virtual void OnCallback (CoreFoundation.CFStreamEventType type);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCallback(valuetype CoreFoundation.CFStreamEventType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.OnCallback(CoreFoundation.CFStreamEventType)" />
      <MemberSignature Language="F#" Value="abstract member OnCallback : CoreFoundation.CFStreamEventType -&gt; unit&#xA;override this.OnCallback : CoreFoundation.CFStreamEventType -&gt; unit" Usage="cFStream.OnCallback type" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="CoreFoundation.CFStreamEventType" />
      </Parameters>
      <Docs>
        <param name="type">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnCanAcceptBytesEvent">
      <MemberSignature Language="C#" Value="protected virtual void OnCanAcceptBytesEvent (CoreFoundation.CFStream.StreamEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCanAcceptBytesEvent(class CoreFoundation.CFStream/StreamEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.OnCanAcceptBytesEvent(CoreFoundation.CFStream.StreamEventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnCanAcceptBytesEvent : CoreFoundation.CFStream.StreamEventArgs -&gt; unit&#xA;override this.OnCanAcceptBytesEvent : CoreFoundation.CFStream.StreamEventArgs -&gt; unit" Usage="cFStream.OnCanAcceptBytesEvent args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="CoreFoundation.CFStream+StreamEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnClosedEvent">
      <MemberSignature Language="C#" Value="protected virtual void OnClosedEvent (CoreFoundation.CFStream.StreamEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClosedEvent(class CoreFoundation.CFStream/StreamEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.OnClosedEvent(CoreFoundation.CFStream.StreamEventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnClosedEvent : CoreFoundation.CFStream.StreamEventArgs -&gt; unit&#xA;override this.OnClosedEvent : CoreFoundation.CFStream.StreamEventArgs -&gt; unit" Usage="cFStream.OnClosedEvent args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="CoreFoundation.CFStream+StreamEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnErrorEvent">
      <MemberSignature Language="C#" Value="protected virtual void OnErrorEvent (CoreFoundation.CFStream.StreamEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnErrorEvent(class CoreFoundation.CFStream/StreamEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.OnErrorEvent(CoreFoundation.CFStream.StreamEventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnErrorEvent : CoreFoundation.CFStream.StreamEventArgs -&gt; unit&#xA;override this.OnErrorEvent : CoreFoundation.CFStream.StreamEventArgs -&gt; unit" Usage="cFStream.OnErrorEvent args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="CoreFoundation.CFStream+StreamEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHasBytesAvailableEvent">
      <MemberSignature Language="C#" Value="protected virtual void OnHasBytesAvailableEvent (CoreFoundation.CFStream.StreamEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHasBytesAvailableEvent(class CoreFoundation.CFStream/StreamEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.OnHasBytesAvailableEvent(CoreFoundation.CFStream.StreamEventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnHasBytesAvailableEvent : CoreFoundation.CFStream.StreamEventArgs -&gt; unit&#xA;override this.OnHasBytesAvailableEvent : CoreFoundation.CFStream.StreamEventArgs -&gt; unit" Usage="cFStream.OnHasBytesAvailableEvent args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="CoreFoundation.CFStream+StreamEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnOpenCompleted">
      <MemberSignature Language="C#" Value="protected virtual void OnOpenCompleted (CoreFoundation.CFStream.StreamEventArgs args);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnOpenCompleted(class CoreFoundation.CFStream/StreamEventArgs args) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.OnOpenCompleted(CoreFoundation.CFStream.StreamEventArgs)" />
      <MemberSignature Language="F#" Value="abstract member OnOpenCompleted : CoreFoundation.CFStream.StreamEventArgs -&gt; unit&#xA;override this.OnOpenCompleted : CoreFoundation.CFStream.StreamEventArgs -&gt; unit" Usage="cFStream.OnOpenCompleted args" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="args" Type="CoreFoundation.CFStream+StreamEventArgs" />
      </Parameters>
      <Docs>
        <param name="args">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.Open" />
      <MemberSignature Language="F#" Value="member this.Open : unit -&gt; unit" Usage="cFStream.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenCompletedEvent">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; OpenCompletedEvent;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class CoreFoundation.CFStream/StreamEventArgs&gt; OpenCompletedEvent" />
      <MemberSignature Language="DocId" Value="E:CoreFoundation.CFStream.OpenCompletedEvent" />
      <MemberSignature Language="F#" Value="member this.OpenCompletedEvent : EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; " Usage="member this.OpenCompletedEvent : System.EventHandler&lt;CoreFoundation.CFStream.StreamEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;CoreFoundation.CFStream+StreamEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadDispatchQueue">
      <MemberSignature Language="C#" Value="public CoreFoundation.DispatchQueue ReadDispatchQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreFoundation.DispatchQueue ReadDispatchQueue" />
      <MemberSignature Language="DocId" Value="P:CoreFoundation.CFStream.ReadDispatchQueue" />
      <MemberSignature Language="F#" Value="member this.ReadDispatchQueue : CoreFoundation.DispatchQueue with get, set" Usage="CoreFoundation.CFStream.ReadDispatchQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.DispatchQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ScheduleWithRunLoop">
      <MemberSignature Language="C#" Value="protected abstract void ScheduleWithRunLoop (CoreFoundation.CFRunLoop loop, Foundation.NSString mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ScheduleWithRunLoop(class CoreFoundation.CFRunLoop loop, class Foundation.NSString mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.ScheduleWithRunLoop(CoreFoundation.CFRunLoop,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member ScheduleWithRunLoop : CoreFoundation.CFRunLoop * Foundation.NSString -&gt; unit" Usage="cFStream.ScheduleWithRunLoop (loop, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loop" Type="CoreFoundation.CFRunLoop" />
        <Parameter Name="mode" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="loop">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnscheduleFromRunLoop">
      <MemberSignature Language="C#" Value="protected abstract void UnscheduleFromRunLoop (CoreFoundation.CFRunLoop loop, Foundation.NSString mode);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void UnscheduleFromRunLoop(class CoreFoundation.CFRunLoop loop, class Foundation.NSString mode) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.CFStream.UnscheduleFromRunLoop(CoreFoundation.CFRunLoop,Foundation.NSString)" />
      <MemberSignature Language="F#" Value="abstract member UnscheduleFromRunLoop : CoreFoundation.CFRunLoop * Foundation.NSString -&gt; unit" Usage="cFStream.UnscheduleFromRunLoop (loop, mode)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="loop" Type="CoreFoundation.CFRunLoop" />
        <Parameter Name="mode" Type="Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="loop">To be added.</param>
        <param name="mode">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteDispatchQueue">
      <MemberSignature Language="C#" Value="public CoreFoundation.DispatchQueue WriteDispatchQueue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CoreFoundation.DispatchQueue WriteDispatchQueue" />
      <MemberSignature Language="DocId" Value="P:CoreFoundation.CFStream.WriteDispatchQueue" />
      <MemberSignature Language="F#" Value="member this.WriteDispatchQueue : CoreFoundation.DispatchQueue with get, set" Usage="CoreFoundation.CFStream.WriteDispatchQueue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CoreFoundation.DispatchQueue</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
