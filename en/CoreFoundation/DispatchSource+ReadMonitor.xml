<Type Name="DispatchSource+ReadMonitor" FullName="CoreFoundation.DispatchSource+ReadMonitor">
  <TypeSignature Language="C#" Value="public class DispatchSource.ReadMonitor : CoreFoundation.DispatchSource" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit DispatchSource/ReadMonitor extends CoreFoundation.DispatchSource" />
  <TypeSignature Language="DocId" Value="T:CoreFoundation.DispatchSource.ReadMonitor" />
  <TypeSignature Language="F#" Value="type DispatchSource.ReadMonitor = class&#xA;    inherit DispatchSource" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>CoreFoundation.DispatchSource</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Sources of this type monitor file descriptors for pending data.</summary>
    <remarks>
      <para>The data returned by <see cref="P:CoreFoundation.DispatchSource+ReadMonitor.BytesAvailable" /> is an estimated number of bytes available to be read from the descriptor. This estimate should be treated as a suggested minimum read buffer size.</para>
      <para>
      </para>
      <para>There are no guarantees that a complete read of this size will be performed.</para>
      <para>
      </para>
      <para>Users of this source type are strongly encouraged to perform non-blocking I/O and handle any truncated reads or error conditions that may occur. </para>
      <example>
        <code lang="c#"><![CDATA[
var stream = File.OpenRead ("Demo.txt");

// The the unix file handle
var safeHandle = stream.SafeFileHandle;
IntPtr descriptor = safeHandle.DangerousGetHandle ();
int fileDescriptor = descriptor.ToInt32 ();

dispatchSource = new DispatchSource.ReadMonitor (fileDescriptor, DispatchQueue.MainQueue);

dispatchSource.SetRegistrationHandler (() => {
    Console.WriteLine ("Read monitor registered");
});

dispatchSource.SetEventHandler (() => {
    Console.WriteLine ("Read monitor: was opened in write mode")
    dispatchSource.Cancel ();
    stream.Close ();
});

dispatchSource.SetCancelHandler (() => {
    Console.WriteLine ("Read monitor cancelled");
});

dispatchSource.Resume ();]]></code>
      </example>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadMonitor (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.ReadMonitor.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.ReadMonitor : nativeint -&gt; CoreFoundation.DispatchSource.ReadMonitor" Usage="new CoreFoundation.DispatchSource.ReadMonitor handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadMonitor (int fileDescriptor, CoreFoundation.DispatchQueue queue = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 fileDescriptor, class CoreFoundation.DispatchQueue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.ReadMonitor.#ctor(System.Int32,CoreFoundation.DispatchQueue)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.ReadMonitor : int * CoreFoundation.DispatchQueue -&gt; CoreFoundation.DispatchSource.ReadMonitor" Usage="new CoreFoundation.DispatchSource.ReadMonitor (fileDescriptor, queue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileDescriptor" Type="System.Int32" />
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
      </Parameters>
      <Docs>
        <param name="fileDescriptor">To be added.</param>
        <param name="queue">The target queue for this dispatch source object.   Pass null to use the default target queue (the default priority global concurrent queue).</param>
        <summary>Creates a file descriptor read monitor.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ReadMonitor (IntPtr handle, bool owns);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle, bool owns) cil managed" />
      <MemberSignature Language="DocId" Value="M:CoreFoundation.DispatchSource.ReadMonitor.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="F#" Value="new CoreFoundation.DispatchSource.ReadMonitor : nativeint * bool -&gt; CoreFoundation.DispatchSource.ReadMonitor" Usage="new CoreFoundation.DispatchSource.ReadMonitor (handle, owns)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="owns" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <param name="owns">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BytesAvailable">
      <MemberSignature Language="C#" Value="public int BytesAvailable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 BytesAvailable" />
      <MemberSignature Language="DocId" Value="P:CoreFoundation.DispatchSource.ReadMonitor.BytesAvailable" />
      <MemberSignature Language="F#" Value="member this.BytesAvailable : int" Usage="CoreFoundation.DispatchSource.ReadMonitor.BytesAvailable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Estimated number of bytes available to read from the file descriptor.</summary>
        <value>
          <para />
        </value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FileDescriptor">
      <MemberSignature Language="C#" Value="public int FileDescriptor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FileDescriptor" />
      <MemberSignature Language="DocId" Value="P:CoreFoundation.DispatchSource.ReadMonitor.FileDescriptor" />
      <MemberSignature Language="F#" Value="member this.FileDescriptor : int" Usage="CoreFoundation.DispatchSource.ReadMonitor.FileDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The file descriptor being monitored.</summary>
        <value>
          <para>
          </para>
        </value>
        <remarks>
          <para />
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
