<Namespace Name="CoreMidi">
  <Docs>
    <summary>The CoreMidi namespace provides classes for interacting with the MIDI subsystem.</summary>
    <remarks>
      <para> CoreMIDI is an API that talks to the MIDI server on iOS
	and OSX which in turn interacts with MIDI devices connected to
	your Mac or iOS device.  
      </para>
      <para>
        <img href="midi-server-setup.png" />
      </para>
      <para>

	When using CoreMIDI, you will run into various classes that
	deal with different parts of the MIDI stack, the following
	graphic illustrates the relationships:

      </para>
      <para>
        <img href="midi-components.png" />
      </para>
      <para>

	The MIDI device itself is represented by the <see cref="T:CoreMidi.MidiDevice" /> class.  Devices can
	contain one or more entities (<see cref="T:CoreMidi.MidiEntity" />).  For example a MIDI
	device could contain two independent MIDI tone generators.
	Each Entity contains a series of endpoints which are either
	sources or destintions.  Both MIDI sources and MIDI
	destinations are encapsulated by the <see cref="T:CoreMidi.MidiEntity" /> class.

      </para>
      <para></para>
      <para> 

	To start with MIDI, you will need to create a <see cref="T:CoreMidi.MidiClient" /> object.  This object
	is the gateway between your application and the MIDI server
	process.  You subscribe to the events that this object raises
	to track devices being added, removed and to changes in their
	properties and setup configuration.

      </para>
      <para>

	You also use the <see cref="T:CoreMidi.MidiClient" />
	to create input ports and output ports.  The input ports raise
	the <see cref="E:CoreMidi.MidiPort.MessageReceived" /> event
	when new MIDI data is available and you can use the <see cref="P:CoreMidi.MidiPacketsEventArgs.Packets" />
	property in the arguments received to get the data out

      </para>
      <para>

	See the <see cref="T:CoreMidi.MidiClient" /> class
	for an example of how to set things up.

      </para>
      <para>

	To use networked MIDI connections, you need to enable the
	network session and set its connection policy, like this:

      </para>
      <example>
        <code lang="C#"><![CDATA[
var session = MidiNetworkSession.DefaultSession;
session.Enabled = true;
session.ConnectionPolicy = MidiNetworkConnectionPolicy.Anyone;
	]]></code>
      </example>
      <para>

	To connect to a remote MIDI network host you use the <see cref="T:CoreMidi.MidiNetworkHost" />, like this:

      </para>
      <example>
        <code lang="C#"><![CDATA[
var host = MidiNetworkHost.Create ("My Session", "myhost.xamarin.com", 5004);
var connection = MidiNetworkConnection.FromHost (host); 
	]]></code>
      </example>
    </remarks>
  </Docs>
</Namespace>