<Type Name="MDLMesh" FullName="ModelIO.MDLMesh">
  <TypeSignature Language="C#" Value="public class MDLMesh : ModelIO.MDLObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MDLMesh extends ModelIO.MDLObject" />
  <TypeSignature Language="DocId" Value="T:ModelIO.MDLMesh" />
  <TypeSignature Language="F#" Value="type MDLMesh = class&#xA;    inherit MDLObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>ModelIO.MDLObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("MDLMesh", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>A collection of <see cref="T:ModelIO.MDLSubmesh" /> objects that, together, define the geometric and material properties for rendering a 3D object.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/ModelIO/Reference/MDLMesh_Class/index.html">Apple documentation for <c>MDLMesh</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLMesh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MDLMesh (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLMesh : Foundation.NSObjectFlag -&gt; ModelIO.MDLMesh" Usage="new ModelIO.MDLMesh t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLMesh (ModelIO.IMDLMeshBufferAllocator bufferAllocator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ModelIO.IMDLMeshBufferAllocator bufferAllocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.#ctor(ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLMesh : ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="new ModelIO.MDLMesh bufferAllocator" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithBufferAllocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="bufferAllocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="bufferAllocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new Model IO mesh with the specified buffer allocator.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MDLMesh (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLMesh : nativeint -&gt; ModelIO.MDLMesh" Usage="new ModelIO.MDLMesh handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLMesh (ModelIO.IMDLMeshBuffer vertexBuffer, nuint vertexCount, ModelIO.MDLVertexDescriptor descriptor, ModelIO.MDLSubmesh[] submeshes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ModelIO.IMDLMeshBuffer vertexBuffer, valuetype System.nuint vertexCount, class ModelIO.MDLVertexDescriptor descriptor, class ModelIO.MDLSubmesh[] submeshes) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.#ctor(ModelIO.IMDLMeshBuffer,System.nuint,ModelIO.MDLVertexDescriptor,ModelIO.MDLSubmesh[])" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLMesh : ModelIO.IMDLMeshBuffer * nuint * ModelIO.MDLVertexDescriptor * ModelIO.MDLSubmesh[] -&gt; ModelIO.MDLMesh" Usage="new ModelIO.MDLMesh (vertexBuffer, vertexCount, descriptor, submeshes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithVertexBuffer:vertexCount:descriptor:submeshes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="vertexBuffer" Type="ModelIO.IMDLMeshBuffer" />
        <Parameter Name="vertexCount" Type="System.nuint" />
        <Parameter Name="descriptor" Type="ModelIO.MDLVertexDescriptor" />
        <Parameter Name="submeshes" Type="ModelIO.MDLSubmesh[]" />
      </Parameters>
      <Docs>
        <param name="vertexBuffer">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <param name="descriptor">To be added.</param>
        <param name="submeshes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLMesh (ModelIO.IMDLMeshBuffer[] vertexBuffers, nuint vertexCount, ModelIO.MDLVertexDescriptor descriptor, ModelIO.MDLSubmesh[] submeshes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ModelIO.IMDLMeshBuffer[] vertexBuffers, valuetype System.nuint vertexCount, class ModelIO.MDLVertexDescriptor descriptor, class ModelIO.MDLSubmesh[] submeshes) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.#ctor(ModelIO.IMDLMeshBuffer[],System.nuint,ModelIO.MDLVertexDescriptor,ModelIO.MDLSubmesh[])" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLMesh : ModelIO.IMDLMeshBuffer[] * nuint * ModelIO.MDLVertexDescriptor * ModelIO.MDLSubmesh[] -&gt; ModelIO.MDLMesh" Usage="new ModelIO.MDLMesh (vertexBuffers, vertexCount, descriptor, submeshes)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithVertexBuffers:vertexCount:descriptor:submeshes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="vertexBuffers" Type="ModelIO.IMDLMeshBuffer[]" />
        <Parameter Name="vertexCount" Type="System.nuint" />
        <Parameter Name="descriptor" Type="ModelIO.MDLVertexDescriptor" />
        <Parameter Name="submeshes" Type="ModelIO.MDLSubmesh[]" />
      </Parameters>
      <Docs>
        <param name="vertexBuffers">To be added.</param>
        <param name="vertexCount">To be added.</param>
        <param name="descriptor">To be added.</param>
        <param name="submeshes">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, ModelIO.MDLVertexFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, valuetype ModelIO.MDLVertexFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.AddAttribute(System.String,ModelIO.MDLVertexFormat)" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * ModelIO.MDLVertexFormat -&gt; unit&#xA;override this.AddAttribute : string * ModelIO.MDLVertexFormat -&gt; unit" Usage="mDLMesh.AddAttribute (name, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addAttributeWithName:format:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="format" Type="ModelIO.MDLVertexFormat" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="format">To be added.</param>
        <summary>Adds the <paramref name="format" /> attribute, indexed by the keyword <paramref name="name" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, ModelIO.MDLVertexFormat format, string type, Foundation.NSData data, nint stride);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, valuetype ModelIO.MDLVertexFormat format, string type, class Foundation.NSData data, valuetype System.nint stride) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.AddAttribute(System.String,ModelIO.MDLVertexFormat,System.String,Foundation.NSData,System.nint)" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * ModelIO.MDLVertexFormat * string * Foundation.NSData * nint -&gt; unit&#xA;override this.AddAttribute : string * ModelIO.MDLVertexFormat * string * Foundation.NSData * nint -&gt; unit" Usage="mDLMesh.AddAttribute (name, format, type, data, stride)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addAttributeWithName:format:type:data:stride:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="format" Type="ModelIO.MDLVertexFormat" />
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="stride" Type="System.nint" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="format">To be added.</param>
        <param name="type">The mesh vector type.</param>
        <param name="data">To be added.</param>
        <param name="stride">To be added.</param>
        <summary>Adds a vertex attribute and a corresponding empty vertex buffer.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddAttribute">
      <MemberSignature Language="C#" Value="public virtual void AddAttribute (string name, ModelIO.MDLVertexFormat format, string type, Foundation.NSData data, nint stride, double time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddAttribute(string name, valuetype ModelIO.MDLVertexFormat format, string type, class Foundation.NSData data, valuetype System.nint stride, float64 time) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.AddAttribute(System.String,ModelIO.MDLVertexFormat,System.String,Foundation.NSData,System.nint,System.Double)" />
      <MemberSignature Language="F#" Value="abstract member AddAttribute : string * ModelIO.MDLVertexFormat * string * Foundation.NSData * nint * double -&gt; unit&#xA;override this.AddAttribute : string * ModelIO.MDLVertexFormat * string * Foundation.NSData * nint * double -&gt; unit" Usage="mDLMesh.AddAttribute (name, format, type, data, stride, time)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addAttributeWithName:format:type:data:stride:time:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="format" Type="ModelIO.MDLVertexFormat" />
        <Parameter Name="type" Type="System.String" />
        <Parameter Name="data" Type="Foundation.NSData" />
        <Parameter Name="stride" Type="System.nint" />
        <Parameter Name="time" Type="System.Double" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="format">To be added.</param>
        <param name="type">To be added.</param>
        <param name="data">To be added.</param>
        <param name="stride">To be added.</param>
        <param name="time">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddNormals">
      <MemberSignature Language="C#" Value="public virtual void AddNormals (string name, float creaseThreshold);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddNormals(string name, float32 creaseThreshold) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.AddNormals(System.String,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member AddNormals : string * single -&gt; unit&#xA;override this.AddNormals : string * single -&gt; unit" Usage="mDLMesh.AddNormals (name, creaseThreshold)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addNormalsWithAttributeNamed:creaseThreshold:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="creaseThreshold" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="name">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="creaseThreshold">To be added.</param>
        <summary>Generates surface normals for a mesh, interpolating between adjacent faces when the dot product of their unit normals is greater than <paramref name="creaseThreshold" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddOrthTanBasis">
      <MemberSignature Language="C#" Value="public virtual void AddOrthTanBasis (string textureCoordinateAttributeName, string normalAttributeName, string tangentAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddOrthTanBasis(string textureCoordinateAttributeName, string normalAttributeName, string tangentAttributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.AddOrthTanBasis(System.String,System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddOrthTanBasis : string * string * string -&gt; unit&#xA;override this.AddOrthTanBasis : string * string * string -&gt; unit" Usage="mDLMesh.AddOrthTanBasis (textureCoordinateAttributeName, normalAttributeName, tangentAttributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addOrthTanBasisForTextureCoordinateAttributeNamed:normalAttributeNamed:tangentAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureCoordinateAttributeName" Type="System.String" />
        <Parameter Name="normalAttributeName" Type="System.String" />
        <Parameter Name="tangentAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textureCoordinateAttributeName">To be added.</param>
        <param name="normalAttributeName">To be added.</param>
        <param name="tangentAttributeName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTangentBasis">
      <MemberSignature Language="C#" Value="public virtual void AddTangentBasis (string textureCoordinateAttributeName, string tangentAttributeName, string bitangentAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTangentBasis(string textureCoordinateAttributeName, string tangentAttributeName, string bitangentAttributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.AddTangentBasis(System.String,System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddTangentBasis : string * string * string -&gt; unit&#xA;override this.AddTangentBasis : string * string * string -&gt; unit" Usage="mDLMesh.AddTangentBasis (textureCoordinateAttributeName, tangentAttributeName, bitangentAttributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addTangentBasisForTextureCoordinateAttributeNamed:tangentAttributeNamed:bitangentAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureCoordinateAttributeName" Type="System.String" />
        <Parameter Name="tangentAttributeName" Type="System.String" />
        <Parameter Name="bitangentAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textureCoordinateAttributeName">To be added.</param>
        <param name="tangentAttributeName">To be added.</param>
        <param name="bitangentAttributeName">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Reads texture coordinates from the buffer that is specified by <paramref name="textureCoordinateAttributeName" />, calculates tangents and bitangents, and stores them in the specified buffers.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddTangentBasisWithNormals">
      <MemberSignature Language="C#" Value="public virtual void AddTangentBasisWithNormals (string textureCoordinateAttributeName, string normalAttributeName, string tangentAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddTangentBasisWithNormals(string textureCoordinateAttributeName, string normalAttributeName, string tangentAttributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.AddTangentBasisWithNormals(System.String,System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddTangentBasisWithNormals : string * string * string -&gt; unit&#xA;override this.AddTangentBasisWithNormals : string * string * string -&gt; unit" Usage="mDLMesh.AddTangentBasisWithNormals (textureCoordinateAttributeName, normalAttributeName, tangentAttributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addTangentBasisForTextureCoordinateAttributeNamed:normalAttributeNamed:tangentAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureCoordinateAttributeName" Type="System.String" />
        <Parameter Name="normalAttributeName" Type="System.String" />
        <Parameter Name="tangentAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textureCoordinateAttributeName">To be added.</param>
        <param name="normalAttributeName">To be added.</param>
        <param name="tangentAttributeName">To be added.</param>
        <summary>Reads surface normals from the buffer that is specified by <paramref name="textureCoordinateAttributeName" />, calculates tangents and bitangents, and stores them in the specified buffers.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddUnwrappedTextureCoordinates">
      <MemberSignature Language="C#" Value="public virtual void AddUnwrappedTextureCoordinates (string textureCoordinateAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddUnwrappedTextureCoordinates(string textureCoordinateAttributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.AddUnwrappedTextureCoordinates(System.String)" />
      <MemberSignature Language="F#" Value="abstract member AddUnwrappedTextureCoordinates : string -&gt; unit&#xA;override this.AddUnwrappedTextureCoordinates : string -&gt; unit" Usage="mDLMesh.AddUnwrappedTextureCoordinates textureCoordinateAttributeName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("addUnwrappedTextureCoordinatesForAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureCoordinateAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textureCoordinateAttributeName">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Allocator">
      <MemberSignature Language="C#" Value="public virtual ModelIO.IMDLMeshBufferAllocator Allocator { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.IMDLMeshBufferAllocator Allocator" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.Allocator" />
      <MemberSignature Language="F#" Value="member this.Allocator : ModelIO.IMDLMeshBufferAllocator" Usage="ModelIO.MDLMesh.Allocator" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("allocator")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("allocator", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.IMDLMeshBufferAllocator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AnisotropyVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData AnisotropyVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData AnisotropyVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.AnisotropyVertexData" />
      <MemberSignature Language="F#" Value="member this.AnisotropyVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.AnisotropyVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the visual anisotropy of the surface, if present. This data is associated with the <see cref="P:ModelIO.MDLVertexAttributes.Anisotropy" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BinormalVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData BinormalVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData BinormalVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.BinormalVertexData" />
      <MemberSignature Language="F#" Value="member this.BinormalVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.BinormalVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the binormal data at each vertex. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.Binormal" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BitangentVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData BitangentVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData BitangentVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.BitangentVertexData" />
      <MemberSignature Language="F#" Value="member this.BitangentVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.BitangentVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the bitangent vectors for each vertex. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.Bitangent" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBox">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLAxisAlignedBoundingBox BoundingBox { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ModelIO.MDLAxisAlignedBoundingBox BoundingBox" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.BoundingBox" />
      <MemberSignature Language="F#" Value="member this.BoundingBox : ModelIO.MDLAxisAlignedBoundingBox" Usage="ModelIO.MDLMesh.BoundingBox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("boundingBox")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLAxisAlignedBoundingBox</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the smallest box that contains all of the vertices in the mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="ModelIO.MDLMesh.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ColorVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData ColorVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData ColorVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.ColorVertexData" />
      <MemberSignature Language="F#" Value="member this.ColorVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.ColorVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets color data for each vertex. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.Color" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBox">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateBox (OpenTK.Vector3 dimensions, OpenTK.Vector3i segments, ModelIO.MDLGeometryType geometryType, bool inwardNormals, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateBox(valuetype OpenTK.Vector3 dimensions, valuetype OpenTK.Vector3i segments, valuetype ModelIO.MDLGeometryType geometryType, bool inwardNormals, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateBox(OpenTK.Vector3,OpenTK.Vector3i,ModelIO.MDLGeometryType,System.Boolean,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateBox : OpenTK.Vector3 * OpenTK.Vector3i * ModelIO.MDLGeometryType * bool * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateBox (dimensions, segments, geometryType, inwardNormals, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimensions" Type="OpenTK.Vector3" />
        <Parameter Name="segments" Type="OpenTK.Vector3i" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="dimensions">To be added.</param>
        <param name="segments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="allocator">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateBox">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateBox (OpenTK.Vector3 vector, OpenTK.Vector3i segments, ModelIO.MDLGeometryType geometryType, bool inwardNormals, ModelIO.IMDLMeshBufferAllocator allocator, ModelIO.MDLMesh.MDLMeshVectorType type = ModelIO.MDLMesh+MDLMeshVectorType.Dimensions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateBox(valuetype OpenTK.Vector3 vector, valuetype OpenTK.Vector3i segments, valuetype ModelIO.MDLGeometryType geometryType, bool inwardNormals, class ModelIO.IMDLMeshBufferAllocator allocator, valuetype ModelIO.MDLMesh/MDLMeshVectorType type) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateBox(OpenTK.Vector3,OpenTK.Vector3i,ModelIO.MDLGeometryType,System.Boolean,ModelIO.IMDLMeshBufferAllocator,ModelIO.MDLMesh.MDLMeshVectorType)" />
      <MemberSignature Language="F#" Value="static member CreateBox : OpenTK.Vector3 * OpenTK.Vector3i * ModelIO.MDLGeometryType * bool * ModelIO.IMDLMeshBufferAllocator * ModelIO.MDLMesh.MDLMeshVectorType -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateBox (vector, segments, geometryType, inwardNormals, allocator, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="vector" Type="OpenTK.Vector3" />
        <Parameter Name="segments" Type="OpenTK.Vector3i" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
        <Parameter Name="type" Type="ModelIO.MDLMesh+MDLMeshVectorType" />
      </Parameters>
      <Docs>
        <param name="vector">To be added.</param>
        <param name="segments">The number of divisions to create in each dimension.</param>
        <param name="geometryType">Whether to create triangles, quadrilaterals, or lines.</param>
        <param name="inwardNormals">Whether to generate inward-pointing normals.</param>
        <param name="allocator">
          <para>The allocator to use instead of the default, internal allocator.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="type">The mesh vector type.</param>
        <summary>Creates a right rectangular box from the width, height, and depth that are contained in <paramref name="dimensions" />, with the specified number of segments and geometry kind.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCapsule">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateCapsule (OpenTK.Vector3 dimensions, OpenTK.Vector2i segments, ModelIO.MDLGeometryType geometryType, bool inwardNormals, int hemisphereSegments, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateCapsule(valuetype OpenTK.Vector3 dimensions, valuetype OpenTK.Vector2i segments, valuetype ModelIO.MDLGeometryType geometryType, bool inwardNormals, int32 hemisphereSegments, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateCapsule(OpenTK.Vector3,OpenTK.Vector2i,ModelIO.MDLGeometryType,System.Boolean,System.Int32,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateCapsule : OpenTK.Vector3 * OpenTK.Vector2i * ModelIO.MDLGeometryType * bool * int * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateCapsule (dimensions, segments, geometryType, inwardNormals, hemisphereSegments, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimensions" Type="OpenTK.Vector3" />
        <Parameter Name="segments" Type="OpenTK.Vector2i" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="hemisphereSegments" Type="System.Int32" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="dimensions">To be added.</param>
        <param name="segments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="hemisphereSegments">To be added.</param>
        <param name="allocator">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCapsule">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateCapsule (float height, OpenTK.Vector2 radii, nuint radialSegments, nuint verticalSegments, nuint hemisphereSegments, ModelIO.MDLGeometryType geometryType, bool inwardNormals, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateCapsule(float32 height, valuetype OpenTK.Vector2 radii, valuetype System.nuint radialSegments, valuetype System.nuint verticalSegments, valuetype System.nuint hemisphereSegments, valuetype ModelIO.MDLGeometryType geometryType, bool inwardNormals, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateCapsule(System.Single,OpenTK.Vector2,System.nuint,System.nuint,System.nuint,ModelIO.MDLGeometryType,System.Boolean,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateCapsule : single * OpenTK.Vector2 * nuint * nuint * nuint * ModelIO.MDLGeometryType * bool * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateCapsule (height, radii, radialSegments, verticalSegments, hemisphereSegments, geometryType, inwardNormals, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newCapsuleWithHeight:radii:radialSegments:verticalSegments:hemisphereSegments:geometryType:inwardNormals:allocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="radii" Type="OpenTK.Vector2" />
        <Parameter Name="radialSegments" Type="System.nuint" />
        <Parameter Name="verticalSegments" Type="System.nuint" />
        <Parameter Name="hemisphereSegments" Type="System.nuint" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="height">The height of the capsule.</param>
        <param name="radii">The radii of the capsule.</param>
        <param name="radialSegments">The number of radial segments to generate.</param>
        <param name="verticalSegments">The number of vertical segments to generate in the cylinder.</param>
        <param name="hemisphereSegments">The number segments to generate in the caps.</param>
        <param name="geometryType">Whether to create triangles, quadrilaterals, or lines.</param>
        <param name="inwardNormals">Whether to generate inward-pointing normals.</param>
        <param name="allocator">
          <para>The allocator to use instead of the default, internal allocator.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a capsule from the width, height, and depth that are contained in <paramref name="dimensions" />, with the specified number of segments and geometry kind.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCone">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateCone (OpenTK.Vector3 dimensions, OpenTK.Vector2i segments, ModelIO.MDLGeometryType geometryType, bool inwardNormals, bool cap, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateCone(valuetype OpenTK.Vector3 dimensions, valuetype OpenTK.Vector2i segments, valuetype ModelIO.MDLGeometryType geometryType, bool inwardNormals, bool cap, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateCone(OpenTK.Vector3,OpenTK.Vector2i,ModelIO.MDLGeometryType,System.Boolean,System.Boolean,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateCone : OpenTK.Vector3 * OpenTK.Vector2i * ModelIO.MDLGeometryType * bool * bool * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateCone (dimensions, segments, geometryType, inwardNormals, cap, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimensions" Type="OpenTK.Vector3" />
        <Parameter Name="segments" Type="OpenTK.Vector2i" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="cap" Type="System.Boolean" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="dimensions">To be added.</param>
        <param name="segments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="cap">To be added.</param>
        <param name="allocator">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCylinder">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateCylinder (OpenTK.Vector3 extent, OpenTK.Vector2i segments, bool inwardNormals, bool topCap, bool bottomCap, ModelIO.MDLGeometryType geometryType, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateCylinder(valuetype OpenTK.Vector3 extent, valuetype OpenTK.Vector2i segments, bool inwardNormals, bool topCap, bool bottomCap, valuetype ModelIO.MDLGeometryType geometryType, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateCylinder(OpenTK.Vector3,OpenTK.Vector2i,System.Boolean,System.Boolean,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateCylinder : OpenTK.Vector3 * OpenTK.Vector2i * bool * bool * bool * ModelIO.MDLGeometryType * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateCylinder (extent, segments, inwardNormals, topCap, bottomCap, geometryType, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="OpenTK.Vector3" />
        <Parameter Name="segments" Type="OpenTK.Vector2i" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="topCap" Type="System.Boolean" />
        <Parameter Name="bottomCap" Type="System.Boolean" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the cylinder.</param>
        <param name="segments">The number of divisions to create in each dimension.</param>
        <param name="inwardNormals">Whether to generate inward-pointing normals.</param>
        <param name="topCap">Whether to put a top cap on the cylinder.</param>
        <param name="bottomCap">Whether to put a bottom cap on the cylinder.</param>
        <param name="geometryType">Whether to create triangles, quadrilaterals, or lines.</param>
        <param name="allocator">
          <para>The allocator to use instead of the default, internal allocator.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a cylinder from the specified parameters.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateCylindroid">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateCylindroid (float height, OpenTK.Vector2 radii, nuint radialSegments, nuint verticalSegments, ModelIO.MDLGeometryType geometryType, bool inwardNormals, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateCylindroid(float32 height, valuetype OpenTK.Vector2 radii, valuetype System.nuint radialSegments, valuetype System.nuint verticalSegments, valuetype ModelIO.MDLGeometryType geometryType, bool inwardNormals, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateCylindroid(System.Single,OpenTK.Vector2,System.nuint,System.nuint,ModelIO.MDLGeometryType,System.Boolean,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateCylindroid : single * OpenTK.Vector2 * nuint * nuint * ModelIO.MDLGeometryType * bool * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateCylindroid (height, radii, radialSegments, verticalSegments, geometryType, inwardNormals, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newCylinderWithHeight:radii:radialSegments:verticalSegments:geometryType:inwardNormals:allocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="radii" Type="OpenTK.Vector2" />
        <Parameter Name="radialSegments" Type="System.nuint" />
        <Parameter Name="verticalSegments" Type="System.nuint" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="height">To be added.</param>
        <param name="radii">To be added.</param>
        <param name="radialSegments">To be added.</param>
        <param name="verticalSegments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEllipsoid">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateEllipsoid (OpenTK.Vector3 radii, nuint radialSegments, nuint verticalSegments, ModelIO.MDLGeometryType geometryType, bool inwardNormals, bool hemisphere, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateEllipsoid(valuetype OpenTK.Vector3 radii, valuetype System.nuint radialSegments, valuetype System.nuint verticalSegments, valuetype ModelIO.MDLGeometryType geometryType, bool inwardNormals, bool hemisphere, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateEllipsoid(OpenTK.Vector3,System.nuint,System.nuint,ModelIO.MDLGeometryType,System.Boolean,System.Boolean,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateEllipsoid : OpenTK.Vector3 * nuint * nuint * ModelIO.MDLGeometryType * bool * bool * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateEllipsoid (radii, radialSegments, verticalSegments, geometryType, inwardNormals, hemisphere, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newEllipsoidWithRadii:radialSegments:verticalSegments:geometryType:inwardNormals:hemisphere:allocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radii" Type="OpenTK.Vector3" />
        <Parameter Name="radialSegments" Type="System.nuint" />
        <Parameter Name="verticalSegments" Type="System.nuint" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="hemisphere" Type="System.Boolean" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="radii">To be added.</param>
        <param name="radialSegments">To be added.</param>
        <param name="verticalSegments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="hemisphere">To be added.</param>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateEllipticalCone">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateEllipticalCone (float height, OpenTK.Vector2 radii, nuint radialSegments, nuint verticalSegments, ModelIO.MDLGeometryType geometryType, bool inwardNormals, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateEllipticalCone(float32 height, valuetype OpenTK.Vector2 radii, valuetype System.nuint radialSegments, valuetype System.nuint verticalSegments, valuetype ModelIO.MDLGeometryType geometryType, bool inwardNormals, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateEllipticalCone(System.Single,OpenTK.Vector2,System.nuint,System.nuint,ModelIO.MDLGeometryType,System.Boolean,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateEllipticalCone : single * OpenTK.Vector2 * nuint * nuint * ModelIO.MDLGeometryType * bool * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateEllipticalCone (height, radii, radialSegments, verticalSegments, geometryType, inwardNormals, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newEllipticalConeWithHeight:radii:radialSegments:verticalSegments:geometryType:inwardNormals:allocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="height" Type="System.Single" />
        <Parameter Name="radii" Type="OpenTK.Vector2" />
        <Parameter Name="radialSegments" Type="System.nuint" />
        <Parameter Name="verticalSegments" Type="System.nuint" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="height">To be added.</param>
        <param name="radii">To be added.</param>
        <param name="radialSegments">To be added.</param>
        <param name="verticalSegments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateHemisphere">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateHemisphere (OpenTK.Vector3 dimensions, OpenTK.Vector2i segments, ModelIO.MDLGeometryType geometryType, bool inwardNormals, bool cap, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateHemisphere(valuetype OpenTK.Vector3 dimensions, valuetype OpenTK.Vector2i segments, valuetype ModelIO.MDLGeometryType geometryType, bool inwardNormals, bool cap, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateHemisphere(OpenTK.Vector3,OpenTK.Vector2i,ModelIO.MDLGeometryType,System.Boolean,System.Boolean,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateHemisphere : OpenTK.Vector3 * OpenTK.Vector2i * ModelIO.MDLGeometryType * bool * bool * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateHemisphere (dimensions, segments, geometryType, inwardNormals, cap, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimensions" Type="OpenTK.Vector3" />
        <Parameter Name="segments" Type="OpenTK.Vector2i" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="cap" Type="System.Boolean" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="dimensions">To be added.</param>
        <param name="segments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="cap">To be added.</param>
        <param name="allocator">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIcosahedron">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateIcosahedron (float radius, bool inwardNormals, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateIcosahedron(float32 radius, bool inwardNormals, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateIcosahedron(System.Single,System.Boolean,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateIcosahedron : single * bool * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateIcosahedron (radius, inwardNormals, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newIcosahedronWithRadius:inwardNormals:allocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radius" Type="System.Single" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="radius">The radius of the icosahedron.</param>
        <param name="inwardNormals">Whether to generate inward-pointing normals.</param>
        <param name="allocator">
          <para>The allocator to use instead of the default, internal allocator.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a regular icosohedron with the specified radius.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIcosahedron">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateIcosahedron (OpenTK.Vector3 extent, bool inwardNormals, ModelIO.MDLGeometryType geometryType, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateIcosahedron(valuetype OpenTK.Vector3 extent, bool inwardNormals, valuetype ModelIO.MDLGeometryType geometryType, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateIcosahedron(OpenTK.Vector3,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateIcosahedron : OpenTK.Vector3 * bool * ModelIO.MDLGeometryType * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateIcosahedron (extent, inwardNormals, geometryType, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="OpenTK.Vector3" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="extent">The extents of the icosahedron.</param>
        <param name="inwardNormals">Whether to generate inward-pointing normals.</param>
        <param name="geometryType">Whether to create triangles, quadrilaterals, or lines.</param>
        <param name="allocator">
          <para>The allocator to use instead of the default, internal allocator.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a regular icosahedron from the specified parameters.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateIcosahedron">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateIcosahedron (float radius, bool inwardNormals, ModelIO.MDLGeometryType geometryType, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateIcosahedron(float32 radius, bool inwardNormals, valuetype ModelIO.MDLGeometryType geometryType, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateIcosahedron(System.Single,System.Boolean,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateIcosahedron : single * bool * ModelIO.MDLGeometryType * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateIcosahedron (radius, inwardNormals, geometryType, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newIcosahedronWithRadius:inwardNormals:geometryType:allocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="radius" Type="System.Single" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="radius">The radius of the icosahedron.</param>
        <param name="inwardNormals">Whether to generate inward-pointing normals.</param>
        <param name="geometryType">Whether to create triangles, quadrilaterals, or lines.</param>
        <param name="allocator">
          <para>The allocator to use instead of the default, internal allocator.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a regular icosahedron from the specified parameters.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePlane">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreatePlane (OpenTK.Vector2 dimensions, OpenTK.Vector2i segments, ModelIO.MDLGeometryType geometryType, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreatePlane(valuetype OpenTK.Vector2 dimensions, valuetype OpenTK.Vector2i segments, valuetype ModelIO.MDLGeometryType geometryType, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreatePlane(OpenTK.Vector2,OpenTK.Vector2i,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreatePlane : OpenTK.Vector2 * OpenTK.Vector2i * ModelIO.MDLGeometryType * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreatePlane (dimensions, segments, geometryType, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newPlaneWithDimensions:segments:geometryType:allocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimensions" Type="OpenTK.Vector2" />
        <Parameter Name="segments" Type="OpenTK.Vector2i" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="dimensions">To be added.</param>
        <param name="segments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreatePlane">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreatePlane (OpenTK.Vector3 extent, OpenTK.Vector2i segments, ModelIO.MDLGeometryType geometryType, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreatePlane(valuetype OpenTK.Vector3 extent, valuetype OpenTK.Vector2i segments, valuetype ModelIO.MDLGeometryType geometryType, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreatePlane(OpenTK.Vector3,OpenTK.Vector2i,ModelIO.MDLGeometryType,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreatePlane : OpenTK.Vector3 * OpenTK.Vector2i * ModelIO.MDLGeometryType * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreatePlane (extent, segments, geometryType, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="extent" Type="OpenTK.Vector3" />
        <Parameter Name="segments" Type="OpenTK.Vector2i" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="extent">The extent of the plane.</param>
        <param name="segments">The number of divisions to create in each dimension.</param>
        <param name="geometryType">Whether to create triangles, quadrilaterals, or lines.</param>
        <param name="allocator">
          <para>The allocator to use instead of the default, internal allocator.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a planar region centered at the origin, aligned with the X-Z plane, with the specified dimensions.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSphere">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateSphere (OpenTK.Vector3 dimensions, OpenTK.Vector2i segments, ModelIO.MDLGeometryType geometryType, bool inwardNormals, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateSphere(valuetype OpenTK.Vector3 dimensions, valuetype OpenTK.Vector2i segments, valuetype ModelIO.MDLGeometryType geometryType, bool inwardNormals, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateSphere(OpenTK.Vector3,OpenTK.Vector2i,ModelIO.MDLGeometryType,System.Boolean,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateSphere : OpenTK.Vector3 * OpenTK.Vector2i * ModelIO.MDLGeometryType * bool * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateSphere (dimensions, segments, geometryType, inwardNormals, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.TV(10, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dimensions" Type="OpenTK.Vector3" />
        <Parameter Name="segments" Type="OpenTK.Vector2i" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="inwardNormals" Type="System.Boolean" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="dimensions">To be added.</param>
        <param name="segments">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="inwardNormals">To be added.</param>
        <param name="allocator">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubdividedMesh">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateSubdividedMesh (ModelIO.MDLMesh mesh, nuint submeshIndex, nuint subdivisionLevels);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateSubdividedMesh(class ModelIO.MDLMesh mesh, valuetype System.nuint submeshIndex, valuetype System.nuint subdivisionLevels) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateSubdividedMesh(ModelIO.MDLMesh,System.nuint,System.nuint)" />
      <MemberSignature Language="F#" Value="static member CreateSubdividedMesh : ModelIO.MDLMesh * nuint * nuint -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateSubdividedMesh (mesh, submeshIndex, subdivisionLevels)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("newSubdividedMesh:submeshIndex:subdivisionLevels:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mesh" Type="ModelIO.MDLMesh" />
        <Parameter Name="submeshIndex" Type="System.nuint" />
        <Parameter Name="subdivisionLevels" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="mesh">To be added.</param>
        <param name="submeshIndex">To be added.</param>
        <param name="subdivisionLevels">To be added.</param>
        <summary>Subdivides the indexed submesh within the specified mesh, the specified number of times.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSubdividedMesh">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh CreateSubdividedMesh (ModelIO.MDLMesh mesh, int submeshIndex, uint subdivisionLevels, ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh CreateSubdividedMesh(class ModelIO.MDLMesh mesh, int32 submeshIndex, unsigned int32 subdivisionLevels, class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.CreateSubdividedMesh(ModelIO.MDLMesh,System.Int32,System.UInt32,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member CreateSubdividedMesh : ModelIO.MDLMesh * int * uint32 * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.CreateSubdividedMesh (mesh, submeshIndex, subdivisionLevels, allocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mesh" Type="ModelIO.MDLMesh" />
        <Parameter Name="submeshIndex" Type="System.Int32" />
        <Parameter Name="subdivisionLevels" Type="System.UInt32" />
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="mesh">To be added.</param>
        <param name="submeshIndex">To be added.</param>
        <param name="subdivisionLevels">To be added.</param>
        <param name="allocator">
          <para>The allocator to use instead of the default, internal allocator.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EdgeCreaseVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData EdgeCreaseVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData EdgeCreaseVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.EdgeCreaseVertexData" />
      <MemberSignature Language="F#" Value="member this.EdgeCreaseVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.EdgeCreaseVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets data that describe which edges that should not be modified when subdividing the surface. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.EdgeCrease" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FlipTextureCoordinates">
      <MemberSignature Language="C#" Value="public virtual void FlipTextureCoordinates (string inTextureCoordinateAttributeNamed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FlipTextureCoordinates(string inTextureCoordinateAttributeNamed) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.FlipTextureCoordinates(System.String)" />
      <MemberSignature Language="F#" Value="abstract member FlipTextureCoordinates : string -&gt; unit&#xA;override this.FlipTextureCoordinates : string -&gt; unit" Usage="mDLMesh.FlipTextureCoordinates inTextureCoordinateAttributeNamed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("flipTextureCoordinatesInAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inTextureCoordinateAttributeNamed" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="inTextureCoordinateAttributeNamed">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGeometry">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh FromGeometry (SceneKit.SCNGeometry geometry);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh FromGeometry(class SceneKit.SCNGeometry geometry) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.FromGeometry(SceneKit.SCNGeometry)" />
      <MemberSignature Language="F#" Value="static member FromGeometry : SceneKit.SCNGeometry -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.FromGeometry geometry" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("meshWithSCNGeometry:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometry" Type="SceneKit.SCNGeometry" />
      </Parameters>
      <Docs>
        <param name="geometry">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGeometry">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLMesh FromGeometry (SceneKit.SCNGeometry geometry, ModelIO.IMDLMeshBufferAllocator bufferAllocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLMesh FromGeometry(class SceneKit.SCNGeometry geometry, class ModelIO.IMDLMeshBufferAllocator bufferAllocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.FromGeometry(SceneKit.SCNGeometry,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member FromGeometry : SceneKit.SCNGeometry * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="ModelIO.MDLMesh.FromGeometry (geometry, bufferAllocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("meshWithSCNGeometry:bufferAllocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="geometry" Type="SceneKit.SCNGeometry" />
        <Parameter Name="bufferAllocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="geometry">To be added.</param>
        <param name="bufferAllocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateAmbientOcclusionTexture">
      <MemberSignature Language="C#" Value="public virtual bool GenerateAmbientOcclusionTexture (float bakeQuality, float attenuationFactor, ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateAmbientOcclusionTexture(float32 bakeQuality, float32 attenuationFactor, class ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.GenerateAmbientOcclusionTexture(System.Single,System.Single,ModelIO.MDLObject[],System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member GenerateAmbientOcclusionTexture : single * single * ModelIO.MDLObject[] * string * string -&gt; bool&#xA;override this.GenerateAmbientOcclusionTexture : single * single * ModelIO.MDLObject[] * string * string -&gt; bool" Usage="mDLMesh.GenerateAmbientOcclusionTexture (bakeQuality, attenuationFactor, objectsToConsider, vertexAttributeName, materialPropertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("generateAmbientOcclusionTextureWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bakeQuality" Type="System.Single" />
        <Parameter Name="attenuationFactor" Type="System.Single" />
        <Parameter Name="objectsToConsider" Type="ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
        <Parameter Name="materialPropertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bakeQuality">To be added.</param>
        <param name="attenuationFactor">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <param name="materialPropertyName">To be added.</param>
        <summary>Generates a texture that is used to simulate the occlusion of ambient light from recesses in the mesh.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateAmbientOcclusionTexture">
      <MemberSignature Language="C#" Value="public virtual bool GenerateAmbientOcclusionTexture (OpenTK.Vector2i textureSize, nint raysPerSample, float attenuationFactor, ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateAmbientOcclusionTexture(valuetype OpenTK.Vector2i textureSize, valuetype System.nint raysPerSample, float32 attenuationFactor, class ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.GenerateAmbientOcclusionTexture(OpenTK.Vector2i,System.nint,System.Single,ModelIO.MDLObject[],System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member GenerateAmbientOcclusionTexture : OpenTK.Vector2i * nint * single * ModelIO.MDLObject[] * string * string -&gt; bool&#xA;override this.GenerateAmbientOcclusionTexture : OpenTK.Vector2i * nint * single * ModelIO.MDLObject[] * string * string -&gt; bool" Usage="mDLMesh.GenerateAmbientOcclusionTexture (textureSize, raysPerSample, attenuationFactor, objectsToConsider, vertexAttributeName, materialPropertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("generateAmbientOcclusionTextureWithSize:raysPerSample:attenuationFactor:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureSize" Type="OpenTK.Vector2i" />
        <Parameter Name="raysPerSample" Type="System.nint" />
        <Parameter Name="attenuationFactor" Type="System.Single" />
        <Parameter Name="objectsToConsider" Type="ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
        <Parameter Name="materialPropertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textureSize">To be added.</param>
        <param name="raysPerSample">To be added.</param>
        <param name="attenuationFactor">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <param name="materialPropertyName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateAmbientOcclusionVertexColors">
      <MemberSignature Language="C#" Value="public virtual bool GenerateAmbientOcclusionVertexColors (nint raysPerSample, float attenuationFactor, ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateAmbientOcclusionVertexColors(valuetype System.nint raysPerSample, float32 attenuationFactor, class ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.GenerateAmbientOcclusionVertexColors(System.nint,System.Single,ModelIO.MDLObject[],System.String)" />
      <MemberSignature Language="F#" Value="abstract member GenerateAmbientOcclusionVertexColors : nint * single * ModelIO.MDLObject[] * string -&gt; bool&#xA;override this.GenerateAmbientOcclusionVertexColors : nint * single * ModelIO.MDLObject[] * string -&gt; bool" Usage="mDLMesh.GenerateAmbientOcclusionVertexColors (raysPerSample, attenuationFactor, objectsToConsider, vertexAttributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("generateAmbientOcclusionVertexColorsWithRaysPerSample:attenuationFactor:objectsToConsider:vertexAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="raysPerSample" Type="System.nint" />
        <Parameter Name="attenuationFactor" Type="System.Single" />
        <Parameter Name="objectsToConsider" Type="ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="raysPerSample">To be added.</param>
        <param name="attenuationFactor">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateAmbientOcclusionVertexColors">
      <MemberSignature Language="C#" Value="public virtual bool GenerateAmbientOcclusionVertexColors (float bakeQuality, float attenuationFactor, ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateAmbientOcclusionVertexColors(float32 bakeQuality, float32 attenuationFactor, class ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.GenerateAmbientOcclusionVertexColors(System.Single,System.Single,ModelIO.MDLObject[],System.String)" />
      <MemberSignature Language="F#" Value="abstract member GenerateAmbientOcclusionVertexColors : single * single * ModelIO.MDLObject[] * string -&gt; bool&#xA;override this.GenerateAmbientOcclusionVertexColors : single * single * ModelIO.MDLObject[] * string -&gt; bool" Usage="mDLMesh.GenerateAmbientOcclusionVertexColors (bakeQuality, attenuationFactor, objectsToConsider, vertexAttributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("generateAmbientOcclusionVertexColorsWithQuality:attenuationFactor:objectsToConsider:vertexAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bakeQuality" Type="System.Single" />
        <Parameter Name="attenuationFactor" Type="System.Single" />
        <Parameter Name="objectsToConsider" Type="ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bakeQuality">To be added.</param>
        <param name="attenuationFactor">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <summary>Generates vertex color data that is used to simulate the occlusion of ambient light from recesses in the mesh.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateLightMapTexture">
      <MemberSignature Language="C#" Value="public virtual bool GenerateLightMapTexture (OpenTK.Vector2i textureSize, ModelIO.MDLLight[] lightsToConsider, ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateLightMapTexture(valuetype OpenTK.Vector2i textureSize, class ModelIO.MDLLight[] lightsToConsider, class ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.GenerateLightMapTexture(OpenTK.Vector2i,ModelIO.MDLLight[],ModelIO.MDLObject[],System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member GenerateLightMapTexture : OpenTK.Vector2i * ModelIO.MDLLight[] * ModelIO.MDLObject[] * string * string -&gt; bool&#xA;override this.GenerateLightMapTexture : OpenTK.Vector2i * ModelIO.MDLLight[] * ModelIO.MDLObject[] * string * string -&gt; bool" Usage="mDLMesh.GenerateLightMapTexture (textureSize, lightsToConsider, objectsToConsider, vertexAttributeName, materialPropertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("generateLightMapTextureWithTextureSize:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureSize" Type="OpenTK.Vector2i" />
        <Parameter Name="lightsToConsider" Type="ModelIO.MDLLight[]" />
        <Parameter Name="objectsToConsider" Type="ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
        <Parameter Name="materialPropertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="textureSize">To be added.</param>
        <param name="lightsToConsider">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <param name="materialPropertyName">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateLightMapTexture">
      <MemberSignature Language="C#" Value="public virtual bool GenerateLightMapTexture (float bakeQuality, ModelIO.MDLLight[] lightsToConsider, ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateLightMapTexture(float32 bakeQuality, class ModelIO.MDLLight[] lightsToConsider, class ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName, string materialPropertyName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.GenerateLightMapTexture(System.Single,ModelIO.MDLLight[],ModelIO.MDLObject[],System.String,System.String)" />
      <MemberSignature Language="F#" Value="abstract member GenerateLightMapTexture : single * ModelIO.MDLLight[] * ModelIO.MDLObject[] * string * string -&gt; bool&#xA;override this.GenerateLightMapTexture : single * ModelIO.MDLLight[] * ModelIO.MDLObject[] * string * string -&gt; bool" Usage="mDLMesh.GenerateLightMapTexture (bakeQuality, lightsToConsider, objectsToConsider, vertexAttributeName, materialPropertyName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("generateLightMapTextureWithQuality:lightsToConsider:objectsToConsider:vertexAttributeNamed:materialPropertyNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bakeQuality" Type="System.Single" />
        <Parameter Name="lightsToConsider" Type="ModelIO.MDLLight[]" />
        <Parameter Name="objectsToConsider" Type="ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
        <Parameter Name="materialPropertyName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="bakeQuality">To be added.</param>
        <param name="lightsToConsider">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <param name="materialPropertyName">To be added.</param>
        <summary>Generates a map that represents the computed result of shading from the specified lights, obstructed by the specified objects.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateLightMapVertexColors">
      <MemberSignature Language="C#" Value="public virtual bool GenerateLightMapVertexColors (ModelIO.MDLLight[] lightsToConsider, ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GenerateLightMapVertexColors(class ModelIO.MDLLight[] lightsToConsider, class ModelIO.MDLObject[] objectsToConsider, string vertexAttributeName) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.GenerateLightMapVertexColors(ModelIO.MDLLight[],ModelIO.MDLObject[],System.String)" />
      <MemberSignature Language="F#" Value="abstract member GenerateLightMapVertexColors : ModelIO.MDLLight[] * ModelIO.MDLObject[] * string -&gt; bool&#xA;override this.GenerateLightMapVertexColors : ModelIO.MDLLight[] * ModelIO.MDLObject[] * string -&gt; bool" Usage="mDLMesh.GenerateLightMapVertexColors (lightsToConsider, objectsToConsider, vertexAttributeName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("generateLightMapVertexColorsWithLightsToConsider:objectsToConsider:vertexAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lightsToConsider" Type="ModelIO.MDLLight[]" />
        <Parameter Name="objectsToConsider" Type="ModelIO.MDLObject[]" />
        <Parameter Name="vertexAttributeName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="lightsToConsider">To be added.</param>
        <param name="objectsToConsider">To be added.</param>
        <param name="vertexAttributeName">To be added.</param>
        <summary>Generates vertex color data that represent the computed result of shading from the specified lights, obstructed by the specified objects.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVertexAttributeData">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLVertexAttributeData GetVertexAttributeData (string attributeName, ModelIO.MDLVertexFormat format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class ModelIO.MDLVertexAttributeData GetVertexAttributeData(string attributeName, valuetype ModelIO.MDLVertexFormat format) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.GetVertexAttributeData(System.String,ModelIO.MDLVertexFormat)" />
      <MemberSignature Language="F#" Value="abstract member GetVertexAttributeData : string * ModelIO.MDLVertexFormat -&gt; ModelIO.MDLVertexAttributeData&#xA;override this.GetVertexAttributeData : string * ModelIO.MDLVertexFormat -&gt; ModelIO.MDLVertexAttributeData" Usage="mDLMesh.GetVertexAttributeData (attributeName, format)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("vertexAttributeDataForAttributeNamed:asFormat:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeName" Type="System.String" />
        <Parameter Name="format" Type="ModelIO.MDLVertexFormat" />
      </Parameters>
      <Docs>
        <param name="attributeName">To be added.</param>
        <param name="format">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JointIndicesVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData JointIndicesVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData JointIndicesVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.JointIndicesVertexData" />
      <MemberSignature Language="F#" Value="member this.JointIndicesVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.JointIndicesVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets bone and joint indices. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.JointIndices" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JointWeightsVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData JointWeightsVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData JointWeightsVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.JointWeightsVertexData" />
      <MemberSignature Language="F#" Value="member this.JointWeightsVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.JointWeightsVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets bone and joint weight information that is used to render a mesh that is associated with a skeleton. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.JointWeights" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeVerticesUnique">
      <MemberSignature Language="C#" Value="public virtual void MakeVerticesUnique ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MakeVerticesUnique() cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.MakeVerticesUnique" />
      <MemberSignature Language="F#" Value="abstract member MakeVerticesUnique : unit -&gt; unit&#xA;override this.MakeVerticesUnique : unit -&gt; unit" Usage="mDLMesh.MakeVerticesUnique " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("makeVerticesUnique")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.None, "Use the 'NSError' overload.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.None, "Use the 'NSError' overload.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Developers should not use this deprecated method. Developers should use the 'NSError' overload.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MakeVerticesUnique">
      <MemberSignature Language="C#" Value="public virtual bool MakeVerticesUnique (out Foundation.NSError error);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool MakeVerticesUnique([out] class Foundation.NSError&amp; error) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.MakeVerticesUnique(Foundation.NSError@)" />
      <MemberSignature Language="F#" Value="abstract member MakeVerticesUnique :  -&gt; bool&#xA;override this.MakeVerticesUnique :  -&gt; bool" Usage="mDLMesh.MakeVerticesUnique error" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("makeVerticesUniqueAndReturnError:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="error" Type="Foundation.NSError" RefType="out" />
      </Parameters>
      <Docs>
        <param name="error">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="NormalVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData NormalVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData NormalVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.NormalVertexData" />
      <MemberSignature Language="F#" Value="member this.NormalVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.NormalVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets normal vectors for the mesh vertices. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.Normal" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OcclusionValueVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData OcclusionValueVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData OcclusionValueVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.OcclusionValueVertexData" />
      <MemberSignature Language="F#" Value="member this.OcclusionValueVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.OcclusionValueVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets occlusion data for the mesh vertices. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.OcclusionValue" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PositionVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData PositionVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData PositionVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.PositionVertexData" />
      <MemberSignature Language="F#" Value="member this.PositionVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.PositionVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the positions of the mesh vertices. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.Position" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAttribute">
      <MemberSignature Language="C#" Value="public virtual void RemoveAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.RemoveAttribute(System.String)" />
      <MemberSignature Language="F#" Value="abstract member RemoveAttribute : string -&gt; unit&#xA;override this.RemoveAttribute : string -&gt; unit" Usage="mDLMesh.RemoveAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("removeAttributeNamed:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceAttribute">
      <MemberSignature Language="C#" Value="public virtual void ReplaceAttribute (string name, ModelIO.MDLVertexAttributeData newData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceAttribute(string name, class ModelIO.MDLVertexAttributeData newData) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.ReplaceAttribute(System.String,ModelIO.MDLVertexAttributeData)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceAttribute : string * ModelIO.MDLVertexAttributeData -&gt; unit&#xA;override this.ReplaceAttribute : string * ModelIO.MDLVertexAttributeData -&gt; unit" Usage="mDLMesh.ReplaceAttribute (name, newData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("replaceAttributeNamed:withData:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="newData" Type="ModelIO.MDLVertexAttributeData" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="newData">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadingBasisUVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData ShadingBasisUVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData ShadingBasisUVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.ShadingBasisUVertexData" />
      <MemberSignature Language="F#" Value="member this.ShadingBasisUVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.ShadingBasisUVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the U basis vectors that are used for shading. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.ShadingBasisU" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShadingBasisVVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData ShadingBasisVVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData ShadingBasisVVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.ShadingBasisVVertexData" />
      <MemberSignature Language="F#" Value="member this.ShadingBasisVVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.ShadingBasisVVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the V basis vectors that are used for shading. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.ShadingBasisV" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubdivisionStencilVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData SubdivisionStencilVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData SubdivisionStencilVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.SubdivisionStencilVertexData" />
      <MemberSignature Language="F#" Value="member this.SubdivisionStencilVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.SubdivisionStencilVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the data that decide which neighboring vertices are used for subdivision calculations. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.SubdivisionStencil" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Submeshes">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSMutableArray&lt;ModelIO.MDLSubmesh&gt; Submeshes { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSMutableArray`1&lt;class ModelIO.MDLSubmesh&gt; Submeshes" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.Submeshes" />
      <MemberSignature Language="F#" Value="member this.Submeshes : Foundation.NSMutableArray&lt;ModelIO.MDLSubmesh&gt; with get, set" Usage="ModelIO.MDLMesh.Submeshes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("submeshes")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setSubmeshes:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("submeshes", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setSubmeshes:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSMutableArray&lt;ModelIO.MDLSubmesh&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the array of submeshes for this mesh.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TangentVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData TangentVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData TangentVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.TangentVertexData" />
      <MemberSignature Language="F#" Value="member this.TangentVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.TangentVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the vertex tangent data. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.Tangent" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextureCoordinateVertexData">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVertexAttributeData TextureCoordinateVertexData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexAttributeData TextureCoordinateVertexData" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.TextureCoordinateVertexData" />
      <MemberSignature Language="F#" Value="member this.TextureCoordinateVertexData : ModelIO.MDLVertexAttributeData" Usage="ModelIO.MDLMesh.TextureCoordinateVertexData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexAttributeData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the coordinate system for texture operations on vertices. These data are associated with the <see cref="P:ModelIO.MDLVertexAttributes.TextureCoordinate" /> key.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateAttribute">
      <MemberSignature Language="C#" Value="public virtual void UpdateAttribute (string name, ModelIO.MDLVertexAttributeData newData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UpdateAttribute(string name, class ModelIO.MDLVertexAttributeData newData) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLMesh.UpdateAttribute(System.String,ModelIO.MDLVertexAttributeData)" />
      <MemberSignature Language="F#" Value="abstract member UpdateAttribute : string * ModelIO.MDLVertexAttributeData -&gt; unit&#xA;override this.UpdateAttribute : string * ModelIO.MDLVertexAttributeData -&gt; unit" Usage="mDLMesh.UpdateAttribute (name, newData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("updateAttributeNamed:withData:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="newData" Type="ModelIO.MDLVertexAttributeData" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="newData">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexBuffers">
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.IMDLMeshBuffer[] VertexBuffers" />
      <MemberSignature Language="C#" Value="public virtual ModelIO.IMDLMeshBuffer[] VertexBuffers { get; set; }" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.VertexBuffers" />
      <MemberSignature Language="F#" Value="member this.VertexBuffers : ModelIO.IMDLMeshBuffer[] with get, set" Usage="ModelIO.MDLMesh.VertexBuffers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("vertexBuffers")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setVertexBuffers:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("vertexBuffers", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setVertexBuffers:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.IMDLMeshBuffer[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the buffers that contain the vertex data for the mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexCount">
      <MemberSignature Language="C#" Value="public virtual nuint VertexCount { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint VertexCount" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.VertexCount" />
      <MemberSignature Language="F#" Value="member this.VertexCount : nuint with get, set" Usage="ModelIO.MDLMesh.VertexCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("vertexCount")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setVertexCount:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of vertices in the entire mesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VertexDescriptor">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLVertexDescriptor VertexDescriptor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLVertexDescriptor VertexDescriptor" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLMesh.VertexDescriptor" />
      <MemberSignature Language="F#" Value="member this.VertexDescriptor : ModelIO.MDLVertexDescriptor with get, set" Usage="ModelIO.MDLMesh.VertexDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("vertexDescriptor")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setVertexDescriptor:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("vertexDescriptor", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setVertexDescriptor:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVertexDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the description of the in-memory layout of vertices in a mesh.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
