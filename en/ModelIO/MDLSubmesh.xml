<Type Name="MDLSubmesh" FullName="ModelIO.MDLSubmesh">
  <TypeSignature Language="C#" Value="public class MDLSubmesh : Foundation.NSObject, IDisposable, ModelIO.IMDLNamed" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MDLSubmesh extends Foundation.NSObject implements class ModelIO.IMDLNamed, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:ModelIO.MDLSubmesh" />
  <TypeSignature Language="F#" Value="type MDLSubmesh = class&#xA;    inherit NSObject&#xA;    interface IMDLNamed&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>ModelIO.IMDLNamed</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("MDLSubmesh", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Indexes and identifies a portion of an MDLMesh, and contains material information about the indexed portion.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/ModelIO/Reference/MDLSubmesh_Class/index.html">Apple documentation for <c>MDLSubmesh</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLSubmesh.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MDLSubmesh (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLSubmesh.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLSubmesh : Foundation.NSObjectFlag -&gt; ModelIO.MDLSubmesh" Usage="new ModelIO.MDLSubmesh t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MDLSubmesh (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLSubmesh.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLSubmesh : nativeint -&gt; ModelIO.MDLSubmesh" Usage="new ModelIO.MDLSubmesh handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (ModelIO.MDLSubmesh indexBuffer, ModelIO.MDLIndexBitDepth indexType, ModelIO.MDLGeometryType geometryType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ModelIO.MDLSubmesh indexBuffer, valuetype ModelIO.MDLIndexBitDepth indexType, valuetype ModelIO.MDLGeometryType geometryType) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLSubmesh.#ctor(ModelIO.MDLSubmesh,ModelIO.MDLIndexBitDepth,ModelIO.MDLGeometryType)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLSubmesh : ModelIO.MDLSubmesh * ModelIO.MDLIndexBitDepth * ModelIO.MDLGeometryType -&gt; ModelIO.MDLSubmesh" Usage="new ModelIO.MDLSubmesh (indexBuffer, indexType, geometryType)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithMDLSubmesh:indexType:geometryType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="indexBuffer" Type="ModelIO.MDLSubmesh" />
        <Parameter Name="indexType" Type="ModelIO.MDLIndexBitDepth" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
      </Parameters>
      <Docs>
        <param name="indexBuffer">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="geometryType">To be added.</param>
        <summary>Creates a new MDLSubmesh with the specified parameters.</summary>
        <remarks>If either <paramref name="indexType" /> or <paramref name="geometryType" /> do not match the type of data in <paramref name="indexBuffer" />, then a new buffer is created and filled with converted data.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (ModelIO.IMDLMeshBuffer indexBuffer, nuint indexCount, ModelIO.MDLIndexBitDepth indexType, ModelIO.MDLGeometryType geometryType, ModelIO.MDLMaterial material);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ModelIO.IMDLMeshBuffer indexBuffer, valuetype System.nuint indexCount, valuetype ModelIO.MDLIndexBitDepth indexType, valuetype ModelIO.MDLGeometryType geometryType, class ModelIO.MDLMaterial material) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLSubmesh.#ctor(ModelIO.IMDLMeshBuffer,System.nuint,ModelIO.MDLIndexBitDepth,ModelIO.MDLGeometryType,ModelIO.MDLMaterial)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLSubmesh : ModelIO.IMDLMeshBuffer * nuint * ModelIO.MDLIndexBitDepth * ModelIO.MDLGeometryType * ModelIO.MDLMaterial -&gt; ModelIO.MDLSubmesh" Usage="new ModelIO.MDLSubmesh (indexBuffer, indexCount, indexType, geometryType, material)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithIndexBuffer:indexCount:indexType:geometryType:material:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="indexBuffer" Type="ModelIO.IMDLMeshBuffer" />
        <Parameter Name="indexCount" Type="System.nuint" />
        <Parameter Name="indexType" Type="ModelIO.MDLIndexBitDepth" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="material" Type="ModelIO.MDLMaterial" />
      </Parameters>
      <Docs>
        <param name="indexBuffer">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="material">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (string name, ModelIO.IMDLMeshBuffer indexBuffer, nuint indexCount, ModelIO.MDLIndexBitDepth indexType, ModelIO.MDLGeometryType geometryType, ModelIO.MDLMaterial material);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class ModelIO.IMDLMeshBuffer indexBuffer, valuetype System.nuint indexCount, valuetype ModelIO.MDLIndexBitDepth indexType, valuetype ModelIO.MDLGeometryType geometryType, class ModelIO.MDLMaterial material) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLSubmesh.#ctor(System.String,ModelIO.IMDLMeshBuffer,System.nuint,ModelIO.MDLIndexBitDepth,ModelIO.MDLGeometryType,ModelIO.MDLMaterial)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLSubmesh : string * ModelIO.IMDLMeshBuffer * nuint * ModelIO.MDLIndexBitDepth * ModelIO.MDLGeometryType * ModelIO.MDLMaterial -&gt; ModelIO.MDLSubmesh" Usage="new ModelIO.MDLSubmesh (name, indexBuffer, indexCount, indexType, geometryType, material)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithName:indexBuffer:indexCount:indexType:geometryType:material:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="indexBuffer" Type="ModelIO.IMDLMeshBuffer" />
        <Parameter Name="indexCount" Type="System.nuint" />
        <Parameter Name="indexType" Type="ModelIO.MDLIndexBitDepth" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="material" Type="ModelIO.MDLMaterial" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="indexBuffer">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="material">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLSubmesh (string name, ModelIO.IMDLMeshBuffer indexBuffer, nuint indexCount, ModelIO.MDLIndexBitDepth indexType, ModelIO.MDLGeometryType geometryType, ModelIO.MDLMaterial material, ModelIO.MDLSubmeshTopology topology);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string name, class ModelIO.IMDLMeshBuffer indexBuffer, valuetype System.nuint indexCount, valuetype ModelIO.MDLIndexBitDepth indexType, valuetype ModelIO.MDLGeometryType geometryType, class ModelIO.MDLMaterial material, class ModelIO.MDLSubmeshTopology topology) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLSubmesh.#ctor(System.String,ModelIO.IMDLMeshBuffer,System.nuint,ModelIO.MDLIndexBitDepth,ModelIO.MDLGeometryType,ModelIO.MDLMaterial,ModelIO.MDLSubmeshTopology)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLSubmesh : string * ModelIO.IMDLMeshBuffer * nuint * ModelIO.MDLIndexBitDepth * ModelIO.MDLGeometryType * ModelIO.MDLMaterial * ModelIO.MDLSubmeshTopology -&gt; ModelIO.MDLSubmesh" Usage="new ModelIO.MDLSubmesh (name, indexBuffer, indexCount, indexType, geometryType, material, topology)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithName:indexBuffer:indexCount:indexType:geometryType:material:topology:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="indexBuffer" Type="ModelIO.IMDLMeshBuffer" />
        <Parameter Name="indexCount" Type="System.nuint" />
        <Parameter Name="indexType" Type="ModelIO.MDLIndexBitDepth" />
        <Parameter Name="geometryType" Type="ModelIO.MDLGeometryType" />
        <Parameter Name="material" Type="ModelIO.MDLMaterial" />
        <Parameter Name="topology" Type="ModelIO.MDLSubmeshTopology" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <param name="indexBuffer">To be added.</param>
        <param name="indexCount">To be added.</param>
        <param name="indexType">To be added.</param>
        <param name="geometryType">To be added.</param>
        <param name="material">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="topology">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLSubmesh.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="ModelIO.MDLSubmesh.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGeometryElement">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLSubmesh FromGeometryElement (SceneKit.SCNGeometryElement element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLSubmesh FromGeometryElement(class SceneKit.SCNGeometryElement element) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLSubmesh.FromGeometryElement(SceneKit.SCNGeometryElement)" />
      <MemberSignature Language="F#" Value="static member FromGeometryElement : SceneKit.SCNGeometryElement -&gt; ModelIO.MDLSubmesh" Usage="ModelIO.MDLSubmesh.FromGeometryElement element" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("submeshWithSCNGeometryElement:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLSubmesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="SceneKit.SCNGeometryElement" />
      </Parameters>
      <Docs>
        <param name="element">To be added.</param>
        <summary>Creates a new MDLSubmesh object from the specified Scene Kit geometry element.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromGeometryElement">
      <MemberSignature Language="C#" Value="public static ModelIO.MDLSubmesh FromGeometryElement (SceneKit.SCNGeometryElement element, ModelIO.IMDLMeshBufferAllocator bufferAllocator);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class ModelIO.MDLSubmesh FromGeometryElement(class SceneKit.SCNGeometryElement element, class ModelIO.IMDLMeshBufferAllocator bufferAllocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLSubmesh.FromGeometryElement(SceneKit.SCNGeometryElement,ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="static member FromGeometryElement : SceneKit.SCNGeometryElement * ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLSubmesh" Usage="ModelIO.MDLSubmesh.FromGeometryElement (element, bufferAllocator)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("submeshWithSCNGeometryElement:bufferAllocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLSubmesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="element" Type="SceneKit.SCNGeometryElement" />
        <Parameter Name="bufferAllocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="element">To be added.</param>
        <param name="bufferAllocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Creates a new submesh from the provided Scene Kit element.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GeometryType">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLGeometryType GeometryType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ModelIO.MDLGeometryType GeometryType" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLSubmesh.GeometryType" />
      <MemberSignature Language="F#" Value="member this.GeometryType : ModelIO.MDLGeometryType" Usage="ModelIO.MDLSubmesh.GeometryType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("geometryType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLGeometryType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the geometry type of the submesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndexBuffer">
      <MemberSignature Language="C#" Value="public virtual ModelIO.IMDLMeshBuffer GetIndexBuffer (ModelIO.MDLIndexBitDepth indexType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class ModelIO.IMDLMeshBuffer GetIndexBuffer(valuetype ModelIO.MDLIndexBitDepth indexType) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLSubmesh.GetIndexBuffer(ModelIO.MDLIndexBitDepth)" />
      <MemberSignature Language="F#" Value="abstract member GetIndexBuffer : ModelIO.MDLIndexBitDepth -&gt; ModelIO.IMDLMeshBuffer&#xA;override this.GetIndexBuffer : ModelIO.MDLIndexBitDepth -&gt; ModelIO.IMDLMeshBuffer" Usage="mDLSubmesh.GetIndexBuffer indexType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexBufferAsIndexType:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.IMDLMeshBuffer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="indexType" Type="ModelIO.MDLIndexBitDepth" />
      </Parameters>
      <Docs>
        <param name="indexType">To be added.</param>
        <summary>Returns the index buffer for the submesh with the specified bit depth.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexBuffer">
      <MemberSignature Language="C#" Value="public virtual ModelIO.IMDLMeshBuffer IndexBuffer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.IMDLMeshBuffer IndexBuffer" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLSubmesh.IndexBuffer" />
      <MemberSignature Language="F#" Value="member this.IndexBuffer : ModelIO.IMDLMeshBuffer" Usage="ModelIO.MDLSubmesh.IndexBuffer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("indexBuffer")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("indexBuffer", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.IMDLMeshBuffer</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the buffer whose indices sequence the vertex data into interpretable geometry.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexCount">
      <MemberSignature Language="C#" Value="public virtual nuint IndexCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint IndexCount" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLSubmesh.IndexCount" />
      <MemberSignature Language="F#" Value="member this.IndexCount : nuint" Usage="ModelIO.MDLSubmesh.IndexCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("indexCount")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of indices in the index buffer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexType">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLIndexBitDepth IndexType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ModelIO.MDLIndexBitDepth IndexType" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLSubmesh.IndexType" />
      <MemberSignature Language="F#" Value="member this.IndexType : ModelIO.MDLIndexBitDepth" Usage="ModelIO.MDLSubmesh.IndexType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("indexType")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLIndexBitDepth</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the numeric data type of the values in the index buffer.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Material">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLMaterial Material { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLMaterial Material" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLSubmesh.Material" />
      <MemberSignature Language="F#" Value="member this.Material : ModelIO.MDLMaterial with get, set" Usage="ModelIO.MDLSubmesh.Material" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("material")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setMaterial:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("material", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setMaterial:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMaterial</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the material to use when rendering the submesh.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public virtual string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLSubmesh.Name" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="ModelIO.MDLSubmesh.Name" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:ModelIO.IMDLNamed.Name</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("name")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setName:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets the name of the submesh.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Topology">
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLSubmeshTopology Topology" />
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLSubmeshTopology Topology { get; set; }" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLSubmesh.Topology" />
      <MemberSignature Language="F#" Value="member this.Topology : ModelIO.MDLSubmeshTopology with get, set" Usage="ModelIO.MDLSubmesh.Topology" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("topology")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>set: Foundation.Export("setTopology:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, 2, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 1, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("topology", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setTopology:", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLSubmeshTopology</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value that controls how the vertices in the submesh define the geometry of the mesh.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>Gets or sets an object that describes the submesh's topology.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
