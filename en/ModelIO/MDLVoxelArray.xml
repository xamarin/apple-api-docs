<Type Name="MDLVoxelArray" FullName="ModelIO.MDLVoxelArray">
  <TypeSignature Language="C#" Value="public class MDLVoxelArray : ModelIO.MDLObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MDLVoxelArray extends ModelIO.MDLObject" />
  <TypeSignature Language="DocId" Value="T:ModelIO.MDLVoxelArray" />
  <TypeSignature Language="F#" Value="type MDLVoxelArray = class&#xA;    inherit MDLObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>ModelIO.MDLObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("MDLVoxelArray", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Models a 3D object as a collection of volumetric elements, called voxels.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/library/ios/documentation/ModelIO/Reference/MDLVoxelArray_Class/index.html">Apple documentation for <c>MDLVoxelArray</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MDLVoxelArray (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLVoxelArray : Foundation.NSObjectFlag -&gt; ModelIO.MDLVoxelArray" Usage="new ModelIO.MDLVoxelArray t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MDLVoxelArray (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLVoxelArray : nativeint -&gt; ModelIO.MDLVoxelArray" Usage="new ModelIO.MDLVoxelArray handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLVoxelArray (Foundation.NSData voxelData, ModelIO.MDLAxisAlignedBoundingBox boundingBox, float voxelExtent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSData voxelData, valuetype ModelIO.MDLAxisAlignedBoundingBox boundingBox, float32 voxelExtent) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.#ctor(Foundation.NSData,ModelIO.MDLAxisAlignedBoundingBox,System.Single)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLVoxelArray : Foundation.NSData * ModelIO.MDLAxisAlignedBoundingBox * single -&gt; ModelIO.MDLVoxelArray" Usage="new ModelIO.MDLVoxelArray (voxelData, boundingBox, voxelExtent)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithData:boundingBox:voxelExtent:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="voxelData" Type="Foundation.NSData" />
        <Parameter Name="boundingBox" Type="ModelIO.MDLAxisAlignedBoundingBox" />
        <Parameter Name="voxelExtent" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="voxelData">To be added.</param>
        <param name="boundingBox">To be added.</param>
        <param name="voxelExtent">To be added.</param>
        <summary>Creates a new MDLVoxelArray from the provided voxel data, bounding box, and voxel extent.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLVoxelArray (ModelIO.MDLAsset asset, int divisions, float patchRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ModelIO.MDLAsset asset, int32 divisions, float32 patchRadius) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.#ctor(ModelIO.MDLAsset,System.Int32,System.Single)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLVoxelArray : ModelIO.MDLAsset * int * single -&gt; ModelIO.MDLVoxelArray" Usage="new ModelIO.MDLVoxelArray (asset, divisions, patchRadius)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithAsset:divisions:patchRadius:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="asset" Type="ModelIO.MDLAsset" />
        <Parameter Name="divisions" Type="System.Int32" />
        <Parameter Name="patchRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="asset">To be added.</param>
        <param name="divisions">To be added.</param>
        <param name="patchRadius">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLVoxelArray (ModelIO.MDLAsset asset, int divisions, int interiorShells, int exteriorShells, float patchRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ModelIO.MDLAsset asset, int32 divisions, int32 interiorShells, int32 exteriorShells, float32 patchRadius) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.#ctor(ModelIO.MDLAsset,System.Int32,System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLVoxelArray : ModelIO.MDLAsset * int * int * int * single -&gt; ModelIO.MDLVoxelArray" Usage="new ModelIO.MDLVoxelArray (asset, divisions, interiorShells, exteriorShells, patchRadius)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithAsset:divisions:interiorShells:exteriorShells:patchRadius:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, "Use 'new MDLVoxelArray (MDLAsset, int, float)'.")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="asset" Type="ModelIO.MDLAsset" />
        <Parameter Name="divisions" Type="System.Int32" />
        <Parameter Name="interiorShells" Type="System.Int32" />
        <Parameter Name="exteriorShells" Type="System.Int32" />
        <Parameter Name="patchRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="asset">To be added.</param>
        <param name="divisions">To be added.</param>
        <param name="interiorShells">To be added.</param>
        <param name="exteriorShells">To be added.</param>
        <param name="patchRadius">To be added.</param>
        <summary>Developers should not use this deprecated constructor. Developers should use 'new MDLVoxelArray (MDLAsset, int, float)'.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLVoxelArray (ModelIO.MDLAsset asset, int divisions, float interiorNBWidth, float exteriorNBWidth, float patchRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class ModelIO.MDLAsset asset, int32 divisions, float32 interiorNBWidth, float32 exteriorNBWidth, float32 patchRadius) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.#ctor(ModelIO.MDLAsset,System.Int32,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLVoxelArray : ModelIO.MDLAsset * int * single * single * single -&gt; ModelIO.MDLVoxelArray" Usage="new ModelIO.MDLVoxelArray (asset, divisions, interiorNBWidth, exteriorNBWidth, patchRadius)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithAsset:divisions:interiorNBWidth:exteriorNBWidth:patchRadius:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, "Use 'new MDLVoxelArray (MDLAsset, int, float)'.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Obsoleted(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, "Use new MDLVoxelArray (MDLAsset, int, float)")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="asset" Type="ModelIO.MDLAsset" />
        <Parameter Name="divisions" Type="System.Int32" />
        <Parameter Name="interiorNBWidth" Type="System.Single" />
        <Parameter Name="exteriorNBWidth" Type="System.Single" />
        <Parameter Name="patchRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="asset">To be added.</param>
        <param name="divisions">To be added.</param>
        <param name="interiorNBWidth">To be added.</param>
        <param name="exteriorNBWidth">To be added.</param>
        <param name="patchRadius">To be added.</param>
        <summary>Creates a new MDLVoxelArray from the provided asset, with the specified number of divisions and the specified numbers of concentric interior and exterior shells of voxels.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BoundingBox">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLAxisAlignedBoundingBox BoundingBox { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ModelIO.MDLAxisAlignedBoundingBox BoundingBox" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLVoxelArray.BoundingBox" />
      <MemberSignature Language="F#" Value="member this.BoundingBox : ModelIO.MDLAxisAlignedBoundingBox" Usage="ModelIO.MDLVoxelArray.BoundingBox" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("boundingBox")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLAxisAlignedBoundingBox</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the smallest box that contains all the voxels.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLVoxelArray.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="ModelIO.MDLVoxelArray.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ConvertToSignedShellField">
      <MemberSignature Language="C#" Value="public virtual void ConvertToSignedShellField ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ConvertToSignedShellField() cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.ConvertToSignedShellField" />
      <MemberSignature Language="F#" Value="abstract member ConvertToSignedShellField : unit -&gt; unit&#xA;override this.ConvertToSignedShellField : unit -&gt; unit" Usage="mDLVoxelArray.ConvertToSignedShellField " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("convertToSignedShellField")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public virtual nuint Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint Count" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLVoxelArray.Count" />
      <MemberSignature Language="F#" Value="member this.Count : nuint" Usage="ModelIO.MDLVoxelArray.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("count")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the number of voxels in the array.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMesh">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLMesh CreateMesh (ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class ModelIO.MDLMesh CreateMesh(class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.CreateMesh(ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="abstract member CreateMesh : ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh&#xA;override this.CreateMesh : ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="mDLVoxelArray.CreateMesh allocator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("meshUsingAllocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Returns a mesh that encloses the voxels in the array.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DifferenceWith">
      <MemberSignature Language="C#" Value="public virtual void DifferenceWith (ModelIO.MDLVoxelArray voxels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DifferenceWith(class ModelIO.MDLVoxelArray voxels) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.DifferenceWith(ModelIO.MDLVoxelArray)" />
      <MemberSignature Language="F#" Value="abstract member DifferenceWith : ModelIO.MDLVoxelArray -&gt; unit&#xA;override this.DifferenceWith : ModelIO.MDLVoxelArray -&gt; unit" Usage="mDLVoxelArray.DifferenceWith voxels" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("differenceWithVoxels:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voxels" Type="ModelIO.MDLVoxelArray" />
      </Parameters>
      <Docs>
        <param name="voxels">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCoarseMesh">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLMesh GetCoarseMesh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class ModelIO.MDLMesh GetCoarseMesh() cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.GetCoarseMesh" />
      <MemberSignature Language="F#" Value="abstract member GetCoarseMesh : unit -&gt; ModelIO.MDLMesh&#xA;override this.GetCoarseMesh : unit -&gt; ModelIO.MDLMesh" Usage="mDLVoxelArray.GetCoarseMesh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("coarseMesh")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCoarseMeshUsingAllocator">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLMesh GetCoarseMeshUsingAllocator (ModelIO.IMDLMeshBufferAllocator allocator);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class ModelIO.MDLMesh GetCoarseMeshUsingAllocator(class ModelIO.IMDLMeshBufferAllocator allocator) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.GetCoarseMeshUsingAllocator(ModelIO.IMDLMeshBufferAllocator)" />
      <MemberSignature Language="F#" Value="abstract member GetCoarseMeshUsingAllocator : ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh&#xA;override this.GetCoarseMeshUsingAllocator : ModelIO.IMDLMeshBufferAllocator -&gt; ModelIO.MDLMesh" Usage="mDLVoxelArray.GetCoarseMeshUsingAllocator allocator" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("coarseMeshUsingAllocator:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLMesh</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allocator" Type="ModelIO.IMDLMeshBufferAllocator" />
      </Parameters>
      <Docs>
        <param name="allocator">
          <para>To be added.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIndex">
      <MemberSignature Language="C#" Value="public virtual OpenTK.Vector4i GetIndex (OpenTK.Vector3 spatiallocation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype OpenTK.Vector4i GetIndex(valuetype OpenTK.Vector3 spatiallocation) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.GetIndex(OpenTK.Vector3)" />
      <MemberSignature Language="F#" Value="abstract member GetIndex : OpenTK.Vector3 -&gt; OpenTK.Vector4i&#xA;override this.GetIndex : OpenTK.Vector3 -&gt; OpenTK.Vector4i" Usage="mDLVoxelArray.GetIndex spatiallocation" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("indexOfSpatialLocation:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.Vector4i</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="spatiallocation" Type="OpenTK.Vector3" />
      </Parameters>
      <Docs>
        <param name="spatiallocation">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetSpatialLocation">
      <MemberSignature Language="C#" Value="public virtual OpenTK.Vector3 GetSpatialLocation (OpenTK.Vector4i index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype OpenTK.Vector3 GetSpatialLocation(valuetype OpenTK.Vector4i index) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.GetSpatialLocation(OpenTK.Vector4i)" />
      <MemberSignature Language="F#" Value="abstract member GetSpatialLocation : OpenTK.Vector4i -&gt; OpenTK.Vector3&#xA;override this.GetSpatialLocation : OpenTK.Vector4i -&gt; OpenTK.Vector3" Usage="mDLVoxelArray.GetSpatialLocation index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("spatialLocationOfIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>OpenTK.Vector3</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="OpenTK.Vector4i" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVoxelBoundingBox">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLAxisAlignedBoundingBox GetVoxelBoundingBox (OpenTK.Vector4i index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype ModelIO.MDLAxisAlignedBoundingBox GetVoxelBoundingBox(valuetype OpenTK.Vector4i index) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.GetVoxelBoundingBox(OpenTK.Vector4i)" />
      <MemberSignature Language="F#" Value="abstract member GetVoxelBoundingBox : OpenTK.Vector4i -&gt; ModelIO.MDLAxisAlignedBoundingBox&#xA;override this.GetVoxelBoundingBox : OpenTK.Vector4i -&gt; ModelIO.MDLAxisAlignedBoundingBox" Usage="mDLVoxelArray.GetVoxelBoundingBox index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("voxelBoundingBoxAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLAxisAlignedBoundingBox</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="OpenTK.Vector4i" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVoxelIndices">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData GetVoxelIndices ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData GetVoxelIndices() cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.GetVoxelIndices" />
      <MemberSignature Language="F#" Value="abstract member GetVoxelIndices : unit -&gt; Foundation.NSData&#xA;override this.GetVoxelIndices : unit -&gt; Foundation.NSData" Usage="mDLVoxelArray.GetVoxelIndices " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("voxelIndices")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Returns a list of all the voxel indices as an array of 4-component integer arrays.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVoxels">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData GetVoxels (ModelIO.MDLVoxelIndexExtent withinExtent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Foundation.NSData GetVoxels(valuetype ModelIO.MDLVoxelIndexExtent withinExtent) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.GetVoxels(ModelIO.MDLVoxelIndexExtent)" />
      <MemberSignature Language="F#" Value="abstract member GetVoxels : ModelIO.MDLVoxelIndexExtent -&gt; Foundation.NSData&#xA;override this.GetVoxels : ModelIO.MDLVoxelIndexExtent -&gt; Foundation.NSData" Usage="mDLVoxelArray.GetVoxels withinExtent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("voxelsWithinExtent:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("Use 'GetVoxels (MDLVoxelIndexExtent2)' instead.", false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withinExtent" Type="ModelIO.MDLVoxelIndexExtent" />
      </Parameters>
      <Docs>
        <param name="withinExtent">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetVoxels">
      <MemberSignature Language="C#" Value="public Foundation.NSData GetVoxels (ModelIO.MDLVoxelIndexExtent2 withinExtent);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class Foundation.NSData GetVoxels(valuetype ModelIO.MDLVoxelIndexExtent2 withinExtent) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.GetVoxels(ModelIO.MDLVoxelIndexExtent2)" />
      <MemberSignature Language="F#" Value="member this.GetVoxels : ModelIO.MDLVoxelIndexExtent2 -&gt; Foundation.NSData" Usage="mDLVoxelArray.GetVoxels withinExtent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="withinExtent" Type="ModelIO.MDLVoxelIndexExtent2" />
      </Parameters>
      <Docs>
        <param name="withinExtent">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IntersectWith">
      <MemberSignature Language="C#" Value="public virtual void IntersectWith (ModelIO.MDLVoxelArray voxels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void IntersectWith(class ModelIO.MDLVoxelArray voxels) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.IntersectWith(ModelIO.MDLVoxelArray)" />
      <MemberSignature Language="F#" Value="abstract member IntersectWith : ModelIO.MDLVoxelArray -&gt; unit&#xA;override this.IntersectWith : ModelIO.MDLVoxelArray -&gt; unit" Usage="mDLVoxelArray.IntersectWith voxels" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("intersectWithVoxels:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voxels" Type="ModelIO.MDLVoxelArray" />
      </Parameters>
      <Docs>
        <param name="voxels">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValidSignedShellField">
      <MemberSignature Language="C#" Value="public virtual bool IsValidSignedShellField { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValidSignedShellField" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLVoxelArray.IsValidSignedShellField" />
      <MemberSignature Language="F#" Value="member this.IsValidSignedShellField : bool" Usage="ModelIO.MDLVoxelArray.IsValidSignedShellField" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("isValidSignedShellField")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVoxel">
      <MemberSignature Language="C#" Value="public virtual void SetVoxel (OpenTK.Vector4i index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVoxel(valuetype OpenTK.Vector4i index) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.SetVoxel(OpenTK.Vector4i)" />
      <MemberSignature Language="F#" Value="abstract member SetVoxel : OpenTK.Vector4i -&gt; unit&#xA;override this.SetVoxel : OpenTK.Vector4i -&gt; unit" Usage="mDLVoxelArray.SetVoxel index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setVoxelAtIndex:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="OpenTK.Vector4i" />
      </Parameters>
      <Docs>
        <param name="index">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVoxels">
      <MemberSignature Language="C#" Value="public virtual void SetVoxels (ModelIO.MDLMesh mesh, int divisions, float patchRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVoxels(class ModelIO.MDLMesh mesh, int32 divisions, float32 patchRadius) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.SetVoxels(ModelIO.MDLMesh,System.Int32,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetVoxels : ModelIO.MDLMesh * int * single -&gt; unit&#xA;override this.SetVoxels : ModelIO.MDLMesh * int * single -&gt; unit" Usage="mDLVoxelArray.SetVoxels (mesh, divisions, patchRadius)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setVoxelsForMesh:divisions:patchRadius:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mesh" Type="ModelIO.MDLMesh" />
        <Parameter Name="divisions" Type="System.Int32" />
        <Parameter Name="patchRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="mesh">To be added.</param>
        <param name="divisions">To be added.</param>
        <param name="patchRadius">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVoxels">
      <MemberSignature Language="C#" Value="public virtual void SetVoxels (ModelIO.MDLMesh mesh, int divisions, int interiorShells, int exteriorShells, float patchRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVoxels(class ModelIO.MDLMesh mesh, int32 divisions, int32 interiorShells, int32 exteriorShells, float32 patchRadius) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.SetVoxels(ModelIO.MDLMesh,System.Int32,System.Int32,System.Int32,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetVoxels : ModelIO.MDLMesh * int * int * int * single -&gt; unit&#xA;override this.SetVoxels : ModelIO.MDLMesh * int * int * int * single -&gt; unit" Usage="mDLVoxelArray.SetVoxels (mesh, divisions, interiorShells, exteriorShells, patchRadius)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setVoxelsForMesh:divisions:interiorShells:exteriorShells:patchRadius:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, "Use 'SetVoxels (MDLMesh, int, float)' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Obsoleted(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'SetVoxels (MDLMesh, int, float)' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mesh" Type="ModelIO.MDLMesh" />
        <Parameter Name="divisions" Type="System.Int32" />
        <Parameter Name="interiorShells" Type="System.Int32" />
        <Parameter Name="exteriorShells" Type="System.Int32" />
        <Parameter Name="patchRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="mesh">To be added.</param>
        <param name="divisions">To be added.</param>
        <param name="interiorShells">To be added.</param>
        <param name="exteriorShells">To be added.</param>
        <param name="patchRadius">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetVoxels">
      <MemberSignature Language="C#" Value="public virtual void SetVoxels (ModelIO.MDLMesh mesh, int divisions, float interiorNBWidth, float exteriorNBWidth, float patchRadius);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetVoxels(class ModelIO.MDLMesh mesh, int32 divisions, float32 interiorNBWidth, float32 exteriorNBWidth, float32 patchRadius) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.SetVoxels(ModelIO.MDLMesh,System.Int32,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="F#" Value="abstract member SetVoxels : ModelIO.MDLMesh * int * single * single * single -&gt; unit&#xA;override this.SetVoxels : ModelIO.MDLMesh * int * single * single * single -&gt; unit" Usage="mDLVoxelArray.SetVoxels (mesh, divisions, interiorNBWidth, exteriorNBWidth, patchRadius)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("setVoxelsForMesh:divisions:interiorNBWidth:exteriorNBWidth:patchRadius:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Deprecated(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.None, "Use 'SetVoxels (MDLMesh, int, float)' instead.")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Obsoleted(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, "Use 'SetVoxels (MDLMesh, int, float)' instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mesh" Type="ModelIO.MDLMesh" />
        <Parameter Name="divisions" Type="System.Int32" />
        <Parameter Name="interiorNBWidth" Type="System.Single" />
        <Parameter Name="exteriorNBWidth" Type="System.Single" />
        <Parameter Name="patchRadius" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="mesh">To be added.</param>
        <param name="divisions">To be added.</param>
        <param name="interiorNBWidth">To be added.</param>
        <param name="exteriorNBWidth">To be added.</param>
        <param name="patchRadius">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShellFieldExteriorThickness">
      <MemberSignature Language="C#" Value="public virtual float ShellFieldExteriorThickness { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ShellFieldExteriorThickness" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLVoxelArray.ShellFieldExteriorThickness" />
      <MemberSignature Language="F#" Value="member this.ShellFieldExteriorThickness : single with get, set" Usage="ModelIO.MDLVoxelArray.ShellFieldExteriorThickness" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("shellFieldExteriorThickness")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setShellFieldExteriorThickness:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShellFieldInteriorThickness">
      <MemberSignature Language="C#" Value="public virtual float ShellFieldInteriorThickness { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 ShellFieldInteriorThickness" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLVoxelArray.ShellFieldInteriorThickness" />
      <MemberSignature Language="F#" Value="member this.ShellFieldInteriorThickness : single with get, set" Usage="ModelIO.MDLVoxelArray.ShellFieldInteriorThickness" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("shellFieldInteriorThickness")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: Foundation.Export("setShellFieldInteriorThickness:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 12, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>set: ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UnionWith">
      <MemberSignature Language="C#" Value="public virtual void UnionWith (ModelIO.MDLVoxelArray voxels);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void UnionWith(class ModelIO.MDLVoxelArray voxels) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.UnionWith(ModelIO.MDLVoxelArray)" />
      <MemberSignature Language="F#" Value="abstract member UnionWith : ModelIO.MDLVoxelArray -&gt; unit&#xA;override this.UnionWith : ModelIO.MDLVoxelArray -&gt; unit" Usage="mDLVoxelArray.UnionWith voxels" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("unionWithVoxels:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="voxels" Type="ModelIO.MDLVoxelArray" />
      </Parameters>
      <Docs>
        <param name="voxels">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoxelExists">
      <MemberSignature Language="C#" Value="public virtual bool VoxelExists (OpenTK.Vector4i atIndex, bool allowAnyX, bool allowAnyY, bool allowAnyZ, bool allowAnyShell);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool VoxelExists(valuetype OpenTK.Vector4i atIndex, bool allowAnyX, bool allowAnyY, bool allowAnyZ, bool allowAnyShell) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLVoxelArray.VoxelExists(OpenTK.Vector4i,System.Boolean,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="F#" Value="abstract member VoxelExists : OpenTK.Vector4i * bool * bool * bool * bool -&gt; bool&#xA;override this.VoxelExists : OpenTK.Vector4i * bool * bool * bool * bool -&gt; bool" Usage="mDLVoxelArray.VoxelExists (atIndex, allowAnyX, allowAnyY, allowAnyZ, allowAnyShell)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("voxelExistsAtIndex:allowAnyX:allowAnyY:allowAnyZ:allowAnyShell:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="atIndex" Type="OpenTK.Vector4i" />
        <Parameter Name="allowAnyX" Type="System.Boolean" />
        <Parameter Name="allowAnyY" Type="System.Boolean" />
        <Parameter Name="allowAnyZ" Type="System.Boolean" />
        <Parameter Name="allowAnyShell" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="atIndex">To be added.</param>
        <param name="allowAnyX">To be added.</param>
        <param name="allowAnyY">To be added.</param>
        <param name="allowAnyZ">To be added.</param>
        <param name="allowAnyShell">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoxelIndexExtent">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLVoxelIndexExtent VoxelIndexExtent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ModelIO.MDLVoxelIndexExtent VoxelIndexExtent" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLVoxelArray.VoxelIndexExtent" />
      <MemberSignature Language="F#" Value="member this.VoxelIndexExtent : ModelIO.MDLVoxelIndexExtent" Usage="ModelIO.MDLVoxelArray.VoxelIndexExtent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.Obsolete("Use 'VoxelIndexExtent2' instead.", false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("voxelIndexExtent")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVoxelIndexExtent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the allowable ranges for the four components of a voxel index.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="VoxelIndexExtent2">
      <MemberSignature Language="C#" Value="public ModelIO.MDLVoxelIndexExtent2 VoxelIndexExtent2 { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype ModelIO.MDLVoxelIndexExtent2 VoxelIndexExtent2" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLVoxelArray.VoxelIndexExtent2" />
      <MemberSignature Language="F#" Value="member this.VoxelIndexExtent2 : ModelIO.MDLVoxelIndexExtent2" Usage="ModelIO.MDLVoxelArray.VoxelIndexExtent2" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLVoxelIndexExtent2</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
