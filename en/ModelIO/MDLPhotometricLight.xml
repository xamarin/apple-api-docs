<Type Name="MDLPhotometricLight" FullName="ModelIO.MDLPhotometricLight">
  <TypeSignature Language="C#" Value="public class MDLPhotometricLight : ModelIO.MDLPhysicallyPlausibleLight" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MDLPhotometricLight extends ModelIO.MDLPhysicallyPlausibleLight" />
  <TypeSignature Language="DocId" Value="T:ModelIO.MDLPhotometricLight" />
  <TypeSignature Language="F#" Value="type MDLPhotometricLight = class&#xA;    inherit MDLPhysicallyPlausibleLight" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>ModelIO.MDLPhysicallyPlausibleLight</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>Foundation.Register("MDLPhotometricLight", true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 9, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 11, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Represents a light that is derived from photometric data.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/library/ios/documentation/ModelIO/Reference/MDLPhotometricLight_Class/index.html">Apple documentation for <c>MDLPhotometricLight</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLPhotometricLight ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLPhotometricLight.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor, initializes a new instance of this class.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MDLPhotometricLight (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLPhotometricLight.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLPhotometricLight : Foundation.NSObjectFlag -&gt; ModelIO.MDLPhotometricLight" Usage="new ModelIO.MDLPhotometricLight t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MDLPhotometricLight (Foundation.NSUrl url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class Foundation.NSUrl url) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLPhotometricLight.#ctor(Foundation.NSUrl)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLPhotometricLight : Foundation.NSUrl -&gt; ModelIO.MDLPhotometricLight" Usage="new ModelIO.MDLPhotometricLight url" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("initWithIESProfile:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="url" Type="Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="url">To be added.</param>
        <summary>Creates a new MDLPhotometricLight from IES data that is contained at the specified URL.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal MDLPhotometricLight (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLPhotometricLight.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new ModelIO.MDLPhotometricLight : nativeint -&gt; ModelIO.MDLPhotometricLight" Usage="new ModelIO.MDLPhotometricLight handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLPhotometricLight.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="ModelIO.MDLPhotometricLight.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateCubemap">
      <MemberSignature Language="C#" Value="public virtual void GenerateCubemap (nuint textureSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateCubemap(valuetype System.nuint textureSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLPhotometricLight.GenerateCubemap(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GenerateCubemap : nuint -&gt; unit&#xA;override this.GenerateCubemap : nuint -&gt; unit" Usage="mDLPhotometricLight.GenerateCubemap textureSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("generateCubemapFromLight:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureSize" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="textureSize">To be added.</param>
        <summary>Fills the <see cref="P:ModelIO.MDLPhotometricLight.LightCubeMap" /> property with cube map data that has sides of length <paramref name="textureSize" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateSphericalHarmonics">
      <MemberSignature Language="C#" Value="public virtual void GenerateSphericalHarmonics (nuint sphericalHarmonicsLevel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GenerateSphericalHarmonics(valuetype System.nuint sphericalHarmonicsLevel) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLPhotometricLight.GenerateSphericalHarmonics(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GenerateSphericalHarmonics : nuint -&gt; unit&#xA;override this.GenerateSphericalHarmonics : nuint -&gt; unit" Usage="mDLPhotometricLight.GenerateSphericalHarmonics sphericalHarmonicsLevel" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("generateSphericalHarmonicsFromLight:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sphericalHarmonicsLevel" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="sphericalHarmonicsLevel">To be added.</param>
        <summary>Fills the <see cref="P:ModelIO.MDLPhotometricLight.SphericalHarmonicsCoefficients" /> property to the depth that is specified by <paramref name="sphericalHarmonicsLevel" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GenerateTexture">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLTexture GenerateTexture (nuint textureSize);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class ModelIO.MDLTexture GenerateTexture(valuetype System.nuint textureSize) cil managed" />
      <MemberSignature Language="DocId" Value="M:ModelIO.MDLPhotometricLight.GenerateTexture(System.nuint)" />
      <MemberSignature Language="F#" Value="abstract member GenerateTexture : nuint -&gt; ModelIO.MDLTexture&#xA;override this.GenerateTexture : nuint -&gt; ModelIO.MDLTexture" Usage="mDLPhotometricLight.GenerateTexture textureSize" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>Foundation.Export("generateTexture:")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.TvOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.MacOSX, 10, 13, ObjCRuntime.PlatformArchitecture.Arch64, null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 11, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLTexture</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="textureSize" Type="System.nuint" />
      </Parameters>
      <Docs>
        <param name="textureSize">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LightCubeMap">
      <MemberSignature Language="C#" Value="public virtual ModelIO.MDLTexture LightCubeMap { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class ModelIO.MDLTexture LightCubeMap" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLPhotometricLight.LightCubeMap" />
      <MemberSignature Language="F#" Value="member this.LightCubeMap : ModelIO.MDLTexture" Usage="ModelIO.MDLPhotometricLight.LightCubeMap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("lightCubeMap")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("lightCubeMap", ObjCRuntime.ArgumentSemantic.Strong)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>ModelIO.MDLTexture</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the light cube map that describes the directional intensity of the light.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>Gets a cube map that represents the light's intensity in all directions, if present.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SphericalHarmonicsCoefficients">
      <MemberSignature Language="C#" Value="public virtual Foundation.NSData SphericalHarmonicsCoefficients { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Foundation.NSData SphericalHarmonicsCoefficients" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLPhotometricLight.SphericalHarmonicsCoefficients" />
      <MemberSignature Language="F#" Value="member this.SphericalHarmonicsCoefficients : Foundation.NSData" Usage="ModelIO.MDLPhotometricLight.SphericalHarmonicsCoefficients" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="">
          <AttributeName>get: Foundation.Export("sphericalHarmonicsCoefficients")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("sphericalHarmonicsCoefficients", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>Foundation.NSData</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets the spherical harmonics that control the light's directional intensity, if present.</summary>
        <value>
          <para>(More documentation for this node is coming)</para>
          <para tool="nullallowed">This value can be <see langword="null" />.</para>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SphericalHarmonicsLevel">
      <MemberSignature Language="C#" Value="public virtual nuint SphericalHarmonicsLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.nuint SphericalHarmonicsLevel" />
      <MemberSignature Language="DocId" Value="P:ModelIO.MDLPhotometricLight.SphericalHarmonicsLevel" />
      <MemberSignature Language="F#" Value="member this.SphericalHarmonicsLevel : nuint" Usage="ModelIO.MDLPhotometricLight.SphericalHarmonicsLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="xamarin-ios-sdk-12">
          <AttributeName>get: Foundation.Export("sphericalHarmonicsLevel")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.nuint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets a value from <c>0</c> to <c>3</c> that represents the number of harmonics that are represented by  <see cref="P:ModelIO.MDLPhotometricLight.SphericalHarmonicsCoefficients" />.</summary>
        <value>To be added.</value>
        <remarks>There are 3 values in each coefficient. <see cref="P:ModelIO.MDLPhotometricLight.SphericalHarmonicsLevel" /> represent the highest index level in <see cref="P:ModelIO.MDLPhotometricLight.SphericalHarmonicsCoefficients" />. There are 2^(<see cref="P:ModelIO.MDLPhotometricLight.SphericalHarmonicsLevel" /> + 1) sets of 3-valued coefficients in the array.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
