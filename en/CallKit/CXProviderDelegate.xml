<Type Name="CXProviderDelegate" FullName="CallKit.CXProviderDelegate">
  <TypeSignature Language="C#" Value="public abstract class CXProviderDelegate : Foundation.NSObject, CallKit.ICXProviderDelegate, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit CXProviderDelegate extends Foundation.NSObject implements class CallKit.ICXProviderDelegate, class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:CallKit.CXProviderDelegate" />
  <TypeSignature Language="F#" Value="type CXProviderDelegate = class&#xA;    inherit NSObject&#xA;    interface ICXProviderDelegate&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>CallKit.ICXProviderDelegate</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Model</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Protocol</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.Register("CXProviderDelegate", false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>To be added.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/reference/CallKit/CXProviderDelegate">Apple documentation for <c>CXProviderDelegate</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CXProviderDelegate ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.#ctor" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Delegate object for receiving system messages and performing call actions.</summary>
        <remarks />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CXProviderDelegate (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CallKit.CXProviderDelegate : Foundation.NSObjectFlag -&gt; CallKit.CXProviderDelegate" Usage="new CallKit.CXProviderDelegate t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CXProviderDelegate (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CallKit.CXProviderDelegate : nativeint -&gt; CallKit.CXProviderDelegate" Usage="new CallKit.CXProviderDelegate handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DidActivateAudioSession">
      <MemberSignature Language="C#" Value="public virtual void DidActivateAudioSession (CallKit.CXProvider provider, AVFoundation.AVAudioSession audioSession);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidActivateAudioSession(class CallKit.CXProvider provider, class AVFoundation.AVAudioSession audioSession) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.DidActivateAudioSession(CallKit.CXProvider,AVFoundation.AVAudioSession)" />
      <MemberSignature Language="F#" Value="abstract member DidActivateAudioSession : CallKit.CXProvider * AVFoundation.AVAudioSession -&gt; unit&#xA;override this.DidActivateAudioSession : CallKit.CXProvider * AVFoundation.AVAudioSession -&gt; unit" Usage="cXProviderDelegate.DidActivateAudioSession (provider, audioSession)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:didActivateAudioSession:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="audioSession" Type="AVFoundation.AVAudioSession" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the <paramref name="This" /> provider delegate belongs.</param>
        <param name="audioSession">To be added.</param>
        <summary>The system activated a telephony-priority audio session for the call.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidBegin">
      <MemberSignature Language="C#" Value="public virtual void DidBegin (CallKit.CXProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidBegin(class CallKit.CXProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.DidBegin(CallKit.CXProvider)" />
      <MemberSignature Language="F#" Value="abstract member DidBegin : CallKit.CXProvider -&gt; unit&#xA;override this.DidBegin : CallKit.CXProvider -&gt; unit" Usage="cXProviderDelegate.DidBegin provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("providerDidBegin:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <summary>The system began a call for the app.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidDeactivateAudioSession">
      <MemberSignature Language="C#" Value="public virtual void DidDeactivateAudioSession (CallKit.CXProvider provider, AVFoundation.AVAudioSession audioSession);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidDeactivateAudioSession(class CallKit.CXProvider provider, class AVFoundation.AVAudioSession audioSession) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.DidDeactivateAudioSession(CallKit.CXProvider,AVFoundation.AVAudioSession)" />
      <MemberSignature Language="F#" Value="abstract member DidDeactivateAudioSession : CallKit.CXProvider * AVFoundation.AVAudioSession -&gt; unit&#xA;override this.DidDeactivateAudioSession : CallKit.CXProvider * AVFoundation.AVAudioSession -&gt; unit" Usage="cXProviderDelegate.DidDeactivateAudioSession (provider, audioSession)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:didDeactivateAudioSession:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="audioSession" Type="AVFoundation.AVAudioSession" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <param name="audioSession">The audio session that was deactivated.</param>
        <summary>The system deactivated an audio session that the app had been using for a call.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DidReset">
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidReset(class CallKit.CXProvider provider) cil managed" />
      <MemberSignature Language="C#" Value="public abstract void DidReset (CallKit.CXProvider provider);" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.DidReset(CallKit.CXProvider)" />
      <MemberSignature Language="F#" Value="abstract member DidReset : CallKit.CXProvider -&gt; unit" Usage="cXProviderDelegate.DidReset provider" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:CallKit.ICXProviderDelegate.DidReset(CallKit.CXProvider)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("providerDidReset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <summary>The provider reset.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExecuteTransaction">
      <MemberSignature Language="C#" Value="public virtual bool ExecuteTransaction (CallKit.CXProvider provider, CallKit.CXTransaction transaction);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ExecuteTransaction(class CallKit.CXProvider provider, class CallKit.CXTransaction transaction) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.ExecuteTransaction(CallKit.CXProvider,CallKit.CXTransaction)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteTransaction : CallKit.CXProvider * CallKit.CXTransaction -&gt; bool&#xA;override this.ExecuteTransaction : CallKit.CXProvider * CallKit.CXTransaction -&gt; bool" Usage="cXProviderDelegate.ExecuteTransaction (provider, transaction)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:executeTransaction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="transaction" Type="CallKit.CXTransaction" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <param name="transaction">The transaction to run.</param>
        <summary>Atomically runs the actions that are contained in the <paramref name="transaction" />.</summary>
        <returns>
          <see langword="true" /> if the transaction succeeded. Otherwise, <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformAnswerCallAction">
      <MemberSignature Language="C#" Value="public virtual void PerformAnswerCallAction (CallKit.CXProvider provider, CallKit.CXAnswerCallAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformAnswerCallAction(class CallKit.CXProvider provider, class CallKit.CXAnswerCallAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.PerformAnswerCallAction(CallKit.CXProvider,CallKit.CXAnswerCallAction)" />
      <MemberSignature Language="F#" Value="abstract member PerformAnswerCallAction : CallKit.CXProvider * CallKit.CXAnswerCallAction -&gt; unit&#xA;override this.PerformAnswerCallAction : CallKit.CXProvider * CallKit.CXAnswerCallAction -&gt; unit" Usage="cXProviderDelegate.PerformAnswerCallAction (provider, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:performAnswerCallAction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="action" Type="CallKit.CXAnswerCallAction" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <param name="action">The answer call action to perform.</param>
        <summary>Performs an answer call action.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformEndCallAction">
      <MemberSignature Language="C#" Value="public virtual void PerformEndCallAction (CallKit.CXProvider provider, CallKit.CXEndCallAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformEndCallAction(class CallKit.CXProvider provider, class CallKit.CXEndCallAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.PerformEndCallAction(CallKit.CXProvider,CallKit.CXEndCallAction)" />
      <MemberSignature Language="F#" Value="abstract member PerformEndCallAction : CallKit.CXProvider * CallKit.CXEndCallAction -&gt; unit&#xA;override this.PerformEndCallAction : CallKit.CXProvider * CallKit.CXEndCallAction -&gt; unit" Usage="cXProviderDelegate.PerformEndCallAction (provider, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:performEndCallAction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="action" Type="CallKit.CXEndCallAction" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <param name="action">The end call action to perform.</param>
        <summary>Performs an end call action.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformPlayDtmfCallAction">
      <MemberSignature Language="C#" Value="public virtual void PerformPlayDtmfCallAction (CallKit.CXProvider provider, CallKit.CXPlayDtmfCallAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformPlayDtmfCallAction(class CallKit.CXProvider provider, class CallKit.CXPlayDtmfCallAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.PerformPlayDtmfCallAction(CallKit.CXProvider,CallKit.CXPlayDtmfCallAction)" />
      <MemberSignature Language="F#" Value="abstract member PerformPlayDtmfCallAction : CallKit.CXProvider * CallKit.CXPlayDtmfCallAction -&gt; unit&#xA;override this.PerformPlayDtmfCallAction : CallKit.CXProvider * CallKit.CXPlayDtmfCallAction -&gt; unit" Usage="cXProviderDelegate.PerformPlayDtmfCallAction (provider, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:performPlayDTMFCallAction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="action" Type="CallKit.CXPlayDtmfCallAction" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <param name="action">The DTMF play call action to perform.</param>
        <summary>Performs a DTMF play call action.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSetGroupCallAction">
      <MemberSignature Language="C#" Value="public virtual void PerformSetGroupCallAction (CallKit.CXProvider provider, CallKit.CXSetGroupCallAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSetGroupCallAction(class CallKit.CXProvider provider, class CallKit.CXSetGroupCallAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.PerformSetGroupCallAction(CallKit.CXProvider,CallKit.CXSetGroupCallAction)" />
      <MemberSignature Language="F#" Value="abstract member PerformSetGroupCallAction : CallKit.CXProvider * CallKit.CXSetGroupCallAction -&gt; unit&#xA;override this.PerformSetGroupCallAction : CallKit.CXProvider * CallKit.CXSetGroupCallAction -&gt; unit" Usage="cXProviderDelegate.PerformSetGroupCallAction (provider, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:performSetGroupCallAction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="action" Type="CallKit.CXSetGroupCallAction" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <param name="action">The set group call action to perform.</param>
        <summary>Performs a set group call action.</summary>
        <remarks>This method can also be used to unset a group call.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSetHeldCallAction">
      <MemberSignature Language="C#" Value="public virtual void PerformSetHeldCallAction (CallKit.CXProvider provider, CallKit.CXSetHeldCallAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSetHeldCallAction(class CallKit.CXProvider provider, class CallKit.CXSetHeldCallAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.PerformSetHeldCallAction(CallKit.CXProvider,CallKit.CXSetHeldCallAction)" />
      <MemberSignature Language="F#" Value="abstract member PerformSetHeldCallAction : CallKit.CXProvider * CallKit.CXSetHeldCallAction -&gt; unit&#xA;override this.PerformSetHeldCallAction : CallKit.CXProvider * CallKit.CXSetHeldCallAction -&gt; unit" Usage="cXProviderDelegate.PerformSetHeldCallAction (provider, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:performSetHeldCallAction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="action" Type="CallKit.CXSetHeldCallAction" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <param name="action">The hold call action to perform.</param>
        <summary>Performs a hold call action.</summary>
        <remarks>This method can also be used to resume, or unhold, a call.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSetMutedCallAction">
      <MemberSignature Language="C#" Value="public virtual void PerformSetMutedCallAction (CallKit.CXProvider provider, CallKit.CXSetMutedCallAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSetMutedCallAction(class CallKit.CXProvider provider, class CallKit.CXSetMutedCallAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.PerformSetMutedCallAction(CallKit.CXProvider,CallKit.CXSetMutedCallAction)" />
      <MemberSignature Language="F#" Value="abstract member PerformSetMutedCallAction : CallKit.CXProvider * CallKit.CXSetMutedCallAction -&gt; unit&#xA;override this.PerformSetMutedCallAction : CallKit.CXProvider * CallKit.CXSetMutedCallAction -&gt; unit" Usage="cXProviderDelegate.PerformSetMutedCallAction (provider, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:performSetMutedCallAction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="action" Type="CallKit.CXSetMutedCallAction" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <param name="action">The set muted call action to perform.</param>
        <summary>Performs a set muted call action.</summary>
        <remarks>This method can also be used to unmute a call.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformStartCallAction">
      <MemberSignature Language="C#" Value="public virtual void PerformStartCallAction (CallKit.CXProvider provider, CallKit.CXStartCallAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformStartCallAction(class CallKit.CXProvider provider, class CallKit.CXStartCallAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.PerformStartCallAction(CallKit.CXProvider,CallKit.CXStartCallAction)" />
      <MemberSignature Language="F#" Value="abstract member PerformStartCallAction : CallKit.CXProvider * CallKit.CXStartCallAction -&gt; unit&#xA;override this.PerformStartCallAction : CallKit.CXProvider * CallKit.CXStartCallAction -&gt; unit" Usage="cXProviderDelegate.PerformStartCallAction (provider, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:performStartCallAction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="action" Type="CallKit.CXStartCallAction" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <param name="action">The start call action to perform.</param>
        <summary>Performs a start call action.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TimedOutPerformingAction">
      <MemberSignature Language="C#" Value="public virtual void TimedOutPerformingAction (CallKit.CXProvider provider, CallKit.CXAction action);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void TimedOutPerformingAction(class CallKit.CXProvider provider, class CallKit.CXAction action) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProviderDelegate.TimedOutPerformingAction(CallKit.CXProvider,CallKit.CXAction)" />
      <MemberSignature Language="F#" Value="abstract member TimedOutPerformingAction : CallKit.CXProvider * CallKit.CXAction -&gt; unit&#xA;override this.TimedOutPerformingAction : CallKit.CXProvider * CallKit.CXAction -&gt; unit" Usage="cXProviderDelegate.TimedOutPerformingAction (provider, action)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("provider:timedOutPerformingAction:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
        <Parameter Name="action" Type="CallKit.CXAction" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <param name="action">The action that timed out.</param>
        <summary>Method that is called when a timeout is hit before an action is finished performing.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
