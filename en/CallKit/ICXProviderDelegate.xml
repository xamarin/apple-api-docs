<Type Name="ICXProviderDelegate" FullName="CallKit.ICXProviderDelegate">
  <TypeSignature Language="C#" Value="public interface ICXProviderDelegate : IDisposable, ObjCRuntime.INativeObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICXProviderDelegate implements class ObjCRuntime.INativeObject, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:CallKit.ICXProviderDelegate" />
  <TypeSignature Language="F#" Value="type ICXProviderDelegate = interface&#xA;    interface INativeObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces>
    <Interface>
      <InterfaceName>ObjCRuntime.INativeObject</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Protocol(Name="CXProviderDelegate", WrapperType=typeof(CallKit.CXProviderDelegateWrapper))</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=true, IsStatic=false, Name="DidReset", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider) }, Selector="providerDidReset:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidBegin", ParameterByRef=new System.Boolean[] { false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider) }, Selector="providerDidBegin:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="ExecuteTransaction", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(CallKit.CXTransaction) }, ReturnType=typeof(System.Boolean), Selector="provider:executeTransaction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PerformStartCallAction", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(CallKit.CXStartCallAction) }, Selector="provider:performStartCallAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PerformAnswerCallAction", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(CallKit.CXAnswerCallAction) }, Selector="provider:performAnswerCallAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PerformEndCallAction", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(CallKit.CXEndCallAction) }, Selector="provider:performEndCallAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PerformSetHeldCallAction", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(CallKit.CXSetHeldCallAction) }, Selector="provider:performSetHeldCallAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PerformSetMutedCallAction", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(CallKit.CXSetMutedCallAction) }, Selector="provider:performSetMutedCallAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PerformSetGroupCallAction", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(CallKit.CXSetGroupCallAction) }, Selector="provider:performSetGroupCallAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="PerformPlayDtmfCallAction", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(CallKit.CXPlayDtmfCallAction) }, Selector="provider:performPlayDTMFCallAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="TimedOutPerformingAction", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(CallKit.CXAction) }, Selector="provider:timedOutPerformingAction:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidActivateAudioSession", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(AVFoundation.AVAudioSession) }, Selector="provider:didActivateAudioSession:")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>Foundation.ProtocolMember(IsProperty=false, IsRequired=false, IsStatic=false, Name="DidDeactivateAudioSession", ParameterByRef=new System.Boolean[] { false, false }, ParameterType=new System.Type[] { typeof(CallKit.CXProvider), typeof(AVFoundation.AVAudioSession) }, Selector="provider:didDeactivateAudioSession:")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Interface representing the required methods (if any) of the protocol <see cref="T:CallKit.CXProviderDelegate" />.</summary>
    <remarks>
      <para>This interface contains the required methods (if any) from the protocol defined by <see cref="T:CallKit.CXProviderDelegate" />.</para>
      <para>If developers create classes that implement this interface, the implementation methods will automatically be exported to Objective-C with the matching signature from the method defined in the <see cref="T:CallKit.CXProviderDelegate" /> protocol.</para>
      <para>Optional methods (if any) are provided by the <see cref="T:CallKit.CXProviderDelegate_Extensions" /> class as extension methods to the interface, allowing developers to invoke any optional methods on the protocol.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="DidReset">
      <MemberSignature Language="C#" Value="public void DidReset (CallKit.CXProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DidReset(class CallKit.CXProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.ICXProviderDelegate.DidReset(CallKit.CXProvider)" />
      <MemberSignature Language="F#" Value="abstract member DidReset : CallKit.CXProvider -&gt; unit" Usage="iCXProviderDelegate.DidReset provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("providerDidReset:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>Foundation.Preserve(Conditional=true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="CallKit.CXProvider" />
      </Parameters>
      <Docs>
        <param name="provider">The provider to which the provider delegate belongs.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
