<Type Name="CXProvider" FullName="CallKit.CXProvider">
  <TypeSignature Language="C#" Value="public class CXProvider : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CXProvider extends Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("CXProvider", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.None, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reports external (out-of-band) events, such as incoming calls, to the system, and receives internal (in-band) user action events from the system.</summary>
    <remarks>To be added.</remarks>
    <related type="PlatformDocAPI" href="https://developer.apple.com/reference/CallKit/CXProvider">Apple documentation for <c>CXProvider</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CXProvider (CallKit.CXProviderConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CallKit.CXProviderConfiguration configuration) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithConfiguration:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="configuration" Type="CallKit.CXProviderConfiguration" />
      </Parameters>
      <Docs>
        <param name="configuration">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CXProvider (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CXProvider (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public virtual CallKit.CXProviderConfiguration Configuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CallKit.CXProviderConfiguration Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("configuration", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setConfiguration:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CallKit.CXProviderConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an object that contains values that control miscellaneous call properties, such as the ringtone, whether the call supports video, the maximum number of callers, and so on.</summary>
        <value>The configuration object for the call.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPendingCallActions">
      <MemberSignature Language="C#" Value="public virtual CallKit.CXCallAction[] GetPendingCallActions (ObjCRuntime.Class callActionClass, Foundation.NSUuid callUuid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CallKit.CXCallAction[] GetPendingCallActions(class ObjCRuntime.Class callActionClass, class Foundation.NSUuid callUuid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pendingCallActionsOfClass:withCallUUID:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CallKit.CXCallAction[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callActionClass" Type="ObjCRuntime.Class" />
        <Parameter Name="callUuid" Type="Foundation.NSUuid" />
      </Parameters>
      <Docs>
        <param name="callActionClass">The class of call actions to return.</param>
        <param name="callUuid">The identifier of the call for which to return pending call actions.</param>
        <summary>Returns a list of the actions of class <paramref name="callActionClass" /> that have yet to be completed on the call that is identified by <paramref name="callUuid" />.</summary>
        <returns>A list of the actions of class <paramref name="callActionClass" /> that have yet to be completed on the call that is identified by <paramref name="callUuid" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPendingCallActions&lt;T&gt;">
      <MemberSignature Language="C#" Value="public CallKit.CXCallAction[] GetPendingCallActions&lt;T&gt; (Foundation.NSUuid callUuid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CallKit.CXCallAction[] GetPendingCallActions&lt;T&gt;(class Foundation.NSUuid callUuid) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CallKit.CXCallAction[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callUuid" Type="Foundation.NSUuid" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of call action to return.</typeparam>
        <param name="callUuid">The identifier of the call for which to return pending call actions.</param>
        <summary>Returns a list of the actions of class <paramref name="T" /> that have yet to be completed on the call that is identified by <paramref name="callUuid" />.</summary>
        <returns>A list of the actions of type <paramref name="T" /> that have yet to be completed on the call that is identified by <paramref name="callUuid" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public virtual void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidate")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the provider.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PendingTransactions">
      <MemberSignature Language="C#" Value="public virtual CallKit.CXTransaction[] PendingTransactions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CallKit.CXTransaction[] PendingTransactions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: Foundation.Export("pendingTransactions", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CallKit.CXTransaction[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array of all the pending transactions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportCall">
      <MemberSignature Language="C#" Value="public virtual void ReportCall (Foundation.NSUuid uuid, CallKit.CXCallUpdate update);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportCall(class Foundation.NSUuid uuid, class CallKit.CXCallUpdate update) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reportCallWithUUID:updated:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="update" Type="CallKit.CXCallUpdate" />
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="update">An object that contains the updated parameters for the call.</param>
        <summary>Reports a change in call parameters to the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportCall">
      <MemberSignature Language="C#" Value="public virtual void ReportCall (Foundation.NSUuid uuid, Foundation.NSDate dateEnded, CallKit.CXCallEndedReason endedReason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportCall(class Foundation.NSUuid uuid, class Foundation.NSDate dateEnded, valuetype CallKit.CXCallEndedReason endedReason) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reportCallWithUUID:endedAtDate:reason:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="dateEnded" Type="Foundation.NSDate" />
        <Parameter Name="endedReason" Type="CallKit.CXCallEndedReason" />
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="dateEnded">The date and time that the call ended.</param>
        <param name="endedReason">The reason that the call was ended.</param>
        <summary>Reports the end of a call to the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportConnectedOutgoingCall">
      <MemberSignature Language="C#" Value="public virtual void ReportConnectedOutgoingCall (Foundation.NSUuid uuid, Foundation.NSDate dateConnected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportConnectedOutgoingCall(class Foundation.NSUuid uuid, class Foundation.NSDate dateConnected) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reportOutgoingCallWithUUID:connectedAtDate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="dateConnected" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="dateConnected">The date and time that the call was connected.</param>
        <summary>Reports the start of a call to the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportConnectingOutgoingCall">
      <MemberSignature Language="C#" Value="public virtual void ReportConnectingOutgoingCall (Foundation.NSUuid uuid, Foundation.NSDate dateStartedConnecting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportConnectingOutgoingCall(class Foundation.NSUuid uuid, class Foundation.NSDate dateStartedConnecting) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reportOutgoingCallWithUUID:startedConnectingAtDate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="dateStartedConnecting" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="dateStartedConnecting">The date and time that the call started connnecting.</param>
        <summary>Reports a connecting outgoing call to the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportNewIncomingCall">
      <MemberSignature Language="C#" Value="public virtual void ReportNewIncomingCall (Foundation.NSUuid uuid, CallKit.CXCallUpdate update, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportNewIncomingCall(class Foundation.NSUuid uuid, class CallKit.CXCallUpdate update, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reportNewIncomingCallWithUUID:update:completion:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="update" Type="CallKit.CXCallUpdate" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V8))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="update">An object that contains the updated parameters for the call.</param>
        <param name="completion">An action to run when the after the call completes.</param>
        <summary>Reports a new incoming call to the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportNewIncomingCallAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ReportNewIncomingCallAsync (Foundation.NSUuid uuid, CallKit.CXCallUpdate update);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ReportNewIncomingCallAsync(class Foundation.NSUuid uuid, class CallKit.CXCallUpdate update) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="update" Type="CallKit.CXCallUpdate" />
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="update">An object that contains the updated parameters for the call.</param>
        <summary>Asynchronously reports a new incoming call to the system.</summary>
        <returns>A task that reports the new incoming call.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDelegate">
      <MemberSignature Language="C#" Value="public virtual void SetDelegate (CallKit.ICXProviderDelegate aDelegate, CoreFoundation.DispatchQueue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDelegate(class CallKit.ICXProviderDelegate aDelegate, class CoreFoundation.DispatchQueue queue) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setDelegate:queue:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aDelegate" Type="CallKit.ICXProviderDelegate" />
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
      </Parameters>
      <Docs>
        <param name="aDelegate">The delegate to use.</param>
        <param name="queue">The queue for the delegate.</param>
        <summary>Sets the delegate that will handle call events reported by the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
