<Type Name="CXProvider" FullName="CallKit.CXProvider">
  <TypeSignature Language="C#" Value="public class CXProvider : Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CXProvider extends Foundation.NSObject" />
  <TypeSignature Language="DocId" Value="T:CallKit.CXProvider" />
  <TypeSignature Language="F#" Value="type CXProvider = class&#xA;    inherit NSObject" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>Foundation.Register("CXProvider", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>ObjCRuntime.Introduced(ObjCRuntime.PlatformName.iOS, 10, 0, ObjCRuntime.PlatformArchitecture.All, null)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reports external (out-of-band) events, such as incoming calls, to the system, and receives internal (in-band) user action events from the system.</summary>
    <remarks>To be added.</remarks>
    <related type="externalDocumentation" href="https://developer.apple.com/reference/CallKit/CXProvider">Apple documentation for <c>CXProvider</c></related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CXProvider (CallKit.CXProviderConfiguration configuration);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class CallKit.CXProviderConfiguration configuration) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.#ctor(CallKit.CXProviderConfiguration)" />
      <MemberSignature Language="F#" Value="new CallKit.CXProvider : CallKit.CXProviderConfiguration -&gt; CallKit.CXProvider" Usage="new CallKit.CXProvider configuration" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("initWithConfiguration:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.DesignatedInitializer</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="configuration" Type="CallKit.CXProviderConfiguration" />
      </Parameters>
      <Docs>
        <param name="configuration">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CXProvider (Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class Foundation.NSObjectFlag t) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.#ctor(Foundation.NSObjectFlag)" />
      <MemberSignature Language="F#" Value="new CallKit.CXProvider : Foundation.NSObjectFlag -&gt; CallKit.CXProvider" Usage="new CallKit.CXProvider t" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When developers invoke the constructor that takes the NSObjectFlag.Empty they take advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to the developer.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is the developer's responsibility to completely initialize the object if they chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if the developer's constructor invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, developers should instead chain to the proper constructor in their class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#"><![CDATA[
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from Xamarin.iOS's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSend_CGRect (this.Handle, initWithFrame, frame);
	else
		Handle = ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_CGRect (this.SuperHandle, initWithFrame, frame);
}
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected internal CXProvider (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.#ctor(System.IntPtr)" />
      <MemberSignature Language="F#" Value="new CallKit.CXProvider : nativeint -&gt; CallKit.CXProvider" Usage="new CallKit.CXProvider handle" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:ObjCRuntime.Runtime.GetNSObject(System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    Developers should not invoke this method directly, instead they should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberSignature Language="DocId" Value="P:CallKit.CXProvider.ClassHandle" />
      <MemberSignature Language="F#" Value="member this.ClassHandle : nativeint" Usage="CallKit.CXProvider.ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each Xamarin.iOS class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Configuration">
      <MemberSignature Language="C#" Value="public virtual CallKit.CXProviderConfiguration Configuration { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CallKit.CXProviderConfiguration Configuration" />
      <MemberSignature Language="DocId" Value="P:CallKit.CXProvider.Configuration" />
      <MemberSignature Language="F#" Value="member this.Configuration : CallKit.CXProviderConfiguration with get, set" Usage="CallKit.CXProvider.Configuration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("configuration", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: Foundation.Export("setConfiguration:", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CallKit.CXProviderConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets or sets an object that contains values that control miscellaneous call properties, such as the ringtone, whether the call supports video, the maximum number of callers, and so on.</summary>
        <value>The configuration object for the call.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPendingCallActions">
      <MemberSignature Language="C#" Value="public virtual CallKit.CXCallAction[] GetPendingCallActions (ObjCRuntime.Class callActionClass, Foundation.NSUuid callUuid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class CallKit.CXCallAction[] GetPendingCallActions(class ObjCRuntime.Class callActionClass, class Foundation.NSUuid callUuid) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.GetPendingCallActions(ObjCRuntime.Class,Foundation.NSUuid)" />
      <MemberSignature Language="F#" Value="abstract member GetPendingCallActions : ObjCRuntime.Class * Foundation.NSUuid -&gt; CallKit.CXCallAction[]&#xA;override this.GetPendingCallActions : ObjCRuntime.Class * Foundation.NSUuid -&gt; CallKit.CXCallAction[]" Usage="cXProvider.GetPendingCallActions (callActionClass, callUuid)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("pendingCallActionsOfClass:withCallUUID:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CallKit.CXCallAction[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callActionClass" Type="ObjCRuntime.Class" />
        <Parameter Name="callUuid" Type="Foundation.NSUuid" />
      </Parameters>
      <Docs>
        <param name="callActionClass">The class of call actions to return.</param>
        <param name="callUuid">The identifier of the call for which to return pending call actions.</param>
        <summary>Returns a list of the actions of class <paramref name="callActionClass" /> that have yet to be completed on the call that is identified by <paramref name="callUuid" />.</summary>
        <returns>A list of the actions of class <paramref name="callActionClass" /> that have yet to be completed on the call that is identified by <paramref name="callUuid" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetPendingCallActions&lt;T&gt;">
      <MemberSignature Language="C#" Value="public CallKit.CXCallAction[] GetPendingCallActions&lt;T&gt; (Foundation.NSUuid callUuid);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class CallKit.CXCallAction[] GetPendingCallActions&lt;T&gt;(class Foundation.NSUuid callUuid) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.GetPendingCallActions``1(Foundation.NSUuid)" />
      <MemberSignature Language="F#" Value="member this.GetPendingCallActions : Foundation.NSUuid -&gt; CallKit.CXCallAction[]" Usage="cXProvider.GetPendingCallActions callUuid" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>CallKit.CXCallAction[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="callUuid" Type="Foundation.NSUuid" />
      </Parameters>
      <Docs>
        <typeparam name="T">The type of call action to return.</typeparam>
        <param name="callUuid">The identifier of the call for which to return pending call actions.</param>
        <summary>Returns a list of the actions of class <paramref name="T" /> that have yet to be completed on the call that is identified by <paramref name="callUuid" />.</summary>
        <returns>A list of the actions of type <paramref name="T" /> that have yet to be completed on the call that is identified by <paramref name="callUuid" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invalidate">
      <MemberSignature Language="C#" Value="public virtual void Invalidate ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invalidate() cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.Invalidate" />
      <MemberSignature Language="F#" Value="abstract member Invalidate : unit -&gt; unit&#xA;override this.Invalidate : unit -&gt; unit" Usage="cXProvider.Invalidate " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("invalidate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Invalidates the provider.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PendingTransactions">
      <MemberSignature Language="C#" Value="public virtual CallKit.CXTransaction[] PendingTransactions { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class CallKit.CXTransaction[] PendingTransactions" />
      <MemberSignature Language="DocId" Value="P:CallKit.CXProvider.PendingTransactions" />
      <MemberSignature Language="F#" Value="member this.PendingTransactions : CallKit.CXTransaction[]" Usage="CallKit.CXProvider.PendingTransactions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: Foundation.Export("pendingTransactions", ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>CallKit.CXTransaction[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Gets an array of all the pending transactions.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportCall">
      <MemberSignature Language="C#" Value="public virtual void ReportCall (Foundation.NSUuid uuid, CallKit.CXCallUpdate update);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportCall(class Foundation.NSUuid uuid, class CallKit.CXCallUpdate update) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.ReportCall(Foundation.NSUuid,CallKit.CXCallUpdate)" />
      <MemberSignature Language="F#" Value="abstract member ReportCall : Foundation.NSUuid * CallKit.CXCallUpdate -&gt; unit&#xA;override this.ReportCall : Foundation.NSUuid * CallKit.CXCallUpdate -&gt; unit" Usage="cXProvider.ReportCall (uuid, update)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reportCallWithUUID:updated:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="update" Type="CallKit.CXCallUpdate" />
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="update">An object that contains the updated parameters for the call.</param>
        <summary>Reports a change in call parameters to the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportCall">
      <MemberSignature Language="C#" Value="public virtual void ReportCall (Foundation.NSUuid uuid, Foundation.NSDate dateEnded, CallKit.CXCallEndedReason endedReason);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportCall(class Foundation.NSUuid uuid, class Foundation.NSDate dateEnded, valuetype CallKit.CXCallEndedReason endedReason) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.ReportCall(Foundation.NSUuid,Foundation.NSDate,CallKit.CXCallEndedReason)" />
      <MemberSignature Language="F#" Value="abstract member ReportCall : Foundation.NSUuid * Foundation.NSDate * CallKit.CXCallEndedReason -&gt; unit&#xA;override this.ReportCall : Foundation.NSUuid * Foundation.NSDate * CallKit.CXCallEndedReason -&gt; unit" Usage="cXProvider.ReportCall (uuid, dateEnded, endedReason)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reportCallWithUUID:endedAtDate:reason:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="dateEnded" Type="Foundation.NSDate" />
        <Parameter Name="endedReason" Type="CallKit.CXCallEndedReason" />
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="dateEnded">
          <para>The date and time that the call ended.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="endedReason">The reason that the call was ended.</param>
        <summary>Reports the end of a call to the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportConnectedOutgoingCall">
      <MemberSignature Language="C#" Value="public virtual void ReportConnectedOutgoingCall (Foundation.NSUuid uuid, Foundation.NSDate dateConnected);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportConnectedOutgoingCall(class Foundation.NSUuid uuid, class Foundation.NSDate dateConnected) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.ReportConnectedOutgoingCall(Foundation.NSUuid,Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member ReportConnectedOutgoingCall : Foundation.NSUuid * Foundation.NSDate -&gt; unit&#xA;override this.ReportConnectedOutgoingCall : Foundation.NSUuid * Foundation.NSDate -&gt; unit" Usage="cXProvider.ReportConnectedOutgoingCall (uuid, dateConnected)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reportOutgoingCallWithUUID:connectedAtDate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="dateConnected" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="dateConnected">
          <para>The date and time that the call was connected.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Reports the start of a call to the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportConnectingOutgoingCall">
      <MemberSignature Language="C#" Value="public virtual void ReportConnectingOutgoingCall (Foundation.NSUuid uuid, Foundation.NSDate dateStartedConnecting);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportConnectingOutgoingCall(class Foundation.NSUuid uuid, class Foundation.NSDate dateStartedConnecting) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.ReportConnectingOutgoingCall(Foundation.NSUuid,Foundation.NSDate)" />
      <MemberSignature Language="F#" Value="abstract member ReportConnectingOutgoingCall : Foundation.NSUuid * Foundation.NSDate -&gt; unit&#xA;override this.ReportConnectingOutgoingCall : Foundation.NSUuid * Foundation.NSDate -&gt; unit" Usage="cXProvider.ReportConnectingOutgoingCall (uuid, dateStartedConnecting)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reportOutgoingCallWithUUID:startedConnectingAtDate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="dateStartedConnecting" Type="Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="dateStartedConnecting">
          <para>The date and time that the call started connnecting.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Reports a connecting outgoing call to the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportNewIncomingCall">
      <MemberSignature Language="C#" Value="public virtual void ReportNewIncomingCall (Foundation.NSUuid uuid, CallKit.CXCallUpdate update, Action&lt;Foundation.NSError&gt; completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReportNewIncomingCall(class Foundation.NSUuid uuid, class CallKit.CXCallUpdate update, class System.Action`1&lt;class Foundation.NSError&gt; completion) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.ReportNewIncomingCall(Foundation.NSUuid,CallKit.CXCallUpdate,System.Action{Foundation.NSError})" />
      <MemberSignature Language="F#" Value="abstract member ReportNewIncomingCall : Foundation.NSUuid * CallKit.CXCallUpdate * Action&lt;Foundation.NSError&gt; -&gt; unit&#xA;override this.ReportNewIncomingCall : Foundation.NSUuid * CallKit.CXCallUpdate * Action&lt;Foundation.NSError&gt; -&gt; unit" Usage="cXProvider.ReportNewIncomingCall (uuid, update, completion)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("reportNewIncomingCallWithUUID:update:completion:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="update" Type="CallKit.CXCallUpdate" />
        <Parameter Name="completion" Type="System.Action&lt;Foundation.NSError&gt;">
          <Attributes>
            <Attribute>
              <AttributeName>ObjCRuntime.BlockProxy(typeof(ObjCRuntime.Trampolines/NIDActionArity1V9))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="update">An object that contains the updated parameters for the call.</param>
        <param name="completion">An action to run when the after the call completes.</param>
        <summary>Reports a new incoming call to the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReportNewIncomingCallAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task ReportNewIncomingCallAsync (Foundation.NSUuid uuid, CallKit.CXCallUpdate update);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task ReportNewIncomingCallAsync(class Foundation.NSUuid uuid, class CallKit.CXCallUpdate update) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.ReportNewIncomingCallAsync(Foundation.NSUuid,CallKit.CXCallUpdate)" />
      <MemberSignature Language="F#" Value="abstract member ReportNewIncomingCallAsync : Foundation.NSUuid * CallKit.CXCallUpdate -&gt; System.Threading.Tasks.Task&#xA;override this.ReportNewIncomingCallAsync : Foundation.NSUuid * CallKit.CXCallUpdate -&gt; System.Threading.Tasks.Task" Usage="cXProvider.ReportNewIncomingCallAsync (uuid, update)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="uuid" Type="Foundation.NSUuid" />
        <Parameter Name="update" Type="CallKit.CXCallUpdate" />
      </Parameters>
      <Docs>
        <param name="uuid">The identifier of the call.</param>
        <param name="update">An object that contains the updated parameters for the call.</param>
        <summary>Reports a new incoming call to the system.</summary>
        <returns>A task that represents the asynchronous ReportNewIncomingCall operation</returns>
        <remarks>
          <para copied="true">The ReportNewIncomingCallAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetDelegate">
      <MemberSignature Language="C#" Value="public virtual void SetDelegate (CallKit.ICXProviderDelegate aDelegate, CoreFoundation.DispatchQueue queue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetDelegate(class CallKit.ICXProviderDelegate aDelegate, class CoreFoundation.DispatchQueue queue) cil managed" />
      <MemberSignature Language="DocId" Value="M:CallKit.CXProvider.SetDelegate(CallKit.ICXProviderDelegate,CoreFoundation.DispatchQueue)" />
      <MemberSignature Language="F#" Value="abstract member SetDelegate : CallKit.ICXProviderDelegate * CoreFoundation.DispatchQueue -&gt; unit&#xA;override this.SetDelegate : CallKit.ICXProviderDelegate * CoreFoundation.DispatchQueue -&gt; unit" Usage="cXProvider.SetDelegate (aDelegate, queue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>Foundation.Export("setDelegate:queue:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>ObjCRuntime.BindingImpl(ObjCRuntime.BindingImplOptions.GeneratedCode | ObjCRuntime.BindingImplOptions.Optimizable)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="aDelegate" Type="CallKit.ICXProviderDelegate" />
        <Parameter Name="queue" Type="CoreFoundation.DispatchQueue" />
      </Parameters>
      <Docs>
        <param name="aDelegate">
          <para>The delegate to use.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <param name="queue">
          <para>The queue for the delegate.</para>
          <para tool="nullallowed">This parameter can be <see langword="null" />.</para>
        </param>
        <summary>Sets the delegate that will handle call events reported by the system.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
