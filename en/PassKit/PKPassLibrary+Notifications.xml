<Type Name="PKPassLibrary+Notifications" FullName="PassKit.PKPassLibrary+Notifications">
  <TypeSignature Language="C#" Value="public static class PKPassLibrary.Notifications" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi abstract sealed beforefieldinit PKPassLibrary/Notifications extends System.Object" />
  <TypeSignature Language="DocId" Value="T:PassKit.PKPassLibrary.Notifications" />
  <TypeSignature Language="F#" Value="type PKPassLibrary.Notifications = class" />
  <AssemblyInfo>
    <AssemblyName>Xamarin.iOS</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Notification posted by the <see cref="T:PassKit.PKPassLibrary" /> class.</summary>
    <remarks>
      <para>This is a static class which contains various helper methods that allow developers to observe events posted in the iOS notification hub (<see cref="T:Foundation.NSNotificationCenter" />).</para>
      <para>The methods defined in this class post events invoke the provided method or lambda with a <see cref="T:Foundation.NSNotificationEventArgs" /> parameter which contains strongly typed properties for the notification arguments.</para>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ObserveDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveDidChange (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveDidChange(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PassKit.PKPassLibrary.Notifications.ObserveDidChange(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveDidChange : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PassKit.PKPassLibrary.Notifications.ObserveDidChange handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PassKit.PKPassLibrary.DidChangeNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para>The following example shows how you can use this method in your code</para>
          <example>
            <code lang="C#"><![CDATA[
//
// Lambda style
//

// listening
notification = PKPassLibrary.Notifications.ObserveDidChange ((sender, args) =&gt; {
    /* Access strongly typed args */
    Console.WriteLine ("Notification: {0}", args.Notification);
});

// To stop listening:
notification.Dispose ();

//
//Method style
//
NSObject notification;
void Callback (object sender, Foundation.NSNotificationEventArgs args)
{
    // Access strongly typed args
    Console.WriteLine ("Notification: {0}", args.Notification);
}

void Setup ()
{
    notification = PKPassLibrary.Notifications.ObserveDidChange (Callback);
}

void Teardown ()
{
    notification.Dispose ();
}]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveDidChange (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveDidChange(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PassKit.PKPassLibrary.Notifications.ObserveDidChange(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveDidChange : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PassKit.PKPassLibrary.Notifications.ObserveDidChange (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PassKit.PKPassLibrary.DidChangeNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PassKit.PKPassLibrary.DidChangeNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PKPassLibrary.Notifications.ObserveDidChange ((notification) => {
	Console.WriteLine ("Observed DidChangeNotification!");
};

// Listen to all notifications posted for a single object
var token = PKPassLibrary.Notifications.ObserveDidChange (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed DidChangeNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveRemotePaymentPassesDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveRemotePaymentPassesDidChange (EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveRemotePaymentPassesDidChange(class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PassKit.PKPassLibrary.Notifications.ObserveRemotePaymentPassesDidChange(System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveRemotePaymentPassesDidChange : EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PassKit.PKPassLibrary.Notifications.ObserveRemotePaymentPassesDidChange handler" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
        <AssemblyName>Xamarin.iOS</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PassKit.PKPassLibrary.RemotePaymentPassesDidChangeNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PassKit.PKPassLibrary.RemotePaymentPassesDidChangeNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PKPassLibrary.Notifications.ObserveRemotePaymentPassesDidChange ((notification) => {
	Console.WriteLine ("Observed RemotePaymentPassesDidChangeNotification!");
};

// Listen to all notifications posted for a single object
var token = PKPassLibrary.Notifications.ObserveRemotePaymentPassesDidChange (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed RemotePaymentPassesDidChangeNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ObserveRemotePaymentPassesDidChange">
      <MemberSignature Language="C#" Value="public static Foundation.NSObject ObserveRemotePaymentPassesDidChange (Foundation.NSObject objectToObserve, EventHandler&lt;Foundation.NSNotificationEventArgs&gt; handler);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class Foundation.NSObject ObserveRemotePaymentPassesDidChange(class Foundation.NSObject objectToObserve, class System.EventHandler`1&lt;class Foundation.NSNotificationEventArgs&gt; handler) cil managed" />
      <MemberSignature Language="DocId" Value="M:PassKit.PKPassLibrary.Notifications.ObserveRemotePaymentPassesDidChange(Foundation.NSObject,System.EventHandler{Foundation.NSNotificationEventArgs})" />
      <MemberSignature Language="F#" Value="static member ObserveRemotePaymentPassesDidChange : Foundation.NSObject * EventHandler&lt;Foundation.NSNotificationEventArgs&gt; -&gt; Foundation.NSObject" Usage="PassKit.PKPassLibrary.Notifications.ObserveRemotePaymentPassesDidChange (objectToObserve, handler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Xamarin.iOS</AssemblyName>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="objectToObserve" Type="Foundation.NSObject" />
        <Parameter Name="handler" Type="System.EventHandler&lt;Foundation.NSNotificationEventArgs&gt;" />
      </Parameters>
      <Docs>
        <param name="objectToObserve">The object to observe.</param>
        <param name="handler">Method to invoke when the notification is posted.</param>
        <summary>Strongly typed notification for the <see cref="P:PassKit.PKPassLibrary.RemotePaymentPassesDidChangeNotification" /> constant.</summary>
        <returns>Token object that can be used to stop receiving notifications by either disposing it or passing it to <see cref="M:Foundation.NSNotificationCenter.RemoveObserver" /></returns>
        <remarks>
          <para id="tool-remark">This method can be used to subscribe for <see cref="P:PassKit.PKPassLibrary.RemotePaymentPassesDidChangeNotification" /> notifications.</para>
          <example>
            <code lang="C#"><![CDATA[
// Listen to all notifications posted for any object
var token = PKPassLibrary.Notifications.ObserveRemotePaymentPassesDidChange ((notification) => {
	Console.WriteLine ("Observed RemotePaymentPassesDidChangeNotification!");
};

// Listen to all notifications posted for a single object
var token = PKPassLibrary.Notifications.ObserveRemotePaymentPassesDidChange (objectToObserve, (notification) => {
	Console.WriteLine ($"Observed RemotePaymentPassesDidChangeNotification for {nameof (objectToObserve)}!");
};

// Stop listening for notifications
token.Dispose ();
]]></code>
          </example>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
