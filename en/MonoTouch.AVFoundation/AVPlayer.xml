<Type Name="AVPlayer" FullName="MonoTouch.AVFoundation.AVPlayer">
  <TypeSignature Language="C#" Value="public class AVPlayer : MonoTouch.Foundation.NSObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit AVPlayer extends MonoTouch.Foundation.NSObject" />
  <AssemblyInfo>
    <AssemblyName>monotouch</AssemblyName>
    <AssemblyVersion>0.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>MonoTouch.Foundation.NSObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>MonoTouch.Foundation.Register("AVPlayer", true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>MonoTouch.ObjCRuntime.Since(4, 0)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Encapsulates the control and UI of a component that plays back single or multiple items.</summary>
    <remarks>
      <para>An <see cref="T:MonoTouch.AVFoundation.AVPlayer" /> links the visual presentation, control, and dynamic state of one or more <see cref="T:MonoTouch.AVFoundation.AVAsset" />s.</para>
      <para>The visual element of the display is done by a <see cref="T:MonoTouch.AVFoundation.AVPlayerLayer" />, while it's current state (current time, etc.) is held in an <see cref="T:MonoTouch.AVFoundation.AVPlayerItem" />, which in turn references an <see cref="T:MonoTouch.AVFoundation.AVAsset" />.</para>
      <para>
        <img href="AVFoundation.AssetPlayerItemPlayer.png" />
      </para>
      <example>
        <code lang="C#"><![CDATA[
var asset = AVAsset.FromUrl(NSUrl.FromFilename("sample.m4v"));
var playerItem = new AVPlayerItem(asset);
var player = new AVPlayer(playerItem);
var playerLayer = AVPlayerLayer.FromPlayer(player);
View.Layer.AddSublayer(playerLayer);
player.Play();
          ]]></code>
      </example>
    </remarks>
    <related type="recipe" href="http://docs.xamarin.com/recipes/ios/media/video_and_photos/play_a_video_using_avplayer" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVPlayer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("init")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Default constructor that initializes a new instance of this class with no parameters.</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVPlayer (MonoTouch.AVFoundation.AVPlayerItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.AVFoundation.AVPlayerItem item) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithPlayerItem:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="item" Type="MonoTouch.AVFoundation.AVPlayerItem" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVPlayer (MonoTouch.Foundation.NSCoder coder);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSCoder coder) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithCoder:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="coder" Type="MonoTouch.Foundation.NSCoder" />
      </Parameters>
      <Docs>
        <param name="coder">The unarchiver object.</param>
        <summary>A constructor that initializes the object from the data stored in the unarchiver object.</summary>
        <remarks>This constructor is provided to allow the class to be initialized from an unarchiver (for example, during NIB deserialization).</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVPlayer (MonoTouch.Foundation.NSObjectFlag t);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSObjectFlag t) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="t" Type="MonoTouch.Foundation.NSObjectFlag" />
      </Parameters>
      <Docs>
        <param name="t">Unused sentinel value, pass NSObjectFlag.Empty.</param>
        <summary>Constructor to call on derived classes to skip initialization and merely allocate the object.</summary>
        <remarks>
          <para>This constructor should be called by derived classes when they completely construct the object in managed code and merely want the runtime to allocate and initialize the NSObject.   This is required to implement the two-step initialization process that Objective-C uses, the first step is to perform the object allocation, the second step is to initialize the object.   When you invoke the constructor that takes the NSObjectFlag.Empty you taking advantage of a direct path that goes all the way up to NSObject to merely allocate the object's memory and bind the Objective-C and C# objects together.    The actual initialization of the object is up to you.</para>
          <para>This constructor is typically used by the binding generator to allocate the object, but prevent the actual initialization to take place.   Once the allocation has taken place, the constructor has to initialize the object.   With constructors generated by the binding generator this means that it manually invokes one of the "init" methods to initialize the object.</para>
          <para>It is your responsibility to completely initialize the object if you chain up using the NSObjectFlag.Empty path.</para>
          <para>In general, if your constructors invokes the NSObjectFlag.Empty base implementation, then it should be calling an Objective-C init method.   If this is not the case, you should instead chain to the proper constructor in your class. </para>
          <para>The argument value is ignored and merely ensures that the only code that is executed is the construction phase is the basic NSObject allocation and runtime type registration.  Typically the chaining would look like this:</para>
          <example>
            <code lang="C#">
//
// The NSObjectFlag merely allocates the object and registers the
// C# class with the Objective-C runtime if necessary, but no actual
// initXxx method is invoked, that is done later in the constructor
//
// This is taken from MonoTouch's source code:
//
[Export ("initWithFrame:")]
public UIView (System.Drawing.RectangleF frame) : base (NSObjectFlag.Empty)
{
// Invoke the init method now.
	var initWithFrame = new Selector ("initWithFrame:").Handle;
	if (IsDirectBinding)
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSend_RectangleF (this.Handle, initWithFrame, frame);
	else
		Handle = MonoTouch.ObjCRuntime.Messaging.IntPtr_objc_msgSendSuper_RectangleF (this.SuperHandle, initWithFrame, frame);
}
</code>
          </example>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVPlayer (MonoTouch.Foundation.NSUrl URL);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class MonoTouch.Foundation.NSUrl URL) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("initWithURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="URL" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="URL">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public AVPlayer (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(native int handle) cil managed" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Pointer (handle) to the unmanaged object.</param>
        <summary>A constructor used when creating managed representations of unmanaged objects;  Called by the runtime.</summary>
        <remarks>
          <para>This constructor is invoked by the runtime infrastructure (<see cref="M:MonoTouch.ObjCRuntime.GetNSObject (System.IntPtr)" />) to create a new managed representation for a pointer to an unmanaged Objective-C object.    You should not invoke this method directly, instead you should call the GetNSObject method as it will prevent two instances of a managed object to point to the same native object.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ActionAtItemEnd">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.AVFoundation.AVPlayerActionAtItemEnd ActionAtItemEnd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.AVFoundation.AVPlayerActionAtItemEnd ActionAtItemEnd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("actionAtItemEnd")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setActionAtItemEnd:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AVFoundation.AVPlayerActionAtItemEnd</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>An action (advance, pause, or nothing) to be taken when the item stops playing.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddBoundaryTimeObserver">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject AddBoundaryTimeObserver (MonoTouch.Foundation.NSValue[] times, MonoTouch.CoreFoundation.DispatchQueue queue, MonoTouch.Foundation.NSAction handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject AddBoundaryTimeObserver(class MonoTouch.Foundation.NSValue[] times, class MonoTouch.CoreFoundation.DispatchQueue queue, class MonoTouch.Foundation.NSAction handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addBoundaryTimeObserverForTimes:queue:usingBlock:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="times" Type="MonoTouch.Foundation.NSValue[]" />
        <Parameter Name="queue" Type="MonoTouch.CoreFoundation.DispatchQueue" />
        <Parameter Name="handler" Type="MonoTouch.Foundation.NSAction">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDNSAction))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="times">To be added.</param>
        <param name="queue">If <see langword="null" />, the main queue will be used.</param>
        <param name="handler">To be added.</param>
        <summary>Invokes <paramref name="handler" /> at the specified <paramref name="times" />.</summary>
        <returns>An opaque object that must be passed as the <c>observer</c> argument to <see cref="M:MonoTouch.AVFoundation.AVPlayer.RemoveTimeObserver" />.</returns>
        <remarks>
          <para>The <paramref name="handler" /> may be invoked on a background thread. It is the application developer's responsibility to ensure that any UI manipulation performed by the <paramref name="handler" /> is done on the main thread (see <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" />).</para>
        </remarks>
        <altmember cref="M:MonoTouch.AVFoundation.AVPlayer.RemoveTimeObserver" />
        <altmember cref="M:MonoTouch.AVFoundation.AVPlayer.AddPeriodicObserver" />
      </Docs>
    </Member>
    <Member MemberName="AddPeriodicTimeObserver">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSObject AddPeriodicTimeObserver (MonoTouch.CoreMedia.CMTime interval, MonoTouch.CoreFoundation.DispatchQueue queue, MonoTouch.AVFoundation.AVTimeHandler handler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.Foundation.NSObject AddPeriodicTimeObserver(valuetype MonoTouch.CoreMedia.CMTime interval, class MonoTouch.CoreFoundation.DispatchQueue queue, class MonoTouch.AVFoundation.AVTimeHandler handler) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("addPeriodicTimeObserverForInterval:queue:usingBlock:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interval" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="queue" Type="MonoTouch.CoreFoundation.DispatchQueue" />
        <Parameter Name="handler" Type="MonoTouch.AVFoundation.AVTimeHandler">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDAVTimeHandler))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="interval">To be added.</param>
        <param name="queue">To be added.</param>
        <param name="handler">To be added.</param>
        <summary>Invokes <paramref name="handler" /> every <paramref name="interval" /> seconds, as well as on playback start, stop, and jump.</summary>
        <returns>An opaque object that must be passed as the <c>observer</c> argument to <see cref="M:MonoTouch.AVFoundation.AVPlayer.RemoveTimeObserver" /> .</returns>
        <remarks>
          <para>The <paramref name="handler" /> may be invoked on a background thread. It is the application developer's responsibility to ensure that any UI manipulation performed by the <paramref name="handler" /> is done on the main thread (see <see cref="M:MonoTouch.Foundation.NSObject.InvokeOnMainThread" />).</para>
          <para>
            <paramref name="handler" /> is additionally invoked whenever time jumps during playback and when playback starts or stops.</para>
        </remarks>
        <altmember cref="M:MonoTouch.AVFoundation.AVPlayer.RemoveTimeObserver" />
        <altmember cref="M:MonoTouch.AVFoundation.AVPlayer.AddBoundaryTimeObserver" />
      </Docs>
    </Member>
    <Member MemberName="AirPlayVideoActive">
      <MemberSignature Language="C#" Value="public virtual bool AirPlayVideoActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AirPlayVideoActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Deprecated in iOS 6.0. Use ExternalPlaybackActive instead", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isAirPlayVideoActive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application developers should not use this deprecated method. They should use <see cref="M:MonoTouch.AVFoundation.AVPlayer.ExternalPlaybackActive" /> instead.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsAirPlayVideo">
      <MemberSignature Language="C#" Value="public virtual bool AllowsAirPlayVideo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsAirPlayVideo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Deprecated in iOS 6.0. Use AllowsExternalPlayback instead", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("allowsAirPlayVideo")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAllowsAirPlayVideo:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application developers should not use this deprecated method. They should use <see cref="M:MonoTouch.AVFoundation.AVPlayer.AllowsExternalPlayback" /> instead.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowsExternalPlayback">
      <MemberSignature Language="C#" Value="public virtual bool AllowsExternalPlayback { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowsExternalPlayback" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("allowsExternalPlayback")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAllowsExternalPlayback:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the player can be switched to external playback mode.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AppliesMediaSelectionCriteriaAutomatically">
      <MemberSignature Language="C#" Value="public virtual bool AppliesMediaSelectionCriteriaAutomatically { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AppliesMediaSelectionCriteriaAutomatically" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("appliesMediaSelectionCriteriaAutomatically")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setAppliesMediaSelectionCriteriaAutomatically:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the player should apply system-specified preferences automatically to its items.</summary>
        <value>In iOS 7 and later, the default value is <see langword="true" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelPendingPrerolls">
      <MemberSignature Language="C#" Value="public virtual void CancelPendingPrerolls ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CancelPendingPrerolls() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("cancelPendingPrerolls")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Stops preloading media data.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClassHandle">
      <MemberSignature Language="C#" Value="public override IntPtr ClassHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int ClassHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The handle for this class.</summary>
        <value>The pointer to the Objective-C class.</value>
        <remarks>Each MonoTouch class mirrors an unmanaged Objective-C class.   This value contains the pointer to the Objective-C class, it is similar to calling objc_getClass with the object name.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClosedCaptionDisplayEnabled">
      <MemberSignature Language="C#" Value="public virtual bool ClosedCaptionDisplayEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ClosedCaptionDisplayEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isClosedCaptionDisplayEnabled")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setClosedCaptionDisplayEnabled:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the player displays closed captioning.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentItem">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.AVFoundation.AVPlayerItem CurrentItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.AVFoundation.AVPlayerItem CurrentItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("currentItem")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AVFoundation.AVPlayerItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current <see cref="T:MonoTouch.AVFoundation.AVPlayerItem" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CurrentTime">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreMedia.CMTime CurrentTime { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.CoreMedia.CMTime CurrentTime" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("currentTime")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMTime</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The <see cref="P:MonoTouch.AVFoundation.AVPlayerItem.CurrentTime" /> of the <see cref="P:MonoTouch.AVFoundation.AVPlayer.CurrentItem" />.</summary>
        <value>To be added.</value>
        <remarks>
          <para />
        </remarks>
        <altmember cref="M:MonoTouch.AVFoundation.AVPlayer.AddBoundaryTimeObserver" />
        <altmember cref="M:MonoTouch.AVFoundation.AVPlayer.AddPeriodicTimeObserver" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <para>If set to <see langword="true" />, the method is invoked directly and will dispose manage and unmanaged resources;   If set to <see langword="false" /> the method is being called by the garbage collector finalizer and should only release unmanaged resources.</para>
        </param>
        <summary>Releases the resources used by the AVPlayer object.</summary>
        <remarks>
          <para>This Dispose method releases the resources used by the AVPlayer class.</para>
          <para>This method is called by both the Dispose() method and the object finalizer (Finalize).    When invoked by the Dispose method, the parameter disposing <paramref name="disposing" /> is set to <see langword="true" /> and any managed object references that this object holds are also disposed or released;  when invoked by the object finalizer, on the finalizer thread the value is set to <see langword="false" />. </para>
          <para>Calling the Dispose method when you are finished using the AVPlayer ensures that all external resources used by this managed object are released as soon as possible.  Once you have invoked the Dispose method, the object is no longer useful and you should no longer make any calls to it.</para>
          <para>  For more information on how to override this method and on the Dispose/IDisposable pattern, read the ``Implementing a Dispose Method'' document at http://msdn.microsoft.com/en-us/library/fs2xkftw.aspx</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.Foundation.NSError Error { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSError Error" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("error")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSError</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see langword="null" /> or the error that caused the player to enter the failed state.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalPlaybackActive">
      <MemberSignature Language="C#" Value="public virtual bool ExternalPlaybackActive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExternalPlaybackActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isExternalPlaybackActive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the player is currently playing back in external playback mode.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExternalPlaybackVideoGravity">
      <MemberSignature Language="C#" Value="public Nullable&lt;MonoTouch.AVFoundation.AVLayerVideoGravity&gt; ExternalPlaybackVideoGravity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Nullable`1&lt;valuetype MonoTouch.AVFoundation.AVLayerVideoGravity&gt; ExternalPlaybackVideoGravity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;MonoTouch.AVFoundation.AVLayerVideoGravity&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The technique used to modify the video playback aspect ratio during external playback.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromPlayerItem">
      <MemberSignature Language="C#" Value="public static MonoTouch.AVFoundation.AVPlayer FromPlayerItem (MonoTouch.AVFoundation.AVPlayerItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.AVFoundation.AVPlayer FromPlayerItem(class MonoTouch.AVFoundation.AVPlayerItem item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("playerWithPlayerItem:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AVFoundation.AVPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MonoTouch.AVFoundation.AVPlayerItem" />
      </Parameters>
      <Docs>
        <param name="item">The <see cref="T:MonoTouch.AVFoundation.AVPlayerItem" /> that will become the <see cref="P:MonoTouch.AVFoundation.AVPlayer.CurrentItem" />.</param>
        <summary>A factory method to create an <see cref="T:MonoTouch.AVFoundation.AVPlayer" /> for the specified <paramref name="item" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FromUrl">
      <MemberSignature Language="C#" Value="public static MonoTouch.AVFoundation.AVPlayer FromUrl (MonoTouch.Foundation.NSUrl URL);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class MonoTouch.AVFoundation.AVPlayer FromUrl(class MonoTouch.Foundation.NSUrl URL) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("playerWithURL:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AVFoundation.AVPlayer</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="URL" Type="MonoTouch.Foundation.NSUrl" />
      </Parameters>
      <Docs>
        <param name="URL">A URL containing a playable media asset.</param>
        <summary>A factory method to create an <see cref="T:MonoTouch.AVFoundation.AVPlayer" /> for the media asset located at the specified <paramref name="URL" />.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MasterClock">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.CoreMedia.CMClock MasterClock { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.CoreMedia.CMClock MasterClock" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("masterClock")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMasterClock:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.CoreMedia.CMClock</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The master clock used for <see cref="T:MonoTouch.AVFoundation.AVPlayerItem" /> timebases.</summary>
        <value>The default value is <see langword="null" />, which indicates that the master clock is internally determined.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MediaSelectionCriteriaForMediaCharacteristic">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.AVFoundation.AVPlayerMediaSelectionCriteria MediaSelectionCriteriaForMediaCharacteristic (MonoTouch.Foundation.NSString avMediaCharacteristic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class MonoTouch.AVFoundation.AVPlayerMediaSelectionCriteria MediaSelectionCriteriaForMediaCharacteristic(class MonoTouch.Foundation.NSString avMediaCharacteristic) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("mediaSelectionCriteriaForMediaCharacteristic:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AVFoundation.AVPlayerMediaSelectionCriteria</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="avMediaCharacteristic" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="avMediaCharacteristic">Must be <see cref="P:MonoTouch.AVFoundation.AVMediaCharacteristic.Audible" />, <see cref="P:MonoTouch.AVFoundation.AVMediaCharacteristic.Legible" />, or <see cref="P:MonoTouch.AVFoundation.AVMediaCharacteristic.Visual" />.</param>
        <summary>Retrieves the system-specified selection criteria for the <paramref name="avMediaCharacteristic" />.</summary>
        <returns>To be added.</returns>
        <remarks>
          <para>As of iOS 7, <paramref name="avMediaCharacteristic" /> must be <see cref="P:MonoTouch.AVFoundation.AVMediaCharacteristic.Audible" />, <see cref="P:MonoTouch.AVFoundation.AVMediaCharacteristic.Legible" />, or <see cref="P:MonoTouch.AVFoundation.AVMediaCharacteristic.Visual" />.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Muted">
      <MemberSignature Language="C#" Value="public virtual bool Muted { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Muted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Lion</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("isMuted")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Lion</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setMuted:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Lion</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the <see cref="T:MonoTouch.AVFoundation.AVPlayer" /> is currently muted.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputObscuredDueToInsufficientExternalProtection">
      <MemberSignature Language="C#" Value="public virtual bool OutputObscuredDueToInsufficientExternalProtection { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OutputObscuredDueToInsufficientExternalProtection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("outputObscuredDueToInsufficientExternalProtection")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether DRM is causing output to be obscured.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Pause">
      <MemberSignature Language="C#" Value="public virtual void Pause ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Pause() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("pause")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Asynchronously pauses playback.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Play">
      <MemberSignature Language="C#" Value="public virtual void Play ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Play() cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("play")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Begins playback of the <see cref="P:MonoTouch.AVFoundation.AVPlayer.CurrentItem" />.</summary>
        <remarks>
          <para>This method is functionally equivalent to setting <see cref="P:MonoTouch.AVFoundation.AVPlayer.Rate" /> to 1.0f.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Preroll">
      <MemberSignature Language="C#" Value="public virtual void Preroll (float rate, MonoTouch.AVFoundation.AVCompletion onComplete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Preroll(float32 rate, class MonoTouch.AVFoundation.AVCompletion onComplete) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("prerollAtRate:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rate" Type="System.Single" />
        <Parameter Name="onComplete" Type="MonoTouch.AVFoundation.AVCompletion">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDAVCompletion))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="rate">Playback rate.</param>
        <param name="onComplete">Method to invoke when loading completes.   The loading might fail, so status code passed determines whether it failed loading or not.</param>
        <summary>Starts loading media into the playback buffers.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="PrerollAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; PrerollAsync (float rate);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; PrerollAsync(float32 rate) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rate" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rate">Playback rate.</param>
        <summary>Starts loading media into the playback buffers.</summary>
        <returns>
          <para>A task that represents the asynchronous Preroll operation.   The value of the TResult parameter is a MonoTouch.AVFoundation.AVCompletion.</para>
        </returns>
        <remarks>
          <para copied="true">The PrerollAsync method is suitable to be used with C# async by returning control to the caller with a Task representing the operation.</para>
          <para copied="true">To be added.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rate">
      <MemberSignature Language="C#" Value="public virtual float Rate { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Rate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("rate")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setRate:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current rate of playback.</summary>
        <value>To be added.</value>
        <remarks>
          <para>Setting this value to 1.0f is equivalent to calling the <see cref="M:MonoTouch.AVFoundation.AVPlayer.Play" /> method and setting this value to 0.0f is equivalent to calling the <see cref="M:MonoTouch.AVFoundation.AVPlayer.Pause" /> method.</para>
          <para>Some <see cref="T:MonoTouch.AVFoundation.AVAsset" />s can support reverse-playback via negative rates (see <see cref="P:MonoTouch.AVFoundation.AVPlayerItem.CanPlayReverse" />).</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveTimeObserver">
      <MemberSignature Language="C#" Value="public virtual void RemoveTimeObserver (MonoTouch.Foundation.NSObject observer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveTimeObserver(class MonoTouch.Foundation.NSObject observer) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("removeTimeObserver:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="observer" Type="MonoTouch.Foundation.NSObject" />
      </Parameters>
      <Docs>
        <param name="observer">The object returned when the observer was registered with <see cref="M:MonoTouch.AVFoundation.AVPlayer.AddBoundaryTimeObserver" /> or <see cref="M:MonoTouch.AVFoundation.AVPlayer.AddPeriodicTimeObserver" />.</param>
        <summary>Removes periodic or boundary-time observers.</summary>
        <remarks>
          <para>When disposing observers, this method must be called for every handler added with <see cref="M:MonoTouch.AVFoundation.AVPlayer.AddBoundaryTimeObserver" /> or <see cref="M:MonoTouch.AVFoundation.AVPlayer.AddPeriodicTimeObserver" />. </para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReplaceCurrentItemWithPlayerItem">
      <MemberSignature Language="C#" Value="public virtual void ReplaceCurrentItemWithPlayerItem (MonoTouch.AVFoundation.AVPlayerItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReplaceCurrentItemWithPlayerItem(class MonoTouch.AVFoundation.AVPlayerItem item) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("replaceCurrentItemWithPlayerItem:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="MonoTouch.AVFoundation.AVPlayerItem" />
      </Parameters>
      <Docs>
        <param name="item">To be added.</param>
        <summary>Replaces the <see cref="P:MonoTouch.AVFoundation.AVPlayer.CurrentItem" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public virtual void Seek (MonoTouch.CoreMedia.CMTime toTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Seek(valuetype MonoTouch.CoreMedia.CMTime toTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("seekToTime:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toTime" Type="MonoTouch.CoreMedia.CMTime" />
      </Parameters>
      <Docs>
        <param name="toTime">Specific time to seek to.</param>
        <summary>Seeks to a specific location in the playback stream.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public virtual void Seek (MonoTouch.Foundation.NSDate date);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Seek(class MonoTouch.Foundation.NSDate date) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("seekToDate:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="date" Type="MonoTouch.Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="date">Target data to seek to.</param>
        <summary>Seeks to a specific location in the playback stream</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public virtual void Seek (MonoTouch.CoreMedia.CMTime time, MonoTouch.AVFoundation.AVCompletion completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Seek(valuetype MonoTouch.CoreMedia.CMTime time, class MonoTouch.AVFoundation.AVCompletion completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("seekToTime:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="completion" Type="MonoTouch.AVFoundation.AVCompletion">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDAVCompletion))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="time">Specific time to seek to.</param>
        <param name="completion">Method to invoke when the seek operation completes.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (MonoTouch.CoreMedia.CMTime time, MonoTouch.AVFoundation.AVCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype MonoTouch.CoreMedia.CMTime time, class MonoTouch.AVFoundation.AVCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use Seek(CMTime, AVCompletion) instead, the callback contains a `bool finished' parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="completion" Type="MonoTouch.AVFoundation.AVCompletionHandler" />
      </Parameters>
      <Docs>
        <param name="time">Seek time target.</param>
        <param name="completion">Method to invoke when the seek operation completes.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public virtual void Seek (MonoTouch.Foundation.NSDate date, MonoTouch.AVFoundation.AVCompletion onComplete);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Seek(class MonoTouch.Foundation.NSDate date, class MonoTouch.AVFoundation.AVCompletion onComplete) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("seekToDate:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="date" Type="MonoTouch.Foundation.NSDate" />
        <Parameter Name="onComplete" Type="MonoTouch.AVFoundation.AVCompletion">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDAVCompletion))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="date">Target data to seek to</param>
        <param name="onComplete">Method to invoke when the seek operation completes.</param>
        <summary>Seeks to a specific location in the playback stream</summary>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public virtual void Seek (MonoTouch.CoreMedia.CMTime toTime, MonoTouch.CoreMedia.CMTime toleranceBefore, MonoTouch.CoreMedia.CMTime toleranceAfter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Seek(valuetype MonoTouch.CoreMedia.CMTime toTime, valuetype MonoTouch.CoreMedia.CMTime toleranceBefore, valuetype MonoTouch.CoreMedia.CMTime toleranceAfter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("seekToTime:toleranceBefore:toleranceAfter:")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="toTime" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="toleranceBefore" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="toleranceAfter" Type="MonoTouch.CoreMedia.CMTime" />
      </Parameters>
      <Docs>
        <param name="toTime">To be added.</param>
        <param name="toleranceBefore">Time tolerance allowed before the time.</param>
        <param name="toleranceAfter">Time tolerance allowed after the time.</param>
        <summary>Blocking: Seeks to a specific location in the playback stream</summary>
        <remarks>
          <para>If the tolerance is zero, then the player might need to perform more work before completing.</para>
          <para>Use the Async versions of this API to avoid blocking.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public virtual void Seek (MonoTouch.CoreMedia.CMTime time, MonoTouch.CoreMedia.CMTime toleranceBefore, MonoTouch.CoreMedia.CMTime toleranceAfter, MonoTouch.AVFoundation.AVCompletion completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Seek(valuetype MonoTouch.CoreMedia.CMTime time, valuetype MonoTouch.CoreMedia.CMTime toleranceBefore, valuetype MonoTouch.CoreMedia.CMTime toleranceAfter, class MonoTouch.AVFoundation.AVCompletion completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("seekToTime:toleranceBefore:toleranceAfter:completionHandler:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="toleranceBefore" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="toleranceAfter" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="completion" Type="MonoTouch.AVFoundation.AVCompletion">
          <Attributes>
            <Attribute>
              <AttributeName>MonoTouch.ObjCRuntime.BlockProxy(typeof(MonoTouch.ObjCRuntime.Trampolines/NIDAVCompletion))</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="time">Seek time target.</param>
        <param name="toleranceBefore">Time tolerance allowed before the time.</param>
        <param name="toleranceAfter">Time tolerance allowed after the time.</param>
        <param name="completion">Method to invoke when the seek operation completes.</param>
        <summary>Seeks to a specific location in the playback stream</summary>
        <remarks>If the tolerance is zero, then the player might need to perform more work before completing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Seek">
      <MemberSignature Language="C#" Value="public void Seek (MonoTouch.CoreMedia.CMTime time, MonoTouch.CoreMedia.CMTime toleranceBefore, MonoTouch.CoreMedia.CMTime toleranceAfter, MonoTouch.AVFoundation.AVCompletionHandler completion);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Seek(valuetype MonoTouch.CoreMedia.CMTime time, valuetype MonoTouch.CoreMedia.CMTime toleranceBefore, valuetype MonoTouch.CoreMedia.CMTime toleranceAfter, class MonoTouch.AVFoundation.AVCompletionHandler completion) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use Seek(CMTime, CMTime, CMTIme, AVCompletion) instead, the callback contains a `bool finished' parameter")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="toleranceBefore" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="toleranceAfter" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="completion" Type="MonoTouch.AVFoundation.AVCompletionHandler" />
      </Parameters>
      <Docs>
        <param name="time">Seek time target.</param>
        <param name="toleranceBefore">Time tolerance allowed before the time.</param>
        <param name="toleranceAfter">Time tolerance allowed after the time.</param>
        <param name="completion">Method to invoke when the seek operation completes.</param>
        <summary>Seeks to a specific location in the playback stream</summary>
        <remarks>If the tolerance is zero, then the player might need to perform more work before completing.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; SeekAsync (MonoTouch.CoreMedia.CMTime time);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; SeekAsync(valuetype MonoTouch.CoreMedia.CMTime time) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="MonoTouch.CoreMedia.CMTime" />
      </Parameters>
      <Docs>
        <param name="time">Seek time target.</param>
        <summary>Seeks to a specific location in the playback stream</summary>
        <returns>
          <para>A task that represents the asynchronous Seek operation.   The value of the TResult parameter is a MonoTouch.AVFoundation.AVCompletion.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; SeekAsync (MonoTouch.Foundation.NSDate date);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; SeekAsync(class MonoTouch.Foundation.NSDate date) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="date" Type="MonoTouch.Foundation.NSDate" />
      </Parameters>
      <Docs>
        <param name="date">Target data to seek to</param>
        <summary>Seeks to a specific location in the playback stream</summary>
        <returns>
          <para>A task that represents the asynchronous Seek operation.   The value of the TResult parameter is a MonoTouch.AVFoundation.AVCompletion.</para>
        </returns>
        <remarks>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SeekAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;bool&gt; SeekAsync (MonoTouch.CoreMedia.CMTime time, MonoTouch.CoreMedia.CMTime toleranceBefore, MonoTouch.CoreMedia.CMTime toleranceAfter);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;bool&gt; SeekAsync(valuetype MonoTouch.CoreMedia.CMTime time, valuetype MonoTouch.CoreMedia.CMTime toleranceBefore, valuetype MonoTouch.CoreMedia.CMTime toleranceAfter) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="time" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="toleranceBefore" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="toleranceAfter" Type="MonoTouch.CoreMedia.CMTime" />
      </Parameters>
      <Docs>
        <param name="time">To be added.</param>
        <param name="toleranceBefore">To be added.</param>
        <param name="toleranceAfter">To be added.</param>
        <summary>Seeks to a specific time, with a specified tolerance. May be higher performane than non-tolerant seek.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetMediaSelectionCriteria">
      <MemberSignature Language="C#" Value="public virtual void SetMediaSelectionCriteria (MonoTouch.AVFoundation.AVPlayerMediaSelectionCriteria criteria, MonoTouch.Foundation.NSString avMediaCharacteristic);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetMediaSelectionCriteria(class MonoTouch.AVFoundation.AVPlayerMediaSelectionCriteria criteria, class MonoTouch.Foundation.NSString avMediaCharacteristic) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setMediaSelectionCriteria:forMediaCharacteristic:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="criteria" Type="MonoTouch.AVFoundation.AVPlayerMediaSelectionCriteria" />
        <Parameter Name="avMediaCharacteristic" Type="MonoTouch.Foundation.NSString" />
      </Parameters>
      <Docs>
        <param name="criteria">To be added.</param>
        <param name="avMediaCharacteristic">To be added.</param>
        <summary>Sets criteria for media that has the specific <paramref name="avMediaCharacteristic" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SetRate">
      <MemberSignature Language="C#" Value="public virtual void SetRate (float rate, MonoTouch.CoreMedia.CMTime itemTime, MonoTouch.CoreMedia.CMTime hostClockTime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetRate(float32 rate, valuetype MonoTouch.CoreMedia.CMTime itemTime, valuetype MonoTouch.CoreMedia.CMTime hostClockTime) cil managed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.Foundation.Export("setRate:time:atHostTime:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="rate" Type="System.Single" />
        <Parameter Name="itemTime" Type="MonoTouch.CoreMedia.CMTime" />
        <Parameter Name="hostClockTime" Type="MonoTouch.CoreMedia.CMTime" />
      </Parameters>
      <Docs>
        <param name="rate">To be added.</param>
        <param name="itemTime">To be added.</param>
        <param name="hostClockTime">To be added.</param>
        <summary>Synchronizes the rate and playback time of the <see cref="P:MonoTouch.AVFoundation.AVPlayer.CurrentItem" /> to the <paramref name="hostClockTime" />.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Status">
      <MemberSignature Language="C#" Value="public virtual MonoTouch.AVFoundation.AVPlayerStatus Status { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype MonoTouch.AVFoundation.AVPlayerStatus Status" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("status")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.AVFoundation.AVPlayerStatus</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current status of the <see cref="T:MonoTouch.AVFoundation.AVPlayer" />.</summary>
        <value>To be added.</value>
        <remarks>
          <para>This property will be <see cref="P:MonoTouch.AVFoundation.AVPlayerStatus.Unknown" /> until the player has attempted to load media resources.</para>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesAirPlayVideoWhileAirPlayScreenIsActive">
      <MemberSignature Language="C#" Value="public virtual bool UsesAirPlayVideoWhileAirPlayScreenIsActive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesAirPlayVideoWhileAirPlayScreenIsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("Deprecated in iOS 6.0. Use UsesExternalPlaybackWhileExternalScreenIsActive instead", false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("usesAirPlayVideoWhileAirPlayScreenIsActive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setUsesAirPlayVideoWhileAirPlayScreenIsActive:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(5, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Application developers should not use this deprecated method. Instead, they should use <see cref="P:MonoTouch.AVFoundation.AVPlayer.UsesExternalPlaybakWhileExternalScreenIsActive" />.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="UsesExternalPlaybackWhileExternalScreenIsActive">
      <MemberSignature Language="C#" Value="public virtual bool UsesExternalPlaybackWhileExternalScreenIsActive { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UsesExternalPlaybackWhileExternalScreenIsActive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("usesExternalPlaybackWhileExternalScreenIsActive")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setUsesExternalPlaybackWhileExternalScreenIsActive:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Whether the player should automatically switch to external playback mode for video when an external screen is available.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Volume">
      <MemberSignature Language="C#" Value="public virtual float Volume { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 Volume" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Lion</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("volume")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Lion</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setVolume:")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Lion</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(7, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>The current volume, ranging from 0 for silence to 1.0 for full volume.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WeakExternalPlaybackVideoGravity">
      <MemberSignature Language="C#" Value="protected virtual MonoTouch.Foundation.NSString WeakExternalPlaybackVideoGravity { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class MonoTouch.Foundation.NSString WeakExternalPlaybackVideoGravity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyVersion>0.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.Foundation.Export("externalPlaybackVideoGravity", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>get: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.Foundation.Export("setExternalPlaybackVideoGravity:", MonoTouch.ObjCRuntime.ArgumentSemantic.Copy)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>set: MonoTouch.ObjCRuntime.Since(6, 0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>MonoTouch.Foundation.NSString</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
